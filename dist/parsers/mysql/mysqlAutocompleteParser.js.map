{"version":3,"file":"mysqlAutocompleteParser.js","sourceRoot":"","sources":["../../../src/parsers/mysql/mysqlAutocompleteParser.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    CharStreams,\n    CommonTokenStream,\n    TokenStream,\n    ANTLRErrorListener,\n    Token,\n    ATNSimulator,\n    Recognizer,\n} from 'antlr4ng';\nimport * as c3 from 'antlr4-c3';\n\nimport {MySqlLexer} from './generated/MySqlLexer.js';\nimport {MySqlParser} from './generated/MySqlParser.js';\n// import {MySqlParserVisitor} from './generated/MySqlParserVisitor.js';\n\ninterface CursorPosition {\n    line: number;\n    column: number;\n}\n\ninterface TokenPosition {\n    startLine: number;\n    startColumn: number;\n    endLine: number;\n    endColumn: number;\n}\n\ninterface ParserSyntaxError extends TokenPosition {\n    message: string;\n}\n\ninterface KeywordSuggestion {\n    value: string;\n}\n\n// class Visitor extends MySqlParserVisitor<{}> {\n//     constructor() {\n//         super();\n//     }\n\n//     visitCreateDatabase = (a) => {\n//         return {};\n//     };\n// }\n\nconst possibleIdentifierPrefix = /[\\w]$/;\nconst lineSeparator = /\\n|\\r|\\r\\n/g;\n\nfunction getTokenPosition(token: Token): TokenPosition {\n    const startColumn = token.column;\n    const endColumn = token.column + (token.text?.length || 0);\n    const startLine = token.line;\n    const endLine =\n        token.type !== MySqlLexer.SPACE || !token.text\n            ? startLine\n            : startLine + (token.text.match(lineSeparator)?.length || 0);\n\n    return {startColumn, startLine, endColumn, endLine};\n}\n\nfunction findCursorTokenIndex(\n    tokenStream: TokenStream,\n    cursor: CursorPosition,\n): number | undefined {\n    // Cursor position is 1-based, while token's charPositionInLine is 0-based\n    const cursorCol = cursor.column - 1;\n\n    for (let i = 0; i < tokenStream.size; i++) {\n        const token = tokenStream.get(i);\n        const {startColumn, startLine, endColumn, endLine} = getTokenPosition(token);\n\n        // endColumn makes sense only if startLine === endLine\n        if (endLine > cursor.line || (startLine === cursor.line && endColumn > cursorCol)) {\n            if (\n                i > 0 &&\n                startLine === cursor.line &&\n                startColumn === cursorCol &&\n                // If previous token is an identifier (i.e. word, not a symbol),\n                // then we want to return previous token index\n                possibleIdentifierPrefix.test(tokenStream.get(i - 1).text || '')\n            ) {\n                return i - 1;\n            } else if (tokenStream.get(i).type === MySqlLexer.SPACE) {\n                return i + 1;\n            }\n            return i;\n        }\n    }\n\n    return undefined;\n}\n\nclass MySqlErrorListener implements ANTLRErrorListener {\n    errors: ParserSyntaxError[];\n\n    constructor() {\n        this.errors = [];\n    }\n\n    syntaxError<S extends Token, T extends ATNSimulator>(\n        _recognizer: Recognizer<T>,\n        token: S | null,\n        startLine: number,\n        startColumn: number,\n        message: string,\n    ) {\n        if (token) {\n            const tokenPosition = getTokenPosition(token);\n            this.errors.push({message, ...tokenPosition});\n        } else {\n            this.errors.push({\n                message,\n                startLine,\n                startColumn,\n                endLine: startLine,\n                endColumn: startColumn,\n            });\n        }\n    }\n\n    reportAmbiguity() {}\n\n    reportAttemptingFullContext() {}\n\n    reportContextSensitivity() {}\n}\n\nexport function parseMySqlQueryWithoutCursor(query: string): {errors: ParserSyntaxError[]} {\n    const inputStream = CharStreams.fromString(query);\n    const lexer = new MySqlLexer(inputStream);\n    const tokenStream = new CommonTokenStream(lexer);\n    const parser = new MySqlParser(tokenStream);\n    const errorListener = new MySqlErrorListener();\n\n    parser.removeErrorListeners();\n    parser.addErrorListener(errorListener);\n    parser.root();\n\n    return {errors: errorListener.errors};\n}\n\nexport function parseMySqlQuery(\n    query: string,\n    cursor: CursorPosition,\n): {errors: ParserSyntaxError[]; suggestKeywords: KeywordSuggestion[]} {\n    const inputStream = CharStreams.fromString(query);\n    const lexer = new MySqlLexer(inputStream);\n    const tokenStream = new CommonTokenStream(lexer);\n    const parser = new MySqlParser(tokenStream);\n    const errorListener = new MySqlErrorListener();\n\n    parser.removeErrorListeners();\n    parser.addErrorListener(errorListener);\n    parser.root();\n\n    const core = new c3.CodeCompletionCore(parser);\n    core.preferredRules = new Set([MySqlParser.RULE_tableName]);\n    const cursorPosition = findCursorTokenIndex(tokenStream, cursor);\n    const suggestKeywords: KeywordSuggestion[] = [];\n\n    if (cursorPosition !== undefined) {\n        const candidates = core.collectCandidates(cursorPosition);\n        candidates.tokens.forEach((_, k) =>\n            suggestKeywords.push({value: parser.vocabulary.getSymbolicName(k) || ''}),\n        );\n    }\n\n    return {errors: errorListener.errors, suggestKeywords};\n}\n"]}