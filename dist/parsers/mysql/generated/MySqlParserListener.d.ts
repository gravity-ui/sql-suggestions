import { ErrorNode, ParseTreeListener, ParserRuleContext, TerminalNode } from "antlr4ng";
import { RootContext } from "./MySqlParser.js";
import { SqlStatementsContext } from "./MySqlParser.js";
import { SqlStatementContext } from "./MySqlParser.js";
import { EmptyStatement_Context } from "./MySqlParser.js";
import { DdlStatementContext } from "./MySqlParser.js";
import { DmlStatementContext } from "./MySqlParser.js";
import { TransactionStatementContext } from "./MySqlParser.js";
import { ReplicationStatementContext } from "./MySqlParser.js";
import { PreparedStatementContext } from "./MySqlParser.js";
import { CompoundStatementContext } from "./MySqlParser.js";
import { AdministrationStatementContext } from "./MySqlParser.js";
import { UtilityStatementContext } from "./MySqlParser.js";
import { CreateDatabaseContext } from "./MySqlParser.js";
import { CreateEventContext } from "./MySqlParser.js";
import { CreateIndexContext } from "./MySqlParser.js";
import { CreateLogfileGroupContext } from "./MySqlParser.js";
import { CreateProcedureContext } from "./MySqlParser.js";
import { CreateFunctionContext } from "./MySqlParser.js";
import { CreateRoleContext } from "./MySqlParser.js";
import { CreateServerContext } from "./MySqlParser.js";
import { CopyCreateTableContext } from "./MySqlParser.js";
import { QueryCreateTableContext } from "./MySqlParser.js";
import { ColumnCreateTableContext } from "./MySqlParser.js";
import { CreateTablespaceInnodbContext } from "./MySqlParser.js";
import { CreateTablespaceNdbContext } from "./MySqlParser.js";
import { CreateTriggerContext } from "./MySqlParser.js";
import { WithClauseContext } from "./MySqlParser.js";
import { CommonTableExpressionsContext } from "./MySqlParser.js";
import { CteNameContext } from "./MySqlParser.js";
import { CteColumnNameContext } from "./MySqlParser.js";
import { CreateViewContext } from "./MySqlParser.js";
import { CreateDatabaseOptionContext } from "./MySqlParser.js";
import { CharSetContext } from "./MySqlParser.js";
import { CurrentUserExpressionContext } from "./MySqlParser.js";
import { OwnerStatementContext } from "./MySqlParser.js";
import { PreciseScheduleContext } from "./MySqlParser.js";
import { IntervalScheduleContext } from "./MySqlParser.js";
import { TimestampValueContext } from "./MySqlParser.js";
import { IntervalExprContext } from "./MySqlParser.js";
import { IntervalTypeContext } from "./MySqlParser.js";
import { EnableTypeContext } from "./MySqlParser.js";
import { IndexTypeContext } from "./MySqlParser.js";
import { IndexOptionContext } from "./MySqlParser.js";
import { ProcedureParameterContext } from "./MySqlParser.js";
import { FunctionParameterContext } from "./MySqlParser.js";
import { RoutineCommentContext } from "./MySqlParser.js";
import { RoutineLanguageContext } from "./MySqlParser.js";
import { RoutineBehaviorContext } from "./MySqlParser.js";
import { RoutineDataContext } from "./MySqlParser.js";
import { RoutineSecurityContext } from "./MySqlParser.js";
import { ServerOptionContext } from "./MySqlParser.js";
import { CreateDefinitionsContext } from "./MySqlParser.js";
import { ColumnDeclarationContext } from "./MySqlParser.js";
import { ConstraintDeclarationContext } from "./MySqlParser.js";
import { IndexDeclarationContext } from "./MySqlParser.js";
import { ColumnDefinitionContext } from "./MySqlParser.js";
import { NullColumnConstraintContext } from "./MySqlParser.js";
import { DefaultColumnConstraintContext } from "./MySqlParser.js";
import { VisibilityColumnConstraintContext } from "./MySqlParser.js";
import { InvisibilityColumnConstraintContext } from "./MySqlParser.js";
import { AutoIncrementColumnConstraintContext } from "./MySqlParser.js";
import { PrimaryKeyColumnConstraintContext } from "./MySqlParser.js";
import { UniqueKeyColumnConstraintContext } from "./MySqlParser.js";
import { CommentColumnConstraintContext } from "./MySqlParser.js";
import { FormatColumnConstraintContext } from "./MySqlParser.js";
import { StorageColumnConstraintContext } from "./MySqlParser.js";
import { ReferenceColumnConstraintContext } from "./MySqlParser.js";
import { CollateColumnConstraintContext } from "./MySqlParser.js";
import { GeneratedColumnConstraintContext } from "./MySqlParser.js";
import { SerialDefaultColumnConstraintContext } from "./MySqlParser.js";
import { CheckColumnConstraintContext } from "./MySqlParser.js";
import { PrimaryKeyTableConstraintContext } from "./MySqlParser.js";
import { UniqueKeyTableConstraintContext } from "./MySqlParser.js";
import { ForeignKeyTableConstraintContext } from "./MySqlParser.js";
import { CheckTableConstraintContext } from "./MySqlParser.js";
import { ReferenceDefinitionContext } from "./MySqlParser.js";
import { ReferenceActionContext } from "./MySqlParser.js";
import { ReferenceControlTypeContext } from "./MySqlParser.js";
import { SimpleIndexDeclarationContext } from "./MySqlParser.js";
import { SpecialIndexDeclarationContext } from "./MySqlParser.js";
import { TableOptionEngineContext } from "./MySqlParser.js";
import { TableOptionEngineAttributeContext } from "./MySqlParser.js";
import { TableOptionAutoextendSizeContext } from "./MySqlParser.js";
import { TableOptionAutoIncrementContext } from "./MySqlParser.js";
import { TableOptionAverageContext } from "./MySqlParser.js";
import { TableOptionCharsetContext } from "./MySqlParser.js";
import { TableOptionChecksumContext } from "./MySqlParser.js";
import { TableOptionCollateContext } from "./MySqlParser.js";
import { TableOptionCommentContext } from "./MySqlParser.js";
import { TableOptionCompressionContext } from "./MySqlParser.js";
import { TableOptionConnectionContext } from "./MySqlParser.js";
import { TableOptionDataDirectoryContext } from "./MySqlParser.js";
import { TableOptionDelayContext } from "./MySqlParser.js";
import { TableOptionEncryptionContext } from "./MySqlParser.js";
import { TableOptionPageCompressedContext } from "./MySqlParser.js";
import { TableOptionPageCompressionLevelContext } from "./MySqlParser.js";
import { TableOptionEncryptionKeyIdContext } from "./MySqlParser.js";
import { TableOptionIndexDirectoryContext } from "./MySqlParser.js";
import { TableOptionInsertMethodContext } from "./MySqlParser.js";
import { TableOptionKeyBlockSizeContext } from "./MySqlParser.js";
import { TableOptionMaxRowsContext } from "./MySqlParser.js";
import { TableOptionMinRowsContext } from "./MySqlParser.js";
import { TableOptionPackKeysContext } from "./MySqlParser.js";
import { TableOptionPasswordContext } from "./MySqlParser.js";
import { TableOptionRowFormatContext } from "./MySqlParser.js";
import { TableOptionStartTransactionContext } from "./MySqlParser.js";
import { TableOptionSecondaryEngineAttributeContext } from "./MySqlParser.js";
import { TableOptionRecalculationContext } from "./MySqlParser.js";
import { TableOptionPersistentContext } from "./MySqlParser.js";
import { TableOptionSamplePageContext } from "./MySqlParser.js";
import { TableOptionTablespaceContext } from "./MySqlParser.js";
import { TableOptionTableTypeContext } from "./MySqlParser.js";
import { TableOptionTransactionalContext } from "./MySqlParser.js";
import { TableOptionUnionContext } from "./MySqlParser.js";
import { TableTypeContext } from "./MySqlParser.js";
import { TablespaceStorageContext } from "./MySqlParser.js";
import { PartitionDefinitionsContext } from "./MySqlParser.js";
import { PartitionFunctionHashContext } from "./MySqlParser.js";
import { PartitionFunctionKeyContext } from "./MySqlParser.js";
import { PartitionFunctionRangeContext } from "./MySqlParser.js";
import { PartitionFunctionListContext } from "./MySqlParser.js";
import { SubPartitionFunctionHashContext } from "./MySqlParser.js";
import { SubPartitionFunctionKeyContext } from "./MySqlParser.js";
import { PartitionComparisonContext } from "./MySqlParser.js";
import { PartitionListAtomContext } from "./MySqlParser.js";
import { PartitionListVectorContext } from "./MySqlParser.js";
import { PartitionSimpleContext } from "./MySqlParser.js";
import { PartitionDefinerAtomContext } from "./MySqlParser.js";
import { PartitionDefinerVectorContext } from "./MySqlParser.js";
import { SubpartitionDefinitionContext } from "./MySqlParser.js";
import { PartitionOptionEngineContext } from "./MySqlParser.js";
import { PartitionOptionCommentContext } from "./MySqlParser.js";
import { PartitionOptionDataDirectoryContext } from "./MySqlParser.js";
import { PartitionOptionIndexDirectoryContext } from "./MySqlParser.js";
import { PartitionOptionMaxRowsContext } from "./MySqlParser.js";
import { PartitionOptionMinRowsContext } from "./MySqlParser.js";
import { PartitionOptionTablespaceContext } from "./MySqlParser.js";
import { PartitionOptionNodeGroupContext } from "./MySqlParser.js";
import { AlterSimpleDatabaseContext } from "./MySqlParser.js";
import { AlterUpgradeNameContext } from "./MySqlParser.js";
import { AlterEventContext } from "./MySqlParser.js";
import { AlterFunctionContext } from "./MySqlParser.js";
import { AlterInstanceContext } from "./MySqlParser.js";
import { AlterLogfileGroupContext } from "./MySqlParser.js";
import { AlterProcedureContext } from "./MySqlParser.js";
import { AlterServerContext } from "./MySqlParser.js";
import { AlterTableContext } from "./MySqlParser.js";
import { AlterTablespaceContext } from "./MySqlParser.js";
import { AlterViewContext } from "./MySqlParser.js";
import { AlterByTableOptionContext } from "./MySqlParser.js";
import { AlterByAddColumnContext } from "./MySqlParser.js";
import { AlterByAddColumnsContext } from "./MySqlParser.js";
import { AlterByAddIndexContext } from "./MySqlParser.js";
import { AlterByAddPrimaryKeyContext } from "./MySqlParser.js";
import { AlterByAddUniqueKeyContext } from "./MySqlParser.js";
import { AlterByAddSpecialIndexContext } from "./MySqlParser.js";
import { AlterByAddForeignKeyContext } from "./MySqlParser.js";
import { AlterByAddCheckTableConstraintContext } from "./MySqlParser.js";
import { AlterByAlterCheckTableConstraintContext } from "./MySqlParser.js";
import { AlterBySetAlgorithmContext } from "./MySqlParser.js";
import { AlterByChangeDefaultContext } from "./MySqlParser.js";
import { AlterByChangeColumnContext } from "./MySqlParser.js";
import { AlterByRenameColumnContext } from "./MySqlParser.js";
import { AlterByLockContext } from "./MySqlParser.js";
import { AlterByModifyColumnContext } from "./MySqlParser.js";
import { AlterByDropColumnContext } from "./MySqlParser.js";
import { AlterByDropConstraintCheckContext } from "./MySqlParser.js";
import { AlterByDropPrimaryKeyContext } from "./MySqlParser.js";
import { AlterByDropIndexContext } from "./MySqlParser.js";
import { AlterByRenameIndexContext } from "./MySqlParser.js";
import { AlterByAlterColumnDefaultContext } from "./MySqlParser.js";
import { AlterByAlterIndexVisibilityContext } from "./MySqlParser.js";
import { AlterByDropForeignKeyContext } from "./MySqlParser.js";
import { AlterByDisableKeysContext } from "./MySqlParser.js";
import { AlterByEnableKeysContext } from "./MySqlParser.js";
import { AlterByRenameContext } from "./MySqlParser.js";
import { AlterByOrderContext } from "./MySqlParser.js";
import { AlterByConvertCharsetContext } from "./MySqlParser.js";
import { AlterByDefaultCharsetContext } from "./MySqlParser.js";
import { AlterByDiscardTablespaceContext } from "./MySqlParser.js";
import { AlterByImportTablespaceContext } from "./MySqlParser.js";
import { AlterByForceContext } from "./MySqlParser.js";
import { AlterByValidateContext } from "./MySqlParser.js";
import { AlterByAddDefinitionsContext } from "./MySqlParser.js";
import { AlterPartitionContext } from "./MySqlParser.js";
import { AlterByAddPartitionContext } from "./MySqlParser.js";
import { AlterByDropPartitionContext } from "./MySqlParser.js";
import { AlterByDiscardPartitionContext } from "./MySqlParser.js";
import { AlterByImportPartitionContext } from "./MySqlParser.js";
import { AlterByTruncatePartitionContext } from "./MySqlParser.js";
import { AlterByCoalescePartitionContext } from "./MySqlParser.js";
import { AlterByReorganizePartitionContext } from "./MySqlParser.js";
import { AlterByExchangePartitionContext } from "./MySqlParser.js";
import { AlterByAnalyzePartitionContext } from "./MySqlParser.js";
import { AlterByCheckPartitionContext } from "./MySqlParser.js";
import { AlterByOptimizePartitionContext } from "./MySqlParser.js";
import { AlterByRebuildPartitionContext } from "./MySqlParser.js";
import { AlterByRepairPartitionContext } from "./MySqlParser.js";
import { AlterByRemovePartitioningContext } from "./MySqlParser.js";
import { AlterByUpgradePartitioningContext } from "./MySqlParser.js";
import { DropDatabaseContext } from "./MySqlParser.js";
import { DropEventContext } from "./MySqlParser.js";
import { DropIndexContext } from "./MySqlParser.js";
import { DropLogfileGroupContext } from "./MySqlParser.js";
import { DropProcedureContext } from "./MySqlParser.js";
import { DropFunctionContext } from "./MySqlParser.js";
import { DropServerContext } from "./MySqlParser.js";
import { DropTableContext } from "./MySqlParser.js";
import { DropTablespaceContext } from "./MySqlParser.js";
import { DropTriggerContext } from "./MySqlParser.js";
import { DropViewContext } from "./MySqlParser.js";
import { DropRoleContext } from "./MySqlParser.js";
import { SetRoleContext } from "./MySqlParser.js";
import { RenameTableContext } from "./MySqlParser.js";
import { RenameTableClauseContext } from "./MySqlParser.js";
import { TruncateTableContext } from "./MySqlParser.js";
import { CallStatementContext } from "./MySqlParser.js";
import { DeleteStatementContext } from "./MySqlParser.js";
import { DoStatementContext } from "./MySqlParser.js";
import { HandlerStatementContext } from "./MySqlParser.js";
import { InsertStatementContext } from "./MySqlParser.js";
import { LoadDataStatementContext } from "./MySqlParser.js";
import { LoadXmlStatementContext } from "./MySqlParser.js";
import { ReplaceStatementContext } from "./MySqlParser.js";
import { SimpleSelectContext } from "./MySqlParser.js";
import { ParenthesisSelectContext } from "./MySqlParser.js";
import { UnionSelectContext } from "./MySqlParser.js";
import { UnionParenthesisSelectContext } from "./MySqlParser.js";
import { WithLateralStatementContext } from "./MySqlParser.js";
import { UpdateStatementContext } from "./MySqlParser.js";
import { ValuesStatementContext } from "./MySqlParser.js";
import { InsertStatementValueContext } from "./MySqlParser.js";
import { UpdatedElementContext } from "./MySqlParser.js";
import { AssignmentFieldContext } from "./MySqlParser.js";
import { LockClauseContext } from "./MySqlParser.js";
import { SingleDeleteStatementContext } from "./MySqlParser.js";
import { MultipleDeleteStatementContext } from "./MySqlParser.js";
import { HandlerOpenStatementContext } from "./MySqlParser.js";
import { HandlerReadIndexStatementContext } from "./MySqlParser.js";
import { HandlerReadStatementContext } from "./MySqlParser.js";
import { HandlerCloseStatementContext } from "./MySqlParser.js";
import { SingleUpdateStatementContext } from "./MySqlParser.js";
import { MultipleUpdateStatementContext } from "./MySqlParser.js";
import { OrderByClauseContext } from "./MySqlParser.js";
import { OrderByExpressionContext } from "./MySqlParser.js";
import { TableSourcesContext } from "./MySqlParser.js";
import { TableSourceBaseContext } from "./MySqlParser.js";
import { TableSourceNestedContext } from "./MySqlParser.js";
import { TableJsonContext } from "./MySqlParser.js";
import { AtomTableItemContext } from "./MySqlParser.js";
import { SubqueryTableItemContext } from "./MySqlParser.js";
import { TableSourcesItemContext } from "./MySqlParser.js";
import { IndexHintContext } from "./MySqlParser.js";
import { IndexHintTypeContext } from "./MySqlParser.js";
import { InnerJoinContext } from "./MySqlParser.js";
import { StraightJoinContext } from "./MySqlParser.js";
import { OuterJoinContext } from "./MySqlParser.js";
import { NaturalJoinContext } from "./MySqlParser.js";
import { JoinSpecContext } from "./MySqlParser.js";
import { QueryExpressionContext } from "./MySqlParser.js";
import { QueryExpressionNointoContext } from "./MySqlParser.js";
import { QuerySpecificationContext } from "./MySqlParser.js";
import { QuerySpecificationNointoContext } from "./MySqlParser.js";
import { UnionParenthesisContext } from "./MySqlParser.js";
import { UnionStatementContext } from "./MySqlParser.js";
import { LateralStatementContext } from "./MySqlParser.js";
import { JsonTableContext } from "./MySqlParser.js";
import { JsonColumnListContext } from "./MySqlParser.js";
import { JsonColumnContext } from "./MySqlParser.js";
import { JsonOnEmptyContext } from "./MySqlParser.js";
import { JsonOnErrorContext } from "./MySqlParser.js";
import { SelectSpecContext } from "./MySqlParser.js";
import { SelectElementsContext } from "./MySqlParser.js";
import { SelectStarElementContext } from "./MySqlParser.js";
import { SelectColumnElementContext } from "./MySqlParser.js";
import { SelectFunctionElementContext } from "./MySqlParser.js";
import { SelectExpressionElementContext } from "./MySqlParser.js";
import { SelectIntoVariablesContext } from "./MySqlParser.js";
import { SelectIntoDumpFileContext } from "./MySqlParser.js";
import { SelectIntoTextFileContext } from "./MySqlParser.js";
import { SelectFieldsIntoContext } from "./MySqlParser.js";
import { SelectLinesIntoContext } from "./MySqlParser.js";
import { FromClauseContext } from "./MySqlParser.js";
import { GroupByClauseContext } from "./MySqlParser.js";
import { HavingClauseContext } from "./MySqlParser.js";
import { WindowClauseContext } from "./MySqlParser.js";
import { GroupByItemContext } from "./MySqlParser.js";
import { LimitClauseContext } from "./MySqlParser.js";
import { LimitClauseAtomContext } from "./MySqlParser.js";
import { StartTransactionContext } from "./MySqlParser.js";
import { BeginWorkContext } from "./MySqlParser.js";
import { CommitWorkContext } from "./MySqlParser.js";
import { RollbackWorkContext } from "./MySqlParser.js";
import { SavepointStatementContext } from "./MySqlParser.js";
import { RollbackStatementContext } from "./MySqlParser.js";
import { ReleaseStatementContext } from "./MySqlParser.js";
import { LockTablesContext } from "./MySqlParser.js";
import { UnlockTablesContext } from "./MySqlParser.js";
import { SetAutocommitStatementContext } from "./MySqlParser.js";
import { SetTransactionStatementContext } from "./MySqlParser.js";
import { TransactionModeContext } from "./MySqlParser.js";
import { LockTableElementContext } from "./MySqlParser.js";
import { LockActionContext } from "./MySqlParser.js";
import { TransactionOptionContext } from "./MySqlParser.js";
import { TransactionLevelContext } from "./MySqlParser.js";
import { ChangeMasterContext } from "./MySqlParser.js";
import { ChangeReplicationFilterContext } from "./MySqlParser.js";
import { PurgeBinaryLogsContext } from "./MySqlParser.js";
import { ResetMasterContext } from "./MySqlParser.js";
import { ResetSlaveContext } from "./MySqlParser.js";
import { StartSlaveContext } from "./MySqlParser.js";
import { StopSlaveContext } from "./MySqlParser.js";
import { StartGroupReplicationContext } from "./MySqlParser.js";
import { StopGroupReplicationContext } from "./MySqlParser.js";
import { MasterStringOptionContext } from "./MySqlParser.js";
import { MasterDecimalOptionContext } from "./MySqlParser.js";
import { MasterBoolOptionContext } from "./MySqlParser.js";
import { MasterRealOptionContext } from "./MySqlParser.js";
import { MasterUidListOptionContext } from "./MySqlParser.js";
import { StringMasterOptionContext } from "./MySqlParser.js";
import { DecimalMasterOptionContext } from "./MySqlParser.js";
import { BoolMasterOptionContext } from "./MySqlParser.js";
import { ChannelOptionContext } from "./MySqlParser.js";
import { DoDbReplicationContext } from "./MySqlParser.js";
import { IgnoreDbReplicationContext } from "./MySqlParser.js";
import { DoTableReplicationContext } from "./MySqlParser.js";
import { IgnoreTableReplicationContext } from "./MySqlParser.js";
import { WildDoTableReplicationContext } from "./MySqlParser.js";
import { WildIgnoreTableReplicationContext } from "./MySqlParser.js";
import { RewriteDbReplicationContext } from "./MySqlParser.js";
import { TablePairContext } from "./MySqlParser.js";
import { ThreadTypeContext } from "./MySqlParser.js";
import { GtidsUntilOptionContext } from "./MySqlParser.js";
import { MasterLogUntilOptionContext } from "./MySqlParser.js";
import { RelayLogUntilOptionContext } from "./MySqlParser.js";
import { SqlGapsUntilOptionContext } from "./MySqlParser.js";
import { UserConnectionOptionContext } from "./MySqlParser.js";
import { PasswordConnectionOptionContext } from "./MySqlParser.js";
import { DefaultAuthConnectionOptionContext } from "./MySqlParser.js";
import { PluginDirConnectionOptionContext } from "./MySqlParser.js";
import { GtuidSetContext } from "./MySqlParser.js";
import { XaStartTransactionContext } from "./MySqlParser.js";
import { XaEndTransactionContext } from "./MySqlParser.js";
import { XaPrepareStatementContext } from "./MySqlParser.js";
import { XaCommitWorkContext } from "./MySqlParser.js";
import { XaRollbackWorkContext } from "./MySqlParser.js";
import { XaRecoverWorkContext } from "./MySqlParser.js";
import { PrepareStatementContext } from "./MySqlParser.js";
import { ExecuteStatementContext } from "./MySqlParser.js";
import { DeallocatePrepareContext } from "./MySqlParser.js";
import { RoutineBodyContext } from "./MySqlParser.js";
import { BlockStatementContext } from "./MySqlParser.js";
import { CaseStatementContext } from "./MySqlParser.js";
import { IfStatementContext } from "./MySqlParser.js";
import { IterateStatementContext } from "./MySqlParser.js";
import { LeaveStatementContext } from "./MySqlParser.js";
import { LoopStatementContext } from "./MySqlParser.js";
import { RepeatStatementContext } from "./MySqlParser.js";
import { ReturnStatementContext } from "./MySqlParser.js";
import { WhileStatementContext } from "./MySqlParser.js";
import { CloseCursorContext } from "./MySqlParser.js";
import { FetchCursorContext } from "./MySqlParser.js";
import { OpenCursorContext } from "./MySqlParser.js";
import { DeclareVariableContext } from "./MySqlParser.js";
import { DeclareConditionContext } from "./MySqlParser.js";
import { DeclareCursorContext } from "./MySqlParser.js";
import { DeclareHandlerContext } from "./MySqlParser.js";
import { HandlerConditionCodeContext } from "./MySqlParser.js";
import { HandlerConditionStateContext } from "./MySqlParser.js";
import { HandlerConditionNameContext } from "./MySqlParser.js";
import { HandlerConditionWarningContext } from "./MySqlParser.js";
import { HandlerConditionNotfoundContext } from "./MySqlParser.js";
import { HandlerConditionExceptionContext } from "./MySqlParser.js";
import { ProcedureSqlStatementContext } from "./MySqlParser.js";
import { CaseAlternativeContext } from "./MySqlParser.js";
import { ElifAlternativeContext } from "./MySqlParser.js";
import { AlterUserMysqlV56Context } from "./MySqlParser.js";
import { AlterUserMysqlV80Context } from "./MySqlParser.js";
import { CreateUserMysqlV56Context } from "./MySqlParser.js";
import { CreateUserMysqlV80Context } from "./MySqlParser.js";
import { DropUserContext } from "./MySqlParser.js";
import { GrantStatementContext } from "./MySqlParser.js";
import { RoleOptionContext } from "./MySqlParser.js";
import { GrantProxyContext } from "./MySqlParser.js";
import { RenameUserContext } from "./MySqlParser.js";
import { DetailRevokeContext } from "./MySqlParser.js";
import { ShortRevokeContext } from "./MySqlParser.js";
import { RoleRevokeContext } from "./MySqlParser.js";
import { RevokeProxyContext } from "./MySqlParser.js";
import { SetPasswordStatementContext } from "./MySqlParser.js";
import { UserSpecificationContext } from "./MySqlParser.js";
import { HashAuthOptionContext } from "./MySqlParser.js";
import { RandomAuthOptionContext } from "./MySqlParser.js";
import { StringAuthOptionContext } from "./MySqlParser.js";
import { ModuleAuthOptionContext } from "./MySqlParser.js";
import { SimpleAuthOptionContext } from "./MySqlParser.js";
import { AuthOptionClauseContext } from "./MySqlParser.js";
import { ModuleContext } from "./MySqlParser.js";
import { PasswordModuleOptionContext } from "./MySqlParser.js";
import { TlsOptionContext } from "./MySqlParser.js";
import { UserResourceOptionContext } from "./MySqlParser.js";
import { UserPasswordOptionContext } from "./MySqlParser.js";
import { UserLockOptionContext } from "./MySqlParser.js";
import { PrivelegeClauseContext } from "./MySqlParser.js";
import { PrivilegeContext } from "./MySqlParser.js";
import { CurrentSchemaPriviLevelContext } from "./MySqlParser.js";
import { GlobalPrivLevelContext } from "./MySqlParser.js";
import { DefiniteSchemaPrivLevelContext } from "./MySqlParser.js";
import { DefiniteFullTablePrivLevelContext } from "./MySqlParser.js";
import { DefiniteFullTablePrivLevel2Context } from "./MySqlParser.js";
import { DefiniteTablePrivLevelContext } from "./MySqlParser.js";
import { RenameUserClauseContext } from "./MySqlParser.js";
import { AnalyzeTableContext } from "./MySqlParser.js";
import { CheckTableContext } from "./MySqlParser.js";
import { ChecksumTableContext } from "./MySqlParser.js";
import { OptimizeTableContext } from "./MySqlParser.js";
import { RepairTableContext } from "./MySqlParser.js";
import { CheckTableOptionContext } from "./MySqlParser.js";
import { CreateUdfunctionContext } from "./MySqlParser.js";
import { InstallPluginContext } from "./MySqlParser.js";
import { UninstallPluginContext } from "./MySqlParser.js";
import { SetVariableContext } from "./MySqlParser.js";
import { SetCharsetContext } from "./MySqlParser.js";
import { SetNamesContext } from "./MySqlParser.js";
import { SetPasswordContext } from "./MySqlParser.js";
import { SetTransactionContext } from "./MySqlParser.js";
import { SetAutocommitContext } from "./MySqlParser.js";
import { SetNewValueInsideTriggerContext } from "./MySqlParser.js";
import { ShowMasterLogsContext } from "./MySqlParser.js";
import { ShowLogEventsContext } from "./MySqlParser.js";
import { ShowObjectFilterContext } from "./MySqlParser.js";
import { ShowColumnsContext } from "./MySqlParser.js";
import { ShowCreateDbContext } from "./MySqlParser.js";
import { ShowCreateFullIdObjectContext } from "./MySqlParser.js";
import { ShowCreateUserContext } from "./MySqlParser.js";
import { ShowEngineContext } from "./MySqlParser.js";
import { ShowGlobalInfoContext } from "./MySqlParser.js";
import { ShowErrorsContext } from "./MySqlParser.js";
import { ShowCountErrorsContext } from "./MySqlParser.js";
import { ShowSchemaFilterContext } from "./MySqlParser.js";
import { ShowRoutineContext } from "./MySqlParser.js";
import { ShowGrantsContext } from "./MySqlParser.js";
import { ShowIndexesContext } from "./MySqlParser.js";
import { ShowOpenTablesContext } from "./MySqlParser.js";
import { ShowProfileContext } from "./MySqlParser.js";
import { ShowSlaveStatusContext } from "./MySqlParser.js";
import { VariableClauseContext } from "./MySqlParser.js";
import { ShowCommonEntityContext } from "./MySqlParser.js";
import { ShowFilterContext } from "./MySqlParser.js";
import { ShowGlobalInfoClauseContext } from "./MySqlParser.js";
import { ShowSchemaEntityContext } from "./MySqlParser.js";
import { ShowProfileTypeContext } from "./MySqlParser.js";
import { BinlogStatementContext } from "./MySqlParser.js";
import { CacheIndexStatementContext } from "./MySqlParser.js";
import { FlushStatementContext } from "./MySqlParser.js";
import { KillStatementContext } from "./MySqlParser.js";
import { LoadIndexIntoCacheContext } from "./MySqlParser.js";
import { ResetStatementContext } from "./MySqlParser.js";
import { ShutdownStatementContext } from "./MySqlParser.js";
import { TableIndexesContext } from "./MySqlParser.js";
import { SimpleFlushOptionContext } from "./MySqlParser.js";
import { ChannelFlushOptionContext } from "./MySqlParser.js";
import { TableFlushOptionContext } from "./MySqlParser.js";
import { FlushTableOptionContext } from "./MySqlParser.js";
import { LoadedTableIndexesContext } from "./MySqlParser.js";
import { SimpleDescribeStatementContext } from "./MySqlParser.js";
import { FullDescribeStatementContext } from "./MySqlParser.js";
import { HelpStatementContext } from "./MySqlParser.js";
import { UseStatementContext } from "./MySqlParser.js";
import { SignalStatementContext } from "./MySqlParser.js";
import { ResignalStatementContext } from "./MySqlParser.js";
import { SignalConditionInformationContext } from "./MySqlParser.js";
import { WithStatementContext } from "./MySqlParser.js";
import { TableStatementContext } from "./MySqlParser.js";
import { DiagnosticsStatementContext } from "./MySqlParser.js";
import { DiagnosticsConditionInformationNameContext } from "./MySqlParser.js";
import { DescribeStatementsContext } from "./MySqlParser.js";
import { DescribeConnectionContext } from "./MySqlParser.js";
import { FullIdContext } from "./MySqlParser.js";
import { TableNameContext } from "./MySqlParser.js";
import { RoleNameContext } from "./MySqlParser.js";
import { FullColumnNameContext } from "./MySqlParser.js";
import { IndexColumnNameContext } from "./MySqlParser.js";
import { SimpleUserNameContext } from "./MySqlParser.js";
import { HostNameContext } from "./MySqlParser.js";
import { UserNameContext } from "./MySqlParser.js";
import { MysqlVariableContext } from "./MySqlParser.js";
import { CharsetNameContext } from "./MySqlParser.js";
import { CollationNameContext } from "./MySqlParser.js";
import { EngineNameContext } from "./MySqlParser.js";
import { EngineNameBaseContext } from "./MySqlParser.js";
import { UuidSetContext } from "./MySqlParser.js";
import { XidContext } from "./MySqlParser.js";
import { XuidStringIdContext } from "./MySqlParser.js";
import { AuthPluginContext } from "./MySqlParser.js";
import { UidContext } from "./MySqlParser.js";
import { SimpleIdContext } from "./MySqlParser.js";
import { DottedIdContext } from "./MySqlParser.js";
import { DecimalLiteralContext } from "./MySqlParser.js";
import { FileSizeLiteralContext } from "./MySqlParser.js";
import { StringLiteralContext } from "./MySqlParser.js";
import { BooleanLiteralContext } from "./MySqlParser.js";
import { HexadecimalLiteralContext } from "./MySqlParser.js";
import { NullNotnullContext } from "./MySqlParser.js";
import { ConstantContext } from "./MySqlParser.js";
import { StringDataTypeContext } from "./MySqlParser.js";
import { NationalVaryingStringDataTypeContext } from "./MySqlParser.js";
import { NationalStringDataTypeContext } from "./MySqlParser.js";
import { DimensionDataTypeContext } from "./MySqlParser.js";
import { SimpleDataTypeContext } from "./MySqlParser.js";
import { CollectionDataTypeContext } from "./MySqlParser.js";
import { SpatialDataTypeContext } from "./MySqlParser.js";
import { LongVarcharDataTypeContext } from "./MySqlParser.js";
import { LongVarbinaryDataTypeContext } from "./MySqlParser.js";
import { CollectionOptionsContext } from "./MySqlParser.js";
import { ConvertedDataTypeContext } from "./MySqlParser.js";
import { LengthOneDimensionContext } from "./MySqlParser.js";
import { LengthTwoDimensionContext } from "./MySqlParser.js";
import { LengthTwoOptionalDimensionContext } from "./MySqlParser.js";
import { UidListContext } from "./MySqlParser.js";
import { FullColumnNameListContext } from "./MySqlParser.js";
import { TablesContext } from "./MySqlParser.js";
import { IndexColumnNamesContext } from "./MySqlParser.js";
import { ExpressionsContext } from "./MySqlParser.js";
import { ExpressionsWithDefaultsContext } from "./MySqlParser.js";
import { ConstantsContext } from "./MySqlParser.js";
import { SimpleStringsContext } from "./MySqlParser.js";
import { UserVariablesContext } from "./MySqlParser.js";
import { DefaultValueContext } from "./MySqlParser.js";
import { CurrentTimestampContext } from "./MySqlParser.js";
import { ExpressionOrDefaultContext } from "./MySqlParser.js";
import { IfExistsContext } from "./MySqlParser.js";
import { IfNotExistsContext } from "./MySqlParser.js";
import { OrReplaceContext } from "./MySqlParser.js";
import { WaitNowaitClauseContext } from "./MySqlParser.js";
import { SpecificFunctionCallContext } from "./MySqlParser.js";
import { AggregateFunctionCallContext } from "./MySqlParser.js";
import { NonAggregateFunctionCallContext } from "./MySqlParser.js";
import { ScalarFunctionCallContext } from "./MySqlParser.js";
import { UdfFunctionCallContext } from "./MySqlParser.js";
import { PasswordFunctionCallContext } from "./MySqlParser.js";
import { SimpleFunctionCallContext } from "./MySqlParser.js";
import { CurrentUserContext } from "./MySqlParser.js";
import { DataTypeFunctionCallContext } from "./MySqlParser.js";
import { ValuesFunctionCallContext } from "./MySqlParser.js";
import { CaseExpressionFunctionCallContext } from "./MySqlParser.js";
import { CaseFunctionCallContext } from "./MySqlParser.js";
import { CharFunctionCallContext } from "./MySqlParser.js";
import { PositionFunctionCallContext } from "./MySqlParser.js";
import { SubstrFunctionCallContext } from "./MySqlParser.js";
import { TrimFunctionCallContext } from "./MySqlParser.js";
import { WeightFunctionCallContext } from "./MySqlParser.js";
import { ExtractFunctionCallContext } from "./MySqlParser.js";
import { GetFormatFunctionCallContext } from "./MySqlParser.js";
import { JsonValueFunctionCallContext } from "./MySqlParser.js";
import { CaseFuncAlternativeContext } from "./MySqlParser.js";
import { LevelWeightListContext } from "./MySqlParser.js";
import { LevelWeightRangeContext } from "./MySqlParser.js";
import { LevelInWeightListElementContext } from "./MySqlParser.js";
import { AggregateWindowedFunctionContext } from "./MySqlParser.js";
import { NonAggregateWindowedFunctionContext } from "./MySqlParser.js";
import { OverClauseContext } from "./MySqlParser.js";
import { WindowSpecContext } from "./MySqlParser.js";
import { WindowNameContext } from "./MySqlParser.js";
import { FrameClauseContext } from "./MySqlParser.js";
import { FrameUnitsContext } from "./MySqlParser.js";
import { FrameExtentContext } from "./MySqlParser.js";
import { FrameBetweenContext } from "./MySqlParser.js";
import { FrameRangeContext } from "./MySqlParser.js";
import { PartitionClauseContext } from "./MySqlParser.js";
import { ScalarFunctionNameContext } from "./MySqlParser.js";
import { PasswordFunctionClauseContext } from "./MySqlParser.js";
import { FunctionArgsContext } from "./MySqlParser.js";
import { FunctionArgContext } from "./MySqlParser.js";
import { IsExpressionContext } from "./MySqlParser.js";
import { NotExpressionContext } from "./MySqlParser.js";
import { LogicalExpressionContext } from "./MySqlParser.js";
import { PredicateExpressionContext } from "./MySqlParser.js";
import { SoundsLikePredicateContext } from "./MySqlParser.js";
import { ExpressionAtomPredicateContext } from "./MySqlParser.js";
import { SubqueryComparisonPredicateContext } from "./MySqlParser.js";
import { JsonMemberOfPredicateContext } from "./MySqlParser.js";
import { BinaryComparisonPredicateContext } from "./MySqlParser.js";
import { InPredicateContext } from "./MySqlParser.js";
import { BetweenPredicateContext } from "./MySqlParser.js";
import { IsNullPredicateContext } from "./MySqlParser.js";
import { LikePredicateContext } from "./MySqlParser.js";
import { RegexpPredicateContext } from "./MySqlParser.js";
import { UnaryExpressionAtomContext } from "./MySqlParser.js";
import { CollateExpressionAtomContext } from "./MySqlParser.js";
import { VariableAssignExpressionAtomContext } from "./MySqlParser.js";
import { MysqlVariableExpressionAtomContext } from "./MySqlParser.js";
import { NestedExpressionAtomContext } from "./MySqlParser.js";
import { NestedRowExpressionAtomContext } from "./MySqlParser.js";
import { MathExpressionAtomContext } from "./MySqlParser.js";
import { ExistsExpressionAtomContext } from "./MySqlParser.js";
import { IntervalExpressionAtomContext } from "./MySqlParser.js";
import { JsonExpressionAtomContext } from "./MySqlParser.js";
import { SubqueryExpressionAtomContext } from "./MySqlParser.js";
import { ConstantExpressionAtomContext } from "./MySqlParser.js";
import { FunctionCallExpressionAtomContext } from "./MySqlParser.js";
import { BinaryExpressionAtomContext } from "./MySqlParser.js";
import { FullColumnNameExpressionAtomContext } from "./MySqlParser.js";
import { BitExpressionAtomContext } from "./MySqlParser.js";
import { UnaryOperatorContext } from "./MySqlParser.js";
import { ComparisonOperatorContext } from "./MySqlParser.js";
import { LogicalOperatorContext } from "./MySqlParser.js";
import { BitOperatorContext } from "./MySqlParser.js";
import { MultOperatorContext } from "./MySqlParser.js";
import { AddOperatorContext } from "./MySqlParser.js";
import { JsonOperatorContext } from "./MySqlParser.js";
import { CharsetNameBaseContext } from "./MySqlParser.js";
import { TransactionLevelBaseContext } from "./MySqlParser.js";
import { PrivilegesBaseContext } from "./MySqlParser.js";
import { IntervalTypeBaseContext } from "./MySqlParser.js";
import { DataTypeBaseContext } from "./MySqlParser.js";
import { KeywordsCanBeIdContext } from "./MySqlParser.js";
import { FunctionNameBaseContext } from "./MySqlParser.js";
export declare class MySqlParserListener implements ParseTreeListener {
    enterRoot?: (ctx: RootContext) => void;
    exitRoot?: (ctx: RootContext) => void;
    enterSqlStatements?: (ctx: SqlStatementsContext) => void;
    exitSqlStatements?: (ctx: SqlStatementsContext) => void;
    enterSqlStatement?: (ctx: SqlStatementContext) => void;
    exitSqlStatement?: (ctx: SqlStatementContext) => void;
    enterEmptyStatement_?: (ctx: EmptyStatement_Context) => void;
    exitEmptyStatement_?: (ctx: EmptyStatement_Context) => void;
    enterDdlStatement?: (ctx: DdlStatementContext) => void;
    exitDdlStatement?: (ctx: DdlStatementContext) => void;
    enterDmlStatement?: (ctx: DmlStatementContext) => void;
    exitDmlStatement?: (ctx: DmlStatementContext) => void;
    enterTransactionStatement?: (ctx: TransactionStatementContext) => void;
    exitTransactionStatement?: (ctx: TransactionStatementContext) => void;
    enterReplicationStatement?: (ctx: ReplicationStatementContext) => void;
    exitReplicationStatement?: (ctx: ReplicationStatementContext) => void;
    enterPreparedStatement?: (ctx: PreparedStatementContext) => void;
    exitPreparedStatement?: (ctx: PreparedStatementContext) => void;
    enterCompoundStatement?: (ctx: CompoundStatementContext) => void;
    exitCompoundStatement?: (ctx: CompoundStatementContext) => void;
    enterAdministrationStatement?: (ctx: AdministrationStatementContext) => void;
    exitAdministrationStatement?: (ctx: AdministrationStatementContext) => void;
    enterUtilityStatement?: (ctx: UtilityStatementContext) => void;
    exitUtilityStatement?: (ctx: UtilityStatementContext) => void;
    enterCreateDatabase?: (ctx: CreateDatabaseContext) => void;
    exitCreateDatabase?: (ctx: CreateDatabaseContext) => void;
    enterCreateEvent?: (ctx: CreateEventContext) => void;
    exitCreateEvent?: (ctx: CreateEventContext) => void;
    enterCreateIndex?: (ctx: CreateIndexContext) => void;
    exitCreateIndex?: (ctx: CreateIndexContext) => void;
    enterCreateLogfileGroup?: (ctx: CreateLogfileGroupContext) => void;
    exitCreateLogfileGroup?: (ctx: CreateLogfileGroupContext) => void;
    enterCreateProcedure?: (ctx: CreateProcedureContext) => void;
    exitCreateProcedure?: (ctx: CreateProcedureContext) => void;
    enterCreateFunction?: (ctx: CreateFunctionContext) => void;
    exitCreateFunction?: (ctx: CreateFunctionContext) => void;
    enterCreateRole?: (ctx: CreateRoleContext) => void;
    exitCreateRole?: (ctx: CreateRoleContext) => void;
    enterCreateServer?: (ctx: CreateServerContext) => void;
    exitCreateServer?: (ctx: CreateServerContext) => void;
    enterCopyCreateTable?: (ctx: CopyCreateTableContext) => void;
    exitCopyCreateTable?: (ctx: CopyCreateTableContext) => void;
    enterQueryCreateTable?: (ctx: QueryCreateTableContext) => void;
    exitQueryCreateTable?: (ctx: QueryCreateTableContext) => void;
    enterColumnCreateTable?: (ctx: ColumnCreateTableContext) => void;
    exitColumnCreateTable?: (ctx: ColumnCreateTableContext) => void;
    enterCreateTablespaceInnodb?: (ctx: CreateTablespaceInnodbContext) => void;
    exitCreateTablespaceInnodb?: (ctx: CreateTablespaceInnodbContext) => void;
    enterCreateTablespaceNdb?: (ctx: CreateTablespaceNdbContext) => void;
    exitCreateTablespaceNdb?: (ctx: CreateTablespaceNdbContext) => void;
    enterCreateTrigger?: (ctx: CreateTriggerContext) => void;
    exitCreateTrigger?: (ctx: CreateTriggerContext) => void;
    enterWithClause?: (ctx: WithClauseContext) => void;
    exitWithClause?: (ctx: WithClauseContext) => void;
    enterCommonTableExpressions?: (ctx: CommonTableExpressionsContext) => void;
    exitCommonTableExpressions?: (ctx: CommonTableExpressionsContext) => void;
    enterCteName?: (ctx: CteNameContext) => void;
    exitCteName?: (ctx: CteNameContext) => void;
    enterCteColumnName?: (ctx: CteColumnNameContext) => void;
    exitCteColumnName?: (ctx: CteColumnNameContext) => void;
    enterCreateView?: (ctx: CreateViewContext) => void;
    exitCreateView?: (ctx: CreateViewContext) => void;
    enterCreateDatabaseOption?: (ctx: CreateDatabaseOptionContext) => void;
    exitCreateDatabaseOption?: (ctx: CreateDatabaseOptionContext) => void;
    enterCharSet?: (ctx: CharSetContext) => void;
    exitCharSet?: (ctx: CharSetContext) => void;
    enterCurrentUserExpression?: (ctx: CurrentUserExpressionContext) => void;
    exitCurrentUserExpression?: (ctx: CurrentUserExpressionContext) => void;
    enterOwnerStatement?: (ctx: OwnerStatementContext) => void;
    exitOwnerStatement?: (ctx: OwnerStatementContext) => void;
    enterPreciseSchedule?: (ctx: PreciseScheduleContext) => void;
    exitPreciseSchedule?: (ctx: PreciseScheduleContext) => void;
    enterIntervalSchedule?: (ctx: IntervalScheduleContext) => void;
    exitIntervalSchedule?: (ctx: IntervalScheduleContext) => void;
    enterTimestampValue?: (ctx: TimestampValueContext) => void;
    exitTimestampValue?: (ctx: TimestampValueContext) => void;
    enterIntervalExpr?: (ctx: IntervalExprContext) => void;
    exitIntervalExpr?: (ctx: IntervalExprContext) => void;
    enterIntervalType?: (ctx: IntervalTypeContext) => void;
    exitIntervalType?: (ctx: IntervalTypeContext) => void;
    enterEnableType?: (ctx: EnableTypeContext) => void;
    exitEnableType?: (ctx: EnableTypeContext) => void;
    enterIndexType?: (ctx: IndexTypeContext) => void;
    exitIndexType?: (ctx: IndexTypeContext) => void;
    enterIndexOption?: (ctx: IndexOptionContext) => void;
    exitIndexOption?: (ctx: IndexOptionContext) => void;
    enterProcedureParameter?: (ctx: ProcedureParameterContext) => void;
    exitProcedureParameter?: (ctx: ProcedureParameterContext) => void;
    enterFunctionParameter?: (ctx: FunctionParameterContext) => void;
    exitFunctionParameter?: (ctx: FunctionParameterContext) => void;
    enterRoutineComment?: (ctx: RoutineCommentContext) => void;
    exitRoutineComment?: (ctx: RoutineCommentContext) => void;
    enterRoutineLanguage?: (ctx: RoutineLanguageContext) => void;
    exitRoutineLanguage?: (ctx: RoutineLanguageContext) => void;
    enterRoutineBehavior?: (ctx: RoutineBehaviorContext) => void;
    exitRoutineBehavior?: (ctx: RoutineBehaviorContext) => void;
    enterRoutineData?: (ctx: RoutineDataContext) => void;
    exitRoutineData?: (ctx: RoutineDataContext) => void;
    enterRoutineSecurity?: (ctx: RoutineSecurityContext) => void;
    exitRoutineSecurity?: (ctx: RoutineSecurityContext) => void;
    enterServerOption?: (ctx: ServerOptionContext) => void;
    exitServerOption?: (ctx: ServerOptionContext) => void;
    enterCreateDefinitions?: (ctx: CreateDefinitionsContext) => void;
    exitCreateDefinitions?: (ctx: CreateDefinitionsContext) => void;
    enterColumnDeclaration?: (ctx: ColumnDeclarationContext) => void;
    exitColumnDeclaration?: (ctx: ColumnDeclarationContext) => void;
    enterConstraintDeclaration?: (ctx: ConstraintDeclarationContext) => void;
    exitConstraintDeclaration?: (ctx: ConstraintDeclarationContext) => void;
    enterIndexDeclaration?: (ctx: IndexDeclarationContext) => void;
    exitIndexDeclaration?: (ctx: IndexDeclarationContext) => void;
    enterColumnDefinition?: (ctx: ColumnDefinitionContext) => void;
    exitColumnDefinition?: (ctx: ColumnDefinitionContext) => void;
    enterNullColumnConstraint?: (ctx: NullColumnConstraintContext) => void;
    exitNullColumnConstraint?: (ctx: NullColumnConstraintContext) => void;
    enterDefaultColumnConstraint?: (ctx: DefaultColumnConstraintContext) => void;
    exitDefaultColumnConstraint?: (ctx: DefaultColumnConstraintContext) => void;
    enterVisibilityColumnConstraint?: (ctx: VisibilityColumnConstraintContext) => void;
    exitVisibilityColumnConstraint?: (ctx: VisibilityColumnConstraintContext) => void;
    enterInvisibilityColumnConstraint?: (ctx: InvisibilityColumnConstraintContext) => void;
    exitInvisibilityColumnConstraint?: (ctx: InvisibilityColumnConstraintContext) => void;
    enterAutoIncrementColumnConstraint?: (ctx: AutoIncrementColumnConstraintContext) => void;
    exitAutoIncrementColumnConstraint?: (ctx: AutoIncrementColumnConstraintContext) => void;
    enterPrimaryKeyColumnConstraint?: (ctx: PrimaryKeyColumnConstraintContext) => void;
    exitPrimaryKeyColumnConstraint?: (ctx: PrimaryKeyColumnConstraintContext) => void;
    enterUniqueKeyColumnConstraint?: (ctx: UniqueKeyColumnConstraintContext) => void;
    exitUniqueKeyColumnConstraint?: (ctx: UniqueKeyColumnConstraintContext) => void;
    enterCommentColumnConstraint?: (ctx: CommentColumnConstraintContext) => void;
    exitCommentColumnConstraint?: (ctx: CommentColumnConstraintContext) => void;
    enterFormatColumnConstraint?: (ctx: FormatColumnConstraintContext) => void;
    exitFormatColumnConstraint?: (ctx: FormatColumnConstraintContext) => void;
    enterStorageColumnConstraint?: (ctx: StorageColumnConstraintContext) => void;
    exitStorageColumnConstraint?: (ctx: StorageColumnConstraintContext) => void;
    enterReferenceColumnConstraint?: (ctx: ReferenceColumnConstraintContext) => void;
    exitReferenceColumnConstraint?: (ctx: ReferenceColumnConstraintContext) => void;
    enterCollateColumnConstraint?: (ctx: CollateColumnConstraintContext) => void;
    exitCollateColumnConstraint?: (ctx: CollateColumnConstraintContext) => void;
    enterGeneratedColumnConstraint?: (ctx: GeneratedColumnConstraintContext) => void;
    exitGeneratedColumnConstraint?: (ctx: GeneratedColumnConstraintContext) => void;
    enterSerialDefaultColumnConstraint?: (ctx: SerialDefaultColumnConstraintContext) => void;
    exitSerialDefaultColumnConstraint?: (ctx: SerialDefaultColumnConstraintContext) => void;
    enterCheckColumnConstraint?: (ctx: CheckColumnConstraintContext) => void;
    exitCheckColumnConstraint?: (ctx: CheckColumnConstraintContext) => void;
    enterPrimaryKeyTableConstraint?: (ctx: PrimaryKeyTableConstraintContext) => void;
    exitPrimaryKeyTableConstraint?: (ctx: PrimaryKeyTableConstraintContext) => void;
    enterUniqueKeyTableConstraint?: (ctx: UniqueKeyTableConstraintContext) => void;
    exitUniqueKeyTableConstraint?: (ctx: UniqueKeyTableConstraintContext) => void;
    enterForeignKeyTableConstraint?: (ctx: ForeignKeyTableConstraintContext) => void;
    exitForeignKeyTableConstraint?: (ctx: ForeignKeyTableConstraintContext) => void;
    enterCheckTableConstraint?: (ctx: CheckTableConstraintContext) => void;
    exitCheckTableConstraint?: (ctx: CheckTableConstraintContext) => void;
    enterReferenceDefinition?: (ctx: ReferenceDefinitionContext) => void;
    exitReferenceDefinition?: (ctx: ReferenceDefinitionContext) => void;
    enterReferenceAction?: (ctx: ReferenceActionContext) => void;
    exitReferenceAction?: (ctx: ReferenceActionContext) => void;
    enterReferenceControlType?: (ctx: ReferenceControlTypeContext) => void;
    exitReferenceControlType?: (ctx: ReferenceControlTypeContext) => void;
    enterSimpleIndexDeclaration?: (ctx: SimpleIndexDeclarationContext) => void;
    exitSimpleIndexDeclaration?: (ctx: SimpleIndexDeclarationContext) => void;
    enterSpecialIndexDeclaration?: (ctx: SpecialIndexDeclarationContext) => void;
    exitSpecialIndexDeclaration?: (ctx: SpecialIndexDeclarationContext) => void;
    enterTableOptionEngine?: (ctx: TableOptionEngineContext) => void;
    exitTableOptionEngine?: (ctx: TableOptionEngineContext) => void;
    enterTableOptionEngineAttribute?: (ctx: TableOptionEngineAttributeContext) => void;
    exitTableOptionEngineAttribute?: (ctx: TableOptionEngineAttributeContext) => void;
    enterTableOptionAutoextendSize?: (ctx: TableOptionAutoextendSizeContext) => void;
    exitTableOptionAutoextendSize?: (ctx: TableOptionAutoextendSizeContext) => void;
    enterTableOptionAutoIncrement?: (ctx: TableOptionAutoIncrementContext) => void;
    exitTableOptionAutoIncrement?: (ctx: TableOptionAutoIncrementContext) => void;
    enterTableOptionAverage?: (ctx: TableOptionAverageContext) => void;
    exitTableOptionAverage?: (ctx: TableOptionAverageContext) => void;
    enterTableOptionCharset?: (ctx: TableOptionCharsetContext) => void;
    exitTableOptionCharset?: (ctx: TableOptionCharsetContext) => void;
    enterTableOptionChecksum?: (ctx: TableOptionChecksumContext) => void;
    exitTableOptionChecksum?: (ctx: TableOptionChecksumContext) => void;
    enterTableOptionCollate?: (ctx: TableOptionCollateContext) => void;
    exitTableOptionCollate?: (ctx: TableOptionCollateContext) => void;
    enterTableOptionComment?: (ctx: TableOptionCommentContext) => void;
    exitTableOptionComment?: (ctx: TableOptionCommentContext) => void;
    enterTableOptionCompression?: (ctx: TableOptionCompressionContext) => void;
    exitTableOptionCompression?: (ctx: TableOptionCompressionContext) => void;
    enterTableOptionConnection?: (ctx: TableOptionConnectionContext) => void;
    exitTableOptionConnection?: (ctx: TableOptionConnectionContext) => void;
    enterTableOptionDataDirectory?: (ctx: TableOptionDataDirectoryContext) => void;
    exitTableOptionDataDirectory?: (ctx: TableOptionDataDirectoryContext) => void;
    enterTableOptionDelay?: (ctx: TableOptionDelayContext) => void;
    exitTableOptionDelay?: (ctx: TableOptionDelayContext) => void;
    enterTableOptionEncryption?: (ctx: TableOptionEncryptionContext) => void;
    exitTableOptionEncryption?: (ctx: TableOptionEncryptionContext) => void;
    enterTableOptionPageCompressed?: (ctx: TableOptionPageCompressedContext) => void;
    exitTableOptionPageCompressed?: (ctx: TableOptionPageCompressedContext) => void;
    enterTableOptionPageCompressionLevel?: (ctx: TableOptionPageCompressionLevelContext) => void;
    exitTableOptionPageCompressionLevel?: (ctx: TableOptionPageCompressionLevelContext) => void;
    enterTableOptionEncryptionKeyId?: (ctx: TableOptionEncryptionKeyIdContext) => void;
    exitTableOptionEncryptionKeyId?: (ctx: TableOptionEncryptionKeyIdContext) => void;
    enterTableOptionIndexDirectory?: (ctx: TableOptionIndexDirectoryContext) => void;
    exitTableOptionIndexDirectory?: (ctx: TableOptionIndexDirectoryContext) => void;
    enterTableOptionInsertMethod?: (ctx: TableOptionInsertMethodContext) => void;
    exitTableOptionInsertMethod?: (ctx: TableOptionInsertMethodContext) => void;
    enterTableOptionKeyBlockSize?: (ctx: TableOptionKeyBlockSizeContext) => void;
    exitTableOptionKeyBlockSize?: (ctx: TableOptionKeyBlockSizeContext) => void;
    enterTableOptionMaxRows?: (ctx: TableOptionMaxRowsContext) => void;
    exitTableOptionMaxRows?: (ctx: TableOptionMaxRowsContext) => void;
    enterTableOptionMinRows?: (ctx: TableOptionMinRowsContext) => void;
    exitTableOptionMinRows?: (ctx: TableOptionMinRowsContext) => void;
    enterTableOptionPackKeys?: (ctx: TableOptionPackKeysContext) => void;
    exitTableOptionPackKeys?: (ctx: TableOptionPackKeysContext) => void;
    enterTableOptionPassword?: (ctx: TableOptionPasswordContext) => void;
    exitTableOptionPassword?: (ctx: TableOptionPasswordContext) => void;
    enterTableOptionRowFormat?: (ctx: TableOptionRowFormatContext) => void;
    exitTableOptionRowFormat?: (ctx: TableOptionRowFormatContext) => void;
    enterTableOptionStartTransaction?: (ctx: TableOptionStartTransactionContext) => void;
    exitTableOptionStartTransaction?: (ctx: TableOptionStartTransactionContext) => void;
    enterTableOptionSecondaryEngineAttribute?: (ctx: TableOptionSecondaryEngineAttributeContext) => void;
    exitTableOptionSecondaryEngineAttribute?: (ctx: TableOptionSecondaryEngineAttributeContext) => void;
    enterTableOptionRecalculation?: (ctx: TableOptionRecalculationContext) => void;
    exitTableOptionRecalculation?: (ctx: TableOptionRecalculationContext) => void;
    enterTableOptionPersistent?: (ctx: TableOptionPersistentContext) => void;
    exitTableOptionPersistent?: (ctx: TableOptionPersistentContext) => void;
    enterTableOptionSamplePage?: (ctx: TableOptionSamplePageContext) => void;
    exitTableOptionSamplePage?: (ctx: TableOptionSamplePageContext) => void;
    enterTableOptionTablespace?: (ctx: TableOptionTablespaceContext) => void;
    exitTableOptionTablespace?: (ctx: TableOptionTablespaceContext) => void;
    enterTableOptionTableType?: (ctx: TableOptionTableTypeContext) => void;
    exitTableOptionTableType?: (ctx: TableOptionTableTypeContext) => void;
    enterTableOptionTransactional?: (ctx: TableOptionTransactionalContext) => void;
    exitTableOptionTransactional?: (ctx: TableOptionTransactionalContext) => void;
    enterTableOptionUnion?: (ctx: TableOptionUnionContext) => void;
    exitTableOptionUnion?: (ctx: TableOptionUnionContext) => void;
    enterTableType?: (ctx: TableTypeContext) => void;
    exitTableType?: (ctx: TableTypeContext) => void;
    enterTablespaceStorage?: (ctx: TablespaceStorageContext) => void;
    exitTablespaceStorage?: (ctx: TablespaceStorageContext) => void;
    enterPartitionDefinitions?: (ctx: PartitionDefinitionsContext) => void;
    exitPartitionDefinitions?: (ctx: PartitionDefinitionsContext) => void;
    enterPartitionFunctionHash?: (ctx: PartitionFunctionHashContext) => void;
    exitPartitionFunctionHash?: (ctx: PartitionFunctionHashContext) => void;
    enterPartitionFunctionKey?: (ctx: PartitionFunctionKeyContext) => void;
    exitPartitionFunctionKey?: (ctx: PartitionFunctionKeyContext) => void;
    enterPartitionFunctionRange?: (ctx: PartitionFunctionRangeContext) => void;
    exitPartitionFunctionRange?: (ctx: PartitionFunctionRangeContext) => void;
    enterPartitionFunctionList?: (ctx: PartitionFunctionListContext) => void;
    exitPartitionFunctionList?: (ctx: PartitionFunctionListContext) => void;
    enterSubPartitionFunctionHash?: (ctx: SubPartitionFunctionHashContext) => void;
    exitSubPartitionFunctionHash?: (ctx: SubPartitionFunctionHashContext) => void;
    enterSubPartitionFunctionKey?: (ctx: SubPartitionFunctionKeyContext) => void;
    exitSubPartitionFunctionKey?: (ctx: SubPartitionFunctionKeyContext) => void;
    enterPartitionComparison?: (ctx: PartitionComparisonContext) => void;
    exitPartitionComparison?: (ctx: PartitionComparisonContext) => void;
    enterPartitionListAtom?: (ctx: PartitionListAtomContext) => void;
    exitPartitionListAtom?: (ctx: PartitionListAtomContext) => void;
    enterPartitionListVector?: (ctx: PartitionListVectorContext) => void;
    exitPartitionListVector?: (ctx: PartitionListVectorContext) => void;
    enterPartitionSimple?: (ctx: PartitionSimpleContext) => void;
    exitPartitionSimple?: (ctx: PartitionSimpleContext) => void;
    enterPartitionDefinerAtom?: (ctx: PartitionDefinerAtomContext) => void;
    exitPartitionDefinerAtom?: (ctx: PartitionDefinerAtomContext) => void;
    enterPartitionDefinerVector?: (ctx: PartitionDefinerVectorContext) => void;
    exitPartitionDefinerVector?: (ctx: PartitionDefinerVectorContext) => void;
    enterSubpartitionDefinition?: (ctx: SubpartitionDefinitionContext) => void;
    exitSubpartitionDefinition?: (ctx: SubpartitionDefinitionContext) => void;
    enterPartitionOptionEngine?: (ctx: PartitionOptionEngineContext) => void;
    exitPartitionOptionEngine?: (ctx: PartitionOptionEngineContext) => void;
    enterPartitionOptionComment?: (ctx: PartitionOptionCommentContext) => void;
    exitPartitionOptionComment?: (ctx: PartitionOptionCommentContext) => void;
    enterPartitionOptionDataDirectory?: (ctx: PartitionOptionDataDirectoryContext) => void;
    exitPartitionOptionDataDirectory?: (ctx: PartitionOptionDataDirectoryContext) => void;
    enterPartitionOptionIndexDirectory?: (ctx: PartitionOptionIndexDirectoryContext) => void;
    exitPartitionOptionIndexDirectory?: (ctx: PartitionOptionIndexDirectoryContext) => void;
    enterPartitionOptionMaxRows?: (ctx: PartitionOptionMaxRowsContext) => void;
    exitPartitionOptionMaxRows?: (ctx: PartitionOptionMaxRowsContext) => void;
    enterPartitionOptionMinRows?: (ctx: PartitionOptionMinRowsContext) => void;
    exitPartitionOptionMinRows?: (ctx: PartitionOptionMinRowsContext) => void;
    enterPartitionOptionTablespace?: (ctx: PartitionOptionTablespaceContext) => void;
    exitPartitionOptionTablespace?: (ctx: PartitionOptionTablespaceContext) => void;
    enterPartitionOptionNodeGroup?: (ctx: PartitionOptionNodeGroupContext) => void;
    exitPartitionOptionNodeGroup?: (ctx: PartitionOptionNodeGroupContext) => void;
    enterAlterSimpleDatabase?: (ctx: AlterSimpleDatabaseContext) => void;
    exitAlterSimpleDatabase?: (ctx: AlterSimpleDatabaseContext) => void;
    enterAlterUpgradeName?: (ctx: AlterUpgradeNameContext) => void;
    exitAlterUpgradeName?: (ctx: AlterUpgradeNameContext) => void;
    enterAlterEvent?: (ctx: AlterEventContext) => void;
    exitAlterEvent?: (ctx: AlterEventContext) => void;
    enterAlterFunction?: (ctx: AlterFunctionContext) => void;
    exitAlterFunction?: (ctx: AlterFunctionContext) => void;
    enterAlterInstance?: (ctx: AlterInstanceContext) => void;
    exitAlterInstance?: (ctx: AlterInstanceContext) => void;
    enterAlterLogfileGroup?: (ctx: AlterLogfileGroupContext) => void;
    exitAlterLogfileGroup?: (ctx: AlterLogfileGroupContext) => void;
    enterAlterProcedure?: (ctx: AlterProcedureContext) => void;
    exitAlterProcedure?: (ctx: AlterProcedureContext) => void;
    enterAlterServer?: (ctx: AlterServerContext) => void;
    exitAlterServer?: (ctx: AlterServerContext) => void;
    enterAlterTable?: (ctx: AlterTableContext) => void;
    exitAlterTable?: (ctx: AlterTableContext) => void;
    enterAlterTablespace?: (ctx: AlterTablespaceContext) => void;
    exitAlterTablespace?: (ctx: AlterTablespaceContext) => void;
    enterAlterView?: (ctx: AlterViewContext) => void;
    exitAlterView?: (ctx: AlterViewContext) => void;
    enterAlterByTableOption?: (ctx: AlterByTableOptionContext) => void;
    exitAlterByTableOption?: (ctx: AlterByTableOptionContext) => void;
    enterAlterByAddColumn?: (ctx: AlterByAddColumnContext) => void;
    exitAlterByAddColumn?: (ctx: AlterByAddColumnContext) => void;
    enterAlterByAddColumns?: (ctx: AlterByAddColumnsContext) => void;
    exitAlterByAddColumns?: (ctx: AlterByAddColumnsContext) => void;
    enterAlterByAddIndex?: (ctx: AlterByAddIndexContext) => void;
    exitAlterByAddIndex?: (ctx: AlterByAddIndexContext) => void;
    enterAlterByAddPrimaryKey?: (ctx: AlterByAddPrimaryKeyContext) => void;
    exitAlterByAddPrimaryKey?: (ctx: AlterByAddPrimaryKeyContext) => void;
    enterAlterByAddUniqueKey?: (ctx: AlterByAddUniqueKeyContext) => void;
    exitAlterByAddUniqueKey?: (ctx: AlterByAddUniqueKeyContext) => void;
    enterAlterByAddSpecialIndex?: (ctx: AlterByAddSpecialIndexContext) => void;
    exitAlterByAddSpecialIndex?: (ctx: AlterByAddSpecialIndexContext) => void;
    enterAlterByAddForeignKey?: (ctx: AlterByAddForeignKeyContext) => void;
    exitAlterByAddForeignKey?: (ctx: AlterByAddForeignKeyContext) => void;
    enterAlterByAddCheckTableConstraint?: (ctx: AlterByAddCheckTableConstraintContext) => void;
    exitAlterByAddCheckTableConstraint?: (ctx: AlterByAddCheckTableConstraintContext) => void;
    enterAlterByAlterCheckTableConstraint?: (ctx: AlterByAlterCheckTableConstraintContext) => void;
    exitAlterByAlterCheckTableConstraint?: (ctx: AlterByAlterCheckTableConstraintContext) => void;
    enterAlterBySetAlgorithm?: (ctx: AlterBySetAlgorithmContext) => void;
    exitAlterBySetAlgorithm?: (ctx: AlterBySetAlgorithmContext) => void;
    enterAlterByChangeDefault?: (ctx: AlterByChangeDefaultContext) => void;
    exitAlterByChangeDefault?: (ctx: AlterByChangeDefaultContext) => void;
    enterAlterByChangeColumn?: (ctx: AlterByChangeColumnContext) => void;
    exitAlterByChangeColumn?: (ctx: AlterByChangeColumnContext) => void;
    enterAlterByRenameColumn?: (ctx: AlterByRenameColumnContext) => void;
    exitAlterByRenameColumn?: (ctx: AlterByRenameColumnContext) => void;
    enterAlterByLock?: (ctx: AlterByLockContext) => void;
    exitAlterByLock?: (ctx: AlterByLockContext) => void;
    enterAlterByModifyColumn?: (ctx: AlterByModifyColumnContext) => void;
    exitAlterByModifyColumn?: (ctx: AlterByModifyColumnContext) => void;
    enterAlterByDropColumn?: (ctx: AlterByDropColumnContext) => void;
    exitAlterByDropColumn?: (ctx: AlterByDropColumnContext) => void;
    enterAlterByDropConstraintCheck?: (ctx: AlterByDropConstraintCheckContext) => void;
    exitAlterByDropConstraintCheck?: (ctx: AlterByDropConstraintCheckContext) => void;
    enterAlterByDropPrimaryKey?: (ctx: AlterByDropPrimaryKeyContext) => void;
    exitAlterByDropPrimaryKey?: (ctx: AlterByDropPrimaryKeyContext) => void;
    enterAlterByDropIndex?: (ctx: AlterByDropIndexContext) => void;
    exitAlterByDropIndex?: (ctx: AlterByDropIndexContext) => void;
    enterAlterByRenameIndex?: (ctx: AlterByRenameIndexContext) => void;
    exitAlterByRenameIndex?: (ctx: AlterByRenameIndexContext) => void;
    enterAlterByAlterColumnDefault?: (ctx: AlterByAlterColumnDefaultContext) => void;
    exitAlterByAlterColumnDefault?: (ctx: AlterByAlterColumnDefaultContext) => void;
    enterAlterByAlterIndexVisibility?: (ctx: AlterByAlterIndexVisibilityContext) => void;
    exitAlterByAlterIndexVisibility?: (ctx: AlterByAlterIndexVisibilityContext) => void;
    enterAlterByDropForeignKey?: (ctx: AlterByDropForeignKeyContext) => void;
    exitAlterByDropForeignKey?: (ctx: AlterByDropForeignKeyContext) => void;
    enterAlterByDisableKeys?: (ctx: AlterByDisableKeysContext) => void;
    exitAlterByDisableKeys?: (ctx: AlterByDisableKeysContext) => void;
    enterAlterByEnableKeys?: (ctx: AlterByEnableKeysContext) => void;
    exitAlterByEnableKeys?: (ctx: AlterByEnableKeysContext) => void;
    enterAlterByRename?: (ctx: AlterByRenameContext) => void;
    exitAlterByRename?: (ctx: AlterByRenameContext) => void;
    enterAlterByOrder?: (ctx: AlterByOrderContext) => void;
    exitAlterByOrder?: (ctx: AlterByOrderContext) => void;
    enterAlterByConvertCharset?: (ctx: AlterByConvertCharsetContext) => void;
    exitAlterByConvertCharset?: (ctx: AlterByConvertCharsetContext) => void;
    enterAlterByDefaultCharset?: (ctx: AlterByDefaultCharsetContext) => void;
    exitAlterByDefaultCharset?: (ctx: AlterByDefaultCharsetContext) => void;
    enterAlterByDiscardTablespace?: (ctx: AlterByDiscardTablespaceContext) => void;
    exitAlterByDiscardTablespace?: (ctx: AlterByDiscardTablespaceContext) => void;
    enterAlterByImportTablespace?: (ctx: AlterByImportTablespaceContext) => void;
    exitAlterByImportTablespace?: (ctx: AlterByImportTablespaceContext) => void;
    enterAlterByForce?: (ctx: AlterByForceContext) => void;
    exitAlterByForce?: (ctx: AlterByForceContext) => void;
    enterAlterByValidate?: (ctx: AlterByValidateContext) => void;
    exitAlterByValidate?: (ctx: AlterByValidateContext) => void;
    enterAlterByAddDefinitions?: (ctx: AlterByAddDefinitionsContext) => void;
    exitAlterByAddDefinitions?: (ctx: AlterByAddDefinitionsContext) => void;
    enterAlterPartition?: (ctx: AlterPartitionContext) => void;
    exitAlterPartition?: (ctx: AlterPartitionContext) => void;
    enterAlterByAddPartition?: (ctx: AlterByAddPartitionContext) => void;
    exitAlterByAddPartition?: (ctx: AlterByAddPartitionContext) => void;
    enterAlterByDropPartition?: (ctx: AlterByDropPartitionContext) => void;
    exitAlterByDropPartition?: (ctx: AlterByDropPartitionContext) => void;
    enterAlterByDiscardPartition?: (ctx: AlterByDiscardPartitionContext) => void;
    exitAlterByDiscardPartition?: (ctx: AlterByDiscardPartitionContext) => void;
    enterAlterByImportPartition?: (ctx: AlterByImportPartitionContext) => void;
    exitAlterByImportPartition?: (ctx: AlterByImportPartitionContext) => void;
    enterAlterByTruncatePartition?: (ctx: AlterByTruncatePartitionContext) => void;
    exitAlterByTruncatePartition?: (ctx: AlterByTruncatePartitionContext) => void;
    enterAlterByCoalescePartition?: (ctx: AlterByCoalescePartitionContext) => void;
    exitAlterByCoalescePartition?: (ctx: AlterByCoalescePartitionContext) => void;
    enterAlterByReorganizePartition?: (ctx: AlterByReorganizePartitionContext) => void;
    exitAlterByReorganizePartition?: (ctx: AlterByReorganizePartitionContext) => void;
    enterAlterByExchangePartition?: (ctx: AlterByExchangePartitionContext) => void;
    exitAlterByExchangePartition?: (ctx: AlterByExchangePartitionContext) => void;
    enterAlterByAnalyzePartition?: (ctx: AlterByAnalyzePartitionContext) => void;
    exitAlterByAnalyzePartition?: (ctx: AlterByAnalyzePartitionContext) => void;
    enterAlterByCheckPartition?: (ctx: AlterByCheckPartitionContext) => void;
    exitAlterByCheckPartition?: (ctx: AlterByCheckPartitionContext) => void;
    enterAlterByOptimizePartition?: (ctx: AlterByOptimizePartitionContext) => void;
    exitAlterByOptimizePartition?: (ctx: AlterByOptimizePartitionContext) => void;
    enterAlterByRebuildPartition?: (ctx: AlterByRebuildPartitionContext) => void;
    exitAlterByRebuildPartition?: (ctx: AlterByRebuildPartitionContext) => void;
    enterAlterByRepairPartition?: (ctx: AlterByRepairPartitionContext) => void;
    exitAlterByRepairPartition?: (ctx: AlterByRepairPartitionContext) => void;
    enterAlterByRemovePartitioning?: (ctx: AlterByRemovePartitioningContext) => void;
    exitAlterByRemovePartitioning?: (ctx: AlterByRemovePartitioningContext) => void;
    enterAlterByUpgradePartitioning?: (ctx: AlterByUpgradePartitioningContext) => void;
    exitAlterByUpgradePartitioning?: (ctx: AlterByUpgradePartitioningContext) => void;
    enterDropDatabase?: (ctx: DropDatabaseContext) => void;
    exitDropDatabase?: (ctx: DropDatabaseContext) => void;
    enterDropEvent?: (ctx: DropEventContext) => void;
    exitDropEvent?: (ctx: DropEventContext) => void;
    enterDropIndex?: (ctx: DropIndexContext) => void;
    exitDropIndex?: (ctx: DropIndexContext) => void;
    enterDropLogfileGroup?: (ctx: DropLogfileGroupContext) => void;
    exitDropLogfileGroup?: (ctx: DropLogfileGroupContext) => void;
    enterDropProcedure?: (ctx: DropProcedureContext) => void;
    exitDropProcedure?: (ctx: DropProcedureContext) => void;
    enterDropFunction?: (ctx: DropFunctionContext) => void;
    exitDropFunction?: (ctx: DropFunctionContext) => void;
    enterDropServer?: (ctx: DropServerContext) => void;
    exitDropServer?: (ctx: DropServerContext) => void;
    enterDropTable?: (ctx: DropTableContext) => void;
    exitDropTable?: (ctx: DropTableContext) => void;
    enterDropTablespace?: (ctx: DropTablespaceContext) => void;
    exitDropTablespace?: (ctx: DropTablespaceContext) => void;
    enterDropTrigger?: (ctx: DropTriggerContext) => void;
    exitDropTrigger?: (ctx: DropTriggerContext) => void;
    enterDropView?: (ctx: DropViewContext) => void;
    exitDropView?: (ctx: DropViewContext) => void;
    enterDropRole?: (ctx: DropRoleContext) => void;
    exitDropRole?: (ctx: DropRoleContext) => void;
    enterSetRole?: (ctx: SetRoleContext) => void;
    exitSetRole?: (ctx: SetRoleContext) => void;
    enterRenameTable?: (ctx: RenameTableContext) => void;
    exitRenameTable?: (ctx: RenameTableContext) => void;
    enterRenameTableClause?: (ctx: RenameTableClauseContext) => void;
    exitRenameTableClause?: (ctx: RenameTableClauseContext) => void;
    enterTruncateTable?: (ctx: TruncateTableContext) => void;
    exitTruncateTable?: (ctx: TruncateTableContext) => void;
    enterCallStatement?: (ctx: CallStatementContext) => void;
    exitCallStatement?: (ctx: CallStatementContext) => void;
    enterDeleteStatement?: (ctx: DeleteStatementContext) => void;
    exitDeleteStatement?: (ctx: DeleteStatementContext) => void;
    enterDoStatement?: (ctx: DoStatementContext) => void;
    exitDoStatement?: (ctx: DoStatementContext) => void;
    enterHandlerStatement?: (ctx: HandlerStatementContext) => void;
    exitHandlerStatement?: (ctx: HandlerStatementContext) => void;
    enterInsertStatement?: (ctx: InsertStatementContext) => void;
    exitInsertStatement?: (ctx: InsertStatementContext) => void;
    enterLoadDataStatement?: (ctx: LoadDataStatementContext) => void;
    exitLoadDataStatement?: (ctx: LoadDataStatementContext) => void;
    enterLoadXmlStatement?: (ctx: LoadXmlStatementContext) => void;
    exitLoadXmlStatement?: (ctx: LoadXmlStatementContext) => void;
    enterReplaceStatement?: (ctx: ReplaceStatementContext) => void;
    exitReplaceStatement?: (ctx: ReplaceStatementContext) => void;
    enterSimpleSelect?: (ctx: SimpleSelectContext) => void;
    exitSimpleSelect?: (ctx: SimpleSelectContext) => void;
    enterParenthesisSelect?: (ctx: ParenthesisSelectContext) => void;
    exitParenthesisSelect?: (ctx: ParenthesisSelectContext) => void;
    enterUnionSelect?: (ctx: UnionSelectContext) => void;
    exitUnionSelect?: (ctx: UnionSelectContext) => void;
    enterUnionParenthesisSelect?: (ctx: UnionParenthesisSelectContext) => void;
    exitUnionParenthesisSelect?: (ctx: UnionParenthesisSelectContext) => void;
    enterWithLateralStatement?: (ctx: WithLateralStatementContext) => void;
    exitWithLateralStatement?: (ctx: WithLateralStatementContext) => void;
    enterUpdateStatement?: (ctx: UpdateStatementContext) => void;
    exitUpdateStatement?: (ctx: UpdateStatementContext) => void;
    enterValuesStatement?: (ctx: ValuesStatementContext) => void;
    exitValuesStatement?: (ctx: ValuesStatementContext) => void;
    enterInsertStatementValue?: (ctx: InsertStatementValueContext) => void;
    exitInsertStatementValue?: (ctx: InsertStatementValueContext) => void;
    enterUpdatedElement?: (ctx: UpdatedElementContext) => void;
    exitUpdatedElement?: (ctx: UpdatedElementContext) => void;
    enterAssignmentField?: (ctx: AssignmentFieldContext) => void;
    exitAssignmentField?: (ctx: AssignmentFieldContext) => void;
    enterLockClause?: (ctx: LockClauseContext) => void;
    exitLockClause?: (ctx: LockClauseContext) => void;
    enterSingleDeleteStatement?: (ctx: SingleDeleteStatementContext) => void;
    exitSingleDeleteStatement?: (ctx: SingleDeleteStatementContext) => void;
    enterMultipleDeleteStatement?: (ctx: MultipleDeleteStatementContext) => void;
    exitMultipleDeleteStatement?: (ctx: MultipleDeleteStatementContext) => void;
    enterHandlerOpenStatement?: (ctx: HandlerOpenStatementContext) => void;
    exitHandlerOpenStatement?: (ctx: HandlerOpenStatementContext) => void;
    enterHandlerReadIndexStatement?: (ctx: HandlerReadIndexStatementContext) => void;
    exitHandlerReadIndexStatement?: (ctx: HandlerReadIndexStatementContext) => void;
    enterHandlerReadStatement?: (ctx: HandlerReadStatementContext) => void;
    exitHandlerReadStatement?: (ctx: HandlerReadStatementContext) => void;
    enterHandlerCloseStatement?: (ctx: HandlerCloseStatementContext) => void;
    exitHandlerCloseStatement?: (ctx: HandlerCloseStatementContext) => void;
    enterSingleUpdateStatement?: (ctx: SingleUpdateStatementContext) => void;
    exitSingleUpdateStatement?: (ctx: SingleUpdateStatementContext) => void;
    enterMultipleUpdateStatement?: (ctx: MultipleUpdateStatementContext) => void;
    exitMultipleUpdateStatement?: (ctx: MultipleUpdateStatementContext) => void;
    enterOrderByClause?: (ctx: OrderByClauseContext) => void;
    exitOrderByClause?: (ctx: OrderByClauseContext) => void;
    enterOrderByExpression?: (ctx: OrderByExpressionContext) => void;
    exitOrderByExpression?: (ctx: OrderByExpressionContext) => void;
    enterTableSources?: (ctx: TableSourcesContext) => void;
    exitTableSources?: (ctx: TableSourcesContext) => void;
    enterTableSourceBase?: (ctx: TableSourceBaseContext) => void;
    exitTableSourceBase?: (ctx: TableSourceBaseContext) => void;
    enterTableSourceNested?: (ctx: TableSourceNestedContext) => void;
    exitTableSourceNested?: (ctx: TableSourceNestedContext) => void;
    enterTableJson?: (ctx: TableJsonContext) => void;
    exitTableJson?: (ctx: TableJsonContext) => void;
    enterAtomTableItem?: (ctx: AtomTableItemContext) => void;
    exitAtomTableItem?: (ctx: AtomTableItemContext) => void;
    enterSubqueryTableItem?: (ctx: SubqueryTableItemContext) => void;
    exitSubqueryTableItem?: (ctx: SubqueryTableItemContext) => void;
    enterTableSourcesItem?: (ctx: TableSourcesItemContext) => void;
    exitTableSourcesItem?: (ctx: TableSourcesItemContext) => void;
    enterIndexHint?: (ctx: IndexHintContext) => void;
    exitIndexHint?: (ctx: IndexHintContext) => void;
    enterIndexHintType?: (ctx: IndexHintTypeContext) => void;
    exitIndexHintType?: (ctx: IndexHintTypeContext) => void;
    enterInnerJoin?: (ctx: InnerJoinContext) => void;
    exitInnerJoin?: (ctx: InnerJoinContext) => void;
    enterStraightJoin?: (ctx: StraightJoinContext) => void;
    exitStraightJoin?: (ctx: StraightJoinContext) => void;
    enterOuterJoin?: (ctx: OuterJoinContext) => void;
    exitOuterJoin?: (ctx: OuterJoinContext) => void;
    enterNaturalJoin?: (ctx: NaturalJoinContext) => void;
    exitNaturalJoin?: (ctx: NaturalJoinContext) => void;
    enterJoinSpec?: (ctx: JoinSpecContext) => void;
    exitJoinSpec?: (ctx: JoinSpecContext) => void;
    enterQueryExpression?: (ctx: QueryExpressionContext) => void;
    exitQueryExpression?: (ctx: QueryExpressionContext) => void;
    enterQueryExpressionNointo?: (ctx: QueryExpressionNointoContext) => void;
    exitQueryExpressionNointo?: (ctx: QueryExpressionNointoContext) => void;
    enterQuerySpecification?: (ctx: QuerySpecificationContext) => void;
    exitQuerySpecification?: (ctx: QuerySpecificationContext) => void;
    enterQuerySpecificationNointo?: (ctx: QuerySpecificationNointoContext) => void;
    exitQuerySpecificationNointo?: (ctx: QuerySpecificationNointoContext) => void;
    enterUnionParenthesis?: (ctx: UnionParenthesisContext) => void;
    exitUnionParenthesis?: (ctx: UnionParenthesisContext) => void;
    enterUnionStatement?: (ctx: UnionStatementContext) => void;
    exitUnionStatement?: (ctx: UnionStatementContext) => void;
    enterLateralStatement?: (ctx: LateralStatementContext) => void;
    exitLateralStatement?: (ctx: LateralStatementContext) => void;
    enterJsonTable?: (ctx: JsonTableContext) => void;
    exitJsonTable?: (ctx: JsonTableContext) => void;
    enterJsonColumnList?: (ctx: JsonColumnListContext) => void;
    exitJsonColumnList?: (ctx: JsonColumnListContext) => void;
    enterJsonColumn?: (ctx: JsonColumnContext) => void;
    exitJsonColumn?: (ctx: JsonColumnContext) => void;
    enterJsonOnEmpty?: (ctx: JsonOnEmptyContext) => void;
    exitJsonOnEmpty?: (ctx: JsonOnEmptyContext) => void;
    enterJsonOnError?: (ctx: JsonOnErrorContext) => void;
    exitJsonOnError?: (ctx: JsonOnErrorContext) => void;
    enterSelectSpec?: (ctx: SelectSpecContext) => void;
    exitSelectSpec?: (ctx: SelectSpecContext) => void;
    enterSelectElements?: (ctx: SelectElementsContext) => void;
    exitSelectElements?: (ctx: SelectElementsContext) => void;
    enterSelectStarElement?: (ctx: SelectStarElementContext) => void;
    exitSelectStarElement?: (ctx: SelectStarElementContext) => void;
    enterSelectColumnElement?: (ctx: SelectColumnElementContext) => void;
    exitSelectColumnElement?: (ctx: SelectColumnElementContext) => void;
    enterSelectFunctionElement?: (ctx: SelectFunctionElementContext) => void;
    exitSelectFunctionElement?: (ctx: SelectFunctionElementContext) => void;
    enterSelectExpressionElement?: (ctx: SelectExpressionElementContext) => void;
    exitSelectExpressionElement?: (ctx: SelectExpressionElementContext) => void;
    enterSelectIntoVariables?: (ctx: SelectIntoVariablesContext) => void;
    exitSelectIntoVariables?: (ctx: SelectIntoVariablesContext) => void;
    enterSelectIntoDumpFile?: (ctx: SelectIntoDumpFileContext) => void;
    exitSelectIntoDumpFile?: (ctx: SelectIntoDumpFileContext) => void;
    enterSelectIntoTextFile?: (ctx: SelectIntoTextFileContext) => void;
    exitSelectIntoTextFile?: (ctx: SelectIntoTextFileContext) => void;
    enterSelectFieldsInto?: (ctx: SelectFieldsIntoContext) => void;
    exitSelectFieldsInto?: (ctx: SelectFieldsIntoContext) => void;
    enterSelectLinesInto?: (ctx: SelectLinesIntoContext) => void;
    exitSelectLinesInto?: (ctx: SelectLinesIntoContext) => void;
    enterFromClause?: (ctx: FromClauseContext) => void;
    exitFromClause?: (ctx: FromClauseContext) => void;
    enterGroupByClause?: (ctx: GroupByClauseContext) => void;
    exitGroupByClause?: (ctx: GroupByClauseContext) => void;
    enterHavingClause?: (ctx: HavingClauseContext) => void;
    exitHavingClause?: (ctx: HavingClauseContext) => void;
    enterWindowClause?: (ctx: WindowClauseContext) => void;
    exitWindowClause?: (ctx: WindowClauseContext) => void;
    enterGroupByItem?: (ctx: GroupByItemContext) => void;
    exitGroupByItem?: (ctx: GroupByItemContext) => void;
    enterLimitClause?: (ctx: LimitClauseContext) => void;
    exitLimitClause?: (ctx: LimitClauseContext) => void;
    enterLimitClauseAtom?: (ctx: LimitClauseAtomContext) => void;
    exitLimitClauseAtom?: (ctx: LimitClauseAtomContext) => void;
    enterStartTransaction?: (ctx: StartTransactionContext) => void;
    exitStartTransaction?: (ctx: StartTransactionContext) => void;
    enterBeginWork?: (ctx: BeginWorkContext) => void;
    exitBeginWork?: (ctx: BeginWorkContext) => void;
    enterCommitWork?: (ctx: CommitWorkContext) => void;
    exitCommitWork?: (ctx: CommitWorkContext) => void;
    enterRollbackWork?: (ctx: RollbackWorkContext) => void;
    exitRollbackWork?: (ctx: RollbackWorkContext) => void;
    enterSavepointStatement?: (ctx: SavepointStatementContext) => void;
    exitSavepointStatement?: (ctx: SavepointStatementContext) => void;
    enterRollbackStatement?: (ctx: RollbackStatementContext) => void;
    exitRollbackStatement?: (ctx: RollbackStatementContext) => void;
    enterReleaseStatement?: (ctx: ReleaseStatementContext) => void;
    exitReleaseStatement?: (ctx: ReleaseStatementContext) => void;
    enterLockTables?: (ctx: LockTablesContext) => void;
    exitLockTables?: (ctx: LockTablesContext) => void;
    enterUnlockTables?: (ctx: UnlockTablesContext) => void;
    exitUnlockTables?: (ctx: UnlockTablesContext) => void;
    enterSetAutocommitStatement?: (ctx: SetAutocommitStatementContext) => void;
    exitSetAutocommitStatement?: (ctx: SetAutocommitStatementContext) => void;
    enterSetTransactionStatement?: (ctx: SetTransactionStatementContext) => void;
    exitSetTransactionStatement?: (ctx: SetTransactionStatementContext) => void;
    enterTransactionMode?: (ctx: TransactionModeContext) => void;
    exitTransactionMode?: (ctx: TransactionModeContext) => void;
    enterLockTableElement?: (ctx: LockTableElementContext) => void;
    exitLockTableElement?: (ctx: LockTableElementContext) => void;
    enterLockAction?: (ctx: LockActionContext) => void;
    exitLockAction?: (ctx: LockActionContext) => void;
    enterTransactionOption?: (ctx: TransactionOptionContext) => void;
    exitTransactionOption?: (ctx: TransactionOptionContext) => void;
    enterTransactionLevel?: (ctx: TransactionLevelContext) => void;
    exitTransactionLevel?: (ctx: TransactionLevelContext) => void;
    enterChangeMaster?: (ctx: ChangeMasterContext) => void;
    exitChangeMaster?: (ctx: ChangeMasterContext) => void;
    enterChangeReplicationFilter?: (ctx: ChangeReplicationFilterContext) => void;
    exitChangeReplicationFilter?: (ctx: ChangeReplicationFilterContext) => void;
    enterPurgeBinaryLogs?: (ctx: PurgeBinaryLogsContext) => void;
    exitPurgeBinaryLogs?: (ctx: PurgeBinaryLogsContext) => void;
    enterResetMaster?: (ctx: ResetMasterContext) => void;
    exitResetMaster?: (ctx: ResetMasterContext) => void;
    enterResetSlave?: (ctx: ResetSlaveContext) => void;
    exitResetSlave?: (ctx: ResetSlaveContext) => void;
    enterStartSlave?: (ctx: StartSlaveContext) => void;
    exitStartSlave?: (ctx: StartSlaveContext) => void;
    enterStopSlave?: (ctx: StopSlaveContext) => void;
    exitStopSlave?: (ctx: StopSlaveContext) => void;
    enterStartGroupReplication?: (ctx: StartGroupReplicationContext) => void;
    exitStartGroupReplication?: (ctx: StartGroupReplicationContext) => void;
    enterStopGroupReplication?: (ctx: StopGroupReplicationContext) => void;
    exitStopGroupReplication?: (ctx: StopGroupReplicationContext) => void;
    enterMasterStringOption?: (ctx: MasterStringOptionContext) => void;
    exitMasterStringOption?: (ctx: MasterStringOptionContext) => void;
    enterMasterDecimalOption?: (ctx: MasterDecimalOptionContext) => void;
    exitMasterDecimalOption?: (ctx: MasterDecimalOptionContext) => void;
    enterMasterBoolOption?: (ctx: MasterBoolOptionContext) => void;
    exitMasterBoolOption?: (ctx: MasterBoolOptionContext) => void;
    enterMasterRealOption?: (ctx: MasterRealOptionContext) => void;
    exitMasterRealOption?: (ctx: MasterRealOptionContext) => void;
    enterMasterUidListOption?: (ctx: MasterUidListOptionContext) => void;
    exitMasterUidListOption?: (ctx: MasterUidListOptionContext) => void;
    enterStringMasterOption?: (ctx: StringMasterOptionContext) => void;
    exitStringMasterOption?: (ctx: StringMasterOptionContext) => void;
    enterDecimalMasterOption?: (ctx: DecimalMasterOptionContext) => void;
    exitDecimalMasterOption?: (ctx: DecimalMasterOptionContext) => void;
    enterBoolMasterOption?: (ctx: BoolMasterOptionContext) => void;
    exitBoolMasterOption?: (ctx: BoolMasterOptionContext) => void;
    enterChannelOption?: (ctx: ChannelOptionContext) => void;
    exitChannelOption?: (ctx: ChannelOptionContext) => void;
    enterDoDbReplication?: (ctx: DoDbReplicationContext) => void;
    exitDoDbReplication?: (ctx: DoDbReplicationContext) => void;
    enterIgnoreDbReplication?: (ctx: IgnoreDbReplicationContext) => void;
    exitIgnoreDbReplication?: (ctx: IgnoreDbReplicationContext) => void;
    enterDoTableReplication?: (ctx: DoTableReplicationContext) => void;
    exitDoTableReplication?: (ctx: DoTableReplicationContext) => void;
    enterIgnoreTableReplication?: (ctx: IgnoreTableReplicationContext) => void;
    exitIgnoreTableReplication?: (ctx: IgnoreTableReplicationContext) => void;
    enterWildDoTableReplication?: (ctx: WildDoTableReplicationContext) => void;
    exitWildDoTableReplication?: (ctx: WildDoTableReplicationContext) => void;
    enterWildIgnoreTableReplication?: (ctx: WildIgnoreTableReplicationContext) => void;
    exitWildIgnoreTableReplication?: (ctx: WildIgnoreTableReplicationContext) => void;
    enterRewriteDbReplication?: (ctx: RewriteDbReplicationContext) => void;
    exitRewriteDbReplication?: (ctx: RewriteDbReplicationContext) => void;
    enterTablePair?: (ctx: TablePairContext) => void;
    exitTablePair?: (ctx: TablePairContext) => void;
    enterThreadType?: (ctx: ThreadTypeContext) => void;
    exitThreadType?: (ctx: ThreadTypeContext) => void;
    enterGtidsUntilOption?: (ctx: GtidsUntilOptionContext) => void;
    exitGtidsUntilOption?: (ctx: GtidsUntilOptionContext) => void;
    enterMasterLogUntilOption?: (ctx: MasterLogUntilOptionContext) => void;
    exitMasterLogUntilOption?: (ctx: MasterLogUntilOptionContext) => void;
    enterRelayLogUntilOption?: (ctx: RelayLogUntilOptionContext) => void;
    exitRelayLogUntilOption?: (ctx: RelayLogUntilOptionContext) => void;
    enterSqlGapsUntilOption?: (ctx: SqlGapsUntilOptionContext) => void;
    exitSqlGapsUntilOption?: (ctx: SqlGapsUntilOptionContext) => void;
    enterUserConnectionOption?: (ctx: UserConnectionOptionContext) => void;
    exitUserConnectionOption?: (ctx: UserConnectionOptionContext) => void;
    enterPasswordConnectionOption?: (ctx: PasswordConnectionOptionContext) => void;
    exitPasswordConnectionOption?: (ctx: PasswordConnectionOptionContext) => void;
    enterDefaultAuthConnectionOption?: (ctx: DefaultAuthConnectionOptionContext) => void;
    exitDefaultAuthConnectionOption?: (ctx: DefaultAuthConnectionOptionContext) => void;
    enterPluginDirConnectionOption?: (ctx: PluginDirConnectionOptionContext) => void;
    exitPluginDirConnectionOption?: (ctx: PluginDirConnectionOptionContext) => void;
    enterGtuidSet?: (ctx: GtuidSetContext) => void;
    exitGtuidSet?: (ctx: GtuidSetContext) => void;
    enterXaStartTransaction?: (ctx: XaStartTransactionContext) => void;
    exitXaStartTransaction?: (ctx: XaStartTransactionContext) => void;
    enterXaEndTransaction?: (ctx: XaEndTransactionContext) => void;
    exitXaEndTransaction?: (ctx: XaEndTransactionContext) => void;
    enterXaPrepareStatement?: (ctx: XaPrepareStatementContext) => void;
    exitXaPrepareStatement?: (ctx: XaPrepareStatementContext) => void;
    enterXaCommitWork?: (ctx: XaCommitWorkContext) => void;
    exitXaCommitWork?: (ctx: XaCommitWorkContext) => void;
    enterXaRollbackWork?: (ctx: XaRollbackWorkContext) => void;
    exitXaRollbackWork?: (ctx: XaRollbackWorkContext) => void;
    enterXaRecoverWork?: (ctx: XaRecoverWorkContext) => void;
    exitXaRecoverWork?: (ctx: XaRecoverWorkContext) => void;
    enterPrepareStatement?: (ctx: PrepareStatementContext) => void;
    exitPrepareStatement?: (ctx: PrepareStatementContext) => void;
    enterExecuteStatement?: (ctx: ExecuteStatementContext) => void;
    exitExecuteStatement?: (ctx: ExecuteStatementContext) => void;
    enterDeallocatePrepare?: (ctx: DeallocatePrepareContext) => void;
    exitDeallocatePrepare?: (ctx: DeallocatePrepareContext) => void;
    enterRoutineBody?: (ctx: RoutineBodyContext) => void;
    exitRoutineBody?: (ctx: RoutineBodyContext) => void;
    enterBlockStatement?: (ctx: BlockStatementContext) => void;
    exitBlockStatement?: (ctx: BlockStatementContext) => void;
    enterCaseStatement?: (ctx: CaseStatementContext) => void;
    exitCaseStatement?: (ctx: CaseStatementContext) => void;
    enterIfStatement?: (ctx: IfStatementContext) => void;
    exitIfStatement?: (ctx: IfStatementContext) => void;
    enterIterateStatement?: (ctx: IterateStatementContext) => void;
    exitIterateStatement?: (ctx: IterateStatementContext) => void;
    enterLeaveStatement?: (ctx: LeaveStatementContext) => void;
    exitLeaveStatement?: (ctx: LeaveStatementContext) => void;
    enterLoopStatement?: (ctx: LoopStatementContext) => void;
    exitLoopStatement?: (ctx: LoopStatementContext) => void;
    enterRepeatStatement?: (ctx: RepeatStatementContext) => void;
    exitRepeatStatement?: (ctx: RepeatStatementContext) => void;
    enterReturnStatement?: (ctx: ReturnStatementContext) => void;
    exitReturnStatement?: (ctx: ReturnStatementContext) => void;
    enterWhileStatement?: (ctx: WhileStatementContext) => void;
    exitWhileStatement?: (ctx: WhileStatementContext) => void;
    enterCloseCursor?: (ctx: CloseCursorContext) => void;
    exitCloseCursor?: (ctx: CloseCursorContext) => void;
    enterFetchCursor?: (ctx: FetchCursorContext) => void;
    exitFetchCursor?: (ctx: FetchCursorContext) => void;
    enterOpenCursor?: (ctx: OpenCursorContext) => void;
    exitOpenCursor?: (ctx: OpenCursorContext) => void;
    enterDeclareVariable?: (ctx: DeclareVariableContext) => void;
    exitDeclareVariable?: (ctx: DeclareVariableContext) => void;
    enterDeclareCondition?: (ctx: DeclareConditionContext) => void;
    exitDeclareCondition?: (ctx: DeclareConditionContext) => void;
    enterDeclareCursor?: (ctx: DeclareCursorContext) => void;
    exitDeclareCursor?: (ctx: DeclareCursorContext) => void;
    enterDeclareHandler?: (ctx: DeclareHandlerContext) => void;
    exitDeclareHandler?: (ctx: DeclareHandlerContext) => void;
    enterHandlerConditionCode?: (ctx: HandlerConditionCodeContext) => void;
    exitHandlerConditionCode?: (ctx: HandlerConditionCodeContext) => void;
    enterHandlerConditionState?: (ctx: HandlerConditionStateContext) => void;
    exitHandlerConditionState?: (ctx: HandlerConditionStateContext) => void;
    enterHandlerConditionName?: (ctx: HandlerConditionNameContext) => void;
    exitHandlerConditionName?: (ctx: HandlerConditionNameContext) => void;
    enterHandlerConditionWarning?: (ctx: HandlerConditionWarningContext) => void;
    exitHandlerConditionWarning?: (ctx: HandlerConditionWarningContext) => void;
    enterHandlerConditionNotfound?: (ctx: HandlerConditionNotfoundContext) => void;
    exitHandlerConditionNotfound?: (ctx: HandlerConditionNotfoundContext) => void;
    enterHandlerConditionException?: (ctx: HandlerConditionExceptionContext) => void;
    exitHandlerConditionException?: (ctx: HandlerConditionExceptionContext) => void;
    enterProcedureSqlStatement?: (ctx: ProcedureSqlStatementContext) => void;
    exitProcedureSqlStatement?: (ctx: ProcedureSqlStatementContext) => void;
    enterCaseAlternative?: (ctx: CaseAlternativeContext) => void;
    exitCaseAlternative?: (ctx: CaseAlternativeContext) => void;
    enterElifAlternative?: (ctx: ElifAlternativeContext) => void;
    exitElifAlternative?: (ctx: ElifAlternativeContext) => void;
    enterAlterUserMysqlV56?: (ctx: AlterUserMysqlV56Context) => void;
    exitAlterUserMysqlV56?: (ctx: AlterUserMysqlV56Context) => void;
    enterAlterUserMysqlV80?: (ctx: AlterUserMysqlV80Context) => void;
    exitAlterUserMysqlV80?: (ctx: AlterUserMysqlV80Context) => void;
    enterCreateUserMysqlV56?: (ctx: CreateUserMysqlV56Context) => void;
    exitCreateUserMysqlV56?: (ctx: CreateUserMysqlV56Context) => void;
    enterCreateUserMysqlV80?: (ctx: CreateUserMysqlV80Context) => void;
    exitCreateUserMysqlV80?: (ctx: CreateUserMysqlV80Context) => void;
    enterDropUser?: (ctx: DropUserContext) => void;
    exitDropUser?: (ctx: DropUserContext) => void;
    enterGrantStatement?: (ctx: GrantStatementContext) => void;
    exitGrantStatement?: (ctx: GrantStatementContext) => void;
    enterRoleOption?: (ctx: RoleOptionContext) => void;
    exitRoleOption?: (ctx: RoleOptionContext) => void;
    enterGrantProxy?: (ctx: GrantProxyContext) => void;
    exitGrantProxy?: (ctx: GrantProxyContext) => void;
    enterRenameUser?: (ctx: RenameUserContext) => void;
    exitRenameUser?: (ctx: RenameUserContext) => void;
    enterDetailRevoke?: (ctx: DetailRevokeContext) => void;
    exitDetailRevoke?: (ctx: DetailRevokeContext) => void;
    enterShortRevoke?: (ctx: ShortRevokeContext) => void;
    exitShortRevoke?: (ctx: ShortRevokeContext) => void;
    enterRoleRevoke?: (ctx: RoleRevokeContext) => void;
    exitRoleRevoke?: (ctx: RoleRevokeContext) => void;
    enterRevokeProxy?: (ctx: RevokeProxyContext) => void;
    exitRevokeProxy?: (ctx: RevokeProxyContext) => void;
    enterSetPasswordStatement?: (ctx: SetPasswordStatementContext) => void;
    exitSetPasswordStatement?: (ctx: SetPasswordStatementContext) => void;
    enterUserSpecification?: (ctx: UserSpecificationContext) => void;
    exitUserSpecification?: (ctx: UserSpecificationContext) => void;
    enterHashAuthOption?: (ctx: HashAuthOptionContext) => void;
    exitHashAuthOption?: (ctx: HashAuthOptionContext) => void;
    enterRandomAuthOption?: (ctx: RandomAuthOptionContext) => void;
    exitRandomAuthOption?: (ctx: RandomAuthOptionContext) => void;
    enterStringAuthOption?: (ctx: StringAuthOptionContext) => void;
    exitStringAuthOption?: (ctx: StringAuthOptionContext) => void;
    enterModuleAuthOption?: (ctx: ModuleAuthOptionContext) => void;
    exitModuleAuthOption?: (ctx: ModuleAuthOptionContext) => void;
    enterSimpleAuthOption?: (ctx: SimpleAuthOptionContext) => void;
    exitSimpleAuthOption?: (ctx: SimpleAuthOptionContext) => void;
    enterAuthOptionClause?: (ctx: AuthOptionClauseContext) => void;
    exitAuthOptionClause?: (ctx: AuthOptionClauseContext) => void;
    enterModule?: (ctx: ModuleContext) => void;
    exitModule?: (ctx: ModuleContext) => void;
    enterPasswordModuleOption?: (ctx: PasswordModuleOptionContext) => void;
    exitPasswordModuleOption?: (ctx: PasswordModuleOptionContext) => void;
    enterTlsOption?: (ctx: TlsOptionContext) => void;
    exitTlsOption?: (ctx: TlsOptionContext) => void;
    enterUserResourceOption?: (ctx: UserResourceOptionContext) => void;
    exitUserResourceOption?: (ctx: UserResourceOptionContext) => void;
    enterUserPasswordOption?: (ctx: UserPasswordOptionContext) => void;
    exitUserPasswordOption?: (ctx: UserPasswordOptionContext) => void;
    enterUserLockOption?: (ctx: UserLockOptionContext) => void;
    exitUserLockOption?: (ctx: UserLockOptionContext) => void;
    enterPrivelegeClause?: (ctx: PrivelegeClauseContext) => void;
    exitPrivelegeClause?: (ctx: PrivelegeClauseContext) => void;
    enterPrivilege?: (ctx: PrivilegeContext) => void;
    exitPrivilege?: (ctx: PrivilegeContext) => void;
    enterCurrentSchemaPriviLevel?: (ctx: CurrentSchemaPriviLevelContext) => void;
    exitCurrentSchemaPriviLevel?: (ctx: CurrentSchemaPriviLevelContext) => void;
    enterGlobalPrivLevel?: (ctx: GlobalPrivLevelContext) => void;
    exitGlobalPrivLevel?: (ctx: GlobalPrivLevelContext) => void;
    enterDefiniteSchemaPrivLevel?: (ctx: DefiniteSchemaPrivLevelContext) => void;
    exitDefiniteSchemaPrivLevel?: (ctx: DefiniteSchemaPrivLevelContext) => void;
    enterDefiniteFullTablePrivLevel?: (ctx: DefiniteFullTablePrivLevelContext) => void;
    exitDefiniteFullTablePrivLevel?: (ctx: DefiniteFullTablePrivLevelContext) => void;
    enterDefiniteFullTablePrivLevel2?: (ctx: DefiniteFullTablePrivLevel2Context) => void;
    exitDefiniteFullTablePrivLevel2?: (ctx: DefiniteFullTablePrivLevel2Context) => void;
    enterDefiniteTablePrivLevel?: (ctx: DefiniteTablePrivLevelContext) => void;
    exitDefiniteTablePrivLevel?: (ctx: DefiniteTablePrivLevelContext) => void;
    enterRenameUserClause?: (ctx: RenameUserClauseContext) => void;
    exitRenameUserClause?: (ctx: RenameUserClauseContext) => void;
    enterAnalyzeTable?: (ctx: AnalyzeTableContext) => void;
    exitAnalyzeTable?: (ctx: AnalyzeTableContext) => void;
    enterCheckTable?: (ctx: CheckTableContext) => void;
    exitCheckTable?: (ctx: CheckTableContext) => void;
    enterChecksumTable?: (ctx: ChecksumTableContext) => void;
    exitChecksumTable?: (ctx: ChecksumTableContext) => void;
    enterOptimizeTable?: (ctx: OptimizeTableContext) => void;
    exitOptimizeTable?: (ctx: OptimizeTableContext) => void;
    enterRepairTable?: (ctx: RepairTableContext) => void;
    exitRepairTable?: (ctx: RepairTableContext) => void;
    enterCheckTableOption?: (ctx: CheckTableOptionContext) => void;
    exitCheckTableOption?: (ctx: CheckTableOptionContext) => void;
    enterCreateUdfunction?: (ctx: CreateUdfunctionContext) => void;
    exitCreateUdfunction?: (ctx: CreateUdfunctionContext) => void;
    enterInstallPlugin?: (ctx: InstallPluginContext) => void;
    exitInstallPlugin?: (ctx: InstallPluginContext) => void;
    enterUninstallPlugin?: (ctx: UninstallPluginContext) => void;
    exitUninstallPlugin?: (ctx: UninstallPluginContext) => void;
    enterSetVariable?: (ctx: SetVariableContext) => void;
    exitSetVariable?: (ctx: SetVariableContext) => void;
    enterSetCharset?: (ctx: SetCharsetContext) => void;
    exitSetCharset?: (ctx: SetCharsetContext) => void;
    enterSetNames?: (ctx: SetNamesContext) => void;
    exitSetNames?: (ctx: SetNamesContext) => void;
    enterSetPassword?: (ctx: SetPasswordContext) => void;
    exitSetPassword?: (ctx: SetPasswordContext) => void;
    enterSetTransaction?: (ctx: SetTransactionContext) => void;
    exitSetTransaction?: (ctx: SetTransactionContext) => void;
    enterSetAutocommit?: (ctx: SetAutocommitContext) => void;
    exitSetAutocommit?: (ctx: SetAutocommitContext) => void;
    enterSetNewValueInsideTrigger?: (ctx: SetNewValueInsideTriggerContext) => void;
    exitSetNewValueInsideTrigger?: (ctx: SetNewValueInsideTriggerContext) => void;
    enterShowMasterLogs?: (ctx: ShowMasterLogsContext) => void;
    exitShowMasterLogs?: (ctx: ShowMasterLogsContext) => void;
    enterShowLogEvents?: (ctx: ShowLogEventsContext) => void;
    exitShowLogEvents?: (ctx: ShowLogEventsContext) => void;
    enterShowObjectFilter?: (ctx: ShowObjectFilterContext) => void;
    exitShowObjectFilter?: (ctx: ShowObjectFilterContext) => void;
    enterShowColumns?: (ctx: ShowColumnsContext) => void;
    exitShowColumns?: (ctx: ShowColumnsContext) => void;
    enterShowCreateDb?: (ctx: ShowCreateDbContext) => void;
    exitShowCreateDb?: (ctx: ShowCreateDbContext) => void;
    enterShowCreateFullIdObject?: (ctx: ShowCreateFullIdObjectContext) => void;
    exitShowCreateFullIdObject?: (ctx: ShowCreateFullIdObjectContext) => void;
    enterShowCreateUser?: (ctx: ShowCreateUserContext) => void;
    exitShowCreateUser?: (ctx: ShowCreateUserContext) => void;
    enterShowEngine?: (ctx: ShowEngineContext) => void;
    exitShowEngine?: (ctx: ShowEngineContext) => void;
    enterShowGlobalInfo?: (ctx: ShowGlobalInfoContext) => void;
    exitShowGlobalInfo?: (ctx: ShowGlobalInfoContext) => void;
    enterShowErrors?: (ctx: ShowErrorsContext) => void;
    exitShowErrors?: (ctx: ShowErrorsContext) => void;
    enterShowCountErrors?: (ctx: ShowCountErrorsContext) => void;
    exitShowCountErrors?: (ctx: ShowCountErrorsContext) => void;
    enterShowSchemaFilter?: (ctx: ShowSchemaFilterContext) => void;
    exitShowSchemaFilter?: (ctx: ShowSchemaFilterContext) => void;
    enterShowRoutine?: (ctx: ShowRoutineContext) => void;
    exitShowRoutine?: (ctx: ShowRoutineContext) => void;
    enterShowGrants?: (ctx: ShowGrantsContext) => void;
    exitShowGrants?: (ctx: ShowGrantsContext) => void;
    enterShowIndexes?: (ctx: ShowIndexesContext) => void;
    exitShowIndexes?: (ctx: ShowIndexesContext) => void;
    enterShowOpenTables?: (ctx: ShowOpenTablesContext) => void;
    exitShowOpenTables?: (ctx: ShowOpenTablesContext) => void;
    enterShowProfile?: (ctx: ShowProfileContext) => void;
    exitShowProfile?: (ctx: ShowProfileContext) => void;
    enterShowSlaveStatus?: (ctx: ShowSlaveStatusContext) => void;
    exitShowSlaveStatus?: (ctx: ShowSlaveStatusContext) => void;
    enterVariableClause?: (ctx: VariableClauseContext) => void;
    exitVariableClause?: (ctx: VariableClauseContext) => void;
    enterShowCommonEntity?: (ctx: ShowCommonEntityContext) => void;
    exitShowCommonEntity?: (ctx: ShowCommonEntityContext) => void;
    enterShowFilter?: (ctx: ShowFilterContext) => void;
    exitShowFilter?: (ctx: ShowFilterContext) => void;
    enterShowGlobalInfoClause?: (ctx: ShowGlobalInfoClauseContext) => void;
    exitShowGlobalInfoClause?: (ctx: ShowGlobalInfoClauseContext) => void;
    enterShowSchemaEntity?: (ctx: ShowSchemaEntityContext) => void;
    exitShowSchemaEntity?: (ctx: ShowSchemaEntityContext) => void;
    enterShowProfileType?: (ctx: ShowProfileTypeContext) => void;
    exitShowProfileType?: (ctx: ShowProfileTypeContext) => void;
    enterBinlogStatement?: (ctx: BinlogStatementContext) => void;
    exitBinlogStatement?: (ctx: BinlogStatementContext) => void;
    enterCacheIndexStatement?: (ctx: CacheIndexStatementContext) => void;
    exitCacheIndexStatement?: (ctx: CacheIndexStatementContext) => void;
    enterFlushStatement?: (ctx: FlushStatementContext) => void;
    exitFlushStatement?: (ctx: FlushStatementContext) => void;
    enterKillStatement?: (ctx: KillStatementContext) => void;
    exitKillStatement?: (ctx: KillStatementContext) => void;
    enterLoadIndexIntoCache?: (ctx: LoadIndexIntoCacheContext) => void;
    exitLoadIndexIntoCache?: (ctx: LoadIndexIntoCacheContext) => void;
    enterResetStatement?: (ctx: ResetStatementContext) => void;
    exitResetStatement?: (ctx: ResetStatementContext) => void;
    enterShutdownStatement?: (ctx: ShutdownStatementContext) => void;
    exitShutdownStatement?: (ctx: ShutdownStatementContext) => void;
    enterTableIndexes?: (ctx: TableIndexesContext) => void;
    exitTableIndexes?: (ctx: TableIndexesContext) => void;
    enterSimpleFlushOption?: (ctx: SimpleFlushOptionContext) => void;
    exitSimpleFlushOption?: (ctx: SimpleFlushOptionContext) => void;
    enterChannelFlushOption?: (ctx: ChannelFlushOptionContext) => void;
    exitChannelFlushOption?: (ctx: ChannelFlushOptionContext) => void;
    enterTableFlushOption?: (ctx: TableFlushOptionContext) => void;
    exitTableFlushOption?: (ctx: TableFlushOptionContext) => void;
    enterFlushTableOption?: (ctx: FlushTableOptionContext) => void;
    exitFlushTableOption?: (ctx: FlushTableOptionContext) => void;
    enterLoadedTableIndexes?: (ctx: LoadedTableIndexesContext) => void;
    exitLoadedTableIndexes?: (ctx: LoadedTableIndexesContext) => void;
    enterSimpleDescribeStatement?: (ctx: SimpleDescribeStatementContext) => void;
    exitSimpleDescribeStatement?: (ctx: SimpleDescribeStatementContext) => void;
    enterFullDescribeStatement?: (ctx: FullDescribeStatementContext) => void;
    exitFullDescribeStatement?: (ctx: FullDescribeStatementContext) => void;
    enterHelpStatement?: (ctx: HelpStatementContext) => void;
    exitHelpStatement?: (ctx: HelpStatementContext) => void;
    enterUseStatement?: (ctx: UseStatementContext) => void;
    exitUseStatement?: (ctx: UseStatementContext) => void;
    enterSignalStatement?: (ctx: SignalStatementContext) => void;
    exitSignalStatement?: (ctx: SignalStatementContext) => void;
    enterResignalStatement?: (ctx: ResignalStatementContext) => void;
    exitResignalStatement?: (ctx: ResignalStatementContext) => void;
    enterSignalConditionInformation?: (ctx: SignalConditionInformationContext) => void;
    exitSignalConditionInformation?: (ctx: SignalConditionInformationContext) => void;
    enterWithStatement?: (ctx: WithStatementContext) => void;
    exitWithStatement?: (ctx: WithStatementContext) => void;
    enterTableStatement?: (ctx: TableStatementContext) => void;
    exitTableStatement?: (ctx: TableStatementContext) => void;
    enterDiagnosticsStatement?: (ctx: DiagnosticsStatementContext) => void;
    exitDiagnosticsStatement?: (ctx: DiagnosticsStatementContext) => void;
    enterDiagnosticsConditionInformationName?: (ctx: DiagnosticsConditionInformationNameContext) => void;
    exitDiagnosticsConditionInformationName?: (ctx: DiagnosticsConditionInformationNameContext) => void;
    enterDescribeStatements?: (ctx: DescribeStatementsContext) => void;
    exitDescribeStatements?: (ctx: DescribeStatementsContext) => void;
    enterDescribeConnection?: (ctx: DescribeConnectionContext) => void;
    exitDescribeConnection?: (ctx: DescribeConnectionContext) => void;
    enterFullId?: (ctx: FullIdContext) => void;
    exitFullId?: (ctx: FullIdContext) => void;
    enterTableName?: (ctx: TableNameContext) => void;
    exitTableName?: (ctx: TableNameContext) => void;
    enterRoleName?: (ctx: RoleNameContext) => void;
    exitRoleName?: (ctx: RoleNameContext) => void;
    enterFullColumnName?: (ctx: FullColumnNameContext) => void;
    exitFullColumnName?: (ctx: FullColumnNameContext) => void;
    enterIndexColumnName?: (ctx: IndexColumnNameContext) => void;
    exitIndexColumnName?: (ctx: IndexColumnNameContext) => void;
    enterSimpleUserName?: (ctx: SimpleUserNameContext) => void;
    exitSimpleUserName?: (ctx: SimpleUserNameContext) => void;
    enterHostName?: (ctx: HostNameContext) => void;
    exitHostName?: (ctx: HostNameContext) => void;
    enterUserName?: (ctx: UserNameContext) => void;
    exitUserName?: (ctx: UserNameContext) => void;
    enterMysqlVariable?: (ctx: MysqlVariableContext) => void;
    exitMysqlVariable?: (ctx: MysqlVariableContext) => void;
    enterCharsetName?: (ctx: CharsetNameContext) => void;
    exitCharsetName?: (ctx: CharsetNameContext) => void;
    enterCollationName?: (ctx: CollationNameContext) => void;
    exitCollationName?: (ctx: CollationNameContext) => void;
    enterEngineName?: (ctx: EngineNameContext) => void;
    exitEngineName?: (ctx: EngineNameContext) => void;
    enterEngineNameBase?: (ctx: EngineNameBaseContext) => void;
    exitEngineNameBase?: (ctx: EngineNameBaseContext) => void;
    enterUuidSet?: (ctx: UuidSetContext) => void;
    exitUuidSet?: (ctx: UuidSetContext) => void;
    enterXid?: (ctx: XidContext) => void;
    exitXid?: (ctx: XidContext) => void;
    enterXuidStringId?: (ctx: XuidStringIdContext) => void;
    exitXuidStringId?: (ctx: XuidStringIdContext) => void;
    enterAuthPlugin?: (ctx: AuthPluginContext) => void;
    exitAuthPlugin?: (ctx: AuthPluginContext) => void;
    enterUid?: (ctx: UidContext) => void;
    exitUid?: (ctx: UidContext) => void;
    enterSimpleId?: (ctx: SimpleIdContext) => void;
    exitSimpleId?: (ctx: SimpleIdContext) => void;
    enterDottedId?: (ctx: DottedIdContext) => void;
    exitDottedId?: (ctx: DottedIdContext) => void;
    enterDecimalLiteral?: (ctx: DecimalLiteralContext) => void;
    exitDecimalLiteral?: (ctx: DecimalLiteralContext) => void;
    enterFileSizeLiteral?: (ctx: FileSizeLiteralContext) => void;
    exitFileSizeLiteral?: (ctx: FileSizeLiteralContext) => void;
    enterStringLiteral?: (ctx: StringLiteralContext) => void;
    exitStringLiteral?: (ctx: StringLiteralContext) => void;
    enterBooleanLiteral?: (ctx: BooleanLiteralContext) => void;
    exitBooleanLiteral?: (ctx: BooleanLiteralContext) => void;
    enterHexadecimalLiteral?: (ctx: HexadecimalLiteralContext) => void;
    exitHexadecimalLiteral?: (ctx: HexadecimalLiteralContext) => void;
    enterNullNotnull?: (ctx: NullNotnullContext) => void;
    exitNullNotnull?: (ctx: NullNotnullContext) => void;
    enterConstant?: (ctx: ConstantContext) => void;
    exitConstant?: (ctx: ConstantContext) => void;
    enterStringDataType?: (ctx: StringDataTypeContext) => void;
    exitStringDataType?: (ctx: StringDataTypeContext) => void;
    enterNationalVaryingStringDataType?: (ctx: NationalVaryingStringDataTypeContext) => void;
    exitNationalVaryingStringDataType?: (ctx: NationalVaryingStringDataTypeContext) => void;
    enterNationalStringDataType?: (ctx: NationalStringDataTypeContext) => void;
    exitNationalStringDataType?: (ctx: NationalStringDataTypeContext) => void;
    enterDimensionDataType?: (ctx: DimensionDataTypeContext) => void;
    exitDimensionDataType?: (ctx: DimensionDataTypeContext) => void;
    enterSimpleDataType?: (ctx: SimpleDataTypeContext) => void;
    exitSimpleDataType?: (ctx: SimpleDataTypeContext) => void;
    enterCollectionDataType?: (ctx: CollectionDataTypeContext) => void;
    exitCollectionDataType?: (ctx: CollectionDataTypeContext) => void;
    enterSpatialDataType?: (ctx: SpatialDataTypeContext) => void;
    exitSpatialDataType?: (ctx: SpatialDataTypeContext) => void;
    enterLongVarcharDataType?: (ctx: LongVarcharDataTypeContext) => void;
    exitLongVarcharDataType?: (ctx: LongVarcharDataTypeContext) => void;
    enterLongVarbinaryDataType?: (ctx: LongVarbinaryDataTypeContext) => void;
    exitLongVarbinaryDataType?: (ctx: LongVarbinaryDataTypeContext) => void;
    enterCollectionOptions?: (ctx: CollectionOptionsContext) => void;
    exitCollectionOptions?: (ctx: CollectionOptionsContext) => void;
    enterConvertedDataType?: (ctx: ConvertedDataTypeContext) => void;
    exitConvertedDataType?: (ctx: ConvertedDataTypeContext) => void;
    enterLengthOneDimension?: (ctx: LengthOneDimensionContext) => void;
    exitLengthOneDimension?: (ctx: LengthOneDimensionContext) => void;
    enterLengthTwoDimension?: (ctx: LengthTwoDimensionContext) => void;
    exitLengthTwoDimension?: (ctx: LengthTwoDimensionContext) => void;
    enterLengthTwoOptionalDimension?: (ctx: LengthTwoOptionalDimensionContext) => void;
    exitLengthTwoOptionalDimension?: (ctx: LengthTwoOptionalDimensionContext) => void;
    enterUidList?: (ctx: UidListContext) => void;
    exitUidList?: (ctx: UidListContext) => void;
    enterFullColumnNameList?: (ctx: FullColumnNameListContext) => void;
    exitFullColumnNameList?: (ctx: FullColumnNameListContext) => void;
    enterTables?: (ctx: TablesContext) => void;
    exitTables?: (ctx: TablesContext) => void;
    enterIndexColumnNames?: (ctx: IndexColumnNamesContext) => void;
    exitIndexColumnNames?: (ctx: IndexColumnNamesContext) => void;
    enterExpressions?: (ctx: ExpressionsContext) => void;
    exitExpressions?: (ctx: ExpressionsContext) => void;
    enterExpressionsWithDefaults?: (ctx: ExpressionsWithDefaultsContext) => void;
    exitExpressionsWithDefaults?: (ctx: ExpressionsWithDefaultsContext) => void;
    enterConstants?: (ctx: ConstantsContext) => void;
    exitConstants?: (ctx: ConstantsContext) => void;
    enterSimpleStrings?: (ctx: SimpleStringsContext) => void;
    exitSimpleStrings?: (ctx: SimpleStringsContext) => void;
    enterUserVariables?: (ctx: UserVariablesContext) => void;
    exitUserVariables?: (ctx: UserVariablesContext) => void;
    enterDefaultValue?: (ctx: DefaultValueContext) => void;
    exitDefaultValue?: (ctx: DefaultValueContext) => void;
    enterCurrentTimestamp?: (ctx: CurrentTimestampContext) => void;
    exitCurrentTimestamp?: (ctx: CurrentTimestampContext) => void;
    enterExpressionOrDefault?: (ctx: ExpressionOrDefaultContext) => void;
    exitExpressionOrDefault?: (ctx: ExpressionOrDefaultContext) => void;
    enterIfExists?: (ctx: IfExistsContext) => void;
    exitIfExists?: (ctx: IfExistsContext) => void;
    enterIfNotExists?: (ctx: IfNotExistsContext) => void;
    exitIfNotExists?: (ctx: IfNotExistsContext) => void;
    enterOrReplace?: (ctx: OrReplaceContext) => void;
    exitOrReplace?: (ctx: OrReplaceContext) => void;
    enterWaitNowaitClause?: (ctx: WaitNowaitClauseContext) => void;
    exitWaitNowaitClause?: (ctx: WaitNowaitClauseContext) => void;
    enterSpecificFunctionCall?: (ctx: SpecificFunctionCallContext) => void;
    exitSpecificFunctionCall?: (ctx: SpecificFunctionCallContext) => void;
    enterAggregateFunctionCall?: (ctx: AggregateFunctionCallContext) => void;
    exitAggregateFunctionCall?: (ctx: AggregateFunctionCallContext) => void;
    enterNonAggregateFunctionCall?: (ctx: NonAggregateFunctionCallContext) => void;
    exitNonAggregateFunctionCall?: (ctx: NonAggregateFunctionCallContext) => void;
    enterScalarFunctionCall?: (ctx: ScalarFunctionCallContext) => void;
    exitScalarFunctionCall?: (ctx: ScalarFunctionCallContext) => void;
    enterUdfFunctionCall?: (ctx: UdfFunctionCallContext) => void;
    exitUdfFunctionCall?: (ctx: UdfFunctionCallContext) => void;
    enterPasswordFunctionCall?: (ctx: PasswordFunctionCallContext) => void;
    exitPasswordFunctionCall?: (ctx: PasswordFunctionCallContext) => void;
    enterSimpleFunctionCall?: (ctx: SimpleFunctionCallContext) => void;
    exitSimpleFunctionCall?: (ctx: SimpleFunctionCallContext) => void;
    enterCurrentUser?: (ctx: CurrentUserContext) => void;
    exitCurrentUser?: (ctx: CurrentUserContext) => void;
    enterDataTypeFunctionCall?: (ctx: DataTypeFunctionCallContext) => void;
    exitDataTypeFunctionCall?: (ctx: DataTypeFunctionCallContext) => void;
    enterValuesFunctionCall?: (ctx: ValuesFunctionCallContext) => void;
    exitValuesFunctionCall?: (ctx: ValuesFunctionCallContext) => void;
    enterCaseExpressionFunctionCall?: (ctx: CaseExpressionFunctionCallContext) => void;
    exitCaseExpressionFunctionCall?: (ctx: CaseExpressionFunctionCallContext) => void;
    enterCaseFunctionCall?: (ctx: CaseFunctionCallContext) => void;
    exitCaseFunctionCall?: (ctx: CaseFunctionCallContext) => void;
    enterCharFunctionCall?: (ctx: CharFunctionCallContext) => void;
    exitCharFunctionCall?: (ctx: CharFunctionCallContext) => void;
    enterPositionFunctionCall?: (ctx: PositionFunctionCallContext) => void;
    exitPositionFunctionCall?: (ctx: PositionFunctionCallContext) => void;
    enterSubstrFunctionCall?: (ctx: SubstrFunctionCallContext) => void;
    exitSubstrFunctionCall?: (ctx: SubstrFunctionCallContext) => void;
    enterTrimFunctionCall?: (ctx: TrimFunctionCallContext) => void;
    exitTrimFunctionCall?: (ctx: TrimFunctionCallContext) => void;
    enterWeightFunctionCall?: (ctx: WeightFunctionCallContext) => void;
    exitWeightFunctionCall?: (ctx: WeightFunctionCallContext) => void;
    enterExtractFunctionCall?: (ctx: ExtractFunctionCallContext) => void;
    exitExtractFunctionCall?: (ctx: ExtractFunctionCallContext) => void;
    enterGetFormatFunctionCall?: (ctx: GetFormatFunctionCallContext) => void;
    exitGetFormatFunctionCall?: (ctx: GetFormatFunctionCallContext) => void;
    enterJsonValueFunctionCall?: (ctx: JsonValueFunctionCallContext) => void;
    exitJsonValueFunctionCall?: (ctx: JsonValueFunctionCallContext) => void;
    enterCaseFuncAlternative?: (ctx: CaseFuncAlternativeContext) => void;
    exitCaseFuncAlternative?: (ctx: CaseFuncAlternativeContext) => void;
    enterLevelWeightList?: (ctx: LevelWeightListContext) => void;
    exitLevelWeightList?: (ctx: LevelWeightListContext) => void;
    enterLevelWeightRange?: (ctx: LevelWeightRangeContext) => void;
    exitLevelWeightRange?: (ctx: LevelWeightRangeContext) => void;
    enterLevelInWeightListElement?: (ctx: LevelInWeightListElementContext) => void;
    exitLevelInWeightListElement?: (ctx: LevelInWeightListElementContext) => void;
    enterAggregateWindowedFunction?: (ctx: AggregateWindowedFunctionContext) => void;
    exitAggregateWindowedFunction?: (ctx: AggregateWindowedFunctionContext) => void;
    enterNonAggregateWindowedFunction?: (ctx: NonAggregateWindowedFunctionContext) => void;
    exitNonAggregateWindowedFunction?: (ctx: NonAggregateWindowedFunctionContext) => void;
    enterOverClause?: (ctx: OverClauseContext) => void;
    exitOverClause?: (ctx: OverClauseContext) => void;
    enterWindowSpec?: (ctx: WindowSpecContext) => void;
    exitWindowSpec?: (ctx: WindowSpecContext) => void;
    enterWindowName?: (ctx: WindowNameContext) => void;
    exitWindowName?: (ctx: WindowNameContext) => void;
    enterFrameClause?: (ctx: FrameClauseContext) => void;
    exitFrameClause?: (ctx: FrameClauseContext) => void;
    enterFrameUnits?: (ctx: FrameUnitsContext) => void;
    exitFrameUnits?: (ctx: FrameUnitsContext) => void;
    enterFrameExtent?: (ctx: FrameExtentContext) => void;
    exitFrameExtent?: (ctx: FrameExtentContext) => void;
    enterFrameBetween?: (ctx: FrameBetweenContext) => void;
    exitFrameBetween?: (ctx: FrameBetweenContext) => void;
    enterFrameRange?: (ctx: FrameRangeContext) => void;
    exitFrameRange?: (ctx: FrameRangeContext) => void;
    enterPartitionClause?: (ctx: PartitionClauseContext) => void;
    exitPartitionClause?: (ctx: PartitionClauseContext) => void;
    enterScalarFunctionName?: (ctx: ScalarFunctionNameContext) => void;
    exitScalarFunctionName?: (ctx: ScalarFunctionNameContext) => void;
    enterPasswordFunctionClause?: (ctx: PasswordFunctionClauseContext) => void;
    exitPasswordFunctionClause?: (ctx: PasswordFunctionClauseContext) => void;
    enterFunctionArgs?: (ctx: FunctionArgsContext) => void;
    exitFunctionArgs?: (ctx: FunctionArgsContext) => void;
    enterFunctionArg?: (ctx: FunctionArgContext) => void;
    exitFunctionArg?: (ctx: FunctionArgContext) => void;
    enterIsExpression?: (ctx: IsExpressionContext) => void;
    exitIsExpression?: (ctx: IsExpressionContext) => void;
    enterNotExpression?: (ctx: NotExpressionContext) => void;
    exitNotExpression?: (ctx: NotExpressionContext) => void;
    enterLogicalExpression?: (ctx: LogicalExpressionContext) => void;
    exitLogicalExpression?: (ctx: LogicalExpressionContext) => void;
    enterPredicateExpression?: (ctx: PredicateExpressionContext) => void;
    exitPredicateExpression?: (ctx: PredicateExpressionContext) => void;
    enterSoundsLikePredicate?: (ctx: SoundsLikePredicateContext) => void;
    exitSoundsLikePredicate?: (ctx: SoundsLikePredicateContext) => void;
    enterExpressionAtomPredicate?: (ctx: ExpressionAtomPredicateContext) => void;
    exitExpressionAtomPredicate?: (ctx: ExpressionAtomPredicateContext) => void;
    enterSubqueryComparisonPredicate?: (ctx: SubqueryComparisonPredicateContext) => void;
    exitSubqueryComparisonPredicate?: (ctx: SubqueryComparisonPredicateContext) => void;
    enterJsonMemberOfPredicate?: (ctx: JsonMemberOfPredicateContext) => void;
    exitJsonMemberOfPredicate?: (ctx: JsonMemberOfPredicateContext) => void;
    enterBinaryComparisonPredicate?: (ctx: BinaryComparisonPredicateContext) => void;
    exitBinaryComparisonPredicate?: (ctx: BinaryComparisonPredicateContext) => void;
    enterInPredicate?: (ctx: InPredicateContext) => void;
    exitInPredicate?: (ctx: InPredicateContext) => void;
    enterBetweenPredicate?: (ctx: BetweenPredicateContext) => void;
    exitBetweenPredicate?: (ctx: BetweenPredicateContext) => void;
    enterIsNullPredicate?: (ctx: IsNullPredicateContext) => void;
    exitIsNullPredicate?: (ctx: IsNullPredicateContext) => void;
    enterLikePredicate?: (ctx: LikePredicateContext) => void;
    exitLikePredicate?: (ctx: LikePredicateContext) => void;
    enterRegexpPredicate?: (ctx: RegexpPredicateContext) => void;
    exitRegexpPredicate?: (ctx: RegexpPredicateContext) => void;
    enterUnaryExpressionAtom?: (ctx: UnaryExpressionAtomContext) => void;
    exitUnaryExpressionAtom?: (ctx: UnaryExpressionAtomContext) => void;
    enterCollateExpressionAtom?: (ctx: CollateExpressionAtomContext) => void;
    exitCollateExpressionAtom?: (ctx: CollateExpressionAtomContext) => void;
    enterVariableAssignExpressionAtom?: (ctx: VariableAssignExpressionAtomContext) => void;
    exitVariableAssignExpressionAtom?: (ctx: VariableAssignExpressionAtomContext) => void;
    enterMysqlVariableExpressionAtom?: (ctx: MysqlVariableExpressionAtomContext) => void;
    exitMysqlVariableExpressionAtom?: (ctx: MysqlVariableExpressionAtomContext) => void;
    enterNestedExpressionAtom?: (ctx: NestedExpressionAtomContext) => void;
    exitNestedExpressionAtom?: (ctx: NestedExpressionAtomContext) => void;
    enterNestedRowExpressionAtom?: (ctx: NestedRowExpressionAtomContext) => void;
    exitNestedRowExpressionAtom?: (ctx: NestedRowExpressionAtomContext) => void;
    enterMathExpressionAtom?: (ctx: MathExpressionAtomContext) => void;
    exitMathExpressionAtom?: (ctx: MathExpressionAtomContext) => void;
    enterExistsExpressionAtom?: (ctx: ExistsExpressionAtomContext) => void;
    exitExistsExpressionAtom?: (ctx: ExistsExpressionAtomContext) => void;
    enterIntervalExpressionAtom?: (ctx: IntervalExpressionAtomContext) => void;
    exitIntervalExpressionAtom?: (ctx: IntervalExpressionAtomContext) => void;
    enterJsonExpressionAtom?: (ctx: JsonExpressionAtomContext) => void;
    exitJsonExpressionAtom?: (ctx: JsonExpressionAtomContext) => void;
    enterSubqueryExpressionAtom?: (ctx: SubqueryExpressionAtomContext) => void;
    exitSubqueryExpressionAtom?: (ctx: SubqueryExpressionAtomContext) => void;
    enterConstantExpressionAtom?: (ctx: ConstantExpressionAtomContext) => void;
    exitConstantExpressionAtom?: (ctx: ConstantExpressionAtomContext) => void;
    enterFunctionCallExpressionAtom?: (ctx: FunctionCallExpressionAtomContext) => void;
    exitFunctionCallExpressionAtom?: (ctx: FunctionCallExpressionAtomContext) => void;
    enterBinaryExpressionAtom?: (ctx: BinaryExpressionAtomContext) => void;
    exitBinaryExpressionAtom?: (ctx: BinaryExpressionAtomContext) => void;
    enterFullColumnNameExpressionAtom?: (ctx: FullColumnNameExpressionAtomContext) => void;
    exitFullColumnNameExpressionAtom?: (ctx: FullColumnNameExpressionAtomContext) => void;
    enterBitExpressionAtom?: (ctx: BitExpressionAtomContext) => void;
    exitBitExpressionAtom?: (ctx: BitExpressionAtomContext) => void;
    enterUnaryOperator?: (ctx: UnaryOperatorContext) => void;
    exitUnaryOperator?: (ctx: UnaryOperatorContext) => void;
    enterComparisonOperator?: (ctx: ComparisonOperatorContext) => void;
    exitComparisonOperator?: (ctx: ComparisonOperatorContext) => void;
    enterLogicalOperator?: (ctx: LogicalOperatorContext) => void;
    exitLogicalOperator?: (ctx: LogicalOperatorContext) => void;
    enterBitOperator?: (ctx: BitOperatorContext) => void;
    exitBitOperator?: (ctx: BitOperatorContext) => void;
    enterMultOperator?: (ctx: MultOperatorContext) => void;
    exitMultOperator?: (ctx: MultOperatorContext) => void;
    enterAddOperator?: (ctx: AddOperatorContext) => void;
    exitAddOperator?: (ctx: AddOperatorContext) => void;
    enterJsonOperator?: (ctx: JsonOperatorContext) => void;
    exitJsonOperator?: (ctx: JsonOperatorContext) => void;
    enterCharsetNameBase?: (ctx: CharsetNameBaseContext) => void;
    exitCharsetNameBase?: (ctx: CharsetNameBaseContext) => void;
    enterTransactionLevelBase?: (ctx: TransactionLevelBaseContext) => void;
    exitTransactionLevelBase?: (ctx: TransactionLevelBaseContext) => void;
    enterPrivilegesBase?: (ctx: PrivilegesBaseContext) => void;
    exitPrivilegesBase?: (ctx: PrivilegesBaseContext) => void;
    enterIntervalTypeBase?: (ctx: IntervalTypeBaseContext) => void;
    exitIntervalTypeBase?: (ctx: IntervalTypeBaseContext) => void;
    enterDataTypeBase?: (ctx: DataTypeBaseContext) => void;
    exitDataTypeBase?: (ctx: DataTypeBaseContext) => void;
    enterKeywordsCanBeId?: (ctx: KeywordsCanBeIdContext) => void;
    exitKeywordsCanBeId?: (ctx: KeywordsCanBeIdContext) => void;
    enterFunctionNameBase?: (ctx: FunctionNameBaseContext) => void;
    exitFunctionNameBase?: (ctx: FunctionNameBaseContext) => void;
    visitTerminal(node: TerminalNode): void;
    visitErrorNode(node: ErrorNode): void;
    enterEveryRule(node: ParserRuleContext): void;
    exitEveryRule(node: ParserRuleContext): void;
}
