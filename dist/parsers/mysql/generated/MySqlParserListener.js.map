{"version":3,"file":"MySqlParserListener.js","sourceRoot":"","sources":["../../../../src/parsers/mysql/generated/MySqlParserListener.ts"],"names":[],"mappings":"AAqnBA,MAAM,OAAO,mBAAmB;IAgoN5B,aAAa,CAAC,IAAkB,IAAS,CAAC;IAC1C,cAAc,CAAC,IAAe,IAAS,CAAC;IACxC,cAAc,CAAC,IAAuB,IAAS,CAAC;IAChD,aAAa,CAAC,IAAuB,IAAS,CAAC;CAClD","sourcesContent":["// Generated from src/parsers/mysql/grammar/MySqlParser.g4 by ANTLR 4.13.1\n\nimport { ErrorNode, ParseTreeListener, ParserRuleContext, TerminalNode } from \"antlr4ng\";\n\n\nimport { RootContext } from \"./MySqlParser.js\";\nimport { SqlStatementsContext } from \"./MySqlParser.js\";\nimport { SqlStatementContext } from \"./MySqlParser.js\";\nimport { EmptyStatement_Context } from \"./MySqlParser.js\";\nimport { DdlStatementContext } from \"./MySqlParser.js\";\nimport { DmlStatementContext } from \"./MySqlParser.js\";\nimport { TransactionStatementContext } from \"./MySqlParser.js\";\nimport { ReplicationStatementContext } from \"./MySqlParser.js\";\nimport { PreparedStatementContext } from \"./MySqlParser.js\";\nimport { CompoundStatementContext } from \"./MySqlParser.js\";\nimport { AdministrationStatementContext } from \"./MySqlParser.js\";\nimport { UtilityStatementContext } from \"./MySqlParser.js\";\nimport { CreateDatabaseContext } from \"./MySqlParser.js\";\nimport { CreateEventContext } from \"./MySqlParser.js\";\nimport { CreateIndexContext } from \"./MySqlParser.js\";\nimport { CreateLogfileGroupContext } from \"./MySqlParser.js\";\nimport { CreateProcedureContext } from \"./MySqlParser.js\";\nimport { CreateFunctionContext } from \"./MySqlParser.js\";\nimport { CreateRoleContext } from \"./MySqlParser.js\";\nimport { CreateServerContext } from \"./MySqlParser.js\";\nimport { CopyCreateTableContext } from \"./MySqlParser.js\";\nimport { QueryCreateTableContext } from \"./MySqlParser.js\";\nimport { ColumnCreateTableContext } from \"./MySqlParser.js\";\nimport { CreateTablespaceInnodbContext } from \"./MySqlParser.js\";\nimport { CreateTablespaceNdbContext } from \"./MySqlParser.js\";\nimport { CreateTriggerContext } from \"./MySqlParser.js\";\nimport { WithClauseContext } from \"./MySqlParser.js\";\nimport { CommonTableExpressionsContext } from \"./MySqlParser.js\";\nimport { CteNameContext } from \"./MySqlParser.js\";\nimport { CteColumnNameContext } from \"./MySqlParser.js\";\nimport { CreateViewContext } from \"./MySqlParser.js\";\nimport { CreateDatabaseOptionContext } from \"./MySqlParser.js\";\nimport { CharSetContext } from \"./MySqlParser.js\";\nimport { CurrentUserExpressionContext } from \"./MySqlParser.js\";\nimport { OwnerStatementContext } from \"./MySqlParser.js\";\nimport { PreciseScheduleContext } from \"./MySqlParser.js\";\nimport { IntervalScheduleContext } from \"./MySqlParser.js\";\nimport { TimestampValueContext } from \"./MySqlParser.js\";\nimport { IntervalExprContext } from \"./MySqlParser.js\";\nimport { IntervalTypeContext } from \"./MySqlParser.js\";\nimport { EnableTypeContext } from \"./MySqlParser.js\";\nimport { IndexTypeContext } from \"./MySqlParser.js\";\nimport { IndexOptionContext } from \"./MySqlParser.js\";\nimport { ProcedureParameterContext } from \"./MySqlParser.js\";\nimport { FunctionParameterContext } from \"./MySqlParser.js\";\nimport { RoutineCommentContext } from \"./MySqlParser.js\";\nimport { RoutineLanguageContext } from \"./MySqlParser.js\";\nimport { RoutineBehaviorContext } from \"./MySqlParser.js\";\nimport { RoutineDataContext } from \"./MySqlParser.js\";\nimport { RoutineSecurityContext } from \"./MySqlParser.js\";\nimport { ServerOptionContext } from \"./MySqlParser.js\";\nimport { CreateDefinitionsContext } from \"./MySqlParser.js\";\nimport { ColumnDeclarationContext } from \"./MySqlParser.js\";\nimport { ConstraintDeclarationContext } from \"./MySqlParser.js\";\nimport { IndexDeclarationContext } from \"./MySqlParser.js\";\nimport { ColumnDefinitionContext } from \"./MySqlParser.js\";\nimport { NullColumnConstraintContext } from \"./MySqlParser.js\";\nimport { DefaultColumnConstraintContext } from \"./MySqlParser.js\";\nimport { VisibilityColumnConstraintContext } from \"./MySqlParser.js\";\nimport { InvisibilityColumnConstraintContext } from \"./MySqlParser.js\";\nimport { AutoIncrementColumnConstraintContext } from \"./MySqlParser.js\";\nimport { PrimaryKeyColumnConstraintContext } from \"./MySqlParser.js\";\nimport { UniqueKeyColumnConstraintContext } from \"./MySqlParser.js\";\nimport { CommentColumnConstraintContext } from \"./MySqlParser.js\";\nimport { FormatColumnConstraintContext } from \"./MySqlParser.js\";\nimport { StorageColumnConstraintContext } from \"./MySqlParser.js\";\nimport { ReferenceColumnConstraintContext } from \"./MySqlParser.js\";\nimport { CollateColumnConstraintContext } from \"./MySqlParser.js\";\nimport { GeneratedColumnConstraintContext } from \"./MySqlParser.js\";\nimport { SerialDefaultColumnConstraintContext } from \"./MySqlParser.js\";\nimport { CheckColumnConstraintContext } from \"./MySqlParser.js\";\nimport { PrimaryKeyTableConstraintContext } from \"./MySqlParser.js\";\nimport { UniqueKeyTableConstraintContext } from \"./MySqlParser.js\";\nimport { ForeignKeyTableConstraintContext } from \"./MySqlParser.js\";\nimport { CheckTableConstraintContext } from \"./MySqlParser.js\";\nimport { ReferenceDefinitionContext } from \"./MySqlParser.js\";\nimport { ReferenceActionContext } from \"./MySqlParser.js\";\nimport { ReferenceControlTypeContext } from \"./MySqlParser.js\";\nimport { SimpleIndexDeclarationContext } from \"./MySqlParser.js\";\nimport { SpecialIndexDeclarationContext } from \"./MySqlParser.js\";\nimport { TableOptionEngineContext } from \"./MySqlParser.js\";\nimport { TableOptionEngineAttributeContext } from \"./MySqlParser.js\";\nimport { TableOptionAutoextendSizeContext } from \"./MySqlParser.js\";\nimport { TableOptionAutoIncrementContext } from \"./MySqlParser.js\";\nimport { TableOptionAverageContext } from \"./MySqlParser.js\";\nimport { TableOptionCharsetContext } from \"./MySqlParser.js\";\nimport { TableOptionChecksumContext } from \"./MySqlParser.js\";\nimport { TableOptionCollateContext } from \"./MySqlParser.js\";\nimport { TableOptionCommentContext } from \"./MySqlParser.js\";\nimport { TableOptionCompressionContext } from \"./MySqlParser.js\";\nimport { TableOptionConnectionContext } from \"./MySqlParser.js\";\nimport { TableOptionDataDirectoryContext } from \"./MySqlParser.js\";\nimport { TableOptionDelayContext } from \"./MySqlParser.js\";\nimport { TableOptionEncryptionContext } from \"./MySqlParser.js\";\nimport { TableOptionPageCompressedContext } from \"./MySqlParser.js\";\nimport { TableOptionPageCompressionLevelContext } from \"./MySqlParser.js\";\nimport { TableOptionEncryptionKeyIdContext } from \"./MySqlParser.js\";\nimport { TableOptionIndexDirectoryContext } from \"./MySqlParser.js\";\nimport { TableOptionInsertMethodContext } from \"./MySqlParser.js\";\nimport { TableOptionKeyBlockSizeContext } from \"./MySqlParser.js\";\nimport { TableOptionMaxRowsContext } from \"./MySqlParser.js\";\nimport { TableOptionMinRowsContext } from \"./MySqlParser.js\";\nimport { TableOptionPackKeysContext } from \"./MySqlParser.js\";\nimport { TableOptionPasswordContext } from \"./MySqlParser.js\";\nimport { TableOptionRowFormatContext } from \"./MySqlParser.js\";\nimport { TableOptionStartTransactionContext } from \"./MySqlParser.js\";\nimport { TableOptionSecondaryEngineAttributeContext } from \"./MySqlParser.js\";\nimport { TableOptionRecalculationContext } from \"./MySqlParser.js\";\nimport { TableOptionPersistentContext } from \"./MySqlParser.js\";\nimport { TableOptionSamplePageContext } from \"./MySqlParser.js\";\nimport { TableOptionTablespaceContext } from \"./MySqlParser.js\";\nimport { TableOptionTableTypeContext } from \"./MySqlParser.js\";\nimport { TableOptionTransactionalContext } from \"./MySqlParser.js\";\nimport { TableOptionUnionContext } from \"./MySqlParser.js\";\nimport { TableTypeContext } from \"./MySqlParser.js\";\nimport { TablespaceStorageContext } from \"./MySqlParser.js\";\nimport { PartitionDefinitionsContext } from \"./MySqlParser.js\";\nimport { PartitionFunctionHashContext } from \"./MySqlParser.js\";\nimport { PartitionFunctionKeyContext } from \"./MySqlParser.js\";\nimport { PartitionFunctionRangeContext } from \"./MySqlParser.js\";\nimport { PartitionFunctionListContext } from \"./MySqlParser.js\";\nimport { SubPartitionFunctionHashContext } from \"./MySqlParser.js\";\nimport { SubPartitionFunctionKeyContext } from \"./MySqlParser.js\";\nimport { PartitionComparisonContext } from \"./MySqlParser.js\";\nimport { PartitionListAtomContext } from \"./MySqlParser.js\";\nimport { PartitionListVectorContext } from \"./MySqlParser.js\";\nimport { PartitionSimpleContext } from \"./MySqlParser.js\";\nimport { PartitionDefinerAtomContext } from \"./MySqlParser.js\";\nimport { PartitionDefinerVectorContext } from \"./MySqlParser.js\";\nimport { SubpartitionDefinitionContext } from \"./MySqlParser.js\";\nimport { PartitionOptionEngineContext } from \"./MySqlParser.js\";\nimport { PartitionOptionCommentContext } from \"./MySqlParser.js\";\nimport { PartitionOptionDataDirectoryContext } from \"./MySqlParser.js\";\nimport { PartitionOptionIndexDirectoryContext } from \"./MySqlParser.js\";\nimport { PartitionOptionMaxRowsContext } from \"./MySqlParser.js\";\nimport { PartitionOptionMinRowsContext } from \"./MySqlParser.js\";\nimport { PartitionOptionTablespaceContext } from \"./MySqlParser.js\";\nimport { PartitionOptionNodeGroupContext } from \"./MySqlParser.js\";\nimport { AlterSimpleDatabaseContext } from \"./MySqlParser.js\";\nimport { AlterUpgradeNameContext } from \"./MySqlParser.js\";\nimport { AlterEventContext } from \"./MySqlParser.js\";\nimport { AlterFunctionContext } from \"./MySqlParser.js\";\nimport { AlterInstanceContext } from \"./MySqlParser.js\";\nimport { AlterLogfileGroupContext } from \"./MySqlParser.js\";\nimport { AlterProcedureContext } from \"./MySqlParser.js\";\nimport { AlterServerContext } from \"./MySqlParser.js\";\nimport { AlterTableContext } from \"./MySqlParser.js\";\nimport { AlterTablespaceContext } from \"./MySqlParser.js\";\nimport { AlterViewContext } from \"./MySqlParser.js\";\nimport { AlterByTableOptionContext } from \"./MySqlParser.js\";\nimport { AlterByAddColumnContext } from \"./MySqlParser.js\";\nimport { AlterByAddColumnsContext } from \"./MySqlParser.js\";\nimport { AlterByAddIndexContext } from \"./MySqlParser.js\";\nimport { AlterByAddPrimaryKeyContext } from \"./MySqlParser.js\";\nimport { AlterByAddUniqueKeyContext } from \"./MySqlParser.js\";\nimport { AlterByAddSpecialIndexContext } from \"./MySqlParser.js\";\nimport { AlterByAddForeignKeyContext } from \"./MySqlParser.js\";\nimport { AlterByAddCheckTableConstraintContext } from \"./MySqlParser.js\";\nimport { AlterByAlterCheckTableConstraintContext } from \"./MySqlParser.js\";\nimport { AlterBySetAlgorithmContext } from \"./MySqlParser.js\";\nimport { AlterByChangeDefaultContext } from \"./MySqlParser.js\";\nimport { AlterByChangeColumnContext } from \"./MySqlParser.js\";\nimport { AlterByRenameColumnContext } from \"./MySqlParser.js\";\nimport { AlterByLockContext } from \"./MySqlParser.js\";\nimport { AlterByModifyColumnContext } from \"./MySqlParser.js\";\nimport { AlterByDropColumnContext } from \"./MySqlParser.js\";\nimport { AlterByDropConstraintCheckContext } from \"./MySqlParser.js\";\nimport { AlterByDropPrimaryKeyContext } from \"./MySqlParser.js\";\nimport { AlterByDropIndexContext } from \"./MySqlParser.js\";\nimport { AlterByRenameIndexContext } from \"./MySqlParser.js\";\nimport { AlterByAlterColumnDefaultContext } from \"./MySqlParser.js\";\nimport { AlterByAlterIndexVisibilityContext } from \"./MySqlParser.js\";\nimport { AlterByDropForeignKeyContext } from \"./MySqlParser.js\";\nimport { AlterByDisableKeysContext } from \"./MySqlParser.js\";\nimport { AlterByEnableKeysContext } from \"./MySqlParser.js\";\nimport { AlterByRenameContext } from \"./MySqlParser.js\";\nimport { AlterByOrderContext } from \"./MySqlParser.js\";\nimport { AlterByConvertCharsetContext } from \"./MySqlParser.js\";\nimport { AlterByDefaultCharsetContext } from \"./MySqlParser.js\";\nimport { AlterByDiscardTablespaceContext } from \"./MySqlParser.js\";\nimport { AlterByImportTablespaceContext } from \"./MySqlParser.js\";\nimport { AlterByForceContext } from \"./MySqlParser.js\";\nimport { AlterByValidateContext } from \"./MySqlParser.js\";\nimport { AlterByAddDefinitionsContext } from \"./MySqlParser.js\";\nimport { AlterPartitionContext } from \"./MySqlParser.js\";\nimport { AlterByAddPartitionContext } from \"./MySqlParser.js\";\nimport { AlterByDropPartitionContext } from \"./MySqlParser.js\";\nimport { AlterByDiscardPartitionContext } from \"./MySqlParser.js\";\nimport { AlterByImportPartitionContext } from \"./MySqlParser.js\";\nimport { AlterByTruncatePartitionContext } from \"./MySqlParser.js\";\nimport { AlterByCoalescePartitionContext } from \"./MySqlParser.js\";\nimport { AlterByReorganizePartitionContext } from \"./MySqlParser.js\";\nimport { AlterByExchangePartitionContext } from \"./MySqlParser.js\";\nimport { AlterByAnalyzePartitionContext } from \"./MySqlParser.js\";\nimport { AlterByCheckPartitionContext } from \"./MySqlParser.js\";\nimport { AlterByOptimizePartitionContext } from \"./MySqlParser.js\";\nimport { AlterByRebuildPartitionContext } from \"./MySqlParser.js\";\nimport { AlterByRepairPartitionContext } from \"./MySqlParser.js\";\nimport { AlterByRemovePartitioningContext } from \"./MySqlParser.js\";\nimport { AlterByUpgradePartitioningContext } from \"./MySqlParser.js\";\nimport { DropDatabaseContext } from \"./MySqlParser.js\";\nimport { DropEventContext } from \"./MySqlParser.js\";\nimport { DropIndexContext } from \"./MySqlParser.js\";\nimport { DropLogfileGroupContext } from \"./MySqlParser.js\";\nimport { DropProcedureContext } from \"./MySqlParser.js\";\nimport { DropFunctionContext } from \"./MySqlParser.js\";\nimport { DropServerContext } from \"./MySqlParser.js\";\nimport { DropTableContext } from \"./MySqlParser.js\";\nimport { DropTablespaceContext } from \"./MySqlParser.js\";\nimport { DropTriggerContext } from \"./MySqlParser.js\";\nimport { DropViewContext } from \"./MySqlParser.js\";\nimport { DropRoleContext } from \"./MySqlParser.js\";\nimport { SetRoleContext } from \"./MySqlParser.js\";\nimport { RenameTableContext } from \"./MySqlParser.js\";\nimport { RenameTableClauseContext } from \"./MySqlParser.js\";\nimport { TruncateTableContext } from \"./MySqlParser.js\";\nimport { CallStatementContext } from \"./MySqlParser.js\";\nimport { DeleteStatementContext } from \"./MySqlParser.js\";\nimport { DoStatementContext } from \"./MySqlParser.js\";\nimport { HandlerStatementContext } from \"./MySqlParser.js\";\nimport { InsertStatementContext } from \"./MySqlParser.js\";\nimport { LoadDataStatementContext } from \"./MySqlParser.js\";\nimport { LoadXmlStatementContext } from \"./MySqlParser.js\";\nimport { ReplaceStatementContext } from \"./MySqlParser.js\";\nimport { SimpleSelectContext } from \"./MySqlParser.js\";\nimport { ParenthesisSelectContext } from \"./MySqlParser.js\";\nimport { UnionSelectContext } from \"./MySqlParser.js\";\nimport { UnionParenthesisSelectContext } from \"./MySqlParser.js\";\nimport { WithLateralStatementContext } from \"./MySqlParser.js\";\nimport { UpdateStatementContext } from \"./MySqlParser.js\";\nimport { ValuesStatementContext } from \"./MySqlParser.js\";\nimport { InsertStatementValueContext } from \"./MySqlParser.js\";\nimport { UpdatedElementContext } from \"./MySqlParser.js\";\nimport { AssignmentFieldContext } from \"./MySqlParser.js\";\nimport { LockClauseContext } from \"./MySqlParser.js\";\nimport { SingleDeleteStatementContext } from \"./MySqlParser.js\";\nimport { MultipleDeleteStatementContext } from \"./MySqlParser.js\";\nimport { HandlerOpenStatementContext } from \"./MySqlParser.js\";\nimport { HandlerReadIndexStatementContext } from \"./MySqlParser.js\";\nimport { HandlerReadStatementContext } from \"./MySqlParser.js\";\nimport { HandlerCloseStatementContext } from \"./MySqlParser.js\";\nimport { SingleUpdateStatementContext } from \"./MySqlParser.js\";\nimport { MultipleUpdateStatementContext } from \"./MySqlParser.js\";\nimport { OrderByClauseContext } from \"./MySqlParser.js\";\nimport { OrderByExpressionContext } from \"./MySqlParser.js\";\nimport { TableSourcesContext } from \"./MySqlParser.js\";\nimport { TableSourceBaseContext } from \"./MySqlParser.js\";\nimport { TableSourceNestedContext } from \"./MySqlParser.js\";\nimport { TableJsonContext } from \"./MySqlParser.js\";\nimport { AtomTableItemContext } from \"./MySqlParser.js\";\nimport { SubqueryTableItemContext } from \"./MySqlParser.js\";\nimport { TableSourcesItemContext } from \"./MySqlParser.js\";\nimport { IndexHintContext } from \"./MySqlParser.js\";\nimport { IndexHintTypeContext } from \"./MySqlParser.js\";\nimport { InnerJoinContext } from \"./MySqlParser.js\";\nimport { StraightJoinContext } from \"./MySqlParser.js\";\nimport { OuterJoinContext } from \"./MySqlParser.js\";\nimport { NaturalJoinContext } from \"./MySqlParser.js\";\nimport { JoinSpecContext } from \"./MySqlParser.js\";\nimport { QueryExpressionContext } from \"./MySqlParser.js\";\nimport { QueryExpressionNointoContext } from \"./MySqlParser.js\";\nimport { QuerySpecificationContext } from \"./MySqlParser.js\";\nimport { QuerySpecificationNointoContext } from \"./MySqlParser.js\";\nimport { UnionParenthesisContext } from \"./MySqlParser.js\";\nimport { UnionStatementContext } from \"./MySqlParser.js\";\nimport { LateralStatementContext } from \"./MySqlParser.js\";\nimport { JsonTableContext } from \"./MySqlParser.js\";\nimport { JsonColumnListContext } from \"./MySqlParser.js\";\nimport { JsonColumnContext } from \"./MySqlParser.js\";\nimport { JsonOnEmptyContext } from \"./MySqlParser.js\";\nimport { JsonOnErrorContext } from \"./MySqlParser.js\";\nimport { SelectSpecContext } from \"./MySqlParser.js\";\nimport { SelectElementsContext } from \"./MySqlParser.js\";\nimport { SelectStarElementContext } from \"./MySqlParser.js\";\nimport { SelectColumnElementContext } from \"./MySqlParser.js\";\nimport { SelectFunctionElementContext } from \"./MySqlParser.js\";\nimport { SelectExpressionElementContext } from \"./MySqlParser.js\";\nimport { SelectIntoVariablesContext } from \"./MySqlParser.js\";\nimport { SelectIntoDumpFileContext } from \"./MySqlParser.js\";\nimport { SelectIntoTextFileContext } from \"./MySqlParser.js\";\nimport { SelectFieldsIntoContext } from \"./MySqlParser.js\";\nimport { SelectLinesIntoContext } from \"./MySqlParser.js\";\nimport { FromClauseContext } from \"./MySqlParser.js\";\nimport { GroupByClauseContext } from \"./MySqlParser.js\";\nimport { HavingClauseContext } from \"./MySqlParser.js\";\nimport { WindowClauseContext } from \"./MySqlParser.js\";\nimport { GroupByItemContext } from \"./MySqlParser.js\";\nimport { LimitClauseContext } from \"./MySqlParser.js\";\nimport { LimitClauseAtomContext } from \"./MySqlParser.js\";\nimport { StartTransactionContext } from \"./MySqlParser.js\";\nimport { BeginWorkContext } from \"./MySqlParser.js\";\nimport { CommitWorkContext } from \"./MySqlParser.js\";\nimport { RollbackWorkContext } from \"./MySqlParser.js\";\nimport { SavepointStatementContext } from \"./MySqlParser.js\";\nimport { RollbackStatementContext } from \"./MySqlParser.js\";\nimport { ReleaseStatementContext } from \"./MySqlParser.js\";\nimport { LockTablesContext } from \"./MySqlParser.js\";\nimport { UnlockTablesContext } from \"./MySqlParser.js\";\nimport { SetAutocommitStatementContext } from \"./MySqlParser.js\";\nimport { SetTransactionStatementContext } from \"./MySqlParser.js\";\nimport { TransactionModeContext } from \"./MySqlParser.js\";\nimport { LockTableElementContext } from \"./MySqlParser.js\";\nimport { LockActionContext } from \"./MySqlParser.js\";\nimport { TransactionOptionContext } from \"./MySqlParser.js\";\nimport { TransactionLevelContext } from \"./MySqlParser.js\";\nimport { ChangeMasterContext } from \"./MySqlParser.js\";\nimport { ChangeReplicationFilterContext } from \"./MySqlParser.js\";\nimport { PurgeBinaryLogsContext } from \"./MySqlParser.js\";\nimport { ResetMasterContext } from \"./MySqlParser.js\";\nimport { ResetSlaveContext } from \"./MySqlParser.js\";\nimport { StartSlaveContext } from \"./MySqlParser.js\";\nimport { StopSlaveContext } from \"./MySqlParser.js\";\nimport { StartGroupReplicationContext } from \"./MySqlParser.js\";\nimport { StopGroupReplicationContext } from \"./MySqlParser.js\";\nimport { MasterStringOptionContext } from \"./MySqlParser.js\";\nimport { MasterDecimalOptionContext } from \"./MySqlParser.js\";\nimport { MasterBoolOptionContext } from \"./MySqlParser.js\";\nimport { MasterRealOptionContext } from \"./MySqlParser.js\";\nimport { MasterUidListOptionContext } from \"./MySqlParser.js\";\nimport { StringMasterOptionContext } from \"./MySqlParser.js\";\nimport { DecimalMasterOptionContext } from \"./MySqlParser.js\";\nimport { BoolMasterOptionContext } from \"./MySqlParser.js\";\nimport { ChannelOptionContext } from \"./MySqlParser.js\";\nimport { DoDbReplicationContext } from \"./MySqlParser.js\";\nimport { IgnoreDbReplicationContext } from \"./MySqlParser.js\";\nimport { DoTableReplicationContext } from \"./MySqlParser.js\";\nimport { IgnoreTableReplicationContext } from \"./MySqlParser.js\";\nimport { WildDoTableReplicationContext } from \"./MySqlParser.js\";\nimport { WildIgnoreTableReplicationContext } from \"./MySqlParser.js\";\nimport { RewriteDbReplicationContext } from \"./MySqlParser.js\";\nimport { TablePairContext } from \"./MySqlParser.js\";\nimport { ThreadTypeContext } from \"./MySqlParser.js\";\nimport { GtidsUntilOptionContext } from \"./MySqlParser.js\";\nimport { MasterLogUntilOptionContext } from \"./MySqlParser.js\";\nimport { RelayLogUntilOptionContext } from \"./MySqlParser.js\";\nimport { SqlGapsUntilOptionContext } from \"./MySqlParser.js\";\nimport { UserConnectionOptionContext } from \"./MySqlParser.js\";\nimport { PasswordConnectionOptionContext } from \"./MySqlParser.js\";\nimport { DefaultAuthConnectionOptionContext } from \"./MySqlParser.js\";\nimport { PluginDirConnectionOptionContext } from \"./MySqlParser.js\";\nimport { GtuidSetContext } from \"./MySqlParser.js\";\nimport { XaStartTransactionContext } from \"./MySqlParser.js\";\nimport { XaEndTransactionContext } from \"./MySqlParser.js\";\nimport { XaPrepareStatementContext } from \"./MySqlParser.js\";\nimport { XaCommitWorkContext } from \"./MySqlParser.js\";\nimport { XaRollbackWorkContext } from \"./MySqlParser.js\";\nimport { XaRecoverWorkContext } from \"./MySqlParser.js\";\nimport { PrepareStatementContext } from \"./MySqlParser.js\";\nimport { ExecuteStatementContext } from \"./MySqlParser.js\";\nimport { DeallocatePrepareContext } from \"./MySqlParser.js\";\nimport { RoutineBodyContext } from \"./MySqlParser.js\";\nimport { BlockStatementContext } from \"./MySqlParser.js\";\nimport { CaseStatementContext } from \"./MySqlParser.js\";\nimport { IfStatementContext } from \"./MySqlParser.js\";\nimport { IterateStatementContext } from \"./MySqlParser.js\";\nimport { LeaveStatementContext } from \"./MySqlParser.js\";\nimport { LoopStatementContext } from \"./MySqlParser.js\";\nimport { RepeatStatementContext } from \"./MySqlParser.js\";\nimport { ReturnStatementContext } from \"./MySqlParser.js\";\nimport { WhileStatementContext } from \"./MySqlParser.js\";\nimport { CloseCursorContext } from \"./MySqlParser.js\";\nimport { FetchCursorContext } from \"./MySqlParser.js\";\nimport { OpenCursorContext } from \"./MySqlParser.js\";\nimport { DeclareVariableContext } from \"./MySqlParser.js\";\nimport { DeclareConditionContext } from \"./MySqlParser.js\";\nimport { DeclareCursorContext } from \"./MySqlParser.js\";\nimport { DeclareHandlerContext } from \"./MySqlParser.js\";\nimport { HandlerConditionCodeContext } from \"./MySqlParser.js\";\nimport { HandlerConditionStateContext } from \"./MySqlParser.js\";\nimport { HandlerConditionNameContext } from \"./MySqlParser.js\";\nimport { HandlerConditionWarningContext } from \"./MySqlParser.js\";\nimport { HandlerConditionNotfoundContext } from \"./MySqlParser.js\";\nimport { HandlerConditionExceptionContext } from \"./MySqlParser.js\";\nimport { ProcedureSqlStatementContext } from \"./MySqlParser.js\";\nimport { CaseAlternativeContext } from \"./MySqlParser.js\";\nimport { ElifAlternativeContext } from \"./MySqlParser.js\";\nimport { AlterUserMysqlV56Context } from \"./MySqlParser.js\";\nimport { AlterUserMysqlV80Context } from \"./MySqlParser.js\";\nimport { CreateUserMysqlV56Context } from \"./MySqlParser.js\";\nimport { CreateUserMysqlV80Context } from \"./MySqlParser.js\";\nimport { DropUserContext } from \"./MySqlParser.js\";\nimport { GrantStatementContext } from \"./MySqlParser.js\";\nimport { RoleOptionContext } from \"./MySqlParser.js\";\nimport { GrantProxyContext } from \"./MySqlParser.js\";\nimport { RenameUserContext } from \"./MySqlParser.js\";\nimport { DetailRevokeContext } from \"./MySqlParser.js\";\nimport { ShortRevokeContext } from \"./MySqlParser.js\";\nimport { RoleRevokeContext } from \"./MySqlParser.js\";\nimport { RevokeProxyContext } from \"./MySqlParser.js\";\nimport { SetPasswordStatementContext } from \"./MySqlParser.js\";\nimport { UserSpecificationContext } from \"./MySqlParser.js\";\nimport { HashAuthOptionContext } from \"./MySqlParser.js\";\nimport { RandomAuthOptionContext } from \"./MySqlParser.js\";\nimport { StringAuthOptionContext } from \"./MySqlParser.js\";\nimport { ModuleAuthOptionContext } from \"./MySqlParser.js\";\nimport { SimpleAuthOptionContext } from \"./MySqlParser.js\";\nimport { AuthOptionClauseContext } from \"./MySqlParser.js\";\nimport { ModuleContext } from \"./MySqlParser.js\";\nimport { PasswordModuleOptionContext } from \"./MySqlParser.js\";\nimport { TlsOptionContext } from \"./MySqlParser.js\";\nimport { UserResourceOptionContext } from \"./MySqlParser.js\";\nimport { UserPasswordOptionContext } from \"./MySqlParser.js\";\nimport { UserLockOptionContext } from \"./MySqlParser.js\";\nimport { PrivelegeClauseContext } from \"./MySqlParser.js\";\nimport { PrivilegeContext } from \"./MySqlParser.js\";\nimport { CurrentSchemaPriviLevelContext } from \"./MySqlParser.js\";\nimport { GlobalPrivLevelContext } from \"./MySqlParser.js\";\nimport { DefiniteSchemaPrivLevelContext } from \"./MySqlParser.js\";\nimport { DefiniteFullTablePrivLevelContext } from \"./MySqlParser.js\";\nimport { DefiniteFullTablePrivLevel2Context } from \"./MySqlParser.js\";\nimport { DefiniteTablePrivLevelContext } from \"./MySqlParser.js\";\nimport { RenameUserClauseContext } from \"./MySqlParser.js\";\nimport { AnalyzeTableContext } from \"./MySqlParser.js\";\nimport { CheckTableContext } from \"./MySqlParser.js\";\nimport { ChecksumTableContext } from \"./MySqlParser.js\";\nimport { OptimizeTableContext } from \"./MySqlParser.js\";\nimport { RepairTableContext } from \"./MySqlParser.js\";\nimport { CheckTableOptionContext } from \"./MySqlParser.js\";\nimport { CreateUdfunctionContext } from \"./MySqlParser.js\";\nimport { InstallPluginContext } from \"./MySqlParser.js\";\nimport { UninstallPluginContext } from \"./MySqlParser.js\";\nimport { SetVariableContext } from \"./MySqlParser.js\";\nimport { SetCharsetContext } from \"./MySqlParser.js\";\nimport { SetNamesContext } from \"./MySqlParser.js\";\nimport { SetPasswordContext } from \"./MySqlParser.js\";\nimport { SetTransactionContext } from \"./MySqlParser.js\";\nimport { SetAutocommitContext } from \"./MySqlParser.js\";\nimport { SetNewValueInsideTriggerContext } from \"./MySqlParser.js\";\nimport { ShowMasterLogsContext } from \"./MySqlParser.js\";\nimport { ShowLogEventsContext } from \"./MySqlParser.js\";\nimport { ShowObjectFilterContext } from \"./MySqlParser.js\";\nimport { ShowColumnsContext } from \"./MySqlParser.js\";\nimport { ShowCreateDbContext } from \"./MySqlParser.js\";\nimport { ShowCreateFullIdObjectContext } from \"./MySqlParser.js\";\nimport { ShowCreateUserContext } from \"./MySqlParser.js\";\nimport { ShowEngineContext } from \"./MySqlParser.js\";\nimport { ShowGlobalInfoContext } from \"./MySqlParser.js\";\nimport { ShowErrorsContext } from \"./MySqlParser.js\";\nimport { ShowCountErrorsContext } from \"./MySqlParser.js\";\nimport { ShowSchemaFilterContext } from \"./MySqlParser.js\";\nimport { ShowRoutineContext } from \"./MySqlParser.js\";\nimport { ShowGrantsContext } from \"./MySqlParser.js\";\nimport { ShowIndexesContext } from \"./MySqlParser.js\";\nimport { ShowOpenTablesContext } from \"./MySqlParser.js\";\nimport { ShowProfileContext } from \"./MySqlParser.js\";\nimport { ShowSlaveStatusContext } from \"./MySqlParser.js\";\nimport { VariableClauseContext } from \"./MySqlParser.js\";\nimport { ShowCommonEntityContext } from \"./MySqlParser.js\";\nimport { ShowFilterContext } from \"./MySqlParser.js\";\nimport { ShowGlobalInfoClauseContext } from \"./MySqlParser.js\";\nimport { ShowSchemaEntityContext } from \"./MySqlParser.js\";\nimport { ShowProfileTypeContext } from \"./MySqlParser.js\";\nimport { BinlogStatementContext } from \"./MySqlParser.js\";\nimport { CacheIndexStatementContext } from \"./MySqlParser.js\";\nimport { FlushStatementContext } from \"./MySqlParser.js\";\nimport { KillStatementContext } from \"./MySqlParser.js\";\nimport { LoadIndexIntoCacheContext } from \"./MySqlParser.js\";\nimport { ResetStatementContext } from \"./MySqlParser.js\";\nimport { ShutdownStatementContext } from \"./MySqlParser.js\";\nimport { TableIndexesContext } from \"./MySqlParser.js\";\nimport { SimpleFlushOptionContext } from \"./MySqlParser.js\";\nimport { ChannelFlushOptionContext } from \"./MySqlParser.js\";\nimport { TableFlushOptionContext } from \"./MySqlParser.js\";\nimport { FlushTableOptionContext } from \"./MySqlParser.js\";\nimport { LoadedTableIndexesContext } from \"./MySqlParser.js\";\nimport { SimpleDescribeStatementContext } from \"./MySqlParser.js\";\nimport { FullDescribeStatementContext } from \"./MySqlParser.js\";\nimport { HelpStatementContext } from \"./MySqlParser.js\";\nimport { UseStatementContext } from \"./MySqlParser.js\";\nimport { SignalStatementContext } from \"./MySqlParser.js\";\nimport { ResignalStatementContext } from \"./MySqlParser.js\";\nimport { SignalConditionInformationContext } from \"./MySqlParser.js\";\nimport { WithStatementContext } from \"./MySqlParser.js\";\nimport { TableStatementContext } from \"./MySqlParser.js\";\nimport { DiagnosticsStatementContext } from \"./MySqlParser.js\";\nimport { DiagnosticsConditionInformationNameContext } from \"./MySqlParser.js\";\nimport { DescribeStatementsContext } from \"./MySqlParser.js\";\nimport { DescribeConnectionContext } from \"./MySqlParser.js\";\nimport { FullIdContext } from \"./MySqlParser.js\";\nimport { TableNameContext } from \"./MySqlParser.js\";\nimport { RoleNameContext } from \"./MySqlParser.js\";\nimport { FullColumnNameContext } from \"./MySqlParser.js\";\nimport { IndexColumnNameContext } from \"./MySqlParser.js\";\nimport { SimpleUserNameContext } from \"./MySqlParser.js\";\nimport { HostNameContext } from \"./MySqlParser.js\";\nimport { UserNameContext } from \"./MySqlParser.js\";\nimport { MysqlVariableContext } from \"./MySqlParser.js\";\nimport { CharsetNameContext } from \"./MySqlParser.js\";\nimport { CollationNameContext } from \"./MySqlParser.js\";\nimport { EngineNameContext } from \"./MySqlParser.js\";\nimport { EngineNameBaseContext } from \"./MySqlParser.js\";\nimport { UuidSetContext } from \"./MySqlParser.js\";\nimport { XidContext } from \"./MySqlParser.js\";\nimport { XuidStringIdContext } from \"./MySqlParser.js\";\nimport { AuthPluginContext } from \"./MySqlParser.js\";\nimport { UidContext } from \"./MySqlParser.js\";\nimport { SimpleIdContext } from \"./MySqlParser.js\";\nimport { DottedIdContext } from \"./MySqlParser.js\";\nimport { DecimalLiteralContext } from \"./MySqlParser.js\";\nimport { FileSizeLiteralContext } from \"./MySqlParser.js\";\nimport { StringLiteralContext } from \"./MySqlParser.js\";\nimport { BooleanLiteralContext } from \"./MySqlParser.js\";\nimport { HexadecimalLiteralContext } from \"./MySqlParser.js\";\nimport { NullNotnullContext } from \"./MySqlParser.js\";\nimport { ConstantContext } from \"./MySqlParser.js\";\nimport { StringDataTypeContext } from \"./MySqlParser.js\";\nimport { NationalVaryingStringDataTypeContext } from \"./MySqlParser.js\";\nimport { NationalStringDataTypeContext } from \"./MySqlParser.js\";\nimport { DimensionDataTypeContext } from \"./MySqlParser.js\";\nimport { SimpleDataTypeContext } from \"./MySqlParser.js\";\nimport { CollectionDataTypeContext } from \"./MySqlParser.js\";\nimport { SpatialDataTypeContext } from \"./MySqlParser.js\";\nimport { LongVarcharDataTypeContext } from \"./MySqlParser.js\";\nimport { LongVarbinaryDataTypeContext } from \"./MySqlParser.js\";\nimport { CollectionOptionsContext } from \"./MySqlParser.js\";\nimport { ConvertedDataTypeContext } from \"./MySqlParser.js\";\nimport { LengthOneDimensionContext } from \"./MySqlParser.js\";\nimport { LengthTwoDimensionContext } from \"./MySqlParser.js\";\nimport { LengthTwoOptionalDimensionContext } from \"./MySqlParser.js\";\nimport { UidListContext } from \"./MySqlParser.js\";\nimport { FullColumnNameListContext } from \"./MySqlParser.js\";\nimport { TablesContext } from \"./MySqlParser.js\";\nimport { IndexColumnNamesContext } from \"./MySqlParser.js\";\nimport { ExpressionsContext } from \"./MySqlParser.js\";\nimport { ExpressionsWithDefaultsContext } from \"./MySqlParser.js\";\nimport { ConstantsContext } from \"./MySqlParser.js\";\nimport { SimpleStringsContext } from \"./MySqlParser.js\";\nimport { UserVariablesContext } from \"./MySqlParser.js\";\nimport { DefaultValueContext } from \"./MySqlParser.js\";\nimport { CurrentTimestampContext } from \"./MySqlParser.js\";\nimport { ExpressionOrDefaultContext } from \"./MySqlParser.js\";\nimport { IfExistsContext } from \"./MySqlParser.js\";\nimport { IfNotExistsContext } from \"./MySqlParser.js\";\nimport { OrReplaceContext } from \"./MySqlParser.js\";\nimport { WaitNowaitClauseContext } from \"./MySqlParser.js\";\nimport { SpecificFunctionCallContext } from \"./MySqlParser.js\";\nimport { AggregateFunctionCallContext } from \"./MySqlParser.js\";\nimport { NonAggregateFunctionCallContext } from \"./MySqlParser.js\";\nimport { ScalarFunctionCallContext } from \"./MySqlParser.js\";\nimport { UdfFunctionCallContext } from \"./MySqlParser.js\";\nimport { PasswordFunctionCallContext } from \"./MySqlParser.js\";\nimport { SimpleFunctionCallContext } from \"./MySqlParser.js\";\nimport { CurrentUserContext } from \"./MySqlParser.js\";\nimport { DataTypeFunctionCallContext } from \"./MySqlParser.js\";\nimport { ValuesFunctionCallContext } from \"./MySqlParser.js\";\nimport { CaseExpressionFunctionCallContext } from \"./MySqlParser.js\";\nimport { CaseFunctionCallContext } from \"./MySqlParser.js\";\nimport { CharFunctionCallContext } from \"./MySqlParser.js\";\nimport { PositionFunctionCallContext } from \"./MySqlParser.js\";\nimport { SubstrFunctionCallContext } from \"./MySqlParser.js\";\nimport { TrimFunctionCallContext } from \"./MySqlParser.js\";\nimport { WeightFunctionCallContext } from \"./MySqlParser.js\";\nimport { ExtractFunctionCallContext } from \"./MySqlParser.js\";\nimport { GetFormatFunctionCallContext } from \"./MySqlParser.js\";\nimport { JsonValueFunctionCallContext } from \"./MySqlParser.js\";\nimport { CaseFuncAlternativeContext } from \"./MySqlParser.js\";\nimport { LevelWeightListContext } from \"./MySqlParser.js\";\nimport { LevelWeightRangeContext } from \"./MySqlParser.js\";\nimport { LevelInWeightListElementContext } from \"./MySqlParser.js\";\nimport { AggregateWindowedFunctionContext } from \"./MySqlParser.js\";\nimport { NonAggregateWindowedFunctionContext } from \"./MySqlParser.js\";\nimport { OverClauseContext } from \"./MySqlParser.js\";\nimport { WindowSpecContext } from \"./MySqlParser.js\";\nimport { WindowNameContext } from \"./MySqlParser.js\";\nimport { FrameClauseContext } from \"./MySqlParser.js\";\nimport { FrameUnitsContext } from \"./MySqlParser.js\";\nimport { FrameExtentContext } from \"./MySqlParser.js\";\nimport { FrameBetweenContext } from \"./MySqlParser.js\";\nimport { FrameRangeContext } from \"./MySqlParser.js\";\nimport { PartitionClauseContext } from \"./MySqlParser.js\";\nimport { ScalarFunctionNameContext } from \"./MySqlParser.js\";\nimport { PasswordFunctionClauseContext } from \"./MySqlParser.js\";\nimport { FunctionArgsContext } from \"./MySqlParser.js\";\nimport { FunctionArgContext } from \"./MySqlParser.js\";\nimport { IsExpressionContext } from \"./MySqlParser.js\";\nimport { NotExpressionContext } from \"./MySqlParser.js\";\nimport { LogicalExpressionContext } from \"./MySqlParser.js\";\nimport { PredicateExpressionContext } from \"./MySqlParser.js\";\nimport { SoundsLikePredicateContext } from \"./MySqlParser.js\";\nimport { ExpressionAtomPredicateContext } from \"./MySqlParser.js\";\nimport { SubqueryComparisonPredicateContext } from \"./MySqlParser.js\";\nimport { JsonMemberOfPredicateContext } from \"./MySqlParser.js\";\nimport { BinaryComparisonPredicateContext } from \"./MySqlParser.js\";\nimport { InPredicateContext } from \"./MySqlParser.js\";\nimport { BetweenPredicateContext } from \"./MySqlParser.js\";\nimport { IsNullPredicateContext } from \"./MySqlParser.js\";\nimport { LikePredicateContext } from \"./MySqlParser.js\";\nimport { RegexpPredicateContext } from \"./MySqlParser.js\";\nimport { UnaryExpressionAtomContext } from \"./MySqlParser.js\";\nimport { CollateExpressionAtomContext } from \"./MySqlParser.js\";\nimport { VariableAssignExpressionAtomContext } from \"./MySqlParser.js\";\nimport { MysqlVariableExpressionAtomContext } from \"./MySqlParser.js\";\nimport { NestedExpressionAtomContext } from \"./MySqlParser.js\";\nimport { NestedRowExpressionAtomContext } from \"./MySqlParser.js\";\nimport { MathExpressionAtomContext } from \"./MySqlParser.js\";\nimport { ExistsExpressionAtomContext } from \"./MySqlParser.js\";\nimport { IntervalExpressionAtomContext } from \"./MySqlParser.js\";\nimport { JsonExpressionAtomContext } from \"./MySqlParser.js\";\nimport { SubqueryExpressionAtomContext } from \"./MySqlParser.js\";\nimport { ConstantExpressionAtomContext } from \"./MySqlParser.js\";\nimport { FunctionCallExpressionAtomContext } from \"./MySqlParser.js\";\nimport { BinaryExpressionAtomContext } from \"./MySqlParser.js\";\nimport { FullColumnNameExpressionAtomContext } from \"./MySqlParser.js\";\nimport { BitExpressionAtomContext } from \"./MySqlParser.js\";\nimport { UnaryOperatorContext } from \"./MySqlParser.js\";\nimport { ComparisonOperatorContext } from \"./MySqlParser.js\";\nimport { LogicalOperatorContext } from \"./MySqlParser.js\";\nimport { BitOperatorContext } from \"./MySqlParser.js\";\nimport { MultOperatorContext } from \"./MySqlParser.js\";\nimport { AddOperatorContext } from \"./MySqlParser.js\";\nimport { JsonOperatorContext } from \"./MySqlParser.js\";\nimport { CharsetNameBaseContext } from \"./MySqlParser.js\";\nimport { TransactionLevelBaseContext } from \"./MySqlParser.js\";\nimport { PrivilegesBaseContext } from \"./MySqlParser.js\";\nimport { IntervalTypeBaseContext } from \"./MySqlParser.js\";\nimport { DataTypeBaseContext } from \"./MySqlParser.js\";\nimport { KeywordsCanBeIdContext } from \"./MySqlParser.js\";\nimport { FunctionNameBaseContext } from \"./MySqlParser.js\";\n\n\n/**\n * This interface defines a complete listener for a parse tree produced by\n * `MySqlParser`.\n */\nexport class MySqlParserListener implements ParseTreeListener {\n    /**\n     * Enter a parse tree produced by `MySqlParser.root`.\n     * @param ctx the parse tree\n     */\n    enterRoot?: (ctx: RootContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.root`.\n     * @param ctx the parse tree\n     */\n    exitRoot?: (ctx: RootContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.sqlStatements`.\n     * @param ctx the parse tree\n     */\n    enterSqlStatements?: (ctx: SqlStatementsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.sqlStatements`.\n     * @param ctx the parse tree\n     */\n    exitSqlStatements?: (ctx: SqlStatementsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.sqlStatement`.\n     * @param ctx the parse tree\n     */\n    enterSqlStatement?: (ctx: SqlStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.sqlStatement`.\n     * @param ctx the parse tree\n     */\n    exitSqlStatement?: (ctx: SqlStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.emptyStatement_`.\n     * @param ctx the parse tree\n     */\n    enterEmptyStatement_?: (ctx: EmptyStatement_Context) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.emptyStatement_`.\n     * @param ctx the parse tree\n     */\n    exitEmptyStatement_?: (ctx: EmptyStatement_Context) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.ddlStatement`.\n     * @param ctx the parse tree\n     */\n    enterDdlStatement?: (ctx: DdlStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.ddlStatement`.\n     * @param ctx the parse tree\n     */\n    exitDdlStatement?: (ctx: DdlStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dmlStatement`.\n     * @param ctx the parse tree\n     */\n    enterDmlStatement?: (ctx: DmlStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dmlStatement`.\n     * @param ctx the parse tree\n     */\n    exitDmlStatement?: (ctx: DmlStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.transactionStatement`.\n     * @param ctx the parse tree\n     */\n    enterTransactionStatement?: (ctx: TransactionStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.transactionStatement`.\n     * @param ctx the parse tree\n     */\n    exitTransactionStatement?: (ctx: TransactionStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.replicationStatement`.\n     * @param ctx the parse tree\n     */\n    enterReplicationStatement?: (ctx: ReplicationStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.replicationStatement`.\n     * @param ctx the parse tree\n     */\n    exitReplicationStatement?: (ctx: ReplicationStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.preparedStatement`.\n     * @param ctx the parse tree\n     */\n    enterPreparedStatement?: (ctx: PreparedStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.preparedStatement`.\n     * @param ctx the parse tree\n     */\n    exitPreparedStatement?: (ctx: PreparedStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.compoundStatement`.\n     * @param ctx the parse tree\n     */\n    enterCompoundStatement?: (ctx: CompoundStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.compoundStatement`.\n     * @param ctx the parse tree\n     */\n    exitCompoundStatement?: (ctx: CompoundStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.administrationStatement`.\n     * @param ctx the parse tree\n     */\n    enterAdministrationStatement?: (ctx: AdministrationStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.administrationStatement`.\n     * @param ctx the parse tree\n     */\n    exitAdministrationStatement?: (ctx: AdministrationStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.utilityStatement`.\n     * @param ctx the parse tree\n     */\n    enterUtilityStatement?: (ctx: UtilityStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.utilityStatement`.\n     * @param ctx the parse tree\n     */\n    exitUtilityStatement?: (ctx: UtilityStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createDatabase`.\n     * @param ctx the parse tree\n     */\n    enterCreateDatabase?: (ctx: CreateDatabaseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createDatabase`.\n     * @param ctx the parse tree\n     */\n    exitCreateDatabase?: (ctx: CreateDatabaseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createEvent`.\n     * @param ctx the parse tree\n     */\n    enterCreateEvent?: (ctx: CreateEventContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createEvent`.\n     * @param ctx the parse tree\n     */\n    exitCreateEvent?: (ctx: CreateEventContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createIndex`.\n     * @param ctx the parse tree\n     */\n    enterCreateIndex?: (ctx: CreateIndexContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createIndex`.\n     * @param ctx the parse tree\n     */\n    exitCreateIndex?: (ctx: CreateIndexContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createLogfileGroup`.\n     * @param ctx the parse tree\n     */\n    enterCreateLogfileGroup?: (ctx: CreateLogfileGroupContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createLogfileGroup`.\n     * @param ctx the parse tree\n     */\n    exitCreateLogfileGroup?: (ctx: CreateLogfileGroupContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createProcedure`.\n     * @param ctx the parse tree\n     */\n    enterCreateProcedure?: (ctx: CreateProcedureContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createProcedure`.\n     * @param ctx the parse tree\n     */\n    exitCreateProcedure?: (ctx: CreateProcedureContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createFunction`.\n     * @param ctx the parse tree\n     */\n    enterCreateFunction?: (ctx: CreateFunctionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createFunction`.\n     * @param ctx the parse tree\n     */\n    exitCreateFunction?: (ctx: CreateFunctionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createRole`.\n     * @param ctx the parse tree\n     */\n    enterCreateRole?: (ctx: CreateRoleContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createRole`.\n     * @param ctx the parse tree\n     */\n    exitCreateRole?: (ctx: CreateRoleContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createServer`.\n     * @param ctx the parse tree\n     */\n    enterCreateServer?: (ctx: CreateServerContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createServer`.\n     * @param ctx the parse tree\n     */\n    exitCreateServer?: (ctx: CreateServerContext) => void;\n    /**\n     * Enter a parse tree produced by the `copyCreateTable`\n     * labeled alternative in `MySqlParser.createTable`.\n     * @param ctx the parse tree\n     */\n    enterCopyCreateTable?: (ctx: CopyCreateTableContext) => void;\n    /**\n     * Exit a parse tree produced by the `copyCreateTable`\n     * labeled alternative in `MySqlParser.createTable`.\n     * @param ctx the parse tree\n     */\n    exitCopyCreateTable?: (ctx: CopyCreateTableContext) => void;\n    /**\n     * Enter a parse tree produced by the `queryCreateTable`\n     * labeled alternative in `MySqlParser.createTable`.\n     * @param ctx the parse tree\n     */\n    enterQueryCreateTable?: (ctx: QueryCreateTableContext) => void;\n    /**\n     * Exit a parse tree produced by the `queryCreateTable`\n     * labeled alternative in `MySqlParser.createTable`.\n     * @param ctx the parse tree\n     */\n    exitQueryCreateTable?: (ctx: QueryCreateTableContext) => void;\n    /**\n     * Enter a parse tree produced by the `columnCreateTable`\n     * labeled alternative in `MySqlParser.createTable`.\n     * @param ctx the parse tree\n     */\n    enterColumnCreateTable?: (ctx: ColumnCreateTableContext) => void;\n    /**\n     * Exit a parse tree produced by the `columnCreateTable`\n     * labeled alternative in `MySqlParser.createTable`.\n     * @param ctx the parse tree\n     */\n    exitColumnCreateTable?: (ctx: ColumnCreateTableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createTablespaceInnodb`.\n     * @param ctx the parse tree\n     */\n    enterCreateTablespaceInnodb?: (ctx: CreateTablespaceInnodbContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createTablespaceInnodb`.\n     * @param ctx the parse tree\n     */\n    exitCreateTablespaceInnodb?: (ctx: CreateTablespaceInnodbContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createTablespaceNdb`.\n     * @param ctx the parse tree\n     */\n    enterCreateTablespaceNdb?: (ctx: CreateTablespaceNdbContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createTablespaceNdb`.\n     * @param ctx the parse tree\n     */\n    exitCreateTablespaceNdb?: (ctx: CreateTablespaceNdbContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createTrigger`.\n     * @param ctx the parse tree\n     */\n    enterCreateTrigger?: (ctx: CreateTriggerContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createTrigger`.\n     * @param ctx the parse tree\n     */\n    exitCreateTrigger?: (ctx: CreateTriggerContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.withClause`.\n     * @param ctx the parse tree\n     */\n    enterWithClause?: (ctx: WithClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.withClause`.\n     * @param ctx the parse tree\n     */\n    exitWithClause?: (ctx: WithClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.commonTableExpressions`.\n     * @param ctx the parse tree\n     */\n    enterCommonTableExpressions?: (ctx: CommonTableExpressionsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.commonTableExpressions`.\n     * @param ctx the parse tree\n     */\n    exitCommonTableExpressions?: (ctx: CommonTableExpressionsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.cteName`.\n     * @param ctx the parse tree\n     */\n    enterCteName?: (ctx: CteNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.cteName`.\n     * @param ctx the parse tree\n     */\n    exitCteName?: (ctx: CteNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.cteColumnName`.\n     * @param ctx the parse tree\n     */\n    enterCteColumnName?: (ctx: CteColumnNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.cteColumnName`.\n     * @param ctx the parse tree\n     */\n    exitCteColumnName?: (ctx: CteColumnNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createView`.\n     * @param ctx the parse tree\n     */\n    enterCreateView?: (ctx: CreateViewContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createView`.\n     * @param ctx the parse tree\n     */\n    exitCreateView?: (ctx: CreateViewContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createDatabaseOption`.\n     * @param ctx the parse tree\n     */\n    enterCreateDatabaseOption?: (ctx: CreateDatabaseOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createDatabaseOption`.\n     * @param ctx the parse tree\n     */\n    exitCreateDatabaseOption?: (ctx: CreateDatabaseOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.charSet`.\n     * @param ctx the parse tree\n     */\n    enterCharSet?: (ctx: CharSetContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.charSet`.\n     * @param ctx the parse tree\n     */\n    exitCharSet?: (ctx: CharSetContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.currentUserExpression`.\n     * @param ctx the parse tree\n     */\n    enterCurrentUserExpression?: (ctx: CurrentUserExpressionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.currentUserExpression`.\n     * @param ctx the parse tree\n     */\n    exitCurrentUserExpression?: (ctx: CurrentUserExpressionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.ownerStatement`.\n     * @param ctx the parse tree\n     */\n    enterOwnerStatement?: (ctx: OwnerStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.ownerStatement`.\n     * @param ctx the parse tree\n     */\n    exitOwnerStatement?: (ctx: OwnerStatementContext) => void;\n    /**\n     * Enter a parse tree produced by the `preciseSchedule`\n     * labeled alternative in `MySqlParser.scheduleExpression`.\n     * @param ctx the parse tree\n     */\n    enterPreciseSchedule?: (ctx: PreciseScheduleContext) => void;\n    /**\n     * Exit a parse tree produced by the `preciseSchedule`\n     * labeled alternative in `MySqlParser.scheduleExpression`.\n     * @param ctx the parse tree\n     */\n    exitPreciseSchedule?: (ctx: PreciseScheduleContext) => void;\n    /**\n     * Enter a parse tree produced by the `intervalSchedule`\n     * labeled alternative in `MySqlParser.scheduleExpression`.\n     * @param ctx the parse tree\n     */\n    enterIntervalSchedule?: (ctx: IntervalScheduleContext) => void;\n    /**\n     * Exit a parse tree produced by the `intervalSchedule`\n     * labeled alternative in `MySqlParser.scheduleExpression`.\n     * @param ctx the parse tree\n     */\n    exitIntervalSchedule?: (ctx: IntervalScheduleContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.timestampValue`.\n     * @param ctx the parse tree\n     */\n    enterTimestampValue?: (ctx: TimestampValueContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.timestampValue`.\n     * @param ctx the parse tree\n     */\n    exitTimestampValue?: (ctx: TimestampValueContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.intervalExpr`.\n     * @param ctx the parse tree\n     */\n    enterIntervalExpr?: (ctx: IntervalExprContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.intervalExpr`.\n     * @param ctx the parse tree\n     */\n    exitIntervalExpr?: (ctx: IntervalExprContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.intervalType`.\n     * @param ctx the parse tree\n     */\n    enterIntervalType?: (ctx: IntervalTypeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.intervalType`.\n     * @param ctx the parse tree\n     */\n    exitIntervalType?: (ctx: IntervalTypeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.enableType`.\n     * @param ctx the parse tree\n     */\n    enterEnableType?: (ctx: EnableTypeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.enableType`.\n     * @param ctx the parse tree\n     */\n    exitEnableType?: (ctx: EnableTypeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.indexType`.\n     * @param ctx the parse tree\n     */\n    enterIndexType?: (ctx: IndexTypeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.indexType`.\n     * @param ctx the parse tree\n     */\n    exitIndexType?: (ctx: IndexTypeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.indexOption`.\n     * @param ctx the parse tree\n     */\n    enterIndexOption?: (ctx: IndexOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.indexOption`.\n     * @param ctx the parse tree\n     */\n    exitIndexOption?: (ctx: IndexOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.procedureParameter`.\n     * @param ctx the parse tree\n     */\n    enterProcedureParameter?: (ctx: ProcedureParameterContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.procedureParameter`.\n     * @param ctx the parse tree\n     */\n    exitProcedureParameter?: (ctx: ProcedureParameterContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.functionParameter`.\n     * @param ctx the parse tree\n     */\n    enterFunctionParameter?: (ctx: FunctionParameterContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.functionParameter`.\n     * @param ctx the parse tree\n     */\n    exitFunctionParameter?: (ctx: FunctionParameterContext) => void;\n    /**\n     * Enter a parse tree produced by the `routineComment`\n     * labeled alternative in `MySqlParser.routineOption`.\n     * @param ctx the parse tree\n     */\n    enterRoutineComment?: (ctx: RoutineCommentContext) => void;\n    /**\n     * Exit a parse tree produced by the `routineComment`\n     * labeled alternative in `MySqlParser.routineOption`.\n     * @param ctx the parse tree\n     */\n    exitRoutineComment?: (ctx: RoutineCommentContext) => void;\n    /**\n     * Enter a parse tree produced by the `routineLanguage`\n     * labeled alternative in `MySqlParser.routineOption`.\n     * @param ctx the parse tree\n     */\n    enterRoutineLanguage?: (ctx: RoutineLanguageContext) => void;\n    /**\n     * Exit a parse tree produced by the `routineLanguage`\n     * labeled alternative in `MySqlParser.routineOption`.\n     * @param ctx the parse tree\n     */\n    exitRoutineLanguage?: (ctx: RoutineLanguageContext) => void;\n    /**\n     * Enter a parse tree produced by the `routineBehavior`\n     * labeled alternative in `MySqlParser.routineOption`.\n     * @param ctx the parse tree\n     */\n    enterRoutineBehavior?: (ctx: RoutineBehaviorContext) => void;\n    /**\n     * Exit a parse tree produced by the `routineBehavior`\n     * labeled alternative in `MySqlParser.routineOption`.\n     * @param ctx the parse tree\n     */\n    exitRoutineBehavior?: (ctx: RoutineBehaviorContext) => void;\n    /**\n     * Enter a parse tree produced by the `routineData`\n     * labeled alternative in `MySqlParser.routineOption`.\n     * @param ctx the parse tree\n     */\n    enterRoutineData?: (ctx: RoutineDataContext) => void;\n    /**\n     * Exit a parse tree produced by the `routineData`\n     * labeled alternative in `MySqlParser.routineOption`.\n     * @param ctx the parse tree\n     */\n    exitRoutineData?: (ctx: RoutineDataContext) => void;\n    /**\n     * Enter a parse tree produced by the `routineSecurity`\n     * labeled alternative in `MySqlParser.routineOption`.\n     * @param ctx the parse tree\n     */\n    enterRoutineSecurity?: (ctx: RoutineSecurityContext) => void;\n    /**\n     * Exit a parse tree produced by the `routineSecurity`\n     * labeled alternative in `MySqlParser.routineOption`.\n     * @param ctx the parse tree\n     */\n    exitRoutineSecurity?: (ctx: RoutineSecurityContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.serverOption`.\n     * @param ctx the parse tree\n     */\n    enterServerOption?: (ctx: ServerOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.serverOption`.\n     * @param ctx the parse tree\n     */\n    exitServerOption?: (ctx: ServerOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createDefinitions`.\n     * @param ctx the parse tree\n     */\n    enterCreateDefinitions?: (ctx: CreateDefinitionsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createDefinitions`.\n     * @param ctx the parse tree\n     */\n    exitCreateDefinitions?: (ctx: CreateDefinitionsContext) => void;\n    /**\n     * Enter a parse tree produced by the `columnDeclaration`\n     * labeled alternative in `MySqlParser.createDefinition`.\n     * @param ctx the parse tree\n     */\n    enterColumnDeclaration?: (ctx: ColumnDeclarationContext) => void;\n    /**\n     * Exit a parse tree produced by the `columnDeclaration`\n     * labeled alternative in `MySqlParser.createDefinition`.\n     * @param ctx the parse tree\n     */\n    exitColumnDeclaration?: (ctx: ColumnDeclarationContext) => void;\n    /**\n     * Enter a parse tree produced by the `constraintDeclaration`\n     * labeled alternative in `MySqlParser.createDefinition`.\n     * @param ctx the parse tree\n     */\n    enterConstraintDeclaration?: (ctx: ConstraintDeclarationContext) => void;\n    /**\n     * Exit a parse tree produced by the `constraintDeclaration`\n     * labeled alternative in `MySqlParser.createDefinition`.\n     * @param ctx the parse tree\n     */\n    exitConstraintDeclaration?: (ctx: ConstraintDeclarationContext) => void;\n    /**\n     * Enter a parse tree produced by the `indexDeclaration`\n     * labeled alternative in `MySqlParser.createDefinition`.\n     * @param ctx the parse tree\n     */\n    enterIndexDeclaration?: (ctx: IndexDeclarationContext) => void;\n    /**\n     * Exit a parse tree produced by the `indexDeclaration`\n     * labeled alternative in `MySqlParser.createDefinition`.\n     * @param ctx the parse tree\n     */\n    exitIndexDeclaration?: (ctx: IndexDeclarationContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.columnDefinition`.\n     * @param ctx the parse tree\n     */\n    enterColumnDefinition?: (ctx: ColumnDefinitionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.columnDefinition`.\n     * @param ctx the parse tree\n     */\n    exitColumnDefinition?: (ctx: ColumnDefinitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `nullColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterNullColumnConstraint?: (ctx: NullColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `nullColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitNullColumnConstraint?: (ctx: NullColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `defaultColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterDefaultColumnConstraint?: (ctx: DefaultColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `defaultColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitDefaultColumnConstraint?: (ctx: DefaultColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `visibilityColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterVisibilityColumnConstraint?: (ctx: VisibilityColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `visibilityColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitVisibilityColumnConstraint?: (ctx: VisibilityColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `invisibilityColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterInvisibilityColumnConstraint?: (ctx: InvisibilityColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `invisibilityColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitInvisibilityColumnConstraint?: (ctx: InvisibilityColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `autoIncrementColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterAutoIncrementColumnConstraint?: (ctx: AutoIncrementColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `autoIncrementColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitAutoIncrementColumnConstraint?: (ctx: AutoIncrementColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `primaryKeyColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterPrimaryKeyColumnConstraint?: (ctx: PrimaryKeyColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `primaryKeyColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitPrimaryKeyColumnConstraint?: (ctx: PrimaryKeyColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `uniqueKeyColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterUniqueKeyColumnConstraint?: (ctx: UniqueKeyColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `uniqueKeyColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitUniqueKeyColumnConstraint?: (ctx: UniqueKeyColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `commentColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterCommentColumnConstraint?: (ctx: CommentColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `commentColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitCommentColumnConstraint?: (ctx: CommentColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `formatColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterFormatColumnConstraint?: (ctx: FormatColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `formatColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitFormatColumnConstraint?: (ctx: FormatColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `storageColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterStorageColumnConstraint?: (ctx: StorageColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `storageColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitStorageColumnConstraint?: (ctx: StorageColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `referenceColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterReferenceColumnConstraint?: (ctx: ReferenceColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `referenceColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitReferenceColumnConstraint?: (ctx: ReferenceColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `collateColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterCollateColumnConstraint?: (ctx: CollateColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `collateColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitCollateColumnConstraint?: (ctx: CollateColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `generatedColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterGeneratedColumnConstraint?: (ctx: GeneratedColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `generatedColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitGeneratedColumnConstraint?: (ctx: GeneratedColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `serialDefaultColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterSerialDefaultColumnConstraint?: (ctx: SerialDefaultColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `serialDefaultColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitSerialDefaultColumnConstraint?: (ctx: SerialDefaultColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `checkColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    enterCheckColumnConstraint?: (ctx: CheckColumnConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `checkColumnConstraint`\n     * labeled alternative in `MySqlParser.columnConstraint`.\n     * @param ctx the parse tree\n     */\n    exitCheckColumnConstraint?: (ctx: CheckColumnConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `primaryKeyTableConstraint`\n     * labeled alternative in `MySqlParser.tableConstraint`.\n     * @param ctx the parse tree\n     */\n    enterPrimaryKeyTableConstraint?: (ctx: PrimaryKeyTableConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `primaryKeyTableConstraint`\n     * labeled alternative in `MySqlParser.tableConstraint`.\n     * @param ctx the parse tree\n     */\n    exitPrimaryKeyTableConstraint?: (ctx: PrimaryKeyTableConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `uniqueKeyTableConstraint`\n     * labeled alternative in `MySqlParser.tableConstraint`.\n     * @param ctx the parse tree\n     */\n    enterUniqueKeyTableConstraint?: (ctx: UniqueKeyTableConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `uniqueKeyTableConstraint`\n     * labeled alternative in `MySqlParser.tableConstraint`.\n     * @param ctx the parse tree\n     */\n    exitUniqueKeyTableConstraint?: (ctx: UniqueKeyTableConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `foreignKeyTableConstraint`\n     * labeled alternative in `MySqlParser.tableConstraint`.\n     * @param ctx the parse tree\n     */\n    enterForeignKeyTableConstraint?: (ctx: ForeignKeyTableConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `foreignKeyTableConstraint`\n     * labeled alternative in `MySqlParser.tableConstraint`.\n     * @param ctx the parse tree\n     */\n    exitForeignKeyTableConstraint?: (ctx: ForeignKeyTableConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `checkTableConstraint`\n     * labeled alternative in `MySqlParser.tableConstraint`.\n     * @param ctx the parse tree\n     */\n    enterCheckTableConstraint?: (ctx: CheckTableConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `checkTableConstraint`\n     * labeled alternative in `MySqlParser.tableConstraint`.\n     * @param ctx the parse tree\n     */\n    exitCheckTableConstraint?: (ctx: CheckTableConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.referenceDefinition`.\n     * @param ctx the parse tree\n     */\n    enterReferenceDefinition?: (ctx: ReferenceDefinitionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.referenceDefinition`.\n     * @param ctx the parse tree\n     */\n    exitReferenceDefinition?: (ctx: ReferenceDefinitionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.referenceAction`.\n     * @param ctx the parse tree\n     */\n    enterReferenceAction?: (ctx: ReferenceActionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.referenceAction`.\n     * @param ctx the parse tree\n     */\n    exitReferenceAction?: (ctx: ReferenceActionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.referenceControlType`.\n     * @param ctx the parse tree\n     */\n    enterReferenceControlType?: (ctx: ReferenceControlTypeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.referenceControlType`.\n     * @param ctx the parse tree\n     */\n    exitReferenceControlType?: (ctx: ReferenceControlTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `simpleIndexDeclaration`\n     * labeled alternative in `MySqlParser.indexColumnDefinition`.\n     * @param ctx the parse tree\n     */\n    enterSimpleIndexDeclaration?: (ctx: SimpleIndexDeclarationContext) => void;\n    /**\n     * Exit a parse tree produced by the `simpleIndexDeclaration`\n     * labeled alternative in `MySqlParser.indexColumnDefinition`.\n     * @param ctx the parse tree\n     */\n    exitSimpleIndexDeclaration?: (ctx: SimpleIndexDeclarationContext) => void;\n    /**\n     * Enter a parse tree produced by the `specialIndexDeclaration`\n     * labeled alternative in `MySqlParser.indexColumnDefinition`.\n     * @param ctx the parse tree\n     */\n    enterSpecialIndexDeclaration?: (ctx: SpecialIndexDeclarationContext) => void;\n    /**\n     * Exit a parse tree produced by the `specialIndexDeclaration`\n     * labeled alternative in `MySqlParser.indexColumnDefinition`.\n     * @param ctx the parse tree\n     */\n    exitSpecialIndexDeclaration?: (ctx: SpecialIndexDeclarationContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionEngine`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionEngine?: (ctx: TableOptionEngineContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionEngine`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionEngine?: (ctx: TableOptionEngineContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionEngineAttribute`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionEngineAttribute?: (ctx: TableOptionEngineAttributeContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionEngineAttribute`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionEngineAttribute?: (ctx: TableOptionEngineAttributeContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionAutoextendSize`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionAutoextendSize?: (ctx: TableOptionAutoextendSizeContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionAutoextendSize`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionAutoextendSize?: (ctx: TableOptionAutoextendSizeContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionAutoIncrement`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionAutoIncrement?: (ctx: TableOptionAutoIncrementContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionAutoIncrement`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionAutoIncrement?: (ctx: TableOptionAutoIncrementContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionAverage`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionAverage?: (ctx: TableOptionAverageContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionAverage`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionAverage?: (ctx: TableOptionAverageContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionCharset`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionCharset?: (ctx: TableOptionCharsetContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionCharset`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionCharset?: (ctx: TableOptionCharsetContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionChecksum`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionChecksum?: (ctx: TableOptionChecksumContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionChecksum`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionChecksum?: (ctx: TableOptionChecksumContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionCollate`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionCollate?: (ctx: TableOptionCollateContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionCollate`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionCollate?: (ctx: TableOptionCollateContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionComment`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionComment?: (ctx: TableOptionCommentContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionComment`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionComment?: (ctx: TableOptionCommentContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionCompression`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionCompression?: (ctx: TableOptionCompressionContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionCompression`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionCompression?: (ctx: TableOptionCompressionContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionConnection`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionConnection?: (ctx: TableOptionConnectionContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionConnection`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionConnection?: (ctx: TableOptionConnectionContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionDataDirectory`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionDataDirectory?: (ctx: TableOptionDataDirectoryContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionDataDirectory`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionDataDirectory?: (ctx: TableOptionDataDirectoryContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionDelay`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionDelay?: (ctx: TableOptionDelayContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionDelay`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionDelay?: (ctx: TableOptionDelayContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionEncryption`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionEncryption?: (ctx: TableOptionEncryptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionEncryption`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionEncryption?: (ctx: TableOptionEncryptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionPageCompressed`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionPageCompressed?: (ctx: TableOptionPageCompressedContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionPageCompressed`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionPageCompressed?: (ctx: TableOptionPageCompressedContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionPageCompressionLevel`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionPageCompressionLevel?: (ctx: TableOptionPageCompressionLevelContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionPageCompressionLevel`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionPageCompressionLevel?: (ctx: TableOptionPageCompressionLevelContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionEncryptionKeyId`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionEncryptionKeyId?: (ctx: TableOptionEncryptionKeyIdContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionEncryptionKeyId`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionEncryptionKeyId?: (ctx: TableOptionEncryptionKeyIdContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionIndexDirectory`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionIndexDirectory?: (ctx: TableOptionIndexDirectoryContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionIndexDirectory`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionIndexDirectory?: (ctx: TableOptionIndexDirectoryContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionInsertMethod`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionInsertMethod?: (ctx: TableOptionInsertMethodContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionInsertMethod`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionInsertMethod?: (ctx: TableOptionInsertMethodContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionKeyBlockSize`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionKeyBlockSize?: (ctx: TableOptionKeyBlockSizeContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionKeyBlockSize`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionKeyBlockSize?: (ctx: TableOptionKeyBlockSizeContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionMaxRows`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionMaxRows?: (ctx: TableOptionMaxRowsContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionMaxRows`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionMaxRows?: (ctx: TableOptionMaxRowsContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionMinRows`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionMinRows?: (ctx: TableOptionMinRowsContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionMinRows`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionMinRows?: (ctx: TableOptionMinRowsContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionPackKeys`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionPackKeys?: (ctx: TableOptionPackKeysContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionPackKeys`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionPackKeys?: (ctx: TableOptionPackKeysContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionPassword`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionPassword?: (ctx: TableOptionPasswordContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionPassword`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionPassword?: (ctx: TableOptionPasswordContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionRowFormat`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionRowFormat?: (ctx: TableOptionRowFormatContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionRowFormat`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionRowFormat?: (ctx: TableOptionRowFormatContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionStartTransaction`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionStartTransaction?: (ctx: TableOptionStartTransactionContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionStartTransaction`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionStartTransaction?: (ctx: TableOptionStartTransactionContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionSecondaryEngineAttribute`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionSecondaryEngineAttribute?: (ctx: TableOptionSecondaryEngineAttributeContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionSecondaryEngineAttribute`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionSecondaryEngineAttribute?: (ctx: TableOptionSecondaryEngineAttributeContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionRecalculation`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionRecalculation?: (ctx: TableOptionRecalculationContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionRecalculation`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionRecalculation?: (ctx: TableOptionRecalculationContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionPersistent`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionPersistent?: (ctx: TableOptionPersistentContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionPersistent`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionPersistent?: (ctx: TableOptionPersistentContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionSamplePage`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionSamplePage?: (ctx: TableOptionSamplePageContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionSamplePage`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionSamplePage?: (ctx: TableOptionSamplePageContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionTablespace`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionTablespace?: (ctx: TableOptionTablespaceContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionTablespace`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionTablespace?: (ctx: TableOptionTablespaceContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionTableType`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionTableType?: (ctx: TableOptionTableTypeContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionTableType`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionTableType?: (ctx: TableOptionTableTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionTransactional`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionTransactional?: (ctx: TableOptionTransactionalContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionTransactional`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionTransactional?: (ctx: TableOptionTransactionalContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableOptionUnion`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    enterTableOptionUnion?: (ctx: TableOptionUnionContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableOptionUnion`\n     * labeled alternative in `MySqlParser.tableOption`.\n     * @param ctx the parse tree\n     */\n    exitTableOptionUnion?: (ctx: TableOptionUnionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.tableType`.\n     * @param ctx the parse tree\n     */\n    enterTableType?: (ctx: TableTypeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.tableType`.\n     * @param ctx the parse tree\n     */\n    exitTableType?: (ctx: TableTypeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.tablespaceStorage`.\n     * @param ctx the parse tree\n     */\n    enterTablespaceStorage?: (ctx: TablespaceStorageContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.tablespaceStorage`.\n     * @param ctx the parse tree\n     */\n    exitTablespaceStorage?: (ctx: TablespaceStorageContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.partitionDefinitions`.\n     * @param ctx the parse tree\n     */\n    enterPartitionDefinitions?: (ctx: PartitionDefinitionsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.partitionDefinitions`.\n     * @param ctx the parse tree\n     */\n    exitPartitionDefinitions?: (ctx: PartitionDefinitionsContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionFunctionHash`\n     * labeled alternative in `MySqlParser.partitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    enterPartitionFunctionHash?: (ctx: PartitionFunctionHashContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionFunctionHash`\n     * labeled alternative in `MySqlParser.partitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    exitPartitionFunctionHash?: (ctx: PartitionFunctionHashContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionFunctionKey`\n     * labeled alternative in `MySqlParser.partitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    enterPartitionFunctionKey?: (ctx: PartitionFunctionKeyContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionFunctionKey`\n     * labeled alternative in `MySqlParser.partitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    exitPartitionFunctionKey?: (ctx: PartitionFunctionKeyContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionFunctionRange`\n     * labeled alternative in `MySqlParser.partitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    enterPartitionFunctionRange?: (ctx: PartitionFunctionRangeContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionFunctionRange`\n     * labeled alternative in `MySqlParser.partitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    exitPartitionFunctionRange?: (ctx: PartitionFunctionRangeContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionFunctionList`\n     * labeled alternative in `MySqlParser.partitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    enterPartitionFunctionList?: (ctx: PartitionFunctionListContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionFunctionList`\n     * labeled alternative in `MySqlParser.partitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    exitPartitionFunctionList?: (ctx: PartitionFunctionListContext) => void;\n    /**\n     * Enter a parse tree produced by the `subPartitionFunctionHash`\n     * labeled alternative in `MySqlParser.subpartitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    enterSubPartitionFunctionHash?: (ctx: SubPartitionFunctionHashContext) => void;\n    /**\n     * Exit a parse tree produced by the `subPartitionFunctionHash`\n     * labeled alternative in `MySqlParser.subpartitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    exitSubPartitionFunctionHash?: (ctx: SubPartitionFunctionHashContext) => void;\n    /**\n     * Enter a parse tree produced by the `subPartitionFunctionKey`\n     * labeled alternative in `MySqlParser.subpartitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    enterSubPartitionFunctionKey?: (ctx: SubPartitionFunctionKeyContext) => void;\n    /**\n     * Exit a parse tree produced by the `subPartitionFunctionKey`\n     * labeled alternative in `MySqlParser.subpartitionFunctionDefinition`.\n     * @param ctx the parse tree\n     */\n    exitSubPartitionFunctionKey?: (ctx: SubPartitionFunctionKeyContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionComparison`\n     * labeled alternative in `MySqlParser.partitionDefinition`.\n     * @param ctx the parse tree\n     */\n    enterPartitionComparison?: (ctx: PartitionComparisonContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionComparison`\n     * labeled alternative in `MySqlParser.partitionDefinition`.\n     * @param ctx the parse tree\n     */\n    exitPartitionComparison?: (ctx: PartitionComparisonContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionListAtom`\n     * labeled alternative in `MySqlParser.partitionDefinition`.\n     * @param ctx the parse tree\n     */\n    enterPartitionListAtom?: (ctx: PartitionListAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionListAtom`\n     * labeled alternative in `MySqlParser.partitionDefinition`.\n     * @param ctx the parse tree\n     */\n    exitPartitionListAtom?: (ctx: PartitionListAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionListVector`\n     * labeled alternative in `MySqlParser.partitionDefinition`.\n     * @param ctx the parse tree\n     */\n    enterPartitionListVector?: (ctx: PartitionListVectorContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionListVector`\n     * labeled alternative in `MySqlParser.partitionDefinition`.\n     * @param ctx the parse tree\n     */\n    exitPartitionListVector?: (ctx: PartitionListVectorContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionSimple`\n     * labeled alternative in `MySqlParser.partitionDefinition`.\n     * @param ctx the parse tree\n     */\n    enterPartitionSimple?: (ctx: PartitionSimpleContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionSimple`\n     * labeled alternative in `MySqlParser.partitionDefinition`.\n     * @param ctx the parse tree\n     */\n    exitPartitionSimple?: (ctx: PartitionSimpleContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.partitionDefinerAtom`.\n     * @param ctx the parse tree\n     */\n    enterPartitionDefinerAtom?: (ctx: PartitionDefinerAtomContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.partitionDefinerAtom`.\n     * @param ctx the parse tree\n     */\n    exitPartitionDefinerAtom?: (ctx: PartitionDefinerAtomContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.partitionDefinerVector`.\n     * @param ctx the parse tree\n     */\n    enterPartitionDefinerVector?: (ctx: PartitionDefinerVectorContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.partitionDefinerVector`.\n     * @param ctx the parse tree\n     */\n    exitPartitionDefinerVector?: (ctx: PartitionDefinerVectorContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.subpartitionDefinition`.\n     * @param ctx the parse tree\n     */\n    enterSubpartitionDefinition?: (ctx: SubpartitionDefinitionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.subpartitionDefinition`.\n     * @param ctx the parse tree\n     */\n    exitSubpartitionDefinition?: (ctx: SubpartitionDefinitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionOptionEngine`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    enterPartitionOptionEngine?: (ctx: PartitionOptionEngineContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionOptionEngine`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    exitPartitionOptionEngine?: (ctx: PartitionOptionEngineContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionOptionComment`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    enterPartitionOptionComment?: (ctx: PartitionOptionCommentContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionOptionComment`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    exitPartitionOptionComment?: (ctx: PartitionOptionCommentContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionOptionDataDirectory`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    enterPartitionOptionDataDirectory?: (ctx: PartitionOptionDataDirectoryContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionOptionDataDirectory`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    exitPartitionOptionDataDirectory?: (ctx: PartitionOptionDataDirectoryContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionOptionIndexDirectory`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    enterPartitionOptionIndexDirectory?: (ctx: PartitionOptionIndexDirectoryContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionOptionIndexDirectory`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    exitPartitionOptionIndexDirectory?: (ctx: PartitionOptionIndexDirectoryContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionOptionMaxRows`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    enterPartitionOptionMaxRows?: (ctx: PartitionOptionMaxRowsContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionOptionMaxRows`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    exitPartitionOptionMaxRows?: (ctx: PartitionOptionMaxRowsContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionOptionMinRows`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    enterPartitionOptionMinRows?: (ctx: PartitionOptionMinRowsContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionOptionMinRows`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    exitPartitionOptionMinRows?: (ctx: PartitionOptionMinRowsContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionOptionTablespace`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    enterPartitionOptionTablespace?: (ctx: PartitionOptionTablespaceContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionOptionTablespace`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    exitPartitionOptionTablespace?: (ctx: PartitionOptionTablespaceContext) => void;\n    /**\n     * Enter a parse tree produced by the `partitionOptionNodeGroup`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    enterPartitionOptionNodeGroup?: (ctx: PartitionOptionNodeGroupContext) => void;\n    /**\n     * Exit a parse tree produced by the `partitionOptionNodeGroup`\n     * labeled alternative in `MySqlParser.partitionOption`.\n     * @param ctx the parse tree\n     */\n    exitPartitionOptionNodeGroup?: (ctx: PartitionOptionNodeGroupContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterSimpleDatabase`\n     * labeled alternative in `MySqlParser.alterDatabase`.\n     * @param ctx the parse tree\n     */\n    enterAlterSimpleDatabase?: (ctx: AlterSimpleDatabaseContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterSimpleDatabase`\n     * labeled alternative in `MySqlParser.alterDatabase`.\n     * @param ctx the parse tree\n     */\n    exitAlterSimpleDatabase?: (ctx: AlterSimpleDatabaseContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterUpgradeName`\n     * labeled alternative in `MySqlParser.alterDatabase`.\n     * @param ctx the parse tree\n     */\n    enterAlterUpgradeName?: (ctx: AlterUpgradeNameContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterUpgradeName`\n     * labeled alternative in `MySqlParser.alterDatabase`.\n     * @param ctx the parse tree\n     */\n    exitAlterUpgradeName?: (ctx: AlterUpgradeNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.alterEvent`.\n     * @param ctx the parse tree\n     */\n    enterAlterEvent?: (ctx: AlterEventContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.alterEvent`.\n     * @param ctx the parse tree\n     */\n    exitAlterEvent?: (ctx: AlterEventContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.alterFunction`.\n     * @param ctx the parse tree\n     */\n    enterAlterFunction?: (ctx: AlterFunctionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.alterFunction`.\n     * @param ctx the parse tree\n     */\n    exitAlterFunction?: (ctx: AlterFunctionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.alterInstance`.\n     * @param ctx the parse tree\n     */\n    enterAlterInstance?: (ctx: AlterInstanceContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.alterInstance`.\n     * @param ctx the parse tree\n     */\n    exitAlterInstance?: (ctx: AlterInstanceContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.alterLogfileGroup`.\n     * @param ctx the parse tree\n     */\n    enterAlterLogfileGroup?: (ctx: AlterLogfileGroupContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.alterLogfileGroup`.\n     * @param ctx the parse tree\n     */\n    exitAlterLogfileGroup?: (ctx: AlterLogfileGroupContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.alterProcedure`.\n     * @param ctx the parse tree\n     */\n    enterAlterProcedure?: (ctx: AlterProcedureContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.alterProcedure`.\n     * @param ctx the parse tree\n     */\n    exitAlterProcedure?: (ctx: AlterProcedureContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.alterServer`.\n     * @param ctx the parse tree\n     */\n    enterAlterServer?: (ctx: AlterServerContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.alterServer`.\n     * @param ctx the parse tree\n     */\n    exitAlterServer?: (ctx: AlterServerContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.alterTable`.\n     * @param ctx the parse tree\n     */\n    enterAlterTable?: (ctx: AlterTableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.alterTable`.\n     * @param ctx the parse tree\n     */\n    exitAlterTable?: (ctx: AlterTableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.alterTablespace`.\n     * @param ctx the parse tree\n     */\n    enterAlterTablespace?: (ctx: AlterTablespaceContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.alterTablespace`.\n     * @param ctx the parse tree\n     */\n    exitAlterTablespace?: (ctx: AlterTablespaceContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.alterView`.\n     * @param ctx the parse tree\n     */\n    enterAlterView?: (ctx: AlterViewContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.alterView`.\n     * @param ctx the parse tree\n     */\n    exitAlterView?: (ctx: AlterViewContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByTableOption`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByTableOption?: (ctx: AlterByTableOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByTableOption`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByTableOption?: (ctx: AlterByTableOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAddColumn`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAddColumn?: (ctx: AlterByAddColumnContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAddColumn`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAddColumn?: (ctx: AlterByAddColumnContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAddColumns`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAddColumns?: (ctx: AlterByAddColumnsContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAddColumns`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAddColumns?: (ctx: AlterByAddColumnsContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAddIndex`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAddIndex?: (ctx: AlterByAddIndexContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAddIndex`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAddIndex?: (ctx: AlterByAddIndexContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAddPrimaryKey`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAddPrimaryKey?: (ctx: AlterByAddPrimaryKeyContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAddPrimaryKey`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAddPrimaryKey?: (ctx: AlterByAddPrimaryKeyContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAddUniqueKey`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAddUniqueKey?: (ctx: AlterByAddUniqueKeyContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAddUniqueKey`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAddUniqueKey?: (ctx: AlterByAddUniqueKeyContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAddSpecialIndex`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAddSpecialIndex?: (ctx: AlterByAddSpecialIndexContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAddSpecialIndex`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAddSpecialIndex?: (ctx: AlterByAddSpecialIndexContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAddForeignKey`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAddForeignKey?: (ctx: AlterByAddForeignKeyContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAddForeignKey`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAddForeignKey?: (ctx: AlterByAddForeignKeyContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAddCheckTableConstraint`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAddCheckTableConstraint?: (ctx: AlterByAddCheckTableConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAddCheckTableConstraint`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAddCheckTableConstraint?: (ctx: AlterByAddCheckTableConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAlterCheckTableConstraint`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAlterCheckTableConstraint?: (ctx: AlterByAlterCheckTableConstraintContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAlterCheckTableConstraint`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAlterCheckTableConstraint?: (ctx: AlterByAlterCheckTableConstraintContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterBySetAlgorithm`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterBySetAlgorithm?: (ctx: AlterBySetAlgorithmContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterBySetAlgorithm`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterBySetAlgorithm?: (ctx: AlterBySetAlgorithmContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByChangeDefault`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByChangeDefault?: (ctx: AlterByChangeDefaultContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByChangeDefault`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByChangeDefault?: (ctx: AlterByChangeDefaultContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByChangeColumn`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByChangeColumn?: (ctx: AlterByChangeColumnContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByChangeColumn`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByChangeColumn?: (ctx: AlterByChangeColumnContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByRenameColumn`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByRenameColumn?: (ctx: AlterByRenameColumnContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByRenameColumn`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByRenameColumn?: (ctx: AlterByRenameColumnContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByLock`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByLock?: (ctx: AlterByLockContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByLock`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByLock?: (ctx: AlterByLockContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByModifyColumn`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByModifyColumn?: (ctx: AlterByModifyColumnContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByModifyColumn`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByModifyColumn?: (ctx: AlterByModifyColumnContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByDropColumn`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByDropColumn?: (ctx: AlterByDropColumnContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByDropColumn`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByDropColumn?: (ctx: AlterByDropColumnContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByDropConstraintCheck`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByDropConstraintCheck?: (ctx: AlterByDropConstraintCheckContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByDropConstraintCheck`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByDropConstraintCheck?: (ctx: AlterByDropConstraintCheckContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByDropPrimaryKey`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByDropPrimaryKey?: (ctx: AlterByDropPrimaryKeyContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByDropPrimaryKey`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByDropPrimaryKey?: (ctx: AlterByDropPrimaryKeyContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByDropIndex`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByDropIndex?: (ctx: AlterByDropIndexContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByDropIndex`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByDropIndex?: (ctx: AlterByDropIndexContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByRenameIndex`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByRenameIndex?: (ctx: AlterByRenameIndexContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByRenameIndex`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByRenameIndex?: (ctx: AlterByRenameIndexContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAlterColumnDefault`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAlterColumnDefault?: (ctx: AlterByAlterColumnDefaultContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAlterColumnDefault`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAlterColumnDefault?: (ctx: AlterByAlterColumnDefaultContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAlterIndexVisibility`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAlterIndexVisibility?: (ctx: AlterByAlterIndexVisibilityContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAlterIndexVisibility`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAlterIndexVisibility?: (ctx: AlterByAlterIndexVisibilityContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByDropForeignKey`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByDropForeignKey?: (ctx: AlterByDropForeignKeyContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByDropForeignKey`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByDropForeignKey?: (ctx: AlterByDropForeignKeyContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByDisableKeys`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByDisableKeys?: (ctx: AlterByDisableKeysContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByDisableKeys`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByDisableKeys?: (ctx: AlterByDisableKeysContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByEnableKeys`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByEnableKeys?: (ctx: AlterByEnableKeysContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByEnableKeys`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByEnableKeys?: (ctx: AlterByEnableKeysContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByRename`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByRename?: (ctx: AlterByRenameContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByRename`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByRename?: (ctx: AlterByRenameContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByOrder`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByOrder?: (ctx: AlterByOrderContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByOrder`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByOrder?: (ctx: AlterByOrderContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByConvertCharset`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByConvertCharset?: (ctx: AlterByConvertCharsetContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByConvertCharset`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByConvertCharset?: (ctx: AlterByConvertCharsetContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByDefaultCharset`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByDefaultCharset?: (ctx: AlterByDefaultCharsetContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByDefaultCharset`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByDefaultCharset?: (ctx: AlterByDefaultCharsetContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByDiscardTablespace`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByDiscardTablespace?: (ctx: AlterByDiscardTablespaceContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByDiscardTablespace`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByDiscardTablespace?: (ctx: AlterByDiscardTablespaceContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByImportTablespace`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByImportTablespace?: (ctx: AlterByImportTablespaceContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByImportTablespace`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByImportTablespace?: (ctx: AlterByImportTablespaceContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByForce`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByForce?: (ctx: AlterByForceContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByForce`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByForce?: (ctx: AlterByForceContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByValidate`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByValidate?: (ctx: AlterByValidateContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByValidate`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByValidate?: (ctx: AlterByValidateContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAddDefinitions`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAddDefinitions?: (ctx: AlterByAddDefinitionsContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAddDefinitions`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAddDefinitions?: (ctx: AlterByAddDefinitionsContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterPartition`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterPartition?: (ctx: AlterPartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterPartition`\n     * labeled alternative in `MySqlParser.alterSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterPartition?: (ctx: AlterPartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAddPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAddPartition?: (ctx: AlterByAddPartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAddPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAddPartition?: (ctx: AlterByAddPartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByDropPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByDropPartition?: (ctx: AlterByDropPartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByDropPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByDropPartition?: (ctx: AlterByDropPartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByDiscardPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByDiscardPartition?: (ctx: AlterByDiscardPartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByDiscardPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByDiscardPartition?: (ctx: AlterByDiscardPartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByImportPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByImportPartition?: (ctx: AlterByImportPartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByImportPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByImportPartition?: (ctx: AlterByImportPartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByTruncatePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByTruncatePartition?: (ctx: AlterByTruncatePartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByTruncatePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByTruncatePartition?: (ctx: AlterByTruncatePartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByCoalescePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByCoalescePartition?: (ctx: AlterByCoalescePartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByCoalescePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByCoalescePartition?: (ctx: AlterByCoalescePartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByReorganizePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByReorganizePartition?: (ctx: AlterByReorganizePartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByReorganizePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByReorganizePartition?: (ctx: AlterByReorganizePartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByExchangePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByExchangePartition?: (ctx: AlterByExchangePartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByExchangePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByExchangePartition?: (ctx: AlterByExchangePartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByAnalyzePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByAnalyzePartition?: (ctx: AlterByAnalyzePartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByAnalyzePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByAnalyzePartition?: (ctx: AlterByAnalyzePartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByCheckPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByCheckPartition?: (ctx: AlterByCheckPartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByCheckPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByCheckPartition?: (ctx: AlterByCheckPartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByOptimizePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByOptimizePartition?: (ctx: AlterByOptimizePartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByOptimizePartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByOptimizePartition?: (ctx: AlterByOptimizePartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByRebuildPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByRebuildPartition?: (ctx: AlterByRebuildPartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByRebuildPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByRebuildPartition?: (ctx: AlterByRebuildPartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByRepairPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByRepairPartition?: (ctx: AlterByRepairPartitionContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByRepairPartition`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByRepairPartition?: (ctx: AlterByRepairPartitionContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByRemovePartitioning`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByRemovePartitioning?: (ctx: AlterByRemovePartitioningContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByRemovePartitioning`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByRemovePartitioning?: (ctx: AlterByRemovePartitioningContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterByUpgradePartitioning`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    enterAlterByUpgradePartitioning?: (ctx: AlterByUpgradePartitioningContext) => void;\n    /**\n     * Exit a parse tree produced by the `alterByUpgradePartitioning`\n     * labeled alternative in `MySqlParser.alterPartitionSpecification`.\n     * @param ctx the parse tree\n     */\n    exitAlterByUpgradePartitioning?: (ctx: AlterByUpgradePartitioningContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropDatabase`.\n     * @param ctx the parse tree\n     */\n    enterDropDatabase?: (ctx: DropDatabaseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropDatabase`.\n     * @param ctx the parse tree\n     */\n    exitDropDatabase?: (ctx: DropDatabaseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropEvent`.\n     * @param ctx the parse tree\n     */\n    enterDropEvent?: (ctx: DropEventContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropEvent`.\n     * @param ctx the parse tree\n     */\n    exitDropEvent?: (ctx: DropEventContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropIndex`.\n     * @param ctx the parse tree\n     */\n    enterDropIndex?: (ctx: DropIndexContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropIndex`.\n     * @param ctx the parse tree\n     */\n    exitDropIndex?: (ctx: DropIndexContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropLogfileGroup`.\n     * @param ctx the parse tree\n     */\n    enterDropLogfileGroup?: (ctx: DropLogfileGroupContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropLogfileGroup`.\n     * @param ctx the parse tree\n     */\n    exitDropLogfileGroup?: (ctx: DropLogfileGroupContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropProcedure`.\n     * @param ctx the parse tree\n     */\n    enterDropProcedure?: (ctx: DropProcedureContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropProcedure`.\n     * @param ctx the parse tree\n     */\n    exitDropProcedure?: (ctx: DropProcedureContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropFunction`.\n     * @param ctx the parse tree\n     */\n    enterDropFunction?: (ctx: DropFunctionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropFunction`.\n     * @param ctx the parse tree\n     */\n    exitDropFunction?: (ctx: DropFunctionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropServer`.\n     * @param ctx the parse tree\n     */\n    enterDropServer?: (ctx: DropServerContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropServer`.\n     * @param ctx the parse tree\n     */\n    exitDropServer?: (ctx: DropServerContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropTable`.\n     * @param ctx the parse tree\n     */\n    enterDropTable?: (ctx: DropTableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropTable`.\n     * @param ctx the parse tree\n     */\n    exitDropTable?: (ctx: DropTableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropTablespace`.\n     * @param ctx the parse tree\n     */\n    enterDropTablespace?: (ctx: DropTablespaceContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropTablespace`.\n     * @param ctx the parse tree\n     */\n    exitDropTablespace?: (ctx: DropTablespaceContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropTrigger`.\n     * @param ctx the parse tree\n     */\n    enterDropTrigger?: (ctx: DropTriggerContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropTrigger`.\n     * @param ctx the parse tree\n     */\n    exitDropTrigger?: (ctx: DropTriggerContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropView`.\n     * @param ctx the parse tree\n     */\n    enterDropView?: (ctx: DropViewContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropView`.\n     * @param ctx the parse tree\n     */\n    exitDropView?: (ctx: DropViewContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropRole`.\n     * @param ctx the parse tree\n     */\n    enterDropRole?: (ctx: DropRoleContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropRole`.\n     * @param ctx the parse tree\n     */\n    exitDropRole?: (ctx: DropRoleContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.setRole`.\n     * @param ctx the parse tree\n     */\n    enterSetRole?: (ctx: SetRoleContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.setRole`.\n     * @param ctx the parse tree\n     */\n    exitSetRole?: (ctx: SetRoleContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.renameTable`.\n     * @param ctx the parse tree\n     */\n    enterRenameTable?: (ctx: RenameTableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.renameTable`.\n     * @param ctx the parse tree\n     */\n    exitRenameTable?: (ctx: RenameTableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.renameTableClause`.\n     * @param ctx the parse tree\n     */\n    enterRenameTableClause?: (ctx: RenameTableClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.renameTableClause`.\n     * @param ctx the parse tree\n     */\n    exitRenameTableClause?: (ctx: RenameTableClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.truncateTable`.\n     * @param ctx the parse tree\n     */\n    enterTruncateTable?: (ctx: TruncateTableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.truncateTable`.\n     * @param ctx the parse tree\n     */\n    exitTruncateTable?: (ctx: TruncateTableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.callStatement`.\n     * @param ctx the parse tree\n     */\n    enterCallStatement?: (ctx: CallStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.callStatement`.\n     * @param ctx the parse tree\n     */\n    exitCallStatement?: (ctx: CallStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.deleteStatement`.\n     * @param ctx the parse tree\n     */\n    enterDeleteStatement?: (ctx: DeleteStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.deleteStatement`.\n     * @param ctx the parse tree\n     */\n    exitDeleteStatement?: (ctx: DeleteStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.doStatement`.\n     * @param ctx the parse tree\n     */\n    enterDoStatement?: (ctx: DoStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.doStatement`.\n     * @param ctx the parse tree\n     */\n    exitDoStatement?: (ctx: DoStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.handlerStatement`.\n     * @param ctx the parse tree\n     */\n    enterHandlerStatement?: (ctx: HandlerStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.handlerStatement`.\n     * @param ctx the parse tree\n     */\n    exitHandlerStatement?: (ctx: HandlerStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.insertStatement`.\n     * @param ctx the parse tree\n     */\n    enterInsertStatement?: (ctx: InsertStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.insertStatement`.\n     * @param ctx the parse tree\n     */\n    exitInsertStatement?: (ctx: InsertStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.loadDataStatement`.\n     * @param ctx the parse tree\n     */\n    enterLoadDataStatement?: (ctx: LoadDataStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.loadDataStatement`.\n     * @param ctx the parse tree\n     */\n    exitLoadDataStatement?: (ctx: LoadDataStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.loadXmlStatement`.\n     * @param ctx the parse tree\n     */\n    enterLoadXmlStatement?: (ctx: LoadXmlStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.loadXmlStatement`.\n     * @param ctx the parse tree\n     */\n    exitLoadXmlStatement?: (ctx: LoadXmlStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.replaceStatement`.\n     * @param ctx the parse tree\n     */\n    enterReplaceStatement?: (ctx: ReplaceStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.replaceStatement`.\n     * @param ctx the parse tree\n     */\n    exitReplaceStatement?: (ctx: ReplaceStatementContext) => void;\n    /**\n     * Enter a parse tree produced by the `simpleSelect`\n     * labeled alternative in `MySqlParser.selectStatement`.\n     * @param ctx the parse tree\n     */\n    enterSimpleSelect?: (ctx: SimpleSelectContext) => void;\n    /**\n     * Exit a parse tree produced by the `simpleSelect`\n     * labeled alternative in `MySqlParser.selectStatement`.\n     * @param ctx the parse tree\n     */\n    exitSimpleSelect?: (ctx: SimpleSelectContext) => void;\n    /**\n     * Enter a parse tree produced by the `parenthesisSelect`\n     * labeled alternative in `MySqlParser.selectStatement`.\n     * @param ctx the parse tree\n     */\n    enterParenthesisSelect?: (ctx: ParenthesisSelectContext) => void;\n    /**\n     * Exit a parse tree produced by the `parenthesisSelect`\n     * labeled alternative in `MySqlParser.selectStatement`.\n     * @param ctx the parse tree\n     */\n    exitParenthesisSelect?: (ctx: ParenthesisSelectContext) => void;\n    /**\n     * Enter a parse tree produced by the `unionSelect`\n     * labeled alternative in `MySqlParser.selectStatement`.\n     * @param ctx the parse tree\n     */\n    enterUnionSelect?: (ctx: UnionSelectContext) => void;\n    /**\n     * Exit a parse tree produced by the `unionSelect`\n     * labeled alternative in `MySqlParser.selectStatement`.\n     * @param ctx the parse tree\n     */\n    exitUnionSelect?: (ctx: UnionSelectContext) => void;\n    /**\n     * Enter a parse tree produced by the `unionParenthesisSelect`\n     * labeled alternative in `MySqlParser.selectStatement`.\n     * @param ctx the parse tree\n     */\n    enterUnionParenthesisSelect?: (ctx: UnionParenthesisSelectContext) => void;\n    /**\n     * Exit a parse tree produced by the `unionParenthesisSelect`\n     * labeled alternative in `MySqlParser.selectStatement`.\n     * @param ctx the parse tree\n     */\n    exitUnionParenthesisSelect?: (ctx: UnionParenthesisSelectContext) => void;\n    /**\n     * Enter a parse tree produced by the `withLateralStatement`\n     * labeled alternative in `MySqlParser.selectStatement`.\n     * @param ctx the parse tree\n     */\n    enterWithLateralStatement?: (ctx: WithLateralStatementContext) => void;\n    /**\n     * Exit a parse tree produced by the `withLateralStatement`\n     * labeled alternative in `MySqlParser.selectStatement`.\n     * @param ctx the parse tree\n     */\n    exitWithLateralStatement?: (ctx: WithLateralStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.updateStatement`.\n     * @param ctx the parse tree\n     */\n    enterUpdateStatement?: (ctx: UpdateStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.updateStatement`.\n     * @param ctx the parse tree\n     */\n    exitUpdateStatement?: (ctx: UpdateStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.valuesStatement`.\n     * @param ctx the parse tree\n     */\n    enterValuesStatement?: (ctx: ValuesStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.valuesStatement`.\n     * @param ctx the parse tree\n     */\n    exitValuesStatement?: (ctx: ValuesStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.insertStatementValue`.\n     * @param ctx the parse tree\n     */\n    enterInsertStatementValue?: (ctx: InsertStatementValueContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.insertStatementValue`.\n     * @param ctx the parse tree\n     */\n    exitInsertStatementValue?: (ctx: InsertStatementValueContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.updatedElement`.\n     * @param ctx the parse tree\n     */\n    enterUpdatedElement?: (ctx: UpdatedElementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.updatedElement`.\n     * @param ctx the parse tree\n     */\n    exitUpdatedElement?: (ctx: UpdatedElementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.assignmentField`.\n     * @param ctx the parse tree\n     */\n    enterAssignmentField?: (ctx: AssignmentFieldContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.assignmentField`.\n     * @param ctx the parse tree\n     */\n    exitAssignmentField?: (ctx: AssignmentFieldContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.lockClause`.\n     * @param ctx the parse tree\n     */\n    enterLockClause?: (ctx: LockClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.lockClause`.\n     * @param ctx the parse tree\n     */\n    exitLockClause?: (ctx: LockClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.singleDeleteStatement`.\n     * @param ctx the parse tree\n     */\n    enterSingleDeleteStatement?: (ctx: SingleDeleteStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.singleDeleteStatement`.\n     * @param ctx the parse tree\n     */\n    exitSingleDeleteStatement?: (ctx: SingleDeleteStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.multipleDeleteStatement`.\n     * @param ctx the parse tree\n     */\n    enterMultipleDeleteStatement?: (ctx: MultipleDeleteStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.multipleDeleteStatement`.\n     * @param ctx the parse tree\n     */\n    exitMultipleDeleteStatement?: (ctx: MultipleDeleteStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.handlerOpenStatement`.\n     * @param ctx the parse tree\n     */\n    enterHandlerOpenStatement?: (ctx: HandlerOpenStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.handlerOpenStatement`.\n     * @param ctx the parse tree\n     */\n    exitHandlerOpenStatement?: (ctx: HandlerOpenStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.handlerReadIndexStatement`.\n     * @param ctx the parse tree\n     */\n    enterHandlerReadIndexStatement?: (ctx: HandlerReadIndexStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.handlerReadIndexStatement`.\n     * @param ctx the parse tree\n     */\n    exitHandlerReadIndexStatement?: (ctx: HandlerReadIndexStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.handlerReadStatement`.\n     * @param ctx the parse tree\n     */\n    enterHandlerReadStatement?: (ctx: HandlerReadStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.handlerReadStatement`.\n     * @param ctx the parse tree\n     */\n    exitHandlerReadStatement?: (ctx: HandlerReadStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.handlerCloseStatement`.\n     * @param ctx the parse tree\n     */\n    enterHandlerCloseStatement?: (ctx: HandlerCloseStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.handlerCloseStatement`.\n     * @param ctx the parse tree\n     */\n    exitHandlerCloseStatement?: (ctx: HandlerCloseStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.singleUpdateStatement`.\n     * @param ctx the parse tree\n     */\n    enterSingleUpdateStatement?: (ctx: SingleUpdateStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.singleUpdateStatement`.\n     * @param ctx the parse tree\n     */\n    exitSingleUpdateStatement?: (ctx: SingleUpdateStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.multipleUpdateStatement`.\n     * @param ctx the parse tree\n     */\n    enterMultipleUpdateStatement?: (ctx: MultipleUpdateStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.multipleUpdateStatement`.\n     * @param ctx the parse tree\n     */\n    exitMultipleUpdateStatement?: (ctx: MultipleUpdateStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.orderByClause`.\n     * @param ctx the parse tree\n     */\n    enterOrderByClause?: (ctx: OrderByClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.orderByClause`.\n     * @param ctx the parse tree\n     */\n    exitOrderByClause?: (ctx: OrderByClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.orderByExpression`.\n     * @param ctx the parse tree\n     */\n    enterOrderByExpression?: (ctx: OrderByExpressionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.orderByExpression`.\n     * @param ctx the parse tree\n     */\n    exitOrderByExpression?: (ctx: OrderByExpressionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.tableSources`.\n     * @param ctx the parse tree\n     */\n    enterTableSources?: (ctx: TableSourcesContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.tableSources`.\n     * @param ctx the parse tree\n     */\n    exitTableSources?: (ctx: TableSourcesContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableSourceBase`\n     * labeled alternative in `MySqlParser.tableSource`.\n     * @param ctx the parse tree\n     */\n    enterTableSourceBase?: (ctx: TableSourceBaseContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableSourceBase`\n     * labeled alternative in `MySqlParser.tableSource`.\n     * @param ctx the parse tree\n     */\n    exitTableSourceBase?: (ctx: TableSourceBaseContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableSourceNested`\n     * labeled alternative in `MySqlParser.tableSource`.\n     * @param ctx the parse tree\n     */\n    enterTableSourceNested?: (ctx: TableSourceNestedContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableSourceNested`\n     * labeled alternative in `MySqlParser.tableSource`.\n     * @param ctx the parse tree\n     */\n    exitTableSourceNested?: (ctx: TableSourceNestedContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableJson`\n     * labeled alternative in `MySqlParser.tableSource`.\n     * @param ctx the parse tree\n     */\n    enterTableJson?: (ctx: TableJsonContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableJson`\n     * labeled alternative in `MySqlParser.tableSource`.\n     * @param ctx the parse tree\n     */\n    exitTableJson?: (ctx: TableJsonContext) => void;\n    /**\n     * Enter a parse tree produced by the `atomTableItem`\n     * labeled alternative in `MySqlParser.tableSourceItem`.\n     * @param ctx the parse tree\n     */\n    enterAtomTableItem?: (ctx: AtomTableItemContext) => void;\n    /**\n     * Exit a parse tree produced by the `atomTableItem`\n     * labeled alternative in `MySqlParser.tableSourceItem`.\n     * @param ctx the parse tree\n     */\n    exitAtomTableItem?: (ctx: AtomTableItemContext) => void;\n    /**\n     * Enter a parse tree produced by the `subqueryTableItem`\n     * labeled alternative in `MySqlParser.tableSourceItem`.\n     * @param ctx the parse tree\n     */\n    enterSubqueryTableItem?: (ctx: SubqueryTableItemContext) => void;\n    /**\n     * Exit a parse tree produced by the `subqueryTableItem`\n     * labeled alternative in `MySqlParser.tableSourceItem`.\n     * @param ctx the parse tree\n     */\n    exitSubqueryTableItem?: (ctx: SubqueryTableItemContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableSourcesItem`\n     * labeled alternative in `MySqlParser.tableSourceItem`.\n     * @param ctx the parse tree\n     */\n    enterTableSourcesItem?: (ctx: TableSourcesItemContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableSourcesItem`\n     * labeled alternative in `MySqlParser.tableSourceItem`.\n     * @param ctx the parse tree\n     */\n    exitTableSourcesItem?: (ctx: TableSourcesItemContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.indexHint`.\n     * @param ctx the parse tree\n     */\n    enterIndexHint?: (ctx: IndexHintContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.indexHint`.\n     * @param ctx the parse tree\n     */\n    exitIndexHint?: (ctx: IndexHintContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.indexHintType`.\n     * @param ctx the parse tree\n     */\n    enterIndexHintType?: (ctx: IndexHintTypeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.indexHintType`.\n     * @param ctx the parse tree\n     */\n    exitIndexHintType?: (ctx: IndexHintTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `innerJoin`\n     * labeled alternative in `MySqlParser.joinPart`.\n     * @param ctx the parse tree\n     */\n    enterInnerJoin?: (ctx: InnerJoinContext) => void;\n    /**\n     * Exit a parse tree produced by the `innerJoin`\n     * labeled alternative in `MySqlParser.joinPart`.\n     * @param ctx the parse tree\n     */\n    exitInnerJoin?: (ctx: InnerJoinContext) => void;\n    /**\n     * Enter a parse tree produced by the `straightJoin`\n     * labeled alternative in `MySqlParser.joinPart`.\n     * @param ctx the parse tree\n     */\n    enterStraightJoin?: (ctx: StraightJoinContext) => void;\n    /**\n     * Exit a parse tree produced by the `straightJoin`\n     * labeled alternative in `MySqlParser.joinPart`.\n     * @param ctx the parse tree\n     */\n    exitStraightJoin?: (ctx: StraightJoinContext) => void;\n    /**\n     * Enter a parse tree produced by the `outerJoin`\n     * labeled alternative in `MySqlParser.joinPart`.\n     * @param ctx the parse tree\n     */\n    enterOuterJoin?: (ctx: OuterJoinContext) => void;\n    /**\n     * Exit a parse tree produced by the `outerJoin`\n     * labeled alternative in `MySqlParser.joinPart`.\n     * @param ctx the parse tree\n     */\n    exitOuterJoin?: (ctx: OuterJoinContext) => void;\n    /**\n     * Enter a parse tree produced by the `naturalJoin`\n     * labeled alternative in `MySqlParser.joinPart`.\n     * @param ctx the parse tree\n     */\n    enterNaturalJoin?: (ctx: NaturalJoinContext) => void;\n    /**\n     * Exit a parse tree produced by the `naturalJoin`\n     * labeled alternative in `MySqlParser.joinPart`.\n     * @param ctx the parse tree\n     */\n    exitNaturalJoin?: (ctx: NaturalJoinContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.joinSpec`.\n     * @param ctx the parse tree\n     */\n    enterJoinSpec?: (ctx: JoinSpecContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.joinSpec`.\n     * @param ctx the parse tree\n     */\n    exitJoinSpec?: (ctx: JoinSpecContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.queryExpression`.\n     * @param ctx the parse tree\n     */\n    enterQueryExpression?: (ctx: QueryExpressionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.queryExpression`.\n     * @param ctx the parse tree\n     */\n    exitQueryExpression?: (ctx: QueryExpressionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.queryExpressionNointo`.\n     * @param ctx the parse tree\n     */\n    enterQueryExpressionNointo?: (ctx: QueryExpressionNointoContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.queryExpressionNointo`.\n     * @param ctx the parse tree\n     */\n    exitQueryExpressionNointo?: (ctx: QueryExpressionNointoContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.querySpecification`.\n     * @param ctx the parse tree\n     */\n    enterQuerySpecification?: (ctx: QuerySpecificationContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.querySpecification`.\n     * @param ctx the parse tree\n     */\n    exitQuerySpecification?: (ctx: QuerySpecificationContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.querySpecificationNointo`.\n     * @param ctx the parse tree\n     */\n    enterQuerySpecificationNointo?: (ctx: QuerySpecificationNointoContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.querySpecificationNointo`.\n     * @param ctx the parse tree\n     */\n    exitQuerySpecificationNointo?: (ctx: QuerySpecificationNointoContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.unionParenthesis`.\n     * @param ctx the parse tree\n     */\n    enterUnionParenthesis?: (ctx: UnionParenthesisContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.unionParenthesis`.\n     * @param ctx the parse tree\n     */\n    exitUnionParenthesis?: (ctx: UnionParenthesisContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.unionStatement`.\n     * @param ctx the parse tree\n     */\n    enterUnionStatement?: (ctx: UnionStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.unionStatement`.\n     * @param ctx the parse tree\n     */\n    exitUnionStatement?: (ctx: UnionStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.lateralStatement`.\n     * @param ctx the parse tree\n     */\n    enterLateralStatement?: (ctx: LateralStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.lateralStatement`.\n     * @param ctx the parse tree\n     */\n    exitLateralStatement?: (ctx: LateralStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.jsonTable`.\n     * @param ctx the parse tree\n     */\n    enterJsonTable?: (ctx: JsonTableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.jsonTable`.\n     * @param ctx the parse tree\n     */\n    exitJsonTable?: (ctx: JsonTableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.jsonColumnList`.\n     * @param ctx the parse tree\n     */\n    enterJsonColumnList?: (ctx: JsonColumnListContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.jsonColumnList`.\n     * @param ctx the parse tree\n     */\n    exitJsonColumnList?: (ctx: JsonColumnListContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.jsonColumn`.\n     * @param ctx the parse tree\n     */\n    enterJsonColumn?: (ctx: JsonColumnContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.jsonColumn`.\n     * @param ctx the parse tree\n     */\n    exitJsonColumn?: (ctx: JsonColumnContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.jsonOnEmpty`.\n     * @param ctx the parse tree\n     */\n    enterJsonOnEmpty?: (ctx: JsonOnEmptyContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.jsonOnEmpty`.\n     * @param ctx the parse tree\n     */\n    exitJsonOnEmpty?: (ctx: JsonOnEmptyContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.jsonOnError`.\n     * @param ctx the parse tree\n     */\n    enterJsonOnError?: (ctx: JsonOnErrorContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.jsonOnError`.\n     * @param ctx the parse tree\n     */\n    exitJsonOnError?: (ctx: JsonOnErrorContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.selectSpec`.\n     * @param ctx the parse tree\n     */\n    enterSelectSpec?: (ctx: SelectSpecContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.selectSpec`.\n     * @param ctx the parse tree\n     */\n    exitSelectSpec?: (ctx: SelectSpecContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.selectElements`.\n     * @param ctx the parse tree\n     */\n    enterSelectElements?: (ctx: SelectElementsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.selectElements`.\n     * @param ctx the parse tree\n     */\n    exitSelectElements?: (ctx: SelectElementsContext) => void;\n    /**\n     * Enter a parse tree produced by the `selectStarElement`\n     * labeled alternative in `MySqlParser.selectElement`.\n     * @param ctx the parse tree\n     */\n    enterSelectStarElement?: (ctx: SelectStarElementContext) => void;\n    /**\n     * Exit a parse tree produced by the `selectStarElement`\n     * labeled alternative in `MySqlParser.selectElement`.\n     * @param ctx the parse tree\n     */\n    exitSelectStarElement?: (ctx: SelectStarElementContext) => void;\n    /**\n     * Enter a parse tree produced by the `selectColumnElement`\n     * labeled alternative in `MySqlParser.selectElement`.\n     * @param ctx the parse tree\n     */\n    enterSelectColumnElement?: (ctx: SelectColumnElementContext) => void;\n    /**\n     * Exit a parse tree produced by the `selectColumnElement`\n     * labeled alternative in `MySqlParser.selectElement`.\n     * @param ctx the parse tree\n     */\n    exitSelectColumnElement?: (ctx: SelectColumnElementContext) => void;\n    /**\n     * Enter a parse tree produced by the `selectFunctionElement`\n     * labeled alternative in `MySqlParser.selectElement`.\n     * @param ctx the parse tree\n     */\n    enterSelectFunctionElement?: (ctx: SelectFunctionElementContext) => void;\n    /**\n     * Exit a parse tree produced by the `selectFunctionElement`\n     * labeled alternative in `MySqlParser.selectElement`.\n     * @param ctx the parse tree\n     */\n    exitSelectFunctionElement?: (ctx: SelectFunctionElementContext) => void;\n    /**\n     * Enter a parse tree produced by the `selectExpressionElement`\n     * labeled alternative in `MySqlParser.selectElement`.\n     * @param ctx the parse tree\n     */\n    enterSelectExpressionElement?: (ctx: SelectExpressionElementContext) => void;\n    /**\n     * Exit a parse tree produced by the `selectExpressionElement`\n     * labeled alternative in `MySqlParser.selectElement`.\n     * @param ctx the parse tree\n     */\n    exitSelectExpressionElement?: (ctx: SelectExpressionElementContext) => void;\n    /**\n     * Enter a parse tree produced by the `selectIntoVariables`\n     * labeled alternative in `MySqlParser.selectIntoExpression`.\n     * @param ctx the parse tree\n     */\n    enterSelectIntoVariables?: (ctx: SelectIntoVariablesContext) => void;\n    /**\n     * Exit a parse tree produced by the `selectIntoVariables`\n     * labeled alternative in `MySqlParser.selectIntoExpression`.\n     * @param ctx the parse tree\n     */\n    exitSelectIntoVariables?: (ctx: SelectIntoVariablesContext) => void;\n    /**\n     * Enter a parse tree produced by the `selectIntoDumpFile`\n     * labeled alternative in `MySqlParser.selectIntoExpression`.\n     * @param ctx the parse tree\n     */\n    enterSelectIntoDumpFile?: (ctx: SelectIntoDumpFileContext) => void;\n    /**\n     * Exit a parse tree produced by the `selectIntoDumpFile`\n     * labeled alternative in `MySqlParser.selectIntoExpression`.\n     * @param ctx the parse tree\n     */\n    exitSelectIntoDumpFile?: (ctx: SelectIntoDumpFileContext) => void;\n    /**\n     * Enter a parse tree produced by the `selectIntoTextFile`\n     * labeled alternative in `MySqlParser.selectIntoExpression`.\n     * @param ctx the parse tree\n     */\n    enterSelectIntoTextFile?: (ctx: SelectIntoTextFileContext) => void;\n    /**\n     * Exit a parse tree produced by the `selectIntoTextFile`\n     * labeled alternative in `MySqlParser.selectIntoExpression`.\n     * @param ctx the parse tree\n     */\n    exitSelectIntoTextFile?: (ctx: SelectIntoTextFileContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.selectFieldsInto`.\n     * @param ctx the parse tree\n     */\n    enterSelectFieldsInto?: (ctx: SelectFieldsIntoContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.selectFieldsInto`.\n     * @param ctx the parse tree\n     */\n    exitSelectFieldsInto?: (ctx: SelectFieldsIntoContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.selectLinesInto`.\n     * @param ctx the parse tree\n     */\n    enterSelectLinesInto?: (ctx: SelectLinesIntoContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.selectLinesInto`.\n     * @param ctx the parse tree\n     */\n    exitSelectLinesInto?: (ctx: SelectLinesIntoContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.fromClause`.\n     * @param ctx the parse tree\n     */\n    enterFromClause?: (ctx: FromClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.fromClause`.\n     * @param ctx the parse tree\n     */\n    exitFromClause?: (ctx: FromClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.groupByClause`.\n     * @param ctx the parse tree\n     */\n    enterGroupByClause?: (ctx: GroupByClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.groupByClause`.\n     * @param ctx the parse tree\n     */\n    exitGroupByClause?: (ctx: GroupByClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.havingClause`.\n     * @param ctx the parse tree\n     */\n    enterHavingClause?: (ctx: HavingClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.havingClause`.\n     * @param ctx the parse tree\n     */\n    exitHavingClause?: (ctx: HavingClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.windowClause`.\n     * @param ctx the parse tree\n     */\n    enterWindowClause?: (ctx: WindowClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.windowClause`.\n     * @param ctx the parse tree\n     */\n    exitWindowClause?: (ctx: WindowClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.groupByItem`.\n     * @param ctx the parse tree\n     */\n    enterGroupByItem?: (ctx: GroupByItemContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.groupByItem`.\n     * @param ctx the parse tree\n     */\n    exitGroupByItem?: (ctx: GroupByItemContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.limitClause`.\n     * @param ctx the parse tree\n     */\n    enterLimitClause?: (ctx: LimitClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.limitClause`.\n     * @param ctx the parse tree\n     */\n    exitLimitClause?: (ctx: LimitClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.limitClauseAtom`.\n     * @param ctx the parse tree\n     */\n    enterLimitClauseAtom?: (ctx: LimitClauseAtomContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.limitClauseAtom`.\n     * @param ctx the parse tree\n     */\n    exitLimitClauseAtom?: (ctx: LimitClauseAtomContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.startTransaction`.\n     * @param ctx the parse tree\n     */\n    enterStartTransaction?: (ctx: StartTransactionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.startTransaction`.\n     * @param ctx the parse tree\n     */\n    exitStartTransaction?: (ctx: StartTransactionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.beginWork`.\n     * @param ctx the parse tree\n     */\n    enterBeginWork?: (ctx: BeginWorkContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.beginWork`.\n     * @param ctx the parse tree\n     */\n    exitBeginWork?: (ctx: BeginWorkContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.commitWork`.\n     * @param ctx the parse tree\n     */\n    enterCommitWork?: (ctx: CommitWorkContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.commitWork`.\n     * @param ctx the parse tree\n     */\n    exitCommitWork?: (ctx: CommitWorkContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.rollbackWork`.\n     * @param ctx the parse tree\n     */\n    enterRollbackWork?: (ctx: RollbackWorkContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.rollbackWork`.\n     * @param ctx the parse tree\n     */\n    exitRollbackWork?: (ctx: RollbackWorkContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.savepointStatement`.\n     * @param ctx the parse tree\n     */\n    enterSavepointStatement?: (ctx: SavepointStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.savepointStatement`.\n     * @param ctx the parse tree\n     */\n    exitSavepointStatement?: (ctx: SavepointStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.rollbackStatement`.\n     * @param ctx the parse tree\n     */\n    enterRollbackStatement?: (ctx: RollbackStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.rollbackStatement`.\n     * @param ctx the parse tree\n     */\n    exitRollbackStatement?: (ctx: RollbackStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.releaseStatement`.\n     * @param ctx the parse tree\n     */\n    enterReleaseStatement?: (ctx: ReleaseStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.releaseStatement`.\n     * @param ctx the parse tree\n     */\n    exitReleaseStatement?: (ctx: ReleaseStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.lockTables`.\n     * @param ctx the parse tree\n     */\n    enterLockTables?: (ctx: LockTablesContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.lockTables`.\n     * @param ctx the parse tree\n     */\n    exitLockTables?: (ctx: LockTablesContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.unlockTables`.\n     * @param ctx the parse tree\n     */\n    enterUnlockTables?: (ctx: UnlockTablesContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.unlockTables`.\n     * @param ctx the parse tree\n     */\n    exitUnlockTables?: (ctx: UnlockTablesContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.setAutocommitStatement`.\n     * @param ctx the parse tree\n     */\n    enterSetAutocommitStatement?: (ctx: SetAutocommitStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.setAutocommitStatement`.\n     * @param ctx the parse tree\n     */\n    exitSetAutocommitStatement?: (ctx: SetAutocommitStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.setTransactionStatement`.\n     * @param ctx the parse tree\n     */\n    enterSetTransactionStatement?: (ctx: SetTransactionStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.setTransactionStatement`.\n     * @param ctx the parse tree\n     */\n    exitSetTransactionStatement?: (ctx: SetTransactionStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.transactionMode`.\n     * @param ctx the parse tree\n     */\n    enterTransactionMode?: (ctx: TransactionModeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.transactionMode`.\n     * @param ctx the parse tree\n     */\n    exitTransactionMode?: (ctx: TransactionModeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.lockTableElement`.\n     * @param ctx the parse tree\n     */\n    enterLockTableElement?: (ctx: LockTableElementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.lockTableElement`.\n     * @param ctx the parse tree\n     */\n    exitLockTableElement?: (ctx: LockTableElementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.lockAction`.\n     * @param ctx the parse tree\n     */\n    enterLockAction?: (ctx: LockActionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.lockAction`.\n     * @param ctx the parse tree\n     */\n    exitLockAction?: (ctx: LockActionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.transactionOption`.\n     * @param ctx the parse tree\n     */\n    enterTransactionOption?: (ctx: TransactionOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.transactionOption`.\n     * @param ctx the parse tree\n     */\n    exitTransactionOption?: (ctx: TransactionOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.transactionLevel`.\n     * @param ctx the parse tree\n     */\n    enterTransactionLevel?: (ctx: TransactionLevelContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.transactionLevel`.\n     * @param ctx the parse tree\n     */\n    exitTransactionLevel?: (ctx: TransactionLevelContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.changeMaster`.\n     * @param ctx the parse tree\n     */\n    enterChangeMaster?: (ctx: ChangeMasterContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.changeMaster`.\n     * @param ctx the parse tree\n     */\n    exitChangeMaster?: (ctx: ChangeMasterContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.changeReplicationFilter`.\n     * @param ctx the parse tree\n     */\n    enterChangeReplicationFilter?: (ctx: ChangeReplicationFilterContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.changeReplicationFilter`.\n     * @param ctx the parse tree\n     */\n    exitChangeReplicationFilter?: (ctx: ChangeReplicationFilterContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.purgeBinaryLogs`.\n     * @param ctx the parse tree\n     */\n    enterPurgeBinaryLogs?: (ctx: PurgeBinaryLogsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.purgeBinaryLogs`.\n     * @param ctx the parse tree\n     */\n    exitPurgeBinaryLogs?: (ctx: PurgeBinaryLogsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.resetMaster`.\n     * @param ctx the parse tree\n     */\n    enterResetMaster?: (ctx: ResetMasterContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.resetMaster`.\n     * @param ctx the parse tree\n     */\n    exitResetMaster?: (ctx: ResetMasterContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.resetSlave`.\n     * @param ctx the parse tree\n     */\n    enterResetSlave?: (ctx: ResetSlaveContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.resetSlave`.\n     * @param ctx the parse tree\n     */\n    exitResetSlave?: (ctx: ResetSlaveContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.startSlave`.\n     * @param ctx the parse tree\n     */\n    enterStartSlave?: (ctx: StartSlaveContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.startSlave`.\n     * @param ctx the parse tree\n     */\n    exitStartSlave?: (ctx: StartSlaveContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.stopSlave`.\n     * @param ctx the parse tree\n     */\n    enterStopSlave?: (ctx: StopSlaveContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.stopSlave`.\n     * @param ctx the parse tree\n     */\n    exitStopSlave?: (ctx: StopSlaveContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.startGroupReplication`.\n     * @param ctx the parse tree\n     */\n    enterStartGroupReplication?: (ctx: StartGroupReplicationContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.startGroupReplication`.\n     * @param ctx the parse tree\n     */\n    exitStartGroupReplication?: (ctx: StartGroupReplicationContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.stopGroupReplication`.\n     * @param ctx the parse tree\n     */\n    enterStopGroupReplication?: (ctx: StopGroupReplicationContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.stopGroupReplication`.\n     * @param ctx the parse tree\n     */\n    exitStopGroupReplication?: (ctx: StopGroupReplicationContext) => void;\n    /**\n     * Enter a parse tree produced by the `masterStringOption`\n     * labeled alternative in `MySqlParser.masterOption`.\n     * @param ctx the parse tree\n     */\n    enterMasterStringOption?: (ctx: MasterStringOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `masterStringOption`\n     * labeled alternative in `MySqlParser.masterOption`.\n     * @param ctx the parse tree\n     */\n    exitMasterStringOption?: (ctx: MasterStringOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `masterDecimalOption`\n     * labeled alternative in `MySqlParser.masterOption`.\n     * @param ctx the parse tree\n     */\n    enterMasterDecimalOption?: (ctx: MasterDecimalOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `masterDecimalOption`\n     * labeled alternative in `MySqlParser.masterOption`.\n     * @param ctx the parse tree\n     */\n    exitMasterDecimalOption?: (ctx: MasterDecimalOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `masterBoolOption`\n     * labeled alternative in `MySqlParser.masterOption`.\n     * @param ctx the parse tree\n     */\n    enterMasterBoolOption?: (ctx: MasterBoolOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `masterBoolOption`\n     * labeled alternative in `MySqlParser.masterOption`.\n     * @param ctx the parse tree\n     */\n    exitMasterBoolOption?: (ctx: MasterBoolOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `masterRealOption`\n     * labeled alternative in `MySqlParser.masterOption`.\n     * @param ctx the parse tree\n     */\n    enterMasterRealOption?: (ctx: MasterRealOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `masterRealOption`\n     * labeled alternative in `MySqlParser.masterOption`.\n     * @param ctx the parse tree\n     */\n    exitMasterRealOption?: (ctx: MasterRealOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `masterUidListOption`\n     * labeled alternative in `MySqlParser.masterOption`.\n     * @param ctx the parse tree\n     */\n    enterMasterUidListOption?: (ctx: MasterUidListOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `masterUidListOption`\n     * labeled alternative in `MySqlParser.masterOption`.\n     * @param ctx the parse tree\n     */\n    exitMasterUidListOption?: (ctx: MasterUidListOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.stringMasterOption`.\n     * @param ctx the parse tree\n     */\n    enterStringMasterOption?: (ctx: StringMasterOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.stringMasterOption`.\n     * @param ctx the parse tree\n     */\n    exitStringMasterOption?: (ctx: StringMasterOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.decimalMasterOption`.\n     * @param ctx the parse tree\n     */\n    enterDecimalMasterOption?: (ctx: DecimalMasterOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.decimalMasterOption`.\n     * @param ctx the parse tree\n     */\n    exitDecimalMasterOption?: (ctx: DecimalMasterOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.boolMasterOption`.\n     * @param ctx the parse tree\n     */\n    enterBoolMasterOption?: (ctx: BoolMasterOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.boolMasterOption`.\n     * @param ctx the parse tree\n     */\n    exitBoolMasterOption?: (ctx: BoolMasterOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.channelOption`.\n     * @param ctx the parse tree\n     */\n    enterChannelOption?: (ctx: ChannelOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.channelOption`.\n     * @param ctx the parse tree\n     */\n    exitChannelOption?: (ctx: ChannelOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `doDbReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    enterDoDbReplication?: (ctx: DoDbReplicationContext) => void;\n    /**\n     * Exit a parse tree produced by the `doDbReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    exitDoDbReplication?: (ctx: DoDbReplicationContext) => void;\n    /**\n     * Enter a parse tree produced by the `ignoreDbReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    enterIgnoreDbReplication?: (ctx: IgnoreDbReplicationContext) => void;\n    /**\n     * Exit a parse tree produced by the `ignoreDbReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    exitIgnoreDbReplication?: (ctx: IgnoreDbReplicationContext) => void;\n    /**\n     * Enter a parse tree produced by the `doTableReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    enterDoTableReplication?: (ctx: DoTableReplicationContext) => void;\n    /**\n     * Exit a parse tree produced by the `doTableReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    exitDoTableReplication?: (ctx: DoTableReplicationContext) => void;\n    /**\n     * Enter a parse tree produced by the `ignoreTableReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    enterIgnoreTableReplication?: (ctx: IgnoreTableReplicationContext) => void;\n    /**\n     * Exit a parse tree produced by the `ignoreTableReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    exitIgnoreTableReplication?: (ctx: IgnoreTableReplicationContext) => void;\n    /**\n     * Enter a parse tree produced by the `wildDoTableReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    enterWildDoTableReplication?: (ctx: WildDoTableReplicationContext) => void;\n    /**\n     * Exit a parse tree produced by the `wildDoTableReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    exitWildDoTableReplication?: (ctx: WildDoTableReplicationContext) => void;\n    /**\n     * Enter a parse tree produced by the `wildIgnoreTableReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    enterWildIgnoreTableReplication?: (ctx: WildIgnoreTableReplicationContext) => void;\n    /**\n     * Exit a parse tree produced by the `wildIgnoreTableReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    exitWildIgnoreTableReplication?: (ctx: WildIgnoreTableReplicationContext) => void;\n    /**\n     * Enter a parse tree produced by the `rewriteDbReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    enterRewriteDbReplication?: (ctx: RewriteDbReplicationContext) => void;\n    /**\n     * Exit a parse tree produced by the `rewriteDbReplication`\n     * labeled alternative in `MySqlParser.replicationFilter`.\n     * @param ctx the parse tree\n     */\n    exitRewriteDbReplication?: (ctx: RewriteDbReplicationContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.tablePair`.\n     * @param ctx the parse tree\n     */\n    enterTablePair?: (ctx: TablePairContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.tablePair`.\n     * @param ctx the parse tree\n     */\n    exitTablePair?: (ctx: TablePairContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.threadType`.\n     * @param ctx the parse tree\n     */\n    enterThreadType?: (ctx: ThreadTypeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.threadType`.\n     * @param ctx the parse tree\n     */\n    exitThreadType?: (ctx: ThreadTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `gtidsUntilOption`\n     * labeled alternative in `MySqlParser.untilOption`.\n     * @param ctx the parse tree\n     */\n    enterGtidsUntilOption?: (ctx: GtidsUntilOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `gtidsUntilOption`\n     * labeled alternative in `MySqlParser.untilOption`.\n     * @param ctx the parse tree\n     */\n    exitGtidsUntilOption?: (ctx: GtidsUntilOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `masterLogUntilOption`\n     * labeled alternative in `MySqlParser.untilOption`.\n     * @param ctx the parse tree\n     */\n    enterMasterLogUntilOption?: (ctx: MasterLogUntilOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `masterLogUntilOption`\n     * labeled alternative in `MySqlParser.untilOption`.\n     * @param ctx the parse tree\n     */\n    exitMasterLogUntilOption?: (ctx: MasterLogUntilOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `relayLogUntilOption`\n     * labeled alternative in `MySqlParser.untilOption`.\n     * @param ctx the parse tree\n     */\n    enterRelayLogUntilOption?: (ctx: RelayLogUntilOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `relayLogUntilOption`\n     * labeled alternative in `MySqlParser.untilOption`.\n     * @param ctx the parse tree\n     */\n    exitRelayLogUntilOption?: (ctx: RelayLogUntilOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `sqlGapsUntilOption`\n     * labeled alternative in `MySqlParser.untilOption`.\n     * @param ctx the parse tree\n     */\n    enterSqlGapsUntilOption?: (ctx: SqlGapsUntilOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `sqlGapsUntilOption`\n     * labeled alternative in `MySqlParser.untilOption`.\n     * @param ctx the parse tree\n     */\n    exitSqlGapsUntilOption?: (ctx: SqlGapsUntilOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `userConnectionOption`\n     * labeled alternative in `MySqlParser.connectionOption`.\n     * @param ctx the parse tree\n     */\n    enterUserConnectionOption?: (ctx: UserConnectionOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `userConnectionOption`\n     * labeled alternative in `MySqlParser.connectionOption`.\n     * @param ctx the parse tree\n     */\n    exitUserConnectionOption?: (ctx: UserConnectionOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `passwordConnectionOption`\n     * labeled alternative in `MySqlParser.connectionOption`.\n     * @param ctx the parse tree\n     */\n    enterPasswordConnectionOption?: (ctx: PasswordConnectionOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `passwordConnectionOption`\n     * labeled alternative in `MySqlParser.connectionOption`.\n     * @param ctx the parse tree\n     */\n    exitPasswordConnectionOption?: (ctx: PasswordConnectionOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `defaultAuthConnectionOption`\n     * labeled alternative in `MySqlParser.connectionOption`.\n     * @param ctx the parse tree\n     */\n    enterDefaultAuthConnectionOption?: (ctx: DefaultAuthConnectionOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `defaultAuthConnectionOption`\n     * labeled alternative in `MySqlParser.connectionOption`.\n     * @param ctx the parse tree\n     */\n    exitDefaultAuthConnectionOption?: (ctx: DefaultAuthConnectionOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `pluginDirConnectionOption`\n     * labeled alternative in `MySqlParser.connectionOption`.\n     * @param ctx the parse tree\n     */\n    enterPluginDirConnectionOption?: (ctx: PluginDirConnectionOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `pluginDirConnectionOption`\n     * labeled alternative in `MySqlParser.connectionOption`.\n     * @param ctx the parse tree\n     */\n    exitPluginDirConnectionOption?: (ctx: PluginDirConnectionOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.gtuidSet`.\n     * @param ctx the parse tree\n     */\n    enterGtuidSet?: (ctx: GtuidSetContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.gtuidSet`.\n     * @param ctx the parse tree\n     */\n    exitGtuidSet?: (ctx: GtuidSetContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.xaStartTransaction`.\n     * @param ctx the parse tree\n     */\n    enterXaStartTransaction?: (ctx: XaStartTransactionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.xaStartTransaction`.\n     * @param ctx the parse tree\n     */\n    exitXaStartTransaction?: (ctx: XaStartTransactionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.xaEndTransaction`.\n     * @param ctx the parse tree\n     */\n    enterXaEndTransaction?: (ctx: XaEndTransactionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.xaEndTransaction`.\n     * @param ctx the parse tree\n     */\n    exitXaEndTransaction?: (ctx: XaEndTransactionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.xaPrepareStatement`.\n     * @param ctx the parse tree\n     */\n    enterXaPrepareStatement?: (ctx: XaPrepareStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.xaPrepareStatement`.\n     * @param ctx the parse tree\n     */\n    exitXaPrepareStatement?: (ctx: XaPrepareStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.xaCommitWork`.\n     * @param ctx the parse tree\n     */\n    enterXaCommitWork?: (ctx: XaCommitWorkContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.xaCommitWork`.\n     * @param ctx the parse tree\n     */\n    exitXaCommitWork?: (ctx: XaCommitWorkContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.xaRollbackWork`.\n     * @param ctx the parse tree\n     */\n    enterXaRollbackWork?: (ctx: XaRollbackWorkContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.xaRollbackWork`.\n     * @param ctx the parse tree\n     */\n    exitXaRollbackWork?: (ctx: XaRollbackWorkContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.xaRecoverWork`.\n     * @param ctx the parse tree\n     */\n    enterXaRecoverWork?: (ctx: XaRecoverWorkContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.xaRecoverWork`.\n     * @param ctx the parse tree\n     */\n    exitXaRecoverWork?: (ctx: XaRecoverWorkContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.prepareStatement`.\n     * @param ctx the parse tree\n     */\n    enterPrepareStatement?: (ctx: PrepareStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.prepareStatement`.\n     * @param ctx the parse tree\n     */\n    exitPrepareStatement?: (ctx: PrepareStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.executeStatement`.\n     * @param ctx the parse tree\n     */\n    enterExecuteStatement?: (ctx: ExecuteStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.executeStatement`.\n     * @param ctx the parse tree\n     */\n    exitExecuteStatement?: (ctx: ExecuteStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.deallocatePrepare`.\n     * @param ctx the parse tree\n     */\n    enterDeallocatePrepare?: (ctx: DeallocatePrepareContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.deallocatePrepare`.\n     * @param ctx the parse tree\n     */\n    exitDeallocatePrepare?: (ctx: DeallocatePrepareContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.routineBody`.\n     * @param ctx the parse tree\n     */\n    enterRoutineBody?: (ctx: RoutineBodyContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.routineBody`.\n     * @param ctx the parse tree\n     */\n    exitRoutineBody?: (ctx: RoutineBodyContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.blockStatement`.\n     * @param ctx the parse tree\n     */\n    enterBlockStatement?: (ctx: BlockStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.blockStatement`.\n     * @param ctx the parse tree\n     */\n    exitBlockStatement?: (ctx: BlockStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.caseStatement`.\n     * @param ctx the parse tree\n     */\n    enterCaseStatement?: (ctx: CaseStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.caseStatement`.\n     * @param ctx the parse tree\n     */\n    exitCaseStatement?: (ctx: CaseStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.ifStatement`.\n     * @param ctx the parse tree\n     */\n    enterIfStatement?: (ctx: IfStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.ifStatement`.\n     * @param ctx the parse tree\n     */\n    exitIfStatement?: (ctx: IfStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.iterateStatement`.\n     * @param ctx the parse tree\n     */\n    enterIterateStatement?: (ctx: IterateStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.iterateStatement`.\n     * @param ctx the parse tree\n     */\n    exitIterateStatement?: (ctx: IterateStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.leaveStatement`.\n     * @param ctx the parse tree\n     */\n    enterLeaveStatement?: (ctx: LeaveStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.leaveStatement`.\n     * @param ctx the parse tree\n     */\n    exitLeaveStatement?: (ctx: LeaveStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.loopStatement`.\n     * @param ctx the parse tree\n     */\n    enterLoopStatement?: (ctx: LoopStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.loopStatement`.\n     * @param ctx the parse tree\n     */\n    exitLoopStatement?: (ctx: LoopStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.repeatStatement`.\n     * @param ctx the parse tree\n     */\n    enterRepeatStatement?: (ctx: RepeatStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.repeatStatement`.\n     * @param ctx the parse tree\n     */\n    exitRepeatStatement?: (ctx: RepeatStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.returnStatement`.\n     * @param ctx the parse tree\n     */\n    enterReturnStatement?: (ctx: ReturnStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.returnStatement`.\n     * @param ctx the parse tree\n     */\n    exitReturnStatement?: (ctx: ReturnStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.whileStatement`.\n     * @param ctx the parse tree\n     */\n    enterWhileStatement?: (ctx: WhileStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.whileStatement`.\n     * @param ctx the parse tree\n     */\n    exitWhileStatement?: (ctx: WhileStatementContext) => void;\n    /**\n     * Enter a parse tree produced by the `CloseCursor`\n     * labeled alternative in `MySqlParser.cursorStatement`.\n     * @param ctx the parse tree\n     */\n    enterCloseCursor?: (ctx: CloseCursorContext) => void;\n    /**\n     * Exit a parse tree produced by the `CloseCursor`\n     * labeled alternative in `MySqlParser.cursorStatement`.\n     * @param ctx the parse tree\n     */\n    exitCloseCursor?: (ctx: CloseCursorContext) => void;\n    /**\n     * Enter a parse tree produced by the `FetchCursor`\n     * labeled alternative in `MySqlParser.cursorStatement`.\n     * @param ctx the parse tree\n     */\n    enterFetchCursor?: (ctx: FetchCursorContext) => void;\n    /**\n     * Exit a parse tree produced by the `FetchCursor`\n     * labeled alternative in `MySqlParser.cursorStatement`.\n     * @param ctx the parse tree\n     */\n    exitFetchCursor?: (ctx: FetchCursorContext) => void;\n    /**\n     * Enter a parse tree produced by the `OpenCursor`\n     * labeled alternative in `MySqlParser.cursorStatement`.\n     * @param ctx the parse tree\n     */\n    enterOpenCursor?: (ctx: OpenCursorContext) => void;\n    /**\n     * Exit a parse tree produced by the `OpenCursor`\n     * labeled alternative in `MySqlParser.cursorStatement`.\n     * @param ctx the parse tree\n     */\n    exitOpenCursor?: (ctx: OpenCursorContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.declareVariable`.\n     * @param ctx the parse tree\n     */\n    enterDeclareVariable?: (ctx: DeclareVariableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.declareVariable`.\n     * @param ctx the parse tree\n     */\n    exitDeclareVariable?: (ctx: DeclareVariableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.declareCondition`.\n     * @param ctx the parse tree\n     */\n    enterDeclareCondition?: (ctx: DeclareConditionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.declareCondition`.\n     * @param ctx the parse tree\n     */\n    exitDeclareCondition?: (ctx: DeclareConditionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.declareCursor`.\n     * @param ctx the parse tree\n     */\n    enterDeclareCursor?: (ctx: DeclareCursorContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.declareCursor`.\n     * @param ctx the parse tree\n     */\n    exitDeclareCursor?: (ctx: DeclareCursorContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.declareHandler`.\n     * @param ctx the parse tree\n     */\n    enterDeclareHandler?: (ctx: DeclareHandlerContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.declareHandler`.\n     * @param ctx the parse tree\n     */\n    exitDeclareHandler?: (ctx: DeclareHandlerContext) => void;\n    /**\n     * Enter a parse tree produced by the `handlerConditionCode`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    enterHandlerConditionCode?: (ctx: HandlerConditionCodeContext) => void;\n    /**\n     * Exit a parse tree produced by the `handlerConditionCode`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    exitHandlerConditionCode?: (ctx: HandlerConditionCodeContext) => void;\n    /**\n     * Enter a parse tree produced by the `handlerConditionState`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    enterHandlerConditionState?: (ctx: HandlerConditionStateContext) => void;\n    /**\n     * Exit a parse tree produced by the `handlerConditionState`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    exitHandlerConditionState?: (ctx: HandlerConditionStateContext) => void;\n    /**\n     * Enter a parse tree produced by the `handlerConditionName`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    enterHandlerConditionName?: (ctx: HandlerConditionNameContext) => void;\n    /**\n     * Exit a parse tree produced by the `handlerConditionName`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    exitHandlerConditionName?: (ctx: HandlerConditionNameContext) => void;\n    /**\n     * Enter a parse tree produced by the `handlerConditionWarning`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    enterHandlerConditionWarning?: (ctx: HandlerConditionWarningContext) => void;\n    /**\n     * Exit a parse tree produced by the `handlerConditionWarning`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    exitHandlerConditionWarning?: (ctx: HandlerConditionWarningContext) => void;\n    /**\n     * Enter a parse tree produced by the `handlerConditionNotfound`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    enterHandlerConditionNotfound?: (ctx: HandlerConditionNotfoundContext) => void;\n    /**\n     * Exit a parse tree produced by the `handlerConditionNotfound`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    exitHandlerConditionNotfound?: (ctx: HandlerConditionNotfoundContext) => void;\n    /**\n     * Enter a parse tree produced by the `handlerConditionException`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    enterHandlerConditionException?: (ctx: HandlerConditionExceptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `handlerConditionException`\n     * labeled alternative in `MySqlParser.handlerConditionValue`.\n     * @param ctx the parse tree\n     */\n    exitHandlerConditionException?: (ctx: HandlerConditionExceptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.procedureSqlStatement`.\n     * @param ctx the parse tree\n     */\n    enterProcedureSqlStatement?: (ctx: ProcedureSqlStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.procedureSqlStatement`.\n     * @param ctx the parse tree\n     */\n    exitProcedureSqlStatement?: (ctx: ProcedureSqlStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.caseAlternative`.\n     * @param ctx the parse tree\n     */\n    enterCaseAlternative?: (ctx: CaseAlternativeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.caseAlternative`.\n     * @param ctx the parse tree\n     */\n    exitCaseAlternative?: (ctx: CaseAlternativeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.elifAlternative`.\n     * @param ctx the parse tree\n     */\n    enterElifAlternative?: (ctx: ElifAlternativeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.elifAlternative`.\n     * @param ctx the parse tree\n     */\n    exitElifAlternative?: (ctx: ElifAlternativeContext) => void;\n    /**\n     * Enter a parse tree produced by the `alterUserMysqlV56`\n     * labeled alternative in `MySqlParser.alterUser`.\n     * @param ctx the parse tree\n     */\n    enterAlterUserMysqlV56?: (ctx: AlterUserMysqlV56Context) => void;\n    /**\n     * Exit a parse tree produced by the `alterUserMysqlV56`\n     * labeled alternative in `MySqlParser.alterUser`.\n     * @param ctx the parse tree\n     */\n    exitAlterUserMysqlV56?: (ctx: AlterUserMysqlV56Context) => void;\n    /**\n     * Enter a parse tree produced by the `alterUserMysqlV80`\n     * labeled alternative in `MySqlParser.alterUser`.\n     * @param ctx the parse tree\n     */\n    enterAlterUserMysqlV80?: (ctx: AlterUserMysqlV80Context) => void;\n    /**\n     * Exit a parse tree produced by the `alterUserMysqlV80`\n     * labeled alternative in `MySqlParser.alterUser`.\n     * @param ctx the parse tree\n     */\n    exitAlterUserMysqlV80?: (ctx: AlterUserMysqlV80Context) => void;\n    /**\n     * Enter a parse tree produced by the `createUserMysqlV56`\n     * labeled alternative in `MySqlParser.createUser`.\n     * @param ctx the parse tree\n     */\n    enterCreateUserMysqlV56?: (ctx: CreateUserMysqlV56Context) => void;\n    /**\n     * Exit a parse tree produced by the `createUserMysqlV56`\n     * labeled alternative in `MySqlParser.createUser`.\n     * @param ctx the parse tree\n     */\n    exitCreateUserMysqlV56?: (ctx: CreateUserMysqlV56Context) => void;\n    /**\n     * Enter a parse tree produced by the `createUserMysqlV80`\n     * labeled alternative in `MySqlParser.createUser`.\n     * @param ctx the parse tree\n     */\n    enterCreateUserMysqlV80?: (ctx: CreateUserMysqlV80Context) => void;\n    /**\n     * Exit a parse tree produced by the `createUserMysqlV80`\n     * labeled alternative in `MySqlParser.createUser`.\n     * @param ctx the parse tree\n     */\n    exitCreateUserMysqlV80?: (ctx: CreateUserMysqlV80Context) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dropUser`.\n     * @param ctx the parse tree\n     */\n    enterDropUser?: (ctx: DropUserContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dropUser`.\n     * @param ctx the parse tree\n     */\n    exitDropUser?: (ctx: DropUserContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.grantStatement`.\n     * @param ctx the parse tree\n     */\n    enterGrantStatement?: (ctx: GrantStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.grantStatement`.\n     * @param ctx the parse tree\n     */\n    exitGrantStatement?: (ctx: GrantStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.roleOption`.\n     * @param ctx the parse tree\n     */\n    enterRoleOption?: (ctx: RoleOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.roleOption`.\n     * @param ctx the parse tree\n     */\n    exitRoleOption?: (ctx: RoleOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.grantProxy`.\n     * @param ctx the parse tree\n     */\n    enterGrantProxy?: (ctx: GrantProxyContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.grantProxy`.\n     * @param ctx the parse tree\n     */\n    exitGrantProxy?: (ctx: GrantProxyContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.renameUser`.\n     * @param ctx the parse tree\n     */\n    enterRenameUser?: (ctx: RenameUserContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.renameUser`.\n     * @param ctx the parse tree\n     */\n    exitRenameUser?: (ctx: RenameUserContext) => void;\n    /**\n     * Enter a parse tree produced by the `detailRevoke`\n     * labeled alternative in `MySqlParser.revokeStatement`.\n     * @param ctx the parse tree\n     */\n    enterDetailRevoke?: (ctx: DetailRevokeContext) => void;\n    /**\n     * Exit a parse tree produced by the `detailRevoke`\n     * labeled alternative in `MySqlParser.revokeStatement`.\n     * @param ctx the parse tree\n     */\n    exitDetailRevoke?: (ctx: DetailRevokeContext) => void;\n    /**\n     * Enter a parse tree produced by the `shortRevoke`\n     * labeled alternative in `MySqlParser.revokeStatement`.\n     * @param ctx the parse tree\n     */\n    enterShortRevoke?: (ctx: ShortRevokeContext) => void;\n    /**\n     * Exit a parse tree produced by the `shortRevoke`\n     * labeled alternative in `MySqlParser.revokeStatement`.\n     * @param ctx the parse tree\n     */\n    exitShortRevoke?: (ctx: ShortRevokeContext) => void;\n    /**\n     * Enter a parse tree produced by the `roleRevoke`\n     * labeled alternative in `MySqlParser.revokeStatement`.\n     * @param ctx the parse tree\n     */\n    enterRoleRevoke?: (ctx: RoleRevokeContext) => void;\n    /**\n     * Exit a parse tree produced by the `roleRevoke`\n     * labeled alternative in `MySqlParser.revokeStatement`.\n     * @param ctx the parse tree\n     */\n    exitRoleRevoke?: (ctx: RoleRevokeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.revokeProxy`.\n     * @param ctx the parse tree\n     */\n    enterRevokeProxy?: (ctx: RevokeProxyContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.revokeProxy`.\n     * @param ctx the parse tree\n     */\n    exitRevokeProxy?: (ctx: RevokeProxyContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.setPasswordStatement`.\n     * @param ctx the parse tree\n     */\n    enterSetPasswordStatement?: (ctx: SetPasswordStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.setPasswordStatement`.\n     * @param ctx the parse tree\n     */\n    exitSetPasswordStatement?: (ctx: SetPasswordStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.userSpecification`.\n     * @param ctx the parse tree\n     */\n    enterUserSpecification?: (ctx: UserSpecificationContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.userSpecification`.\n     * @param ctx the parse tree\n     */\n    exitUserSpecification?: (ctx: UserSpecificationContext) => void;\n    /**\n     * Enter a parse tree produced by the `hashAuthOption`\n     * labeled alternative in `MySqlParser.userAuthOption`.\n     * @param ctx the parse tree\n     */\n    enterHashAuthOption?: (ctx: HashAuthOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `hashAuthOption`\n     * labeled alternative in `MySqlParser.userAuthOption`.\n     * @param ctx the parse tree\n     */\n    exitHashAuthOption?: (ctx: HashAuthOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `randomAuthOption`\n     * labeled alternative in `MySqlParser.userAuthOption`.\n     * @param ctx the parse tree\n     */\n    enterRandomAuthOption?: (ctx: RandomAuthOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `randomAuthOption`\n     * labeled alternative in `MySqlParser.userAuthOption`.\n     * @param ctx the parse tree\n     */\n    exitRandomAuthOption?: (ctx: RandomAuthOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `stringAuthOption`\n     * labeled alternative in `MySqlParser.userAuthOption`.\n     * @param ctx the parse tree\n     */\n    enterStringAuthOption?: (ctx: StringAuthOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `stringAuthOption`\n     * labeled alternative in `MySqlParser.userAuthOption`.\n     * @param ctx the parse tree\n     */\n    exitStringAuthOption?: (ctx: StringAuthOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `moduleAuthOption`\n     * labeled alternative in `MySqlParser.userAuthOption`.\n     * @param ctx the parse tree\n     */\n    enterModuleAuthOption?: (ctx: ModuleAuthOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `moduleAuthOption`\n     * labeled alternative in `MySqlParser.userAuthOption`.\n     * @param ctx the parse tree\n     */\n    exitModuleAuthOption?: (ctx: ModuleAuthOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `simpleAuthOption`\n     * labeled alternative in `MySqlParser.userAuthOption`.\n     * @param ctx the parse tree\n     */\n    enterSimpleAuthOption?: (ctx: SimpleAuthOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `simpleAuthOption`\n     * labeled alternative in `MySqlParser.userAuthOption`.\n     * @param ctx the parse tree\n     */\n    exitSimpleAuthOption?: (ctx: SimpleAuthOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.authOptionClause`.\n     * @param ctx the parse tree\n     */\n    enterAuthOptionClause?: (ctx: AuthOptionClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.authOptionClause`.\n     * @param ctx the parse tree\n     */\n    exitAuthOptionClause?: (ctx: AuthOptionClauseContext) => void;\n    /**\n     * Enter a parse tree produced by the `module`\n     * labeled alternative in `MySqlParser.authenticationRule`.\n     * @param ctx the parse tree\n     */\n    enterModule?: (ctx: ModuleContext) => void;\n    /**\n     * Exit a parse tree produced by the `module`\n     * labeled alternative in `MySqlParser.authenticationRule`.\n     * @param ctx the parse tree\n     */\n    exitModule?: (ctx: ModuleContext) => void;\n    /**\n     * Enter a parse tree produced by the `passwordModuleOption`\n     * labeled alternative in `MySqlParser.authenticationRule`.\n     * @param ctx the parse tree\n     */\n    enterPasswordModuleOption?: (ctx: PasswordModuleOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `passwordModuleOption`\n     * labeled alternative in `MySqlParser.authenticationRule`.\n     * @param ctx the parse tree\n     */\n    exitPasswordModuleOption?: (ctx: PasswordModuleOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.tlsOption`.\n     * @param ctx the parse tree\n     */\n    enterTlsOption?: (ctx: TlsOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.tlsOption`.\n     * @param ctx the parse tree\n     */\n    exitTlsOption?: (ctx: TlsOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.userResourceOption`.\n     * @param ctx the parse tree\n     */\n    enterUserResourceOption?: (ctx: UserResourceOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.userResourceOption`.\n     * @param ctx the parse tree\n     */\n    exitUserResourceOption?: (ctx: UserResourceOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.userPasswordOption`.\n     * @param ctx the parse tree\n     */\n    enterUserPasswordOption?: (ctx: UserPasswordOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.userPasswordOption`.\n     * @param ctx the parse tree\n     */\n    exitUserPasswordOption?: (ctx: UserPasswordOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.userLockOption`.\n     * @param ctx the parse tree\n     */\n    enterUserLockOption?: (ctx: UserLockOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.userLockOption`.\n     * @param ctx the parse tree\n     */\n    exitUserLockOption?: (ctx: UserLockOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.privelegeClause`.\n     * @param ctx the parse tree\n     */\n    enterPrivelegeClause?: (ctx: PrivelegeClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.privelegeClause`.\n     * @param ctx the parse tree\n     */\n    exitPrivelegeClause?: (ctx: PrivelegeClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.privilege`.\n     * @param ctx the parse tree\n     */\n    enterPrivilege?: (ctx: PrivilegeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.privilege`.\n     * @param ctx the parse tree\n     */\n    exitPrivilege?: (ctx: PrivilegeContext) => void;\n    /**\n     * Enter a parse tree produced by the `currentSchemaPriviLevel`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    enterCurrentSchemaPriviLevel?: (ctx: CurrentSchemaPriviLevelContext) => void;\n    /**\n     * Exit a parse tree produced by the `currentSchemaPriviLevel`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    exitCurrentSchemaPriviLevel?: (ctx: CurrentSchemaPriviLevelContext) => void;\n    /**\n     * Enter a parse tree produced by the `globalPrivLevel`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    enterGlobalPrivLevel?: (ctx: GlobalPrivLevelContext) => void;\n    /**\n     * Exit a parse tree produced by the `globalPrivLevel`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    exitGlobalPrivLevel?: (ctx: GlobalPrivLevelContext) => void;\n    /**\n     * Enter a parse tree produced by the `definiteSchemaPrivLevel`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    enterDefiniteSchemaPrivLevel?: (ctx: DefiniteSchemaPrivLevelContext) => void;\n    /**\n     * Exit a parse tree produced by the `definiteSchemaPrivLevel`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    exitDefiniteSchemaPrivLevel?: (ctx: DefiniteSchemaPrivLevelContext) => void;\n    /**\n     * Enter a parse tree produced by the `definiteFullTablePrivLevel`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    enterDefiniteFullTablePrivLevel?: (ctx: DefiniteFullTablePrivLevelContext) => void;\n    /**\n     * Exit a parse tree produced by the `definiteFullTablePrivLevel`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    exitDefiniteFullTablePrivLevel?: (ctx: DefiniteFullTablePrivLevelContext) => void;\n    /**\n     * Enter a parse tree produced by the `definiteFullTablePrivLevel2`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    enterDefiniteFullTablePrivLevel2?: (ctx: DefiniteFullTablePrivLevel2Context) => void;\n    /**\n     * Exit a parse tree produced by the `definiteFullTablePrivLevel2`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    exitDefiniteFullTablePrivLevel2?: (ctx: DefiniteFullTablePrivLevel2Context) => void;\n    /**\n     * Enter a parse tree produced by the `definiteTablePrivLevel`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    enterDefiniteTablePrivLevel?: (ctx: DefiniteTablePrivLevelContext) => void;\n    /**\n     * Exit a parse tree produced by the `definiteTablePrivLevel`\n     * labeled alternative in `MySqlParser.privilegeLevel`.\n     * @param ctx the parse tree\n     */\n    exitDefiniteTablePrivLevel?: (ctx: DefiniteTablePrivLevelContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.renameUserClause`.\n     * @param ctx the parse tree\n     */\n    enterRenameUserClause?: (ctx: RenameUserClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.renameUserClause`.\n     * @param ctx the parse tree\n     */\n    exitRenameUserClause?: (ctx: RenameUserClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.analyzeTable`.\n     * @param ctx the parse tree\n     */\n    enterAnalyzeTable?: (ctx: AnalyzeTableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.analyzeTable`.\n     * @param ctx the parse tree\n     */\n    exitAnalyzeTable?: (ctx: AnalyzeTableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.checkTable`.\n     * @param ctx the parse tree\n     */\n    enterCheckTable?: (ctx: CheckTableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.checkTable`.\n     * @param ctx the parse tree\n     */\n    exitCheckTable?: (ctx: CheckTableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.checksumTable`.\n     * @param ctx the parse tree\n     */\n    enterChecksumTable?: (ctx: ChecksumTableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.checksumTable`.\n     * @param ctx the parse tree\n     */\n    exitChecksumTable?: (ctx: ChecksumTableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.optimizeTable`.\n     * @param ctx the parse tree\n     */\n    enterOptimizeTable?: (ctx: OptimizeTableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.optimizeTable`.\n     * @param ctx the parse tree\n     */\n    exitOptimizeTable?: (ctx: OptimizeTableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.repairTable`.\n     * @param ctx the parse tree\n     */\n    enterRepairTable?: (ctx: RepairTableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.repairTable`.\n     * @param ctx the parse tree\n     */\n    exitRepairTable?: (ctx: RepairTableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.checkTableOption`.\n     * @param ctx the parse tree\n     */\n    enterCheckTableOption?: (ctx: CheckTableOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.checkTableOption`.\n     * @param ctx the parse tree\n     */\n    exitCheckTableOption?: (ctx: CheckTableOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.createUdfunction`.\n     * @param ctx the parse tree\n     */\n    enterCreateUdfunction?: (ctx: CreateUdfunctionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.createUdfunction`.\n     * @param ctx the parse tree\n     */\n    exitCreateUdfunction?: (ctx: CreateUdfunctionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.installPlugin`.\n     * @param ctx the parse tree\n     */\n    enterInstallPlugin?: (ctx: InstallPluginContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.installPlugin`.\n     * @param ctx the parse tree\n     */\n    exitInstallPlugin?: (ctx: InstallPluginContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.uninstallPlugin`.\n     * @param ctx the parse tree\n     */\n    enterUninstallPlugin?: (ctx: UninstallPluginContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.uninstallPlugin`.\n     * @param ctx the parse tree\n     */\n    exitUninstallPlugin?: (ctx: UninstallPluginContext) => void;\n    /**\n     * Enter a parse tree produced by the `setVariable`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    enterSetVariable?: (ctx: SetVariableContext) => void;\n    /**\n     * Exit a parse tree produced by the `setVariable`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    exitSetVariable?: (ctx: SetVariableContext) => void;\n    /**\n     * Enter a parse tree produced by the `setCharset`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    enterSetCharset?: (ctx: SetCharsetContext) => void;\n    /**\n     * Exit a parse tree produced by the `setCharset`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    exitSetCharset?: (ctx: SetCharsetContext) => void;\n    /**\n     * Enter a parse tree produced by the `setNames`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    enterSetNames?: (ctx: SetNamesContext) => void;\n    /**\n     * Exit a parse tree produced by the `setNames`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    exitSetNames?: (ctx: SetNamesContext) => void;\n    /**\n     * Enter a parse tree produced by the `setPassword`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    enterSetPassword?: (ctx: SetPasswordContext) => void;\n    /**\n     * Exit a parse tree produced by the `setPassword`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    exitSetPassword?: (ctx: SetPasswordContext) => void;\n    /**\n     * Enter a parse tree produced by the `setTransaction`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    enterSetTransaction?: (ctx: SetTransactionContext) => void;\n    /**\n     * Exit a parse tree produced by the `setTransaction`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    exitSetTransaction?: (ctx: SetTransactionContext) => void;\n    /**\n     * Enter a parse tree produced by the `setAutocommit`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    enterSetAutocommit?: (ctx: SetAutocommitContext) => void;\n    /**\n     * Exit a parse tree produced by the `setAutocommit`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    exitSetAutocommit?: (ctx: SetAutocommitContext) => void;\n    /**\n     * Enter a parse tree produced by the `setNewValueInsideTrigger`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    enterSetNewValueInsideTrigger?: (ctx: SetNewValueInsideTriggerContext) => void;\n    /**\n     * Exit a parse tree produced by the `setNewValueInsideTrigger`\n     * labeled alternative in `MySqlParser.setStatement`.\n     * @param ctx the parse tree\n     */\n    exitSetNewValueInsideTrigger?: (ctx: SetNewValueInsideTriggerContext) => void;\n    /**\n     * Enter a parse tree produced by the `showMasterLogs`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowMasterLogs?: (ctx: ShowMasterLogsContext) => void;\n    /**\n     * Exit a parse tree produced by the `showMasterLogs`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowMasterLogs?: (ctx: ShowMasterLogsContext) => void;\n    /**\n     * Enter a parse tree produced by the `showLogEvents`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowLogEvents?: (ctx: ShowLogEventsContext) => void;\n    /**\n     * Exit a parse tree produced by the `showLogEvents`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowLogEvents?: (ctx: ShowLogEventsContext) => void;\n    /**\n     * Enter a parse tree produced by the `showObjectFilter`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowObjectFilter?: (ctx: ShowObjectFilterContext) => void;\n    /**\n     * Exit a parse tree produced by the `showObjectFilter`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowObjectFilter?: (ctx: ShowObjectFilterContext) => void;\n    /**\n     * Enter a parse tree produced by the `showColumns`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowColumns?: (ctx: ShowColumnsContext) => void;\n    /**\n     * Exit a parse tree produced by the `showColumns`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowColumns?: (ctx: ShowColumnsContext) => void;\n    /**\n     * Enter a parse tree produced by the `showCreateDb`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowCreateDb?: (ctx: ShowCreateDbContext) => void;\n    /**\n     * Exit a parse tree produced by the `showCreateDb`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowCreateDb?: (ctx: ShowCreateDbContext) => void;\n    /**\n     * Enter a parse tree produced by the `showCreateFullIdObject`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowCreateFullIdObject?: (ctx: ShowCreateFullIdObjectContext) => void;\n    /**\n     * Exit a parse tree produced by the `showCreateFullIdObject`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowCreateFullIdObject?: (ctx: ShowCreateFullIdObjectContext) => void;\n    /**\n     * Enter a parse tree produced by the `showCreateUser`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowCreateUser?: (ctx: ShowCreateUserContext) => void;\n    /**\n     * Exit a parse tree produced by the `showCreateUser`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowCreateUser?: (ctx: ShowCreateUserContext) => void;\n    /**\n     * Enter a parse tree produced by the `showEngine`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowEngine?: (ctx: ShowEngineContext) => void;\n    /**\n     * Exit a parse tree produced by the `showEngine`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowEngine?: (ctx: ShowEngineContext) => void;\n    /**\n     * Enter a parse tree produced by the `showGlobalInfo`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowGlobalInfo?: (ctx: ShowGlobalInfoContext) => void;\n    /**\n     * Exit a parse tree produced by the `showGlobalInfo`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowGlobalInfo?: (ctx: ShowGlobalInfoContext) => void;\n    /**\n     * Enter a parse tree produced by the `showErrors`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowErrors?: (ctx: ShowErrorsContext) => void;\n    /**\n     * Exit a parse tree produced by the `showErrors`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowErrors?: (ctx: ShowErrorsContext) => void;\n    /**\n     * Enter a parse tree produced by the `showCountErrors`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowCountErrors?: (ctx: ShowCountErrorsContext) => void;\n    /**\n     * Exit a parse tree produced by the `showCountErrors`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowCountErrors?: (ctx: ShowCountErrorsContext) => void;\n    /**\n     * Enter a parse tree produced by the `showSchemaFilter`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowSchemaFilter?: (ctx: ShowSchemaFilterContext) => void;\n    /**\n     * Exit a parse tree produced by the `showSchemaFilter`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowSchemaFilter?: (ctx: ShowSchemaFilterContext) => void;\n    /**\n     * Enter a parse tree produced by the `showRoutine`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowRoutine?: (ctx: ShowRoutineContext) => void;\n    /**\n     * Exit a parse tree produced by the `showRoutine`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowRoutine?: (ctx: ShowRoutineContext) => void;\n    /**\n     * Enter a parse tree produced by the `showGrants`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowGrants?: (ctx: ShowGrantsContext) => void;\n    /**\n     * Exit a parse tree produced by the `showGrants`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowGrants?: (ctx: ShowGrantsContext) => void;\n    /**\n     * Enter a parse tree produced by the `showIndexes`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowIndexes?: (ctx: ShowIndexesContext) => void;\n    /**\n     * Exit a parse tree produced by the `showIndexes`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowIndexes?: (ctx: ShowIndexesContext) => void;\n    /**\n     * Enter a parse tree produced by the `showOpenTables`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowOpenTables?: (ctx: ShowOpenTablesContext) => void;\n    /**\n     * Exit a parse tree produced by the `showOpenTables`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowOpenTables?: (ctx: ShowOpenTablesContext) => void;\n    /**\n     * Enter a parse tree produced by the `showProfile`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowProfile?: (ctx: ShowProfileContext) => void;\n    /**\n     * Exit a parse tree produced by the `showProfile`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowProfile?: (ctx: ShowProfileContext) => void;\n    /**\n     * Enter a parse tree produced by the `showSlaveStatus`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    enterShowSlaveStatus?: (ctx: ShowSlaveStatusContext) => void;\n    /**\n     * Exit a parse tree produced by the `showSlaveStatus`\n     * labeled alternative in `MySqlParser.showStatement`.\n     * @param ctx the parse tree\n     */\n    exitShowSlaveStatus?: (ctx: ShowSlaveStatusContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.variableClause`.\n     * @param ctx the parse tree\n     */\n    enterVariableClause?: (ctx: VariableClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.variableClause`.\n     * @param ctx the parse tree\n     */\n    exitVariableClause?: (ctx: VariableClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.showCommonEntity`.\n     * @param ctx the parse tree\n     */\n    enterShowCommonEntity?: (ctx: ShowCommonEntityContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.showCommonEntity`.\n     * @param ctx the parse tree\n     */\n    exitShowCommonEntity?: (ctx: ShowCommonEntityContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.showFilter`.\n     * @param ctx the parse tree\n     */\n    enterShowFilter?: (ctx: ShowFilterContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.showFilter`.\n     * @param ctx the parse tree\n     */\n    exitShowFilter?: (ctx: ShowFilterContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.showGlobalInfoClause`.\n     * @param ctx the parse tree\n     */\n    enterShowGlobalInfoClause?: (ctx: ShowGlobalInfoClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.showGlobalInfoClause`.\n     * @param ctx the parse tree\n     */\n    exitShowGlobalInfoClause?: (ctx: ShowGlobalInfoClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.showSchemaEntity`.\n     * @param ctx the parse tree\n     */\n    enterShowSchemaEntity?: (ctx: ShowSchemaEntityContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.showSchemaEntity`.\n     * @param ctx the parse tree\n     */\n    exitShowSchemaEntity?: (ctx: ShowSchemaEntityContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.showProfileType`.\n     * @param ctx the parse tree\n     */\n    enterShowProfileType?: (ctx: ShowProfileTypeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.showProfileType`.\n     * @param ctx the parse tree\n     */\n    exitShowProfileType?: (ctx: ShowProfileTypeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.binlogStatement`.\n     * @param ctx the parse tree\n     */\n    enterBinlogStatement?: (ctx: BinlogStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.binlogStatement`.\n     * @param ctx the parse tree\n     */\n    exitBinlogStatement?: (ctx: BinlogStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.cacheIndexStatement`.\n     * @param ctx the parse tree\n     */\n    enterCacheIndexStatement?: (ctx: CacheIndexStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.cacheIndexStatement`.\n     * @param ctx the parse tree\n     */\n    exitCacheIndexStatement?: (ctx: CacheIndexStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.flushStatement`.\n     * @param ctx the parse tree\n     */\n    enterFlushStatement?: (ctx: FlushStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.flushStatement`.\n     * @param ctx the parse tree\n     */\n    exitFlushStatement?: (ctx: FlushStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.killStatement`.\n     * @param ctx the parse tree\n     */\n    enterKillStatement?: (ctx: KillStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.killStatement`.\n     * @param ctx the parse tree\n     */\n    exitKillStatement?: (ctx: KillStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.loadIndexIntoCache`.\n     * @param ctx the parse tree\n     */\n    enterLoadIndexIntoCache?: (ctx: LoadIndexIntoCacheContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.loadIndexIntoCache`.\n     * @param ctx the parse tree\n     */\n    exitLoadIndexIntoCache?: (ctx: LoadIndexIntoCacheContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.resetStatement`.\n     * @param ctx the parse tree\n     */\n    enterResetStatement?: (ctx: ResetStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.resetStatement`.\n     * @param ctx the parse tree\n     */\n    exitResetStatement?: (ctx: ResetStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.shutdownStatement`.\n     * @param ctx the parse tree\n     */\n    enterShutdownStatement?: (ctx: ShutdownStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.shutdownStatement`.\n     * @param ctx the parse tree\n     */\n    exitShutdownStatement?: (ctx: ShutdownStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.tableIndexes`.\n     * @param ctx the parse tree\n     */\n    enterTableIndexes?: (ctx: TableIndexesContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.tableIndexes`.\n     * @param ctx the parse tree\n     */\n    exitTableIndexes?: (ctx: TableIndexesContext) => void;\n    /**\n     * Enter a parse tree produced by the `simpleFlushOption`\n     * labeled alternative in `MySqlParser.flushOption`.\n     * @param ctx the parse tree\n     */\n    enterSimpleFlushOption?: (ctx: SimpleFlushOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `simpleFlushOption`\n     * labeled alternative in `MySqlParser.flushOption`.\n     * @param ctx the parse tree\n     */\n    exitSimpleFlushOption?: (ctx: SimpleFlushOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `channelFlushOption`\n     * labeled alternative in `MySqlParser.flushOption`.\n     * @param ctx the parse tree\n     */\n    enterChannelFlushOption?: (ctx: ChannelFlushOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `channelFlushOption`\n     * labeled alternative in `MySqlParser.flushOption`.\n     * @param ctx the parse tree\n     */\n    exitChannelFlushOption?: (ctx: ChannelFlushOptionContext) => void;\n    /**\n     * Enter a parse tree produced by the `tableFlushOption`\n     * labeled alternative in `MySqlParser.flushOption`.\n     * @param ctx the parse tree\n     */\n    enterTableFlushOption?: (ctx: TableFlushOptionContext) => void;\n    /**\n     * Exit a parse tree produced by the `tableFlushOption`\n     * labeled alternative in `MySqlParser.flushOption`.\n     * @param ctx the parse tree\n     */\n    exitTableFlushOption?: (ctx: TableFlushOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.flushTableOption`.\n     * @param ctx the parse tree\n     */\n    enterFlushTableOption?: (ctx: FlushTableOptionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.flushTableOption`.\n     * @param ctx the parse tree\n     */\n    exitFlushTableOption?: (ctx: FlushTableOptionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.loadedTableIndexes`.\n     * @param ctx the parse tree\n     */\n    enterLoadedTableIndexes?: (ctx: LoadedTableIndexesContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.loadedTableIndexes`.\n     * @param ctx the parse tree\n     */\n    exitLoadedTableIndexes?: (ctx: LoadedTableIndexesContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.simpleDescribeStatement`.\n     * @param ctx the parse tree\n     */\n    enterSimpleDescribeStatement?: (ctx: SimpleDescribeStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.simpleDescribeStatement`.\n     * @param ctx the parse tree\n     */\n    exitSimpleDescribeStatement?: (ctx: SimpleDescribeStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.fullDescribeStatement`.\n     * @param ctx the parse tree\n     */\n    enterFullDescribeStatement?: (ctx: FullDescribeStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.fullDescribeStatement`.\n     * @param ctx the parse tree\n     */\n    exitFullDescribeStatement?: (ctx: FullDescribeStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.helpStatement`.\n     * @param ctx the parse tree\n     */\n    enterHelpStatement?: (ctx: HelpStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.helpStatement`.\n     * @param ctx the parse tree\n     */\n    exitHelpStatement?: (ctx: HelpStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.useStatement`.\n     * @param ctx the parse tree\n     */\n    enterUseStatement?: (ctx: UseStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.useStatement`.\n     * @param ctx the parse tree\n     */\n    exitUseStatement?: (ctx: UseStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.signalStatement`.\n     * @param ctx the parse tree\n     */\n    enterSignalStatement?: (ctx: SignalStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.signalStatement`.\n     * @param ctx the parse tree\n     */\n    exitSignalStatement?: (ctx: SignalStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.resignalStatement`.\n     * @param ctx the parse tree\n     */\n    enterResignalStatement?: (ctx: ResignalStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.resignalStatement`.\n     * @param ctx the parse tree\n     */\n    exitResignalStatement?: (ctx: ResignalStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.signalConditionInformation`.\n     * @param ctx the parse tree\n     */\n    enterSignalConditionInformation?: (ctx: SignalConditionInformationContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.signalConditionInformation`.\n     * @param ctx the parse tree\n     */\n    exitSignalConditionInformation?: (ctx: SignalConditionInformationContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.withStatement`.\n     * @param ctx the parse tree\n     */\n    enterWithStatement?: (ctx: WithStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.withStatement`.\n     * @param ctx the parse tree\n     */\n    exitWithStatement?: (ctx: WithStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.tableStatement`.\n     * @param ctx the parse tree\n     */\n    enterTableStatement?: (ctx: TableStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.tableStatement`.\n     * @param ctx the parse tree\n     */\n    exitTableStatement?: (ctx: TableStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.diagnosticsStatement`.\n     * @param ctx the parse tree\n     */\n    enterDiagnosticsStatement?: (ctx: DiagnosticsStatementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.diagnosticsStatement`.\n     * @param ctx the parse tree\n     */\n    exitDiagnosticsStatement?: (ctx: DiagnosticsStatementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.diagnosticsConditionInformationName`.\n     * @param ctx the parse tree\n     */\n    enterDiagnosticsConditionInformationName?: (ctx: DiagnosticsConditionInformationNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.diagnosticsConditionInformationName`.\n     * @param ctx the parse tree\n     */\n    exitDiagnosticsConditionInformationName?: (ctx: DiagnosticsConditionInformationNameContext) => void;\n    /**\n     * Enter a parse tree produced by the `describeStatements`\n     * labeled alternative in `MySqlParser.describeObjectClause`.\n     * @param ctx the parse tree\n     */\n    enterDescribeStatements?: (ctx: DescribeStatementsContext) => void;\n    /**\n     * Exit a parse tree produced by the `describeStatements`\n     * labeled alternative in `MySqlParser.describeObjectClause`.\n     * @param ctx the parse tree\n     */\n    exitDescribeStatements?: (ctx: DescribeStatementsContext) => void;\n    /**\n     * Enter a parse tree produced by the `describeConnection`\n     * labeled alternative in `MySqlParser.describeObjectClause`.\n     * @param ctx the parse tree\n     */\n    enterDescribeConnection?: (ctx: DescribeConnectionContext) => void;\n    /**\n     * Exit a parse tree produced by the `describeConnection`\n     * labeled alternative in `MySqlParser.describeObjectClause`.\n     * @param ctx the parse tree\n     */\n    exitDescribeConnection?: (ctx: DescribeConnectionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.fullId`.\n     * @param ctx the parse tree\n     */\n    enterFullId?: (ctx: FullIdContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.fullId`.\n     * @param ctx the parse tree\n     */\n    exitFullId?: (ctx: FullIdContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.tableName`.\n     * @param ctx the parse tree\n     */\n    enterTableName?: (ctx: TableNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.tableName`.\n     * @param ctx the parse tree\n     */\n    exitTableName?: (ctx: TableNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.roleName`.\n     * @param ctx the parse tree\n     */\n    enterRoleName?: (ctx: RoleNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.roleName`.\n     * @param ctx the parse tree\n     */\n    exitRoleName?: (ctx: RoleNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.fullColumnName`.\n     * @param ctx the parse tree\n     */\n    enterFullColumnName?: (ctx: FullColumnNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.fullColumnName`.\n     * @param ctx the parse tree\n     */\n    exitFullColumnName?: (ctx: FullColumnNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.indexColumnName`.\n     * @param ctx the parse tree\n     */\n    enterIndexColumnName?: (ctx: IndexColumnNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.indexColumnName`.\n     * @param ctx the parse tree\n     */\n    exitIndexColumnName?: (ctx: IndexColumnNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.simpleUserName`.\n     * @param ctx the parse tree\n     */\n    enterSimpleUserName?: (ctx: SimpleUserNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.simpleUserName`.\n     * @param ctx the parse tree\n     */\n    exitSimpleUserName?: (ctx: SimpleUserNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.hostName`.\n     * @param ctx the parse tree\n     */\n    enterHostName?: (ctx: HostNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.hostName`.\n     * @param ctx the parse tree\n     */\n    exitHostName?: (ctx: HostNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.userName`.\n     * @param ctx the parse tree\n     */\n    enterUserName?: (ctx: UserNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.userName`.\n     * @param ctx the parse tree\n     */\n    exitUserName?: (ctx: UserNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.mysqlVariable`.\n     * @param ctx the parse tree\n     */\n    enterMysqlVariable?: (ctx: MysqlVariableContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.mysqlVariable`.\n     * @param ctx the parse tree\n     */\n    exitMysqlVariable?: (ctx: MysqlVariableContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.charsetName`.\n     * @param ctx the parse tree\n     */\n    enterCharsetName?: (ctx: CharsetNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.charsetName`.\n     * @param ctx the parse tree\n     */\n    exitCharsetName?: (ctx: CharsetNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.collationName`.\n     * @param ctx the parse tree\n     */\n    enterCollationName?: (ctx: CollationNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.collationName`.\n     * @param ctx the parse tree\n     */\n    exitCollationName?: (ctx: CollationNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.engineName`.\n     * @param ctx the parse tree\n     */\n    enterEngineName?: (ctx: EngineNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.engineName`.\n     * @param ctx the parse tree\n     */\n    exitEngineName?: (ctx: EngineNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.engineNameBase`.\n     * @param ctx the parse tree\n     */\n    enterEngineNameBase?: (ctx: EngineNameBaseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.engineNameBase`.\n     * @param ctx the parse tree\n     */\n    exitEngineNameBase?: (ctx: EngineNameBaseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.uuidSet`.\n     * @param ctx the parse tree\n     */\n    enterUuidSet?: (ctx: UuidSetContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.uuidSet`.\n     * @param ctx the parse tree\n     */\n    exitUuidSet?: (ctx: UuidSetContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.xid`.\n     * @param ctx the parse tree\n     */\n    enterXid?: (ctx: XidContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.xid`.\n     * @param ctx the parse tree\n     */\n    exitXid?: (ctx: XidContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.xuidStringId`.\n     * @param ctx the parse tree\n     */\n    enterXuidStringId?: (ctx: XuidStringIdContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.xuidStringId`.\n     * @param ctx the parse tree\n     */\n    exitXuidStringId?: (ctx: XuidStringIdContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.authPlugin`.\n     * @param ctx the parse tree\n     */\n    enterAuthPlugin?: (ctx: AuthPluginContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.authPlugin`.\n     * @param ctx the parse tree\n     */\n    exitAuthPlugin?: (ctx: AuthPluginContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.uid`.\n     * @param ctx the parse tree\n     */\n    enterUid?: (ctx: UidContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.uid`.\n     * @param ctx the parse tree\n     */\n    exitUid?: (ctx: UidContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.simpleId`.\n     * @param ctx the parse tree\n     */\n    enterSimpleId?: (ctx: SimpleIdContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.simpleId`.\n     * @param ctx the parse tree\n     */\n    exitSimpleId?: (ctx: SimpleIdContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dottedId`.\n     * @param ctx the parse tree\n     */\n    enterDottedId?: (ctx: DottedIdContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dottedId`.\n     * @param ctx the parse tree\n     */\n    exitDottedId?: (ctx: DottedIdContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.decimalLiteral`.\n     * @param ctx the parse tree\n     */\n    enterDecimalLiteral?: (ctx: DecimalLiteralContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.decimalLiteral`.\n     * @param ctx the parse tree\n     */\n    exitDecimalLiteral?: (ctx: DecimalLiteralContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.fileSizeLiteral`.\n     * @param ctx the parse tree\n     */\n    enterFileSizeLiteral?: (ctx: FileSizeLiteralContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.fileSizeLiteral`.\n     * @param ctx the parse tree\n     */\n    exitFileSizeLiteral?: (ctx: FileSizeLiteralContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.stringLiteral`.\n     * @param ctx the parse tree\n     */\n    enterStringLiteral?: (ctx: StringLiteralContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.stringLiteral`.\n     * @param ctx the parse tree\n     */\n    exitStringLiteral?: (ctx: StringLiteralContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.booleanLiteral`.\n     * @param ctx the parse tree\n     */\n    enterBooleanLiteral?: (ctx: BooleanLiteralContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.booleanLiteral`.\n     * @param ctx the parse tree\n     */\n    exitBooleanLiteral?: (ctx: BooleanLiteralContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.hexadecimalLiteral`.\n     * @param ctx the parse tree\n     */\n    enterHexadecimalLiteral?: (ctx: HexadecimalLiteralContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.hexadecimalLiteral`.\n     * @param ctx the parse tree\n     */\n    exitHexadecimalLiteral?: (ctx: HexadecimalLiteralContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.nullNotnull`.\n     * @param ctx the parse tree\n     */\n    enterNullNotnull?: (ctx: NullNotnullContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.nullNotnull`.\n     * @param ctx the parse tree\n     */\n    exitNullNotnull?: (ctx: NullNotnullContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.constant`.\n     * @param ctx the parse tree\n     */\n    enterConstant?: (ctx: ConstantContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.constant`.\n     * @param ctx the parse tree\n     */\n    exitConstant?: (ctx: ConstantContext) => void;\n    /**\n     * Enter a parse tree produced by the `stringDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    enterStringDataType?: (ctx: StringDataTypeContext) => void;\n    /**\n     * Exit a parse tree produced by the `stringDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    exitStringDataType?: (ctx: StringDataTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `nationalVaryingStringDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    enterNationalVaryingStringDataType?: (ctx: NationalVaryingStringDataTypeContext) => void;\n    /**\n     * Exit a parse tree produced by the `nationalVaryingStringDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    exitNationalVaryingStringDataType?: (ctx: NationalVaryingStringDataTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `nationalStringDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    enterNationalStringDataType?: (ctx: NationalStringDataTypeContext) => void;\n    /**\n     * Exit a parse tree produced by the `nationalStringDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    exitNationalStringDataType?: (ctx: NationalStringDataTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `dimensionDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    enterDimensionDataType?: (ctx: DimensionDataTypeContext) => void;\n    /**\n     * Exit a parse tree produced by the `dimensionDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    exitDimensionDataType?: (ctx: DimensionDataTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `simpleDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    enterSimpleDataType?: (ctx: SimpleDataTypeContext) => void;\n    /**\n     * Exit a parse tree produced by the `simpleDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    exitSimpleDataType?: (ctx: SimpleDataTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `collectionDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    enterCollectionDataType?: (ctx: CollectionDataTypeContext) => void;\n    /**\n     * Exit a parse tree produced by the `collectionDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    exitCollectionDataType?: (ctx: CollectionDataTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `spatialDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    enterSpatialDataType?: (ctx: SpatialDataTypeContext) => void;\n    /**\n     * Exit a parse tree produced by the `spatialDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    exitSpatialDataType?: (ctx: SpatialDataTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `longVarcharDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    enterLongVarcharDataType?: (ctx: LongVarcharDataTypeContext) => void;\n    /**\n     * Exit a parse tree produced by the `longVarcharDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    exitLongVarcharDataType?: (ctx: LongVarcharDataTypeContext) => void;\n    /**\n     * Enter a parse tree produced by the `longVarbinaryDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    enterLongVarbinaryDataType?: (ctx: LongVarbinaryDataTypeContext) => void;\n    /**\n     * Exit a parse tree produced by the `longVarbinaryDataType`\n     * labeled alternative in `MySqlParser.dataType`.\n     * @param ctx the parse tree\n     */\n    exitLongVarbinaryDataType?: (ctx: LongVarbinaryDataTypeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.collectionOptions`.\n     * @param ctx the parse tree\n     */\n    enterCollectionOptions?: (ctx: CollectionOptionsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.collectionOptions`.\n     * @param ctx the parse tree\n     */\n    exitCollectionOptions?: (ctx: CollectionOptionsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.convertedDataType`.\n     * @param ctx the parse tree\n     */\n    enterConvertedDataType?: (ctx: ConvertedDataTypeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.convertedDataType`.\n     * @param ctx the parse tree\n     */\n    exitConvertedDataType?: (ctx: ConvertedDataTypeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.lengthOneDimension`.\n     * @param ctx the parse tree\n     */\n    enterLengthOneDimension?: (ctx: LengthOneDimensionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.lengthOneDimension`.\n     * @param ctx the parse tree\n     */\n    exitLengthOneDimension?: (ctx: LengthOneDimensionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.lengthTwoDimension`.\n     * @param ctx the parse tree\n     */\n    enterLengthTwoDimension?: (ctx: LengthTwoDimensionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.lengthTwoDimension`.\n     * @param ctx the parse tree\n     */\n    exitLengthTwoDimension?: (ctx: LengthTwoDimensionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.lengthTwoOptionalDimension`.\n     * @param ctx the parse tree\n     */\n    enterLengthTwoOptionalDimension?: (ctx: LengthTwoOptionalDimensionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.lengthTwoOptionalDimension`.\n     * @param ctx the parse tree\n     */\n    exitLengthTwoOptionalDimension?: (ctx: LengthTwoOptionalDimensionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.uidList`.\n     * @param ctx the parse tree\n     */\n    enterUidList?: (ctx: UidListContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.uidList`.\n     * @param ctx the parse tree\n     */\n    exitUidList?: (ctx: UidListContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.fullColumnNameList`.\n     * @param ctx the parse tree\n     */\n    enterFullColumnNameList?: (ctx: FullColumnNameListContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.fullColumnNameList`.\n     * @param ctx the parse tree\n     */\n    exitFullColumnNameList?: (ctx: FullColumnNameListContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.tables`.\n     * @param ctx the parse tree\n     */\n    enterTables?: (ctx: TablesContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.tables`.\n     * @param ctx the parse tree\n     */\n    exitTables?: (ctx: TablesContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.indexColumnNames`.\n     * @param ctx the parse tree\n     */\n    enterIndexColumnNames?: (ctx: IndexColumnNamesContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.indexColumnNames`.\n     * @param ctx the parse tree\n     */\n    exitIndexColumnNames?: (ctx: IndexColumnNamesContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.expressions`.\n     * @param ctx the parse tree\n     */\n    enterExpressions?: (ctx: ExpressionsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.expressions`.\n     * @param ctx the parse tree\n     */\n    exitExpressions?: (ctx: ExpressionsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.expressionsWithDefaults`.\n     * @param ctx the parse tree\n     */\n    enterExpressionsWithDefaults?: (ctx: ExpressionsWithDefaultsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.expressionsWithDefaults`.\n     * @param ctx the parse tree\n     */\n    exitExpressionsWithDefaults?: (ctx: ExpressionsWithDefaultsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.constants`.\n     * @param ctx the parse tree\n     */\n    enterConstants?: (ctx: ConstantsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.constants`.\n     * @param ctx the parse tree\n     */\n    exitConstants?: (ctx: ConstantsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.simpleStrings`.\n     * @param ctx the parse tree\n     */\n    enterSimpleStrings?: (ctx: SimpleStringsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.simpleStrings`.\n     * @param ctx the parse tree\n     */\n    exitSimpleStrings?: (ctx: SimpleStringsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.userVariables`.\n     * @param ctx the parse tree\n     */\n    enterUserVariables?: (ctx: UserVariablesContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.userVariables`.\n     * @param ctx the parse tree\n     */\n    exitUserVariables?: (ctx: UserVariablesContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.defaultValue`.\n     * @param ctx the parse tree\n     */\n    enterDefaultValue?: (ctx: DefaultValueContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.defaultValue`.\n     * @param ctx the parse tree\n     */\n    exitDefaultValue?: (ctx: DefaultValueContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.currentTimestamp`.\n     * @param ctx the parse tree\n     */\n    enterCurrentTimestamp?: (ctx: CurrentTimestampContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.currentTimestamp`.\n     * @param ctx the parse tree\n     */\n    exitCurrentTimestamp?: (ctx: CurrentTimestampContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.expressionOrDefault`.\n     * @param ctx the parse tree\n     */\n    enterExpressionOrDefault?: (ctx: ExpressionOrDefaultContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.expressionOrDefault`.\n     * @param ctx the parse tree\n     */\n    exitExpressionOrDefault?: (ctx: ExpressionOrDefaultContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.ifExists`.\n     * @param ctx the parse tree\n     */\n    enterIfExists?: (ctx: IfExistsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.ifExists`.\n     * @param ctx the parse tree\n     */\n    exitIfExists?: (ctx: IfExistsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.ifNotExists`.\n     * @param ctx the parse tree\n     */\n    enterIfNotExists?: (ctx: IfNotExistsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.ifNotExists`.\n     * @param ctx the parse tree\n     */\n    exitIfNotExists?: (ctx: IfNotExistsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.orReplace`.\n     * @param ctx the parse tree\n     */\n    enterOrReplace?: (ctx: OrReplaceContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.orReplace`.\n     * @param ctx the parse tree\n     */\n    exitOrReplace?: (ctx: OrReplaceContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.waitNowaitClause`.\n     * @param ctx the parse tree\n     */\n    enterWaitNowaitClause?: (ctx: WaitNowaitClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.waitNowaitClause`.\n     * @param ctx the parse tree\n     */\n    exitWaitNowaitClause?: (ctx: WaitNowaitClauseContext) => void;\n    /**\n     * Enter a parse tree produced by the `specificFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    enterSpecificFunctionCall?: (ctx: SpecificFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `specificFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    exitSpecificFunctionCall?: (ctx: SpecificFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `aggregateFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    enterAggregateFunctionCall?: (ctx: AggregateFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `aggregateFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    exitAggregateFunctionCall?: (ctx: AggregateFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `nonAggregateFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    enterNonAggregateFunctionCall?: (ctx: NonAggregateFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `nonAggregateFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    exitNonAggregateFunctionCall?: (ctx: NonAggregateFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `scalarFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    enterScalarFunctionCall?: (ctx: ScalarFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `scalarFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    exitScalarFunctionCall?: (ctx: ScalarFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `udfFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    enterUdfFunctionCall?: (ctx: UdfFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `udfFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    exitUdfFunctionCall?: (ctx: UdfFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `passwordFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    enterPasswordFunctionCall?: (ctx: PasswordFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `passwordFunctionCall`\n     * labeled alternative in `MySqlParser.functionCall`.\n     * @param ctx the parse tree\n     */\n    exitPasswordFunctionCall?: (ctx: PasswordFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `simpleFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterSimpleFunctionCall?: (ctx: SimpleFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `simpleFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitSimpleFunctionCall?: (ctx: SimpleFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `currentUser`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterCurrentUser?: (ctx: CurrentUserContext) => void;\n    /**\n     * Exit a parse tree produced by the `currentUser`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitCurrentUser?: (ctx: CurrentUserContext) => void;\n    /**\n     * Enter a parse tree produced by the `dataTypeFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterDataTypeFunctionCall?: (ctx: DataTypeFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `dataTypeFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitDataTypeFunctionCall?: (ctx: DataTypeFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `valuesFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterValuesFunctionCall?: (ctx: ValuesFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `valuesFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitValuesFunctionCall?: (ctx: ValuesFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `caseExpressionFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterCaseExpressionFunctionCall?: (ctx: CaseExpressionFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `caseExpressionFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitCaseExpressionFunctionCall?: (ctx: CaseExpressionFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `caseFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterCaseFunctionCall?: (ctx: CaseFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `caseFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitCaseFunctionCall?: (ctx: CaseFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `charFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterCharFunctionCall?: (ctx: CharFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `charFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitCharFunctionCall?: (ctx: CharFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `positionFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterPositionFunctionCall?: (ctx: PositionFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `positionFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitPositionFunctionCall?: (ctx: PositionFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `substrFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterSubstrFunctionCall?: (ctx: SubstrFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `substrFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitSubstrFunctionCall?: (ctx: SubstrFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `trimFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterTrimFunctionCall?: (ctx: TrimFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `trimFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitTrimFunctionCall?: (ctx: TrimFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `weightFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterWeightFunctionCall?: (ctx: WeightFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `weightFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitWeightFunctionCall?: (ctx: WeightFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `extractFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterExtractFunctionCall?: (ctx: ExtractFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `extractFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitExtractFunctionCall?: (ctx: ExtractFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `getFormatFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterGetFormatFunctionCall?: (ctx: GetFormatFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `getFormatFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitGetFormatFunctionCall?: (ctx: GetFormatFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by the `jsonValueFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    enterJsonValueFunctionCall?: (ctx: JsonValueFunctionCallContext) => void;\n    /**\n     * Exit a parse tree produced by the `jsonValueFunctionCall`\n     * labeled alternative in `MySqlParser.specificFunction`.\n     * @param ctx the parse tree\n     */\n    exitJsonValueFunctionCall?: (ctx: JsonValueFunctionCallContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.caseFuncAlternative`.\n     * @param ctx the parse tree\n     */\n    enterCaseFuncAlternative?: (ctx: CaseFuncAlternativeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.caseFuncAlternative`.\n     * @param ctx the parse tree\n     */\n    exitCaseFuncAlternative?: (ctx: CaseFuncAlternativeContext) => void;\n    /**\n     * Enter a parse tree produced by the `levelWeightList`\n     * labeled alternative in `MySqlParser.levelsInWeightString`.\n     * @param ctx the parse tree\n     */\n    enterLevelWeightList?: (ctx: LevelWeightListContext) => void;\n    /**\n     * Exit a parse tree produced by the `levelWeightList`\n     * labeled alternative in `MySqlParser.levelsInWeightString`.\n     * @param ctx the parse tree\n     */\n    exitLevelWeightList?: (ctx: LevelWeightListContext) => void;\n    /**\n     * Enter a parse tree produced by the `levelWeightRange`\n     * labeled alternative in `MySqlParser.levelsInWeightString`.\n     * @param ctx the parse tree\n     */\n    enterLevelWeightRange?: (ctx: LevelWeightRangeContext) => void;\n    /**\n     * Exit a parse tree produced by the `levelWeightRange`\n     * labeled alternative in `MySqlParser.levelsInWeightString`.\n     * @param ctx the parse tree\n     */\n    exitLevelWeightRange?: (ctx: LevelWeightRangeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.levelInWeightListElement`.\n     * @param ctx the parse tree\n     */\n    enterLevelInWeightListElement?: (ctx: LevelInWeightListElementContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.levelInWeightListElement`.\n     * @param ctx the parse tree\n     */\n    exitLevelInWeightListElement?: (ctx: LevelInWeightListElementContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.aggregateWindowedFunction`.\n     * @param ctx the parse tree\n     */\n    enterAggregateWindowedFunction?: (ctx: AggregateWindowedFunctionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.aggregateWindowedFunction`.\n     * @param ctx the parse tree\n     */\n    exitAggregateWindowedFunction?: (ctx: AggregateWindowedFunctionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.nonAggregateWindowedFunction`.\n     * @param ctx the parse tree\n     */\n    enterNonAggregateWindowedFunction?: (ctx: NonAggregateWindowedFunctionContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.nonAggregateWindowedFunction`.\n     * @param ctx the parse tree\n     */\n    exitNonAggregateWindowedFunction?: (ctx: NonAggregateWindowedFunctionContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.overClause`.\n     * @param ctx the parse tree\n     */\n    enterOverClause?: (ctx: OverClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.overClause`.\n     * @param ctx the parse tree\n     */\n    exitOverClause?: (ctx: OverClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.windowSpec`.\n     * @param ctx the parse tree\n     */\n    enterWindowSpec?: (ctx: WindowSpecContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.windowSpec`.\n     * @param ctx the parse tree\n     */\n    exitWindowSpec?: (ctx: WindowSpecContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.windowName`.\n     * @param ctx the parse tree\n     */\n    enterWindowName?: (ctx: WindowNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.windowName`.\n     * @param ctx the parse tree\n     */\n    exitWindowName?: (ctx: WindowNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.frameClause`.\n     * @param ctx the parse tree\n     */\n    enterFrameClause?: (ctx: FrameClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.frameClause`.\n     * @param ctx the parse tree\n     */\n    exitFrameClause?: (ctx: FrameClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.frameUnits`.\n     * @param ctx the parse tree\n     */\n    enterFrameUnits?: (ctx: FrameUnitsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.frameUnits`.\n     * @param ctx the parse tree\n     */\n    exitFrameUnits?: (ctx: FrameUnitsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.frameExtent`.\n     * @param ctx the parse tree\n     */\n    enterFrameExtent?: (ctx: FrameExtentContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.frameExtent`.\n     * @param ctx the parse tree\n     */\n    exitFrameExtent?: (ctx: FrameExtentContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.frameBetween`.\n     * @param ctx the parse tree\n     */\n    enterFrameBetween?: (ctx: FrameBetweenContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.frameBetween`.\n     * @param ctx the parse tree\n     */\n    exitFrameBetween?: (ctx: FrameBetweenContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.frameRange`.\n     * @param ctx the parse tree\n     */\n    enterFrameRange?: (ctx: FrameRangeContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.frameRange`.\n     * @param ctx the parse tree\n     */\n    exitFrameRange?: (ctx: FrameRangeContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.partitionClause`.\n     * @param ctx the parse tree\n     */\n    enterPartitionClause?: (ctx: PartitionClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.partitionClause`.\n     * @param ctx the parse tree\n     */\n    exitPartitionClause?: (ctx: PartitionClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.scalarFunctionName`.\n     * @param ctx the parse tree\n     */\n    enterScalarFunctionName?: (ctx: ScalarFunctionNameContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.scalarFunctionName`.\n     * @param ctx the parse tree\n     */\n    exitScalarFunctionName?: (ctx: ScalarFunctionNameContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.passwordFunctionClause`.\n     * @param ctx the parse tree\n     */\n    enterPasswordFunctionClause?: (ctx: PasswordFunctionClauseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.passwordFunctionClause`.\n     * @param ctx the parse tree\n     */\n    exitPasswordFunctionClause?: (ctx: PasswordFunctionClauseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.functionArgs`.\n     * @param ctx the parse tree\n     */\n    enterFunctionArgs?: (ctx: FunctionArgsContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.functionArgs`.\n     * @param ctx the parse tree\n     */\n    exitFunctionArgs?: (ctx: FunctionArgsContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.functionArg`.\n     * @param ctx the parse tree\n     */\n    enterFunctionArg?: (ctx: FunctionArgContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.functionArg`.\n     * @param ctx the parse tree\n     */\n    exitFunctionArg?: (ctx: FunctionArgContext) => void;\n    /**\n     * Enter a parse tree produced by the `isExpression`\n     * labeled alternative in `MySqlParser.expression`.\n     * @param ctx the parse tree\n     */\n    enterIsExpression?: (ctx: IsExpressionContext) => void;\n    /**\n     * Exit a parse tree produced by the `isExpression`\n     * labeled alternative in `MySqlParser.expression`.\n     * @param ctx the parse tree\n     */\n    exitIsExpression?: (ctx: IsExpressionContext) => void;\n    /**\n     * Enter a parse tree produced by the `notExpression`\n     * labeled alternative in `MySqlParser.expression`.\n     * @param ctx the parse tree\n     */\n    enterNotExpression?: (ctx: NotExpressionContext) => void;\n    /**\n     * Exit a parse tree produced by the `notExpression`\n     * labeled alternative in `MySqlParser.expression`.\n     * @param ctx the parse tree\n     */\n    exitNotExpression?: (ctx: NotExpressionContext) => void;\n    /**\n     * Enter a parse tree produced by the `logicalExpression`\n     * labeled alternative in `MySqlParser.expression`.\n     * @param ctx the parse tree\n     */\n    enterLogicalExpression?: (ctx: LogicalExpressionContext) => void;\n    /**\n     * Exit a parse tree produced by the `logicalExpression`\n     * labeled alternative in `MySqlParser.expression`.\n     * @param ctx the parse tree\n     */\n    exitLogicalExpression?: (ctx: LogicalExpressionContext) => void;\n    /**\n     * Enter a parse tree produced by the `predicateExpression`\n     * labeled alternative in `MySqlParser.expression`.\n     * @param ctx the parse tree\n     */\n    enterPredicateExpression?: (ctx: PredicateExpressionContext) => void;\n    /**\n     * Exit a parse tree produced by the `predicateExpression`\n     * labeled alternative in `MySqlParser.expression`.\n     * @param ctx the parse tree\n     */\n    exitPredicateExpression?: (ctx: PredicateExpressionContext) => void;\n    /**\n     * Enter a parse tree produced by the `soundsLikePredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    enterSoundsLikePredicate?: (ctx: SoundsLikePredicateContext) => void;\n    /**\n     * Exit a parse tree produced by the `soundsLikePredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    exitSoundsLikePredicate?: (ctx: SoundsLikePredicateContext) => void;\n    /**\n     * Enter a parse tree produced by the `expressionAtomPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    enterExpressionAtomPredicate?: (ctx: ExpressionAtomPredicateContext) => void;\n    /**\n     * Exit a parse tree produced by the `expressionAtomPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    exitExpressionAtomPredicate?: (ctx: ExpressionAtomPredicateContext) => void;\n    /**\n     * Enter a parse tree produced by the `subqueryComparisonPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    enterSubqueryComparisonPredicate?: (ctx: SubqueryComparisonPredicateContext) => void;\n    /**\n     * Exit a parse tree produced by the `subqueryComparisonPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    exitSubqueryComparisonPredicate?: (ctx: SubqueryComparisonPredicateContext) => void;\n    /**\n     * Enter a parse tree produced by the `jsonMemberOfPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    enterJsonMemberOfPredicate?: (ctx: JsonMemberOfPredicateContext) => void;\n    /**\n     * Exit a parse tree produced by the `jsonMemberOfPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    exitJsonMemberOfPredicate?: (ctx: JsonMemberOfPredicateContext) => void;\n    /**\n     * Enter a parse tree produced by the `binaryComparisonPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    enterBinaryComparisonPredicate?: (ctx: BinaryComparisonPredicateContext) => void;\n    /**\n     * Exit a parse tree produced by the `binaryComparisonPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    exitBinaryComparisonPredicate?: (ctx: BinaryComparisonPredicateContext) => void;\n    /**\n     * Enter a parse tree produced by the `inPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    enterInPredicate?: (ctx: InPredicateContext) => void;\n    /**\n     * Exit a parse tree produced by the `inPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    exitInPredicate?: (ctx: InPredicateContext) => void;\n    /**\n     * Enter a parse tree produced by the `betweenPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    enterBetweenPredicate?: (ctx: BetweenPredicateContext) => void;\n    /**\n     * Exit a parse tree produced by the `betweenPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    exitBetweenPredicate?: (ctx: BetweenPredicateContext) => void;\n    /**\n     * Enter a parse tree produced by the `isNullPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    enterIsNullPredicate?: (ctx: IsNullPredicateContext) => void;\n    /**\n     * Exit a parse tree produced by the `isNullPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    exitIsNullPredicate?: (ctx: IsNullPredicateContext) => void;\n    /**\n     * Enter a parse tree produced by the `likePredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    enterLikePredicate?: (ctx: LikePredicateContext) => void;\n    /**\n     * Exit a parse tree produced by the `likePredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    exitLikePredicate?: (ctx: LikePredicateContext) => void;\n    /**\n     * Enter a parse tree produced by the `regexpPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    enterRegexpPredicate?: (ctx: RegexpPredicateContext) => void;\n    /**\n     * Exit a parse tree produced by the `regexpPredicate`\n     * labeled alternative in `MySqlParser.predicate`.\n     * @param ctx the parse tree\n     */\n    exitRegexpPredicate?: (ctx: RegexpPredicateContext) => void;\n    /**\n     * Enter a parse tree produced by the `unaryExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterUnaryExpressionAtom?: (ctx: UnaryExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `unaryExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitUnaryExpressionAtom?: (ctx: UnaryExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `collateExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterCollateExpressionAtom?: (ctx: CollateExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `collateExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitCollateExpressionAtom?: (ctx: CollateExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `variableAssignExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterVariableAssignExpressionAtom?: (ctx: VariableAssignExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `variableAssignExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitVariableAssignExpressionAtom?: (ctx: VariableAssignExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `mysqlVariableExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterMysqlVariableExpressionAtom?: (ctx: MysqlVariableExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `mysqlVariableExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitMysqlVariableExpressionAtom?: (ctx: MysqlVariableExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `nestedExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterNestedExpressionAtom?: (ctx: NestedExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `nestedExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitNestedExpressionAtom?: (ctx: NestedExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `nestedRowExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterNestedRowExpressionAtom?: (ctx: NestedRowExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `nestedRowExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitNestedRowExpressionAtom?: (ctx: NestedRowExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `mathExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterMathExpressionAtom?: (ctx: MathExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `mathExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitMathExpressionAtom?: (ctx: MathExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `existsExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterExistsExpressionAtom?: (ctx: ExistsExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `existsExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitExistsExpressionAtom?: (ctx: ExistsExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `intervalExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterIntervalExpressionAtom?: (ctx: IntervalExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `intervalExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitIntervalExpressionAtom?: (ctx: IntervalExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `jsonExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterJsonExpressionAtom?: (ctx: JsonExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `jsonExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitJsonExpressionAtom?: (ctx: JsonExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `subqueryExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterSubqueryExpressionAtom?: (ctx: SubqueryExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `subqueryExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitSubqueryExpressionAtom?: (ctx: SubqueryExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `constantExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterConstantExpressionAtom?: (ctx: ConstantExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `constantExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitConstantExpressionAtom?: (ctx: ConstantExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `functionCallExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterFunctionCallExpressionAtom?: (ctx: FunctionCallExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `functionCallExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitFunctionCallExpressionAtom?: (ctx: FunctionCallExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `binaryExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterBinaryExpressionAtom?: (ctx: BinaryExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `binaryExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitBinaryExpressionAtom?: (ctx: BinaryExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `fullColumnNameExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterFullColumnNameExpressionAtom?: (ctx: FullColumnNameExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `fullColumnNameExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitFullColumnNameExpressionAtom?: (ctx: FullColumnNameExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by the `bitExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    enterBitExpressionAtom?: (ctx: BitExpressionAtomContext) => void;\n    /**\n     * Exit a parse tree produced by the `bitExpressionAtom`\n     * labeled alternative in `MySqlParser.expressionAtom`.\n     * @param ctx the parse tree\n     */\n    exitBitExpressionAtom?: (ctx: BitExpressionAtomContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.unaryOperator`.\n     * @param ctx the parse tree\n     */\n    enterUnaryOperator?: (ctx: UnaryOperatorContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.unaryOperator`.\n     * @param ctx the parse tree\n     */\n    exitUnaryOperator?: (ctx: UnaryOperatorContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.comparisonOperator`.\n     * @param ctx the parse tree\n     */\n    enterComparisonOperator?: (ctx: ComparisonOperatorContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.comparisonOperator`.\n     * @param ctx the parse tree\n     */\n    exitComparisonOperator?: (ctx: ComparisonOperatorContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.logicalOperator`.\n     * @param ctx the parse tree\n     */\n    enterLogicalOperator?: (ctx: LogicalOperatorContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.logicalOperator`.\n     * @param ctx the parse tree\n     */\n    exitLogicalOperator?: (ctx: LogicalOperatorContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.bitOperator`.\n     * @param ctx the parse tree\n     */\n    enterBitOperator?: (ctx: BitOperatorContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.bitOperator`.\n     * @param ctx the parse tree\n     */\n    exitBitOperator?: (ctx: BitOperatorContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.multOperator`.\n     * @param ctx the parse tree\n     */\n    enterMultOperator?: (ctx: MultOperatorContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.multOperator`.\n     * @param ctx the parse tree\n     */\n    exitMultOperator?: (ctx: MultOperatorContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.addOperator`.\n     * @param ctx the parse tree\n     */\n    enterAddOperator?: (ctx: AddOperatorContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.addOperator`.\n     * @param ctx the parse tree\n     */\n    exitAddOperator?: (ctx: AddOperatorContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.jsonOperator`.\n     * @param ctx the parse tree\n     */\n    enterJsonOperator?: (ctx: JsonOperatorContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.jsonOperator`.\n     * @param ctx the parse tree\n     */\n    exitJsonOperator?: (ctx: JsonOperatorContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.charsetNameBase`.\n     * @param ctx the parse tree\n     */\n    enterCharsetNameBase?: (ctx: CharsetNameBaseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.charsetNameBase`.\n     * @param ctx the parse tree\n     */\n    exitCharsetNameBase?: (ctx: CharsetNameBaseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.transactionLevelBase`.\n     * @param ctx the parse tree\n     */\n    enterTransactionLevelBase?: (ctx: TransactionLevelBaseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.transactionLevelBase`.\n     * @param ctx the parse tree\n     */\n    exitTransactionLevelBase?: (ctx: TransactionLevelBaseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.privilegesBase`.\n     * @param ctx the parse tree\n     */\n    enterPrivilegesBase?: (ctx: PrivilegesBaseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.privilegesBase`.\n     * @param ctx the parse tree\n     */\n    exitPrivilegesBase?: (ctx: PrivilegesBaseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.intervalTypeBase`.\n     * @param ctx the parse tree\n     */\n    enterIntervalTypeBase?: (ctx: IntervalTypeBaseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.intervalTypeBase`.\n     * @param ctx the parse tree\n     */\n    exitIntervalTypeBase?: (ctx: IntervalTypeBaseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.dataTypeBase`.\n     * @param ctx the parse tree\n     */\n    enterDataTypeBase?: (ctx: DataTypeBaseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.dataTypeBase`.\n     * @param ctx the parse tree\n     */\n    exitDataTypeBase?: (ctx: DataTypeBaseContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.keywordsCanBeId`.\n     * @param ctx the parse tree\n     */\n    enterKeywordsCanBeId?: (ctx: KeywordsCanBeIdContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.keywordsCanBeId`.\n     * @param ctx the parse tree\n     */\n    exitKeywordsCanBeId?: (ctx: KeywordsCanBeIdContext) => void;\n    /**\n     * Enter a parse tree produced by `MySqlParser.functionNameBase`.\n     * @param ctx the parse tree\n     */\n    enterFunctionNameBase?: (ctx: FunctionNameBaseContext) => void;\n    /**\n     * Exit a parse tree produced by `MySqlParser.functionNameBase`.\n     * @param ctx the parse tree\n     */\n    exitFunctionNameBase?: (ctx: FunctionNameBaseContext) => void;\n\n    visitTerminal(node: TerminalNode): void {}\n    visitErrorNode(node: ErrorNode): void {}\n    enterEveryRule(node: ParserRuleContext): void {}\n    exitEveryRule(node: ParserRuleContext): void {}\n}\n\n"]}