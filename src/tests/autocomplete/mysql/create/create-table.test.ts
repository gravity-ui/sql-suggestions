import {parseMySqlQueryWithCursor} from '../../../test-lib';
import {KeywordSuggestion} from '../../../../autocomplete/autocomplete-types';

test('should suggest properly after TABLE', () => {
    const autocompleteResult = parseMySqlQueryWithCursor('CREATE TABLE |');

    const keywordsSuggestion: KeywordSuggestion[] = [{value: 'IF'}];
    expect(autocompleteResult.suggestKeywords).toEqual(keywordsSuggestion);
});

test('should suggest properly after table name', () => {
    const autocompleteResult = parseMySqlQueryWithCursor('CREATE TABLE test_table |');

    const keywordsSuggestion: KeywordSuggestion[] = [
        {value: 'SELECT'},
        {value: 'AS'},
        {value: 'IGNORE'},
        {value: 'REPLACE'},
        {value: 'PARTITION'},
        {value: 'ENGINE'},
        {value: 'AUTOEXTEND_SIZE'},
        {value: 'AUTO_INCREMENT'},
        {value: 'AVG_ROW_LENGTH'},
        {value: 'DEFAULT'},
        {value: 'CHARACTER'},
        {value: 'CHAR'},
        {value: 'CHECKSUM'},
        {value: 'PAGE_CHECKSUM'},
        {value: 'COLLATE'},
        {value: 'COMMENT'},
        {value: 'COMPRESSION'},
        {value: 'CONNECTION'},
        {value: 'INDEX'},
        {value: 'DATA'},
        {value: 'DELAY_KEY_WRITE'},
        {value: 'ENCRYPTION'},
        {value: 'PAGE_COMPRESSED'},
        {value: 'PAGE_COMPRESSION_LEVEL'},
        {value: 'ENCRYPTION_KEY_ID'},
        {value: 'INSERT_METHOD'},
        {value: 'KEY_BLOCK_SIZE'},
        {value: 'MAX_ROWS'},
        {value: 'MIN_ROWS'},
        {value: 'PACK_KEYS'},
        {value: 'PASSWORD'},
        {value: 'ROW_FORMAT'},
        {value: 'START'},
        {value: 'STATS_AUTO_RECALC'},
        {value: 'STATS_PERSISTENT'},
        {value: 'STATS_SAMPLE_PAGES'},
        {value: 'TABLESPACE'},
        {value: 'TABLE_TYPE'},
        {value: 'STORAGE'},
        {value: 'TRANSACTIONAL'},
        {value: 'UNION'},
        {value: 'LIKE'},
    ];
    expect(autocompleteResult.suggestKeywords).toEqual(keywordsSuggestion);
});

test('should suggest properly after the first column', () => {
    const autocompleteResult = parseMySqlQueryWithCursor('CREATE TABLE test_table (test_column |');

    const keywordsSuggestion: KeywordSuggestion[] = [
        {value: 'CHARACTER'},
        {value: 'CHAR'},
        {value: 'VARCHAR'},
        {value: 'NVARCHAR'},
        {value: 'LONG'},
        {value: 'TINYTEXT'},
        {value: 'TEXT'},
        {value: 'MEDIUMTEXT'},
        {value: 'LONGTEXT'},
        {value: 'NCHAR'},
        {value: 'NATIONAL'},
        {value: 'TINYINT'},
        {value: 'SMALLINT'},
        {value: 'MEDIUMINT'},
        {value: 'MIDDLEINT'},
        {value: 'INT'},
        {value: 'INT1'},
        {value: 'INT2'},
        {value: 'INT3'},
        {value: 'INT4'},
        {value: 'INT8'},
        {value: 'INTEGER'},
        {value: 'BIGINT'},
        {value: 'REAL'},
        {value: 'DOUBLE'},
        {value: 'FLOAT'},
        {value: 'FLOAT4'},
        {value: 'FLOAT8'},
        {value: 'DECIMAL'},
        {value: 'DEC'},
        {value: 'NUMERIC'},
        {value: 'FIXED'},
        {value: 'DATE'},
        {value: 'TINYBLOB'},
        {value: 'MEDIUMBLOB'},
        {value: 'LONGBLOB'},
        {value: 'SERIAL'},
        {value: 'BOOL'},
        {value: 'BOOLEAN'},
        {value: 'TIME'},
        {value: 'TIMESTAMP'},
        {value: 'DATETIME'},
        {value: 'YEAR'},
        {value: 'BINARY'},
        {value: 'VARBINARY'},
        {value: 'BLOB'},
        {value: 'BIT'},
        {value: 'SET'},
        {value: 'ENUM'},
        {value: 'JSON'},
        {value: 'GEOMETRYCOLLECTION'},
        {value: 'GEOMCOLLECTION'},
        {value: 'GEOMETRY'},
        {value: 'LINESTRING'},
        {value: 'MULTILINESTRING'},
        {value: 'MULTIPOINT'},
        {value: 'MULTIPOLYGON'},
        {value: 'POINT'},
        {value: 'POLYGON'},
    ];
    expect(autocompleteResult.suggestKeywords).toEqual(keywordsSuggestion);
});

test('should suggest properly after the second column', () => {
    const autocompleteResult = parseMySqlQueryWithCursor(
        'CREATE TABLE test_table (test_column TEXT, test_column_2 |',
    );

    const keywordsSuggestion: KeywordSuggestion[] = [
        {value: 'CHARACTER'},
        {value: 'CHAR'},
        {value: 'VARCHAR'},
        {value: 'NVARCHAR'},
        {value: 'LONG'},
        {value: 'TINYTEXT'},
        {value: 'TEXT'},
        {value: 'MEDIUMTEXT'},
        {value: 'LONGTEXT'},
        {value: 'NCHAR'},
        {value: 'NATIONAL'},
        {value: 'TINYINT'},
        {value: 'SMALLINT'},
        {value: 'MEDIUMINT'},
        {value: 'MIDDLEINT'},
        {value: 'INT'},
        {value: 'INT1'},
        {value: 'INT2'},
        {value: 'INT3'},
        {value: 'INT4'},
        {value: 'INT8'},
        {value: 'INTEGER'},
        {value: 'BIGINT'},
        {value: 'REAL'},
        {value: 'DOUBLE'},
        {value: 'FLOAT'},
        {value: 'FLOAT4'},
        {value: 'FLOAT8'},
        {value: 'DECIMAL'},
        {value: 'DEC'},
        {value: 'NUMERIC'},
        {value: 'FIXED'},
        {value: 'DATE'},
        {value: 'TINYBLOB'},
        {value: 'MEDIUMBLOB'},
        {value: 'LONGBLOB'},
        {value: 'SERIAL'},
        {value: 'BOOL'},
        {value: 'BOOLEAN'},
        {value: 'TIME'},
        {value: 'TIMESTAMP'},
        {value: 'DATETIME'},
        {value: 'YEAR'},
        {value: 'BINARY'},
        {value: 'VARBINARY'},
        {value: 'BLOB'},
        {value: 'BIT'},
        {value: 'SET'},
        {value: 'ENUM'},
        {value: 'JSON'},
        {value: 'GEOMETRYCOLLECTION'},
        {value: 'GEOMCOLLECTION'},
        {value: 'GEOMETRY'},
        {value: 'LINESTRING'},
        {value: 'MULTILINESTRING'},
        {value: 'MULTIPOINT'},
        {value: 'MULTIPOLYGON'},
        {value: 'POINT'},
        {value: 'POLYGON'},
    ];
    expect(autocompleteResult.suggestKeywords).toEqual(keywordsSuggestion);
});

test('should suggest properly after the columns', () => {
    const autocompleteResult = parseMySqlQueryWithCursor(
        'CREATE TABLE test_table (test_column TEXT, test_column_2 TEXT) |',
    );

    const keywordsSuggestion: KeywordSuggestion[] = [
        {value: 'PARTITION'},
        {value: 'ENGINE'},
        {value: 'AUTOEXTEND_SIZE'},
        {value: 'AUTO_INCREMENT'},
        {value: 'AVG_ROW_LENGTH'},
        {value: 'DEFAULT'},
        {value: 'CHARACTER'},
        {value: 'CHAR'},
        {value: 'CHECKSUM'},
        {value: 'PAGE_CHECKSUM'},
        {value: 'COLLATE'},
        {value: 'COMMENT'},
        {value: 'COMPRESSION'},
        {value: 'CONNECTION'},
        {value: 'INDEX'},
        {value: 'DATA'},
        {value: 'DELAY_KEY_WRITE'},
        {value: 'ENCRYPTION'},
        {value: 'PAGE_COMPRESSED'},
        {value: 'PAGE_COMPRESSION_LEVEL'},
        {value: 'ENCRYPTION_KEY_ID'},
        {value: 'INSERT_METHOD'},
        {value: 'KEY_BLOCK_SIZE'},
        {value: 'MAX_ROWS'},
        {value: 'MIN_ROWS'},
        {value: 'PACK_KEYS'},
        {value: 'PASSWORD'},
        {value: 'ROW_FORMAT'},
        {value: 'START'},
        {value: 'STATS_AUTO_RECALC'},
        {value: 'STATS_PERSISTENT'},
        {value: 'STATS_SAMPLE_PAGES'},
        {value: 'TABLESPACE'},
        {value: 'TABLE_TYPE'},
        {value: 'STORAGE'},
        {value: 'TRANSACTIONAL'},
        {value: 'UNION'},
        {value: 'SELECT'},
        {value: 'AS'},
        {value: 'IGNORE'},
        {value: 'REPLACE'},
    ];
    expect(autocompleteResult.suggestKeywords).toEqual(keywordsSuggestion);
});
