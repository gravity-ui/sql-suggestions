////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/mysql/grammar/MySqlParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { MySqlParserVisitor } from "./MySqlParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class MySqlParser extends antlr.Parser {
    public static readonly SPACE = 1;
    public static readonly SPEC_MYSQL_COMMENT = 2;
    public static readonly COMMENT_INPUT = 3;
    public static readonly LINE_COMMENT = 4;
    public static readonly ADD = 5;
    public static readonly ALL = 6;
    public static readonly ALTER = 7;
    public static readonly ALWAYS = 8;
    public static readonly ANALYZE = 9;
    public static readonly AND = 10;
    public static readonly ARRAY = 11;
    public static readonly AS = 12;
    public static readonly ASC = 13;
    public static readonly ATTRIBUTE = 14;
    public static readonly BEFORE = 15;
    public static readonly BETWEEN = 16;
    public static readonly BOTH = 17;
    public static readonly BUCKETS = 18;
    public static readonly BY = 19;
    public static readonly CALL = 20;
    public static readonly CASCADE = 21;
    public static readonly CASE = 22;
    public static readonly CAST = 23;
    public static readonly CHANGE = 24;
    public static readonly CHARACTER = 25;
    public static readonly CHECK = 26;
    public static readonly COLLATE = 27;
    public static readonly COLUMN = 28;
    public static readonly CONDITION = 29;
    public static readonly CONSTRAINT = 30;
    public static readonly CONTINUE = 31;
    public static readonly CONVERT = 32;
    public static readonly CREATE = 33;
    public static readonly CROSS = 34;
    public static readonly CURRENT = 35;
    public static readonly CURRENT_ROLE = 36;
    public static readonly CURRENT_USER = 37;
    public static readonly CURSOR = 38;
    public static readonly DATABASE = 39;
    public static readonly DATABASES = 40;
    public static readonly DECLARE = 41;
    public static readonly DEFAULT = 42;
    public static readonly DELAYED = 43;
    public static readonly DELETE = 44;
    public static readonly DESC = 45;
    public static readonly DESCRIBE = 46;
    public static readonly DETERMINISTIC = 47;
    public static readonly DIAGNOSTICS = 48;
    public static readonly DISTINCT = 49;
    public static readonly DISTINCTROW = 50;
    public static readonly DROP = 51;
    public static readonly EACH = 52;
    public static readonly ELSE = 53;
    public static readonly ELSEIF = 54;
    public static readonly EMPTY = 55;
    public static readonly ENCLOSED = 56;
    public static readonly ENFORCED = 57;
    public static readonly ESCAPED = 58;
    public static readonly EXCEPT = 59;
    public static readonly EXISTS = 60;
    public static readonly EXIT = 61;
    public static readonly EXPLAIN = 62;
    public static readonly FALSE = 63;
    public static readonly FETCH = 64;
    public static readonly FOR = 65;
    public static readonly FORCE = 66;
    public static readonly FOREIGN = 67;
    public static readonly FROM = 68;
    public static readonly FULLTEXT = 69;
    public static readonly GENERATED = 70;
    public static readonly GET = 71;
    public static readonly GRANT = 72;
    public static readonly GROUP = 73;
    public static readonly HAVING = 74;
    public static readonly HIGH_PRIORITY = 75;
    public static readonly HISTOGRAM = 76;
    public static readonly IF = 77;
    public static readonly IGNORE = 78;
    public static readonly IGNORED = 79;
    public static readonly IN = 80;
    public static readonly INDEX = 81;
    public static readonly INFILE = 82;
    public static readonly INNER = 83;
    public static readonly INOUT = 84;
    public static readonly INSERT = 85;
    public static readonly INTERVAL = 86;
    public static readonly INTO = 87;
    public static readonly IS = 88;
    public static readonly ITERATE = 89;
    public static readonly JOIN = 90;
    public static readonly KEY = 91;
    public static readonly KEYS = 92;
    public static readonly KILL = 93;
    public static readonly LATERAL = 94;
    public static readonly LEADING = 95;
    public static readonly LEAVE = 96;
    public static readonly LEFT = 97;
    public static readonly LIKE = 98;
    public static readonly LIMIT = 99;
    public static readonly LINEAR = 100;
    public static readonly LINES = 101;
    public static readonly LOAD = 102;
    public static readonly LOCK = 103;
    public static readonly LOCKED = 104;
    public static readonly LOOP = 105;
    public static readonly LOW_PRIORITY = 106;
    public static readonly MASTER_BIND = 107;
    public static readonly MASTER_SSL_VERIFY_SERVER_CERT = 108;
    public static readonly MATCH = 109;
    public static readonly MAXVALUE = 110;
    public static readonly MINVALUE = 111;
    public static readonly MODIFIES = 112;
    public static readonly NATURAL = 113;
    public static readonly NOT = 114;
    public static readonly NO_WRITE_TO_BINLOG = 115;
    public static readonly NULL_LITERAL = 116;
    public static readonly NUMBER = 117;
    public static readonly ON = 118;
    public static readonly OPTIMIZE = 119;
    public static readonly OPTION = 120;
    public static readonly OPTIONAL = 121;
    public static readonly OPTIONALLY = 122;
    public static readonly OR = 123;
    public static readonly ORDER = 124;
    public static readonly OUT = 125;
    public static readonly OUTER = 126;
    public static readonly OUTFILE = 127;
    public static readonly OVER = 128;
    public static readonly PARTITION = 129;
    public static readonly PRIMARY = 130;
    public static readonly PROCEDURE = 131;
    public static readonly PURGE = 132;
    public static readonly RANGE = 133;
    public static readonly READ = 134;
    public static readonly READS = 135;
    public static readonly REFERENCES = 136;
    public static readonly REGEXP = 137;
    public static readonly RELEASE = 138;
    public static readonly RENAME = 139;
    public static readonly REPEAT = 140;
    public static readonly REPLACE = 141;
    public static readonly REQUIRE = 142;
    public static readonly RESIGNAL = 143;
    public static readonly RESTRICT = 144;
    public static readonly RETAIN = 145;
    public static readonly RETURN = 146;
    public static readonly REVOKE = 147;
    public static readonly RIGHT = 148;
    public static readonly RLIKE = 149;
    public static readonly SCHEMA = 150;
    public static readonly SCHEMAS = 151;
    public static readonly SELECT = 152;
    public static readonly SET = 153;
    public static readonly SEPARATOR = 154;
    public static readonly SHOW = 155;
    public static readonly SIGNAL = 156;
    public static readonly SKIP_ = 157;
    public static readonly SKIP_QUERY_REWRITE = 158;
    public static readonly SPATIAL = 159;
    public static readonly SQL = 160;
    public static readonly SQLEXCEPTION = 161;
    public static readonly SQLSTATE = 162;
    public static readonly SQLWARNING = 163;
    public static readonly SQL_BIG_RESULT = 164;
    public static readonly SQL_CALC_FOUND_ROWS = 165;
    public static readonly SQL_SMALL_RESULT = 166;
    public static readonly SSL = 167;
    public static readonly STACKED = 168;
    public static readonly STARTING = 169;
    public static readonly STATEMENT = 170;
    public static readonly STRAIGHT_JOIN = 171;
    public static readonly TABLE = 172;
    public static readonly TERMINATED = 173;
    public static readonly THEN = 174;
    public static readonly TO = 175;
    public static readonly TRAILING = 176;
    public static readonly TRIGGER = 177;
    public static readonly TRUE = 178;
    public static readonly UNDO = 179;
    public static readonly UNION = 180;
    public static readonly UNIQUE = 181;
    public static readonly UNLOCK = 182;
    public static readonly UNSIGNED = 183;
    public static readonly UPDATE = 184;
    public static readonly USAGE = 185;
    public static readonly USE = 186;
    public static readonly USING = 187;
    public static readonly VALUES = 188;
    public static readonly WHEN = 189;
    public static readonly WHERE = 190;
    public static readonly WHILE = 191;
    public static readonly WITH = 192;
    public static readonly WRITE = 193;
    public static readonly XOR = 194;
    public static readonly ZEROFILL = 195;
    public static readonly TINYINT = 196;
    public static readonly SMALLINT = 197;
    public static readonly MEDIUMINT = 198;
    public static readonly MIDDLEINT = 199;
    public static readonly INT = 200;
    public static readonly INT1 = 201;
    public static readonly INT2 = 202;
    public static readonly INT3 = 203;
    public static readonly INT4 = 204;
    public static readonly INT8 = 205;
    public static readonly INTEGER = 206;
    public static readonly BIGINT = 207;
    public static readonly REAL = 208;
    public static readonly DOUBLE = 209;
    public static readonly PRECISION = 210;
    public static readonly FLOAT = 211;
    public static readonly FLOAT4 = 212;
    public static readonly FLOAT8 = 213;
    public static readonly DECIMAL = 214;
    public static readonly DEC = 215;
    public static readonly NUMERIC = 216;
    public static readonly DATE = 217;
    public static readonly TIME = 218;
    public static readonly TIMESTAMP = 219;
    public static readonly DATETIME = 220;
    public static readonly YEAR = 221;
    public static readonly CHAR = 222;
    public static readonly VARCHAR = 223;
    public static readonly NVARCHAR = 224;
    public static readonly NATIONAL = 225;
    public static readonly BINARY = 226;
    public static readonly VARBINARY = 227;
    public static readonly TINYBLOB = 228;
    public static readonly BLOB = 229;
    public static readonly MEDIUMBLOB = 230;
    public static readonly LONG = 231;
    public static readonly LONGBLOB = 232;
    public static readonly TINYTEXT = 233;
    public static readonly TEXT = 234;
    public static readonly MEDIUMTEXT = 235;
    public static readonly LONGTEXT = 236;
    public static readonly ENUM = 237;
    public static readonly VARYING = 238;
    public static readonly SERIAL = 239;
    public static readonly YEAR_MONTH = 240;
    public static readonly DAY_HOUR = 241;
    public static readonly DAY_MINUTE = 242;
    public static readonly DAY_SECOND = 243;
    public static readonly HOUR_MINUTE = 244;
    public static readonly HOUR_SECOND = 245;
    public static readonly MINUTE_SECOND = 246;
    public static readonly SECOND_MICROSECOND = 247;
    public static readonly MINUTE_MICROSECOND = 248;
    public static readonly HOUR_MICROSECOND = 249;
    public static readonly DAY_MICROSECOND = 250;
    public static readonly JSON_ARRAY = 251;
    public static readonly JSON_ARRAYAGG = 252;
    public static readonly JSON_ARRAY_APPEND = 253;
    public static readonly JSON_ARRAY_INSERT = 254;
    public static readonly JSON_CONTAINS = 255;
    public static readonly JSON_CONTAINS_PATH = 256;
    public static readonly JSON_DEPTH = 257;
    public static readonly JSON_EXTRACT = 258;
    public static readonly JSON_INSERT = 259;
    public static readonly JSON_KEYS = 260;
    public static readonly JSON_LENGTH = 261;
    public static readonly JSON_MERGE = 262;
    public static readonly JSON_MERGE_PATCH = 263;
    public static readonly JSON_MERGE_PRESERVE = 264;
    public static readonly JSON_OBJECT = 265;
    public static readonly JSON_OBJECTAGG = 266;
    public static readonly JSON_OVERLAPS = 267;
    public static readonly JSON_PRETTY = 268;
    public static readonly JSON_QUOTE = 269;
    public static readonly JSON_REMOVE = 270;
    public static readonly JSON_REPLACE = 271;
    public static readonly JSON_SCHEMA_VALID = 272;
    public static readonly JSON_SCHEMA_VALIDATION_REPORT = 273;
    public static readonly JSON_SEARCH = 274;
    public static readonly JSON_SET = 275;
    public static readonly JSON_STORAGE_FREE = 276;
    public static readonly JSON_STORAGE_SIZE = 277;
    public static readonly JSON_TABLE = 278;
    public static readonly JSON_TYPE = 279;
    public static readonly JSON_UNQUOTE = 280;
    public static readonly JSON_VALID = 281;
    public static readonly JSON_VALUE = 282;
    public static readonly NESTED = 283;
    public static readonly ORDINALITY = 284;
    public static readonly PATH = 285;
    public static readonly AVG = 286;
    public static readonly BIT_AND = 287;
    public static readonly BIT_OR = 288;
    public static readonly BIT_XOR = 289;
    public static readonly COUNT = 290;
    public static readonly CUME_DIST = 291;
    public static readonly DENSE_RANK = 292;
    public static readonly FIRST_VALUE = 293;
    public static readonly GROUP_CONCAT = 294;
    public static readonly LAG = 295;
    public static readonly LAST_VALUE = 296;
    public static readonly LEAD = 297;
    public static readonly MAX = 298;
    public static readonly MIN = 299;
    public static readonly NTILE = 300;
    public static readonly NTH_VALUE = 301;
    public static readonly PERCENT_RANK = 302;
    public static readonly RANK = 303;
    public static readonly ROW_NUMBER = 304;
    public static readonly STD = 305;
    public static readonly STDDEV = 306;
    public static readonly STDDEV_POP = 307;
    public static readonly STDDEV_SAMP = 308;
    public static readonly SUM = 309;
    public static readonly VAR_POP = 310;
    public static readonly VAR_SAMP = 311;
    public static readonly VARIANCE = 312;
    public static readonly CURRENT_DATE = 313;
    public static readonly CURRENT_TIME = 314;
    public static readonly CURRENT_TIMESTAMP = 315;
    public static readonly LOCALTIME = 316;
    public static readonly CURDATE = 317;
    public static readonly CURTIME = 318;
    public static readonly DATE_ADD = 319;
    public static readonly DATE_SUB = 320;
    public static readonly EXTRACT = 321;
    public static readonly LOCALTIMESTAMP = 322;
    public static readonly NOW = 323;
    public static readonly POSITION = 324;
    public static readonly SUBSTR = 325;
    public static readonly SUBSTRING = 326;
    public static readonly SYSDATE = 327;
    public static readonly TRIM = 328;
    public static readonly UTC_DATE = 329;
    public static readonly UTC_TIME = 330;
    public static readonly UTC_TIMESTAMP = 331;
    public static readonly ACCOUNT = 332;
    public static readonly ACTION = 333;
    public static readonly AFTER = 334;
    public static readonly AGGREGATE = 335;
    public static readonly ALGORITHM = 336;
    public static readonly ANY = 337;
    public static readonly AT = 338;
    public static readonly AUTHORS = 339;
    public static readonly AUTOCOMMIT = 340;
    public static readonly AUTOEXTEND_SIZE = 341;
    public static readonly AUTO_INCREMENT = 342;
    public static readonly AVG_ROW_LENGTH = 343;
    public static readonly BEGIN = 344;
    public static readonly BINLOG = 345;
    public static readonly BIT = 346;
    public static readonly BLOCK = 347;
    public static readonly BOOL = 348;
    public static readonly BOOLEAN = 349;
    public static readonly BTREE = 350;
    public static readonly CACHE = 351;
    public static readonly CASCADED = 352;
    public static readonly CHAIN = 353;
    public static readonly CHANGED = 354;
    public static readonly CHANNEL = 355;
    public static readonly CHECKSUM = 356;
    public static readonly PAGE_CHECKSUM = 357;
    public static readonly CIPHER = 358;
    public static readonly CLASS_ORIGIN = 359;
    public static readonly CLIENT = 360;
    public static readonly CLOSE = 361;
    public static readonly CLUSTERING = 362;
    public static readonly COALESCE = 363;
    public static readonly CODE = 364;
    public static readonly COLUMNS = 365;
    public static readonly COLUMN_FORMAT = 366;
    public static readonly COLUMN_NAME = 367;
    public static readonly COMMENT = 368;
    public static readonly COMMIT = 369;
    public static readonly COMPACT = 370;
    public static readonly COMPLETION = 371;
    public static readonly COMPRESSED = 372;
    public static readonly COMPRESSION = 373;
    public static readonly CONCURRENT = 374;
    public static readonly CONNECT = 375;
    public static readonly CONNECTION = 376;
    public static readonly CONSISTENT = 377;
    public static readonly CONSTRAINT_CATALOG = 378;
    public static readonly CONSTRAINT_SCHEMA = 379;
    public static readonly CONSTRAINT_NAME = 380;
    public static readonly CONTAINS = 381;
    public static readonly CONTEXT = 382;
    public static readonly CONTRIBUTORS = 383;
    public static readonly COPY = 384;
    public static readonly CPU = 385;
    public static readonly CYCLE = 386;
    public static readonly CURSOR_NAME = 387;
    public static readonly DATA = 388;
    public static readonly DATAFILE = 389;
    public static readonly DEALLOCATE = 390;
    public static readonly DEFAULT_AUTH = 391;
    public static readonly DEFINER = 392;
    public static readonly DELAY_KEY_WRITE = 393;
    public static readonly DES_KEY_FILE = 394;
    public static readonly DIRECTORY = 395;
    public static readonly DISABLE = 396;
    public static readonly DISCARD = 397;
    public static readonly DISK = 398;
    public static readonly DO = 399;
    public static readonly DUMPFILE = 400;
    public static readonly DUPLICATE = 401;
    public static readonly DYNAMIC = 402;
    public static readonly ENABLE = 403;
    public static readonly ENCRYPTED = 404;
    public static readonly ENCRYPTION = 405;
    public static readonly ENCRYPTION_KEY_ID = 406;
    public static readonly END = 407;
    public static readonly ENDS = 408;
    public static readonly ENGINE = 409;
    public static readonly ENGINES = 410;
    public static readonly ERROR = 411;
    public static readonly ERRORS = 412;
    public static readonly ESCAPE = 413;
    public static readonly EVEN = 414;
    public static readonly EVENT = 415;
    public static readonly EVENTS = 416;
    public static readonly EVERY = 417;
    public static readonly EXCHANGE = 418;
    public static readonly EXCLUSIVE = 419;
    public static readonly EXPIRE = 420;
    public static readonly EXPORT = 421;
    public static readonly EXTENDED = 422;
    public static readonly EXTENT_SIZE = 423;
    public static readonly FAILED_LOGIN_ATTEMPTS = 424;
    public static readonly FAST = 425;
    public static readonly FAULTS = 426;
    public static readonly FIELDS = 427;
    public static readonly FILE_BLOCK_SIZE = 428;
    public static readonly FILTER = 429;
    public static readonly FIRST = 430;
    public static readonly FIXED = 431;
    public static readonly FLUSH = 432;
    public static readonly FOLLOWING = 433;
    public static readonly FOLLOWS = 434;
    public static readonly FOUND = 435;
    public static readonly FULL = 436;
    public static readonly FUNCTION = 437;
    public static readonly GENERAL = 438;
    public static readonly GLOBAL = 439;
    public static readonly GRANTS = 440;
    public static readonly GROUP_REPLICATION = 441;
    public static readonly HANDLER = 442;
    public static readonly HASH = 443;
    public static readonly HELP = 444;
    public static readonly HISTORY = 445;
    public static readonly HOST = 446;
    public static readonly HOSTS = 447;
    public static readonly IDENTIFIED = 448;
    public static readonly IGNORE_SERVER_IDS = 449;
    public static readonly IMPORT = 450;
    public static readonly INCREMENT = 451;
    public static readonly INDEXES = 452;
    public static readonly INITIAL_SIZE = 453;
    public static readonly INPLACE = 454;
    public static readonly INSERT_METHOD = 455;
    public static readonly INSTALL = 456;
    public static readonly INSTANCE = 457;
    public static readonly INSTANT = 458;
    public static readonly INVISIBLE = 459;
    public static readonly INVOKER = 460;
    public static readonly IO = 461;
    public static readonly IO_THREAD = 462;
    public static readonly IPC = 463;
    public static readonly ISOLATION = 464;
    public static readonly ISSUER = 465;
    public static readonly JSON = 466;
    public static readonly KEY_BLOCK_SIZE = 467;
    public static readonly LANGUAGE = 468;
    public static readonly LAST = 469;
    public static readonly LEAVES = 470;
    public static readonly LESS = 471;
    public static readonly LEVEL = 472;
    public static readonly LIST = 473;
    public static readonly LOCAL = 474;
    public static readonly LOGFILE = 475;
    public static readonly LOGS = 476;
    public static readonly MASTER = 477;
    public static readonly MASTER_AUTO_POSITION = 478;
    public static readonly MASTER_CONNECT_RETRY = 479;
    public static readonly MASTER_DELAY = 480;
    public static readonly MASTER_HEARTBEAT_PERIOD = 481;
    public static readonly MASTER_HOST = 482;
    public static readonly MASTER_LOG_FILE = 483;
    public static readonly MASTER_LOG_POS = 484;
    public static readonly MASTER_PASSWORD = 485;
    public static readonly MASTER_PORT = 486;
    public static readonly MASTER_RETRY_COUNT = 487;
    public static readonly MASTER_SSL = 488;
    public static readonly MASTER_SSL_CA = 489;
    public static readonly MASTER_SSL_CAPATH = 490;
    public static readonly MASTER_SSL_CERT = 491;
    public static readonly MASTER_SSL_CIPHER = 492;
    public static readonly MASTER_SSL_CRL = 493;
    public static readonly MASTER_SSL_CRLPATH = 494;
    public static readonly MASTER_SSL_KEY = 495;
    public static readonly MASTER_TLS_VERSION = 496;
    public static readonly MASTER_USER = 497;
    public static readonly MAX_CONNECTIONS_PER_HOUR = 498;
    public static readonly MAX_QUERIES_PER_HOUR = 499;
    public static readonly MAX_ROWS = 500;
    public static readonly MAX_SIZE = 501;
    public static readonly MAX_UPDATES_PER_HOUR = 502;
    public static readonly MAX_USER_CONNECTIONS = 503;
    public static readonly MEDIUM = 504;
    public static readonly MEMBER = 505;
    public static readonly MERGE = 506;
    public static readonly MESSAGE_TEXT = 507;
    public static readonly MID = 508;
    public static readonly MIGRATE = 509;
    public static readonly MIN_ROWS = 510;
    public static readonly MODE = 511;
    public static readonly MODIFY = 512;
    public static readonly MUTEX = 513;
    public static readonly MYSQL = 514;
    public static readonly MYSQL_ERRNO = 515;
    public static readonly NAME = 516;
    public static readonly NAMES = 517;
    public static readonly NCHAR = 518;
    public static readonly NEVER = 519;
    public static readonly NEXT = 520;
    public static readonly NO = 521;
    public static readonly NOCACHE = 522;
    public static readonly NOCOPY = 523;
    public static readonly NOCYCLE = 524;
    public static readonly NOMAXVALUE = 525;
    public static readonly NOMINVALUE = 526;
    public static readonly NOWAIT = 527;
    public static readonly NODEGROUP = 528;
    public static readonly NONE = 529;
    public static readonly ODBC = 530;
    public static readonly OFFLINE = 531;
    public static readonly OFFSET = 532;
    public static readonly OF = 533;
    public static readonly OJ = 534;
    public static readonly OLD_PASSWORD = 535;
    public static readonly ONE = 536;
    public static readonly ONLINE = 537;
    public static readonly ONLY = 538;
    public static readonly OPEN = 539;
    public static readonly OPTIMIZER_COSTS = 540;
    public static readonly OPTIONS = 541;
    public static readonly OWNER = 542;
    public static readonly PACK_KEYS = 543;
    public static readonly PAGE = 544;
    public static readonly PAGE_COMPRESSED = 545;
    public static readonly PAGE_COMPRESSION_LEVEL = 546;
    public static readonly PARSER = 547;
    public static readonly PARTIAL = 548;
    public static readonly PARTITIONING = 549;
    public static readonly PARTITIONS = 550;
    public static readonly PASSWORD = 551;
    public static readonly PASSWORD_LOCK_TIME = 552;
    public static readonly PHASE = 553;
    public static readonly PLUGIN = 554;
    public static readonly PLUGIN_DIR = 555;
    public static readonly PLUGINS = 556;
    public static readonly PORT = 557;
    public static readonly PRECEDES = 558;
    public static readonly PRECEDING = 559;
    public static readonly PREPARE = 560;
    public static readonly PRESERVE = 561;
    public static readonly PREV = 562;
    public static readonly PROCESSLIST = 563;
    public static readonly PROFILE = 564;
    public static readonly PROFILES = 565;
    public static readonly PROXY = 566;
    public static readonly QUERY = 567;
    public static readonly QUICK = 568;
    public static readonly REBUILD = 569;
    public static readonly RECOVER = 570;
    public static readonly RECURSIVE = 571;
    public static readonly REDO_BUFFER_SIZE = 572;
    public static readonly REDUNDANT = 573;
    public static readonly RELAY = 574;
    public static readonly RELAY_LOG_FILE = 575;
    public static readonly RELAY_LOG_POS = 576;
    public static readonly RELAYLOG = 577;
    public static readonly REMOVE = 578;
    public static readonly REORGANIZE = 579;
    public static readonly REPAIR = 580;
    public static readonly REPLICATE_DO_DB = 581;
    public static readonly REPLICATE_DO_TABLE = 582;
    public static readonly REPLICATE_IGNORE_DB = 583;
    public static readonly REPLICATE_IGNORE_TABLE = 584;
    public static readonly REPLICATE_REWRITE_DB = 585;
    public static readonly REPLICATE_WILD_DO_TABLE = 586;
    public static readonly REPLICATE_WILD_IGNORE_TABLE = 587;
    public static readonly REPLICATION = 588;
    public static readonly RESET = 589;
    public static readonly RESTART = 590;
    public static readonly RESUME = 591;
    public static readonly RETURNED_SQLSTATE = 592;
    public static readonly RETURNING = 593;
    public static readonly RETURNS = 594;
    public static readonly REUSE = 595;
    public static readonly ROLE = 596;
    public static readonly ROLLBACK = 597;
    public static readonly ROLLUP = 598;
    public static readonly ROTATE = 599;
    public static readonly ROW = 600;
    public static readonly ROWS = 601;
    public static readonly ROW_FORMAT = 602;
    public static readonly RTREE = 603;
    public static readonly SAVEPOINT = 604;
    public static readonly SCHEDULE = 605;
    public static readonly SECURITY = 606;
    public static readonly SEQUENCE = 607;
    public static readonly SERVER = 608;
    public static readonly SESSION = 609;
    public static readonly SHARE = 610;
    public static readonly SHARED = 611;
    public static readonly SIGNED = 612;
    public static readonly SIMPLE = 613;
    public static readonly SLAVE = 614;
    public static readonly SLOW = 615;
    public static readonly SNAPSHOT = 616;
    public static readonly SOCKET = 617;
    public static readonly SOME = 618;
    public static readonly SONAME = 619;
    public static readonly SOUNDS = 620;
    public static readonly SOURCE = 621;
    public static readonly SQL_AFTER_GTIDS = 622;
    public static readonly SQL_AFTER_MTS_GAPS = 623;
    public static readonly SQL_BEFORE_GTIDS = 624;
    public static readonly SQL_BUFFER_RESULT = 625;
    public static readonly SQL_CACHE = 626;
    public static readonly SQL_NO_CACHE = 627;
    public static readonly SQL_THREAD = 628;
    public static readonly START = 629;
    public static readonly STARTS = 630;
    public static readonly STATS_AUTO_RECALC = 631;
    public static readonly STATS_PERSISTENT = 632;
    public static readonly STATS_SAMPLE_PAGES = 633;
    public static readonly STATUS = 634;
    public static readonly STOP = 635;
    public static readonly STORAGE = 636;
    public static readonly STORED = 637;
    public static readonly STRING = 638;
    public static readonly SUBCLASS_ORIGIN = 639;
    public static readonly SUBJECT = 640;
    public static readonly SUBPARTITION = 641;
    public static readonly SUBPARTITIONS = 642;
    public static readonly SUSPEND = 643;
    public static readonly SWAPS = 644;
    public static readonly SWITCHES = 645;
    public static readonly TABLE_NAME = 646;
    public static readonly TABLESPACE = 647;
    public static readonly TABLE_TYPE = 648;
    public static readonly TEMPORARY = 649;
    public static readonly TEMPTABLE = 650;
    public static readonly THAN = 651;
    public static readonly TRADITIONAL = 652;
    public static readonly TRANSACTION = 653;
    public static readonly TRANSACTIONAL = 654;
    public static readonly TRIGGERS = 655;
    public static readonly TRUNCATE = 656;
    public static readonly UNBOUNDED = 657;
    public static readonly UNDEFINED = 658;
    public static readonly UNDOFILE = 659;
    public static readonly UNDO_BUFFER_SIZE = 660;
    public static readonly UNINSTALL = 661;
    public static readonly UNKNOWN = 662;
    public static readonly UNTIL = 663;
    public static readonly UPGRADE = 664;
    public static readonly USER = 665;
    public static readonly USE_FRM = 666;
    public static readonly USER_RESOURCES = 667;
    public static readonly VALIDATION = 668;
    public static readonly VALUE = 669;
    public static readonly VARIABLES = 670;
    public static readonly VIEW = 671;
    public static readonly VIRTUAL = 672;
    public static readonly VISIBLE = 673;
    public static readonly WAIT = 674;
    public static readonly WARNINGS = 675;
    public static readonly WINDOW = 676;
    public static readonly WITHOUT = 677;
    public static readonly WORK = 678;
    public static readonly WRAPPER = 679;
    public static readonly X509 = 680;
    public static readonly XA = 681;
    public static readonly XML = 682;
    public static readonly YES = 683;
    public static readonly EUR = 684;
    public static readonly USA = 685;
    public static readonly JIS = 686;
    public static readonly ISO = 687;
    public static readonly INTERNAL = 688;
    public static readonly QUARTER = 689;
    public static readonly MONTH = 690;
    public static readonly DAY = 691;
    public static readonly HOUR = 692;
    public static readonly MINUTE = 693;
    public static readonly WEEK = 694;
    public static readonly SECOND = 695;
    public static readonly MICROSECOND = 696;
    public static readonly ADMIN = 697;
    public static readonly APPLICATION_PASSWORD_ADMIN = 698;
    public static readonly AUDIT_ABORT_EXEMPT = 699;
    public static readonly AUDIT_ADMIN = 700;
    public static readonly AUTHENTICATION_POLICY_ADMIN = 701;
    public static readonly BACKUP_ADMIN = 702;
    public static readonly BINLOG_ADMIN = 703;
    public static readonly BINLOG_ENCRYPTION_ADMIN = 704;
    public static readonly CLONE_ADMIN = 705;
    public static readonly CONNECTION_ADMIN = 706;
    public static readonly ENCRYPTION_KEY_ADMIN = 707;
    public static readonly EXECUTE = 708;
    public static readonly FILE = 709;
    public static readonly FIREWALL_ADMIN = 710;
    public static readonly FIREWALL_EXEMPT = 711;
    public static readonly FIREWALL_USER = 712;
    public static readonly FLUSH_OPTIMIZER_COSTS = 713;
    public static readonly FLUSH_STATUS = 714;
    public static readonly FLUSH_TABLES = 715;
    public static readonly FLUSH_USER_RESOURCES = 716;
    public static readonly GROUP_REPLICATION_ADMIN = 717;
    public static readonly INNODB_REDO_LOG_ARCHIVE = 718;
    public static readonly INNODB_REDO_LOG_ENABLE = 719;
    public static readonly INVOKE = 720;
    public static readonly LAMBDA = 721;
    public static readonly NDB_STORED_USER = 722;
    public static readonly PASSWORDLESS_USER_ADMIN = 723;
    public static readonly PERSIST_RO_VARIABLES_ADMIN = 724;
    public static readonly PRIVILEGES = 725;
    public static readonly PROCESS = 726;
    public static readonly RELOAD = 727;
    public static readonly REPLICATION_APPLIER = 728;
    public static readonly REPLICATION_SLAVE_ADMIN = 729;
    public static readonly RESOURCE_GROUP_ADMIN = 730;
    public static readonly RESOURCE_GROUP_USER = 731;
    public static readonly ROLE_ADMIN = 732;
    public static readonly ROUTINE = 733;
    public static readonly S3 = 734;
    public static readonly SERVICE_CONNECTION_ADMIN = 735;
    public static readonly SESSION_VARIABLES_ADMIN = 736;
    public static readonly SET_USER_ID = 737;
    public static readonly SHOW_ROUTINE = 738;
    public static readonly SHUTDOWN = 739;
    public static readonly SUPER = 740;
    public static readonly SYSTEM_VARIABLES_ADMIN = 741;
    public static readonly TABLES = 742;
    public static readonly TABLE_ENCRYPTION_ADMIN = 743;
    public static readonly VERSION_TOKEN_ADMIN = 744;
    public static readonly XA_RECOVER_ADMIN = 745;
    public static readonly ARMSCII8 = 746;
    public static readonly ASCII = 747;
    public static readonly BIG5 = 748;
    public static readonly CP1250 = 749;
    public static readonly CP1251 = 750;
    public static readonly CP1256 = 751;
    public static readonly CP1257 = 752;
    public static readonly CP850 = 753;
    public static readonly CP852 = 754;
    public static readonly CP866 = 755;
    public static readonly CP932 = 756;
    public static readonly DEC8 = 757;
    public static readonly EUCJPMS = 758;
    public static readonly EUCKR = 759;
    public static readonly GB18030 = 760;
    public static readonly GB2312 = 761;
    public static readonly GBK = 762;
    public static readonly GEOSTD8 = 763;
    public static readonly GREEK = 764;
    public static readonly HEBREW = 765;
    public static readonly HP8 = 766;
    public static readonly KEYBCS2 = 767;
    public static readonly KOI8R = 768;
    public static readonly KOI8U = 769;
    public static readonly LATIN1 = 770;
    public static readonly LATIN2 = 771;
    public static readonly LATIN5 = 772;
    public static readonly LATIN7 = 773;
    public static readonly MACCE = 774;
    public static readonly MACROMAN = 775;
    public static readonly SJIS = 776;
    public static readonly SWE7 = 777;
    public static readonly TIS620 = 778;
    public static readonly UCS2 = 779;
    public static readonly UJIS = 780;
    public static readonly UTF16 = 781;
    public static readonly UTF16LE = 782;
    public static readonly UTF32 = 783;
    public static readonly UTF8 = 784;
    public static readonly UTF8MB3 = 785;
    public static readonly UTF8MB4 = 786;
    public static readonly ARCHIVE = 787;
    public static readonly BLACKHOLE = 788;
    public static readonly CSV = 789;
    public static readonly FEDERATED = 790;
    public static readonly INNODB = 791;
    public static readonly MEMORY = 792;
    public static readonly MRG_MYISAM = 793;
    public static readonly MYISAM = 794;
    public static readonly NDB = 795;
    public static readonly NDBCLUSTER = 796;
    public static readonly PERFORMANCE_SCHEMA = 797;
    public static readonly TOKUDB = 798;
    public static readonly REPEATABLE = 799;
    public static readonly COMMITTED = 800;
    public static readonly UNCOMMITTED = 801;
    public static readonly SERIALIZABLE = 802;
    public static readonly GEOMETRYCOLLECTION = 803;
    public static readonly GEOMCOLLECTION = 804;
    public static readonly GEOMETRY = 805;
    public static readonly LINESTRING = 806;
    public static readonly MULTILINESTRING = 807;
    public static readonly MULTIPOINT = 808;
    public static readonly MULTIPOLYGON = 809;
    public static readonly POINT = 810;
    public static readonly POLYGON = 811;
    public static readonly ABS = 812;
    public static readonly ACOS = 813;
    public static readonly ADDDATE = 814;
    public static readonly ADDTIME = 815;
    public static readonly AES_DECRYPT = 816;
    public static readonly AES_ENCRYPT = 817;
    public static readonly AREA = 818;
    public static readonly ASBINARY = 819;
    public static readonly ASIN = 820;
    public static readonly ASTEXT = 821;
    public static readonly ASWKB = 822;
    public static readonly ASWKT = 823;
    public static readonly ASYMMETRIC_DECRYPT = 824;
    public static readonly ASYMMETRIC_DERIVE = 825;
    public static readonly ASYMMETRIC_ENCRYPT = 826;
    public static readonly ASYMMETRIC_SIGN = 827;
    public static readonly ASYMMETRIC_VERIFY = 828;
    public static readonly ATAN = 829;
    public static readonly ATAN2 = 830;
    public static readonly BENCHMARK = 831;
    public static readonly BIN = 832;
    public static readonly BIT_COUNT = 833;
    public static readonly BIT_LENGTH = 834;
    public static readonly BUFFER = 835;
    public static readonly CATALOG_NAME = 836;
    public static readonly CEIL = 837;
    public static readonly CEILING = 838;
    public static readonly CENTROID = 839;
    public static readonly CHARACTER_LENGTH = 840;
    public static readonly CHARSET = 841;
    public static readonly CHAR_LENGTH = 842;
    public static readonly COERCIBILITY = 843;
    public static readonly COLLATION = 844;
    public static readonly COMPRESS = 845;
    public static readonly CONCAT = 846;
    public static readonly CONCAT_WS = 847;
    public static readonly CONNECTION_ID = 848;
    public static readonly CONV = 849;
    public static readonly CONVERT_TZ = 850;
    public static readonly COS = 851;
    public static readonly COT = 852;
    public static readonly CRC32 = 853;
    public static readonly CREATE_ASYMMETRIC_PRIV_KEY = 854;
    public static readonly CREATE_ASYMMETRIC_PUB_KEY = 855;
    public static readonly CREATE_DH_PARAMETERS = 856;
    public static readonly CREATE_DIGEST = 857;
    public static readonly CROSSES = 858;
    public static readonly DATEDIFF = 859;
    public static readonly DATE_FORMAT = 860;
    public static readonly DAYNAME = 861;
    public static readonly DAYOFMONTH = 862;
    public static readonly DAYOFWEEK = 863;
    public static readonly DAYOFYEAR = 864;
    public static readonly DECODE = 865;
    public static readonly DEGREES = 866;
    public static readonly DES_DECRYPT = 867;
    public static readonly DES_ENCRYPT = 868;
    public static readonly DIMENSION = 869;
    public static readonly DISJOINT = 870;
    public static readonly ELT = 871;
    public static readonly ENCODE = 872;
    public static readonly ENCRYPT = 873;
    public static readonly ENDPOINT = 874;
    public static readonly ENGINE_ATTRIBUTE = 875;
    public static readonly ENVELOPE = 876;
    public static readonly EQUALS = 877;
    public static readonly EXP = 878;
    public static readonly EXPORT_SET = 879;
    public static readonly EXTERIORRING = 880;
    public static readonly EXTRACTVALUE = 881;
    public static readonly FIELD = 882;
    public static readonly FIND_IN_SET = 883;
    public static readonly FLOOR = 884;
    public static readonly FORMAT = 885;
    public static readonly FOUND_ROWS = 886;
    public static readonly FROM_BASE64 = 887;
    public static readonly FROM_DAYS = 888;
    public static readonly FROM_UNIXTIME = 889;
    public static readonly GEOMCOLLFROMTEXT = 890;
    public static readonly GEOMCOLLFROMWKB = 891;
    public static readonly GEOMETRYCOLLECTIONFROMTEXT = 892;
    public static readonly GEOMETRYCOLLECTIONFROMWKB = 893;
    public static readonly GEOMETRYFROMTEXT = 894;
    public static readonly GEOMETRYFROMWKB = 895;
    public static readonly GEOMETRYN = 896;
    public static readonly GEOMETRYTYPE = 897;
    public static readonly GEOMFROMTEXT = 898;
    public static readonly GEOMFROMWKB = 899;
    public static readonly GET_FORMAT = 900;
    public static readonly GET_LOCK = 901;
    public static readonly GLENGTH = 902;
    public static readonly GREATEST = 903;
    public static readonly GTID_SUBSET = 904;
    public static readonly GTID_SUBTRACT = 905;
    public static readonly HEX = 906;
    public static readonly IFNULL = 907;
    public static readonly INET6_ATON = 908;
    public static readonly INET6_NTOA = 909;
    public static readonly INET_ATON = 910;
    public static readonly INET_NTOA = 911;
    public static readonly INSTR = 912;
    public static readonly INTERIORRINGN = 913;
    public static readonly INTERSECTS = 914;
    public static readonly ISCLOSED = 915;
    public static readonly ISEMPTY = 916;
    public static readonly ISNULL = 917;
    public static readonly ISSIMPLE = 918;
    public static readonly IS_FREE_LOCK = 919;
    public static readonly IS_IPV4 = 920;
    public static readonly IS_IPV4_COMPAT = 921;
    public static readonly IS_IPV4_MAPPED = 922;
    public static readonly IS_IPV6 = 923;
    public static readonly IS_USED_LOCK = 924;
    public static readonly LAST_INSERT_ID = 925;
    public static readonly LCASE = 926;
    public static readonly LEAST = 927;
    public static readonly LENGTH = 928;
    public static readonly LINEFROMTEXT = 929;
    public static readonly LINEFROMWKB = 930;
    public static readonly LINESTRINGFROMTEXT = 931;
    public static readonly LINESTRINGFROMWKB = 932;
    public static readonly LN = 933;
    public static readonly LOAD_FILE = 934;
    public static readonly LOCATE = 935;
    public static readonly LOG = 936;
    public static readonly LOG10 = 937;
    public static readonly LOG2 = 938;
    public static readonly LOWER = 939;
    public static readonly LPAD = 940;
    public static readonly LTRIM = 941;
    public static readonly MAKEDATE = 942;
    public static readonly MAKETIME = 943;
    public static readonly MAKE_SET = 944;
    public static readonly MASTER_POS_WAIT = 945;
    public static readonly MBRCONTAINS = 946;
    public static readonly MBRDISJOINT = 947;
    public static readonly MBREQUAL = 948;
    public static readonly MBRINTERSECTS = 949;
    public static readonly MBROVERLAPS = 950;
    public static readonly MBRTOUCHES = 951;
    public static readonly MBRWITHIN = 952;
    public static readonly MD5 = 953;
    public static readonly MLINEFROMTEXT = 954;
    public static readonly MLINEFROMWKB = 955;
    public static readonly MONTHNAME = 956;
    public static readonly MPOINTFROMTEXT = 957;
    public static readonly MPOINTFROMWKB = 958;
    public static readonly MPOLYFROMTEXT = 959;
    public static readonly MPOLYFROMWKB = 960;
    public static readonly MULTILINESTRINGFROMTEXT = 961;
    public static readonly MULTILINESTRINGFROMWKB = 962;
    public static readonly MULTIPOINTFROMTEXT = 963;
    public static readonly MULTIPOINTFROMWKB = 964;
    public static readonly MULTIPOLYGONFROMTEXT = 965;
    public static readonly MULTIPOLYGONFROMWKB = 966;
    public static readonly NAME_CONST = 967;
    public static readonly NULLIF = 968;
    public static readonly NUMGEOMETRIES = 969;
    public static readonly NUMINTERIORRINGS = 970;
    public static readonly NUMPOINTS = 971;
    public static readonly OCT = 972;
    public static readonly OCTET_LENGTH = 973;
    public static readonly ORD = 974;
    public static readonly OVERLAPS = 975;
    public static readonly PERIOD_ADD = 976;
    public static readonly PERIOD_DIFF = 977;
    public static readonly PI = 978;
    public static readonly POINTFROMTEXT = 979;
    public static readonly POINTFROMWKB = 980;
    public static readonly POINTN = 981;
    public static readonly POLYFROMTEXT = 982;
    public static readonly POLYFROMWKB = 983;
    public static readonly POLYGONFROMTEXT = 984;
    public static readonly POLYGONFROMWKB = 985;
    public static readonly POW = 986;
    public static readonly POWER = 987;
    public static readonly QUOTE = 988;
    public static readonly RADIANS = 989;
    public static readonly RAND = 990;
    public static readonly RANDOM = 991;
    public static readonly RANDOM_BYTES = 992;
    public static readonly RELEASE_LOCK = 993;
    public static readonly REVERSE = 994;
    public static readonly ROUND = 995;
    public static readonly ROW_COUNT = 996;
    public static readonly RPAD = 997;
    public static readonly RTRIM = 998;
    public static readonly SEC_TO_TIME = 999;
    public static readonly SECONDARY_ENGINE_ATTRIBUTE = 1000;
    public static readonly SESSION_USER = 1001;
    public static readonly SHA = 1002;
    public static readonly SHA1 = 1003;
    public static readonly SHA2 = 1004;
    public static readonly SCHEMA_NAME = 1005;
    public static readonly SIGN = 1006;
    public static readonly SIN = 1007;
    public static readonly SLEEP = 1008;
    public static readonly SOUNDEX = 1009;
    public static readonly SQL_THREAD_WAIT_AFTER_GTIDS = 1010;
    public static readonly SQRT = 1011;
    public static readonly SRID = 1012;
    public static readonly STARTPOINT = 1013;
    public static readonly STRCMP = 1014;
    public static readonly STR_TO_DATE = 1015;
    public static readonly ST_AREA = 1016;
    public static readonly ST_ASBINARY = 1017;
    public static readonly ST_ASTEXT = 1018;
    public static readonly ST_ASWKB = 1019;
    public static readonly ST_ASWKT = 1020;
    public static readonly ST_BUFFER = 1021;
    public static readonly ST_CENTROID = 1022;
    public static readonly ST_CONTAINS = 1023;
    public static readonly ST_CROSSES = 1024;
    public static readonly ST_DIFFERENCE = 1025;
    public static readonly ST_DIMENSION = 1026;
    public static readonly ST_DISJOINT = 1027;
    public static readonly ST_DISTANCE = 1028;
    public static readonly ST_ENDPOINT = 1029;
    public static readonly ST_ENVELOPE = 1030;
    public static readonly ST_EQUALS = 1031;
    public static readonly ST_EXTERIORRING = 1032;
    public static readonly ST_GEOMCOLLFROMTEXT = 1033;
    public static readonly ST_GEOMCOLLFROMTXT = 1034;
    public static readonly ST_GEOMCOLLFROMWKB = 1035;
    public static readonly ST_GEOMETRYCOLLECTIONFROMTEXT = 1036;
    public static readonly ST_GEOMETRYCOLLECTIONFROMWKB = 1037;
    public static readonly ST_GEOMETRYFROMTEXT = 1038;
    public static readonly ST_GEOMETRYFROMWKB = 1039;
    public static readonly ST_GEOMETRYN = 1040;
    public static readonly ST_GEOMETRYTYPE = 1041;
    public static readonly ST_GEOMFROMTEXT = 1042;
    public static readonly ST_GEOMFROMWKB = 1043;
    public static readonly ST_INTERIORRINGN = 1044;
    public static readonly ST_INTERSECTION = 1045;
    public static readonly ST_INTERSECTS = 1046;
    public static readonly ST_ISCLOSED = 1047;
    public static readonly ST_ISEMPTY = 1048;
    public static readonly ST_ISSIMPLE = 1049;
    public static readonly ST_LINEFROMTEXT = 1050;
    public static readonly ST_LINEFROMWKB = 1051;
    public static readonly ST_LINESTRINGFROMTEXT = 1052;
    public static readonly ST_LINESTRINGFROMWKB = 1053;
    public static readonly ST_NUMGEOMETRIES = 1054;
    public static readonly ST_NUMINTERIORRING = 1055;
    public static readonly ST_NUMINTERIORRINGS = 1056;
    public static readonly ST_NUMPOINTS = 1057;
    public static readonly ST_OVERLAPS = 1058;
    public static readonly ST_POINTFROMTEXT = 1059;
    public static readonly ST_POINTFROMWKB = 1060;
    public static readonly ST_POINTN = 1061;
    public static readonly ST_POLYFROMTEXT = 1062;
    public static readonly ST_POLYFROMWKB = 1063;
    public static readonly ST_POLYGONFROMTEXT = 1064;
    public static readonly ST_POLYGONFROMWKB = 1065;
    public static readonly ST_SRID = 1066;
    public static readonly ST_STARTPOINT = 1067;
    public static readonly ST_SYMDIFFERENCE = 1068;
    public static readonly ST_TOUCHES = 1069;
    public static readonly ST_UNION = 1070;
    public static readonly ST_WITHIN = 1071;
    public static readonly ST_X = 1072;
    public static readonly ST_Y = 1073;
    public static readonly SUBDATE = 1074;
    public static readonly SUBSTRING_INDEX = 1075;
    public static readonly SUBTIME = 1076;
    public static readonly SYSTEM_USER = 1077;
    public static readonly TAN = 1078;
    public static readonly TIMEDIFF = 1079;
    public static readonly TIMESTAMPADD = 1080;
    public static readonly TIMESTAMPDIFF = 1081;
    public static readonly TIME_FORMAT = 1082;
    public static readonly TIME_TO_SEC = 1083;
    public static readonly TOUCHES = 1084;
    public static readonly TO_BASE64 = 1085;
    public static readonly TO_DAYS = 1086;
    public static readonly TO_SECONDS = 1087;
    public static readonly TP_CONNECTION_ADMIN = 1088;
    public static readonly UCASE = 1089;
    public static readonly UNCOMPRESS = 1090;
    public static readonly UNCOMPRESSED_LENGTH = 1091;
    public static readonly UNHEX = 1092;
    public static readonly UNIX_TIMESTAMP = 1093;
    public static readonly UPDATEXML = 1094;
    public static readonly UPPER = 1095;
    public static readonly UUID = 1096;
    public static readonly UUID_SHORT = 1097;
    public static readonly VALIDATE_PASSWORD_STRENGTH = 1098;
    public static readonly VERSION = 1099;
    public static readonly WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 1100;
    public static readonly WEEKDAY = 1101;
    public static readonly WEEKOFYEAR = 1102;
    public static readonly WEIGHT_STRING = 1103;
    public static readonly WITHIN = 1104;
    public static readonly YEARWEEK = 1105;
    public static readonly Y_FUNCTION = 1106;
    public static readonly X_FUNCTION = 1107;
    public static readonly VAR_ASSIGN = 1108;
    public static readonly PLUS_ASSIGN = 1109;
    public static readonly MINUS_ASSIGN = 1110;
    public static readonly MULT_ASSIGN = 1111;
    public static readonly DIV_ASSIGN = 1112;
    public static readonly MOD_ASSIGN = 1113;
    public static readonly AND_ASSIGN = 1114;
    public static readonly XOR_ASSIGN = 1115;
    public static readonly OR_ASSIGN = 1116;
    public static readonly STAR = 1117;
    public static readonly DIVIDE = 1118;
    public static readonly MODULE = 1119;
    public static readonly PLUS = 1120;
    public static readonly MINUS = 1121;
    public static readonly DIV = 1122;
    public static readonly MOD = 1123;
    public static readonly EQUAL_SYMBOL = 1124;
    public static readonly GREATER_SYMBOL = 1125;
    public static readonly LESS_SYMBOL = 1126;
    public static readonly EXCLAMATION_SYMBOL = 1127;
    public static readonly BIT_NOT_OP = 1128;
    public static readonly BIT_OR_OP = 1129;
    public static readonly BIT_AND_OP = 1130;
    public static readonly BIT_XOR_OP = 1131;
    public static readonly DOT = 1132;
    public static readonly LR_BRACKET = 1133;
    public static readonly RR_BRACKET = 1134;
    public static readonly COMMA = 1135;
    public static readonly SEMI = 1136;
    public static readonly AT_SIGN = 1137;
    public static readonly ZERO_DECIMAL = 1138;
    public static readonly ONE_DECIMAL = 1139;
    public static readonly TWO_DECIMAL = 1140;
    public static readonly SINGLE_QUOTE_SYMB = 1141;
    public static readonly DOUBLE_QUOTE_SYMB = 1142;
    public static readonly REVERSE_QUOTE_SYMB = 1143;
    public static readonly COLON_SYMB = 1144;
    public static readonly CHARSET_REVERSE_QOUTE_STRING = 1145;
    public static readonly FILESIZE_LITERAL = 1146;
    public static readonly START_NATIONAL_STRING_LITERAL = 1147;
    public static readonly STRING_LITERAL = 1148;
    public static readonly DECIMAL_LITERAL = 1149;
    public static readonly HEXADECIMAL_LITERAL = 1150;
    public static readonly REAL_LITERAL = 1151;
    public static readonly NULL_SPEC_LITERAL = 1152;
    public static readonly BIT_STRING = 1153;
    public static readonly STRING_CHARSET_NAME = 1154;
    public static readonly DOT_ID = 1155;
    public static readonly ID = 1156;
    public static readonly REVERSE_QUOTE_ID = 1157;
    public static readonly HOST_IP_ADDRESS = 1158;
    public static readonly LOCAL_ID = 1159;
    public static readonly GLOBAL_ID = 1160;
    public static readonly ERROR_RECONGNIGION = 1161;
    public static readonly RULE_root = 0;
    public static readonly RULE_sqlStatements = 1;
    public static readonly RULE_sqlStatement = 2;
    public static readonly RULE_ddlStatement = 3;
    public static readonly RULE_dmlStatement = 4;
    public static readonly RULE_transactionStatement = 5;
    public static readonly RULE_replicationStatement = 6;
    public static readonly RULE_preparedStatement = 7;
    public static readonly RULE_compoundStatement = 8;
    public static readonly RULE_administrationStatement = 9;
    public static readonly RULE_utilityStatement = 10;
    public static readonly RULE_createDatabase = 11;
    public static readonly RULE_createEvent = 12;
    public static readonly RULE_createIndex = 13;
    public static readonly RULE_createLogfileGroup = 14;
    public static readonly RULE_createProcedure = 15;
    public static readonly RULE_createFunction = 16;
    public static readonly RULE_createRole = 17;
    public static readonly RULE_createServer = 18;
    public static readonly RULE_createTable = 19;
    public static readonly RULE_createTablespaceInnodb = 20;
    public static readonly RULE_createTablespaceNdb = 21;
    public static readonly RULE_createTrigger = 22;
    public static readonly RULE_withClause = 23;
    public static readonly RULE_commonTableExpressions = 24;
    public static readonly RULE_cteName = 25;
    public static readonly RULE_cteColumnName = 26;
    public static readonly RULE_createView = 27;
    public static readonly RULE_createDatabaseOption = 28;
    public static readonly RULE_charSet = 29;
    public static readonly RULE_currentUserExpression = 30;
    public static readonly RULE_ownerStatement = 31;
    public static readonly RULE_scheduleExpression = 32;
    public static readonly RULE_timestampValue = 33;
    public static readonly RULE_intervalExpr = 34;
    public static readonly RULE_intervalType = 35;
    public static readonly RULE_enableType = 36;
    public static readonly RULE_indexType = 37;
    public static readonly RULE_indexOption = 38;
    public static readonly RULE_procedureParameter = 39;
    public static readonly RULE_functionParameter = 40;
    public static readonly RULE_routineOption = 41;
    public static readonly RULE_serverOption = 42;
    public static readonly RULE_createDefinitions = 43;
    public static readonly RULE_createDefinition = 44;
    public static readonly RULE_columnDefinition = 45;
    public static readonly RULE_columnConstraint = 46;
    public static readonly RULE_tableConstraint = 47;
    public static readonly RULE_referenceDefinition = 48;
    public static readonly RULE_referenceAction = 49;
    public static readonly RULE_referenceControlType = 50;
    public static readonly RULE_indexColumnDefinition = 51;
    public static readonly RULE_tableOption = 52;
    public static readonly RULE_tableType = 53;
    public static readonly RULE_tablespaceStorage = 54;
    public static readonly RULE_partitionDefinitions = 55;
    public static readonly RULE_partitionFunctionDefinition = 56;
    public static readonly RULE_subpartitionFunctionDefinition = 57;
    public static readonly RULE_partitionDefinition = 58;
    public static readonly RULE_partitionDefinerAtom = 59;
    public static readonly RULE_partitionDefinerVector = 60;
    public static readonly RULE_subpartitionDefinition = 61;
    public static readonly RULE_partitionOption = 62;
    public static readonly RULE_alterDatabase = 63;
    public static readonly RULE_alterEvent = 64;
    public static readonly RULE_alterFunction = 65;
    public static readonly RULE_alterInstance = 66;
    public static readonly RULE_alterLogfileGroup = 67;
    public static readonly RULE_alterProcedure = 68;
    public static readonly RULE_alterServer = 69;
    public static readonly RULE_alterTable = 70;
    public static readonly RULE_alterTablespace = 71;
    public static readonly RULE_alterView = 72;
    public static readonly RULE_alterSpecification = 73;
    public static readonly RULE_alterPartitionSpecification = 74;
    public static readonly RULE_dropDatabase = 75;
    public static readonly RULE_dropEvent = 76;
    public static readonly RULE_dropIndex = 77;
    public static readonly RULE_dropLogfileGroup = 78;
    public static readonly RULE_dropProcedure = 79;
    public static readonly RULE_dropFunction = 80;
    public static readonly RULE_dropServer = 81;
    public static readonly RULE_dropTable = 82;
    public static readonly RULE_dropTablespace = 83;
    public static readonly RULE_dropTrigger = 84;
    public static readonly RULE_dropView = 85;
    public static readonly RULE_dropRole = 86;
    public static readonly RULE_setRole = 87;
    public static readonly RULE_renameTable = 88;
    public static readonly RULE_renameTableClause = 89;
    public static readonly RULE_truncateTable = 90;
    public static readonly RULE_callStatement = 91;
    public static readonly RULE_deleteStatement = 92;
    public static readonly RULE_doStatement = 93;
    public static readonly RULE_handlerStatement = 94;
    public static readonly RULE_insertStatement = 95;
    public static readonly RULE_loadDataStatement = 96;
    public static readonly RULE_loadXmlStatement = 97;
    public static readonly RULE_replaceStatement = 98;
    public static readonly RULE_selectStatement = 99;
    public static readonly RULE_updateStatement = 100;
    public static readonly RULE_valuesStatement = 101;
    public static readonly RULE_insertStatementValue = 102;
    public static readonly RULE_updatedElement = 103;
    public static readonly RULE_assignmentField = 104;
    public static readonly RULE_lockClause = 105;
    public static readonly RULE_singleDeleteStatement = 106;
    public static readonly RULE_multipleDeleteStatement = 107;
    public static readonly RULE_handlerOpenStatement = 108;
    public static readonly RULE_handlerReadIndexStatement = 109;
    public static readonly RULE_handlerReadStatement = 110;
    public static readonly RULE_handlerCloseStatement = 111;
    public static readonly RULE_singleUpdateStatement = 112;
    public static readonly RULE_multipleUpdateStatement = 113;
    public static readonly RULE_orderByClause = 114;
    public static readonly RULE_orderByExpression = 115;
    public static readonly RULE_tableSources = 116;
    public static readonly RULE_tableSource = 117;
    public static readonly RULE_tableSourceItem = 118;
    public static readonly RULE_indexHint = 119;
    public static readonly RULE_indexHintType = 120;
    public static readonly RULE_joinPart = 121;
    public static readonly RULE_joinSpec = 122;
    public static readonly RULE_queryExpression = 123;
    public static readonly RULE_queryExpressionNointo = 124;
    public static readonly RULE_querySpecification = 125;
    public static readonly RULE_querySpecificationNointo = 126;
    public static readonly RULE_unionParenthesis = 127;
    public static readonly RULE_unionStatement = 128;
    public static readonly RULE_lateralStatement = 129;
    public static readonly RULE_jsonTable = 130;
    public static readonly RULE_jsonColumnList = 131;
    public static readonly RULE_jsonColumn = 132;
    public static readonly RULE_jsonOnEmpty = 133;
    public static readonly RULE_jsonOnError = 134;
    public static readonly RULE_selectSpec = 135;
    public static readonly RULE_selectElements = 136;
    public static readonly RULE_selectElement = 137;
    public static readonly RULE_selectIntoExpression = 138;
    public static readonly RULE_selectFieldsInto = 139;
    public static readonly RULE_selectLinesInto = 140;
    public static readonly RULE_fromClause = 141;
    public static readonly RULE_groupByClause = 142;
    public static readonly RULE_havingClause = 143;
    public static readonly RULE_windowClause = 144;
    public static readonly RULE_groupByItem = 145;
    public static readonly RULE_limitClause = 146;
    public static readonly RULE_limitClauseAtom = 147;
    public static readonly RULE_startTransaction = 148;
    public static readonly RULE_beginWork = 149;
    public static readonly RULE_commitWork = 150;
    public static readonly RULE_rollbackWork = 151;
    public static readonly RULE_savepointStatement = 152;
    public static readonly RULE_rollbackStatement = 153;
    public static readonly RULE_releaseStatement = 154;
    public static readonly RULE_lockTables = 155;
    public static readonly RULE_unlockTables = 156;
    public static readonly RULE_setAutocommitStatement = 157;
    public static readonly RULE_setTransactionStatement = 158;
    public static readonly RULE_transactionMode = 159;
    public static readonly RULE_lockTableElement = 160;
    public static readonly RULE_lockAction = 161;
    public static readonly RULE_transactionOption = 162;
    public static readonly RULE_transactionLevel = 163;
    public static readonly RULE_changeMaster = 164;
    public static readonly RULE_changeReplicationFilter = 165;
    public static readonly RULE_purgeBinaryLogs = 166;
    public static readonly RULE_resetMaster = 167;
    public static readonly RULE_resetSlave = 168;
    public static readonly RULE_startSlave = 169;
    public static readonly RULE_stopSlave = 170;
    public static readonly RULE_startGroupReplication = 171;
    public static readonly RULE_stopGroupReplication = 172;
    public static readonly RULE_masterOption = 173;
    public static readonly RULE_stringMasterOption = 174;
    public static readonly RULE_decimalMasterOption = 175;
    public static readonly RULE_boolMasterOption = 176;
    public static readonly RULE_channelOption = 177;
    public static readonly RULE_replicationFilter = 178;
    public static readonly RULE_tablePair = 179;
    public static readonly RULE_threadType = 180;
    public static readonly RULE_untilOption = 181;
    public static readonly RULE_connectionOption = 182;
    public static readonly RULE_gtuidSet = 183;
    public static readonly RULE_xaStartTransaction = 184;
    public static readonly RULE_xaEndTransaction = 185;
    public static readonly RULE_xaPrepareStatement = 186;
    public static readonly RULE_xaCommitWork = 187;
    public static readonly RULE_xaRollbackWork = 188;
    public static readonly RULE_xaRecoverWork = 189;
    public static readonly RULE_prepareStatement = 190;
    public static readonly RULE_executeStatement = 191;
    public static readonly RULE_deallocatePrepare = 192;
    public static readonly RULE_routineBody = 193;
    public static readonly RULE_blockStatement = 194;
    public static readonly RULE_caseStatement = 195;
    public static readonly RULE_ifStatement = 196;
    public static readonly RULE_iterateStatement = 197;
    public static readonly RULE_leaveStatement = 198;
    public static readonly RULE_loopStatement = 199;
    public static readonly RULE_repeatStatement = 200;
    public static readonly RULE_returnStatement = 201;
    public static readonly RULE_whileStatement = 202;
    public static readonly RULE_cursorStatement = 203;
    public static readonly RULE_declareVariable = 204;
    public static readonly RULE_declareCondition = 205;
    public static readonly RULE_declareCursor = 206;
    public static readonly RULE_declareHandler = 207;
    public static readonly RULE_handlerConditionValue = 208;
    public static readonly RULE_procedureSqlStatement = 209;
    public static readonly RULE_caseAlternative = 210;
    public static readonly RULE_elifAlternative = 211;
    public static readonly RULE_alterUser = 212;
    public static readonly RULE_createUser = 213;
    public static readonly RULE_dropUser = 214;
    public static readonly RULE_grantStatement = 215;
    public static readonly RULE_roleOption = 216;
    public static readonly RULE_grantProxy = 217;
    public static readonly RULE_renameUser = 218;
    public static readonly RULE_revokeStatement = 219;
    public static readonly RULE_revokeProxy = 220;
    public static readonly RULE_setPasswordStatement = 221;
    public static readonly RULE_userSpecification = 222;
    public static readonly RULE_userAuthOption = 223;
    public static readonly RULE_authOptionClause = 224;
    public static readonly RULE_authenticationRule = 225;
    public static readonly RULE_tlsOption = 226;
    public static readonly RULE_userResourceOption = 227;
    public static readonly RULE_userPasswordOption = 228;
    public static readonly RULE_userLockOption = 229;
    public static readonly RULE_privelegeClause = 230;
    public static readonly RULE_privilege = 231;
    public static readonly RULE_privilegeLevel = 232;
    public static readonly RULE_renameUserClause = 233;
    public static readonly RULE_analyzeTable = 234;
    public static readonly RULE_checkTable = 235;
    public static readonly RULE_checksumTable = 236;
    public static readonly RULE_optimizeTable = 237;
    public static readonly RULE_repairTable = 238;
    public static readonly RULE_checkTableOption = 239;
    public static readonly RULE_createUdfunction = 240;
    public static readonly RULE_installPlugin = 241;
    public static readonly RULE_uninstallPlugin = 242;
    public static readonly RULE_setStatement = 243;
    public static readonly RULE_showStatement = 244;
    public static readonly RULE_variableClause = 245;
    public static readonly RULE_showCommonEntity = 246;
    public static readonly RULE_showFilter = 247;
    public static readonly RULE_showGlobalInfoClause = 248;
    public static readonly RULE_showSchemaEntity = 249;
    public static readonly RULE_showProfileType = 250;
    public static readonly RULE_binlogStatement = 251;
    public static readonly RULE_cacheIndexStatement = 252;
    public static readonly RULE_flushStatement = 253;
    public static readonly RULE_killStatement = 254;
    public static readonly RULE_loadIndexIntoCache = 255;
    public static readonly RULE_resetStatement = 256;
    public static readonly RULE_shutdownStatement = 257;
    public static readonly RULE_tableIndexes = 258;
    public static readonly RULE_flushOption = 259;
    public static readonly RULE_flushTableOption = 260;
    public static readonly RULE_loadedTableIndexes = 261;
    public static readonly RULE_simpleDescribeStatement = 262;
    public static readonly RULE_fullDescribeStatement = 263;
    public static readonly RULE_helpStatement = 264;
    public static readonly RULE_useStatement = 265;
    public static readonly RULE_signalStatement = 266;
    public static readonly RULE_resignalStatement = 267;
    public static readonly RULE_signalConditionInformation = 268;
    public static readonly RULE_withStatement = 269;
    public static readonly RULE_tableStatement = 270;
    public static readonly RULE_diagnosticsStatement = 271;
    public static readonly RULE_diagnosticsConditionInformationName = 272;
    public static readonly RULE_describeObjectClause = 273;
    public static readonly RULE_fullId = 274;
    public static readonly RULE_tableName = 275;
    public static readonly RULE_tableNames = 276;
    public static readonly RULE_roleName = 277;
    public static readonly RULE_fullColumnName = 278;
    public static readonly RULE_indexColumnName = 279;
    public static readonly RULE_simpleUserName = 280;
    public static readonly RULE_hostName = 281;
    public static readonly RULE_userName = 282;
    public static readonly RULE_mysqlVariable = 283;
    public static readonly RULE_charsetName = 284;
    public static readonly RULE_collationName = 285;
    public static readonly RULE_engineName = 286;
    public static readonly RULE_engineNameBase = 287;
    public static readonly RULE_uuidSet = 288;
    public static readonly RULE_xid = 289;
    public static readonly RULE_xuidStringId = 290;
    public static readonly RULE_authPlugin = 291;
    public static readonly RULE_uid = 292;
    public static readonly RULE_simpleId = 293;
    public static readonly RULE_dottedId = 294;
    public static readonly RULE_decimalLiteral = 295;
    public static readonly RULE_fileSizeLiteral = 296;
    public static readonly RULE_stringLiteral = 297;
    public static readonly RULE_booleanLiteral = 298;
    public static readonly RULE_hexadecimalLiteral = 299;
    public static readonly RULE_nullNotnull = 300;
    public static readonly RULE_constant = 301;
    public static readonly RULE_dataType = 302;
    public static readonly RULE_collectionOptions = 303;
    public static readonly RULE_convertedDataType = 304;
    public static readonly RULE_lengthOneDimension = 305;
    public static readonly RULE_lengthTwoDimension = 306;
    public static readonly RULE_lengthTwoOptionalDimension = 307;
    public static readonly RULE_uidList = 308;
    public static readonly RULE_fullColumnNameList = 309;
    public static readonly RULE_tables = 310;
    public static readonly RULE_indexColumnNames = 311;
    public static readonly RULE_expressions = 312;
    public static readonly RULE_expressionsWithDefaults = 313;
    public static readonly RULE_constants = 314;
    public static readonly RULE_simpleStrings = 315;
    public static readonly RULE_userVariables = 316;
    public static readonly RULE_defaultValue = 317;
    public static readonly RULE_currentTimestamp = 318;
    public static readonly RULE_expressionOrDefault = 319;
    public static readonly RULE_ifExists = 320;
    public static readonly RULE_ifNotExists = 321;
    public static readonly RULE_orReplace = 322;
    public static readonly RULE_waitNowaitClause = 323;
    public static readonly RULE_functionCall = 324;
    public static readonly RULE_specificFunction = 325;
    public static readonly RULE_caseFuncAlternative = 326;
    public static readonly RULE_levelsInWeightString = 327;
    public static readonly RULE_levelInWeightListElement = 328;
    public static readonly RULE_aggregateWindowedFunction = 329;
    public static readonly RULE_nonAggregateWindowedFunction = 330;
    public static readonly RULE_overClause = 331;
    public static readonly RULE_windowSpec = 332;
    public static readonly RULE_windowName = 333;
    public static readonly RULE_frameClause = 334;
    public static readonly RULE_frameUnits = 335;
    public static readonly RULE_frameExtent = 336;
    public static readonly RULE_frameBetween = 337;
    public static readonly RULE_frameRange = 338;
    public static readonly RULE_partitionClause = 339;
    public static readonly RULE_scalarFunctionName = 340;
    public static readonly RULE_passwordFunctionClause = 341;
    public static readonly RULE_functionArgs = 342;
    public static readonly RULE_functionArg = 343;
    public static readonly RULE_expression = 344;
    public static readonly RULE_predicate = 345;
    public static readonly RULE_expressionAtom = 346;
    public static readonly RULE_unaryOperator = 347;
    public static readonly RULE_comparisonOperator = 348;
    public static readonly RULE_logicalOperator = 349;
    public static readonly RULE_bitOperator = 350;
    public static readonly RULE_multOperator = 351;
    public static readonly RULE_addOperator = 352;
    public static readonly RULE_jsonOperator = 353;
    public static readonly RULE_charsetNameBase = 354;
    public static readonly RULE_transactionLevelBase = 355;
    public static readonly RULE_privilegesBase = 356;
    public static readonly RULE_intervalTypeBase = 357;
    public static readonly RULE_dataTypeBase = 358;
    public static readonly RULE_keywordsCanBeId = 359;
    public static readonly RULE_functionNameBase = 360;

    public static readonly literalNames = [
        null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
        "'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'ATTRIBUTE'", 
        "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", 
        "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", 
        "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
        "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_ROLE'", 
        "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
        "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
        "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", 
        "'ELSE'", "'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ENFORCED'", "'ESCAPED'", 
        "'EXCEPT'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
        "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", 
        "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", 
        "'IF'", "'IGNORE'", "'IGNORED'", "'IN'", "'INDEX'", "'INFILE'", 
        "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", 
        "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LATERAL'", 
        "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", 
        "'LINES'", "'LOAD'", "'LOCK'", "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", 
        "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
        "'MINVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
        "'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", 
        "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", 
        "'OVER'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
        "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
        "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", 
        "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", 
        "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", 
        "'SIGNAL'", "'SKIP'", "'SKIP_QUERY_REWRITE'", "'SPATIAL'", "'SQL'", 
        "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
        "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", 
        "'STARTING'", "'STATEMENT'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", 
        "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", 
        "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", 
        "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
        "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
        "'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
        "'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", 
        "'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", 
        "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", 
        "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", 
        "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", 
        "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", 
        "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", 
        "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
        "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
        "'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'", "'JSON_ARRAY_APPEND'", 
        "'JSON_ARRAY_INSERT'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", 
        "'JSON_DEPTH'", "'JSON_EXTRACT'", "'JSON_INSERT'", "'JSON_KEYS'", 
        "'JSON_LENGTH'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", 
        "'JSON_OBJECT'", "'JSON_OBJECTAGG'", "'JSON_OVERLAPS'", "'JSON_PRETTY'", 
        "'JSON_QUOTE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SCHEMA_VALID'", 
        "'JSON_SCHEMA_VALIDATION_REPORT'", "'JSON_SEARCH'", "'JSON_SET'", 
        "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_TABLE'", "'JSON_TYPE'", 
        "'JSON_UNQUOTE'", "'JSON_VALID'", "'JSON_VALUE'", "'NESTED'", "'ORDINALITY'", 
        "'PATH'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
        "'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", 
        "'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", 
        "'NTH_VALUE'", "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", 
        "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", 
        "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
        "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
        "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
        "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
        "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
        "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
        "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
        "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", 
        "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", 
        "'CHECKSUM'", "'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", 
        "'CLOSE'", "'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'", 
        "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
        "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", 
        "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", 
        "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", 
        "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CYCLE'", "'CURSOR_NAME'", 
        "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", 
        "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", 
        "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
        "'ENABLE'", "'ENCRYPTED'", "'ENCRYPTION'", "'ENCRYPTION_KEY_ID'", 
        "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", 
        "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
        "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
        "'FAILED_LOGIN_ATTEMPTS'", "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
        "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", 
        "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
        "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HISTORY'", 
        "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", 
        "'INCREMENT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
        "'INSTALL'", "'INSTANCE'", "'INSTANT'", "'INVISIBLE'", "'INVOKER'", 
        "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", 
        "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", 
        "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
        "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", 
        "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
        "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
        "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
        "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", 
        "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
        "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
        "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
        "'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
        "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", 
        "'NEXT'", "'NO'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", 
        "'NOMINVALUE'", "'NOWAIT'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", 
        "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", 
        "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", 
        "'PACK_KEYS'", "'PAGE'", "'PAGE_COMPRESSED'", "'PAGE_COMPRESSION_LEVEL'", 
        "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
        "'PASSWORD_LOCK_TIME'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", 
        "'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", "'PRESERVE'", 
        "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
        "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", 
        "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", 
        "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", 
        "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", 
        "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", 
        "'REPLICATION'", "'RESET'", "'RESTART'", "'RESUME'", "'RETURNED_SQLSTATE'", 
        "'RETURNING'", "'RETURNS'", "'REUSE'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", 
        "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", 
        "'SCHEDULE'", "'SECURITY'", "'SEQUENCE'", "'SERVER'", "'SESSION'", 
        "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", 
        "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", 
        "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
        "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
        "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
        "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
        "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", 
        "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", 
        "'TABLESPACE'", "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", 
        "'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", 
        "'TRUNCATE'", "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
        "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
        "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", 
        "'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'", 
        "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", "'YES'", "'EUR'", 
        "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'", 
        "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
        "'ADMIN'", "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ABORT_EXEMPT'", 
        "'AUDIT_ADMIN'", "'AUTHENTICATION_POLICY_ADMIN'", "'BACKUP_ADMIN'", 
        "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", 
        "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'EXECUTE'", "'FILE'", 
        "'FIREWALL_ADMIN'", "'FIREWALL_EXEMPT'", "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", 
        "'FLUSH_STATUS'", "'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", 
        "'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", "'INVOKE'", 
        "'LAMBDA'", "'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", "'PERSIST_RO_VARIABLES_ADMIN'", 
        "'PRIVILEGES'", "'PROCESS'", "'RELOAD'", "'REPLICATION_APPLIER'", 
        "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", 
        "'ROLE_ADMIN'", "'ROUTINE'", "'S3'", "'SERVICE_CONNECTION_ADMIN'", 
        null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SHUTDOWN'", "'SUPER'", 
        "'SYSTEM_VARIABLES_ADMIN'", "'TABLES'", "'TABLE_ENCRYPTION_ADMIN'", 
        "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
        "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", 
        "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", 
        "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", 
        "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", 
        "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", 
        "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", 
        "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
        "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", 
        "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", 
        "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
        "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", 
        "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", 
        "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", 
        "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", 
        "'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", 
        "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", 
        "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
        "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
        "'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
        "'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
        "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
        "'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
        "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
        "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
        "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
        "'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", 
        "'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", 
        "'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", 
        "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", 
        "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", 
        "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", "'GEOMFROMWKB'", 
        "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", "'GTID_SUBSET'", 
        "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", "'INET6_NTOA'", 
        "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", "'INTERSECTS'", 
        "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
        "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", 
        "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", 
        "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", 
        "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", 
        "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", 
        "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", 
        "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
        "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
        "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
        "'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
        "'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", 
        "'NULLIF'", "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", 
        "'OCT'", "'OCTET_LENGTH'", "'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", 
        "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", "'POINTFROMWKB'", "'POINTN'", 
        "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", "'POLYGONFROMWKB'", 
        "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", "'RANDOM'", 
        "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
        "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
        "'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", 
        "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
        "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", 
        "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", 
        "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", 
        "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", "'ST_DISTANCE'", 
        "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
        "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
        "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
        "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", 
        "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", 
        "'ST_INTERSECTION'", "'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", 
        "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", 
        "'ST_LINESTRINGFROMWKB'", "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", 
        "'ST_NUMINTERIORRINGS'", "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", 
        "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", 
        "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", 
        "'ST_SYMDIFFERENCE'", "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", 
        "'ST_X'", "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", "'SUBTIME'", 
        "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", 
        "'TIME_FORMAT'", "'TIME_TO_SEC'", "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", 
        "'TO_SECONDS'", "'TP_CONNECTION_ADMIN'", "'UCASE'", "'UNCOMPRESS'", 
        "'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
        "'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
        "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", 
        "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", 
        "'X'", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", 
        "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", 
        "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'('", "')'", 
        "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", 
        "':'"
    ];

    public static readonly symbolicNames = [
        null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
        "ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", 
        "ASC", "ATTRIBUTE", "BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", 
        "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", "CHECK", 
        "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
        "CREATE", "CROSS", "CURRENT", "CURRENT_ROLE", "CURRENT_USER", "CURSOR", 
        "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
        "DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", 
        "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", 
        "ENFORCED", "ESCAPED", "EXCEPT", "EXISTS", "EXIT", "EXPLAIN", "FALSE", 
        "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", 
        "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "HISTOGRAM", 
        "IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", "INOUT", 
        "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", 
        "KILL", "LATERAL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", 
        "LINEAR", "LINES", "LOAD", "LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", 
        "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", 
        "MINVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
        "NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONAL", 
        "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "OVER", 
        "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS", 
        "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", 
        "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", "RETURN", "REVOKE", 
        "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
        "SHOW", "SIGNAL", "SKIP_", "SKIP_QUERY_REWRITE", "SPATIAL", "SQL", 
        "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
        "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", "STATEMENT", "STRAIGHT_JOIN", 
        "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", 
        "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", 
        "USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", 
        "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "MIDDLEINT", 
        "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", 
        "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", 
        "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", 
        "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
        "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", 
        "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
        "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
        "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
        "DAY_MICROSECOND", "JSON_ARRAY", "JSON_ARRAYAGG", "JSON_ARRAY_APPEND", 
        "JSON_ARRAY_INSERT", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_DEPTH", 
        "JSON_EXTRACT", "JSON_INSERT", "JSON_KEYS", "JSON_LENGTH", "JSON_MERGE", 
        "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_OBJECT", "JSON_OBJECTAGG", 
        "JSON_OVERLAPS", "JSON_PRETTY", "JSON_QUOTE", "JSON_REMOVE", "JSON_REPLACE", 
        "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", "JSON_SEARCH", 
        "JSON_SET", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_TABLE", 
        "JSON_TYPE", "JSON_UNQUOTE", "JSON_VALID", "JSON_VALUE", "NESTED", 
        "ORDINALITY", "PATH", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", 
        "CUME_DIST", "DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", 
        "LAST_VALUE", "LEAD", "MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", 
        "RANK", "ROW_NUMBER", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", 
        "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", 
        "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", 
        "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", 
        "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
        "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", 
        "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
        "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", 
        "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", 
        "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "CLUSTERING", "COALESCE", 
        "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", "COMMIT", 
        "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", 
        "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
        "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", 
        "CPU", "CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", 
        "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", 
        "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", 
        "ENABLE", "ENCRYPTED", "ENCRYPTION", "ENCRYPTION_KEY_ID", "END", 
        "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", 
        "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", 
        "EXTENDED", "EXTENT_SIZE", "FAILED_LOGIN_ATTEMPTS", "FAST", "FAULTS", 
        "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", 
        "FOLLOWING", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", 
        "GLOBAL", "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", 
        "HISTORY", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", 
        "INCREMENT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", 
        "INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", "IO", 
        "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
        "LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", 
        "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", 
        "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", 
        "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", 
        "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", 
        "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", 
        "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
        "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
        "MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", 
        "MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", 
        "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO", 
        "NOCACHE", "NOCOPY", "NOCYCLE", "NOMAXVALUE", "NOMINVALUE", "NOWAIT", 
        "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", 
        "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", 
        "PACK_KEYS", "PAGE", "PAGE_COMPRESSED", "PAGE_COMPRESSION_LEVEL", 
        "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PASSWORD_LOCK_TIME", 
        "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
        "PRECEDING", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", 
        "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", "RECURSIVE", 
        "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
        "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
        "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
        "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
        "REPLICATION", "RESET", "RESTART", "RESUME", "RETURNED_SQLSTATE", 
        "RETURNING", "RETURNS", "REUSE", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", 
        "ROW", "ROWS", "ROW_FORMAT", "RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", 
        "SEQUENCE", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", 
        "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
        "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
        "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", 
        "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
        "STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", 
        "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", 
        "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", 
        "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", 
        "TRIGGERS", "TRUNCATE", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
        "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
        "VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", 
        "WAIT", "WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", 
        "XA", "XML", "YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", 
        "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
        "ADMIN", "APPLICATION_PASSWORD_ADMIN", "AUDIT_ABORT_EXEMPT", "AUDIT_ADMIN", 
        "AUTHENTICATION_POLICY_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
        "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "EXECUTE", 
        "FILE", "FIREWALL_ADMIN", "FIREWALL_EXEMPT", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", 
        "FLUSH_STATUS", "FLUSH_TABLES", "FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", 
        "INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", "INVOKE", "LAMBDA", 
        "NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", "PERSIST_RO_VARIABLES_ADMIN", 
        "PRIVILEGES", "PROCESS", "RELOAD", "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", 
        "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", "ROLE_ADMIN", "ROUTINE", 
        "S3", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", "SET_USER_ID", 
        "SHOW_ROUTINE", "SHUTDOWN", "SUPER", "SYSTEM_VARIABLES_ADMIN", "TABLES", 
        "TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
        "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
        "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", 
        "GB18030", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", 
        "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", 
        "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", 
        "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", 
        "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", 
        "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", 
        "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
        "GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
        "MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
        "AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
        "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
        "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
        "BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", 
        "CEILING", "CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", 
        "COERCIBILITY", "COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", 
        "CONNECTION_ID", "CONV", "CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
        "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", "CREATE_DIGEST", 
        "CROSSES", "DATEDIFF", "DATE_FORMAT", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", 
        "DAYOFYEAR", "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", 
        "DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", "ENDPOINT", 
        "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
        "EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
        "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", 
        "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
        "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", 
        "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", "GLENGTH", 
        "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", 
        "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
        "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", 
        "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK", 
        "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
        "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", "LOCATE", 
        "LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME", 
        "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", 
        "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", 
        "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
        "MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
        "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
        "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", 
        "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH", 
        "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT", 
        "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
        "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM", 
        "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
        "RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
        "SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
        "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
        "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
        "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", 
        "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", 
        "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
        "ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
        "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
        "ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
        "ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
        "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", 
        "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
        "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
        "ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
        "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
        "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
        "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
        "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
        "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
        "TP_CONNECTION_ADMIN", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", 
        "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", "UUID", "UUID_SHORT", 
        "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
        "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", 
        "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
        "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
        "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", 
        "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
        "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", 
        "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", 
        "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
        "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
        "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
        "HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
        "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "HOST_IP_ADDRESS", 
        "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
    ];
    public static readonly ruleNames = [
        "root", "sqlStatements", "sqlStatement", "ddlStatement", "dmlStatement", 
        "transactionStatement", "replicationStatement", "preparedStatement", 
        "compoundStatement", "administrationStatement", "utilityStatement", 
        "createDatabase", "createEvent", "createIndex", "createLogfileGroup", 
        "createProcedure", "createFunction", "createRole", "createServer", 
        "createTable", "createTablespaceInnodb", "createTablespaceNdb", 
        "createTrigger", "withClause", "commonTableExpressions", "cteName", 
        "cteColumnName", "createView", "createDatabaseOption", "charSet", 
        "currentUserExpression", "ownerStatement", "scheduleExpression", 
        "timestampValue", "intervalExpr", "intervalType", "enableType", 
        "indexType", "indexOption", "procedureParameter", "functionParameter", 
        "routineOption", "serverOption", "createDefinitions", "createDefinition", 
        "columnDefinition", "columnConstraint", "tableConstraint", "referenceDefinition", 
        "referenceAction", "referenceControlType", "indexColumnDefinition", 
        "tableOption", "tableType", "tablespaceStorage", "partitionDefinitions", 
        "partitionFunctionDefinition", "subpartitionFunctionDefinition", 
        "partitionDefinition", "partitionDefinerAtom", "partitionDefinerVector", 
        "subpartitionDefinition", "partitionOption", "alterDatabase", "alterEvent", 
        "alterFunction", "alterInstance", "alterLogfileGroup", "alterProcedure", 
        "alterServer", "alterTable", "alterTablespace", "alterView", "alterSpecification", 
        "alterPartitionSpecification", "dropDatabase", "dropEvent", "dropIndex", 
        "dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", 
        "dropTable", "dropTablespace", "dropTrigger", "dropView", "dropRole", 
        "setRole", "renameTable", "renameTableClause", "truncateTable", 
        "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
        "insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
        "selectStatement", "updateStatement", "valuesStatement", "insertStatementValue", 
        "updatedElement", "assignmentField", "lockClause", "singleDeleteStatement", 
        "multipleDeleteStatement", "handlerOpenStatement", "handlerReadIndexStatement", 
        "handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", 
        "multipleUpdateStatement", "orderByClause", "orderByExpression", 
        "tableSources", "tableSource", "tableSourceItem", "indexHint", "indexHintType", 
        "joinPart", "joinSpec", "queryExpression", "queryExpressionNointo", 
        "querySpecification", "querySpecificationNointo", "unionParenthesis", 
        "unionStatement", "lateralStatement", "jsonTable", "jsonColumnList", 
        "jsonColumn", "jsonOnEmpty", "jsonOnError", "selectSpec", "selectElements", 
        "selectElement", "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
        "fromClause", "groupByClause", "havingClause", "windowClause", "groupByItem", 
        "limitClause", "limitClauseAtom", "startTransaction", "beginWork", 
        "commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
        "releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
        "setTransactionStatement", "transactionMode", "lockTableElement", 
        "lockAction", "transactionOption", "transactionLevel", "changeMaster", 
        "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", "resetSlave", 
        "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
        "masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
        "channelOption", "replicationFilter", "tablePair", "threadType", 
        "untilOption", "connectionOption", "gtuidSet", "xaStartTransaction", 
        "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", "xaRollbackWork", 
        "xaRecoverWork", "prepareStatement", "executeStatement", "deallocatePrepare", 
        "routineBody", "blockStatement", "caseStatement", "ifStatement", 
        "iterateStatement", "leaveStatement", "loopStatement", "repeatStatement", 
        "returnStatement", "whileStatement", "cursorStatement", "declareVariable", 
        "declareCondition", "declareCursor", "declareHandler", "handlerConditionValue", 
        "procedureSqlStatement", "caseAlternative", "elifAlternative", "alterUser", 
        "createUser", "dropUser", "grantStatement", "roleOption", "grantProxy", 
        "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
        "userSpecification", "userAuthOption", "authOptionClause", "authenticationRule", 
        "tlsOption", "userResourceOption", "userPasswordOption", "userLockOption", 
        "privelegeClause", "privilege", "privilegeLevel", "renameUserClause", 
        "analyzeTable", "checkTable", "checksumTable", "optimizeTable", 
        "repairTable", "checkTableOption", "createUdfunction", "installPlugin", 
        "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
        "showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
        "showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement", 
        "killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
        "tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
        "simpleDescribeStatement", "fullDescribeStatement", "helpStatement", 
        "useStatement", "signalStatement", "resignalStatement", "signalConditionInformation", 
        "withStatement", "tableStatement", "diagnosticsStatement", "diagnosticsConditionInformationName", 
        "describeObjectClause", "fullId", "tableName", "tableNames", "roleName", 
        "fullColumnName", "indexColumnName", "simpleUserName", "hostName", 
        "userName", "mysqlVariable", "charsetName", "collationName", "engineName", 
        "engineNameBase", "uuidSet", "xid", "xuidStringId", "authPlugin", 
        "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", 
        "stringLiteral", "booleanLiteral", "hexadecimalLiteral", "nullNotnull", 
        "constant", "dataType", "collectionOptions", "convertedDataType", 
        "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
        "uidList", "fullColumnNameList", "tables", "indexColumnNames", "expressions", 
        "expressionsWithDefaults", "constants", "simpleStrings", "userVariables", 
        "defaultValue", "currentTimestamp", "expressionOrDefault", "ifExists", 
        "ifNotExists", "orReplace", "waitNowaitClause", "functionCall", 
        "specificFunction", "caseFuncAlternative", "levelsInWeightString", 
        "levelInWeightListElement", "aggregateWindowedFunction", "nonAggregateWindowedFunction", 
        "overClause", "windowSpec", "windowName", "frameClause", "frameUnits", 
        "frameExtent", "frameBetween", "frameRange", "partitionClause", 
        "scalarFunctionName", "passwordFunctionClause", "functionArgs", 
        "functionArg", "expression", "predicate", "expressionAtom", "unaryOperator", 
        "comparisonOperator", "logicalOperator", "bitOperator", "multOperator", 
        "addOperator", "jsonOperator", "charsetNameBase", "transactionLevelBase", 
        "privilegesBase", "intervalTypeBase", "dataTypeBase", "keywordsCanBeId", 
        "functionNameBase",
    ];

    public get grammarFileName(): string { return "MySqlParser.g4"; }
    public get literalNames(): (string | null)[] { return MySqlParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return MySqlParser.symbolicNames; }
    public get ruleNames(): string[] { return MySqlParser.ruleNames; }
    public get serializedATN(): number[] { return MySqlParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, MySqlParser._ATN, MySqlParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, MySqlParser.RULE_root);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 723;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 0, this.context) ) {
            case 1:
                {
                this.state = 722;
                this.sqlStatements();
                }
                break;
            }
            this.state = 725;
            this.match(MySqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlStatements(): SqlStatementsContext {
        let localContext = new SqlStatementsContext(this.context, this.state);
        this.enterRule(localContext, 2, MySqlParser.RULE_sqlStatements);
        let _la: number;
        try {
            this.state = 736;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 727;
                this.sqlStatement();
                this.state = 729;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1136) {
                    {
                    this.state = 728;
                    this.match(MySqlParser.SEMI);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 731;
                this.sqlStatement();
                this.state = 732;
                this.match(MySqlParser.SEMI);
                this.state = 733;
                this.sqlStatements();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlStatement(): SqlStatementContext {
        let localContext = new SqlStatementContext(this.context, this.state);
        this.enterRule(localContext, 4, MySqlParser.RULE_sqlStatement);
        try {
            this.state = 745;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 738;
                this.ddlStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 739;
                this.dmlStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 740;
                this.transactionStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 741;
                this.replicationStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 742;
                this.preparedStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 743;
                this.administrationStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 744;
                this.utilityStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ddlStatement(): DdlStatementContext {
        let localContext = new DdlStatementContext(this.context, this.state);
        this.enterRule(localContext, 6, MySqlParser.RULE_ddlStatement);
        try {
            this.state = 785;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 4, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 747;
                this.createDatabase();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 748;
                this.createEvent();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 749;
                this.createIndex();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 750;
                this.createLogfileGroup();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 751;
                this.createProcedure();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 752;
                this.createFunction();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 753;
                this.createServer();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 754;
                this.createTable();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 755;
                this.createTablespaceInnodb();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 756;
                this.createTablespaceNdb();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 757;
                this.createTrigger();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 758;
                this.createView();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 759;
                this.createRole();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 760;
                this.alterDatabase();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 761;
                this.alterEvent();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 762;
                this.alterFunction();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 763;
                this.alterInstance();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 764;
                this.alterLogfileGroup();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 765;
                this.alterProcedure();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 766;
                this.alterServer();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 767;
                this.alterTable();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 768;
                this.alterTablespace();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 769;
                this.alterView();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 770;
                this.dropDatabase();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 771;
                this.dropEvent();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 772;
                this.dropIndex();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 773;
                this.dropLogfileGroup();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 774;
                this.dropProcedure();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 775;
                this.dropFunction();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 776;
                this.dropServer();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 777;
                this.dropTable();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 778;
                this.dropTablespace();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 779;
                this.dropTrigger();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 780;
                this.dropView();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 781;
                this.dropRole();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 782;
                this.setRole();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 783;
                this.renameTable();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 784;
                this.truncateTable();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dmlStatement(): DmlStatementContext {
        let localContext = new DmlStatementContext(this.context, this.state);
        this.enterRule(localContext, 8, MySqlParser.RULE_dmlStatement);
        try {
            this.state = 800;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 5, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 787;
                this.selectStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 788;
                this.insertStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 789;
                this.updateStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 790;
                this.deleteStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 791;
                this.replaceStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 792;
                this.callStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 793;
                this.loadDataStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 794;
                this.loadXmlStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 795;
                this.doStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 796;
                this.handlerStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 797;
                this.valuesStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 798;
                this.withStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 799;
                this.tableStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionStatement(): TransactionStatementContext {
        let localContext = new TransactionStatementContext(this.context, this.state);
        this.enterRule(localContext, 10, MySqlParser.RULE_transactionStatement);
        try {
            this.state = 811;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 6, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 802;
                this.startTransaction();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 803;
                this.beginWork();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 804;
                this.commitWork();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 805;
                this.rollbackWork();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 806;
                this.savepointStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 807;
                this.rollbackStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 808;
                this.releaseStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 809;
                this.lockTables();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 810;
                this.unlockTables();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replicationStatement(): ReplicationStatementContext {
        let localContext = new ReplicationStatementContext(this.context, this.state);
        this.enterRule(localContext, 12, MySqlParser.RULE_replicationStatement);
        try {
            this.state = 828;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 813;
                this.changeMaster();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 814;
                this.changeReplicationFilter();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 815;
                this.purgeBinaryLogs();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 816;
                this.resetMaster();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 817;
                this.resetSlave();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 818;
                this.startSlave();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 819;
                this.stopSlave();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 820;
                this.startGroupReplication();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 821;
                this.stopGroupReplication();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 822;
                this.xaStartTransaction();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 823;
                this.xaEndTransaction();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 824;
                this.xaPrepareStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 825;
                this.xaCommitWork();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 826;
                this.xaRollbackWork();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 827;
                this.xaRecoverWork();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preparedStatement(): PreparedStatementContext {
        let localContext = new PreparedStatementContext(this.context, this.state);
        this.enterRule(localContext, 14, MySqlParser.RULE_preparedStatement);
        try {
            this.state = 833;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.PREPARE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 830;
                this.prepareStatement();
                }
                break;
            case MySqlParser.EXECUTE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 831;
                this.executeStatement();
                }
                break;
            case MySqlParser.DROP:
            case MySqlParser.DEALLOCATE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 832;
                this.deallocatePrepare();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compoundStatement(): CompoundStatementContext {
        let localContext = new CompoundStatementContext(this.context, this.state);
        this.enterRule(localContext, 16, MySqlParser.RULE_compoundStatement);
        try {
            this.state = 845;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 835;
                this.blockStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 836;
                this.caseStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 837;
                this.ifStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 838;
                this.leaveStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 839;
                this.loopStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 840;
                this.repeatStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 841;
                this.whileStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 842;
                this.iterateStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 843;
                this.returnStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 844;
                this.cursorStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public administrationStatement(): AdministrationStatementContext {
        let localContext = new AdministrationStatementContext(this.context, this.state);
        this.enterRule(localContext, 18, MySqlParser.RULE_administrationStatement);
        try {
            this.state = 872;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 10, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 847;
                this.alterUser();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 848;
                this.createUser();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 849;
                this.dropUser();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 850;
                this.grantStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 851;
                this.grantProxy();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 852;
                this.renameUser();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 853;
                this.revokeStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 854;
                this.revokeProxy();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 855;
                this.analyzeTable();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 856;
                this.checkTable();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 857;
                this.checksumTable();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 858;
                this.optimizeTable();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 859;
                this.repairTable();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 860;
                this.createUdfunction();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 861;
                this.installPlugin();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 862;
                this.uninstallPlugin();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 863;
                this.setStatement();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 864;
                this.showStatement();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 865;
                this.binlogStatement();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 866;
                this.cacheIndexStatement();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 867;
                this.flushStatement();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 868;
                this.killStatement();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 869;
                this.loadIndexIntoCache();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 870;
                this.resetStatement();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 871;
                this.shutdownStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public utilityStatement(): UtilityStatementContext {
        let localContext = new UtilityStatementContext(this.context, this.state);
        this.enterRule(localContext, 20, MySqlParser.RULE_utilityStatement);
        try {
            this.state = 881;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 11, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 874;
                this.simpleDescribeStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 875;
                this.fullDescribeStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 876;
                this.helpStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 877;
                this.useStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 878;
                this.signalStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 879;
                this.resignalStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 880;
                this.diagnosticsStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabase(): CreateDatabaseContext {
        let localContext = new CreateDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 22, MySqlParser.RULE_createDatabase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 883;
            this.match(MySqlParser.CREATE);
            this.state = 884;
            localContext._dbFormat = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 39 || _la === 150)) {
                localContext._dbFormat = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 886;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 12, this.context) ) {
            case 1:
                {
                this.state = 885;
                this.ifNotExists();
                }
                break;
            }
            this.state = 888;
            this.uid();
            this.state = 892;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la === 134 || _la === 222 || _la === 405 || _la === 841) {
                {
                {
                this.state = 889;
                this.createDatabaseOption();
                }
                }
                this.state = 894;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createEvent(): CreateEventContext {
        let localContext = new CreateEventContext(this.context, this.state);
        this.enterRule(localContext, 24, MySqlParser.RULE_createEvent);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 895;
            this.match(MySqlParser.CREATE);
            this.state = 897;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 392) {
                {
                this.state = 896;
                this.ownerStatement();
                }
            }

            this.state = 899;
            this.match(MySqlParser.EVENT);
            this.state = 901;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
            case 1:
                {
                this.state = 900;
                this.ifNotExists();
                }
                break;
            }
            this.state = 903;
            this.fullId();
            this.state = 904;
            this.match(MySqlParser.ON);
            this.state = 905;
            this.match(MySqlParser.SCHEDULE);
            this.state = 906;
            this.scheduleExpression();
            this.state = 913;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118) {
                {
                this.state = 907;
                this.match(MySqlParser.ON);
                this.state = 908;
                this.match(MySqlParser.COMPLETION);
                this.state = 910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 114) {
                    {
                    this.state = 909;
                    this.match(MySqlParser.NOT);
                    }
                }

                this.state = 912;
                this.match(MySqlParser.PRESERVE);
                }
            }

            this.state = 916;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 396 || _la === 403) {
                {
                this.state = 915;
                this.enableType();
                }
            }

            this.state = 920;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 368) {
                {
                this.state = 918;
                this.match(MySqlParser.COMMENT);
                this.state = 919;
                this.match(MySqlParser.STRING_LITERAL);
                }
            }

            this.state = 922;
            this.match(MySqlParser.DO);
            this.state = 923;
            this.routineBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndex(): CreateIndexContext {
        let localContext = new CreateIndexContext(this.context, this.state);
        this.enterRule(localContext, 26, MySqlParser.RULE_createIndex);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 925;
            this.match(MySqlParser.CREATE);
            this.state = 927;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 531 || _la === 537) {
                {
                this.state = 926;
                localContext._intimeAction = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 531 || _la === 537)) {
                    localContext._intimeAction = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 930;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 69 || _la === 159 || _la === 181) {
                {
                this.state = 929;
                localContext._indexCategory = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 69 || _la === 159 || _la === 181)) {
                    localContext._indexCategory = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 932;
            this.match(MySqlParser.INDEX);
            this.state = 933;
            this.uid();
            this.state = 935;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 187) {
                {
                this.state = 934;
                this.indexType();
                }
            }

            this.state = 937;
            this.match(MySqlParser.ON);
            this.state = 938;
            this.tableName();
            this.state = 939;
            this.indexColumnNames();
            this.state = 943;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 187 || _la === 192 || _la === 368 || _la === 459 || _la === 467 || _la === 673 || _la === 875 || _la === 1000) {
                {
                {
                this.state = 940;
                this.indexOption();
                }
                }
                this.state = 945;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 958;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 103 || _la === 336) {
                {
                this.state = 956;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ALGORITHM:
                    {
                    this.state = 946;
                    this.match(MySqlParser.ALGORITHM);
                    this.state = 948;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1124) {
                        {
                        this.state = 947;
                        this.match(MySqlParser.EQUAL_SYMBOL);
                        }
                    }

                    this.state = 950;
                    localContext._algType = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 42 || _la === 384 || _la === 454)) {
                        localContext._algType = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case MySqlParser.LOCK:
                    {
                    this.state = 951;
                    this.match(MySqlParser.LOCK);
                    this.state = 953;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1124) {
                        {
                        this.state = 952;
                        this.match(MySqlParser.EQUAL_SYMBOL);
                        }
                    }

                    this.state = 955;
                    localContext._lockType = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 42 || _la === 419 || _la === 529 || _la === 611)) {
                        localContext._lockType = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 960;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createLogfileGroup(): CreateLogfileGroupContext {
        let localContext = new CreateLogfileGroupContext(this.context, this.state);
        this.enterRule(localContext, 28, MySqlParser.RULE_createLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 961;
            this.match(MySqlParser.CREATE);
            this.state = 962;
            this.match(MySqlParser.LOGFILE);
            this.state = 963;
            this.match(MySqlParser.GROUP);
            this.state = 964;
            this.uid();
            this.state = 965;
            this.match(MySqlParser.ADD);
            this.state = 966;
            this.match(MySqlParser.UNDOFILE);
            this.state = 967;
            localContext._undoFile = this.match(MySqlParser.STRING_LITERAL);
            this.state = 973;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 453) {
                {
                this.state = 968;
                this.match(MySqlParser.INITIAL_SIZE);
                this.state = 970;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 969;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 972;
                localContext._initSize = this.fileSizeLiteral();
                }
            }

            this.state = 980;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 660) {
                {
                this.state = 975;
                this.match(MySqlParser.UNDO_BUFFER_SIZE);
                this.state = 977;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 976;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 979;
                localContext._undoSize = this.fileSizeLiteral();
                }
            }

            this.state = 987;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 572) {
                {
                this.state = 982;
                this.match(MySqlParser.REDO_BUFFER_SIZE);
                this.state = 984;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 983;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 986;
                localContext._redoSize = this.fileSizeLiteral();
                }
            }

            this.state = 994;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 528) {
                {
                this.state = 989;
                this.match(MySqlParser.NODEGROUP);
                this.state = 991;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 990;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 993;
                this.uid();
                }
            }

            this.state = 997;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 674) {
                {
                this.state = 996;
                this.match(MySqlParser.WAIT);
                }
            }

            this.state = 1004;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 368) {
                {
                this.state = 999;
                this.match(MySqlParser.COMMENT);
                this.state = 1001;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1000;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1003;
                localContext._comment = this.match(MySqlParser.STRING_LITERAL);
                }
            }

            this.state = 1006;
            this.match(MySqlParser.ENGINE);
            this.state = 1008;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1124) {
                {
                this.state = 1007;
                this.match(MySqlParser.EQUAL_SYMBOL);
                }
            }

            this.state = 1010;
            this.engineName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createProcedure(): CreateProcedureContext {
        let localContext = new CreateProcedureContext(this.context, this.state);
        this.enterRule(localContext, 30, MySqlParser.RULE_createProcedure);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1012;
            this.match(MySqlParser.CREATE);
            this.state = 1014;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 392) {
                {
                this.state = 1013;
                this.ownerStatement();
                }
            }

            this.state = 1016;
            this.match(MySqlParser.PROCEDURE);
            this.state = 1017;
            this.fullId();
            this.state = 1018;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 1020;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18880721) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172658065) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                {
                this.state = 1019;
                this.procedureParameter();
                }
            }

            this.state = 1026;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 1022;
                this.match(MySqlParser.COMMA);
                this.state = 1023;
                this.procedureParameter();
                }
                }
                this.state = 1028;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1029;
            this.match(MySqlParser.RR_BRACKET);
            this.state = 1033;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 43, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1030;
                    this.routineOption();
                    }
                    }
                }
                this.state = 1035;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 43, this.context);
            }
            this.state = 1036;
            this.routineBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFunction(): CreateFunctionContext {
        let localContext = new CreateFunctionContext(this.context, this.state);
        this.enterRule(localContext, 32, MySqlParser.RULE_createFunction);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1038;
            this.match(MySqlParser.CREATE);
            this.state = 1040;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 392) {
                {
                this.state = 1039;
                this.ownerStatement();
                }
            }

            this.state = 1043;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 335) {
                {
                this.state = 1042;
                this.match(MySqlParser.AGGREGATE);
                }
            }

            this.state = 1045;
            this.match(MySqlParser.FUNCTION);
            this.state = 1047;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 46, this.context) ) {
            case 1:
                {
                this.state = 1046;
                this.ifNotExists();
                }
                break;
            }
            this.state = 1049;
            this.fullId();
            this.state = 1050;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 1052;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                {
                this.state = 1051;
                this.functionParameter();
                }
            }

            this.state = 1058;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 1054;
                this.match(MySqlParser.COMMA);
                this.state = 1055;
                this.functionParameter();
                }
                }
                this.state = 1060;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1061;
            this.match(MySqlParser.RR_BRACKET);
            this.state = 1062;
            this.match(MySqlParser.RETURNS);
            this.state = 1063;
            this.dataType();
            this.state = 1067;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 49, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1064;
                    this.routineOption();
                    }
                    }
                }
                this.state = 1069;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 49, this.context);
            }
            this.state = 1072;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ALTER:
            case MySqlParser.ANALYZE:
            case MySqlParser.ARRAY:
            case MySqlParser.ATTRIBUTE:
            case MySqlParser.BUCKETS:
            case MySqlParser.CALL:
            case MySqlParser.CHANGE:
            case MySqlParser.CHECK:
            case MySqlParser.CONDITION:
            case MySqlParser.CREATE:
            case MySqlParser.CURRENT:
            case MySqlParser.CURRENT_USER:
            case MySqlParser.DATABASE:
            case MySqlParser.DEFAULT:
            case MySqlParser.DELETE:
            case MySqlParser.DESC:
            case MySqlParser.DESCRIBE:
            case MySqlParser.DIAGNOSTICS:
            case MySqlParser.DROP:
            case MySqlParser.EMPTY:
            case MySqlParser.ENFORCED:
            case MySqlParser.EXCEPT:
            case MySqlParser.EXPLAIN:
            case MySqlParser.GET:
            case MySqlParser.GRANT:
            case MySqlParser.GROUP:
            case MySqlParser.IF:
            case MySqlParser.IGNORED:
            case MySqlParser.INSERT:
            case MySqlParser.KILL:
            case MySqlParser.LATERAL:
            case MySqlParser.LEFT:
            case MySqlParser.LOAD:
            case MySqlParser.LOCK:
            case MySqlParser.NUMBER:
            case MySqlParser.OPTIMIZE:
            case MySqlParser.OPTIONAL:
            case MySqlParser.ORDER:
            case MySqlParser.PRIMARY:
            case MySqlParser.PURGE:
            case MySqlParser.RELEASE:
            case MySqlParser.RENAME:
            case MySqlParser.REPEAT:
            case MySqlParser.REPLACE:
            case MySqlParser.RESIGNAL:
            case MySqlParser.REVOKE:
            case MySqlParser.RIGHT:
            case MySqlParser.SCHEMA:
            case MySqlParser.SELECT:
            case MySqlParser.SET:
            case MySqlParser.SHOW:
            case MySqlParser.SIGNAL:
            case MySqlParser.SKIP_QUERY_REWRITE:
            case MySqlParser.STACKED:
            case MySqlParser.TABLE:
            case MySqlParser.UNLOCK:
            case MySqlParser.UPDATE:
            case MySqlParser.USE:
            case MySqlParser.VALUES:
            case MySqlParser.WITH:
            case MySqlParser.DATE:
            case MySqlParser.TIME:
            case MySqlParser.TIMESTAMP:
            case MySqlParser.DATETIME:
            case MySqlParser.YEAR:
            case MySqlParser.BINARY:
            case MySqlParser.TEXT:
            case MySqlParser.ENUM:
            case MySqlParser.SERIAL:
            case MySqlParser.JSON_ARRAY:
            case MySqlParser.JSON_ARRAYAGG:
            case MySqlParser.JSON_ARRAY_APPEND:
            case MySqlParser.JSON_ARRAY_INSERT:
            case MySqlParser.JSON_CONTAINS:
            case MySqlParser.JSON_CONTAINS_PATH:
            case MySqlParser.JSON_DEPTH:
            case MySqlParser.JSON_EXTRACT:
            case MySqlParser.JSON_INSERT:
            case MySqlParser.JSON_KEYS:
            case MySqlParser.JSON_LENGTH:
            case MySqlParser.JSON_MERGE:
            case MySqlParser.JSON_MERGE_PATCH:
            case MySqlParser.JSON_MERGE_PRESERVE:
            case MySqlParser.JSON_OBJECT:
            case MySqlParser.JSON_OBJECTAGG:
            case MySqlParser.JSON_OVERLAPS:
            case MySqlParser.JSON_PRETTY:
            case MySqlParser.JSON_QUOTE:
            case MySqlParser.JSON_REMOVE:
            case MySqlParser.JSON_REPLACE:
            case MySqlParser.JSON_SCHEMA_VALID:
            case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
            case MySqlParser.JSON_SEARCH:
            case MySqlParser.JSON_SET:
            case MySqlParser.JSON_STORAGE_FREE:
            case MySqlParser.JSON_STORAGE_SIZE:
            case MySqlParser.JSON_TABLE:
            case MySqlParser.JSON_TYPE:
            case MySqlParser.JSON_UNQUOTE:
            case MySqlParser.JSON_VALID:
            case MySqlParser.JSON_VALUE:
            case MySqlParser.NESTED:
            case MySqlParser.ORDINALITY:
            case MySqlParser.PATH:
            case MySqlParser.AVG:
            case MySqlParser.BIT_AND:
            case MySqlParser.BIT_OR:
            case MySqlParser.BIT_XOR:
            case MySqlParser.COUNT:
            case MySqlParser.CUME_DIST:
            case MySqlParser.DENSE_RANK:
            case MySqlParser.FIRST_VALUE:
            case MySqlParser.GROUP_CONCAT:
            case MySqlParser.LAG:
            case MySqlParser.LAST_VALUE:
            case MySqlParser.LEAD:
            case MySqlParser.MAX:
            case MySqlParser.MIN:
            case MySqlParser.NTILE:
            case MySqlParser.NTH_VALUE:
            case MySqlParser.PERCENT_RANK:
            case MySqlParser.RANK:
            case MySqlParser.ROW_NUMBER:
            case MySqlParser.STD:
            case MySqlParser.STDDEV:
            case MySqlParser.STDDEV_POP:
            case MySqlParser.STDDEV_SAMP:
            case MySqlParser.SUM:
            case MySqlParser.VAR_POP:
            case MySqlParser.VAR_SAMP:
            case MySqlParser.VARIANCE:
            case MySqlParser.CURRENT_DATE:
            case MySqlParser.CURRENT_TIME:
            case MySqlParser.CURRENT_TIMESTAMP:
            case MySqlParser.LOCALTIME:
            case MySqlParser.CURDATE:
            case MySqlParser.CURTIME:
            case MySqlParser.DATE_ADD:
            case MySqlParser.DATE_SUB:
            case MySqlParser.LOCALTIMESTAMP:
            case MySqlParser.NOW:
            case MySqlParser.POSITION:
            case MySqlParser.SUBSTR:
            case MySqlParser.SUBSTRING:
            case MySqlParser.SYSDATE:
            case MySqlParser.TRIM:
            case MySqlParser.UTC_DATE:
            case MySqlParser.UTC_TIME:
            case MySqlParser.UTC_TIMESTAMP:
            case MySqlParser.ACCOUNT:
            case MySqlParser.ACTION:
            case MySqlParser.AFTER:
            case MySqlParser.AGGREGATE:
            case MySqlParser.ALGORITHM:
            case MySqlParser.ANY:
            case MySqlParser.AT:
            case MySqlParser.AUTHORS:
            case MySqlParser.AUTOCOMMIT:
            case MySqlParser.AUTOEXTEND_SIZE:
            case MySqlParser.AUTO_INCREMENT:
            case MySqlParser.AVG_ROW_LENGTH:
            case MySqlParser.BEGIN:
            case MySqlParser.BINLOG:
            case MySqlParser.BIT:
            case MySqlParser.BLOCK:
            case MySqlParser.BOOL:
            case MySqlParser.BOOLEAN:
            case MySqlParser.BTREE:
            case MySqlParser.CACHE:
            case MySqlParser.CASCADED:
            case MySqlParser.CHAIN:
            case MySqlParser.CHANGED:
            case MySqlParser.CHANNEL:
            case MySqlParser.CHECKSUM:
            case MySqlParser.PAGE_CHECKSUM:
            case MySqlParser.CIPHER:
            case MySqlParser.CLASS_ORIGIN:
            case MySqlParser.CLIENT:
            case MySqlParser.CLOSE:
            case MySqlParser.CLUSTERING:
            case MySqlParser.COALESCE:
            case MySqlParser.CODE:
            case MySqlParser.COLUMNS:
            case MySqlParser.COLUMN_FORMAT:
            case MySqlParser.COLUMN_NAME:
            case MySqlParser.COMMENT:
            case MySqlParser.COMMIT:
            case MySqlParser.COMPACT:
            case MySqlParser.COMPLETION:
            case MySqlParser.COMPRESSED:
            case MySqlParser.COMPRESSION:
            case MySqlParser.CONCURRENT:
            case MySqlParser.CONNECT:
            case MySqlParser.CONNECTION:
            case MySqlParser.CONSISTENT:
            case MySqlParser.CONSTRAINT_CATALOG:
            case MySqlParser.CONSTRAINT_SCHEMA:
            case MySqlParser.CONSTRAINT_NAME:
            case MySqlParser.CONTAINS:
            case MySqlParser.CONTEXT:
            case MySqlParser.CONTRIBUTORS:
            case MySqlParser.COPY:
            case MySqlParser.CPU:
            case MySqlParser.CURSOR_NAME:
            case MySqlParser.DATA:
            case MySqlParser.DATAFILE:
            case MySqlParser.DEALLOCATE:
            case MySqlParser.DEFAULT_AUTH:
            case MySqlParser.DEFINER:
            case MySqlParser.DELAY_KEY_WRITE:
            case MySqlParser.DES_KEY_FILE:
            case MySqlParser.DIRECTORY:
            case MySqlParser.DISABLE:
            case MySqlParser.DISCARD:
            case MySqlParser.DISK:
            case MySqlParser.DO:
            case MySqlParser.DUMPFILE:
            case MySqlParser.DUPLICATE:
            case MySqlParser.DYNAMIC:
            case MySqlParser.ENABLE:
            case MySqlParser.ENCRYPTION:
            case MySqlParser.END:
            case MySqlParser.ENDS:
            case MySqlParser.ENGINE:
            case MySqlParser.ENGINES:
            case MySqlParser.ERROR:
            case MySqlParser.ERRORS:
            case MySqlParser.ESCAPE:
            case MySqlParser.EVEN:
            case MySqlParser.EVENT:
            case MySqlParser.EVENTS:
            case MySqlParser.EVERY:
            case MySqlParser.EXCHANGE:
            case MySqlParser.EXCLUSIVE:
            case MySqlParser.EXPIRE:
            case MySqlParser.EXPORT:
            case MySqlParser.EXTENDED:
            case MySqlParser.EXTENT_SIZE:
            case MySqlParser.FAILED_LOGIN_ATTEMPTS:
            case MySqlParser.FAST:
            case MySqlParser.FAULTS:
            case MySqlParser.FIELDS:
            case MySqlParser.FILE_BLOCK_SIZE:
            case MySqlParser.FILTER:
            case MySqlParser.FIRST:
            case MySqlParser.FIXED:
            case MySqlParser.FLUSH:
            case MySqlParser.FOLLOWS:
            case MySqlParser.FOUND:
            case MySqlParser.FULL:
            case MySqlParser.FUNCTION:
            case MySqlParser.GENERAL:
            case MySqlParser.GLOBAL:
            case MySqlParser.GRANTS:
            case MySqlParser.GROUP_REPLICATION:
            case MySqlParser.HANDLER:
            case MySqlParser.HASH:
            case MySqlParser.HELP:
            case MySqlParser.HISTORY:
            case MySqlParser.HOST:
            case MySqlParser.HOSTS:
            case MySqlParser.IDENTIFIED:
            case MySqlParser.IGNORE_SERVER_IDS:
            case MySqlParser.IMPORT:
            case MySqlParser.INDEXES:
            case MySqlParser.INITIAL_SIZE:
            case MySqlParser.INPLACE:
            case MySqlParser.INSERT_METHOD:
            case MySqlParser.INSTALL:
            case MySqlParser.INSTANCE:
            case MySqlParser.INSTANT:
            case MySqlParser.INVISIBLE:
            case MySqlParser.INVOKER:
            case MySqlParser.IO:
            case MySqlParser.IO_THREAD:
            case MySqlParser.IPC:
            case MySqlParser.ISOLATION:
            case MySqlParser.ISSUER:
            case MySqlParser.JSON:
            case MySqlParser.KEY_BLOCK_SIZE:
            case MySqlParser.LANGUAGE:
            case MySqlParser.LAST:
            case MySqlParser.LEAVES:
            case MySqlParser.LESS:
            case MySqlParser.LEVEL:
            case MySqlParser.LIST:
            case MySqlParser.LOCAL:
            case MySqlParser.LOGFILE:
            case MySqlParser.LOGS:
            case MySqlParser.MASTER:
            case MySqlParser.MASTER_AUTO_POSITION:
            case MySqlParser.MASTER_CONNECT_RETRY:
            case MySqlParser.MASTER_DELAY:
            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
            case MySqlParser.MASTER_HOST:
            case MySqlParser.MASTER_LOG_FILE:
            case MySqlParser.MASTER_LOG_POS:
            case MySqlParser.MASTER_PASSWORD:
            case MySqlParser.MASTER_PORT:
            case MySqlParser.MASTER_RETRY_COUNT:
            case MySqlParser.MASTER_SSL:
            case MySqlParser.MASTER_SSL_CA:
            case MySqlParser.MASTER_SSL_CAPATH:
            case MySqlParser.MASTER_SSL_CERT:
            case MySqlParser.MASTER_SSL_CIPHER:
            case MySqlParser.MASTER_SSL_CRL:
            case MySqlParser.MASTER_SSL_CRLPATH:
            case MySqlParser.MASTER_SSL_KEY:
            case MySqlParser.MASTER_TLS_VERSION:
            case MySqlParser.MASTER_USER:
            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
            case MySqlParser.MAX_QUERIES_PER_HOUR:
            case MySqlParser.MAX_ROWS:
            case MySqlParser.MAX_SIZE:
            case MySqlParser.MAX_UPDATES_PER_HOUR:
            case MySqlParser.MAX_USER_CONNECTIONS:
            case MySqlParser.MEDIUM:
            case MySqlParser.MEMBER:
            case MySqlParser.MERGE:
            case MySqlParser.MESSAGE_TEXT:
            case MySqlParser.MID:
            case MySqlParser.MIGRATE:
            case MySqlParser.MIN_ROWS:
            case MySqlParser.MODE:
            case MySqlParser.MODIFY:
            case MySqlParser.MUTEX:
            case MySqlParser.MYSQL:
            case MySqlParser.MYSQL_ERRNO:
            case MySqlParser.NAME:
            case MySqlParser.NAMES:
            case MySqlParser.NCHAR:
            case MySqlParser.NEVER:
            case MySqlParser.NEXT:
            case MySqlParser.NO:
            case MySqlParser.NOCOPY:
            case MySqlParser.NOWAIT:
            case MySqlParser.NODEGROUP:
            case MySqlParser.NONE:
            case MySqlParser.ODBC:
            case MySqlParser.OFFLINE:
            case MySqlParser.OFFSET:
            case MySqlParser.OF:
            case MySqlParser.OJ:
            case MySqlParser.OLD_PASSWORD:
            case MySqlParser.ONE:
            case MySqlParser.ONLINE:
            case MySqlParser.ONLY:
            case MySqlParser.OPEN:
            case MySqlParser.OPTIMIZER_COSTS:
            case MySqlParser.OPTIONS:
            case MySqlParser.OWNER:
            case MySqlParser.PACK_KEYS:
            case MySqlParser.PAGE:
            case MySqlParser.PARSER:
            case MySqlParser.PARTIAL:
            case MySqlParser.PARTITIONING:
            case MySqlParser.PARTITIONS:
            case MySqlParser.PASSWORD:
            case MySqlParser.PASSWORD_LOCK_TIME:
            case MySqlParser.PHASE:
            case MySqlParser.PLUGIN:
            case MySqlParser.PLUGIN_DIR:
            case MySqlParser.PLUGINS:
            case MySqlParser.PORT:
            case MySqlParser.PRECEDES:
            case MySqlParser.PREPARE:
            case MySqlParser.PRESERVE:
            case MySqlParser.PREV:
            case MySqlParser.PROCESSLIST:
            case MySqlParser.PROFILE:
            case MySqlParser.PROFILES:
            case MySqlParser.PROXY:
            case MySqlParser.QUERY:
            case MySqlParser.QUICK:
            case MySqlParser.REBUILD:
            case MySqlParser.RECOVER:
            case MySqlParser.RECURSIVE:
            case MySqlParser.REDO_BUFFER_SIZE:
            case MySqlParser.REDUNDANT:
            case MySqlParser.RELAY:
            case MySqlParser.RELAY_LOG_FILE:
            case MySqlParser.RELAY_LOG_POS:
            case MySqlParser.RELAYLOG:
            case MySqlParser.REMOVE:
            case MySqlParser.REORGANIZE:
            case MySqlParser.REPAIR:
            case MySqlParser.REPLICATE_DO_DB:
            case MySqlParser.REPLICATE_DO_TABLE:
            case MySqlParser.REPLICATE_IGNORE_DB:
            case MySqlParser.REPLICATE_IGNORE_TABLE:
            case MySqlParser.REPLICATE_REWRITE_DB:
            case MySqlParser.REPLICATE_WILD_DO_TABLE:
            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySqlParser.REPLICATION:
            case MySqlParser.RESET:
            case MySqlParser.RESUME:
            case MySqlParser.RETURNED_SQLSTATE:
            case MySqlParser.RETURNS:
            case MySqlParser.REUSE:
            case MySqlParser.ROLE:
            case MySqlParser.ROLLBACK:
            case MySqlParser.ROLLUP:
            case MySqlParser.ROTATE:
            case MySqlParser.ROW:
            case MySqlParser.ROWS:
            case MySqlParser.ROW_FORMAT:
            case MySqlParser.RTREE:
            case MySqlParser.SAVEPOINT:
            case MySqlParser.SCHEDULE:
            case MySqlParser.SECURITY:
            case MySqlParser.SERVER:
            case MySqlParser.SESSION:
            case MySqlParser.SHARE:
            case MySqlParser.SHARED:
            case MySqlParser.SIGNED:
            case MySqlParser.SIMPLE:
            case MySqlParser.SLAVE:
            case MySqlParser.SLOW:
            case MySqlParser.SNAPSHOT:
            case MySqlParser.SOCKET:
            case MySqlParser.SOME:
            case MySqlParser.SONAME:
            case MySqlParser.SOUNDS:
            case MySqlParser.SOURCE:
            case MySqlParser.SQL_AFTER_GTIDS:
            case MySqlParser.SQL_AFTER_MTS_GAPS:
            case MySqlParser.SQL_BEFORE_GTIDS:
            case MySqlParser.SQL_BUFFER_RESULT:
            case MySqlParser.SQL_CACHE:
            case MySqlParser.SQL_NO_CACHE:
            case MySqlParser.SQL_THREAD:
            case MySqlParser.START:
            case MySqlParser.STARTS:
            case MySqlParser.STATS_AUTO_RECALC:
            case MySqlParser.STATS_PERSISTENT:
            case MySqlParser.STATS_SAMPLE_PAGES:
            case MySqlParser.STATUS:
            case MySqlParser.STOP:
            case MySqlParser.STORAGE:
            case MySqlParser.STRING:
            case MySqlParser.SUBCLASS_ORIGIN:
            case MySqlParser.SUBJECT:
            case MySqlParser.SUBPARTITION:
            case MySqlParser.SUBPARTITIONS:
            case MySqlParser.SUSPEND:
            case MySqlParser.SWAPS:
            case MySqlParser.SWITCHES:
            case MySqlParser.TABLE_NAME:
            case MySqlParser.TABLESPACE:
            case MySqlParser.TABLE_TYPE:
            case MySqlParser.TEMPORARY:
            case MySqlParser.TEMPTABLE:
            case MySqlParser.THAN:
            case MySqlParser.TRADITIONAL:
            case MySqlParser.TRANSACTION:
            case MySqlParser.TRANSACTIONAL:
            case MySqlParser.TRIGGERS:
            case MySqlParser.TRUNCATE:
            case MySqlParser.UNBOUNDED:
            case MySqlParser.UNDEFINED:
            case MySqlParser.UNDOFILE:
            case MySqlParser.UNDO_BUFFER_SIZE:
            case MySqlParser.UNINSTALL:
            case MySqlParser.UNKNOWN:
            case MySqlParser.UNTIL:
            case MySqlParser.UPGRADE:
            case MySqlParser.USER:
            case MySqlParser.USE_FRM:
            case MySqlParser.USER_RESOURCES:
            case MySqlParser.VALIDATION:
            case MySqlParser.VALUE:
            case MySqlParser.VARIABLES:
            case MySqlParser.VIEW:
            case MySqlParser.VIRTUAL:
            case MySqlParser.VISIBLE:
            case MySqlParser.WAIT:
            case MySqlParser.WARNINGS:
            case MySqlParser.WITHOUT:
            case MySqlParser.WORK:
            case MySqlParser.WRAPPER:
            case MySqlParser.X509:
            case MySqlParser.XA:
            case MySqlParser.XML:
            case MySqlParser.EUR:
            case MySqlParser.USA:
            case MySqlParser.JIS:
            case MySqlParser.ISO:
            case MySqlParser.INTERNAL:
            case MySqlParser.QUARTER:
            case MySqlParser.MONTH:
            case MySqlParser.DAY:
            case MySqlParser.HOUR:
            case MySqlParser.MINUTE:
            case MySqlParser.WEEK:
            case MySqlParser.SECOND:
            case MySqlParser.MICROSECOND:
            case MySqlParser.ADMIN:
            case MySqlParser.AUDIT_ABORT_EXEMPT:
            case MySqlParser.AUDIT_ADMIN:
            case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
            case MySqlParser.BACKUP_ADMIN:
            case MySqlParser.BINLOG_ADMIN:
            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
            case MySqlParser.CLONE_ADMIN:
            case MySqlParser.CONNECTION_ADMIN:
            case MySqlParser.ENCRYPTION_KEY_ADMIN:
            case MySqlParser.EXECUTE:
            case MySqlParser.FILE:
            case MySqlParser.FIREWALL_ADMIN:
            case MySqlParser.FIREWALL_EXEMPT:
            case MySqlParser.FIREWALL_USER:
            case MySqlParser.GROUP_REPLICATION_ADMIN:
            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
            case MySqlParser.INVOKE:
            case MySqlParser.LAMBDA:
            case MySqlParser.NDB_STORED_USER:
            case MySqlParser.PASSWORDLESS_USER_ADMIN:
            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySqlParser.PRIVILEGES:
            case MySqlParser.PROCESS:
            case MySqlParser.RELOAD:
            case MySqlParser.REPLICATION_APPLIER:
            case MySqlParser.REPLICATION_SLAVE_ADMIN:
            case MySqlParser.RESOURCE_GROUP_ADMIN:
            case MySqlParser.RESOURCE_GROUP_USER:
            case MySqlParser.ROLE_ADMIN:
            case MySqlParser.ROUTINE:
            case MySqlParser.S3:
            case MySqlParser.SESSION_VARIABLES_ADMIN:
            case MySqlParser.SET_USER_ID:
            case MySqlParser.SHOW_ROUTINE:
            case MySqlParser.SHUTDOWN:
            case MySqlParser.SUPER:
            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
            case MySqlParser.TABLES:
            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
            case MySqlParser.VERSION_TOKEN_ADMIN:
            case MySqlParser.XA_RECOVER_ADMIN:
            case MySqlParser.ARMSCII8:
            case MySqlParser.ASCII:
            case MySqlParser.BIG5:
            case MySqlParser.CP1250:
            case MySqlParser.CP1251:
            case MySqlParser.CP1256:
            case MySqlParser.CP1257:
            case MySqlParser.CP850:
            case MySqlParser.CP852:
            case MySqlParser.CP866:
            case MySqlParser.CP932:
            case MySqlParser.DEC8:
            case MySqlParser.EUCJPMS:
            case MySqlParser.EUCKR:
            case MySqlParser.GB18030:
            case MySqlParser.GB2312:
            case MySqlParser.GBK:
            case MySqlParser.GEOSTD8:
            case MySqlParser.GREEK:
            case MySqlParser.HEBREW:
            case MySqlParser.HP8:
            case MySqlParser.KEYBCS2:
            case MySqlParser.KOI8R:
            case MySqlParser.KOI8U:
            case MySqlParser.LATIN1:
            case MySqlParser.LATIN2:
            case MySqlParser.LATIN5:
            case MySqlParser.LATIN7:
            case MySqlParser.MACCE:
            case MySqlParser.MACROMAN:
            case MySqlParser.SJIS:
            case MySqlParser.SWE7:
            case MySqlParser.TIS620:
            case MySqlParser.UCS2:
            case MySqlParser.UJIS:
            case MySqlParser.UTF16:
            case MySqlParser.UTF16LE:
            case MySqlParser.UTF32:
            case MySqlParser.UTF8:
            case MySqlParser.UTF8MB3:
            case MySqlParser.UTF8MB4:
            case MySqlParser.ARCHIVE:
            case MySqlParser.BLACKHOLE:
            case MySqlParser.CSV:
            case MySqlParser.FEDERATED:
            case MySqlParser.INNODB:
            case MySqlParser.MEMORY:
            case MySqlParser.MRG_MYISAM:
            case MySqlParser.MYISAM:
            case MySqlParser.NDB:
            case MySqlParser.NDBCLUSTER:
            case MySqlParser.PERFORMANCE_SCHEMA:
            case MySqlParser.TOKUDB:
            case MySqlParser.REPEATABLE:
            case MySqlParser.COMMITTED:
            case MySqlParser.UNCOMMITTED:
            case MySqlParser.SERIALIZABLE:
            case MySqlParser.GEOMETRYCOLLECTION:
            case MySqlParser.LINESTRING:
            case MySqlParser.MULTILINESTRING:
            case MySqlParser.MULTIPOINT:
            case MySqlParser.MULTIPOLYGON:
            case MySqlParser.POINT:
            case MySqlParser.POLYGON:
            case MySqlParser.ABS:
            case MySqlParser.ACOS:
            case MySqlParser.ADDDATE:
            case MySqlParser.ADDTIME:
            case MySqlParser.AES_DECRYPT:
            case MySqlParser.AES_ENCRYPT:
            case MySqlParser.AREA:
            case MySqlParser.ASBINARY:
            case MySqlParser.ASIN:
            case MySqlParser.ASTEXT:
            case MySqlParser.ASWKB:
            case MySqlParser.ASWKT:
            case MySqlParser.ASYMMETRIC_DECRYPT:
            case MySqlParser.ASYMMETRIC_DERIVE:
            case MySqlParser.ASYMMETRIC_ENCRYPT:
            case MySqlParser.ASYMMETRIC_SIGN:
            case MySqlParser.ASYMMETRIC_VERIFY:
            case MySqlParser.ATAN:
            case MySqlParser.ATAN2:
            case MySqlParser.BENCHMARK:
            case MySqlParser.BIN:
            case MySqlParser.BIT_COUNT:
            case MySqlParser.BIT_LENGTH:
            case MySqlParser.BUFFER:
            case MySqlParser.CATALOG_NAME:
            case MySqlParser.CEIL:
            case MySqlParser.CEILING:
            case MySqlParser.CENTROID:
            case MySqlParser.CHARACTER_LENGTH:
            case MySqlParser.CHARSET:
            case MySqlParser.CHAR_LENGTH:
            case MySqlParser.COERCIBILITY:
            case MySqlParser.COLLATION:
            case MySqlParser.COMPRESS:
            case MySqlParser.CONCAT:
            case MySqlParser.CONCAT_WS:
            case MySqlParser.CONNECTION_ID:
            case MySqlParser.CONV:
            case MySqlParser.CONVERT_TZ:
            case MySqlParser.COS:
            case MySqlParser.COT:
            case MySqlParser.CRC32:
            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySqlParser.CREATE_DH_PARAMETERS:
            case MySqlParser.CREATE_DIGEST:
            case MySqlParser.CROSSES:
            case MySqlParser.DATEDIFF:
            case MySqlParser.DATE_FORMAT:
            case MySqlParser.DAYNAME:
            case MySqlParser.DAYOFMONTH:
            case MySqlParser.DAYOFWEEK:
            case MySqlParser.DAYOFYEAR:
            case MySqlParser.DECODE:
            case MySqlParser.DEGREES:
            case MySqlParser.DES_DECRYPT:
            case MySqlParser.DES_ENCRYPT:
            case MySqlParser.DIMENSION:
            case MySqlParser.DISJOINT:
            case MySqlParser.ELT:
            case MySqlParser.ENCODE:
            case MySqlParser.ENCRYPT:
            case MySqlParser.ENDPOINT:
            case MySqlParser.ENGINE_ATTRIBUTE:
            case MySqlParser.ENVELOPE:
            case MySqlParser.EQUALS:
            case MySqlParser.EXP:
            case MySqlParser.EXPORT_SET:
            case MySqlParser.EXTERIORRING:
            case MySqlParser.EXTRACTVALUE:
            case MySqlParser.FIELD:
            case MySqlParser.FIND_IN_SET:
            case MySqlParser.FLOOR:
            case MySqlParser.FORMAT:
            case MySqlParser.FOUND_ROWS:
            case MySqlParser.FROM_BASE64:
            case MySqlParser.FROM_DAYS:
            case MySqlParser.FROM_UNIXTIME:
            case MySqlParser.GEOMCOLLFROMTEXT:
            case MySqlParser.GEOMCOLLFROMWKB:
            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.GEOMETRYFROMTEXT:
            case MySqlParser.GEOMETRYFROMWKB:
            case MySqlParser.GEOMETRYN:
            case MySqlParser.GEOMETRYTYPE:
            case MySqlParser.GEOMFROMTEXT:
            case MySqlParser.GEOMFROMWKB:
            case MySqlParser.GET_FORMAT:
            case MySqlParser.GET_LOCK:
            case MySqlParser.GLENGTH:
            case MySqlParser.GREATEST:
            case MySqlParser.GTID_SUBSET:
            case MySqlParser.GTID_SUBTRACT:
            case MySqlParser.HEX:
            case MySqlParser.IFNULL:
            case MySqlParser.INET6_ATON:
            case MySqlParser.INET6_NTOA:
            case MySqlParser.INET_ATON:
            case MySqlParser.INET_NTOA:
            case MySqlParser.INSTR:
            case MySqlParser.INTERIORRINGN:
            case MySqlParser.INTERSECTS:
            case MySqlParser.ISCLOSED:
            case MySqlParser.ISEMPTY:
            case MySqlParser.ISNULL:
            case MySqlParser.ISSIMPLE:
            case MySqlParser.IS_FREE_LOCK:
            case MySqlParser.IS_IPV4:
            case MySqlParser.IS_IPV4_COMPAT:
            case MySqlParser.IS_IPV4_MAPPED:
            case MySqlParser.IS_IPV6:
            case MySqlParser.IS_USED_LOCK:
            case MySqlParser.LAST_INSERT_ID:
            case MySqlParser.LCASE:
            case MySqlParser.LEAST:
            case MySqlParser.LENGTH:
            case MySqlParser.LINEFROMTEXT:
            case MySqlParser.LINEFROMWKB:
            case MySqlParser.LINESTRINGFROMTEXT:
            case MySqlParser.LINESTRINGFROMWKB:
            case MySqlParser.LN:
            case MySqlParser.LOAD_FILE:
            case MySqlParser.LOCATE:
            case MySqlParser.LOG:
            case MySqlParser.LOG10:
            case MySqlParser.LOG2:
            case MySqlParser.LOWER:
            case MySqlParser.LPAD:
            case MySqlParser.LTRIM:
            case MySqlParser.MAKEDATE:
            case MySqlParser.MAKETIME:
            case MySqlParser.MAKE_SET:
            case MySqlParser.MASTER_POS_WAIT:
            case MySqlParser.MBRCONTAINS:
            case MySqlParser.MBRDISJOINT:
            case MySqlParser.MBREQUAL:
            case MySqlParser.MBRINTERSECTS:
            case MySqlParser.MBROVERLAPS:
            case MySqlParser.MBRTOUCHES:
            case MySqlParser.MBRWITHIN:
            case MySqlParser.MD5:
            case MySqlParser.MLINEFROMTEXT:
            case MySqlParser.MLINEFROMWKB:
            case MySqlParser.MONTHNAME:
            case MySqlParser.MPOINTFROMTEXT:
            case MySqlParser.MPOINTFROMWKB:
            case MySqlParser.MPOLYFROMTEXT:
            case MySqlParser.MPOLYFROMWKB:
            case MySqlParser.MULTILINESTRINGFROMTEXT:
            case MySqlParser.MULTILINESTRINGFROMWKB:
            case MySqlParser.MULTIPOINTFROMTEXT:
            case MySqlParser.MULTIPOINTFROMWKB:
            case MySqlParser.MULTIPOLYGONFROMTEXT:
            case MySqlParser.MULTIPOLYGONFROMWKB:
            case MySqlParser.NAME_CONST:
            case MySqlParser.NULLIF:
            case MySqlParser.NUMGEOMETRIES:
            case MySqlParser.NUMINTERIORRINGS:
            case MySqlParser.NUMPOINTS:
            case MySqlParser.OCT:
            case MySqlParser.OCTET_LENGTH:
            case MySqlParser.ORD:
            case MySqlParser.OVERLAPS:
            case MySqlParser.PERIOD_ADD:
            case MySqlParser.PERIOD_DIFF:
            case MySqlParser.PI:
            case MySqlParser.POINTFROMTEXT:
            case MySqlParser.POINTFROMWKB:
            case MySqlParser.POINTN:
            case MySqlParser.POLYFROMTEXT:
            case MySqlParser.POLYFROMWKB:
            case MySqlParser.POLYGONFROMTEXT:
            case MySqlParser.POLYGONFROMWKB:
            case MySqlParser.POW:
            case MySqlParser.POWER:
            case MySqlParser.QUOTE:
            case MySqlParser.RADIANS:
            case MySqlParser.RAND:
            case MySqlParser.RANDOM:
            case MySqlParser.RANDOM_BYTES:
            case MySqlParser.RELEASE_LOCK:
            case MySqlParser.REVERSE:
            case MySqlParser.ROUND:
            case MySqlParser.ROW_COUNT:
            case MySqlParser.RPAD:
            case MySqlParser.RTRIM:
            case MySqlParser.SEC_TO_TIME:
            case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
            case MySqlParser.SESSION_USER:
            case MySqlParser.SHA:
            case MySqlParser.SHA1:
            case MySqlParser.SHA2:
            case MySqlParser.SCHEMA_NAME:
            case MySqlParser.SIGN:
            case MySqlParser.SIN:
            case MySqlParser.SLEEP:
            case MySqlParser.SOUNDEX:
            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySqlParser.SQRT:
            case MySqlParser.SRID:
            case MySqlParser.STARTPOINT:
            case MySqlParser.STRCMP:
            case MySqlParser.STR_TO_DATE:
            case MySqlParser.ST_AREA:
            case MySqlParser.ST_ASBINARY:
            case MySqlParser.ST_ASTEXT:
            case MySqlParser.ST_ASWKB:
            case MySqlParser.ST_ASWKT:
            case MySqlParser.ST_BUFFER:
            case MySqlParser.ST_CENTROID:
            case MySqlParser.ST_CONTAINS:
            case MySqlParser.ST_CROSSES:
            case MySqlParser.ST_DIFFERENCE:
            case MySqlParser.ST_DIMENSION:
            case MySqlParser.ST_DISJOINT:
            case MySqlParser.ST_DISTANCE:
            case MySqlParser.ST_ENDPOINT:
            case MySqlParser.ST_ENVELOPE:
            case MySqlParser.ST_EQUALS:
            case MySqlParser.ST_EXTERIORRING:
            case MySqlParser.ST_GEOMCOLLFROMTEXT:
            case MySqlParser.ST_GEOMCOLLFROMTXT:
            case MySqlParser.ST_GEOMCOLLFROMWKB:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.ST_GEOMETRYFROMTEXT:
            case MySqlParser.ST_GEOMETRYFROMWKB:
            case MySqlParser.ST_GEOMETRYN:
            case MySqlParser.ST_GEOMETRYTYPE:
            case MySqlParser.ST_GEOMFROMTEXT:
            case MySqlParser.ST_GEOMFROMWKB:
            case MySqlParser.ST_INTERIORRINGN:
            case MySqlParser.ST_INTERSECTION:
            case MySqlParser.ST_INTERSECTS:
            case MySqlParser.ST_ISCLOSED:
            case MySqlParser.ST_ISEMPTY:
            case MySqlParser.ST_ISSIMPLE:
            case MySqlParser.ST_LINEFROMTEXT:
            case MySqlParser.ST_LINEFROMWKB:
            case MySqlParser.ST_LINESTRINGFROMTEXT:
            case MySqlParser.ST_LINESTRINGFROMWKB:
            case MySqlParser.ST_NUMGEOMETRIES:
            case MySqlParser.ST_NUMINTERIORRING:
            case MySqlParser.ST_NUMINTERIORRINGS:
            case MySqlParser.ST_NUMPOINTS:
            case MySqlParser.ST_OVERLAPS:
            case MySqlParser.ST_POINTFROMTEXT:
            case MySqlParser.ST_POINTFROMWKB:
            case MySqlParser.ST_POINTN:
            case MySqlParser.ST_POLYFROMTEXT:
            case MySqlParser.ST_POLYFROMWKB:
            case MySqlParser.ST_POLYGONFROMTEXT:
            case MySqlParser.ST_POLYGONFROMWKB:
            case MySqlParser.ST_SRID:
            case MySqlParser.ST_STARTPOINT:
            case MySqlParser.ST_SYMDIFFERENCE:
            case MySqlParser.ST_TOUCHES:
            case MySqlParser.ST_UNION:
            case MySqlParser.ST_WITHIN:
            case MySqlParser.ST_X:
            case MySqlParser.ST_Y:
            case MySqlParser.SUBDATE:
            case MySqlParser.SUBSTRING_INDEX:
            case MySqlParser.SUBTIME:
            case MySqlParser.SYSTEM_USER:
            case MySqlParser.TAN:
            case MySqlParser.TIMEDIFF:
            case MySqlParser.TIMESTAMPADD:
            case MySqlParser.TIMESTAMPDIFF:
            case MySqlParser.TIME_FORMAT:
            case MySqlParser.TIME_TO_SEC:
            case MySqlParser.TOUCHES:
            case MySqlParser.TO_BASE64:
            case MySqlParser.TO_DAYS:
            case MySqlParser.TO_SECONDS:
            case MySqlParser.TP_CONNECTION_ADMIN:
            case MySqlParser.UCASE:
            case MySqlParser.UNCOMPRESS:
            case MySqlParser.UNCOMPRESSED_LENGTH:
            case MySqlParser.UNHEX:
            case MySqlParser.UNIX_TIMESTAMP:
            case MySqlParser.UPDATEXML:
            case MySqlParser.UPPER:
            case MySqlParser.UUID:
            case MySqlParser.UUID_SHORT:
            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
            case MySqlParser.VERSION:
            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySqlParser.WEEKDAY:
            case MySqlParser.WEEKOFYEAR:
            case MySqlParser.WEIGHT_STRING:
            case MySqlParser.WITHIN:
            case MySqlParser.YEARWEEK:
            case MySqlParser.Y_FUNCTION:
            case MySqlParser.X_FUNCTION:
            case MySqlParser.MOD:
            case MySqlParser.LR_BRACKET:
            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySqlParser.STRING_LITERAL:
            case MySqlParser.ID:
                {
                this.state = 1070;
                this.routineBody();
                }
                break;
            case MySqlParser.RETURN:
                {
                this.state = 1071;
                this.returnStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRole(): CreateRoleContext {
        let localContext = new CreateRoleContext(this.context, this.state);
        this.enterRule(localContext, 34, MySqlParser.RULE_createRole);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1074;
            this.match(MySqlParser.CREATE);
            this.state = 1075;
            this.match(MySqlParser.ROLE);
            this.state = 1077;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 51, this.context) ) {
            case 1:
                {
                this.state = 1076;
                this.ifNotExists();
                }
                break;
            }
            this.state = 1079;
            this.roleName();
            this.state = 1084;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 1080;
                this.match(MySqlParser.COMMA);
                this.state = 1081;
                this.roleName();
                }
                }
                this.state = 1086;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createServer(): CreateServerContext {
        let localContext = new CreateServerContext(this.context, this.state);
        this.enterRule(localContext, 36, MySqlParser.RULE_createServer);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1087;
            this.match(MySqlParser.CREATE);
            this.state = 1088;
            this.match(MySqlParser.SERVER);
            this.state = 1089;
            this.uid();
            this.state = 1090;
            this.match(MySqlParser.FOREIGN);
            this.state = 1091;
            this.match(MySqlParser.DATA);
            this.state = 1092;
            this.match(MySqlParser.WRAPPER);
            this.state = 1093;
            localContext._wrapperName = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 514 || _la === 1148)) {
                localContext._wrapperName = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1094;
            this.match(MySqlParser.OPTIONS);
            this.state = 1095;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 1096;
            this.serverOption();
            this.state = 1101;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 1097;
                this.match(MySqlParser.COMMA);
                this.state = 1098;
                this.serverOption();
                }
                }
                this.state = 1103;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1104;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTable(): CreateTableContext {
        let localContext = new CreateTableContext(this.context, this.state);
        this.enterRule(localContext, 38, MySqlParser.RULE_createTable);
        let _la: number;
        try {
            this.state = 1184;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 72, this.context) ) {
            case 1:
                localContext = new CopyCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1106;
                this.match(MySqlParser.CREATE);
                this.state = 1108;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 649) {
                    {
                    this.state = 1107;
                    this.match(MySqlParser.TEMPORARY);
                    }
                }

                this.state = 1110;
                this.match(MySqlParser.TABLE);
                this.state = 1112;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
                case 1:
                    {
                    this.state = 1111;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 1114;
                this.tableName();
                this.state = 1122;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.LIKE:
                    {
                    this.state = 1115;
                    this.match(MySqlParser.LIKE);
                    this.state = 1116;
                    this.tableName();
                    }
                    break;
                case MySqlParser.LR_BRACKET:
                    {
                    this.state = 1117;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 1118;
                    this.match(MySqlParser.LIKE);
                    this.state = 1119;
                    (localContext as CopyCreateTableContext)._parenthesisTable = this.tableName();
                    this.state = 1120;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                localContext = new QueryCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1124;
                this.match(MySqlParser.CREATE);
                this.state = 1126;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 649) {
                    {
                    this.state = 1125;
                    this.match(MySqlParser.TEMPORARY);
                    }
                }

                this.state = 1128;
                this.match(MySqlParser.TABLE);
                this.state = 1130;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
                case 1:
                    {
                    this.state = 1129;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 1132;
                this.tableName();
                this.state = 1134;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 59, this.context) ) {
                case 1:
                    {
                    this.state = 1133;
                    this.createDefinitions();
                    }
                    break;
                }
                this.state = 1146;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la === 81 || _la === 180 || _la === 222 || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & 134316039) !== 0) || ((((_la - 373)) & ~0x1F) === 0 && ((1 << (_la - 373)) & 1081353) !== 0) || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 19) !== 0) || _la === 455 || _la === 467 || _la === 500 || _la === 510 || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & 269) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & 3892314113) !== 0) || ((((_la - 636)) & ~0x1F) === 0 && ((1 << (_la - 636)) & 268289) !== 0) || _la === 841 || _la === 875 || _la === 1000 || _la === 1148) {
                    {
                    this.state = 1136;
                    this.tableOption();
                    this.state = 1143;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la === 81 || _la === 180 || _la === 222 || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & 134316039) !== 0) || ((((_la - 373)) & ~0x1F) === 0 && ((1 << (_la - 373)) & 1081353) !== 0) || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 19) !== 0) || _la === 455 || _la === 467 || _la === 500 || _la === 510 || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & 269) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & 3892314113) !== 0) || ((((_la - 636)) & ~0x1F) === 0 && ((1 << (_la - 636)) & 268289) !== 0) || _la === 841 || _la === 875 || _la === 1000 || _la === 1135 || _la === 1148) {
                        {
                        {
                        this.state = 1138;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 1135) {
                            {
                            this.state = 1137;
                            this.match(MySqlParser.COMMA);
                            }
                        }

                        this.state = 1140;
                        this.tableOption();
                        }
                        }
                        this.state = 1145;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1149;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 129) {
                    {
                    this.state = 1148;
                    this.partitionDefinitions();
                    }
                }

                this.state = 1152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 78 || _la === 141) {
                    {
                    this.state = 1151;
                    (localContext as QueryCreateTableContext)._keyViolate = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 78 || _la === 141)) {
                        (localContext as QueryCreateTableContext)._keyViolate = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1155;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12) {
                    {
                    this.state = 1154;
                    this.match(MySqlParser.AS);
                    }
                }

                this.state = 1157;
                this.selectStatement();
                }
                break;
            case 3:
                localContext = new ColumnCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1159;
                this.match(MySqlParser.CREATE);
                this.state = 1161;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 649) {
                    {
                    this.state = 1160;
                    this.match(MySqlParser.TEMPORARY);
                    }
                }

                this.state = 1163;
                this.match(MySqlParser.TABLE);
                this.state = 1165;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 67, this.context) ) {
                case 1:
                    {
                    this.state = 1164;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 1167;
                this.tableName();
                this.state = 1168;
                this.createDefinitions();
                this.state = 1179;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la === 81 || _la === 180 || _la === 222 || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & 134316039) !== 0) || ((((_la - 373)) & ~0x1F) === 0 && ((1 << (_la - 373)) & 1081353) !== 0) || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 19) !== 0) || _la === 455 || _la === 467 || _la === 500 || _la === 510 || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & 269) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & 3892314113) !== 0) || ((((_la - 636)) & ~0x1F) === 0 && ((1 << (_la - 636)) & 268289) !== 0) || _la === 841 || _la === 875 || _la === 1000 || _la === 1148) {
                    {
                    this.state = 1169;
                    this.tableOption();
                    this.state = 1176;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la === 81 || _la === 180 || _la === 222 || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & 134316039) !== 0) || ((((_la - 373)) & ~0x1F) === 0 && ((1 << (_la - 373)) & 1081353) !== 0) || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 19) !== 0) || _la === 455 || _la === 467 || _la === 500 || _la === 510 || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & 269) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & 3892314113) !== 0) || ((((_la - 636)) & ~0x1F) === 0 && ((1 << (_la - 636)) & 268289) !== 0) || _la === 841 || _la === 875 || _la === 1000 || _la === 1135 || _la === 1148) {
                        {
                        {
                        this.state = 1171;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 1135) {
                            {
                            this.state = 1170;
                            this.match(MySqlParser.COMMA);
                            }
                        }

                        this.state = 1173;
                        this.tableOption();
                        }
                        }
                        this.state = 1178;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1182;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 129) {
                    {
                    this.state = 1181;
                    this.partitionDefinitions();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTablespaceInnodb(): CreateTablespaceInnodbContext {
        let localContext = new CreateTablespaceInnodbContext(this.context, this.state);
        this.enterRule(localContext, 40, MySqlParser.RULE_createTablespaceInnodb);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1186;
            this.match(MySqlParser.CREATE);
            this.state = 1187;
            this.match(MySqlParser.TABLESPACE);
            this.state = 1188;
            this.uid();
            this.state = 1189;
            this.match(MySqlParser.ADD);
            this.state = 1190;
            this.match(MySqlParser.DATAFILE);
            this.state = 1191;
            localContext._datafile = this.match(MySqlParser.STRING_LITERAL);
            this.state = 1195;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 428) {
                {
                this.state = 1192;
                this.match(MySqlParser.FILE_BLOCK_SIZE);
                this.state = 1193;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 1194;
                localContext._fileBlockSize = this.fileSizeLiteral();
                }
            }

            this.state = 1202;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 409) {
                {
                this.state = 1197;
                this.match(MySqlParser.ENGINE);
                this.state = 1199;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1198;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1201;
                this.engineName();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTablespaceNdb(): CreateTablespaceNdbContext {
        let localContext = new CreateTablespaceNdbContext(this.context, this.state);
        this.enterRule(localContext, 42, MySqlParser.RULE_createTablespaceNdb);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1204;
            this.match(MySqlParser.CREATE);
            this.state = 1205;
            this.match(MySqlParser.TABLESPACE);
            this.state = 1206;
            this.uid();
            this.state = 1207;
            this.match(MySqlParser.ADD);
            this.state = 1208;
            this.match(MySqlParser.DATAFILE);
            this.state = 1209;
            localContext._datafile = this.match(MySqlParser.STRING_LITERAL);
            this.state = 1210;
            this.match(MySqlParser.USE);
            this.state = 1211;
            this.match(MySqlParser.LOGFILE);
            this.state = 1212;
            this.match(MySqlParser.GROUP);
            this.state = 1213;
            this.uid();
            this.state = 1219;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 423) {
                {
                this.state = 1214;
                this.match(MySqlParser.EXTENT_SIZE);
                this.state = 1216;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1215;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1218;
                localContext._extentSize = this.fileSizeLiteral();
                }
            }

            this.state = 1226;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 453) {
                {
                this.state = 1221;
                this.match(MySqlParser.INITIAL_SIZE);
                this.state = 1223;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1222;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1225;
                localContext._initialSize = this.fileSizeLiteral();
                }
            }

            this.state = 1233;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 341) {
                {
                this.state = 1228;
                this.match(MySqlParser.AUTOEXTEND_SIZE);
                this.state = 1230;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1229;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1232;
                localContext._autoextendSize = this.fileSizeLiteral();
                }
            }

            this.state = 1240;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 501) {
                {
                this.state = 1235;
                this.match(MySqlParser.MAX_SIZE);
                this.state = 1237;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1236;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1239;
                localContext._maxSize = this.fileSizeLiteral();
                }
            }

            this.state = 1247;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 528) {
                {
                this.state = 1242;
                this.match(MySqlParser.NODEGROUP);
                this.state = 1244;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1243;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1246;
                this.uid();
                }
            }

            this.state = 1250;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 674) {
                {
                this.state = 1249;
                this.match(MySqlParser.WAIT);
                }
            }

            this.state = 1257;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 368) {
                {
                this.state = 1252;
                this.match(MySqlParser.COMMENT);
                this.state = 1254;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1253;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1256;
                localContext._comment = this.match(MySqlParser.STRING_LITERAL);
                }
            }

            this.state = 1259;
            this.match(MySqlParser.ENGINE);
            this.state = 1261;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1124) {
                {
                this.state = 1260;
                this.match(MySqlParser.EQUAL_SYMBOL);
                }
            }

            this.state = 1263;
            this.engineName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTrigger(): CreateTriggerContext {
        let localContext = new CreateTriggerContext(this.context, this.state);
        this.enterRule(localContext, 44, MySqlParser.RULE_createTrigger);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1265;
            this.match(MySqlParser.CREATE);
            this.state = 1267;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 392) {
                {
                this.state = 1266;
                this.ownerStatement();
                }
            }

            this.state = 1269;
            this.match(MySqlParser.TRIGGER);
            this.state = 1271;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 91, this.context) ) {
            case 1:
                {
                this.state = 1270;
                this.ifNotExists();
                }
                break;
            }
            this.state = 1273;
            localContext._thisTrigger = this.fullId();
            this.state = 1274;
            localContext._triggerTime = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 334)) {
                localContext._triggerTime = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1275;
            localContext._triggerEvent = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 44 || _la === 85 || _la === 184)) {
                localContext._triggerEvent = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1276;
            this.match(MySqlParser.ON);
            this.state = 1277;
            this.tableName();
            this.state = 1278;
            this.match(MySqlParser.FOR);
            this.state = 1279;
            this.match(MySqlParser.EACH);
            this.state = 1280;
            this.match(MySqlParser.ROW);
            this.state = 1283;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 92, this.context) ) {
            case 1:
                {
                this.state = 1281;
                localContext._triggerPlace = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 434 || _la === 558)) {
                    localContext._triggerPlace = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1282;
                localContext._otherTrigger = this.fullId();
                }
                break;
            }
            this.state = 1285;
            this.routineBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withClause(): WithClauseContext {
        let localContext = new WithClauseContext(this.context, this.state);
        this.enterRule(localContext, 46, MySqlParser.RULE_withClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1287;
            this.match(MySqlParser.WITH);
            this.state = 1289;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 93, this.context) ) {
            case 1:
                {
                this.state = 1288;
                this.match(MySqlParser.RECURSIVE);
                }
                break;
            }
            this.state = 1291;
            this.commonTableExpressions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonTableExpressions(): CommonTableExpressionsContext {
        let localContext = new CommonTableExpressionsContext(this.context, this.state);
        this.enterRule(localContext, 48, MySqlParser.RULE_commonTableExpressions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1293;
            this.cteName();
            this.state = 1305;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1133) {
                {
                this.state = 1294;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 1295;
                this.cteColumnName();
                this.state = 1300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 1296;
                    this.match(MySqlParser.COMMA);
                    this.state = 1297;
                    this.cteColumnName();
                    }
                    }
                    this.state = 1302;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1303;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 1307;
            this.match(MySqlParser.AS);
            this.state = 1308;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 1309;
            this.dmlStatement();
            this.state = 1310;
            this.match(MySqlParser.RR_BRACKET);
            this.state = 1313;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 96, this.context) ) {
            case 1:
                {
                this.state = 1311;
                this.match(MySqlParser.COMMA);
                this.state = 1312;
                this.commonTableExpressions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cteName(): CteNameContext {
        let localContext = new CteNameContext(this.context, this.state);
        this.enterRule(localContext, 50, MySqlParser.RULE_cteName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1315;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cteColumnName(): CteColumnNameContext {
        let localContext = new CteColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 52, MySqlParser.RULE_cteColumnName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1317;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createView(): CreateViewContext {
        let localContext = new CreateViewContext(this.context, this.state);
        this.enterRule(localContext, 54, MySqlParser.RULE_createView);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1319;
            this.match(MySqlParser.CREATE);
            this.state = 1321;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123) {
                {
                this.state = 1320;
                this.orReplace();
                }
            }

            this.state = 1326;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 336) {
                {
                this.state = 1323;
                this.match(MySqlParser.ALGORITHM);
                this.state = 1324;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 1325;
                localContext._algType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 506 || _la === 650 || _la === 658)) {
                    localContext._algType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1329;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 392) {
                {
                this.state = 1328;
                this.ownerStatement();
                }
            }

            this.state = 1334;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 160) {
                {
                this.state = 1331;
                this.match(MySqlParser.SQL);
                this.state = 1332;
                this.match(MySqlParser.SECURITY);
                this.state = 1333;
                localContext._secContext = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 392 || _la === 460)) {
                    localContext._secContext = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1336;
            this.match(MySqlParser.VIEW);
            this.state = 1337;
            this.fullId();
            this.state = 1342;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1133) {
                {
                this.state = 1338;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 1339;
                this.uidList();
                this.state = 1340;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 1344;
            this.match(MySqlParser.AS);
            this.state = 1364;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 106, this.context) ) {
            case 1:
                {
                this.state = 1345;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 1347;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 192) {
                    {
                    this.state = 1346;
                    this.withClause();
                    }
                }

                this.state = 1349;
                this.selectStatement();
                this.state = 1350;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 2:
                {
                this.state = 1353;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 192) {
                    {
                    this.state = 1352;
                    this.withClause();
                    }
                }

                this.state = 1355;
                this.selectStatement();
                this.state = 1362;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 192) {
                    {
                    this.state = 1356;
                    this.match(MySqlParser.WITH);
                    this.state = 1358;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 352 || _la === 474) {
                        {
                        this.state = 1357;
                        localContext._checkOption = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 352 || _la === 474)) {
                            localContext._checkOption = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 1360;
                    this.match(MySqlParser.CHECK);
                    this.state = 1361;
                    this.match(MySqlParser.OPTION);
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabaseOption(): CreateDatabaseOptionContext {
        let localContext = new CreateDatabaseOptionContext(this.context, this.state);
        this.enterRule(localContext, 56, MySqlParser.RULE_createDatabaseOption);
        let _la: number;
        try {
            this.state = 1399;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 115, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1367;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42) {
                    {
                    this.state = 1366;
                    this.match(MySqlParser.DEFAULT);
                    }
                }

                this.state = 1369;
                this.charSet();
                this.state = 1371;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1370;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1375;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.BINARY:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                    {
                    this.state = 1373;
                    this.charsetName();
                    }
                    break;
                case MySqlParser.DEFAULT:
                    {
                    this.state = 1374;
                    this.match(MySqlParser.DEFAULT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1378;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42) {
                    {
                    this.state = 1377;
                    this.match(MySqlParser.DEFAULT);
                    }
                }

                this.state = 1380;
                this.match(MySqlParser.COLLATE);
                this.state = 1382;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1381;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1384;
                this.collationName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1386;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42) {
                    {
                    this.state = 1385;
                    this.match(MySqlParser.DEFAULT);
                    }
                }

                this.state = 1388;
                this.match(MySqlParser.ENCRYPTION);
                this.state = 1390;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1389;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1392;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1393;
                this.match(MySqlParser.READ);
                this.state = 1394;
                this.match(MySqlParser.ONLY);
                this.state = 1396;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1395;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1398;
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 1138 || _la === 1139)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public charSet(): CharSetContext {
        let localContext = new CharSetContext(this.context, this.state);
        this.enterRule(localContext, 58, MySqlParser.RULE_charSet);
        try {
            this.state = 1406;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.CHARACTER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1401;
                this.match(MySqlParser.CHARACTER);
                this.state = 1402;
                this.match(MySqlParser.SET);
                }
                break;
            case MySqlParser.CHARSET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1403;
                this.match(MySqlParser.CHARSET);
                }
                break;
            case MySqlParser.CHAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1404;
                this.match(MySqlParser.CHAR);
                this.state = 1405;
                this.match(MySqlParser.SET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public currentUserExpression(): CurrentUserExpressionContext {
        let localContext = new CurrentUserExpressionContext(this.context, this.state);
        this.enterRule(localContext, 60, MySqlParser.RULE_currentUserExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1408;
            this.match(MySqlParser.CURRENT_USER);
            this.state = 1411;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 117, this.context) ) {
            case 1:
                {
                this.state = 1409;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 1410;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ownerStatement(): OwnerStatementContext {
        let localContext = new OwnerStatementContext(this.context, this.state);
        this.enterRule(localContext, 62, MySqlParser.RULE_ownerStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1413;
            this.match(MySqlParser.DEFINER);
            this.state = 1414;
            this.match(MySqlParser.EQUAL_SYMBOL);
            this.state = 1417;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 118, this.context) ) {
            case 1:
                {
                this.state = 1415;
                this.userName();
                }
                break;
            case 2:
                {
                this.state = 1416;
                this.currentUserExpression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scheduleExpression(): ScheduleExpressionContext {
        let localContext = new ScheduleExpressionContext(this.context, this.state);
        this.enterRule(localContext, 64, MySqlParser.RULE_scheduleExpression);
        let _la: number;
        try {
            this.state = 1453;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.AT:
                localContext = new PreciseScheduleContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1419;
                this.match(MySqlParser.AT);
                this.state = 1420;
                this.timestampValue();
                this.state = 1424;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1120) {
                    {
                    {
                    this.state = 1421;
                    this.intervalExpr();
                    }
                    }
                    this.state = 1426;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case MySqlParser.EVERY:
                localContext = new IntervalScheduleContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1427;
                this.match(MySqlParser.EVERY);
                this.state = 1430;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
                case 1:
                    {
                    this.state = 1428;
                    this.decimalLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 1429;
                    this.expression(0);
                    }
                    break;
                }
                this.state = 1432;
                this.intervalType();
                this.state = 1441;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 630) {
                    {
                    this.state = 1433;
                    this.match(MySqlParser.STARTS);
                    this.state = 1434;
                    (localContext as IntervalScheduleContext)._startTimestamp = this.timestampValue();
                    this.state = 1438;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 1120) {
                        {
                        {
                        this.state = 1435;
                        (localContext as IntervalScheduleContext)._intervalExpr = this.intervalExpr();
                        (localContext as IntervalScheduleContext)._startIntervals.push((localContext as IntervalScheduleContext)._intervalExpr);
                        }
                        }
                        this.state = 1440;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1451;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 408) {
                    {
                    this.state = 1443;
                    this.match(MySqlParser.ENDS);
                    this.state = 1444;
                    (localContext as IntervalScheduleContext)._endTimestamp = this.timestampValue();
                    this.state = 1448;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 1120) {
                        {
                        {
                        this.state = 1445;
                        (localContext as IntervalScheduleContext)._intervalExpr = this.intervalExpr();
                        (localContext as IntervalScheduleContext)._endIntervals.push((localContext as IntervalScheduleContext)._intervalExpr);
                        }
                        }
                        this.state = 1450;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timestampValue(): TimestampValueContext {
        let localContext = new TimestampValueContext(this.context, this.state);
        this.enterRule(localContext, 66, MySqlParser.RULE_timestampValue);
        try {
            this.state = 1459;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 126, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1455;
                this.match(MySqlParser.CURRENT_TIMESTAMP);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1456;
                this.stringLiteral();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1457;
                this.decimalLiteral();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1458;
                this.expression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalExpr(): IntervalExprContext {
        let localContext = new IntervalExprContext(this.context, this.state);
        this.enterRule(localContext, 68, MySqlParser.RULE_intervalExpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1461;
            this.match(MySqlParser.PLUS);
            this.state = 1462;
            this.match(MySqlParser.INTERVAL);
            this.state = 1465;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 127, this.context) ) {
            case 1:
                {
                this.state = 1463;
                this.decimalLiteral();
                }
                break;
            case 2:
                {
                this.state = 1464;
                this.expression(0);
                }
                break;
            }
            this.state = 1467;
            this.intervalType();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalType(): IntervalTypeContext {
        let localContext = new IntervalTypeContext(this.context, this.state);
        this.enterRule(localContext, 70, MySqlParser.RULE_intervalType);
        try {
            this.state = 1482;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.QUARTER:
            case MySqlParser.MONTH:
            case MySqlParser.DAY:
            case MySqlParser.HOUR:
            case MySqlParser.MINUTE:
            case MySqlParser.WEEK:
            case MySqlParser.SECOND:
            case MySqlParser.MICROSECOND:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1469;
                this.intervalTypeBase();
                }
                break;
            case MySqlParser.YEAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1470;
                this.match(MySqlParser.YEAR);
                }
                break;
            case MySqlParser.YEAR_MONTH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1471;
                this.match(MySqlParser.YEAR_MONTH);
                }
                break;
            case MySqlParser.DAY_HOUR:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1472;
                this.match(MySqlParser.DAY_HOUR);
                }
                break;
            case MySqlParser.DAY_MINUTE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1473;
                this.match(MySqlParser.DAY_MINUTE);
                }
                break;
            case MySqlParser.DAY_SECOND:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1474;
                this.match(MySqlParser.DAY_SECOND);
                }
                break;
            case MySqlParser.HOUR_MINUTE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1475;
                this.match(MySqlParser.HOUR_MINUTE);
                }
                break;
            case MySqlParser.HOUR_SECOND:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1476;
                this.match(MySqlParser.HOUR_SECOND);
                }
                break;
            case MySqlParser.MINUTE_SECOND:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1477;
                this.match(MySqlParser.MINUTE_SECOND);
                }
                break;
            case MySqlParser.SECOND_MICROSECOND:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1478;
                this.match(MySqlParser.SECOND_MICROSECOND);
                }
                break;
            case MySqlParser.MINUTE_MICROSECOND:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1479;
                this.match(MySqlParser.MINUTE_MICROSECOND);
                }
                break;
            case MySqlParser.HOUR_MICROSECOND:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1480;
                this.match(MySqlParser.HOUR_MICROSECOND);
                }
                break;
            case MySqlParser.DAY_MICROSECOND:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1481;
                this.match(MySqlParser.DAY_MICROSECOND);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enableType(): EnableTypeContext {
        let localContext = new EnableTypeContext(this.context, this.state);
        this.enterRule(localContext, 72, MySqlParser.RULE_enableType);
        try {
            this.state = 1489;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 129, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1484;
                this.match(MySqlParser.ENABLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1485;
                this.match(MySqlParser.DISABLE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1486;
                this.match(MySqlParser.DISABLE);
                this.state = 1487;
                this.match(MySqlParser.ON);
                this.state = 1488;
                this.match(MySqlParser.SLAVE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexType(): IndexTypeContext {
        let localContext = new IndexTypeContext(this.context, this.state);
        this.enterRule(localContext, 74, MySqlParser.RULE_indexType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1491;
            this.match(MySqlParser.USING);
            this.state = 1492;
            _la = this.tokenStream.LA(1);
            if(!(_la === 350 || _la === 443)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexOption(): IndexOptionContext {
        let localContext = new IndexOptionContext(this.context, this.state);
        this.enterRule(localContext, 76, MySqlParser.RULE_indexOption);
        let _la: number;
        try {
            this.state = 1516;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.KEY_BLOCK_SIZE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1494;
                this.match(MySqlParser.KEY_BLOCK_SIZE);
                this.state = 1496;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1495;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1498;
                this.fileSizeLiteral();
                }
                break;
            case MySqlParser.USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1499;
                this.indexType();
                }
                break;
            case MySqlParser.WITH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1500;
                this.match(MySqlParser.WITH);
                this.state = 1501;
                this.match(MySqlParser.PARSER);
                this.state = 1502;
                this.uid();
                }
                break;
            case MySqlParser.COMMENT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1503;
                this.match(MySqlParser.COMMENT);
                this.state = 1504;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.INVISIBLE:
            case MySqlParser.VISIBLE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1505;
                _la = this.tokenStream.LA(1);
                if(!(_la === 459 || _la === 673)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySqlParser.ENGINE_ATTRIBUTE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1506;
                this.match(MySqlParser.ENGINE_ATTRIBUTE);
                this.state = 1508;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1507;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1510;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1511;
                this.match(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE);
                this.state = 1513;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1512;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1515;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureParameter(): ProcedureParameterContext {
        let localContext = new ProcedureParameterContext(this.context, this.state);
        this.enterRule(localContext, 78, MySqlParser.RULE_procedureParameter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1519;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80 || _la === 84 || _la === 125) {
                {
                this.state = 1518;
                localContext._direction = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 80 || _la === 84 || _la === 125)) {
                    localContext._direction = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1521;
            this.uid();
            this.state = 1522;
            this.dataType();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionParameter(): FunctionParameterContext {
        let localContext = new FunctionParameterContext(this.context, this.state);
        this.enterRule(localContext, 80, MySqlParser.RULE_functionParameter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1524;
            this.uid();
            this.state = 1525;
            this.dataType();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineOption(): RoutineOptionContext {
        let localContext = new RoutineOptionContext(this.context, this.state);
        this.enterRule(localContext, 82, MySqlParser.RULE_routineOption);
        let _la: number;
        try {
            this.state = 1550;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.COMMENT:
                localContext = new RoutineCommentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1527;
                this.match(MySqlParser.COMMENT);
                this.state = 1528;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.LANGUAGE:
                localContext = new RoutineLanguageContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1529;
                this.match(MySqlParser.LANGUAGE);
                this.state = 1530;
                this.match(MySqlParser.SQL);
                }
                break;
            case MySqlParser.DETERMINISTIC:
            case MySqlParser.NOT:
                localContext = new RoutineBehaviorContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1532;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 114) {
                    {
                    this.state = 1531;
                    this.match(MySqlParser.NOT);
                    }
                }

                this.state = 1534;
                this.match(MySqlParser.DETERMINISTIC);
                }
                break;
            case MySqlParser.MODIFIES:
            case MySqlParser.READS:
            case MySqlParser.CONTAINS:
            case MySqlParser.NO:
                localContext = new RoutineDataContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1545;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.CONTAINS:
                    {
                    this.state = 1535;
                    this.match(MySqlParser.CONTAINS);
                    this.state = 1536;
                    this.match(MySqlParser.SQL);
                    }
                    break;
                case MySqlParser.NO:
                    {
                    this.state = 1537;
                    this.match(MySqlParser.NO);
                    this.state = 1538;
                    this.match(MySqlParser.SQL);
                    }
                    break;
                case MySqlParser.READS:
                    {
                    this.state = 1539;
                    this.match(MySqlParser.READS);
                    this.state = 1540;
                    this.match(MySqlParser.SQL);
                    this.state = 1541;
                    this.match(MySqlParser.DATA);
                    }
                    break;
                case MySqlParser.MODIFIES:
                    {
                    this.state = 1542;
                    this.match(MySqlParser.MODIFIES);
                    this.state = 1543;
                    this.match(MySqlParser.SQL);
                    this.state = 1544;
                    this.match(MySqlParser.DATA);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySqlParser.SQL:
                localContext = new RoutineSecurityContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1547;
                this.match(MySqlParser.SQL);
                this.state = 1548;
                this.match(MySqlParser.SECURITY);
                this.state = 1549;
                (localContext as RoutineSecurityContext)._context = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 392 || _la === 460)) {
                    (localContext as RoutineSecurityContext)._context = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public serverOption(): ServerOptionContext {
        let localContext = new ServerOptionContext(this.context, this.state);
        this.enterRule(localContext, 84, MySqlParser.RULE_serverOption);
        try {
            this.state = 1566;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.HOST:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1552;
                this.match(MySqlParser.HOST);
                this.state = 1553;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.DATABASE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1554;
                this.match(MySqlParser.DATABASE);
                this.state = 1555;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.USER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1556;
                this.match(MySqlParser.USER);
                this.state = 1557;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.PASSWORD:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1558;
                this.match(MySqlParser.PASSWORD);
                this.state = 1559;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.SOCKET:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1560;
                this.match(MySqlParser.SOCKET);
                this.state = 1561;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.OWNER:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1562;
                this.match(MySqlParser.OWNER);
                this.state = 1563;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.PORT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1564;
                this.match(MySqlParser.PORT);
                this.state = 1565;
                this.decimalLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDefinitions(): CreateDefinitionsContext {
        let localContext = new CreateDefinitionsContext(this.context, this.state);
        this.enterRule(localContext, 86, MySqlParser.RULE_createDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1568;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 1569;
            this.createDefinition();
            this.state = 1574;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 1570;
                this.match(MySqlParser.COMMA);
                this.state = 1571;
                this.createDefinition();
                }
                }
                this.state = 1576;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1577;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDefinition(): CreateDefinitionContext {
        let localContext = new CreateDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 88, MySqlParser.RULE_createDefinition);
        let _la: number;
        try {
            this.state = 1590;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 142, this.context) ) {
            case 1:
                localContext = new ColumnDeclarationContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1579;
                this.fullColumnName();
                this.state = 1580;
                this.columnDefinition();
                }
                break;
            case 2:
                localContext = new ConstraintDeclarationContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1582;
                this.tableConstraint();
                this.state = 1584;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 114) {
                    {
                    this.state = 1583;
                    this.match(MySqlParser.NOT);
                    }
                }

                this.state = 1587;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 57) {
                    {
                    this.state = 1586;
                    this.match(MySqlParser.ENFORCED);
                    }
                }

                }
                break;
            case 3:
                localContext = new IndexDeclarationContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1589;
                this.indexColumnDefinition();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnDefinition(): ColumnDefinitionContext {
        let localContext = new ColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 90, MySqlParser.RULE_columnDefinition);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1592;
            this.dataType();
            this.state = 1596;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 143, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1593;
                    this.columnConstraint();
                    }
                    }
                }
                this.state = 1598;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 143, this.context);
            }
            this.state = 1600;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 114) {
                {
                this.state = 1599;
                this.match(MySqlParser.NOT);
                }
            }

            this.state = 1603;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 57) {
                {
                this.state = 1602;
                this.match(MySqlParser.ENFORCED);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnConstraint(): ColumnConstraintContext {
        let localContext = new ColumnConstraintContext(this.context, this.state);
        this.enterRule(localContext, 92, MySqlParser.RULE_columnConstraint);
        let _la: number;
        try {
            this.state = 1658;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.NOT:
            case MySqlParser.NULL_LITERAL:
            case MySqlParser.NULL_SPEC_LITERAL:
                localContext = new NullColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1605;
                this.nullNotnull();
                }
                break;
            case MySqlParser.DEFAULT:
                localContext = new DefaultColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1606;
                this.match(MySqlParser.DEFAULT);
                this.state = 1607;
                this.defaultValue();
                }
                break;
            case MySqlParser.VISIBLE:
                localContext = new VisibilityColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1608;
                this.match(MySqlParser.VISIBLE);
                }
                break;
            case MySqlParser.INVISIBLE:
                localContext = new InvisibilityColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1609;
                this.match(MySqlParser.INVISIBLE);
                }
                break;
            case MySqlParser.ON:
            case MySqlParser.AUTO_INCREMENT:
                localContext = new AutoIncrementColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1614;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.AUTO_INCREMENT:
                    {
                    this.state = 1610;
                    this.match(MySqlParser.AUTO_INCREMENT);
                    }
                    break;
                case MySqlParser.ON:
                    {
                    this.state = 1611;
                    this.match(MySqlParser.ON);
                    this.state = 1612;
                    this.match(MySqlParser.UPDATE);
                    this.state = 1613;
                    this.currentTimestamp();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySqlParser.KEY:
            case MySqlParser.PRIMARY:
                localContext = new PrimaryKeyColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1617;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 130) {
                    {
                    this.state = 1616;
                    this.match(MySqlParser.PRIMARY);
                    }
                }

                this.state = 1619;
                this.match(MySqlParser.KEY);
                }
                break;
            case MySqlParser.UNIQUE:
                localContext = new UniqueKeyColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1620;
                this.match(MySqlParser.UNIQUE);
                this.state = 1622;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 148, this.context) ) {
                case 1:
                    {
                    this.state = 1621;
                    this.match(MySqlParser.KEY);
                    }
                    break;
                }
                }
                break;
            case MySqlParser.COMMENT:
                localContext = new CommentColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1624;
                this.match(MySqlParser.COMMENT);
                this.state = 1625;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.COLUMN_FORMAT:
                localContext = new FormatColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1626;
                this.match(MySqlParser.COLUMN_FORMAT);
                this.state = 1627;
                (localContext as FormatColumnConstraintContext)._colformat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 402 || _la === 431)) {
                    (localContext as FormatColumnConstraintContext)._colformat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySqlParser.STORAGE:
                localContext = new StorageColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1628;
                this.match(MySqlParser.STORAGE);
                this.state = 1629;
                (localContext as StorageColumnConstraintContext)._storageval = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 398 || _la === 792)) {
                    (localContext as StorageColumnConstraintContext)._storageval = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySqlParser.REFERENCES:
                localContext = new ReferenceColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1630;
                this.referenceDefinition();
                }
                break;
            case MySqlParser.COLLATE:
                localContext = new CollateColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1631;
                this.match(MySqlParser.COLLATE);
                this.state = 1632;
                this.collationName();
                }
                break;
            case MySqlParser.AS:
            case MySqlParser.GENERATED:
                localContext = new GeneratedColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1635;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 70) {
                    {
                    this.state = 1633;
                    this.match(MySqlParser.GENERATED);
                    this.state = 1634;
                    this.match(MySqlParser.ALWAYS);
                    }
                }

                this.state = 1637;
                this.match(MySqlParser.AS);
                this.state = 1638;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 1639;
                this.expression(0);
                this.state = 1640;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 1642;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 637 || _la === 672) {
                    {
                    this.state = 1641;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 637 || _la === 672)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case MySqlParser.SERIAL:
                localContext = new SerialDefaultColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1644;
                this.match(MySqlParser.SERIAL);
                this.state = 1645;
                this.match(MySqlParser.DEFAULT);
                this.state = 1646;
                this.match(MySqlParser.VALUE);
                }
                break;
            case MySqlParser.CHECK:
            case MySqlParser.CONSTRAINT:
                localContext = new CheckColumnConstraintContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1651;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 1647;
                    this.match(MySqlParser.CONSTRAINT);
                    this.state = 1649;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                        {
                        this.state = 1648;
                        (localContext as CheckColumnConstraintContext)._name = this.uid();
                        }
                    }

                    }
                }

                this.state = 1653;
                this.match(MySqlParser.CHECK);
                this.state = 1654;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 1655;
                this.expression(0);
                this.state = 1656;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableConstraint(): TableConstraintContext {
        let localContext = new TableConstraintContext(this.context, this.state);
        this.enterRule(localContext, 94, MySqlParser.RULE_tableConstraint);
        let _la: number;
        try {
            this.state = 1729;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 170, this.context) ) {
            case 1:
                localContext = new PrimaryKeyTableConstraintContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1664;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 1660;
                    this.match(MySqlParser.CONSTRAINT);
                    this.state = 1662;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 154, this.context) ) {
                    case 1:
                        {
                        this.state = 1661;
                        (localContext as PrimaryKeyTableConstraintContext)._name = this.uid();
                        }
                        break;
                    }
                    }
                }

                this.state = 1666;
                this.match(MySqlParser.PRIMARY);
                this.state = 1667;
                this.match(MySqlParser.KEY);
                this.state = 1669;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 1668;
                    (localContext as PrimaryKeyTableConstraintContext)._index = this.uid();
                    }
                }

                this.state = 1672;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 187) {
                    {
                    this.state = 1671;
                    this.indexType();
                    }
                }

                this.state = 1674;
                this.indexColumnNames();
                this.state = 1678;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 187 || _la === 192 || _la === 368 || _la === 459 || _la === 467 || _la === 673 || _la === 875 || _la === 1000) {
                    {
                    {
                    this.state = 1675;
                    this.indexOption();
                    }
                    }
                    this.state = 1680;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new UniqueKeyTableConstraintContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 1681;
                    this.match(MySqlParser.CONSTRAINT);
                    this.state = 1683;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                        {
                        this.state = 1682;
                        (localContext as UniqueKeyTableConstraintContext)._name = this.uid();
                        }
                    }

                    }
                }

                this.state = 1687;
                this.match(MySqlParser.UNIQUE);
                this.state = 1689;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81 || _la === 91) {
                    {
                    this.state = 1688;
                    (localContext as UniqueKeyTableConstraintContext)._indexFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 81 || _la === 91)) {
                        (localContext as UniqueKeyTableConstraintContext)._indexFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1692;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 1691;
                    (localContext as UniqueKeyTableConstraintContext)._index = this.uid();
                    }
                }

                this.state = 1695;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 187) {
                    {
                    this.state = 1694;
                    this.indexType();
                    }
                }

                this.state = 1697;
                this.indexColumnNames();
                this.state = 1701;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 187 || _la === 192 || _la === 368 || _la === 459 || _la === 467 || _la === 673 || _la === 875 || _la === 1000) {
                    {
                    {
                    this.state = 1698;
                    this.indexOption();
                    }
                    }
                    this.state = 1703;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 3:
                localContext = new ForeignKeyTableConstraintContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1708;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 1704;
                    this.match(MySqlParser.CONSTRAINT);
                    this.state = 1706;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                        {
                        this.state = 1705;
                        (localContext as ForeignKeyTableConstraintContext)._name = this.uid();
                        }
                    }

                    }
                }

                this.state = 1710;
                this.match(MySqlParser.FOREIGN);
                this.state = 1711;
                this.match(MySqlParser.KEY);
                this.state = 1713;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 1712;
                    (localContext as ForeignKeyTableConstraintContext)._index = this.uid();
                    }
                }

                this.state = 1715;
                this.indexColumnNames();
                this.state = 1716;
                this.referenceDefinition();
                }
                break;
            case 4:
                localContext = new CheckTableConstraintContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1722;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 1718;
                    this.match(MySqlParser.CONSTRAINT);
                    this.state = 1720;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                        {
                        this.state = 1719;
                        (localContext as CheckTableConstraintContext)._name = this.uid();
                        }
                    }

                    }
                }

                this.state = 1724;
                this.match(MySqlParser.CHECK);
                this.state = 1725;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 1726;
                this.expression(0);
                this.state = 1727;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public referenceDefinition(): ReferenceDefinitionContext {
        let localContext = new ReferenceDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 96, MySqlParser.RULE_referenceDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1731;
            this.match(MySqlParser.REFERENCES);
            this.state = 1732;
            this.tableName();
            this.state = 1734;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1133) {
                {
                this.state = 1733;
                this.indexColumnNames();
                }
            }

            this.state = 1738;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 1736;
                this.match(MySqlParser.MATCH);
                this.state = 1737;
                localContext._matchType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 436 || _la === 548 || _la === 613)) {
                    localContext._matchType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1741;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 173, this.context) ) {
            case 1:
                {
                this.state = 1740;
                this.referenceAction();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public referenceAction(): ReferenceActionContext {
        let localContext = new ReferenceActionContext(this.context, this.state);
        this.enterRule(localContext, 98, MySqlParser.RULE_referenceAction);
        try {
            this.state = 1759;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 176, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1743;
                this.match(MySqlParser.ON);
                this.state = 1744;
                this.match(MySqlParser.DELETE);
                this.state = 1745;
                localContext._onDelete = this.referenceControlType();
                this.state = 1749;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 174, this.context) ) {
                case 1:
                    {
                    this.state = 1746;
                    this.match(MySqlParser.ON);
                    this.state = 1747;
                    this.match(MySqlParser.UPDATE);
                    this.state = 1748;
                    localContext._onUpdate = this.referenceControlType();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1751;
                this.match(MySqlParser.ON);
                this.state = 1752;
                this.match(MySqlParser.UPDATE);
                this.state = 1753;
                localContext._onUpdate = this.referenceControlType();
                this.state = 1757;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 175, this.context) ) {
                case 1:
                    {
                    this.state = 1754;
                    this.match(MySqlParser.ON);
                    this.state = 1755;
                    this.match(MySqlParser.DELETE);
                    this.state = 1756;
                    localContext._onDelete = this.referenceControlType();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public referenceControlType(): ReferenceControlTypeContext {
        let localContext = new ReferenceControlTypeContext(this.context, this.state);
        this.enterRule(localContext, 100, MySqlParser.RULE_referenceControlType);
        try {
            this.state = 1769;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1761;
                this.match(MySqlParser.RESTRICT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1762;
                this.match(MySqlParser.CASCADE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1763;
                this.match(MySqlParser.SET);
                this.state = 1764;
                this.match(MySqlParser.NULL_LITERAL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1765;
                this.match(MySqlParser.NO);
                this.state = 1766;
                this.match(MySqlParser.ACTION);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1767;
                this.match(MySqlParser.SET);
                this.state = 1768;
                this.match(MySqlParser.DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexColumnDefinition(): IndexColumnDefinitionContext {
        let localContext = new IndexColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 102, MySqlParser.RULE_indexColumnDefinition);
        let _la: number;
        try {
            this.state = 1799;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.INDEX:
            case MySqlParser.KEY:
                localContext = new SimpleIndexDeclarationContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1771;
                (localContext as SimpleIndexDeclarationContext)._indexFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 81 || _la === 91)) {
                    (localContext as SimpleIndexDeclarationContext)._indexFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1773;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 1772;
                    this.uid();
                    }
                }

                this.state = 1776;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 187) {
                    {
                    this.state = 1775;
                    this.indexType();
                    }
                }

                this.state = 1778;
                this.indexColumnNames();
                this.state = 1782;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 187 || _la === 192 || _la === 368 || _la === 459 || _la === 467 || _la === 673 || _la === 875 || _la === 1000) {
                    {
                    {
                    this.state = 1779;
                    this.indexOption();
                    }
                    }
                    this.state = 1784;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case MySqlParser.FULLTEXT:
            case MySqlParser.SPATIAL:
                localContext = new SpecialIndexDeclarationContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1785;
                _la = this.tokenStream.LA(1);
                if(!(_la === 69 || _la === 159)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1787;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81 || _la === 91) {
                    {
                    this.state = 1786;
                    (localContext as SpecialIndexDeclarationContext)._indexFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 81 || _la === 91)) {
                        (localContext as SpecialIndexDeclarationContext)._indexFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1790;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 1789;
                    this.uid();
                    }
                }

                this.state = 1792;
                this.indexColumnNames();
                this.state = 1796;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 187 || _la === 192 || _la === 368 || _la === 459 || _la === 467 || _la === 673 || _la === 875 || _la === 1000) {
                    {
                    {
                    this.state = 1793;
                    this.indexOption();
                    }
                    }
                    this.state = 1798;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableOption(): TableOptionContext {
        let localContext = new TableOptionContext(this.context, this.state);
        this.enterRule(localContext, 104, MySqlParser.RULE_tableOption);
        let _la: number;
        try {
            this.state = 1986;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
            case 1:
                localContext = new TableOptionEngineContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1801;
                this.match(MySqlParser.ENGINE);
                this.state = 1803;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1802;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1806;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 186, this.context) ) {
                case 1:
                    {
                    this.state = 1805;
                    this.engineName();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new TableOptionEngineAttributeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1808;
                this.match(MySqlParser.ENGINE_ATTRIBUTE);
                this.state = 1810;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1809;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1812;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 3:
                localContext = new TableOptionAutoextendSizeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1813;
                this.match(MySqlParser.AUTOEXTEND_SIZE);
                this.state = 1815;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1814;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1817;
                this.decimalLiteral();
                }
                break;
            case 4:
                localContext = new TableOptionAutoIncrementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1818;
                this.match(MySqlParser.AUTO_INCREMENT);
                this.state = 1820;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1819;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1822;
                this.decimalLiteral();
                }
                break;
            case 5:
                localContext = new TableOptionAverageContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1823;
                this.match(MySqlParser.AVG_ROW_LENGTH);
                this.state = 1825;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1824;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1827;
                this.decimalLiteral();
                }
                break;
            case 6:
                localContext = new TableOptionCharsetContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1829;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42) {
                    {
                    this.state = 1828;
                    this.match(MySqlParser.DEFAULT);
                    }
                }

                this.state = 1831;
                this.charSet();
                this.state = 1833;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1832;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1837;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.BINARY:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                    {
                    this.state = 1835;
                    this.charsetName();
                    }
                    break;
                case MySqlParser.DEFAULT:
                    {
                    this.state = 1836;
                    this.match(MySqlParser.DEFAULT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 7:
                localContext = new TableOptionChecksumContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1839;
                _la = this.tokenStream.LA(1);
                if(!(_la === 356 || _la === 357)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1841;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1840;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1843;
                (localContext as TableOptionChecksumContext)._boolValue = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 1138 || _la === 1139)) {
                    (localContext as TableOptionChecksumContext)._boolValue = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 8:
                localContext = new TableOptionCollateContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1845;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42) {
                    {
                    this.state = 1844;
                    this.match(MySqlParser.DEFAULT);
                    }
                }

                this.state = 1847;
                this.match(MySqlParser.COLLATE);
                this.state = 1849;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1848;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1851;
                this.collationName();
                }
                break;
            case 9:
                localContext = new TableOptionCommentContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1852;
                this.match(MySqlParser.COMMENT);
                this.state = 1854;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1853;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1856;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 10:
                localContext = new TableOptionCompressionContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1857;
                this.match(MySqlParser.COMPRESSION);
                this.state = 1859;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1858;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1861;
                _la = this.tokenStream.LA(1);
                if(!(_la === 1148 || _la === 1156)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 11:
                localContext = new TableOptionConnectionContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1862;
                this.match(MySqlParser.CONNECTION);
                this.state = 1864;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1863;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1866;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 12:
                localContext = new TableOptionDataDirectoryContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1867;
                _la = this.tokenStream.LA(1);
                if(!(_la === 81 || _la === 388)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1868;
                this.match(MySqlParser.DIRECTORY);
                this.state = 1870;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1869;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1872;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 13:
                localContext = new TableOptionDelayContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1873;
                this.match(MySqlParser.DELAY_KEY_WRITE);
                this.state = 1875;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1874;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1877;
                (localContext as TableOptionDelayContext)._boolValue = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 1138 || _la === 1139)) {
                    (localContext as TableOptionDelayContext)._boolValue = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 14:
                localContext = new TableOptionEncryptionContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1878;
                this.match(MySqlParser.ENCRYPTION);
                this.state = 1880;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1879;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1882;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 15:
                localContext = new TableOptionPageCompressedContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1883;
                _la = this.tokenStream.LA(1);
                if(!(_la === 545 || _la === 1148)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1885;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1884;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1887;
                _la = this.tokenStream.LA(1);
                if(!(_la === 1138 || _la === 1139)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 16:
                localContext = new TableOptionPageCompressionLevelContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1888;
                _la = this.tokenStream.LA(1);
                if(!(_la === 546 || _la === 1148)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1890;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1889;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1892;
                this.decimalLiteral();
                }
                break;
            case 17:
                localContext = new TableOptionEncryptionKeyIdContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1893;
                this.match(MySqlParser.ENCRYPTION_KEY_ID);
                this.state = 1895;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1894;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1897;
                this.decimalLiteral();
                }
                break;
            case 18:
                localContext = new TableOptionIndexDirectoryContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1898;
                this.match(MySqlParser.INDEX);
                this.state = 1899;
                this.match(MySqlParser.DIRECTORY);
                this.state = 1901;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1900;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1903;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 19:
                localContext = new TableOptionInsertMethodContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1904;
                this.match(MySqlParser.INSERT_METHOD);
                this.state = 1906;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1905;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1908;
                (localContext as TableOptionInsertMethodContext)._insertMethod = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 430 || _la === 469 || _la === 521)) {
                    (localContext as TableOptionInsertMethodContext)._insertMethod = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 20:
                localContext = new TableOptionKeyBlockSizeContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1909;
                this.match(MySqlParser.KEY_BLOCK_SIZE);
                this.state = 1911;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1910;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1913;
                this.fileSizeLiteral();
                }
                break;
            case 21:
                localContext = new TableOptionMaxRowsContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1914;
                this.match(MySqlParser.MAX_ROWS);
                this.state = 1916;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1915;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1918;
                this.decimalLiteral();
                }
                break;
            case 22:
                localContext = new TableOptionMinRowsContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1919;
                this.match(MySqlParser.MIN_ROWS);
                this.state = 1921;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1920;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1923;
                this.decimalLiteral();
                }
                break;
            case 23:
                localContext = new TableOptionPackKeysContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1924;
                this.match(MySqlParser.PACK_KEYS);
                this.state = 1926;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1925;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1928;
                (localContext as TableOptionPackKeysContext)._extBoolValue = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 1138 || _la === 1139)) {
                    (localContext as TableOptionPackKeysContext)._extBoolValue = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 24:
                localContext = new TableOptionPasswordContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1929;
                this.match(MySqlParser.PASSWORD);
                this.state = 1931;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1930;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1933;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 25:
                localContext = new TableOptionRowFormatContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1934;
                this.match(MySqlParser.ROW_FORMAT);
                this.state = 1936;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1935;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1938;
                (localContext as TableOptionRowFormatContext)._rowFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 370 || _la === 372 || _la === 402 || _la === 431 || _la === 573 || _la === 1156)) {
                    (localContext as TableOptionRowFormatContext)._rowFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 26:
                localContext = new TableOptionStartTransactionContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1939;
                this.match(MySqlParser.START);
                this.state = 1940;
                this.match(MySqlParser.TRANSACTION);
                }
                break;
            case 27:
                localContext = new TableOptionSecondaryEngineAttributeContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1941;
                this.match(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE);
                this.state = 1943;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1942;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1945;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 28:
                localContext = new TableOptionRecalculationContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1946;
                this.match(MySqlParser.STATS_AUTO_RECALC);
                this.state = 1948;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1947;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1950;
                (localContext as TableOptionRecalculationContext)._extBoolValue = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 1138 || _la === 1139)) {
                    (localContext as TableOptionRecalculationContext)._extBoolValue = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 29:
                localContext = new TableOptionPersistentContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1951;
                this.match(MySqlParser.STATS_PERSISTENT);
                this.state = 1953;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1952;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1955;
                (localContext as TableOptionPersistentContext)._extBoolValue = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 1138 || _la === 1139)) {
                    (localContext as TableOptionPersistentContext)._extBoolValue = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 30:
                localContext = new TableOptionSamplePageContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1956;
                this.match(MySqlParser.STATS_SAMPLE_PAGES);
                this.state = 1958;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1957;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1962;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.DEFAULT:
                    {
                    this.state = 1960;
                    this.match(MySqlParser.DEFAULT);
                    }
                    break;
                case MySqlParser.ZERO_DECIMAL:
                case MySqlParser.ONE_DECIMAL:
                case MySqlParser.TWO_DECIMAL:
                case MySqlParser.DECIMAL_LITERAL:
                case MySqlParser.REAL_LITERAL:
                    {
                    this.state = 1961;
                    this.decimalLiteral();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 31:
                localContext = new TableOptionTablespaceContext(localContext);
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1964;
                this.match(MySqlParser.TABLESPACE);
                this.state = 1965;
                this.uid();
                this.state = 1967;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
                case 1:
                    {
                    this.state = 1966;
                    this.tablespaceStorage();
                    }
                    break;
                }
                }
                break;
            case 32:
                localContext = new TableOptionTableTypeContext(localContext);
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 1969;
                this.match(MySqlParser.TABLE_TYPE);
                this.state = 1970;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 1971;
                this.tableType();
                }
                break;
            case 33:
                localContext = new TableOptionTablespaceContext(localContext);
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 1972;
                this.tablespaceStorage();
                }
                break;
            case 34:
                localContext = new TableOptionTransactionalContext(localContext);
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 1973;
                this.match(MySqlParser.TRANSACTIONAL);
                this.state = 1975;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1974;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1977;
                _la = this.tokenStream.LA(1);
                if(!(_la === 1138 || _la === 1139)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 35:
                localContext = new TableOptionUnionContext(localContext);
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 1978;
                this.match(MySqlParser.UNION);
                this.state = 1980;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 1979;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 1982;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 1983;
                this.tables();
                this.state = 1984;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableType(): TableTypeContext {
        let localContext = new TableTypeContext(this.context, this.state);
        this.enterRule(localContext, 106, MySqlParser.RULE_tableType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1988;
            _la = this.tokenStream.LA(1);
            if(!(_la === 514 || _la === 530)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablespaceStorage(): TablespaceStorageContext {
        let localContext = new TablespaceStorageContext(this.context, this.state);
        this.enterRule(localContext, 108, MySqlParser.RULE_tablespaceStorage);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1990;
            this.match(MySqlParser.STORAGE);
            this.state = 1991;
            _la = this.tokenStream.LA(1);
            if(!(_la === 42 || _la === 398 || _la === 792)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionDefinitions(): PartitionDefinitionsContext {
        let localContext = new PartitionDefinitionsContext(this.context, this.state);
        this.enterRule(localContext, 110, MySqlParser.RULE_partitionDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1993;
            this.match(MySqlParser.PARTITION);
            this.state = 1994;
            this.match(MySqlParser.BY);
            this.state = 1995;
            this.partitionFunctionDefinition();
            this.state = 1998;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 550) {
                {
                this.state = 1996;
                this.match(MySqlParser.PARTITIONS);
                this.state = 1997;
                localContext._count = this.decimalLiteral();
                }
            }

            this.state = 2007;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 641) {
                {
                this.state = 2000;
                this.match(MySqlParser.SUBPARTITION);
                this.state = 2001;
                this.match(MySqlParser.BY);
                this.state = 2002;
                this.subpartitionFunctionDefinition();
                this.state = 2005;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 642) {
                    {
                    this.state = 2003;
                    this.match(MySqlParser.SUBPARTITIONS);
                    this.state = 2004;
                    localContext._subCount = this.decimalLiteral();
                    }
                }

                }
            }

            this.state = 2020;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 227, this.context) ) {
            case 1:
                {
                this.state = 2009;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2010;
                this.partitionDefinition();
                this.state = 2015;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 2011;
                    this.match(MySqlParser.COMMA);
                    this.state = 2012;
                    this.partitionDefinition();
                    }
                    }
                    this.state = 2017;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2018;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionFunctionDefinition(): PartitionFunctionDefinitionContext {
        let localContext = new PartitionFunctionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 112, MySqlParser.RULE_partitionFunctionDefinition);
        let _la: number;
        try {
            this.state = 2068;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 234, this.context) ) {
            case 1:
                localContext = new PartitionFunctionHashContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2023;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2022;
                    this.match(MySqlParser.LINEAR);
                    }
                }

                this.state = 2025;
                this.match(MySqlParser.HASH);
                this.state = 2026;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2027;
                this.expression(0);
                this.state = 2028;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 2:
                localContext = new PartitionFunctionKeyContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2031;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2030;
                    this.match(MySqlParser.LINEAR);
                    }
                }

                this.state = 2033;
                this.match(MySqlParser.KEY);
                this.state = 2037;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 336) {
                    {
                    this.state = 2034;
                    this.match(MySqlParser.ALGORITHM);
                    this.state = 2035;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    this.state = 2036;
                    (localContext as PartitionFunctionKeyContext)._algType = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1139 || _la === 1140)) {
                        (localContext as PartitionFunctionKeyContext)._algType = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2039;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2041;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 2040;
                    this.uidList();
                    }
                }

                this.state = 2043;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 3:
                localContext = new PartitionFunctionRangeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2044;
                this.match(MySqlParser.RANGE);
                this.state = 2054;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.LR_BRACKET:
                    {
                    this.state = 2045;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 2046;
                    this.expression(0);
                    this.state = 2047;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    break;
                case MySqlParser.COLUMNS:
                    {
                    this.state = 2049;
                    this.match(MySqlParser.COLUMNS);
                    this.state = 2050;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 2051;
                    this.uidList();
                    this.state = 2052;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                localContext = new PartitionFunctionListContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2056;
                this.match(MySqlParser.LIST);
                this.state = 2066;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.LR_BRACKET:
                    {
                    this.state = 2057;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 2058;
                    this.expression(0);
                    this.state = 2059;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    break;
                case MySqlParser.COLUMNS:
                    {
                    this.state = 2061;
                    this.match(MySqlParser.COLUMNS);
                    this.state = 2062;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 2063;
                    this.uidList();
                    this.state = 2064;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subpartitionFunctionDefinition(): SubpartitionFunctionDefinitionContext {
        let localContext = new SubpartitionFunctionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 114, MySqlParser.RULE_subpartitionFunctionDefinition);
        let _la: number;
        try {
            this.state = 2091;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
            case 1:
                localContext = new SubPartitionFunctionHashContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2071;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2070;
                    this.match(MySqlParser.LINEAR);
                    }
                }

                this.state = 2073;
                this.match(MySqlParser.HASH);
                this.state = 2074;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2075;
                this.expression(0);
                this.state = 2076;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 2:
                localContext = new SubPartitionFunctionKeyContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2078;
                    this.match(MySqlParser.LINEAR);
                    }
                }

                this.state = 2081;
                this.match(MySqlParser.KEY);
                this.state = 2085;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 336) {
                    {
                    this.state = 2082;
                    this.match(MySqlParser.ALGORITHM);
                    this.state = 2083;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    this.state = 2084;
                    (localContext as SubPartitionFunctionKeyContext)._algType = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1139 || _la === 1140)) {
                        (localContext as SubPartitionFunctionKeyContext)._algType = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2087;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2088;
                this.uidList();
                this.state = 2089;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionDefinition(): PartitionDefinitionContext {
        let localContext = new PartitionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 116, MySqlParser.RULE_partitionDefinition);
        let _la: number;
        try {
            this.state = 2239;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 257, this.context) ) {
            case 1:
                localContext = new PartitionComparisonContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2093;
                this.match(MySqlParser.PARTITION);
                this.state = 2094;
                this.uid();
                this.state = 2095;
                this.match(MySqlParser.VALUES);
                this.state = 2096;
                this.match(MySqlParser.LESS);
                this.state = 2097;
                this.match(MySqlParser.THAN);
                this.state = 2098;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2099;
                this.partitionDefinerAtom();
                this.state = 2104;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 2100;
                    this.match(MySqlParser.COMMA);
                    this.state = 2101;
                    this.partitionDefinerAtom();
                    }
                    }
                    this.state = 2106;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2107;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 2111;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 42 || _la === 81 || _la === 368 || _la === 388 || _la === 409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la === 636 || _la === 647) {
                    {
                    {
                    this.state = 2108;
                    this.partitionOption();
                    }
                    }
                    this.state = 2113;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2125;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1133) {
                    {
                    this.state = 2114;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 2115;
                    this.subpartitionDefinition();
                    this.state = 2120;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 1135) {
                        {
                        {
                        this.state = 2116;
                        this.match(MySqlParser.COMMA);
                        this.state = 2117;
                        this.subpartitionDefinition();
                        }
                        }
                        this.state = 2122;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2123;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                }

                }
                break;
            case 2:
                localContext = new PartitionComparisonContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2127;
                this.match(MySqlParser.PARTITION);
                this.state = 2128;
                this.uid();
                this.state = 2129;
                this.match(MySqlParser.VALUES);
                this.state = 2130;
                this.match(MySqlParser.LESS);
                this.state = 2131;
                this.match(MySqlParser.THAN);
                this.state = 2132;
                this.partitionDefinerAtom();
                this.state = 2136;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 42 || _la === 81 || _la === 368 || _la === 388 || _la === 409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la === 636 || _la === 647) {
                    {
                    {
                    this.state = 2133;
                    this.partitionOption();
                    }
                    }
                    this.state = 2138;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2150;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1133) {
                    {
                    this.state = 2139;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 2140;
                    this.subpartitionDefinition();
                    this.state = 2145;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 1135) {
                        {
                        {
                        this.state = 2141;
                        this.match(MySqlParser.COMMA);
                        this.state = 2142;
                        this.subpartitionDefinition();
                        }
                        }
                        this.state = 2147;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2148;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                }

                }
                break;
            case 3:
                localContext = new PartitionListAtomContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2152;
                this.match(MySqlParser.PARTITION);
                this.state = 2153;
                this.uid();
                this.state = 2154;
                this.match(MySqlParser.VALUES);
                this.state = 2155;
                this.match(MySqlParser.IN);
                this.state = 2156;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2157;
                this.partitionDefinerAtom();
                this.state = 2162;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 2158;
                    this.match(MySqlParser.COMMA);
                    this.state = 2159;
                    this.partitionDefinerAtom();
                    }
                    }
                    this.state = 2164;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2165;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 2169;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 42 || _la === 81 || _la === 368 || _la === 388 || _la === 409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la === 636 || _la === 647) {
                    {
                    {
                    this.state = 2166;
                    this.partitionOption();
                    }
                    }
                    this.state = 2171;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2183;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1133) {
                    {
                    this.state = 2172;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 2173;
                    this.subpartitionDefinition();
                    this.state = 2178;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 1135) {
                        {
                        {
                        this.state = 2174;
                        this.match(MySqlParser.COMMA);
                        this.state = 2175;
                        this.subpartitionDefinition();
                        }
                        }
                        this.state = 2180;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2181;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                }

                }
                break;
            case 4:
                localContext = new PartitionListVectorContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2185;
                this.match(MySqlParser.PARTITION);
                this.state = 2186;
                this.uid();
                this.state = 2187;
                this.match(MySqlParser.VALUES);
                this.state = 2188;
                this.match(MySqlParser.IN);
                this.state = 2189;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2190;
                this.partitionDefinerVector();
                this.state = 2195;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 2191;
                    this.match(MySqlParser.COMMA);
                    this.state = 2192;
                    this.partitionDefinerVector();
                    }
                    }
                    this.state = 2197;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2198;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 2202;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 42 || _la === 81 || _la === 368 || _la === 388 || _la === 409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la === 636 || _la === 647) {
                    {
                    {
                    this.state = 2199;
                    this.partitionOption();
                    }
                    }
                    this.state = 2204;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2216;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1133) {
                    {
                    this.state = 2205;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 2206;
                    this.subpartitionDefinition();
                    this.state = 2211;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 1135) {
                        {
                        {
                        this.state = 2207;
                        this.match(MySqlParser.COMMA);
                        this.state = 2208;
                        this.subpartitionDefinition();
                        }
                        }
                        this.state = 2213;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2214;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                }

                }
                break;
            case 5:
                localContext = new PartitionSimpleContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2218;
                this.match(MySqlParser.PARTITION);
                this.state = 2219;
                this.uid();
                this.state = 2223;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 42 || _la === 81 || _la === 368 || _la === 388 || _la === 409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la === 636 || _la === 647) {
                    {
                    {
                    this.state = 2220;
                    this.partitionOption();
                    }
                    }
                    this.state = 2225;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2237;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1133) {
                    {
                    this.state = 2226;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 2227;
                    this.subpartitionDefinition();
                    this.state = 2232;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 1135) {
                        {
                        {
                        this.state = 2228;
                        this.match(MySqlParser.COMMA);
                        this.state = 2229;
                        this.subpartitionDefinition();
                        }
                        }
                        this.state = 2234;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2235;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionDefinerAtom(): PartitionDefinerAtomContext {
        let localContext = new PartitionDefinerAtomContext(this.context, this.state);
        this.enterRule(localContext, 118, MySqlParser.RULE_partitionDefinerAtom);
        try {
            this.state = 2244;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2241;
                this.constant();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2242;
                this.expression(0);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2243;
                this.match(MySqlParser.MAXVALUE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionDefinerVector(): PartitionDefinerVectorContext {
        let localContext = new PartitionDefinerVectorContext(this.context, this.state);
        this.enterRule(localContext, 120, MySqlParser.RULE_partitionDefinerVector);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2246;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 2247;
            this.partitionDefinerAtom();
            this.state = 2250;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 2248;
                this.match(MySqlParser.COMMA);
                this.state = 2249;
                this.partitionDefinerAtom();
                }
                }
                this.state = 2252;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 1135);
            this.state = 2254;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subpartitionDefinition(): SubpartitionDefinitionContext {
        let localContext = new SubpartitionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 122, MySqlParser.RULE_subpartitionDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2256;
            this.match(MySqlParser.SUBPARTITION);
            this.state = 2257;
            this.uid();
            this.state = 2261;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 42 || _la === 81 || _la === 368 || _la === 388 || _la === 409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la === 636 || _la === 647) {
                {
                {
                this.state = 2258;
                this.partitionOption();
                }
                }
                this.state = 2263;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionOption(): PartitionOptionContext {
        let localContext = new PartitionOptionContext(this.context, this.state);
        this.enterRule(localContext, 124, MySqlParser.RULE_partitionOption);
        let _la: number;
        try {
            this.state = 2312;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.DEFAULT:
            case MySqlParser.ENGINE:
            case MySqlParser.STORAGE:
                localContext = new PartitionOptionEngineContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2265;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42) {
                    {
                    this.state = 2264;
                    this.match(MySqlParser.DEFAULT);
                    }
                }

                this.state = 2268;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 636) {
                    {
                    this.state = 2267;
                    this.match(MySqlParser.STORAGE);
                    }
                }

                this.state = 2270;
                this.match(MySqlParser.ENGINE);
                this.state = 2272;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 2271;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 2274;
                this.engineName();
                }
                break;
            case MySqlParser.COMMENT:
                localContext = new PartitionOptionCommentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2275;
                this.match(MySqlParser.COMMENT);
                this.state = 2277;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 2276;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 2279;
                (localContext as PartitionOptionCommentContext)._comment = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.DATA:
                localContext = new PartitionOptionDataDirectoryContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2280;
                this.match(MySqlParser.DATA);
                this.state = 2281;
                this.match(MySqlParser.DIRECTORY);
                this.state = 2283;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 2282;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 2285;
                (localContext as PartitionOptionDataDirectoryContext)._dataDirectory = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.INDEX:
                localContext = new PartitionOptionIndexDirectoryContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2286;
                this.match(MySqlParser.INDEX);
                this.state = 2287;
                this.match(MySqlParser.DIRECTORY);
                this.state = 2289;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 2288;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 2291;
                (localContext as PartitionOptionIndexDirectoryContext)._indexDirectory = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.MAX_ROWS:
                localContext = new PartitionOptionMaxRowsContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2292;
                this.match(MySqlParser.MAX_ROWS);
                this.state = 2294;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 2293;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 2296;
                (localContext as PartitionOptionMaxRowsContext)._maxRows = this.decimalLiteral();
                }
                break;
            case MySqlParser.MIN_ROWS:
                localContext = new PartitionOptionMinRowsContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2297;
                this.match(MySqlParser.MIN_ROWS);
                this.state = 2299;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 2298;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 2301;
                (localContext as PartitionOptionMinRowsContext)._minRows = this.decimalLiteral();
                }
                break;
            case MySqlParser.TABLESPACE:
                localContext = new PartitionOptionTablespaceContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2302;
                this.match(MySqlParser.TABLESPACE);
                this.state = 2304;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 2303;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 2306;
                (localContext as PartitionOptionTablespaceContext)._tablespace = this.uid();
                }
                break;
            case MySqlParser.NODEGROUP:
                localContext = new PartitionOptionNodeGroupContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2307;
                this.match(MySqlParser.NODEGROUP);
                this.state = 2309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 2308;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 2311;
                (localContext as PartitionOptionNodeGroupContext)._nodegroup = this.uid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabase(): AlterDatabaseContext {
        let localContext = new AlterDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 126, MySqlParser.RULE_alterDatabase);
        let _la: number;
        try {
            this.state = 2332;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 274, this.context) ) {
            case 1:
                localContext = new AlterSimpleDatabaseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2314;
                this.match(MySqlParser.ALTER);
                this.state = 2315;
                (localContext as AlterSimpleDatabaseContext)._dbFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 39 || _la === 150)) {
                    (localContext as AlterSimpleDatabaseContext)._dbFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2317;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 272, this.context) ) {
                case 1:
                    {
                    this.state = 2316;
                    this.uid();
                    }
                    break;
                }
                this.state = 2320;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2319;
                    this.createDatabaseOption();
                    }
                    }
                    this.state = 2322;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la === 134 || _la === 222 || _la === 405 || _la === 841);
                }
                break;
            case 2:
                localContext = new AlterUpgradeNameContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2324;
                this.match(MySqlParser.ALTER);
                this.state = 2325;
                (localContext as AlterUpgradeNameContext)._dbFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 39 || _la === 150)) {
                    (localContext as AlterUpgradeNameContext)._dbFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2326;
                this.uid();
                this.state = 2327;
                this.match(MySqlParser.UPGRADE);
                this.state = 2328;
                this.match(MySqlParser.DATA);
                this.state = 2329;
                this.match(MySqlParser.DIRECTORY);
                this.state = 2330;
                this.match(MySqlParser.NAME);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterEvent(): AlterEventContext {
        let localContext = new AlterEventContext(this.context, this.state);
        this.enterRule(localContext, 128, MySqlParser.RULE_alterEvent);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2334;
            this.match(MySqlParser.ALTER);
            this.state = 2336;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 392) {
                {
                this.state = 2335;
                this.ownerStatement();
                }
            }

            this.state = 2338;
            this.match(MySqlParser.EVENT);
            this.state = 2339;
            this.fullId();
            this.state = 2343;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 276, this.context) ) {
            case 1:
                {
                this.state = 2340;
                this.match(MySqlParser.ON);
                this.state = 2341;
                this.match(MySqlParser.SCHEDULE);
                this.state = 2342;
                this.scheduleExpression();
                }
                break;
            }
            this.state = 2351;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118) {
                {
                this.state = 2345;
                this.match(MySqlParser.ON);
                this.state = 2346;
                this.match(MySqlParser.COMPLETION);
                this.state = 2348;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 114) {
                    {
                    this.state = 2347;
                    this.match(MySqlParser.NOT);
                    }
                }

                this.state = 2350;
                this.match(MySqlParser.PRESERVE);
                }
            }

            this.state = 2356;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 139) {
                {
                this.state = 2353;
                this.match(MySqlParser.RENAME);
                this.state = 2354;
                this.match(MySqlParser.TO);
                this.state = 2355;
                this.fullId();
                }
            }

            this.state = 2359;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 396 || _la === 403) {
                {
                this.state = 2358;
                this.enableType();
                }
            }

            this.state = 2363;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 368) {
                {
                this.state = 2361;
                this.match(MySqlParser.COMMENT);
                this.state = 2362;
                this.match(MySqlParser.STRING_LITERAL);
                }
            }

            this.state = 2367;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 2365;
                this.match(MySqlParser.DO);
                this.state = 2366;
                this.routineBody();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterFunction(): AlterFunctionContext {
        let localContext = new AlterFunctionContext(this.context, this.state);
        this.enterRule(localContext, 130, MySqlParser.RULE_alterFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2369;
            this.match(MySqlParser.ALTER);
            this.state = 2370;
            this.match(MySqlParser.FUNCTION);
            this.state = 2371;
            this.fullId();
            this.state = 2375;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 47 || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 8388613) !== 0) || _la === 160 || _la === 368 || _la === 381 || _la === 468 || _la === 521) {
                {
                {
                this.state = 2372;
                this.routineOption();
                }
                }
                this.state = 2377;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterInstance(): AlterInstanceContext {
        let localContext = new AlterInstanceContext(this.context, this.state);
        this.enterRule(localContext, 132, MySqlParser.RULE_alterInstance);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2378;
            this.match(MySqlParser.ALTER);
            this.state = 2379;
            this.match(MySqlParser.INSTANCE);
            this.state = 2380;
            this.match(MySqlParser.ROTATE);
            this.state = 2381;
            this.match(MySqlParser.INNODB);
            this.state = 2382;
            this.match(MySqlParser.MASTER);
            this.state = 2383;
            this.match(MySqlParser.KEY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterLogfileGroup(): AlterLogfileGroupContext {
        let localContext = new AlterLogfileGroupContext(this.context, this.state);
        this.enterRule(localContext, 134, MySqlParser.RULE_alterLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2385;
            this.match(MySqlParser.ALTER);
            this.state = 2386;
            this.match(MySqlParser.LOGFILE);
            this.state = 2387;
            this.match(MySqlParser.GROUP);
            this.state = 2388;
            this.uid();
            this.state = 2389;
            this.match(MySqlParser.ADD);
            this.state = 2390;
            this.match(MySqlParser.UNDOFILE);
            this.state = 2391;
            this.match(MySqlParser.STRING_LITERAL);
            this.state = 2397;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 453) {
                {
                this.state = 2392;
                this.match(MySqlParser.INITIAL_SIZE);
                this.state = 2394;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 2393;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 2396;
                this.fileSizeLiteral();
                }
            }

            this.state = 2400;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 674) {
                {
                this.state = 2399;
                this.match(MySqlParser.WAIT);
                }
            }

            this.state = 2402;
            this.match(MySqlParser.ENGINE);
            this.state = 2404;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1124) {
                {
                this.state = 2403;
                this.match(MySqlParser.EQUAL_SYMBOL);
                }
            }

            this.state = 2406;
            this.engineName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterProcedure(): AlterProcedureContext {
        let localContext = new AlterProcedureContext(this.context, this.state);
        this.enterRule(localContext, 136, MySqlParser.RULE_alterProcedure);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2408;
            this.match(MySqlParser.ALTER);
            this.state = 2409;
            this.match(MySqlParser.PROCEDURE);
            this.state = 2410;
            this.fullId();
            this.state = 2414;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 47 || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 8388613) !== 0) || _la === 160 || _la === 368 || _la === 381 || _la === 468 || _la === 521) {
                {
                {
                this.state = 2411;
                this.routineOption();
                }
                }
                this.state = 2416;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterServer(): AlterServerContext {
        let localContext = new AlterServerContext(this.context, this.state);
        this.enterRule(localContext, 138, MySqlParser.RULE_alterServer);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2417;
            this.match(MySqlParser.ALTER);
            this.state = 2418;
            this.match(MySqlParser.SERVER);
            this.state = 2419;
            this.uid();
            this.state = 2420;
            this.match(MySqlParser.OPTIONS);
            this.state = 2421;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 2422;
            this.serverOption();
            this.state = 2427;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 2423;
                this.match(MySqlParser.COMMA);
                this.state = 2424;
                this.serverOption();
                }
                }
                this.state = 2429;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2430;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTable(): AlterTableContext {
        let localContext = new AlterTableContext(this.context, this.state);
        this.enterRule(localContext, 140, MySqlParser.RULE_alterTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2432;
            this.match(MySqlParser.ALTER);
            this.state = 2434;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 531 || _la === 537) {
                {
                this.state = 2433;
                localContext._intimeAction = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 531 || _la === 537)) {
                    localContext._intimeAction = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2437;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78) {
                {
                this.state = 2436;
                this.match(MySqlParser.IGNORE);
                }
            }

            this.state = 2439;
            this.match(MySqlParser.TABLE);
            this.state = 2440;
            this.tableName();
            this.state = 2442;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 527 || _la === 674) {
                {
                this.state = 2441;
                this.waitNowaitClause();
                }
            }

            this.state = 2452;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 5)) & ~0x1F) === 0 && ((1 << (_la - 5)) & 142082069) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & 16777729) !== 0) || _la === 81 || _la === 103 || ((((_la - 119)) & ~0x1F) === 0 && ((1 << (_la - 119)) & 1048609) !== 0) || _la === 180 || _la === 192 || _la === 222 || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & 137363681) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & 839909665) !== 0) || ((((_la - 403)) & ~0x1F) === 0 && ((1 << (_la - 403)) & 32845) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 131105) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 5121) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & 67109133) !== 0) || ((((_la - 578)) & ~0x1F) === 0 && ((1 << (_la - 578)) & 16777223) !== 0) || ((((_la - 629)) & ~0x1F) === 0 && ((1 << (_la - 629)) & 168558749) !== 0) || _la === 664 || _la === 677 || _la === 841 || _la === 875 || _la === 1000 || _la === 1148) {
                {
                this.state = 2444;
                this.alterSpecification();
                this.state = 2449;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 2445;
                    this.match(MySqlParser.COMMA);
                    this.state = 2446;
                    this.alterSpecification();
                    }
                    }
                    this.state = 2451;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2455;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 2454;
                this.partitionDefinitions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTablespace(): AlterTablespaceContext {
        let localContext = new AlterTablespaceContext(this.context, this.state);
        this.enterRule(localContext, 142, MySqlParser.RULE_alterTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2457;
            this.match(MySqlParser.ALTER);
            this.state = 2458;
            this.match(MySqlParser.TABLESPACE);
            this.state = 2459;
            this.uid();
            this.state = 2460;
            localContext._objectAction = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 5 || _la === 51)) {
                localContext._objectAction = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2461;
            this.match(MySqlParser.DATAFILE);
            this.state = 2462;
            this.match(MySqlParser.STRING_LITERAL);
            this.state = 2466;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 453) {
                {
                this.state = 2463;
                this.match(MySqlParser.INITIAL_SIZE);
                this.state = 2464;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 2465;
                this.fileSizeLiteral();
                }
            }

            this.state = 2469;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 674) {
                {
                this.state = 2468;
                this.match(MySqlParser.WAIT);
                }
            }

            this.state = 2471;
            this.match(MySqlParser.ENGINE);
            this.state = 2473;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1124) {
                {
                this.state = 2472;
                this.match(MySqlParser.EQUAL_SYMBOL);
                }
            }

            this.state = 2475;
            this.engineName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterView(): AlterViewContext {
        let localContext = new AlterViewContext(this.context, this.state);
        this.enterRule(localContext, 144, MySqlParser.RULE_alterView);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2477;
            this.match(MySqlParser.ALTER);
            this.state = 2481;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 336) {
                {
                this.state = 2478;
                this.match(MySqlParser.ALGORITHM);
                this.state = 2479;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 2480;
                localContext._algType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 506 || _la === 650 || _la === 658)) {
                    localContext._algType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2484;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 392) {
                {
                this.state = 2483;
                this.ownerStatement();
                }
            }

            this.state = 2489;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 160) {
                {
                this.state = 2486;
                this.match(MySqlParser.SQL);
                this.state = 2487;
                this.match(MySqlParser.SECURITY);
                this.state = 2488;
                localContext._secContext = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 392 || _la === 460)) {
                    localContext._secContext = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2491;
            this.match(MySqlParser.VIEW);
            this.state = 2492;
            this.fullId();
            this.state = 2497;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1133) {
                {
                this.state = 2493;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2494;
                this.uidList();
                this.state = 2495;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 2499;
            this.match(MySqlParser.AS);
            this.state = 2500;
            this.selectStatement();
            this.state = 2507;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 192) {
                {
                this.state = 2501;
                this.match(MySqlParser.WITH);
                this.state = 2503;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 352 || _la === 474) {
                    {
                    this.state = 2502;
                    localContext._checkOpt = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 352 || _la === 474)) {
                        localContext._checkOpt = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2505;
                this.match(MySqlParser.CHECK);
                this.state = 2506;
                this.match(MySqlParser.OPTION);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterSpecification(): AlterSpecificationContext {
        let localContext = new AlterSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 146, MySqlParser.RULE_alterSpecification);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2860;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 364, this.context) ) {
            case 1:
                localContext = new AlterByTableOptionContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2509;
                this.tableOption();
                this.state = 2516;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 306, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2511;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 1135) {
                            {
                            this.state = 2510;
                            this.match(MySqlParser.COMMA);
                            }
                        }

                        this.state = 2513;
                        this.tableOption();
                        }
                        }
                    }
                    this.state = 2518;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 306, this.context);
                }
                }
                break;
            case 2:
                localContext = new AlterByAddColumnContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2519;
                this.match(MySqlParser.ADD);
                this.state = 2521;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2520;
                    this.match(MySqlParser.COLUMN);
                    }
                }

                this.state = 2523;
                this.uid();
                this.state = 2524;
                this.columnDefinition();
                this.state = 2528;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.FIRST:
                    {
                    this.state = 2525;
                    this.match(MySqlParser.FIRST);
                    }
                    break;
                case MySqlParser.AFTER:
                    {
                    this.state = 2526;
                    this.match(MySqlParser.AFTER);
                    this.state = 2527;
                    this.uid();
                    }
                    break;
                case MySqlParser.EOF:
                case MySqlParser.PARTITION:
                case MySqlParser.COMMA:
                case MySqlParser.SEMI:
                    break;
                default:
                    break;
                }
                }
                break;
            case 3:
                localContext = new AlterByAddColumnsContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2530;
                this.match(MySqlParser.ADD);
                this.state = 2532;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2531;
                    this.match(MySqlParser.COLUMN);
                    }
                }

                this.state = 2534;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2535;
                this.uid();
                this.state = 2536;
                this.columnDefinition();
                this.state = 2543;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 2537;
                    this.match(MySqlParser.COMMA);
                    this.state = 2538;
                    this.uid();
                    this.state = 2539;
                    this.columnDefinition();
                    }
                    }
                    this.state = 2545;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2546;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 4:
                localContext = new AlterByAddIndexContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2548;
                this.match(MySqlParser.ADD);
                this.state = 2549;
                (localContext as AlterByAddIndexContext)._indexFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 81 || _la === 91)) {
                    (localContext as AlterByAddIndexContext)._indexFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2551;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 2550;
                    this.uid();
                    }
                }

                this.state = 2554;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 187) {
                    {
                    this.state = 2553;
                    this.indexType();
                    }
                }

                this.state = 2556;
                this.indexColumnNames();
                this.state = 2560;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 187 || _la === 192 || _la === 368 || _la === 459 || _la === 467 || _la === 673 || _la === 875 || _la === 1000) {
                    {
                    {
                    this.state = 2557;
                    this.indexOption();
                    }
                    }
                    this.state = 2562;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 5:
                localContext = new AlterByAddPrimaryKeyContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2563;
                this.match(MySqlParser.ADD);
                this.state = 2568;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 2564;
                    this.match(MySqlParser.CONSTRAINT);
                    this.state = 2566;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
                    case 1:
                        {
                        this.state = 2565;
                        (localContext as AlterByAddPrimaryKeyContext)._name = this.uid();
                        }
                        break;
                    }
                    }
                }

                this.state = 2570;
                this.match(MySqlParser.PRIMARY);
                this.state = 2571;
                this.match(MySqlParser.KEY);
                this.state = 2573;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 2572;
                    (localContext as AlterByAddPrimaryKeyContext)._index = this.uid();
                    }
                }

                this.state = 2576;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 187) {
                    {
                    this.state = 2575;
                    this.indexType();
                    }
                }

                this.state = 2578;
                this.indexColumnNames();
                this.state = 2582;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 187 || _la === 192 || _la === 368 || _la === 459 || _la === 467 || _la === 673 || _la === 875 || _la === 1000) {
                    {
                    {
                    this.state = 2579;
                    this.indexOption();
                    }
                    }
                    this.state = 2584;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 6:
                localContext = new AlterByAddUniqueKeyContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2585;
                this.match(MySqlParser.ADD);
                this.state = 2590;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 2586;
                    this.match(MySqlParser.CONSTRAINT);
                    this.state = 2588;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                        {
                        this.state = 2587;
                        (localContext as AlterByAddUniqueKeyContext)._name = this.uid();
                        }
                    }

                    }
                }

                this.state = 2592;
                this.match(MySqlParser.UNIQUE);
                this.state = 2594;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81 || _la === 91) {
                    {
                    this.state = 2593;
                    (localContext as AlterByAddUniqueKeyContext)._indexFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 81 || _la === 91)) {
                        (localContext as AlterByAddUniqueKeyContext)._indexFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2597;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 2596;
                    (localContext as AlterByAddUniqueKeyContext)._indexName = this.uid();
                    }
                }

                this.state = 2600;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 187) {
                    {
                    this.state = 2599;
                    this.indexType();
                    }
                }

                this.state = 2602;
                this.indexColumnNames();
                this.state = 2606;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 187 || _la === 192 || _la === 368 || _la === 459 || _la === 467 || _la === 673 || _la === 875 || _la === 1000) {
                    {
                    {
                    this.state = 2603;
                    this.indexOption();
                    }
                    }
                    this.state = 2608;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 7:
                localContext = new AlterByAddSpecialIndexContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2609;
                this.match(MySqlParser.ADD);
                this.state = 2610;
                (localContext as AlterByAddSpecialIndexContext)._keyType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 69 || _la === 159)) {
                    (localContext as AlterByAddSpecialIndexContext)._keyType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2612;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81 || _la === 91) {
                    {
                    this.state = 2611;
                    (localContext as AlterByAddSpecialIndexContext)._indexFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 81 || _la === 91)) {
                        (localContext as AlterByAddSpecialIndexContext)._indexFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2615;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 2614;
                    this.uid();
                    }
                }

                this.state = 2617;
                this.indexColumnNames();
                this.state = 2621;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 187 || _la === 192 || _la === 368 || _la === 459 || _la === 467 || _la === 673 || _la === 875 || _la === 1000) {
                    {
                    {
                    this.state = 2618;
                    this.indexOption();
                    }
                    }
                    this.state = 2623;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 8:
                localContext = new AlterByAddForeignKeyContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2624;
                this.match(MySqlParser.ADD);
                this.state = 2629;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 2625;
                    this.match(MySqlParser.CONSTRAINT);
                    this.state = 2627;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                        {
                        this.state = 2626;
                        (localContext as AlterByAddForeignKeyContext)._name = this.uid();
                        }
                    }

                    }
                }

                this.state = 2631;
                this.match(MySqlParser.FOREIGN);
                this.state = 2632;
                this.match(MySqlParser.KEY);
                this.state = 2634;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 2633;
                    (localContext as AlterByAddForeignKeyContext)._indexName = this.uid();
                    }
                }

                this.state = 2636;
                this.indexColumnNames();
                this.state = 2637;
                this.referenceDefinition();
                }
                break;
            case 9:
                localContext = new AlterByAddCheckTableConstraintContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2639;
                this.match(MySqlParser.ADD);
                this.state = 2644;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 2640;
                    this.match(MySqlParser.CONSTRAINT);
                    this.state = 2642;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                        {
                        this.state = 2641;
                        (localContext as AlterByAddCheckTableConstraintContext)._name = this.uid();
                        }
                    }

                    }
                }

                this.state = 2646;
                this.match(MySqlParser.CHECK);
                this.state = 2653;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 333, this.context) ) {
                case 1:
                    {
                    this.state = 2647;
                    this.uid();
                    }
                    break;
                case 2:
                    {
                    this.state = 2648;
                    this.stringLiteral();
                    }
                    break;
                case 3:
                    {
                    this.state = 2649;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 2650;
                    this.expression(0);
                    this.state = 2651;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    break;
                }
                this.state = 2656;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 114) {
                    {
                    this.state = 2655;
                    this.match(MySqlParser.NOT);
                    }
                }

                this.state = 2659;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 57) {
                    {
                    this.state = 2658;
                    this.match(MySqlParser.ENFORCED);
                    }
                }

                }
                break;
            case 10:
                localContext = new AlterByAlterCheckTableConstraintContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2661;
                this.match(MySqlParser.ALTER);
                this.state = 2666;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 2662;
                    this.match(MySqlParser.CONSTRAINT);
                    this.state = 2664;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                        {
                        this.state = 2663;
                        (localContext as AlterByAlterCheckTableConstraintContext)._name = this.uid();
                        }
                    }

                    }
                }

                this.state = 2668;
                this.match(MySqlParser.CHECK);
                this.state = 2675;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 338, this.context) ) {
                case 1:
                    {
                    this.state = 2669;
                    this.uid();
                    }
                    break;
                case 2:
                    {
                    this.state = 2670;
                    this.stringLiteral();
                    }
                    break;
                case 3:
                    {
                    this.state = 2671;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 2672;
                    this.expression(0);
                    this.state = 2673;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    break;
                }
                this.state = 2678;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 114) {
                    {
                    this.state = 2677;
                    this.match(MySqlParser.NOT);
                    }
                }

                this.state = 2681;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 57) {
                    {
                    this.state = 2680;
                    this.match(MySqlParser.ENFORCED);
                    }
                }

                }
                break;
            case 11:
                localContext = new AlterByAddCheckTableConstraintContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2683;
                this.match(MySqlParser.ADD);
                this.state = 2688;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 2684;
                    this.match(MySqlParser.CONSTRAINT);
                    this.state = 2686;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                        {
                        this.state = 2685;
                        (localContext as AlterByAddCheckTableConstraintContext)._name = this.uid();
                        }
                    }

                    }
                }

                this.state = 2690;
                this.match(MySqlParser.CHECK);
                this.state = 2691;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2692;
                this.expression(0);
                this.state = 2693;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 12:
                localContext = new AlterBySetAlgorithmContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2695;
                this.match(MySqlParser.ALGORITHM);
                this.state = 2697;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 2696;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 2699;
                (localContext as AlterBySetAlgorithmContext)._algType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 384 || _la === 454 || _la === 458)) {
                    (localContext as AlterBySetAlgorithmContext)._algType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 13:
                localContext = new AlterByChangeDefaultContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2700;
                this.match(MySqlParser.ALTER);
                this.state = 2702;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2701;
                    this.match(MySqlParser.COLUMN);
                    }
                }

                this.state = 2704;
                this.uid();
                this.state = 2710;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.SET:
                    {
                    this.state = 2705;
                    this.match(MySqlParser.SET);
                    this.state = 2706;
                    this.match(MySqlParser.DEFAULT);
                    this.state = 2707;
                    this.defaultValue();
                    }
                    break;
                case MySqlParser.DROP:
                    {
                    this.state = 2708;
                    this.match(MySqlParser.DROP);
                    this.state = 2709;
                    this.match(MySqlParser.DEFAULT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 14:
                localContext = new AlterByChangeColumnContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2712;
                this.match(MySqlParser.CHANGE);
                this.state = 2714;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2713;
                    this.match(MySqlParser.COLUMN);
                    }
                }

                this.state = 2716;
                (localContext as AlterByChangeColumnContext)._oldColumn = this.uid();
                this.state = 2717;
                (localContext as AlterByChangeColumnContext)._newColumn = this.uid();
                this.state = 2718;
                this.columnDefinition();
                this.state = 2722;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.FIRST:
                    {
                    this.state = 2719;
                    this.match(MySqlParser.FIRST);
                    }
                    break;
                case MySqlParser.AFTER:
                    {
                    this.state = 2720;
                    this.match(MySqlParser.AFTER);
                    this.state = 2721;
                    (localContext as AlterByChangeColumnContext)._afterColumn = this.uid();
                    }
                    break;
                case MySqlParser.EOF:
                case MySqlParser.PARTITION:
                case MySqlParser.COMMA:
                case MySqlParser.SEMI:
                    break;
                default:
                    break;
                }
                }
                break;
            case 15:
                localContext = new AlterByRenameColumnContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2724;
                this.match(MySqlParser.RENAME);
                this.state = 2725;
                this.match(MySqlParser.COLUMN);
                this.state = 2726;
                (localContext as AlterByRenameColumnContext)._oldColumn = this.uid();
                this.state = 2727;
                this.match(MySqlParser.TO);
                this.state = 2728;
                (localContext as AlterByRenameColumnContext)._newColumn = this.uid();
                }
                break;
            case 16:
                localContext = new AlterByLockContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2730;
                this.match(MySqlParser.LOCK);
                this.state = 2732;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 2731;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 2734;
                (localContext as AlterByLockContext)._lockType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 419 || _la === 529 || _la === 611)) {
                    (localContext as AlterByLockContext)._lockType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 17:
                localContext = new AlterByModifyColumnContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2735;
                this.match(MySqlParser.MODIFY);
                this.state = 2737;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2736;
                    this.match(MySqlParser.COLUMN);
                    }
                }

                this.state = 2739;
                this.uid();
                this.state = 2740;
                this.columnDefinition();
                this.state = 2744;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.FIRST:
                    {
                    this.state = 2741;
                    this.match(MySqlParser.FIRST);
                    }
                    break;
                case MySqlParser.AFTER:
                    {
                    this.state = 2742;
                    this.match(MySqlParser.AFTER);
                    this.state = 2743;
                    this.uid();
                    }
                    break;
                case MySqlParser.EOF:
                case MySqlParser.PARTITION:
                case MySqlParser.COMMA:
                case MySqlParser.SEMI:
                    break;
                default:
                    break;
                }
                }
                break;
            case 18:
                localContext = new AlterByDropColumnContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2746;
                this.match(MySqlParser.DROP);
                this.state = 2748;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2747;
                    this.match(MySqlParser.COLUMN);
                    }
                }

                this.state = 2750;
                this.uid();
                this.state = 2752;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 2751;
                    this.match(MySqlParser.RESTRICT);
                    }
                }

                }
                break;
            case 19:
                localContext = new AlterByDropConstraintCheckContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2754;
                this.match(MySqlParser.DROP);
                this.state = 2755;
                _la = this.tokenStream.LA(1);
                if(!(_la === 26 || _la === 30)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2756;
                this.uid();
                }
                break;
            case 20:
                localContext = new AlterByDropPrimaryKeyContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 2757;
                this.match(MySqlParser.DROP);
                this.state = 2758;
                this.match(MySqlParser.PRIMARY);
                this.state = 2759;
                this.match(MySqlParser.KEY);
                }
                break;
            case 21:
                localContext = new AlterByDropIndexContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 2760;
                this.match(MySqlParser.DROP);
                this.state = 2761;
                (localContext as AlterByDropIndexContext)._indexFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 81 || _la === 91)) {
                    (localContext as AlterByDropIndexContext)._indexFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2762;
                this.uid();
                }
                break;
            case 22:
                localContext = new AlterByRenameIndexContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 2763;
                this.match(MySqlParser.RENAME);
                this.state = 2764;
                (localContext as AlterByRenameIndexContext)._indexFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 81 || _la === 91)) {
                    (localContext as AlterByRenameIndexContext)._indexFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2765;
                this.uid();
                this.state = 2766;
                this.match(MySqlParser.TO);
                this.state = 2767;
                this.uid();
                }
                break;
            case 23:
                localContext = new AlterByAlterColumnDefaultContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 2769;
                this.match(MySqlParser.ALTER);
                this.state = 2771;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2770;
                    this.match(MySqlParser.COLUMN);
                    }
                }

                this.state = 2773;
                this.uid();
                this.state = 2787;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 355, this.context) ) {
                case 1:
                    {
                    this.state = 2774;
                    this.match(MySqlParser.SET);
                    this.state = 2775;
                    this.match(MySqlParser.DEFAULT);
                    this.state = 2781;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySqlParser.START_NATIONAL_STRING_LITERAL:
                    case MySqlParser.STRING_LITERAL:
                    case MySqlParser.STRING_CHARSET_NAME:
                        {
                        this.state = 2776;
                        this.stringLiteral();
                        }
                        break;
                    case MySqlParser.LR_BRACKET:
                        {
                        this.state = 2777;
                        this.match(MySqlParser.LR_BRACKET);
                        this.state = 2778;
                        this.expression(0);
                        this.state = 2779;
                        this.match(MySqlParser.RR_BRACKET);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 2783;
                    this.match(MySqlParser.SET);
                    this.state = 2784;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 459 || _la === 673)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 3:
                    {
                    this.state = 2785;
                    this.match(MySqlParser.DROP);
                    this.state = 2786;
                    this.match(MySqlParser.DEFAULT);
                    }
                    break;
                }
                }
                break;
            case 24:
                localContext = new AlterByAlterIndexVisibilityContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 2789;
                this.match(MySqlParser.ALTER);
                this.state = 2790;
                this.match(MySqlParser.INDEX);
                this.state = 2791;
                this.uid();
                this.state = 2792;
                _la = this.tokenStream.LA(1);
                if(!(_la === 459 || _la === 673)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 25:
                localContext = new AlterByDropForeignKeyContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 2794;
                this.match(MySqlParser.DROP);
                this.state = 2795;
                this.match(MySqlParser.FOREIGN);
                this.state = 2796;
                this.match(MySqlParser.KEY);
                this.state = 2797;
                this.uid();
                }
                break;
            case 26:
                localContext = new AlterByDisableKeysContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 2798;
                this.match(MySqlParser.DISABLE);
                this.state = 2799;
                this.match(MySqlParser.KEYS);
                }
                break;
            case 27:
                localContext = new AlterByEnableKeysContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 2800;
                this.match(MySqlParser.ENABLE);
                this.state = 2801;
                this.match(MySqlParser.KEYS);
                }
                break;
            case 28:
                localContext = new AlterByRenameContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 2802;
                this.match(MySqlParser.RENAME);
                this.state = 2804;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 175) {
                    {
                    this.state = 2803;
                    (localContext as AlterByRenameContext)._renameFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 12 || _la === 175)) {
                        (localContext as AlterByRenameContext)._renameFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2808;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 357, this.context) ) {
                case 1:
                    {
                    this.state = 2806;
                    this.uid();
                    }
                    break;
                case 2:
                    {
                    this.state = 2807;
                    this.fullId();
                    }
                    break;
                }
                }
                break;
            case 29:
                localContext = new AlterByOrderContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 2810;
                this.match(MySqlParser.ORDER);
                this.state = 2811;
                this.match(MySqlParser.BY);
                this.state = 2812;
                this.uidList();
                }
                break;
            case 30:
                localContext = new AlterByConvertCharsetContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 2813;
                this.match(MySqlParser.CONVERT);
                this.state = 2814;
                this.match(MySqlParser.TO);
                this.state = 2818;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.CHARSET:
                    {
                    this.state = 2815;
                    this.match(MySqlParser.CHARSET);
                    }
                    break;
                case MySqlParser.CHARACTER:
                    {
                    this.state = 2816;
                    this.match(MySqlParser.CHARACTER);
                    this.state = 2817;
                    this.match(MySqlParser.SET);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2820;
                this.charsetName();
                this.state = 2823;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 2821;
                    this.match(MySqlParser.COLLATE);
                    this.state = 2822;
                    this.collationName();
                    }
                }

                }
                break;
            case 31:
                localContext = new AlterByDefaultCharsetContext(localContext);
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 2826;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42) {
                    {
                    this.state = 2825;
                    this.match(MySqlParser.DEFAULT);
                    }
                }

                this.state = 2828;
                this.match(MySqlParser.CHARACTER);
                this.state = 2829;
                this.match(MySqlParser.SET);
                this.state = 2830;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 2831;
                this.charsetName();
                this.state = 2835;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 2832;
                    this.match(MySqlParser.COLLATE);
                    this.state = 2833;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    this.state = 2834;
                    this.collationName();
                    }
                }

                }
                break;
            case 32:
                localContext = new AlterByDiscardTablespaceContext(localContext);
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 2837;
                this.match(MySqlParser.DISCARD);
                this.state = 2838;
                this.match(MySqlParser.TABLESPACE);
                }
                break;
            case 33:
                localContext = new AlterByImportTablespaceContext(localContext);
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 2839;
                this.match(MySqlParser.IMPORT);
                this.state = 2840;
                this.match(MySqlParser.TABLESPACE);
                }
                break;
            case 34:
                localContext = new AlterByForceContext(localContext);
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 2841;
                this.match(MySqlParser.FORCE);
                }
                break;
            case 35:
                localContext = new AlterByValidateContext(localContext);
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 2842;
                (localContext as AlterByValidateContext)._validationFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 192 || _la === 677)) {
                    (localContext as AlterByValidateContext)._validationFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2843;
                this.match(MySqlParser.VALIDATION);
                }
                break;
            case 36:
                localContext = new AlterByAddDefinitionsContext(localContext);
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 2844;
                this.match(MySqlParser.ADD);
                this.state = 2846;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2845;
                    this.match(MySqlParser.COLUMN);
                    }
                }

                this.state = 2848;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2849;
                this.createDefinition();
                this.state = 2854;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 2850;
                    this.match(MySqlParser.COMMA);
                    this.state = 2851;
                    this.createDefinition();
                    }
                    }
                    this.state = 2856;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2857;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 37:
                localContext = new AlterPartitionContext(localContext);
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 2859;
                this.alterPartitionSpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterPartitionSpecification(): AlterPartitionSpecificationContext {
        let localContext = new AlterPartitionSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 148, MySqlParser.RULE_alterPartitionSpecification);
        let _la: number;
        try {
            this.state = 2960;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ADD:
                localContext = new AlterByAddPartitionContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2862;
                this.match(MySqlParser.ADD);
                this.state = 2863;
                this.match(MySqlParser.PARTITION);
                this.state = 2864;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2865;
                this.partitionDefinition();
                this.state = 2870;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 2866;
                    this.match(MySqlParser.COMMA);
                    this.state = 2867;
                    this.partitionDefinition();
                    }
                    }
                    this.state = 2872;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2873;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case MySqlParser.DROP:
                localContext = new AlterByDropPartitionContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2875;
                this.match(MySqlParser.DROP);
                this.state = 2876;
                this.match(MySqlParser.PARTITION);
                this.state = 2877;
                this.uidList();
                }
                break;
            case MySqlParser.DISCARD:
                localContext = new AlterByDiscardPartitionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2878;
                this.match(MySqlParser.DISCARD);
                this.state = 2879;
                this.match(MySqlParser.PARTITION);
                this.state = 2882;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ARRAY:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.BUCKETS:
                case MySqlParser.CONDITION:
                case MySqlParser.CURRENT:
                case MySqlParser.CURRENT_USER:
                case MySqlParser.DATABASE:
                case MySqlParser.DEFAULT:
                case MySqlParser.DIAGNOSTICS:
                case MySqlParser.EMPTY:
                case MySqlParser.ENFORCED:
                case MySqlParser.EXCEPT:
                case MySqlParser.GROUP:
                case MySqlParser.IF:
                case MySqlParser.IGNORED:
                case MySqlParser.INSERT:
                case MySqlParser.LATERAL:
                case MySqlParser.LEFT:
                case MySqlParser.NUMBER:
                case MySqlParser.OPTIONAL:
                case MySqlParser.ORDER:
                case MySqlParser.PRIMARY:
                case MySqlParser.REPEAT:
                case MySqlParser.REPLACE:
                case MySqlParser.RIGHT:
                case MySqlParser.SCHEMA:
                case MySqlParser.SKIP_QUERY_REWRITE:
                case MySqlParser.STACKED:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.BINARY:
                case MySqlParser.TEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.JSON_ARRAY:
                case MySqlParser.JSON_ARRAYAGG:
                case MySqlParser.JSON_ARRAY_APPEND:
                case MySqlParser.JSON_ARRAY_INSERT:
                case MySqlParser.JSON_CONTAINS:
                case MySqlParser.JSON_CONTAINS_PATH:
                case MySqlParser.JSON_DEPTH:
                case MySqlParser.JSON_EXTRACT:
                case MySqlParser.JSON_INSERT:
                case MySqlParser.JSON_KEYS:
                case MySqlParser.JSON_LENGTH:
                case MySqlParser.JSON_MERGE:
                case MySqlParser.JSON_MERGE_PATCH:
                case MySqlParser.JSON_MERGE_PRESERVE:
                case MySqlParser.JSON_OBJECT:
                case MySqlParser.JSON_OBJECTAGG:
                case MySqlParser.JSON_OVERLAPS:
                case MySqlParser.JSON_PRETTY:
                case MySqlParser.JSON_QUOTE:
                case MySqlParser.JSON_REMOVE:
                case MySqlParser.JSON_REPLACE:
                case MySqlParser.JSON_SCHEMA_VALID:
                case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
                case MySqlParser.JSON_SEARCH:
                case MySqlParser.JSON_SET:
                case MySqlParser.JSON_STORAGE_FREE:
                case MySqlParser.JSON_STORAGE_SIZE:
                case MySqlParser.JSON_TABLE:
                case MySqlParser.JSON_TYPE:
                case MySqlParser.JSON_UNQUOTE:
                case MySqlParser.JSON_VALID:
                case MySqlParser.JSON_VALUE:
                case MySqlParser.NESTED:
                case MySqlParser.ORDINALITY:
                case MySqlParser.PATH:
                case MySqlParser.AVG:
                case MySqlParser.BIT_AND:
                case MySqlParser.BIT_OR:
                case MySqlParser.BIT_XOR:
                case MySqlParser.COUNT:
                case MySqlParser.CUME_DIST:
                case MySqlParser.DENSE_RANK:
                case MySqlParser.FIRST_VALUE:
                case MySqlParser.GROUP_CONCAT:
                case MySqlParser.LAG:
                case MySqlParser.LAST_VALUE:
                case MySqlParser.LEAD:
                case MySqlParser.MAX:
                case MySqlParser.MIN:
                case MySqlParser.NTILE:
                case MySqlParser.NTH_VALUE:
                case MySqlParser.PERCENT_RANK:
                case MySqlParser.RANK:
                case MySqlParser.ROW_NUMBER:
                case MySqlParser.STD:
                case MySqlParser.STDDEV:
                case MySqlParser.STDDEV_POP:
                case MySqlParser.STDDEV_SAMP:
                case MySqlParser.SUM:
                case MySqlParser.VAR_POP:
                case MySqlParser.VAR_SAMP:
                case MySqlParser.VARIANCE:
                case MySqlParser.CURRENT_DATE:
                case MySqlParser.CURRENT_TIME:
                case MySqlParser.CURRENT_TIMESTAMP:
                case MySqlParser.LOCALTIME:
                case MySqlParser.CURDATE:
                case MySqlParser.CURTIME:
                case MySqlParser.DATE_ADD:
                case MySqlParser.DATE_SUB:
                case MySqlParser.LOCALTIMESTAMP:
                case MySqlParser.NOW:
                case MySqlParser.POSITION:
                case MySqlParser.SUBSTR:
                case MySqlParser.SUBSTRING:
                case MySqlParser.SYSDATE:
                case MySqlParser.TRIM:
                case MySqlParser.UTC_DATE:
                case MySqlParser.UTC_TIME:
                case MySqlParser.UTC_TIMESTAMP:
                case MySqlParser.ACCOUNT:
                case MySqlParser.ACTION:
                case MySqlParser.AFTER:
                case MySqlParser.AGGREGATE:
                case MySqlParser.ALGORITHM:
                case MySqlParser.ANY:
                case MySqlParser.AT:
                case MySqlParser.AUTHORS:
                case MySqlParser.AUTOCOMMIT:
                case MySqlParser.AUTOEXTEND_SIZE:
                case MySqlParser.AUTO_INCREMENT:
                case MySqlParser.AVG_ROW_LENGTH:
                case MySqlParser.BEGIN:
                case MySqlParser.BINLOG:
                case MySqlParser.BIT:
                case MySqlParser.BLOCK:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.BTREE:
                case MySqlParser.CACHE:
                case MySqlParser.CASCADED:
                case MySqlParser.CHAIN:
                case MySqlParser.CHANGED:
                case MySqlParser.CHANNEL:
                case MySqlParser.CHECKSUM:
                case MySqlParser.PAGE_CHECKSUM:
                case MySqlParser.CIPHER:
                case MySqlParser.CLASS_ORIGIN:
                case MySqlParser.CLIENT:
                case MySqlParser.CLOSE:
                case MySqlParser.CLUSTERING:
                case MySqlParser.COALESCE:
                case MySqlParser.CODE:
                case MySqlParser.COLUMNS:
                case MySqlParser.COLUMN_FORMAT:
                case MySqlParser.COLUMN_NAME:
                case MySqlParser.COMMENT:
                case MySqlParser.COMMIT:
                case MySqlParser.COMPACT:
                case MySqlParser.COMPLETION:
                case MySqlParser.COMPRESSED:
                case MySqlParser.COMPRESSION:
                case MySqlParser.CONCURRENT:
                case MySqlParser.CONNECT:
                case MySqlParser.CONNECTION:
                case MySqlParser.CONSISTENT:
                case MySqlParser.CONSTRAINT_CATALOG:
                case MySqlParser.CONSTRAINT_SCHEMA:
                case MySqlParser.CONSTRAINT_NAME:
                case MySqlParser.CONTAINS:
                case MySqlParser.CONTEXT:
                case MySqlParser.CONTRIBUTORS:
                case MySqlParser.COPY:
                case MySqlParser.CPU:
                case MySqlParser.CURSOR_NAME:
                case MySqlParser.DATA:
                case MySqlParser.DATAFILE:
                case MySqlParser.DEALLOCATE:
                case MySqlParser.DEFAULT_AUTH:
                case MySqlParser.DEFINER:
                case MySqlParser.DELAY_KEY_WRITE:
                case MySqlParser.DES_KEY_FILE:
                case MySqlParser.DIRECTORY:
                case MySqlParser.DISABLE:
                case MySqlParser.DISCARD:
                case MySqlParser.DISK:
                case MySqlParser.DO:
                case MySqlParser.DUMPFILE:
                case MySqlParser.DUPLICATE:
                case MySqlParser.DYNAMIC:
                case MySqlParser.ENABLE:
                case MySqlParser.ENCRYPTION:
                case MySqlParser.END:
                case MySqlParser.ENDS:
                case MySqlParser.ENGINE:
                case MySqlParser.ENGINES:
                case MySqlParser.ERROR:
                case MySqlParser.ERRORS:
                case MySqlParser.ESCAPE:
                case MySqlParser.EVEN:
                case MySqlParser.EVENT:
                case MySqlParser.EVENTS:
                case MySqlParser.EVERY:
                case MySqlParser.EXCHANGE:
                case MySqlParser.EXCLUSIVE:
                case MySqlParser.EXPIRE:
                case MySqlParser.EXPORT:
                case MySqlParser.EXTENDED:
                case MySqlParser.EXTENT_SIZE:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.FAST:
                case MySqlParser.FAULTS:
                case MySqlParser.FIELDS:
                case MySqlParser.FILE_BLOCK_SIZE:
                case MySqlParser.FILTER:
                case MySqlParser.FIRST:
                case MySqlParser.FIXED:
                case MySqlParser.FLUSH:
                case MySqlParser.FOLLOWS:
                case MySqlParser.FOUND:
                case MySqlParser.FULL:
                case MySqlParser.FUNCTION:
                case MySqlParser.GENERAL:
                case MySqlParser.GLOBAL:
                case MySqlParser.GRANTS:
                case MySqlParser.GROUP_REPLICATION:
                case MySqlParser.HANDLER:
                case MySqlParser.HASH:
                case MySqlParser.HELP:
                case MySqlParser.HISTORY:
                case MySqlParser.HOST:
                case MySqlParser.HOSTS:
                case MySqlParser.IDENTIFIED:
                case MySqlParser.IGNORE_SERVER_IDS:
                case MySqlParser.IMPORT:
                case MySqlParser.INDEXES:
                case MySqlParser.INITIAL_SIZE:
                case MySqlParser.INPLACE:
                case MySqlParser.INSERT_METHOD:
                case MySqlParser.INSTALL:
                case MySqlParser.INSTANCE:
                case MySqlParser.INSTANT:
                case MySqlParser.INVISIBLE:
                case MySqlParser.INVOKER:
                case MySqlParser.IO:
                case MySqlParser.IO_THREAD:
                case MySqlParser.IPC:
                case MySqlParser.ISOLATION:
                case MySqlParser.ISSUER:
                case MySqlParser.JSON:
                case MySqlParser.KEY_BLOCK_SIZE:
                case MySqlParser.LANGUAGE:
                case MySqlParser.LAST:
                case MySqlParser.LEAVES:
                case MySqlParser.LESS:
                case MySqlParser.LEVEL:
                case MySqlParser.LIST:
                case MySqlParser.LOCAL:
                case MySqlParser.LOGFILE:
                case MySqlParser.LOGS:
                case MySqlParser.MASTER:
                case MySqlParser.MASTER_AUTO_POSITION:
                case MySqlParser.MASTER_CONNECT_RETRY:
                case MySqlParser.MASTER_DELAY:
                case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                case MySqlParser.MASTER_HOST:
                case MySqlParser.MASTER_LOG_FILE:
                case MySqlParser.MASTER_LOG_POS:
                case MySqlParser.MASTER_PASSWORD:
                case MySqlParser.MASTER_PORT:
                case MySqlParser.MASTER_RETRY_COUNT:
                case MySqlParser.MASTER_SSL:
                case MySqlParser.MASTER_SSL_CA:
                case MySqlParser.MASTER_SSL_CAPATH:
                case MySqlParser.MASTER_SSL_CERT:
                case MySqlParser.MASTER_SSL_CIPHER:
                case MySqlParser.MASTER_SSL_CRL:
                case MySqlParser.MASTER_SSL_CRLPATH:
                case MySqlParser.MASTER_SSL_KEY:
                case MySqlParser.MASTER_TLS_VERSION:
                case MySqlParser.MASTER_USER:
                case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                case MySqlParser.MAX_QUERIES_PER_HOUR:
                case MySqlParser.MAX_ROWS:
                case MySqlParser.MAX_SIZE:
                case MySqlParser.MAX_UPDATES_PER_HOUR:
                case MySqlParser.MAX_USER_CONNECTIONS:
                case MySqlParser.MEDIUM:
                case MySqlParser.MEMBER:
                case MySqlParser.MERGE:
                case MySqlParser.MESSAGE_TEXT:
                case MySqlParser.MID:
                case MySqlParser.MIGRATE:
                case MySqlParser.MIN_ROWS:
                case MySqlParser.MODE:
                case MySqlParser.MODIFY:
                case MySqlParser.MUTEX:
                case MySqlParser.MYSQL:
                case MySqlParser.MYSQL_ERRNO:
                case MySqlParser.NAME:
                case MySqlParser.NAMES:
                case MySqlParser.NCHAR:
                case MySqlParser.NEVER:
                case MySqlParser.NEXT:
                case MySqlParser.NO:
                case MySqlParser.NOCOPY:
                case MySqlParser.NOWAIT:
                case MySqlParser.NODEGROUP:
                case MySqlParser.NONE:
                case MySqlParser.ODBC:
                case MySqlParser.OFFLINE:
                case MySqlParser.OFFSET:
                case MySqlParser.OF:
                case MySqlParser.OJ:
                case MySqlParser.OLD_PASSWORD:
                case MySqlParser.ONE:
                case MySqlParser.ONLINE:
                case MySqlParser.ONLY:
                case MySqlParser.OPEN:
                case MySqlParser.OPTIMIZER_COSTS:
                case MySqlParser.OPTIONS:
                case MySqlParser.OWNER:
                case MySqlParser.PACK_KEYS:
                case MySqlParser.PAGE:
                case MySqlParser.PARSER:
                case MySqlParser.PARTIAL:
                case MySqlParser.PARTITIONING:
                case MySqlParser.PARTITIONS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.PHASE:
                case MySqlParser.PLUGIN:
                case MySqlParser.PLUGIN_DIR:
                case MySqlParser.PLUGINS:
                case MySqlParser.PORT:
                case MySqlParser.PRECEDES:
                case MySqlParser.PREPARE:
                case MySqlParser.PRESERVE:
                case MySqlParser.PREV:
                case MySqlParser.PROCESSLIST:
                case MySqlParser.PROFILE:
                case MySqlParser.PROFILES:
                case MySqlParser.PROXY:
                case MySqlParser.QUERY:
                case MySqlParser.QUICK:
                case MySqlParser.REBUILD:
                case MySqlParser.RECOVER:
                case MySqlParser.RECURSIVE:
                case MySqlParser.REDO_BUFFER_SIZE:
                case MySqlParser.REDUNDANT:
                case MySqlParser.RELAY:
                case MySqlParser.RELAY_LOG_FILE:
                case MySqlParser.RELAY_LOG_POS:
                case MySqlParser.RELAYLOG:
                case MySqlParser.REMOVE:
                case MySqlParser.REORGANIZE:
                case MySqlParser.REPAIR:
                case MySqlParser.REPLICATE_DO_DB:
                case MySqlParser.REPLICATE_DO_TABLE:
                case MySqlParser.REPLICATE_IGNORE_DB:
                case MySqlParser.REPLICATE_IGNORE_TABLE:
                case MySqlParser.REPLICATE_REWRITE_DB:
                case MySqlParser.REPLICATE_WILD_DO_TABLE:
                case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                case MySqlParser.REPLICATION:
                case MySqlParser.RESET:
                case MySqlParser.RESUME:
                case MySqlParser.RETURNED_SQLSTATE:
                case MySqlParser.RETURNS:
                case MySqlParser.REUSE:
                case MySqlParser.ROLE:
                case MySqlParser.ROLLBACK:
                case MySqlParser.ROLLUP:
                case MySqlParser.ROTATE:
                case MySqlParser.ROW:
                case MySqlParser.ROWS:
                case MySqlParser.ROW_FORMAT:
                case MySqlParser.RTREE:
                case MySqlParser.SAVEPOINT:
                case MySqlParser.SCHEDULE:
                case MySqlParser.SECURITY:
                case MySqlParser.SERVER:
                case MySqlParser.SESSION:
                case MySqlParser.SHARE:
                case MySqlParser.SHARED:
                case MySqlParser.SIGNED:
                case MySqlParser.SIMPLE:
                case MySqlParser.SLAVE:
                case MySqlParser.SLOW:
                case MySqlParser.SNAPSHOT:
                case MySqlParser.SOCKET:
                case MySqlParser.SOME:
                case MySqlParser.SONAME:
                case MySqlParser.SOUNDS:
                case MySqlParser.SOURCE:
                case MySqlParser.SQL_AFTER_GTIDS:
                case MySqlParser.SQL_AFTER_MTS_GAPS:
                case MySqlParser.SQL_BEFORE_GTIDS:
                case MySqlParser.SQL_BUFFER_RESULT:
                case MySqlParser.SQL_CACHE:
                case MySqlParser.SQL_NO_CACHE:
                case MySqlParser.SQL_THREAD:
                case MySqlParser.START:
                case MySqlParser.STARTS:
                case MySqlParser.STATS_AUTO_RECALC:
                case MySqlParser.STATS_PERSISTENT:
                case MySqlParser.STATS_SAMPLE_PAGES:
                case MySqlParser.STATUS:
                case MySqlParser.STOP:
                case MySqlParser.STORAGE:
                case MySqlParser.STRING:
                case MySqlParser.SUBCLASS_ORIGIN:
                case MySqlParser.SUBJECT:
                case MySqlParser.SUBPARTITION:
                case MySqlParser.SUBPARTITIONS:
                case MySqlParser.SUSPEND:
                case MySqlParser.SWAPS:
                case MySqlParser.SWITCHES:
                case MySqlParser.TABLE_NAME:
                case MySqlParser.TABLESPACE:
                case MySqlParser.TABLE_TYPE:
                case MySqlParser.TEMPORARY:
                case MySqlParser.TEMPTABLE:
                case MySqlParser.THAN:
                case MySqlParser.TRADITIONAL:
                case MySqlParser.TRANSACTION:
                case MySqlParser.TRANSACTIONAL:
                case MySqlParser.TRIGGERS:
                case MySqlParser.TRUNCATE:
                case MySqlParser.UNBOUNDED:
                case MySqlParser.UNDEFINED:
                case MySqlParser.UNDOFILE:
                case MySqlParser.UNDO_BUFFER_SIZE:
                case MySqlParser.UNINSTALL:
                case MySqlParser.UNKNOWN:
                case MySqlParser.UNTIL:
                case MySqlParser.UPGRADE:
                case MySqlParser.USER:
                case MySqlParser.USE_FRM:
                case MySqlParser.USER_RESOURCES:
                case MySqlParser.VALIDATION:
                case MySqlParser.VALUE:
                case MySqlParser.VARIABLES:
                case MySqlParser.VIEW:
                case MySqlParser.VIRTUAL:
                case MySqlParser.VISIBLE:
                case MySqlParser.WAIT:
                case MySqlParser.WARNINGS:
                case MySqlParser.WITHOUT:
                case MySqlParser.WORK:
                case MySqlParser.WRAPPER:
                case MySqlParser.X509:
                case MySqlParser.XA:
                case MySqlParser.XML:
                case MySqlParser.EUR:
                case MySqlParser.USA:
                case MySqlParser.JIS:
                case MySqlParser.ISO:
                case MySqlParser.INTERNAL:
                case MySqlParser.QUARTER:
                case MySqlParser.MONTH:
                case MySqlParser.DAY:
                case MySqlParser.HOUR:
                case MySqlParser.MINUTE:
                case MySqlParser.WEEK:
                case MySqlParser.SECOND:
                case MySqlParser.MICROSECOND:
                case MySqlParser.ADMIN:
                case MySqlParser.AUDIT_ABORT_EXEMPT:
                case MySqlParser.AUDIT_ADMIN:
                case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
                case MySqlParser.BACKUP_ADMIN:
                case MySqlParser.BINLOG_ADMIN:
                case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
                case MySqlParser.CLONE_ADMIN:
                case MySqlParser.CONNECTION_ADMIN:
                case MySqlParser.ENCRYPTION_KEY_ADMIN:
                case MySqlParser.EXECUTE:
                case MySqlParser.FILE:
                case MySqlParser.FIREWALL_ADMIN:
                case MySqlParser.FIREWALL_EXEMPT:
                case MySqlParser.FIREWALL_USER:
                case MySqlParser.GROUP_REPLICATION_ADMIN:
                case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
                case MySqlParser.INVOKE:
                case MySqlParser.LAMBDA:
                case MySqlParser.NDB_STORED_USER:
                case MySqlParser.PASSWORDLESS_USER_ADMIN:
                case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
                case MySqlParser.PRIVILEGES:
                case MySqlParser.PROCESS:
                case MySqlParser.RELOAD:
                case MySqlParser.REPLICATION_APPLIER:
                case MySqlParser.REPLICATION_SLAVE_ADMIN:
                case MySqlParser.RESOURCE_GROUP_ADMIN:
                case MySqlParser.RESOURCE_GROUP_USER:
                case MySqlParser.ROLE_ADMIN:
                case MySqlParser.ROUTINE:
                case MySqlParser.S3:
                case MySqlParser.SESSION_VARIABLES_ADMIN:
                case MySqlParser.SET_USER_ID:
                case MySqlParser.SHOW_ROUTINE:
                case MySqlParser.SHUTDOWN:
                case MySqlParser.SUPER:
                case MySqlParser.SYSTEM_VARIABLES_ADMIN:
                case MySqlParser.TABLES:
                case MySqlParser.TABLE_ENCRYPTION_ADMIN:
                case MySqlParser.VERSION_TOKEN_ADMIN:
                case MySqlParser.XA_RECOVER_ADMIN:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.ARCHIVE:
                case MySqlParser.BLACKHOLE:
                case MySqlParser.CSV:
                case MySqlParser.FEDERATED:
                case MySqlParser.INNODB:
                case MySqlParser.MEMORY:
                case MySqlParser.MRG_MYISAM:
                case MySqlParser.MYISAM:
                case MySqlParser.NDB:
                case MySqlParser.NDBCLUSTER:
                case MySqlParser.PERFORMANCE_SCHEMA:
                case MySqlParser.TOKUDB:
                case MySqlParser.REPEATABLE:
                case MySqlParser.COMMITTED:
                case MySqlParser.UNCOMMITTED:
                case MySqlParser.SERIALIZABLE:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                case MySqlParser.ABS:
                case MySqlParser.ACOS:
                case MySqlParser.ADDDATE:
                case MySqlParser.ADDTIME:
                case MySqlParser.AES_DECRYPT:
                case MySqlParser.AES_ENCRYPT:
                case MySqlParser.AREA:
                case MySqlParser.ASBINARY:
                case MySqlParser.ASIN:
                case MySqlParser.ASTEXT:
                case MySqlParser.ASWKB:
                case MySqlParser.ASWKT:
                case MySqlParser.ASYMMETRIC_DECRYPT:
                case MySqlParser.ASYMMETRIC_DERIVE:
                case MySqlParser.ASYMMETRIC_ENCRYPT:
                case MySqlParser.ASYMMETRIC_SIGN:
                case MySqlParser.ASYMMETRIC_VERIFY:
                case MySqlParser.ATAN:
                case MySqlParser.ATAN2:
                case MySqlParser.BENCHMARK:
                case MySqlParser.BIN:
                case MySqlParser.BIT_COUNT:
                case MySqlParser.BIT_LENGTH:
                case MySqlParser.BUFFER:
                case MySqlParser.CATALOG_NAME:
                case MySqlParser.CEIL:
                case MySqlParser.CEILING:
                case MySqlParser.CENTROID:
                case MySqlParser.CHARACTER_LENGTH:
                case MySqlParser.CHARSET:
                case MySqlParser.CHAR_LENGTH:
                case MySqlParser.COERCIBILITY:
                case MySqlParser.COLLATION:
                case MySqlParser.COMPRESS:
                case MySqlParser.CONCAT:
                case MySqlParser.CONCAT_WS:
                case MySqlParser.CONNECTION_ID:
                case MySqlParser.CONV:
                case MySqlParser.CONVERT_TZ:
                case MySqlParser.COS:
                case MySqlParser.COT:
                case MySqlParser.CRC32:
                case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
                case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
                case MySqlParser.CREATE_DH_PARAMETERS:
                case MySqlParser.CREATE_DIGEST:
                case MySqlParser.CROSSES:
                case MySqlParser.DATEDIFF:
                case MySqlParser.DATE_FORMAT:
                case MySqlParser.DAYNAME:
                case MySqlParser.DAYOFMONTH:
                case MySqlParser.DAYOFWEEK:
                case MySqlParser.DAYOFYEAR:
                case MySqlParser.DECODE:
                case MySqlParser.DEGREES:
                case MySqlParser.DES_DECRYPT:
                case MySqlParser.DES_ENCRYPT:
                case MySqlParser.DIMENSION:
                case MySqlParser.DISJOINT:
                case MySqlParser.ELT:
                case MySqlParser.ENCODE:
                case MySqlParser.ENCRYPT:
                case MySqlParser.ENDPOINT:
                case MySqlParser.ENGINE_ATTRIBUTE:
                case MySqlParser.ENVELOPE:
                case MySqlParser.EQUALS:
                case MySqlParser.EXP:
                case MySqlParser.EXPORT_SET:
                case MySqlParser.EXTERIORRING:
                case MySqlParser.EXTRACTVALUE:
                case MySqlParser.FIELD:
                case MySqlParser.FIND_IN_SET:
                case MySqlParser.FLOOR:
                case MySqlParser.FORMAT:
                case MySqlParser.FOUND_ROWS:
                case MySqlParser.FROM_BASE64:
                case MySqlParser.FROM_DAYS:
                case MySqlParser.FROM_UNIXTIME:
                case MySqlParser.GEOMCOLLFROMTEXT:
                case MySqlParser.GEOMCOLLFROMWKB:
                case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.GEOMETRYFROMTEXT:
                case MySqlParser.GEOMETRYFROMWKB:
                case MySqlParser.GEOMETRYN:
                case MySqlParser.GEOMETRYTYPE:
                case MySqlParser.GEOMFROMTEXT:
                case MySqlParser.GEOMFROMWKB:
                case MySqlParser.GET_FORMAT:
                case MySqlParser.GET_LOCK:
                case MySqlParser.GLENGTH:
                case MySqlParser.GREATEST:
                case MySqlParser.GTID_SUBSET:
                case MySqlParser.GTID_SUBTRACT:
                case MySqlParser.HEX:
                case MySqlParser.IFNULL:
                case MySqlParser.INET6_ATON:
                case MySqlParser.INET6_NTOA:
                case MySqlParser.INET_ATON:
                case MySqlParser.INET_NTOA:
                case MySqlParser.INSTR:
                case MySqlParser.INTERIORRINGN:
                case MySqlParser.INTERSECTS:
                case MySqlParser.ISCLOSED:
                case MySqlParser.ISEMPTY:
                case MySqlParser.ISNULL:
                case MySqlParser.ISSIMPLE:
                case MySqlParser.IS_FREE_LOCK:
                case MySqlParser.IS_IPV4:
                case MySqlParser.IS_IPV4_COMPAT:
                case MySqlParser.IS_IPV4_MAPPED:
                case MySqlParser.IS_IPV6:
                case MySqlParser.IS_USED_LOCK:
                case MySqlParser.LAST_INSERT_ID:
                case MySqlParser.LCASE:
                case MySqlParser.LEAST:
                case MySqlParser.LENGTH:
                case MySqlParser.LINEFROMTEXT:
                case MySqlParser.LINEFROMWKB:
                case MySqlParser.LINESTRINGFROMTEXT:
                case MySqlParser.LINESTRINGFROMWKB:
                case MySqlParser.LN:
                case MySqlParser.LOAD_FILE:
                case MySqlParser.LOCATE:
                case MySqlParser.LOG:
                case MySqlParser.LOG10:
                case MySqlParser.LOG2:
                case MySqlParser.LOWER:
                case MySqlParser.LPAD:
                case MySqlParser.LTRIM:
                case MySqlParser.MAKEDATE:
                case MySqlParser.MAKETIME:
                case MySqlParser.MAKE_SET:
                case MySqlParser.MASTER_POS_WAIT:
                case MySqlParser.MBRCONTAINS:
                case MySqlParser.MBRDISJOINT:
                case MySqlParser.MBREQUAL:
                case MySqlParser.MBRINTERSECTS:
                case MySqlParser.MBROVERLAPS:
                case MySqlParser.MBRTOUCHES:
                case MySqlParser.MBRWITHIN:
                case MySqlParser.MD5:
                case MySqlParser.MLINEFROMTEXT:
                case MySqlParser.MLINEFROMWKB:
                case MySqlParser.MONTHNAME:
                case MySqlParser.MPOINTFROMTEXT:
                case MySqlParser.MPOINTFROMWKB:
                case MySqlParser.MPOLYFROMTEXT:
                case MySqlParser.MPOLYFROMWKB:
                case MySqlParser.MULTILINESTRINGFROMTEXT:
                case MySqlParser.MULTILINESTRINGFROMWKB:
                case MySqlParser.MULTIPOINTFROMTEXT:
                case MySqlParser.MULTIPOINTFROMWKB:
                case MySqlParser.MULTIPOLYGONFROMTEXT:
                case MySqlParser.MULTIPOLYGONFROMWKB:
                case MySqlParser.NAME_CONST:
                case MySqlParser.NULLIF:
                case MySqlParser.NUMGEOMETRIES:
                case MySqlParser.NUMINTERIORRINGS:
                case MySqlParser.NUMPOINTS:
                case MySqlParser.OCT:
                case MySqlParser.OCTET_LENGTH:
                case MySqlParser.ORD:
                case MySqlParser.OVERLAPS:
                case MySqlParser.PERIOD_ADD:
                case MySqlParser.PERIOD_DIFF:
                case MySqlParser.PI:
                case MySqlParser.POINTFROMTEXT:
                case MySqlParser.POINTFROMWKB:
                case MySqlParser.POINTN:
                case MySqlParser.POLYFROMTEXT:
                case MySqlParser.POLYFROMWKB:
                case MySqlParser.POLYGONFROMTEXT:
                case MySqlParser.POLYGONFROMWKB:
                case MySqlParser.POW:
                case MySqlParser.POWER:
                case MySqlParser.QUOTE:
                case MySqlParser.RADIANS:
                case MySqlParser.RAND:
                case MySqlParser.RANDOM:
                case MySqlParser.RANDOM_BYTES:
                case MySqlParser.RELEASE_LOCK:
                case MySqlParser.REVERSE:
                case MySqlParser.ROUND:
                case MySqlParser.ROW_COUNT:
                case MySqlParser.RPAD:
                case MySqlParser.RTRIM:
                case MySqlParser.SEC_TO_TIME:
                case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                case MySqlParser.SESSION_USER:
                case MySqlParser.SHA:
                case MySqlParser.SHA1:
                case MySqlParser.SHA2:
                case MySqlParser.SCHEMA_NAME:
                case MySqlParser.SIGN:
                case MySqlParser.SIN:
                case MySqlParser.SLEEP:
                case MySqlParser.SOUNDEX:
                case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
                case MySqlParser.SQRT:
                case MySqlParser.SRID:
                case MySqlParser.STARTPOINT:
                case MySqlParser.STRCMP:
                case MySqlParser.STR_TO_DATE:
                case MySqlParser.ST_AREA:
                case MySqlParser.ST_ASBINARY:
                case MySqlParser.ST_ASTEXT:
                case MySqlParser.ST_ASWKB:
                case MySqlParser.ST_ASWKT:
                case MySqlParser.ST_BUFFER:
                case MySqlParser.ST_CENTROID:
                case MySqlParser.ST_CONTAINS:
                case MySqlParser.ST_CROSSES:
                case MySqlParser.ST_DIFFERENCE:
                case MySqlParser.ST_DIMENSION:
                case MySqlParser.ST_DISJOINT:
                case MySqlParser.ST_DISTANCE:
                case MySqlParser.ST_ENDPOINT:
                case MySqlParser.ST_ENVELOPE:
                case MySqlParser.ST_EQUALS:
                case MySqlParser.ST_EXTERIORRING:
                case MySqlParser.ST_GEOMCOLLFROMTEXT:
                case MySqlParser.ST_GEOMCOLLFROMTXT:
                case MySqlParser.ST_GEOMCOLLFROMWKB:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.ST_GEOMETRYFROMTEXT:
                case MySqlParser.ST_GEOMETRYFROMWKB:
                case MySqlParser.ST_GEOMETRYN:
                case MySqlParser.ST_GEOMETRYTYPE:
                case MySqlParser.ST_GEOMFROMTEXT:
                case MySqlParser.ST_GEOMFROMWKB:
                case MySqlParser.ST_INTERIORRINGN:
                case MySqlParser.ST_INTERSECTION:
                case MySqlParser.ST_INTERSECTS:
                case MySqlParser.ST_ISCLOSED:
                case MySqlParser.ST_ISEMPTY:
                case MySqlParser.ST_ISSIMPLE:
                case MySqlParser.ST_LINEFROMTEXT:
                case MySqlParser.ST_LINEFROMWKB:
                case MySqlParser.ST_LINESTRINGFROMTEXT:
                case MySqlParser.ST_LINESTRINGFROMWKB:
                case MySqlParser.ST_NUMGEOMETRIES:
                case MySqlParser.ST_NUMINTERIORRING:
                case MySqlParser.ST_NUMINTERIORRINGS:
                case MySqlParser.ST_NUMPOINTS:
                case MySqlParser.ST_OVERLAPS:
                case MySqlParser.ST_POINTFROMTEXT:
                case MySqlParser.ST_POINTFROMWKB:
                case MySqlParser.ST_POINTN:
                case MySqlParser.ST_POLYFROMTEXT:
                case MySqlParser.ST_POLYFROMWKB:
                case MySqlParser.ST_POLYGONFROMTEXT:
                case MySqlParser.ST_POLYGONFROMWKB:
                case MySqlParser.ST_SRID:
                case MySqlParser.ST_STARTPOINT:
                case MySqlParser.ST_SYMDIFFERENCE:
                case MySqlParser.ST_TOUCHES:
                case MySqlParser.ST_UNION:
                case MySqlParser.ST_WITHIN:
                case MySqlParser.ST_X:
                case MySqlParser.ST_Y:
                case MySqlParser.SUBDATE:
                case MySqlParser.SUBSTRING_INDEX:
                case MySqlParser.SUBTIME:
                case MySqlParser.SYSTEM_USER:
                case MySqlParser.TAN:
                case MySqlParser.TIMEDIFF:
                case MySqlParser.TIMESTAMPADD:
                case MySqlParser.TIMESTAMPDIFF:
                case MySqlParser.TIME_FORMAT:
                case MySqlParser.TIME_TO_SEC:
                case MySqlParser.TOUCHES:
                case MySqlParser.TO_BASE64:
                case MySqlParser.TO_DAYS:
                case MySqlParser.TO_SECONDS:
                case MySqlParser.TP_CONNECTION_ADMIN:
                case MySqlParser.UCASE:
                case MySqlParser.UNCOMPRESS:
                case MySqlParser.UNCOMPRESSED_LENGTH:
                case MySqlParser.UNHEX:
                case MySqlParser.UNIX_TIMESTAMP:
                case MySqlParser.UPDATEXML:
                case MySqlParser.UPPER:
                case MySqlParser.UUID:
                case MySqlParser.UUID_SHORT:
                case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
                case MySqlParser.VERSION:
                case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case MySqlParser.WEEKDAY:
                case MySqlParser.WEEKOFYEAR:
                case MySqlParser.WEIGHT_STRING:
                case MySqlParser.WITHIN:
                case MySqlParser.YEARWEEK:
                case MySqlParser.Y_FUNCTION:
                case MySqlParser.X_FUNCTION:
                case MySqlParser.MOD:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.ID:
                    {
                    this.state = 2880;
                    this.uidList();
                    }
                    break;
                case MySqlParser.ALL:
                    {
                    this.state = 2881;
                    this.match(MySqlParser.ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2884;
                this.match(MySqlParser.TABLESPACE);
                }
                break;
            case MySqlParser.IMPORT:
                localContext = new AlterByImportPartitionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2885;
                this.match(MySqlParser.IMPORT);
                this.state = 2886;
                this.match(MySqlParser.PARTITION);
                this.state = 2889;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ARRAY:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.BUCKETS:
                case MySqlParser.CONDITION:
                case MySqlParser.CURRENT:
                case MySqlParser.CURRENT_USER:
                case MySqlParser.DATABASE:
                case MySqlParser.DEFAULT:
                case MySqlParser.DIAGNOSTICS:
                case MySqlParser.EMPTY:
                case MySqlParser.ENFORCED:
                case MySqlParser.EXCEPT:
                case MySqlParser.GROUP:
                case MySqlParser.IF:
                case MySqlParser.IGNORED:
                case MySqlParser.INSERT:
                case MySqlParser.LATERAL:
                case MySqlParser.LEFT:
                case MySqlParser.NUMBER:
                case MySqlParser.OPTIONAL:
                case MySqlParser.ORDER:
                case MySqlParser.PRIMARY:
                case MySqlParser.REPEAT:
                case MySqlParser.REPLACE:
                case MySqlParser.RIGHT:
                case MySqlParser.SCHEMA:
                case MySqlParser.SKIP_QUERY_REWRITE:
                case MySqlParser.STACKED:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.BINARY:
                case MySqlParser.TEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.JSON_ARRAY:
                case MySqlParser.JSON_ARRAYAGG:
                case MySqlParser.JSON_ARRAY_APPEND:
                case MySqlParser.JSON_ARRAY_INSERT:
                case MySqlParser.JSON_CONTAINS:
                case MySqlParser.JSON_CONTAINS_PATH:
                case MySqlParser.JSON_DEPTH:
                case MySqlParser.JSON_EXTRACT:
                case MySqlParser.JSON_INSERT:
                case MySqlParser.JSON_KEYS:
                case MySqlParser.JSON_LENGTH:
                case MySqlParser.JSON_MERGE:
                case MySqlParser.JSON_MERGE_PATCH:
                case MySqlParser.JSON_MERGE_PRESERVE:
                case MySqlParser.JSON_OBJECT:
                case MySqlParser.JSON_OBJECTAGG:
                case MySqlParser.JSON_OVERLAPS:
                case MySqlParser.JSON_PRETTY:
                case MySqlParser.JSON_QUOTE:
                case MySqlParser.JSON_REMOVE:
                case MySqlParser.JSON_REPLACE:
                case MySqlParser.JSON_SCHEMA_VALID:
                case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
                case MySqlParser.JSON_SEARCH:
                case MySqlParser.JSON_SET:
                case MySqlParser.JSON_STORAGE_FREE:
                case MySqlParser.JSON_STORAGE_SIZE:
                case MySqlParser.JSON_TABLE:
                case MySqlParser.JSON_TYPE:
                case MySqlParser.JSON_UNQUOTE:
                case MySqlParser.JSON_VALID:
                case MySqlParser.JSON_VALUE:
                case MySqlParser.NESTED:
                case MySqlParser.ORDINALITY:
                case MySqlParser.PATH:
                case MySqlParser.AVG:
                case MySqlParser.BIT_AND:
                case MySqlParser.BIT_OR:
                case MySqlParser.BIT_XOR:
                case MySqlParser.COUNT:
                case MySqlParser.CUME_DIST:
                case MySqlParser.DENSE_RANK:
                case MySqlParser.FIRST_VALUE:
                case MySqlParser.GROUP_CONCAT:
                case MySqlParser.LAG:
                case MySqlParser.LAST_VALUE:
                case MySqlParser.LEAD:
                case MySqlParser.MAX:
                case MySqlParser.MIN:
                case MySqlParser.NTILE:
                case MySqlParser.NTH_VALUE:
                case MySqlParser.PERCENT_RANK:
                case MySqlParser.RANK:
                case MySqlParser.ROW_NUMBER:
                case MySqlParser.STD:
                case MySqlParser.STDDEV:
                case MySqlParser.STDDEV_POP:
                case MySqlParser.STDDEV_SAMP:
                case MySqlParser.SUM:
                case MySqlParser.VAR_POP:
                case MySqlParser.VAR_SAMP:
                case MySqlParser.VARIANCE:
                case MySqlParser.CURRENT_DATE:
                case MySqlParser.CURRENT_TIME:
                case MySqlParser.CURRENT_TIMESTAMP:
                case MySqlParser.LOCALTIME:
                case MySqlParser.CURDATE:
                case MySqlParser.CURTIME:
                case MySqlParser.DATE_ADD:
                case MySqlParser.DATE_SUB:
                case MySqlParser.LOCALTIMESTAMP:
                case MySqlParser.NOW:
                case MySqlParser.POSITION:
                case MySqlParser.SUBSTR:
                case MySqlParser.SUBSTRING:
                case MySqlParser.SYSDATE:
                case MySqlParser.TRIM:
                case MySqlParser.UTC_DATE:
                case MySqlParser.UTC_TIME:
                case MySqlParser.UTC_TIMESTAMP:
                case MySqlParser.ACCOUNT:
                case MySqlParser.ACTION:
                case MySqlParser.AFTER:
                case MySqlParser.AGGREGATE:
                case MySqlParser.ALGORITHM:
                case MySqlParser.ANY:
                case MySqlParser.AT:
                case MySqlParser.AUTHORS:
                case MySqlParser.AUTOCOMMIT:
                case MySqlParser.AUTOEXTEND_SIZE:
                case MySqlParser.AUTO_INCREMENT:
                case MySqlParser.AVG_ROW_LENGTH:
                case MySqlParser.BEGIN:
                case MySqlParser.BINLOG:
                case MySqlParser.BIT:
                case MySqlParser.BLOCK:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.BTREE:
                case MySqlParser.CACHE:
                case MySqlParser.CASCADED:
                case MySqlParser.CHAIN:
                case MySqlParser.CHANGED:
                case MySqlParser.CHANNEL:
                case MySqlParser.CHECKSUM:
                case MySqlParser.PAGE_CHECKSUM:
                case MySqlParser.CIPHER:
                case MySqlParser.CLASS_ORIGIN:
                case MySqlParser.CLIENT:
                case MySqlParser.CLOSE:
                case MySqlParser.CLUSTERING:
                case MySqlParser.COALESCE:
                case MySqlParser.CODE:
                case MySqlParser.COLUMNS:
                case MySqlParser.COLUMN_FORMAT:
                case MySqlParser.COLUMN_NAME:
                case MySqlParser.COMMENT:
                case MySqlParser.COMMIT:
                case MySqlParser.COMPACT:
                case MySqlParser.COMPLETION:
                case MySqlParser.COMPRESSED:
                case MySqlParser.COMPRESSION:
                case MySqlParser.CONCURRENT:
                case MySqlParser.CONNECT:
                case MySqlParser.CONNECTION:
                case MySqlParser.CONSISTENT:
                case MySqlParser.CONSTRAINT_CATALOG:
                case MySqlParser.CONSTRAINT_SCHEMA:
                case MySqlParser.CONSTRAINT_NAME:
                case MySqlParser.CONTAINS:
                case MySqlParser.CONTEXT:
                case MySqlParser.CONTRIBUTORS:
                case MySqlParser.COPY:
                case MySqlParser.CPU:
                case MySqlParser.CURSOR_NAME:
                case MySqlParser.DATA:
                case MySqlParser.DATAFILE:
                case MySqlParser.DEALLOCATE:
                case MySqlParser.DEFAULT_AUTH:
                case MySqlParser.DEFINER:
                case MySqlParser.DELAY_KEY_WRITE:
                case MySqlParser.DES_KEY_FILE:
                case MySqlParser.DIRECTORY:
                case MySqlParser.DISABLE:
                case MySqlParser.DISCARD:
                case MySqlParser.DISK:
                case MySqlParser.DO:
                case MySqlParser.DUMPFILE:
                case MySqlParser.DUPLICATE:
                case MySqlParser.DYNAMIC:
                case MySqlParser.ENABLE:
                case MySqlParser.ENCRYPTION:
                case MySqlParser.END:
                case MySqlParser.ENDS:
                case MySqlParser.ENGINE:
                case MySqlParser.ENGINES:
                case MySqlParser.ERROR:
                case MySqlParser.ERRORS:
                case MySqlParser.ESCAPE:
                case MySqlParser.EVEN:
                case MySqlParser.EVENT:
                case MySqlParser.EVENTS:
                case MySqlParser.EVERY:
                case MySqlParser.EXCHANGE:
                case MySqlParser.EXCLUSIVE:
                case MySqlParser.EXPIRE:
                case MySqlParser.EXPORT:
                case MySqlParser.EXTENDED:
                case MySqlParser.EXTENT_SIZE:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.FAST:
                case MySqlParser.FAULTS:
                case MySqlParser.FIELDS:
                case MySqlParser.FILE_BLOCK_SIZE:
                case MySqlParser.FILTER:
                case MySqlParser.FIRST:
                case MySqlParser.FIXED:
                case MySqlParser.FLUSH:
                case MySqlParser.FOLLOWS:
                case MySqlParser.FOUND:
                case MySqlParser.FULL:
                case MySqlParser.FUNCTION:
                case MySqlParser.GENERAL:
                case MySqlParser.GLOBAL:
                case MySqlParser.GRANTS:
                case MySqlParser.GROUP_REPLICATION:
                case MySqlParser.HANDLER:
                case MySqlParser.HASH:
                case MySqlParser.HELP:
                case MySqlParser.HISTORY:
                case MySqlParser.HOST:
                case MySqlParser.HOSTS:
                case MySqlParser.IDENTIFIED:
                case MySqlParser.IGNORE_SERVER_IDS:
                case MySqlParser.IMPORT:
                case MySqlParser.INDEXES:
                case MySqlParser.INITIAL_SIZE:
                case MySqlParser.INPLACE:
                case MySqlParser.INSERT_METHOD:
                case MySqlParser.INSTALL:
                case MySqlParser.INSTANCE:
                case MySqlParser.INSTANT:
                case MySqlParser.INVISIBLE:
                case MySqlParser.INVOKER:
                case MySqlParser.IO:
                case MySqlParser.IO_THREAD:
                case MySqlParser.IPC:
                case MySqlParser.ISOLATION:
                case MySqlParser.ISSUER:
                case MySqlParser.JSON:
                case MySqlParser.KEY_BLOCK_SIZE:
                case MySqlParser.LANGUAGE:
                case MySqlParser.LAST:
                case MySqlParser.LEAVES:
                case MySqlParser.LESS:
                case MySqlParser.LEVEL:
                case MySqlParser.LIST:
                case MySqlParser.LOCAL:
                case MySqlParser.LOGFILE:
                case MySqlParser.LOGS:
                case MySqlParser.MASTER:
                case MySqlParser.MASTER_AUTO_POSITION:
                case MySqlParser.MASTER_CONNECT_RETRY:
                case MySqlParser.MASTER_DELAY:
                case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                case MySqlParser.MASTER_HOST:
                case MySqlParser.MASTER_LOG_FILE:
                case MySqlParser.MASTER_LOG_POS:
                case MySqlParser.MASTER_PASSWORD:
                case MySqlParser.MASTER_PORT:
                case MySqlParser.MASTER_RETRY_COUNT:
                case MySqlParser.MASTER_SSL:
                case MySqlParser.MASTER_SSL_CA:
                case MySqlParser.MASTER_SSL_CAPATH:
                case MySqlParser.MASTER_SSL_CERT:
                case MySqlParser.MASTER_SSL_CIPHER:
                case MySqlParser.MASTER_SSL_CRL:
                case MySqlParser.MASTER_SSL_CRLPATH:
                case MySqlParser.MASTER_SSL_KEY:
                case MySqlParser.MASTER_TLS_VERSION:
                case MySqlParser.MASTER_USER:
                case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                case MySqlParser.MAX_QUERIES_PER_HOUR:
                case MySqlParser.MAX_ROWS:
                case MySqlParser.MAX_SIZE:
                case MySqlParser.MAX_UPDATES_PER_HOUR:
                case MySqlParser.MAX_USER_CONNECTIONS:
                case MySqlParser.MEDIUM:
                case MySqlParser.MEMBER:
                case MySqlParser.MERGE:
                case MySqlParser.MESSAGE_TEXT:
                case MySqlParser.MID:
                case MySqlParser.MIGRATE:
                case MySqlParser.MIN_ROWS:
                case MySqlParser.MODE:
                case MySqlParser.MODIFY:
                case MySqlParser.MUTEX:
                case MySqlParser.MYSQL:
                case MySqlParser.MYSQL_ERRNO:
                case MySqlParser.NAME:
                case MySqlParser.NAMES:
                case MySqlParser.NCHAR:
                case MySqlParser.NEVER:
                case MySqlParser.NEXT:
                case MySqlParser.NO:
                case MySqlParser.NOCOPY:
                case MySqlParser.NOWAIT:
                case MySqlParser.NODEGROUP:
                case MySqlParser.NONE:
                case MySqlParser.ODBC:
                case MySqlParser.OFFLINE:
                case MySqlParser.OFFSET:
                case MySqlParser.OF:
                case MySqlParser.OJ:
                case MySqlParser.OLD_PASSWORD:
                case MySqlParser.ONE:
                case MySqlParser.ONLINE:
                case MySqlParser.ONLY:
                case MySqlParser.OPEN:
                case MySqlParser.OPTIMIZER_COSTS:
                case MySqlParser.OPTIONS:
                case MySqlParser.OWNER:
                case MySqlParser.PACK_KEYS:
                case MySqlParser.PAGE:
                case MySqlParser.PARSER:
                case MySqlParser.PARTIAL:
                case MySqlParser.PARTITIONING:
                case MySqlParser.PARTITIONS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.PHASE:
                case MySqlParser.PLUGIN:
                case MySqlParser.PLUGIN_DIR:
                case MySqlParser.PLUGINS:
                case MySqlParser.PORT:
                case MySqlParser.PRECEDES:
                case MySqlParser.PREPARE:
                case MySqlParser.PRESERVE:
                case MySqlParser.PREV:
                case MySqlParser.PROCESSLIST:
                case MySqlParser.PROFILE:
                case MySqlParser.PROFILES:
                case MySqlParser.PROXY:
                case MySqlParser.QUERY:
                case MySqlParser.QUICK:
                case MySqlParser.REBUILD:
                case MySqlParser.RECOVER:
                case MySqlParser.RECURSIVE:
                case MySqlParser.REDO_BUFFER_SIZE:
                case MySqlParser.REDUNDANT:
                case MySqlParser.RELAY:
                case MySqlParser.RELAY_LOG_FILE:
                case MySqlParser.RELAY_LOG_POS:
                case MySqlParser.RELAYLOG:
                case MySqlParser.REMOVE:
                case MySqlParser.REORGANIZE:
                case MySqlParser.REPAIR:
                case MySqlParser.REPLICATE_DO_DB:
                case MySqlParser.REPLICATE_DO_TABLE:
                case MySqlParser.REPLICATE_IGNORE_DB:
                case MySqlParser.REPLICATE_IGNORE_TABLE:
                case MySqlParser.REPLICATE_REWRITE_DB:
                case MySqlParser.REPLICATE_WILD_DO_TABLE:
                case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                case MySqlParser.REPLICATION:
                case MySqlParser.RESET:
                case MySqlParser.RESUME:
                case MySqlParser.RETURNED_SQLSTATE:
                case MySqlParser.RETURNS:
                case MySqlParser.REUSE:
                case MySqlParser.ROLE:
                case MySqlParser.ROLLBACK:
                case MySqlParser.ROLLUP:
                case MySqlParser.ROTATE:
                case MySqlParser.ROW:
                case MySqlParser.ROWS:
                case MySqlParser.ROW_FORMAT:
                case MySqlParser.RTREE:
                case MySqlParser.SAVEPOINT:
                case MySqlParser.SCHEDULE:
                case MySqlParser.SECURITY:
                case MySqlParser.SERVER:
                case MySqlParser.SESSION:
                case MySqlParser.SHARE:
                case MySqlParser.SHARED:
                case MySqlParser.SIGNED:
                case MySqlParser.SIMPLE:
                case MySqlParser.SLAVE:
                case MySqlParser.SLOW:
                case MySqlParser.SNAPSHOT:
                case MySqlParser.SOCKET:
                case MySqlParser.SOME:
                case MySqlParser.SONAME:
                case MySqlParser.SOUNDS:
                case MySqlParser.SOURCE:
                case MySqlParser.SQL_AFTER_GTIDS:
                case MySqlParser.SQL_AFTER_MTS_GAPS:
                case MySqlParser.SQL_BEFORE_GTIDS:
                case MySqlParser.SQL_BUFFER_RESULT:
                case MySqlParser.SQL_CACHE:
                case MySqlParser.SQL_NO_CACHE:
                case MySqlParser.SQL_THREAD:
                case MySqlParser.START:
                case MySqlParser.STARTS:
                case MySqlParser.STATS_AUTO_RECALC:
                case MySqlParser.STATS_PERSISTENT:
                case MySqlParser.STATS_SAMPLE_PAGES:
                case MySqlParser.STATUS:
                case MySqlParser.STOP:
                case MySqlParser.STORAGE:
                case MySqlParser.STRING:
                case MySqlParser.SUBCLASS_ORIGIN:
                case MySqlParser.SUBJECT:
                case MySqlParser.SUBPARTITION:
                case MySqlParser.SUBPARTITIONS:
                case MySqlParser.SUSPEND:
                case MySqlParser.SWAPS:
                case MySqlParser.SWITCHES:
                case MySqlParser.TABLE_NAME:
                case MySqlParser.TABLESPACE:
                case MySqlParser.TABLE_TYPE:
                case MySqlParser.TEMPORARY:
                case MySqlParser.TEMPTABLE:
                case MySqlParser.THAN:
                case MySqlParser.TRADITIONAL:
                case MySqlParser.TRANSACTION:
                case MySqlParser.TRANSACTIONAL:
                case MySqlParser.TRIGGERS:
                case MySqlParser.TRUNCATE:
                case MySqlParser.UNBOUNDED:
                case MySqlParser.UNDEFINED:
                case MySqlParser.UNDOFILE:
                case MySqlParser.UNDO_BUFFER_SIZE:
                case MySqlParser.UNINSTALL:
                case MySqlParser.UNKNOWN:
                case MySqlParser.UNTIL:
                case MySqlParser.UPGRADE:
                case MySqlParser.USER:
                case MySqlParser.USE_FRM:
                case MySqlParser.USER_RESOURCES:
                case MySqlParser.VALIDATION:
                case MySqlParser.VALUE:
                case MySqlParser.VARIABLES:
                case MySqlParser.VIEW:
                case MySqlParser.VIRTUAL:
                case MySqlParser.VISIBLE:
                case MySqlParser.WAIT:
                case MySqlParser.WARNINGS:
                case MySqlParser.WITHOUT:
                case MySqlParser.WORK:
                case MySqlParser.WRAPPER:
                case MySqlParser.X509:
                case MySqlParser.XA:
                case MySqlParser.XML:
                case MySqlParser.EUR:
                case MySqlParser.USA:
                case MySqlParser.JIS:
                case MySqlParser.ISO:
                case MySqlParser.INTERNAL:
                case MySqlParser.QUARTER:
                case MySqlParser.MONTH:
                case MySqlParser.DAY:
                case MySqlParser.HOUR:
                case MySqlParser.MINUTE:
                case MySqlParser.WEEK:
                case MySqlParser.SECOND:
                case MySqlParser.MICROSECOND:
                case MySqlParser.ADMIN:
                case MySqlParser.AUDIT_ABORT_EXEMPT:
                case MySqlParser.AUDIT_ADMIN:
                case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
                case MySqlParser.BACKUP_ADMIN:
                case MySqlParser.BINLOG_ADMIN:
                case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
                case MySqlParser.CLONE_ADMIN:
                case MySqlParser.CONNECTION_ADMIN:
                case MySqlParser.ENCRYPTION_KEY_ADMIN:
                case MySqlParser.EXECUTE:
                case MySqlParser.FILE:
                case MySqlParser.FIREWALL_ADMIN:
                case MySqlParser.FIREWALL_EXEMPT:
                case MySqlParser.FIREWALL_USER:
                case MySqlParser.GROUP_REPLICATION_ADMIN:
                case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
                case MySqlParser.INVOKE:
                case MySqlParser.LAMBDA:
                case MySqlParser.NDB_STORED_USER:
                case MySqlParser.PASSWORDLESS_USER_ADMIN:
                case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
                case MySqlParser.PRIVILEGES:
                case MySqlParser.PROCESS:
                case MySqlParser.RELOAD:
                case MySqlParser.REPLICATION_APPLIER:
                case MySqlParser.REPLICATION_SLAVE_ADMIN:
                case MySqlParser.RESOURCE_GROUP_ADMIN:
                case MySqlParser.RESOURCE_GROUP_USER:
                case MySqlParser.ROLE_ADMIN:
                case MySqlParser.ROUTINE:
                case MySqlParser.S3:
                case MySqlParser.SESSION_VARIABLES_ADMIN:
                case MySqlParser.SET_USER_ID:
                case MySqlParser.SHOW_ROUTINE:
                case MySqlParser.SHUTDOWN:
                case MySqlParser.SUPER:
                case MySqlParser.SYSTEM_VARIABLES_ADMIN:
                case MySqlParser.TABLES:
                case MySqlParser.TABLE_ENCRYPTION_ADMIN:
                case MySqlParser.VERSION_TOKEN_ADMIN:
                case MySqlParser.XA_RECOVER_ADMIN:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.ARCHIVE:
                case MySqlParser.BLACKHOLE:
                case MySqlParser.CSV:
                case MySqlParser.FEDERATED:
                case MySqlParser.INNODB:
                case MySqlParser.MEMORY:
                case MySqlParser.MRG_MYISAM:
                case MySqlParser.MYISAM:
                case MySqlParser.NDB:
                case MySqlParser.NDBCLUSTER:
                case MySqlParser.PERFORMANCE_SCHEMA:
                case MySqlParser.TOKUDB:
                case MySqlParser.REPEATABLE:
                case MySqlParser.COMMITTED:
                case MySqlParser.UNCOMMITTED:
                case MySqlParser.SERIALIZABLE:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                case MySqlParser.ABS:
                case MySqlParser.ACOS:
                case MySqlParser.ADDDATE:
                case MySqlParser.ADDTIME:
                case MySqlParser.AES_DECRYPT:
                case MySqlParser.AES_ENCRYPT:
                case MySqlParser.AREA:
                case MySqlParser.ASBINARY:
                case MySqlParser.ASIN:
                case MySqlParser.ASTEXT:
                case MySqlParser.ASWKB:
                case MySqlParser.ASWKT:
                case MySqlParser.ASYMMETRIC_DECRYPT:
                case MySqlParser.ASYMMETRIC_DERIVE:
                case MySqlParser.ASYMMETRIC_ENCRYPT:
                case MySqlParser.ASYMMETRIC_SIGN:
                case MySqlParser.ASYMMETRIC_VERIFY:
                case MySqlParser.ATAN:
                case MySqlParser.ATAN2:
                case MySqlParser.BENCHMARK:
                case MySqlParser.BIN:
                case MySqlParser.BIT_COUNT:
                case MySqlParser.BIT_LENGTH:
                case MySqlParser.BUFFER:
                case MySqlParser.CATALOG_NAME:
                case MySqlParser.CEIL:
                case MySqlParser.CEILING:
                case MySqlParser.CENTROID:
                case MySqlParser.CHARACTER_LENGTH:
                case MySqlParser.CHARSET:
                case MySqlParser.CHAR_LENGTH:
                case MySqlParser.COERCIBILITY:
                case MySqlParser.COLLATION:
                case MySqlParser.COMPRESS:
                case MySqlParser.CONCAT:
                case MySqlParser.CONCAT_WS:
                case MySqlParser.CONNECTION_ID:
                case MySqlParser.CONV:
                case MySqlParser.CONVERT_TZ:
                case MySqlParser.COS:
                case MySqlParser.COT:
                case MySqlParser.CRC32:
                case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
                case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
                case MySqlParser.CREATE_DH_PARAMETERS:
                case MySqlParser.CREATE_DIGEST:
                case MySqlParser.CROSSES:
                case MySqlParser.DATEDIFF:
                case MySqlParser.DATE_FORMAT:
                case MySqlParser.DAYNAME:
                case MySqlParser.DAYOFMONTH:
                case MySqlParser.DAYOFWEEK:
                case MySqlParser.DAYOFYEAR:
                case MySqlParser.DECODE:
                case MySqlParser.DEGREES:
                case MySqlParser.DES_DECRYPT:
                case MySqlParser.DES_ENCRYPT:
                case MySqlParser.DIMENSION:
                case MySqlParser.DISJOINT:
                case MySqlParser.ELT:
                case MySqlParser.ENCODE:
                case MySqlParser.ENCRYPT:
                case MySqlParser.ENDPOINT:
                case MySqlParser.ENGINE_ATTRIBUTE:
                case MySqlParser.ENVELOPE:
                case MySqlParser.EQUALS:
                case MySqlParser.EXP:
                case MySqlParser.EXPORT_SET:
                case MySqlParser.EXTERIORRING:
                case MySqlParser.EXTRACTVALUE:
                case MySqlParser.FIELD:
                case MySqlParser.FIND_IN_SET:
                case MySqlParser.FLOOR:
                case MySqlParser.FORMAT:
                case MySqlParser.FOUND_ROWS:
                case MySqlParser.FROM_BASE64:
                case MySqlParser.FROM_DAYS:
                case MySqlParser.FROM_UNIXTIME:
                case MySqlParser.GEOMCOLLFROMTEXT:
                case MySqlParser.GEOMCOLLFROMWKB:
                case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.GEOMETRYFROMTEXT:
                case MySqlParser.GEOMETRYFROMWKB:
                case MySqlParser.GEOMETRYN:
                case MySqlParser.GEOMETRYTYPE:
                case MySqlParser.GEOMFROMTEXT:
                case MySqlParser.GEOMFROMWKB:
                case MySqlParser.GET_FORMAT:
                case MySqlParser.GET_LOCK:
                case MySqlParser.GLENGTH:
                case MySqlParser.GREATEST:
                case MySqlParser.GTID_SUBSET:
                case MySqlParser.GTID_SUBTRACT:
                case MySqlParser.HEX:
                case MySqlParser.IFNULL:
                case MySqlParser.INET6_ATON:
                case MySqlParser.INET6_NTOA:
                case MySqlParser.INET_ATON:
                case MySqlParser.INET_NTOA:
                case MySqlParser.INSTR:
                case MySqlParser.INTERIORRINGN:
                case MySqlParser.INTERSECTS:
                case MySqlParser.ISCLOSED:
                case MySqlParser.ISEMPTY:
                case MySqlParser.ISNULL:
                case MySqlParser.ISSIMPLE:
                case MySqlParser.IS_FREE_LOCK:
                case MySqlParser.IS_IPV4:
                case MySqlParser.IS_IPV4_COMPAT:
                case MySqlParser.IS_IPV4_MAPPED:
                case MySqlParser.IS_IPV6:
                case MySqlParser.IS_USED_LOCK:
                case MySqlParser.LAST_INSERT_ID:
                case MySqlParser.LCASE:
                case MySqlParser.LEAST:
                case MySqlParser.LENGTH:
                case MySqlParser.LINEFROMTEXT:
                case MySqlParser.LINEFROMWKB:
                case MySqlParser.LINESTRINGFROMTEXT:
                case MySqlParser.LINESTRINGFROMWKB:
                case MySqlParser.LN:
                case MySqlParser.LOAD_FILE:
                case MySqlParser.LOCATE:
                case MySqlParser.LOG:
                case MySqlParser.LOG10:
                case MySqlParser.LOG2:
                case MySqlParser.LOWER:
                case MySqlParser.LPAD:
                case MySqlParser.LTRIM:
                case MySqlParser.MAKEDATE:
                case MySqlParser.MAKETIME:
                case MySqlParser.MAKE_SET:
                case MySqlParser.MASTER_POS_WAIT:
                case MySqlParser.MBRCONTAINS:
                case MySqlParser.MBRDISJOINT:
                case MySqlParser.MBREQUAL:
                case MySqlParser.MBRINTERSECTS:
                case MySqlParser.MBROVERLAPS:
                case MySqlParser.MBRTOUCHES:
                case MySqlParser.MBRWITHIN:
                case MySqlParser.MD5:
                case MySqlParser.MLINEFROMTEXT:
                case MySqlParser.MLINEFROMWKB:
                case MySqlParser.MONTHNAME:
                case MySqlParser.MPOINTFROMTEXT:
                case MySqlParser.MPOINTFROMWKB:
                case MySqlParser.MPOLYFROMTEXT:
                case MySqlParser.MPOLYFROMWKB:
                case MySqlParser.MULTILINESTRINGFROMTEXT:
                case MySqlParser.MULTILINESTRINGFROMWKB:
                case MySqlParser.MULTIPOINTFROMTEXT:
                case MySqlParser.MULTIPOINTFROMWKB:
                case MySqlParser.MULTIPOLYGONFROMTEXT:
                case MySqlParser.MULTIPOLYGONFROMWKB:
                case MySqlParser.NAME_CONST:
                case MySqlParser.NULLIF:
                case MySqlParser.NUMGEOMETRIES:
                case MySqlParser.NUMINTERIORRINGS:
                case MySqlParser.NUMPOINTS:
                case MySqlParser.OCT:
                case MySqlParser.OCTET_LENGTH:
                case MySqlParser.ORD:
                case MySqlParser.OVERLAPS:
                case MySqlParser.PERIOD_ADD:
                case MySqlParser.PERIOD_DIFF:
                case MySqlParser.PI:
                case MySqlParser.POINTFROMTEXT:
                case MySqlParser.POINTFROMWKB:
                case MySqlParser.POINTN:
                case MySqlParser.POLYFROMTEXT:
                case MySqlParser.POLYFROMWKB:
                case MySqlParser.POLYGONFROMTEXT:
                case MySqlParser.POLYGONFROMWKB:
                case MySqlParser.POW:
                case MySqlParser.POWER:
                case MySqlParser.QUOTE:
                case MySqlParser.RADIANS:
                case MySqlParser.RAND:
                case MySqlParser.RANDOM:
                case MySqlParser.RANDOM_BYTES:
                case MySqlParser.RELEASE_LOCK:
                case MySqlParser.REVERSE:
                case MySqlParser.ROUND:
                case MySqlParser.ROW_COUNT:
                case MySqlParser.RPAD:
                case MySqlParser.RTRIM:
                case MySqlParser.SEC_TO_TIME:
                case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                case MySqlParser.SESSION_USER:
                case MySqlParser.SHA:
                case MySqlParser.SHA1:
                case MySqlParser.SHA2:
                case MySqlParser.SCHEMA_NAME:
                case MySqlParser.SIGN:
                case MySqlParser.SIN:
                case MySqlParser.SLEEP:
                case MySqlParser.SOUNDEX:
                case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
                case MySqlParser.SQRT:
                case MySqlParser.SRID:
                case MySqlParser.STARTPOINT:
                case MySqlParser.STRCMP:
                case MySqlParser.STR_TO_DATE:
                case MySqlParser.ST_AREA:
                case MySqlParser.ST_ASBINARY:
                case MySqlParser.ST_ASTEXT:
                case MySqlParser.ST_ASWKB:
                case MySqlParser.ST_ASWKT:
                case MySqlParser.ST_BUFFER:
                case MySqlParser.ST_CENTROID:
                case MySqlParser.ST_CONTAINS:
                case MySqlParser.ST_CROSSES:
                case MySqlParser.ST_DIFFERENCE:
                case MySqlParser.ST_DIMENSION:
                case MySqlParser.ST_DISJOINT:
                case MySqlParser.ST_DISTANCE:
                case MySqlParser.ST_ENDPOINT:
                case MySqlParser.ST_ENVELOPE:
                case MySqlParser.ST_EQUALS:
                case MySqlParser.ST_EXTERIORRING:
                case MySqlParser.ST_GEOMCOLLFROMTEXT:
                case MySqlParser.ST_GEOMCOLLFROMTXT:
                case MySqlParser.ST_GEOMCOLLFROMWKB:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.ST_GEOMETRYFROMTEXT:
                case MySqlParser.ST_GEOMETRYFROMWKB:
                case MySqlParser.ST_GEOMETRYN:
                case MySqlParser.ST_GEOMETRYTYPE:
                case MySqlParser.ST_GEOMFROMTEXT:
                case MySqlParser.ST_GEOMFROMWKB:
                case MySqlParser.ST_INTERIORRINGN:
                case MySqlParser.ST_INTERSECTION:
                case MySqlParser.ST_INTERSECTS:
                case MySqlParser.ST_ISCLOSED:
                case MySqlParser.ST_ISEMPTY:
                case MySqlParser.ST_ISSIMPLE:
                case MySqlParser.ST_LINEFROMTEXT:
                case MySqlParser.ST_LINEFROMWKB:
                case MySqlParser.ST_LINESTRINGFROMTEXT:
                case MySqlParser.ST_LINESTRINGFROMWKB:
                case MySqlParser.ST_NUMGEOMETRIES:
                case MySqlParser.ST_NUMINTERIORRING:
                case MySqlParser.ST_NUMINTERIORRINGS:
                case MySqlParser.ST_NUMPOINTS:
                case MySqlParser.ST_OVERLAPS:
                case MySqlParser.ST_POINTFROMTEXT:
                case MySqlParser.ST_POINTFROMWKB:
                case MySqlParser.ST_POINTN:
                case MySqlParser.ST_POLYFROMTEXT:
                case MySqlParser.ST_POLYFROMWKB:
                case MySqlParser.ST_POLYGONFROMTEXT:
                case MySqlParser.ST_POLYGONFROMWKB:
                case MySqlParser.ST_SRID:
                case MySqlParser.ST_STARTPOINT:
                case MySqlParser.ST_SYMDIFFERENCE:
                case MySqlParser.ST_TOUCHES:
                case MySqlParser.ST_UNION:
                case MySqlParser.ST_WITHIN:
                case MySqlParser.ST_X:
                case MySqlParser.ST_Y:
                case MySqlParser.SUBDATE:
                case MySqlParser.SUBSTRING_INDEX:
                case MySqlParser.SUBTIME:
                case MySqlParser.SYSTEM_USER:
                case MySqlParser.TAN:
                case MySqlParser.TIMEDIFF:
                case MySqlParser.TIMESTAMPADD:
                case MySqlParser.TIMESTAMPDIFF:
                case MySqlParser.TIME_FORMAT:
                case MySqlParser.TIME_TO_SEC:
                case MySqlParser.TOUCHES:
                case MySqlParser.TO_BASE64:
                case MySqlParser.TO_DAYS:
                case MySqlParser.TO_SECONDS:
                case MySqlParser.TP_CONNECTION_ADMIN:
                case MySqlParser.UCASE:
                case MySqlParser.UNCOMPRESS:
                case MySqlParser.UNCOMPRESSED_LENGTH:
                case MySqlParser.UNHEX:
                case MySqlParser.UNIX_TIMESTAMP:
                case MySqlParser.UPDATEXML:
                case MySqlParser.UPPER:
                case MySqlParser.UUID:
                case MySqlParser.UUID_SHORT:
                case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
                case MySqlParser.VERSION:
                case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case MySqlParser.WEEKDAY:
                case MySqlParser.WEEKOFYEAR:
                case MySqlParser.WEIGHT_STRING:
                case MySqlParser.WITHIN:
                case MySqlParser.YEARWEEK:
                case MySqlParser.Y_FUNCTION:
                case MySqlParser.X_FUNCTION:
                case MySqlParser.MOD:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.ID:
                    {
                    this.state = 2887;
                    this.uidList();
                    }
                    break;
                case MySqlParser.ALL:
                    {
                    this.state = 2888;
                    this.match(MySqlParser.ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2891;
                this.match(MySqlParser.TABLESPACE);
                }
                break;
            case MySqlParser.TRUNCATE:
                localContext = new AlterByTruncatePartitionContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2892;
                this.match(MySqlParser.TRUNCATE);
                this.state = 2893;
                this.match(MySqlParser.PARTITION);
                this.state = 2896;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ARRAY:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.BUCKETS:
                case MySqlParser.CONDITION:
                case MySqlParser.CURRENT:
                case MySqlParser.CURRENT_USER:
                case MySqlParser.DATABASE:
                case MySqlParser.DEFAULT:
                case MySqlParser.DIAGNOSTICS:
                case MySqlParser.EMPTY:
                case MySqlParser.ENFORCED:
                case MySqlParser.EXCEPT:
                case MySqlParser.GROUP:
                case MySqlParser.IF:
                case MySqlParser.IGNORED:
                case MySqlParser.INSERT:
                case MySqlParser.LATERAL:
                case MySqlParser.LEFT:
                case MySqlParser.NUMBER:
                case MySqlParser.OPTIONAL:
                case MySqlParser.ORDER:
                case MySqlParser.PRIMARY:
                case MySqlParser.REPEAT:
                case MySqlParser.REPLACE:
                case MySqlParser.RIGHT:
                case MySqlParser.SCHEMA:
                case MySqlParser.SKIP_QUERY_REWRITE:
                case MySqlParser.STACKED:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.BINARY:
                case MySqlParser.TEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.JSON_ARRAY:
                case MySqlParser.JSON_ARRAYAGG:
                case MySqlParser.JSON_ARRAY_APPEND:
                case MySqlParser.JSON_ARRAY_INSERT:
                case MySqlParser.JSON_CONTAINS:
                case MySqlParser.JSON_CONTAINS_PATH:
                case MySqlParser.JSON_DEPTH:
                case MySqlParser.JSON_EXTRACT:
                case MySqlParser.JSON_INSERT:
                case MySqlParser.JSON_KEYS:
                case MySqlParser.JSON_LENGTH:
                case MySqlParser.JSON_MERGE:
                case MySqlParser.JSON_MERGE_PATCH:
                case MySqlParser.JSON_MERGE_PRESERVE:
                case MySqlParser.JSON_OBJECT:
                case MySqlParser.JSON_OBJECTAGG:
                case MySqlParser.JSON_OVERLAPS:
                case MySqlParser.JSON_PRETTY:
                case MySqlParser.JSON_QUOTE:
                case MySqlParser.JSON_REMOVE:
                case MySqlParser.JSON_REPLACE:
                case MySqlParser.JSON_SCHEMA_VALID:
                case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
                case MySqlParser.JSON_SEARCH:
                case MySqlParser.JSON_SET:
                case MySqlParser.JSON_STORAGE_FREE:
                case MySqlParser.JSON_STORAGE_SIZE:
                case MySqlParser.JSON_TABLE:
                case MySqlParser.JSON_TYPE:
                case MySqlParser.JSON_UNQUOTE:
                case MySqlParser.JSON_VALID:
                case MySqlParser.JSON_VALUE:
                case MySqlParser.NESTED:
                case MySqlParser.ORDINALITY:
                case MySqlParser.PATH:
                case MySqlParser.AVG:
                case MySqlParser.BIT_AND:
                case MySqlParser.BIT_OR:
                case MySqlParser.BIT_XOR:
                case MySqlParser.COUNT:
                case MySqlParser.CUME_DIST:
                case MySqlParser.DENSE_RANK:
                case MySqlParser.FIRST_VALUE:
                case MySqlParser.GROUP_CONCAT:
                case MySqlParser.LAG:
                case MySqlParser.LAST_VALUE:
                case MySqlParser.LEAD:
                case MySqlParser.MAX:
                case MySqlParser.MIN:
                case MySqlParser.NTILE:
                case MySqlParser.NTH_VALUE:
                case MySqlParser.PERCENT_RANK:
                case MySqlParser.RANK:
                case MySqlParser.ROW_NUMBER:
                case MySqlParser.STD:
                case MySqlParser.STDDEV:
                case MySqlParser.STDDEV_POP:
                case MySqlParser.STDDEV_SAMP:
                case MySqlParser.SUM:
                case MySqlParser.VAR_POP:
                case MySqlParser.VAR_SAMP:
                case MySqlParser.VARIANCE:
                case MySqlParser.CURRENT_DATE:
                case MySqlParser.CURRENT_TIME:
                case MySqlParser.CURRENT_TIMESTAMP:
                case MySqlParser.LOCALTIME:
                case MySqlParser.CURDATE:
                case MySqlParser.CURTIME:
                case MySqlParser.DATE_ADD:
                case MySqlParser.DATE_SUB:
                case MySqlParser.LOCALTIMESTAMP:
                case MySqlParser.NOW:
                case MySqlParser.POSITION:
                case MySqlParser.SUBSTR:
                case MySqlParser.SUBSTRING:
                case MySqlParser.SYSDATE:
                case MySqlParser.TRIM:
                case MySqlParser.UTC_DATE:
                case MySqlParser.UTC_TIME:
                case MySqlParser.UTC_TIMESTAMP:
                case MySqlParser.ACCOUNT:
                case MySqlParser.ACTION:
                case MySqlParser.AFTER:
                case MySqlParser.AGGREGATE:
                case MySqlParser.ALGORITHM:
                case MySqlParser.ANY:
                case MySqlParser.AT:
                case MySqlParser.AUTHORS:
                case MySqlParser.AUTOCOMMIT:
                case MySqlParser.AUTOEXTEND_SIZE:
                case MySqlParser.AUTO_INCREMENT:
                case MySqlParser.AVG_ROW_LENGTH:
                case MySqlParser.BEGIN:
                case MySqlParser.BINLOG:
                case MySqlParser.BIT:
                case MySqlParser.BLOCK:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.BTREE:
                case MySqlParser.CACHE:
                case MySqlParser.CASCADED:
                case MySqlParser.CHAIN:
                case MySqlParser.CHANGED:
                case MySqlParser.CHANNEL:
                case MySqlParser.CHECKSUM:
                case MySqlParser.PAGE_CHECKSUM:
                case MySqlParser.CIPHER:
                case MySqlParser.CLASS_ORIGIN:
                case MySqlParser.CLIENT:
                case MySqlParser.CLOSE:
                case MySqlParser.CLUSTERING:
                case MySqlParser.COALESCE:
                case MySqlParser.CODE:
                case MySqlParser.COLUMNS:
                case MySqlParser.COLUMN_FORMAT:
                case MySqlParser.COLUMN_NAME:
                case MySqlParser.COMMENT:
                case MySqlParser.COMMIT:
                case MySqlParser.COMPACT:
                case MySqlParser.COMPLETION:
                case MySqlParser.COMPRESSED:
                case MySqlParser.COMPRESSION:
                case MySqlParser.CONCURRENT:
                case MySqlParser.CONNECT:
                case MySqlParser.CONNECTION:
                case MySqlParser.CONSISTENT:
                case MySqlParser.CONSTRAINT_CATALOG:
                case MySqlParser.CONSTRAINT_SCHEMA:
                case MySqlParser.CONSTRAINT_NAME:
                case MySqlParser.CONTAINS:
                case MySqlParser.CONTEXT:
                case MySqlParser.CONTRIBUTORS:
                case MySqlParser.COPY:
                case MySqlParser.CPU:
                case MySqlParser.CURSOR_NAME:
                case MySqlParser.DATA:
                case MySqlParser.DATAFILE:
                case MySqlParser.DEALLOCATE:
                case MySqlParser.DEFAULT_AUTH:
                case MySqlParser.DEFINER:
                case MySqlParser.DELAY_KEY_WRITE:
                case MySqlParser.DES_KEY_FILE:
                case MySqlParser.DIRECTORY:
                case MySqlParser.DISABLE:
                case MySqlParser.DISCARD:
                case MySqlParser.DISK:
                case MySqlParser.DO:
                case MySqlParser.DUMPFILE:
                case MySqlParser.DUPLICATE:
                case MySqlParser.DYNAMIC:
                case MySqlParser.ENABLE:
                case MySqlParser.ENCRYPTION:
                case MySqlParser.END:
                case MySqlParser.ENDS:
                case MySqlParser.ENGINE:
                case MySqlParser.ENGINES:
                case MySqlParser.ERROR:
                case MySqlParser.ERRORS:
                case MySqlParser.ESCAPE:
                case MySqlParser.EVEN:
                case MySqlParser.EVENT:
                case MySqlParser.EVENTS:
                case MySqlParser.EVERY:
                case MySqlParser.EXCHANGE:
                case MySqlParser.EXCLUSIVE:
                case MySqlParser.EXPIRE:
                case MySqlParser.EXPORT:
                case MySqlParser.EXTENDED:
                case MySqlParser.EXTENT_SIZE:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.FAST:
                case MySqlParser.FAULTS:
                case MySqlParser.FIELDS:
                case MySqlParser.FILE_BLOCK_SIZE:
                case MySqlParser.FILTER:
                case MySqlParser.FIRST:
                case MySqlParser.FIXED:
                case MySqlParser.FLUSH:
                case MySqlParser.FOLLOWS:
                case MySqlParser.FOUND:
                case MySqlParser.FULL:
                case MySqlParser.FUNCTION:
                case MySqlParser.GENERAL:
                case MySqlParser.GLOBAL:
                case MySqlParser.GRANTS:
                case MySqlParser.GROUP_REPLICATION:
                case MySqlParser.HANDLER:
                case MySqlParser.HASH:
                case MySqlParser.HELP:
                case MySqlParser.HISTORY:
                case MySqlParser.HOST:
                case MySqlParser.HOSTS:
                case MySqlParser.IDENTIFIED:
                case MySqlParser.IGNORE_SERVER_IDS:
                case MySqlParser.IMPORT:
                case MySqlParser.INDEXES:
                case MySqlParser.INITIAL_SIZE:
                case MySqlParser.INPLACE:
                case MySqlParser.INSERT_METHOD:
                case MySqlParser.INSTALL:
                case MySqlParser.INSTANCE:
                case MySqlParser.INSTANT:
                case MySqlParser.INVISIBLE:
                case MySqlParser.INVOKER:
                case MySqlParser.IO:
                case MySqlParser.IO_THREAD:
                case MySqlParser.IPC:
                case MySqlParser.ISOLATION:
                case MySqlParser.ISSUER:
                case MySqlParser.JSON:
                case MySqlParser.KEY_BLOCK_SIZE:
                case MySqlParser.LANGUAGE:
                case MySqlParser.LAST:
                case MySqlParser.LEAVES:
                case MySqlParser.LESS:
                case MySqlParser.LEVEL:
                case MySqlParser.LIST:
                case MySqlParser.LOCAL:
                case MySqlParser.LOGFILE:
                case MySqlParser.LOGS:
                case MySqlParser.MASTER:
                case MySqlParser.MASTER_AUTO_POSITION:
                case MySqlParser.MASTER_CONNECT_RETRY:
                case MySqlParser.MASTER_DELAY:
                case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                case MySqlParser.MASTER_HOST:
                case MySqlParser.MASTER_LOG_FILE:
                case MySqlParser.MASTER_LOG_POS:
                case MySqlParser.MASTER_PASSWORD:
                case MySqlParser.MASTER_PORT:
                case MySqlParser.MASTER_RETRY_COUNT:
                case MySqlParser.MASTER_SSL:
                case MySqlParser.MASTER_SSL_CA:
                case MySqlParser.MASTER_SSL_CAPATH:
                case MySqlParser.MASTER_SSL_CERT:
                case MySqlParser.MASTER_SSL_CIPHER:
                case MySqlParser.MASTER_SSL_CRL:
                case MySqlParser.MASTER_SSL_CRLPATH:
                case MySqlParser.MASTER_SSL_KEY:
                case MySqlParser.MASTER_TLS_VERSION:
                case MySqlParser.MASTER_USER:
                case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                case MySqlParser.MAX_QUERIES_PER_HOUR:
                case MySqlParser.MAX_ROWS:
                case MySqlParser.MAX_SIZE:
                case MySqlParser.MAX_UPDATES_PER_HOUR:
                case MySqlParser.MAX_USER_CONNECTIONS:
                case MySqlParser.MEDIUM:
                case MySqlParser.MEMBER:
                case MySqlParser.MERGE:
                case MySqlParser.MESSAGE_TEXT:
                case MySqlParser.MID:
                case MySqlParser.MIGRATE:
                case MySqlParser.MIN_ROWS:
                case MySqlParser.MODE:
                case MySqlParser.MODIFY:
                case MySqlParser.MUTEX:
                case MySqlParser.MYSQL:
                case MySqlParser.MYSQL_ERRNO:
                case MySqlParser.NAME:
                case MySqlParser.NAMES:
                case MySqlParser.NCHAR:
                case MySqlParser.NEVER:
                case MySqlParser.NEXT:
                case MySqlParser.NO:
                case MySqlParser.NOCOPY:
                case MySqlParser.NOWAIT:
                case MySqlParser.NODEGROUP:
                case MySqlParser.NONE:
                case MySqlParser.ODBC:
                case MySqlParser.OFFLINE:
                case MySqlParser.OFFSET:
                case MySqlParser.OF:
                case MySqlParser.OJ:
                case MySqlParser.OLD_PASSWORD:
                case MySqlParser.ONE:
                case MySqlParser.ONLINE:
                case MySqlParser.ONLY:
                case MySqlParser.OPEN:
                case MySqlParser.OPTIMIZER_COSTS:
                case MySqlParser.OPTIONS:
                case MySqlParser.OWNER:
                case MySqlParser.PACK_KEYS:
                case MySqlParser.PAGE:
                case MySqlParser.PARSER:
                case MySqlParser.PARTIAL:
                case MySqlParser.PARTITIONING:
                case MySqlParser.PARTITIONS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.PHASE:
                case MySqlParser.PLUGIN:
                case MySqlParser.PLUGIN_DIR:
                case MySqlParser.PLUGINS:
                case MySqlParser.PORT:
                case MySqlParser.PRECEDES:
                case MySqlParser.PREPARE:
                case MySqlParser.PRESERVE:
                case MySqlParser.PREV:
                case MySqlParser.PROCESSLIST:
                case MySqlParser.PROFILE:
                case MySqlParser.PROFILES:
                case MySqlParser.PROXY:
                case MySqlParser.QUERY:
                case MySqlParser.QUICK:
                case MySqlParser.REBUILD:
                case MySqlParser.RECOVER:
                case MySqlParser.RECURSIVE:
                case MySqlParser.REDO_BUFFER_SIZE:
                case MySqlParser.REDUNDANT:
                case MySqlParser.RELAY:
                case MySqlParser.RELAY_LOG_FILE:
                case MySqlParser.RELAY_LOG_POS:
                case MySqlParser.RELAYLOG:
                case MySqlParser.REMOVE:
                case MySqlParser.REORGANIZE:
                case MySqlParser.REPAIR:
                case MySqlParser.REPLICATE_DO_DB:
                case MySqlParser.REPLICATE_DO_TABLE:
                case MySqlParser.REPLICATE_IGNORE_DB:
                case MySqlParser.REPLICATE_IGNORE_TABLE:
                case MySqlParser.REPLICATE_REWRITE_DB:
                case MySqlParser.REPLICATE_WILD_DO_TABLE:
                case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                case MySqlParser.REPLICATION:
                case MySqlParser.RESET:
                case MySqlParser.RESUME:
                case MySqlParser.RETURNED_SQLSTATE:
                case MySqlParser.RETURNS:
                case MySqlParser.REUSE:
                case MySqlParser.ROLE:
                case MySqlParser.ROLLBACK:
                case MySqlParser.ROLLUP:
                case MySqlParser.ROTATE:
                case MySqlParser.ROW:
                case MySqlParser.ROWS:
                case MySqlParser.ROW_FORMAT:
                case MySqlParser.RTREE:
                case MySqlParser.SAVEPOINT:
                case MySqlParser.SCHEDULE:
                case MySqlParser.SECURITY:
                case MySqlParser.SERVER:
                case MySqlParser.SESSION:
                case MySqlParser.SHARE:
                case MySqlParser.SHARED:
                case MySqlParser.SIGNED:
                case MySqlParser.SIMPLE:
                case MySqlParser.SLAVE:
                case MySqlParser.SLOW:
                case MySqlParser.SNAPSHOT:
                case MySqlParser.SOCKET:
                case MySqlParser.SOME:
                case MySqlParser.SONAME:
                case MySqlParser.SOUNDS:
                case MySqlParser.SOURCE:
                case MySqlParser.SQL_AFTER_GTIDS:
                case MySqlParser.SQL_AFTER_MTS_GAPS:
                case MySqlParser.SQL_BEFORE_GTIDS:
                case MySqlParser.SQL_BUFFER_RESULT:
                case MySqlParser.SQL_CACHE:
                case MySqlParser.SQL_NO_CACHE:
                case MySqlParser.SQL_THREAD:
                case MySqlParser.START:
                case MySqlParser.STARTS:
                case MySqlParser.STATS_AUTO_RECALC:
                case MySqlParser.STATS_PERSISTENT:
                case MySqlParser.STATS_SAMPLE_PAGES:
                case MySqlParser.STATUS:
                case MySqlParser.STOP:
                case MySqlParser.STORAGE:
                case MySqlParser.STRING:
                case MySqlParser.SUBCLASS_ORIGIN:
                case MySqlParser.SUBJECT:
                case MySqlParser.SUBPARTITION:
                case MySqlParser.SUBPARTITIONS:
                case MySqlParser.SUSPEND:
                case MySqlParser.SWAPS:
                case MySqlParser.SWITCHES:
                case MySqlParser.TABLE_NAME:
                case MySqlParser.TABLESPACE:
                case MySqlParser.TABLE_TYPE:
                case MySqlParser.TEMPORARY:
                case MySqlParser.TEMPTABLE:
                case MySqlParser.THAN:
                case MySqlParser.TRADITIONAL:
                case MySqlParser.TRANSACTION:
                case MySqlParser.TRANSACTIONAL:
                case MySqlParser.TRIGGERS:
                case MySqlParser.TRUNCATE:
                case MySqlParser.UNBOUNDED:
                case MySqlParser.UNDEFINED:
                case MySqlParser.UNDOFILE:
                case MySqlParser.UNDO_BUFFER_SIZE:
                case MySqlParser.UNINSTALL:
                case MySqlParser.UNKNOWN:
                case MySqlParser.UNTIL:
                case MySqlParser.UPGRADE:
                case MySqlParser.USER:
                case MySqlParser.USE_FRM:
                case MySqlParser.USER_RESOURCES:
                case MySqlParser.VALIDATION:
                case MySqlParser.VALUE:
                case MySqlParser.VARIABLES:
                case MySqlParser.VIEW:
                case MySqlParser.VIRTUAL:
                case MySqlParser.VISIBLE:
                case MySqlParser.WAIT:
                case MySqlParser.WARNINGS:
                case MySqlParser.WITHOUT:
                case MySqlParser.WORK:
                case MySqlParser.WRAPPER:
                case MySqlParser.X509:
                case MySqlParser.XA:
                case MySqlParser.XML:
                case MySqlParser.EUR:
                case MySqlParser.USA:
                case MySqlParser.JIS:
                case MySqlParser.ISO:
                case MySqlParser.INTERNAL:
                case MySqlParser.QUARTER:
                case MySqlParser.MONTH:
                case MySqlParser.DAY:
                case MySqlParser.HOUR:
                case MySqlParser.MINUTE:
                case MySqlParser.WEEK:
                case MySqlParser.SECOND:
                case MySqlParser.MICROSECOND:
                case MySqlParser.ADMIN:
                case MySqlParser.AUDIT_ABORT_EXEMPT:
                case MySqlParser.AUDIT_ADMIN:
                case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
                case MySqlParser.BACKUP_ADMIN:
                case MySqlParser.BINLOG_ADMIN:
                case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
                case MySqlParser.CLONE_ADMIN:
                case MySqlParser.CONNECTION_ADMIN:
                case MySqlParser.ENCRYPTION_KEY_ADMIN:
                case MySqlParser.EXECUTE:
                case MySqlParser.FILE:
                case MySqlParser.FIREWALL_ADMIN:
                case MySqlParser.FIREWALL_EXEMPT:
                case MySqlParser.FIREWALL_USER:
                case MySqlParser.GROUP_REPLICATION_ADMIN:
                case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
                case MySqlParser.INVOKE:
                case MySqlParser.LAMBDA:
                case MySqlParser.NDB_STORED_USER:
                case MySqlParser.PASSWORDLESS_USER_ADMIN:
                case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
                case MySqlParser.PRIVILEGES:
                case MySqlParser.PROCESS:
                case MySqlParser.RELOAD:
                case MySqlParser.REPLICATION_APPLIER:
                case MySqlParser.REPLICATION_SLAVE_ADMIN:
                case MySqlParser.RESOURCE_GROUP_ADMIN:
                case MySqlParser.RESOURCE_GROUP_USER:
                case MySqlParser.ROLE_ADMIN:
                case MySqlParser.ROUTINE:
                case MySqlParser.S3:
                case MySqlParser.SESSION_VARIABLES_ADMIN:
                case MySqlParser.SET_USER_ID:
                case MySqlParser.SHOW_ROUTINE:
                case MySqlParser.SHUTDOWN:
                case MySqlParser.SUPER:
                case MySqlParser.SYSTEM_VARIABLES_ADMIN:
                case MySqlParser.TABLES:
                case MySqlParser.TABLE_ENCRYPTION_ADMIN:
                case MySqlParser.VERSION_TOKEN_ADMIN:
                case MySqlParser.XA_RECOVER_ADMIN:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.ARCHIVE:
                case MySqlParser.BLACKHOLE:
                case MySqlParser.CSV:
                case MySqlParser.FEDERATED:
                case MySqlParser.INNODB:
                case MySqlParser.MEMORY:
                case MySqlParser.MRG_MYISAM:
                case MySqlParser.MYISAM:
                case MySqlParser.NDB:
                case MySqlParser.NDBCLUSTER:
                case MySqlParser.PERFORMANCE_SCHEMA:
                case MySqlParser.TOKUDB:
                case MySqlParser.REPEATABLE:
                case MySqlParser.COMMITTED:
                case MySqlParser.UNCOMMITTED:
                case MySqlParser.SERIALIZABLE:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                case MySqlParser.ABS:
                case MySqlParser.ACOS:
                case MySqlParser.ADDDATE:
                case MySqlParser.ADDTIME:
                case MySqlParser.AES_DECRYPT:
                case MySqlParser.AES_ENCRYPT:
                case MySqlParser.AREA:
                case MySqlParser.ASBINARY:
                case MySqlParser.ASIN:
                case MySqlParser.ASTEXT:
                case MySqlParser.ASWKB:
                case MySqlParser.ASWKT:
                case MySqlParser.ASYMMETRIC_DECRYPT:
                case MySqlParser.ASYMMETRIC_DERIVE:
                case MySqlParser.ASYMMETRIC_ENCRYPT:
                case MySqlParser.ASYMMETRIC_SIGN:
                case MySqlParser.ASYMMETRIC_VERIFY:
                case MySqlParser.ATAN:
                case MySqlParser.ATAN2:
                case MySqlParser.BENCHMARK:
                case MySqlParser.BIN:
                case MySqlParser.BIT_COUNT:
                case MySqlParser.BIT_LENGTH:
                case MySqlParser.BUFFER:
                case MySqlParser.CATALOG_NAME:
                case MySqlParser.CEIL:
                case MySqlParser.CEILING:
                case MySqlParser.CENTROID:
                case MySqlParser.CHARACTER_LENGTH:
                case MySqlParser.CHARSET:
                case MySqlParser.CHAR_LENGTH:
                case MySqlParser.COERCIBILITY:
                case MySqlParser.COLLATION:
                case MySqlParser.COMPRESS:
                case MySqlParser.CONCAT:
                case MySqlParser.CONCAT_WS:
                case MySqlParser.CONNECTION_ID:
                case MySqlParser.CONV:
                case MySqlParser.CONVERT_TZ:
                case MySqlParser.COS:
                case MySqlParser.COT:
                case MySqlParser.CRC32:
                case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
                case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
                case MySqlParser.CREATE_DH_PARAMETERS:
                case MySqlParser.CREATE_DIGEST:
                case MySqlParser.CROSSES:
                case MySqlParser.DATEDIFF:
                case MySqlParser.DATE_FORMAT:
                case MySqlParser.DAYNAME:
                case MySqlParser.DAYOFMONTH:
                case MySqlParser.DAYOFWEEK:
                case MySqlParser.DAYOFYEAR:
                case MySqlParser.DECODE:
                case MySqlParser.DEGREES:
                case MySqlParser.DES_DECRYPT:
                case MySqlParser.DES_ENCRYPT:
                case MySqlParser.DIMENSION:
                case MySqlParser.DISJOINT:
                case MySqlParser.ELT:
                case MySqlParser.ENCODE:
                case MySqlParser.ENCRYPT:
                case MySqlParser.ENDPOINT:
                case MySqlParser.ENGINE_ATTRIBUTE:
                case MySqlParser.ENVELOPE:
                case MySqlParser.EQUALS:
                case MySqlParser.EXP:
                case MySqlParser.EXPORT_SET:
                case MySqlParser.EXTERIORRING:
                case MySqlParser.EXTRACTVALUE:
                case MySqlParser.FIELD:
                case MySqlParser.FIND_IN_SET:
                case MySqlParser.FLOOR:
                case MySqlParser.FORMAT:
                case MySqlParser.FOUND_ROWS:
                case MySqlParser.FROM_BASE64:
                case MySqlParser.FROM_DAYS:
                case MySqlParser.FROM_UNIXTIME:
                case MySqlParser.GEOMCOLLFROMTEXT:
                case MySqlParser.GEOMCOLLFROMWKB:
                case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.GEOMETRYFROMTEXT:
                case MySqlParser.GEOMETRYFROMWKB:
                case MySqlParser.GEOMETRYN:
                case MySqlParser.GEOMETRYTYPE:
                case MySqlParser.GEOMFROMTEXT:
                case MySqlParser.GEOMFROMWKB:
                case MySqlParser.GET_FORMAT:
                case MySqlParser.GET_LOCK:
                case MySqlParser.GLENGTH:
                case MySqlParser.GREATEST:
                case MySqlParser.GTID_SUBSET:
                case MySqlParser.GTID_SUBTRACT:
                case MySqlParser.HEX:
                case MySqlParser.IFNULL:
                case MySqlParser.INET6_ATON:
                case MySqlParser.INET6_NTOA:
                case MySqlParser.INET_ATON:
                case MySqlParser.INET_NTOA:
                case MySqlParser.INSTR:
                case MySqlParser.INTERIORRINGN:
                case MySqlParser.INTERSECTS:
                case MySqlParser.ISCLOSED:
                case MySqlParser.ISEMPTY:
                case MySqlParser.ISNULL:
                case MySqlParser.ISSIMPLE:
                case MySqlParser.IS_FREE_LOCK:
                case MySqlParser.IS_IPV4:
                case MySqlParser.IS_IPV4_COMPAT:
                case MySqlParser.IS_IPV4_MAPPED:
                case MySqlParser.IS_IPV6:
                case MySqlParser.IS_USED_LOCK:
                case MySqlParser.LAST_INSERT_ID:
                case MySqlParser.LCASE:
                case MySqlParser.LEAST:
                case MySqlParser.LENGTH:
                case MySqlParser.LINEFROMTEXT:
                case MySqlParser.LINEFROMWKB:
                case MySqlParser.LINESTRINGFROMTEXT:
                case MySqlParser.LINESTRINGFROMWKB:
                case MySqlParser.LN:
                case MySqlParser.LOAD_FILE:
                case MySqlParser.LOCATE:
                case MySqlParser.LOG:
                case MySqlParser.LOG10:
                case MySqlParser.LOG2:
                case MySqlParser.LOWER:
                case MySqlParser.LPAD:
                case MySqlParser.LTRIM:
                case MySqlParser.MAKEDATE:
                case MySqlParser.MAKETIME:
                case MySqlParser.MAKE_SET:
                case MySqlParser.MASTER_POS_WAIT:
                case MySqlParser.MBRCONTAINS:
                case MySqlParser.MBRDISJOINT:
                case MySqlParser.MBREQUAL:
                case MySqlParser.MBRINTERSECTS:
                case MySqlParser.MBROVERLAPS:
                case MySqlParser.MBRTOUCHES:
                case MySqlParser.MBRWITHIN:
                case MySqlParser.MD5:
                case MySqlParser.MLINEFROMTEXT:
                case MySqlParser.MLINEFROMWKB:
                case MySqlParser.MONTHNAME:
                case MySqlParser.MPOINTFROMTEXT:
                case MySqlParser.MPOINTFROMWKB:
                case MySqlParser.MPOLYFROMTEXT:
                case MySqlParser.MPOLYFROMWKB:
                case MySqlParser.MULTILINESTRINGFROMTEXT:
                case MySqlParser.MULTILINESTRINGFROMWKB:
                case MySqlParser.MULTIPOINTFROMTEXT:
                case MySqlParser.MULTIPOINTFROMWKB:
                case MySqlParser.MULTIPOLYGONFROMTEXT:
                case MySqlParser.MULTIPOLYGONFROMWKB:
                case MySqlParser.NAME_CONST:
                case MySqlParser.NULLIF:
                case MySqlParser.NUMGEOMETRIES:
                case MySqlParser.NUMINTERIORRINGS:
                case MySqlParser.NUMPOINTS:
                case MySqlParser.OCT:
                case MySqlParser.OCTET_LENGTH:
                case MySqlParser.ORD:
                case MySqlParser.OVERLAPS:
                case MySqlParser.PERIOD_ADD:
                case MySqlParser.PERIOD_DIFF:
                case MySqlParser.PI:
                case MySqlParser.POINTFROMTEXT:
                case MySqlParser.POINTFROMWKB:
                case MySqlParser.POINTN:
                case MySqlParser.POLYFROMTEXT:
                case MySqlParser.POLYFROMWKB:
                case MySqlParser.POLYGONFROMTEXT:
                case MySqlParser.POLYGONFROMWKB:
                case MySqlParser.POW:
                case MySqlParser.POWER:
                case MySqlParser.QUOTE:
                case MySqlParser.RADIANS:
                case MySqlParser.RAND:
                case MySqlParser.RANDOM:
                case MySqlParser.RANDOM_BYTES:
                case MySqlParser.RELEASE_LOCK:
                case MySqlParser.REVERSE:
                case MySqlParser.ROUND:
                case MySqlParser.ROW_COUNT:
                case MySqlParser.RPAD:
                case MySqlParser.RTRIM:
                case MySqlParser.SEC_TO_TIME:
                case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                case MySqlParser.SESSION_USER:
                case MySqlParser.SHA:
                case MySqlParser.SHA1:
                case MySqlParser.SHA2:
                case MySqlParser.SCHEMA_NAME:
                case MySqlParser.SIGN:
                case MySqlParser.SIN:
                case MySqlParser.SLEEP:
                case MySqlParser.SOUNDEX:
                case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
                case MySqlParser.SQRT:
                case MySqlParser.SRID:
                case MySqlParser.STARTPOINT:
                case MySqlParser.STRCMP:
                case MySqlParser.STR_TO_DATE:
                case MySqlParser.ST_AREA:
                case MySqlParser.ST_ASBINARY:
                case MySqlParser.ST_ASTEXT:
                case MySqlParser.ST_ASWKB:
                case MySqlParser.ST_ASWKT:
                case MySqlParser.ST_BUFFER:
                case MySqlParser.ST_CENTROID:
                case MySqlParser.ST_CONTAINS:
                case MySqlParser.ST_CROSSES:
                case MySqlParser.ST_DIFFERENCE:
                case MySqlParser.ST_DIMENSION:
                case MySqlParser.ST_DISJOINT:
                case MySqlParser.ST_DISTANCE:
                case MySqlParser.ST_ENDPOINT:
                case MySqlParser.ST_ENVELOPE:
                case MySqlParser.ST_EQUALS:
                case MySqlParser.ST_EXTERIORRING:
                case MySqlParser.ST_GEOMCOLLFROMTEXT:
                case MySqlParser.ST_GEOMCOLLFROMTXT:
                case MySqlParser.ST_GEOMCOLLFROMWKB:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.ST_GEOMETRYFROMTEXT:
                case MySqlParser.ST_GEOMETRYFROMWKB:
                case MySqlParser.ST_GEOMETRYN:
                case MySqlParser.ST_GEOMETRYTYPE:
                case MySqlParser.ST_GEOMFROMTEXT:
                case MySqlParser.ST_GEOMFROMWKB:
                case MySqlParser.ST_INTERIORRINGN:
                case MySqlParser.ST_INTERSECTION:
                case MySqlParser.ST_INTERSECTS:
                case MySqlParser.ST_ISCLOSED:
                case MySqlParser.ST_ISEMPTY:
                case MySqlParser.ST_ISSIMPLE:
                case MySqlParser.ST_LINEFROMTEXT:
                case MySqlParser.ST_LINEFROMWKB:
                case MySqlParser.ST_LINESTRINGFROMTEXT:
                case MySqlParser.ST_LINESTRINGFROMWKB:
                case MySqlParser.ST_NUMGEOMETRIES:
                case MySqlParser.ST_NUMINTERIORRING:
                case MySqlParser.ST_NUMINTERIORRINGS:
                case MySqlParser.ST_NUMPOINTS:
                case MySqlParser.ST_OVERLAPS:
                case MySqlParser.ST_POINTFROMTEXT:
                case MySqlParser.ST_POINTFROMWKB:
                case MySqlParser.ST_POINTN:
                case MySqlParser.ST_POLYFROMTEXT:
                case MySqlParser.ST_POLYFROMWKB:
                case MySqlParser.ST_POLYGONFROMTEXT:
                case MySqlParser.ST_POLYGONFROMWKB:
                case MySqlParser.ST_SRID:
                case MySqlParser.ST_STARTPOINT:
                case MySqlParser.ST_SYMDIFFERENCE:
                case MySqlParser.ST_TOUCHES:
                case MySqlParser.ST_UNION:
                case MySqlParser.ST_WITHIN:
                case MySqlParser.ST_X:
                case MySqlParser.ST_Y:
                case MySqlParser.SUBDATE:
                case MySqlParser.SUBSTRING_INDEX:
                case MySqlParser.SUBTIME:
                case MySqlParser.SYSTEM_USER:
                case MySqlParser.TAN:
                case MySqlParser.TIMEDIFF:
                case MySqlParser.TIMESTAMPADD:
                case MySqlParser.TIMESTAMPDIFF:
                case MySqlParser.TIME_FORMAT:
                case MySqlParser.TIME_TO_SEC:
                case MySqlParser.TOUCHES:
                case MySqlParser.TO_BASE64:
                case MySqlParser.TO_DAYS:
                case MySqlParser.TO_SECONDS:
                case MySqlParser.TP_CONNECTION_ADMIN:
                case MySqlParser.UCASE:
                case MySqlParser.UNCOMPRESS:
                case MySqlParser.UNCOMPRESSED_LENGTH:
                case MySqlParser.UNHEX:
                case MySqlParser.UNIX_TIMESTAMP:
                case MySqlParser.UPDATEXML:
                case MySqlParser.UPPER:
                case MySqlParser.UUID:
                case MySqlParser.UUID_SHORT:
                case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
                case MySqlParser.VERSION:
                case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case MySqlParser.WEEKDAY:
                case MySqlParser.WEEKOFYEAR:
                case MySqlParser.WEIGHT_STRING:
                case MySqlParser.WITHIN:
                case MySqlParser.YEARWEEK:
                case MySqlParser.Y_FUNCTION:
                case MySqlParser.X_FUNCTION:
                case MySqlParser.MOD:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.ID:
                    {
                    this.state = 2894;
                    this.uidList();
                    }
                    break;
                case MySqlParser.ALL:
                    {
                    this.state = 2895;
                    this.match(MySqlParser.ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySqlParser.COALESCE:
                localContext = new AlterByCoalescePartitionContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2898;
                this.match(MySqlParser.COALESCE);
                this.state = 2899;
                this.match(MySqlParser.PARTITION);
                this.state = 2900;
                this.decimalLiteral();
                }
                break;
            case MySqlParser.REORGANIZE:
                localContext = new AlterByReorganizePartitionContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2901;
                this.match(MySqlParser.REORGANIZE);
                this.state = 2902;
                this.match(MySqlParser.PARTITION);
                this.state = 2903;
                this.uidList();
                this.state = 2904;
                this.match(MySqlParser.INTO);
                this.state = 2905;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 2906;
                this.partitionDefinition();
                this.state = 2911;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 2907;
                    this.match(MySqlParser.COMMA);
                    this.state = 2908;
                    this.partitionDefinition();
                    }
                    }
                    this.state = 2913;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2914;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case MySqlParser.EXCHANGE:
                localContext = new AlterByExchangePartitionContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2916;
                this.match(MySqlParser.EXCHANGE);
                this.state = 2917;
                this.match(MySqlParser.PARTITION);
                this.state = 2918;
                this.uid();
                this.state = 2919;
                this.match(MySqlParser.WITH);
                this.state = 2920;
                this.match(MySqlParser.TABLE);
                this.state = 2921;
                this.tableName();
                this.state = 2924;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 192 || _la === 677) {
                    {
                    this.state = 2922;
                    (localContext as AlterByExchangePartitionContext)._validationFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 192 || _la === 677)) {
                        (localContext as AlterByExchangePartitionContext)._validationFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2923;
                    this.match(MySqlParser.VALIDATION);
                    }
                }

                }
                break;
            case MySqlParser.ANALYZE:
                localContext = new AlterByAnalyzePartitionContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2926;
                this.match(MySqlParser.ANALYZE);
                this.state = 2927;
                this.match(MySqlParser.PARTITION);
                this.state = 2930;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ARRAY:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.BUCKETS:
                case MySqlParser.CONDITION:
                case MySqlParser.CURRENT:
                case MySqlParser.CURRENT_USER:
                case MySqlParser.DATABASE:
                case MySqlParser.DEFAULT:
                case MySqlParser.DIAGNOSTICS:
                case MySqlParser.EMPTY:
                case MySqlParser.ENFORCED:
                case MySqlParser.EXCEPT:
                case MySqlParser.GROUP:
                case MySqlParser.IF:
                case MySqlParser.IGNORED:
                case MySqlParser.INSERT:
                case MySqlParser.LATERAL:
                case MySqlParser.LEFT:
                case MySqlParser.NUMBER:
                case MySqlParser.OPTIONAL:
                case MySqlParser.ORDER:
                case MySqlParser.PRIMARY:
                case MySqlParser.REPEAT:
                case MySqlParser.REPLACE:
                case MySqlParser.RIGHT:
                case MySqlParser.SCHEMA:
                case MySqlParser.SKIP_QUERY_REWRITE:
                case MySqlParser.STACKED:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.BINARY:
                case MySqlParser.TEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.JSON_ARRAY:
                case MySqlParser.JSON_ARRAYAGG:
                case MySqlParser.JSON_ARRAY_APPEND:
                case MySqlParser.JSON_ARRAY_INSERT:
                case MySqlParser.JSON_CONTAINS:
                case MySqlParser.JSON_CONTAINS_PATH:
                case MySqlParser.JSON_DEPTH:
                case MySqlParser.JSON_EXTRACT:
                case MySqlParser.JSON_INSERT:
                case MySqlParser.JSON_KEYS:
                case MySqlParser.JSON_LENGTH:
                case MySqlParser.JSON_MERGE:
                case MySqlParser.JSON_MERGE_PATCH:
                case MySqlParser.JSON_MERGE_PRESERVE:
                case MySqlParser.JSON_OBJECT:
                case MySqlParser.JSON_OBJECTAGG:
                case MySqlParser.JSON_OVERLAPS:
                case MySqlParser.JSON_PRETTY:
                case MySqlParser.JSON_QUOTE:
                case MySqlParser.JSON_REMOVE:
                case MySqlParser.JSON_REPLACE:
                case MySqlParser.JSON_SCHEMA_VALID:
                case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
                case MySqlParser.JSON_SEARCH:
                case MySqlParser.JSON_SET:
                case MySqlParser.JSON_STORAGE_FREE:
                case MySqlParser.JSON_STORAGE_SIZE:
                case MySqlParser.JSON_TABLE:
                case MySqlParser.JSON_TYPE:
                case MySqlParser.JSON_UNQUOTE:
                case MySqlParser.JSON_VALID:
                case MySqlParser.JSON_VALUE:
                case MySqlParser.NESTED:
                case MySqlParser.ORDINALITY:
                case MySqlParser.PATH:
                case MySqlParser.AVG:
                case MySqlParser.BIT_AND:
                case MySqlParser.BIT_OR:
                case MySqlParser.BIT_XOR:
                case MySqlParser.COUNT:
                case MySqlParser.CUME_DIST:
                case MySqlParser.DENSE_RANK:
                case MySqlParser.FIRST_VALUE:
                case MySqlParser.GROUP_CONCAT:
                case MySqlParser.LAG:
                case MySqlParser.LAST_VALUE:
                case MySqlParser.LEAD:
                case MySqlParser.MAX:
                case MySqlParser.MIN:
                case MySqlParser.NTILE:
                case MySqlParser.NTH_VALUE:
                case MySqlParser.PERCENT_RANK:
                case MySqlParser.RANK:
                case MySqlParser.ROW_NUMBER:
                case MySqlParser.STD:
                case MySqlParser.STDDEV:
                case MySqlParser.STDDEV_POP:
                case MySqlParser.STDDEV_SAMP:
                case MySqlParser.SUM:
                case MySqlParser.VAR_POP:
                case MySqlParser.VAR_SAMP:
                case MySqlParser.VARIANCE:
                case MySqlParser.CURRENT_DATE:
                case MySqlParser.CURRENT_TIME:
                case MySqlParser.CURRENT_TIMESTAMP:
                case MySqlParser.LOCALTIME:
                case MySqlParser.CURDATE:
                case MySqlParser.CURTIME:
                case MySqlParser.DATE_ADD:
                case MySqlParser.DATE_SUB:
                case MySqlParser.LOCALTIMESTAMP:
                case MySqlParser.NOW:
                case MySqlParser.POSITION:
                case MySqlParser.SUBSTR:
                case MySqlParser.SUBSTRING:
                case MySqlParser.SYSDATE:
                case MySqlParser.TRIM:
                case MySqlParser.UTC_DATE:
                case MySqlParser.UTC_TIME:
                case MySqlParser.UTC_TIMESTAMP:
                case MySqlParser.ACCOUNT:
                case MySqlParser.ACTION:
                case MySqlParser.AFTER:
                case MySqlParser.AGGREGATE:
                case MySqlParser.ALGORITHM:
                case MySqlParser.ANY:
                case MySqlParser.AT:
                case MySqlParser.AUTHORS:
                case MySqlParser.AUTOCOMMIT:
                case MySqlParser.AUTOEXTEND_SIZE:
                case MySqlParser.AUTO_INCREMENT:
                case MySqlParser.AVG_ROW_LENGTH:
                case MySqlParser.BEGIN:
                case MySqlParser.BINLOG:
                case MySqlParser.BIT:
                case MySqlParser.BLOCK:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.BTREE:
                case MySqlParser.CACHE:
                case MySqlParser.CASCADED:
                case MySqlParser.CHAIN:
                case MySqlParser.CHANGED:
                case MySqlParser.CHANNEL:
                case MySqlParser.CHECKSUM:
                case MySqlParser.PAGE_CHECKSUM:
                case MySqlParser.CIPHER:
                case MySqlParser.CLASS_ORIGIN:
                case MySqlParser.CLIENT:
                case MySqlParser.CLOSE:
                case MySqlParser.CLUSTERING:
                case MySqlParser.COALESCE:
                case MySqlParser.CODE:
                case MySqlParser.COLUMNS:
                case MySqlParser.COLUMN_FORMAT:
                case MySqlParser.COLUMN_NAME:
                case MySqlParser.COMMENT:
                case MySqlParser.COMMIT:
                case MySqlParser.COMPACT:
                case MySqlParser.COMPLETION:
                case MySqlParser.COMPRESSED:
                case MySqlParser.COMPRESSION:
                case MySqlParser.CONCURRENT:
                case MySqlParser.CONNECT:
                case MySqlParser.CONNECTION:
                case MySqlParser.CONSISTENT:
                case MySqlParser.CONSTRAINT_CATALOG:
                case MySqlParser.CONSTRAINT_SCHEMA:
                case MySqlParser.CONSTRAINT_NAME:
                case MySqlParser.CONTAINS:
                case MySqlParser.CONTEXT:
                case MySqlParser.CONTRIBUTORS:
                case MySqlParser.COPY:
                case MySqlParser.CPU:
                case MySqlParser.CURSOR_NAME:
                case MySqlParser.DATA:
                case MySqlParser.DATAFILE:
                case MySqlParser.DEALLOCATE:
                case MySqlParser.DEFAULT_AUTH:
                case MySqlParser.DEFINER:
                case MySqlParser.DELAY_KEY_WRITE:
                case MySqlParser.DES_KEY_FILE:
                case MySqlParser.DIRECTORY:
                case MySqlParser.DISABLE:
                case MySqlParser.DISCARD:
                case MySqlParser.DISK:
                case MySqlParser.DO:
                case MySqlParser.DUMPFILE:
                case MySqlParser.DUPLICATE:
                case MySqlParser.DYNAMIC:
                case MySqlParser.ENABLE:
                case MySqlParser.ENCRYPTION:
                case MySqlParser.END:
                case MySqlParser.ENDS:
                case MySqlParser.ENGINE:
                case MySqlParser.ENGINES:
                case MySqlParser.ERROR:
                case MySqlParser.ERRORS:
                case MySqlParser.ESCAPE:
                case MySqlParser.EVEN:
                case MySqlParser.EVENT:
                case MySqlParser.EVENTS:
                case MySqlParser.EVERY:
                case MySqlParser.EXCHANGE:
                case MySqlParser.EXCLUSIVE:
                case MySqlParser.EXPIRE:
                case MySqlParser.EXPORT:
                case MySqlParser.EXTENDED:
                case MySqlParser.EXTENT_SIZE:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.FAST:
                case MySqlParser.FAULTS:
                case MySqlParser.FIELDS:
                case MySqlParser.FILE_BLOCK_SIZE:
                case MySqlParser.FILTER:
                case MySqlParser.FIRST:
                case MySqlParser.FIXED:
                case MySqlParser.FLUSH:
                case MySqlParser.FOLLOWS:
                case MySqlParser.FOUND:
                case MySqlParser.FULL:
                case MySqlParser.FUNCTION:
                case MySqlParser.GENERAL:
                case MySqlParser.GLOBAL:
                case MySqlParser.GRANTS:
                case MySqlParser.GROUP_REPLICATION:
                case MySqlParser.HANDLER:
                case MySqlParser.HASH:
                case MySqlParser.HELP:
                case MySqlParser.HISTORY:
                case MySqlParser.HOST:
                case MySqlParser.HOSTS:
                case MySqlParser.IDENTIFIED:
                case MySqlParser.IGNORE_SERVER_IDS:
                case MySqlParser.IMPORT:
                case MySqlParser.INDEXES:
                case MySqlParser.INITIAL_SIZE:
                case MySqlParser.INPLACE:
                case MySqlParser.INSERT_METHOD:
                case MySqlParser.INSTALL:
                case MySqlParser.INSTANCE:
                case MySqlParser.INSTANT:
                case MySqlParser.INVISIBLE:
                case MySqlParser.INVOKER:
                case MySqlParser.IO:
                case MySqlParser.IO_THREAD:
                case MySqlParser.IPC:
                case MySqlParser.ISOLATION:
                case MySqlParser.ISSUER:
                case MySqlParser.JSON:
                case MySqlParser.KEY_BLOCK_SIZE:
                case MySqlParser.LANGUAGE:
                case MySqlParser.LAST:
                case MySqlParser.LEAVES:
                case MySqlParser.LESS:
                case MySqlParser.LEVEL:
                case MySqlParser.LIST:
                case MySqlParser.LOCAL:
                case MySqlParser.LOGFILE:
                case MySqlParser.LOGS:
                case MySqlParser.MASTER:
                case MySqlParser.MASTER_AUTO_POSITION:
                case MySqlParser.MASTER_CONNECT_RETRY:
                case MySqlParser.MASTER_DELAY:
                case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                case MySqlParser.MASTER_HOST:
                case MySqlParser.MASTER_LOG_FILE:
                case MySqlParser.MASTER_LOG_POS:
                case MySqlParser.MASTER_PASSWORD:
                case MySqlParser.MASTER_PORT:
                case MySqlParser.MASTER_RETRY_COUNT:
                case MySqlParser.MASTER_SSL:
                case MySqlParser.MASTER_SSL_CA:
                case MySqlParser.MASTER_SSL_CAPATH:
                case MySqlParser.MASTER_SSL_CERT:
                case MySqlParser.MASTER_SSL_CIPHER:
                case MySqlParser.MASTER_SSL_CRL:
                case MySqlParser.MASTER_SSL_CRLPATH:
                case MySqlParser.MASTER_SSL_KEY:
                case MySqlParser.MASTER_TLS_VERSION:
                case MySqlParser.MASTER_USER:
                case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                case MySqlParser.MAX_QUERIES_PER_HOUR:
                case MySqlParser.MAX_ROWS:
                case MySqlParser.MAX_SIZE:
                case MySqlParser.MAX_UPDATES_PER_HOUR:
                case MySqlParser.MAX_USER_CONNECTIONS:
                case MySqlParser.MEDIUM:
                case MySqlParser.MEMBER:
                case MySqlParser.MERGE:
                case MySqlParser.MESSAGE_TEXT:
                case MySqlParser.MID:
                case MySqlParser.MIGRATE:
                case MySqlParser.MIN_ROWS:
                case MySqlParser.MODE:
                case MySqlParser.MODIFY:
                case MySqlParser.MUTEX:
                case MySqlParser.MYSQL:
                case MySqlParser.MYSQL_ERRNO:
                case MySqlParser.NAME:
                case MySqlParser.NAMES:
                case MySqlParser.NCHAR:
                case MySqlParser.NEVER:
                case MySqlParser.NEXT:
                case MySqlParser.NO:
                case MySqlParser.NOCOPY:
                case MySqlParser.NOWAIT:
                case MySqlParser.NODEGROUP:
                case MySqlParser.NONE:
                case MySqlParser.ODBC:
                case MySqlParser.OFFLINE:
                case MySqlParser.OFFSET:
                case MySqlParser.OF:
                case MySqlParser.OJ:
                case MySqlParser.OLD_PASSWORD:
                case MySqlParser.ONE:
                case MySqlParser.ONLINE:
                case MySqlParser.ONLY:
                case MySqlParser.OPEN:
                case MySqlParser.OPTIMIZER_COSTS:
                case MySqlParser.OPTIONS:
                case MySqlParser.OWNER:
                case MySqlParser.PACK_KEYS:
                case MySqlParser.PAGE:
                case MySqlParser.PARSER:
                case MySqlParser.PARTIAL:
                case MySqlParser.PARTITIONING:
                case MySqlParser.PARTITIONS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.PHASE:
                case MySqlParser.PLUGIN:
                case MySqlParser.PLUGIN_DIR:
                case MySqlParser.PLUGINS:
                case MySqlParser.PORT:
                case MySqlParser.PRECEDES:
                case MySqlParser.PREPARE:
                case MySqlParser.PRESERVE:
                case MySqlParser.PREV:
                case MySqlParser.PROCESSLIST:
                case MySqlParser.PROFILE:
                case MySqlParser.PROFILES:
                case MySqlParser.PROXY:
                case MySqlParser.QUERY:
                case MySqlParser.QUICK:
                case MySqlParser.REBUILD:
                case MySqlParser.RECOVER:
                case MySqlParser.RECURSIVE:
                case MySqlParser.REDO_BUFFER_SIZE:
                case MySqlParser.REDUNDANT:
                case MySqlParser.RELAY:
                case MySqlParser.RELAY_LOG_FILE:
                case MySqlParser.RELAY_LOG_POS:
                case MySqlParser.RELAYLOG:
                case MySqlParser.REMOVE:
                case MySqlParser.REORGANIZE:
                case MySqlParser.REPAIR:
                case MySqlParser.REPLICATE_DO_DB:
                case MySqlParser.REPLICATE_DO_TABLE:
                case MySqlParser.REPLICATE_IGNORE_DB:
                case MySqlParser.REPLICATE_IGNORE_TABLE:
                case MySqlParser.REPLICATE_REWRITE_DB:
                case MySqlParser.REPLICATE_WILD_DO_TABLE:
                case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                case MySqlParser.REPLICATION:
                case MySqlParser.RESET:
                case MySqlParser.RESUME:
                case MySqlParser.RETURNED_SQLSTATE:
                case MySqlParser.RETURNS:
                case MySqlParser.REUSE:
                case MySqlParser.ROLE:
                case MySqlParser.ROLLBACK:
                case MySqlParser.ROLLUP:
                case MySqlParser.ROTATE:
                case MySqlParser.ROW:
                case MySqlParser.ROWS:
                case MySqlParser.ROW_FORMAT:
                case MySqlParser.RTREE:
                case MySqlParser.SAVEPOINT:
                case MySqlParser.SCHEDULE:
                case MySqlParser.SECURITY:
                case MySqlParser.SERVER:
                case MySqlParser.SESSION:
                case MySqlParser.SHARE:
                case MySqlParser.SHARED:
                case MySqlParser.SIGNED:
                case MySqlParser.SIMPLE:
                case MySqlParser.SLAVE:
                case MySqlParser.SLOW:
                case MySqlParser.SNAPSHOT:
                case MySqlParser.SOCKET:
                case MySqlParser.SOME:
                case MySqlParser.SONAME:
                case MySqlParser.SOUNDS:
                case MySqlParser.SOURCE:
                case MySqlParser.SQL_AFTER_GTIDS:
                case MySqlParser.SQL_AFTER_MTS_GAPS:
                case MySqlParser.SQL_BEFORE_GTIDS:
                case MySqlParser.SQL_BUFFER_RESULT:
                case MySqlParser.SQL_CACHE:
                case MySqlParser.SQL_NO_CACHE:
                case MySqlParser.SQL_THREAD:
                case MySqlParser.START:
                case MySqlParser.STARTS:
                case MySqlParser.STATS_AUTO_RECALC:
                case MySqlParser.STATS_PERSISTENT:
                case MySqlParser.STATS_SAMPLE_PAGES:
                case MySqlParser.STATUS:
                case MySqlParser.STOP:
                case MySqlParser.STORAGE:
                case MySqlParser.STRING:
                case MySqlParser.SUBCLASS_ORIGIN:
                case MySqlParser.SUBJECT:
                case MySqlParser.SUBPARTITION:
                case MySqlParser.SUBPARTITIONS:
                case MySqlParser.SUSPEND:
                case MySqlParser.SWAPS:
                case MySqlParser.SWITCHES:
                case MySqlParser.TABLE_NAME:
                case MySqlParser.TABLESPACE:
                case MySqlParser.TABLE_TYPE:
                case MySqlParser.TEMPORARY:
                case MySqlParser.TEMPTABLE:
                case MySqlParser.THAN:
                case MySqlParser.TRADITIONAL:
                case MySqlParser.TRANSACTION:
                case MySqlParser.TRANSACTIONAL:
                case MySqlParser.TRIGGERS:
                case MySqlParser.TRUNCATE:
                case MySqlParser.UNBOUNDED:
                case MySqlParser.UNDEFINED:
                case MySqlParser.UNDOFILE:
                case MySqlParser.UNDO_BUFFER_SIZE:
                case MySqlParser.UNINSTALL:
                case MySqlParser.UNKNOWN:
                case MySqlParser.UNTIL:
                case MySqlParser.UPGRADE:
                case MySqlParser.USER:
                case MySqlParser.USE_FRM:
                case MySqlParser.USER_RESOURCES:
                case MySqlParser.VALIDATION:
                case MySqlParser.VALUE:
                case MySqlParser.VARIABLES:
                case MySqlParser.VIEW:
                case MySqlParser.VIRTUAL:
                case MySqlParser.VISIBLE:
                case MySqlParser.WAIT:
                case MySqlParser.WARNINGS:
                case MySqlParser.WITHOUT:
                case MySqlParser.WORK:
                case MySqlParser.WRAPPER:
                case MySqlParser.X509:
                case MySqlParser.XA:
                case MySqlParser.XML:
                case MySqlParser.EUR:
                case MySqlParser.USA:
                case MySqlParser.JIS:
                case MySqlParser.ISO:
                case MySqlParser.INTERNAL:
                case MySqlParser.QUARTER:
                case MySqlParser.MONTH:
                case MySqlParser.DAY:
                case MySqlParser.HOUR:
                case MySqlParser.MINUTE:
                case MySqlParser.WEEK:
                case MySqlParser.SECOND:
                case MySqlParser.MICROSECOND:
                case MySqlParser.ADMIN:
                case MySqlParser.AUDIT_ABORT_EXEMPT:
                case MySqlParser.AUDIT_ADMIN:
                case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
                case MySqlParser.BACKUP_ADMIN:
                case MySqlParser.BINLOG_ADMIN:
                case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
                case MySqlParser.CLONE_ADMIN:
                case MySqlParser.CONNECTION_ADMIN:
                case MySqlParser.ENCRYPTION_KEY_ADMIN:
                case MySqlParser.EXECUTE:
                case MySqlParser.FILE:
                case MySqlParser.FIREWALL_ADMIN:
                case MySqlParser.FIREWALL_EXEMPT:
                case MySqlParser.FIREWALL_USER:
                case MySqlParser.GROUP_REPLICATION_ADMIN:
                case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
                case MySqlParser.INVOKE:
                case MySqlParser.LAMBDA:
                case MySqlParser.NDB_STORED_USER:
                case MySqlParser.PASSWORDLESS_USER_ADMIN:
                case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
                case MySqlParser.PRIVILEGES:
                case MySqlParser.PROCESS:
                case MySqlParser.RELOAD:
                case MySqlParser.REPLICATION_APPLIER:
                case MySqlParser.REPLICATION_SLAVE_ADMIN:
                case MySqlParser.RESOURCE_GROUP_ADMIN:
                case MySqlParser.RESOURCE_GROUP_USER:
                case MySqlParser.ROLE_ADMIN:
                case MySqlParser.ROUTINE:
                case MySqlParser.S3:
                case MySqlParser.SESSION_VARIABLES_ADMIN:
                case MySqlParser.SET_USER_ID:
                case MySqlParser.SHOW_ROUTINE:
                case MySqlParser.SHUTDOWN:
                case MySqlParser.SUPER:
                case MySqlParser.SYSTEM_VARIABLES_ADMIN:
                case MySqlParser.TABLES:
                case MySqlParser.TABLE_ENCRYPTION_ADMIN:
                case MySqlParser.VERSION_TOKEN_ADMIN:
                case MySqlParser.XA_RECOVER_ADMIN:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.ARCHIVE:
                case MySqlParser.BLACKHOLE:
                case MySqlParser.CSV:
                case MySqlParser.FEDERATED:
                case MySqlParser.INNODB:
                case MySqlParser.MEMORY:
                case MySqlParser.MRG_MYISAM:
                case MySqlParser.MYISAM:
                case MySqlParser.NDB:
                case MySqlParser.NDBCLUSTER:
                case MySqlParser.PERFORMANCE_SCHEMA:
                case MySqlParser.TOKUDB:
                case MySqlParser.REPEATABLE:
                case MySqlParser.COMMITTED:
                case MySqlParser.UNCOMMITTED:
                case MySqlParser.SERIALIZABLE:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                case MySqlParser.ABS:
                case MySqlParser.ACOS:
                case MySqlParser.ADDDATE:
                case MySqlParser.ADDTIME:
                case MySqlParser.AES_DECRYPT:
                case MySqlParser.AES_ENCRYPT:
                case MySqlParser.AREA:
                case MySqlParser.ASBINARY:
                case MySqlParser.ASIN:
                case MySqlParser.ASTEXT:
                case MySqlParser.ASWKB:
                case MySqlParser.ASWKT:
                case MySqlParser.ASYMMETRIC_DECRYPT:
                case MySqlParser.ASYMMETRIC_DERIVE:
                case MySqlParser.ASYMMETRIC_ENCRYPT:
                case MySqlParser.ASYMMETRIC_SIGN:
                case MySqlParser.ASYMMETRIC_VERIFY:
                case MySqlParser.ATAN:
                case MySqlParser.ATAN2:
                case MySqlParser.BENCHMARK:
                case MySqlParser.BIN:
                case MySqlParser.BIT_COUNT:
                case MySqlParser.BIT_LENGTH:
                case MySqlParser.BUFFER:
                case MySqlParser.CATALOG_NAME:
                case MySqlParser.CEIL:
                case MySqlParser.CEILING:
                case MySqlParser.CENTROID:
                case MySqlParser.CHARACTER_LENGTH:
                case MySqlParser.CHARSET:
                case MySqlParser.CHAR_LENGTH:
                case MySqlParser.COERCIBILITY:
                case MySqlParser.COLLATION:
                case MySqlParser.COMPRESS:
                case MySqlParser.CONCAT:
                case MySqlParser.CONCAT_WS:
                case MySqlParser.CONNECTION_ID:
                case MySqlParser.CONV:
                case MySqlParser.CONVERT_TZ:
                case MySqlParser.COS:
                case MySqlParser.COT:
                case MySqlParser.CRC32:
                case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
                case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
                case MySqlParser.CREATE_DH_PARAMETERS:
                case MySqlParser.CREATE_DIGEST:
                case MySqlParser.CROSSES:
                case MySqlParser.DATEDIFF:
                case MySqlParser.DATE_FORMAT:
                case MySqlParser.DAYNAME:
                case MySqlParser.DAYOFMONTH:
                case MySqlParser.DAYOFWEEK:
                case MySqlParser.DAYOFYEAR:
                case MySqlParser.DECODE:
                case MySqlParser.DEGREES:
                case MySqlParser.DES_DECRYPT:
                case MySqlParser.DES_ENCRYPT:
                case MySqlParser.DIMENSION:
                case MySqlParser.DISJOINT:
                case MySqlParser.ELT:
                case MySqlParser.ENCODE:
                case MySqlParser.ENCRYPT:
                case MySqlParser.ENDPOINT:
                case MySqlParser.ENGINE_ATTRIBUTE:
                case MySqlParser.ENVELOPE:
                case MySqlParser.EQUALS:
                case MySqlParser.EXP:
                case MySqlParser.EXPORT_SET:
                case MySqlParser.EXTERIORRING:
                case MySqlParser.EXTRACTVALUE:
                case MySqlParser.FIELD:
                case MySqlParser.FIND_IN_SET:
                case MySqlParser.FLOOR:
                case MySqlParser.FORMAT:
                case MySqlParser.FOUND_ROWS:
                case MySqlParser.FROM_BASE64:
                case MySqlParser.FROM_DAYS:
                case MySqlParser.FROM_UNIXTIME:
                case MySqlParser.GEOMCOLLFROMTEXT:
                case MySqlParser.GEOMCOLLFROMWKB:
                case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.GEOMETRYFROMTEXT:
                case MySqlParser.GEOMETRYFROMWKB:
                case MySqlParser.GEOMETRYN:
                case MySqlParser.GEOMETRYTYPE:
                case MySqlParser.GEOMFROMTEXT:
                case MySqlParser.GEOMFROMWKB:
                case MySqlParser.GET_FORMAT:
                case MySqlParser.GET_LOCK:
                case MySqlParser.GLENGTH:
                case MySqlParser.GREATEST:
                case MySqlParser.GTID_SUBSET:
                case MySqlParser.GTID_SUBTRACT:
                case MySqlParser.HEX:
                case MySqlParser.IFNULL:
                case MySqlParser.INET6_ATON:
                case MySqlParser.INET6_NTOA:
                case MySqlParser.INET_ATON:
                case MySqlParser.INET_NTOA:
                case MySqlParser.INSTR:
                case MySqlParser.INTERIORRINGN:
                case MySqlParser.INTERSECTS:
                case MySqlParser.ISCLOSED:
                case MySqlParser.ISEMPTY:
                case MySqlParser.ISNULL:
                case MySqlParser.ISSIMPLE:
                case MySqlParser.IS_FREE_LOCK:
                case MySqlParser.IS_IPV4:
                case MySqlParser.IS_IPV4_COMPAT:
                case MySqlParser.IS_IPV4_MAPPED:
                case MySqlParser.IS_IPV6:
                case MySqlParser.IS_USED_LOCK:
                case MySqlParser.LAST_INSERT_ID:
                case MySqlParser.LCASE:
                case MySqlParser.LEAST:
                case MySqlParser.LENGTH:
                case MySqlParser.LINEFROMTEXT:
                case MySqlParser.LINEFROMWKB:
                case MySqlParser.LINESTRINGFROMTEXT:
                case MySqlParser.LINESTRINGFROMWKB:
                case MySqlParser.LN:
                case MySqlParser.LOAD_FILE:
                case MySqlParser.LOCATE:
                case MySqlParser.LOG:
                case MySqlParser.LOG10:
                case MySqlParser.LOG2:
                case MySqlParser.LOWER:
                case MySqlParser.LPAD:
                case MySqlParser.LTRIM:
                case MySqlParser.MAKEDATE:
                case MySqlParser.MAKETIME:
                case MySqlParser.MAKE_SET:
                case MySqlParser.MASTER_POS_WAIT:
                case MySqlParser.MBRCONTAINS:
                case MySqlParser.MBRDISJOINT:
                case MySqlParser.MBREQUAL:
                case MySqlParser.MBRINTERSECTS:
                case MySqlParser.MBROVERLAPS:
                case MySqlParser.MBRTOUCHES:
                case MySqlParser.MBRWITHIN:
                case MySqlParser.MD5:
                case MySqlParser.MLINEFROMTEXT:
                case MySqlParser.MLINEFROMWKB:
                case MySqlParser.MONTHNAME:
                case MySqlParser.MPOINTFROMTEXT:
                case MySqlParser.MPOINTFROMWKB:
                case MySqlParser.MPOLYFROMTEXT:
                case MySqlParser.MPOLYFROMWKB:
                case MySqlParser.MULTILINESTRINGFROMTEXT:
                case MySqlParser.MULTILINESTRINGFROMWKB:
                case MySqlParser.MULTIPOINTFROMTEXT:
                case MySqlParser.MULTIPOINTFROMWKB:
                case MySqlParser.MULTIPOLYGONFROMTEXT:
                case MySqlParser.MULTIPOLYGONFROMWKB:
                case MySqlParser.NAME_CONST:
                case MySqlParser.NULLIF:
                case MySqlParser.NUMGEOMETRIES:
                case MySqlParser.NUMINTERIORRINGS:
                case MySqlParser.NUMPOINTS:
                case MySqlParser.OCT:
                case MySqlParser.OCTET_LENGTH:
                case MySqlParser.ORD:
                case MySqlParser.OVERLAPS:
                case MySqlParser.PERIOD_ADD:
                case MySqlParser.PERIOD_DIFF:
                case MySqlParser.PI:
                case MySqlParser.POINTFROMTEXT:
                case MySqlParser.POINTFROMWKB:
                case MySqlParser.POINTN:
                case MySqlParser.POLYFROMTEXT:
                case MySqlParser.POLYFROMWKB:
                case MySqlParser.POLYGONFROMTEXT:
                case MySqlParser.POLYGONFROMWKB:
                case MySqlParser.POW:
                case MySqlParser.POWER:
                case MySqlParser.QUOTE:
                case MySqlParser.RADIANS:
                case MySqlParser.RAND:
                case MySqlParser.RANDOM:
                case MySqlParser.RANDOM_BYTES:
                case MySqlParser.RELEASE_LOCK:
                case MySqlParser.REVERSE:
                case MySqlParser.ROUND:
                case MySqlParser.ROW_COUNT:
                case MySqlParser.RPAD:
                case MySqlParser.RTRIM:
                case MySqlParser.SEC_TO_TIME:
                case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                case MySqlParser.SESSION_USER:
                case MySqlParser.SHA:
                case MySqlParser.SHA1:
                case MySqlParser.SHA2:
                case MySqlParser.SCHEMA_NAME:
                case MySqlParser.SIGN:
                case MySqlParser.SIN:
                case MySqlParser.SLEEP:
                case MySqlParser.SOUNDEX:
                case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
                case MySqlParser.SQRT:
                case MySqlParser.SRID:
                case MySqlParser.STARTPOINT:
                case MySqlParser.STRCMP:
                case MySqlParser.STR_TO_DATE:
                case MySqlParser.ST_AREA:
                case MySqlParser.ST_ASBINARY:
                case MySqlParser.ST_ASTEXT:
                case MySqlParser.ST_ASWKB:
                case MySqlParser.ST_ASWKT:
                case MySqlParser.ST_BUFFER:
                case MySqlParser.ST_CENTROID:
                case MySqlParser.ST_CONTAINS:
                case MySqlParser.ST_CROSSES:
                case MySqlParser.ST_DIFFERENCE:
                case MySqlParser.ST_DIMENSION:
                case MySqlParser.ST_DISJOINT:
                case MySqlParser.ST_DISTANCE:
                case MySqlParser.ST_ENDPOINT:
                case MySqlParser.ST_ENVELOPE:
                case MySqlParser.ST_EQUALS:
                case MySqlParser.ST_EXTERIORRING:
                case MySqlParser.ST_GEOMCOLLFROMTEXT:
                case MySqlParser.ST_GEOMCOLLFROMTXT:
                case MySqlParser.ST_GEOMCOLLFROMWKB:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.ST_GEOMETRYFROMTEXT:
                case MySqlParser.ST_GEOMETRYFROMWKB:
                case MySqlParser.ST_GEOMETRYN:
                case MySqlParser.ST_GEOMETRYTYPE:
                case MySqlParser.ST_GEOMFROMTEXT:
                case MySqlParser.ST_GEOMFROMWKB:
                case MySqlParser.ST_INTERIORRINGN:
                case MySqlParser.ST_INTERSECTION:
                case MySqlParser.ST_INTERSECTS:
                case MySqlParser.ST_ISCLOSED:
                case MySqlParser.ST_ISEMPTY:
                case MySqlParser.ST_ISSIMPLE:
                case MySqlParser.ST_LINEFROMTEXT:
                case MySqlParser.ST_LINEFROMWKB:
                case MySqlParser.ST_LINESTRINGFROMTEXT:
                case MySqlParser.ST_LINESTRINGFROMWKB:
                case MySqlParser.ST_NUMGEOMETRIES:
                case MySqlParser.ST_NUMINTERIORRING:
                case MySqlParser.ST_NUMINTERIORRINGS:
                case MySqlParser.ST_NUMPOINTS:
                case MySqlParser.ST_OVERLAPS:
                case MySqlParser.ST_POINTFROMTEXT:
                case MySqlParser.ST_POINTFROMWKB:
                case MySqlParser.ST_POINTN:
                case MySqlParser.ST_POLYFROMTEXT:
                case MySqlParser.ST_POLYFROMWKB:
                case MySqlParser.ST_POLYGONFROMTEXT:
                case MySqlParser.ST_POLYGONFROMWKB:
                case MySqlParser.ST_SRID:
                case MySqlParser.ST_STARTPOINT:
                case MySqlParser.ST_SYMDIFFERENCE:
                case MySqlParser.ST_TOUCHES:
                case MySqlParser.ST_UNION:
                case MySqlParser.ST_WITHIN:
                case MySqlParser.ST_X:
                case MySqlParser.ST_Y:
                case MySqlParser.SUBDATE:
                case MySqlParser.SUBSTRING_INDEX:
                case MySqlParser.SUBTIME:
                case MySqlParser.SYSTEM_USER:
                case MySqlParser.TAN:
                case MySqlParser.TIMEDIFF:
                case MySqlParser.TIMESTAMPADD:
                case MySqlParser.TIMESTAMPDIFF:
                case MySqlParser.TIME_FORMAT:
                case MySqlParser.TIME_TO_SEC:
                case MySqlParser.TOUCHES:
                case MySqlParser.TO_BASE64:
                case MySqlParser.TO_DAYS:
                case MySqlParser.TO_SECONDS:
                case MySqlParser.TP_CONNECTION_ADMIN:
                case MySqlParser.UCASE:
                case MySqlParser.UNCOMPRESS:
                case MySqlParser.UNCOMPRESSED_LENGTH:
                case MySqlParser.UNHEX:
                case MySqlParser.UNIX_TIMESTAMP:
                case MySqlParser.UPDATEXML:
                case MySqlParser.UPPER:
                case MySqlParser.UUID:
                case MySqlParser.UUID_SHORT:
                case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
                case MySqlParser.VERSION:
                case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case MySqlParser.WEEKDAY:
                case MySqlParser.WEEKOFYEAR:
                case MySqlParser.WEIGHT_STRING:
                case MySqlParser.WITHIN:
                case MySqlParser.YEARWEEK:
                case MySqlParser.Y_FUNCTION:
                case MySqlParser.X_FUNCTION:
                case MySqlParser.MOD:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.ID:
                    {
                    this.state = 2928;
                    this.uidList();
                    }
                    break;
                case MySqlParser.ALL:
                    {
                    this.state = 2929;
                    this.match(MySqlParser.ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySqlParser.CHECK:
                localContext = new AlterByCheckPartitionContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2932;
                this.match(MySqlParser.CHECK);
                this.state = 2933;
                this.match(MySqlParser.PARTITION);
                this.state = 2936;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ARRAY:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.BUCKETS:
                case MySqlParser.CONDITION:
                case MySqlParser.CURRENT:
                case MySqlParser.CURRENT_USER:
                case MySqlParser.DATABASE:
                case MySqlParser.DEFAULT:
                case MySqlParser.DIAGNOSTICS:
                case MySqlParser.EMPTY:
                case MySqlParser.ENFORCED:
                case MySqlParser.EXCEPT:
                case MySqlParser.GROUP:
                case MySqlParser.IF:
                case MySqlParser.IGNORED:
                case MySqlParser.INSERT:
                case MySqlParser.LATERAL:
                case MySqlParser.LEFT:
                case MySqlParser.NUMBER:
                case MySqlParser.OPTIONAL:
                case MySqlParser.ORDER:
                case MySqlParser.PRIMARY:
                case MySqlParser.REPEAT:
                case MySqlParser.REPLACE:
                case MySqlParser.RIGHT:
                case MySqlParser.SCHEMA:
                case MySqlParser.SKIP_QUERY_REWRITE:
                case MySqlParser.STACKED:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.BINARY:
                case MySqlParser.TEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.JSON_ARRAY:
                case MySqlParser.JSON_ARRAYAGG:
                case MySqlParser.JSON_ARRAY_APPEND:
                case MySqlParser.JSON_ARRAY_INSERT:
                case MySqlParser.JSON_CONTAINS:
                case MySqlParser.JSON_CONTAINS_PATH:
                case MySqlParser.JSON_DEPTH:
                case MySqlParser.JSON_EXTRACT:
                case MySqlParser.JSON_INSERT:
                case MySqlParser.JSON_KEYS:
                case MySqlParser.JSON_LENGTH:
                case MySqlParser.JSON_MERGE:
                case MySqlParser.JSON_MERGE_PATCH:
                case MySqlParser.JSON_MERGE_PRESERVE:
                case MySqlParser.JSON_OBJECT:
                case MySqlParser.JSON_OBJECTAGG:
                case MySqlParser.JSON_OVERLAPS:
                case MySqlParser.JSON_PRETTY:
                case MySqlParser.JSON_QUOTE:
                case MySqlParser.JSON_REMOVE:
                case MySqlParser.JSON_REPLACE:
                case MySqlParser.JSON_SCHEMA_VALID:
                case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
                case MySqlParser.JSON_SEARCH:
                case MySqlParser.JSON_SET:
                case MySqlParser.JSON_STORAGE_FREE:
                case MySqlParser.JSON_STORAGE_SIZE:
                case MySqlParser.JSON_TABLE:
                case MySqlParser.JSON_TYPE:
                case MySqlParser.JSON_UNQUOTE:
                case MySqlParser.JSON_VALID:
                case MySqlParser.JSON_VALUE:
                case MySqlParser.NESTED:
                case MySqlParser.ORDINALITY:
                case MySqlParser.PATH:
                case MySqlParser.AVG:
                case MySqlParser.BIT_AND:
                case MySqlParser.BIT_OR:
                case MySqlParser.BIT_XOR:
                case MySqlParser.COUNT:
                case MySqlParser.CUME_DIST:
                case MySqlParser.DENSE_RANK:
                case MySqlParser.FIRST_VALUE:
                case MySqlParser.GROUP_CONCAT:
                case MySqlParser.LAG:
                case MySqlParser.LAST_VALUE:
                case MySqlParser.LEAD:
                case MySqlParser.MAX:
                case MySqlParser.MIN:
                case MySqlParser.NTILE:
                case MySqlParser.NTH_VALUE:
                case MySqlParser.PERCENT_RANK:
                case MySqlParser.RANK:
                case MySqlParser.ROW_NUMBER:
                case MySqlParser.STD:
                case MySqlParser.STDDEV:
                case MySqlParser.STDDEV_POP:
                case MySqlParser.STDDEV_SAMP:
                case MySqlParser.SUM:
                case MySqlParser.VAR_POP:
                case MySqlParser.VAR_SAMP:
                case MySqlParser.VARIANCE:
                case MySqlParser.CURRENT_DATE:
                case MySqlParser.CURRENT_TIME:
                case MySqlParser.CURRENT_TIMESTAMP:
                case MySqlParser.LOCALTIME:
                case MySqlParser.CURDATE:
                case MySqlParser.CURTIME:
                case MySqlParser.DATE_ADD:
                case MySqlParser.DATE_SUB:
                case MySqlParser.LOCALTIMESTAMP:
                case MySqlParser.NOW:
                case MySqlParser.POSITION:
                case MySqlParser.SUBSTR:
                case MySqlParser.SUBSTRING:
                case MySqlParser.SYSDATE:
                case MySqlParser.TRIM:
                case MySqlParser.UTC_DATE:
                case MySqlParser.UTC_TIME:
                case MySqlParser.UTC_TIMESTAMP:
                case MySqlParser.ACCOUNT:
                case MySqlParser.ACTION:
                case MySqlParser.AFTER:
                case MySqlParser.AGGREGATE:
                case MySqlParser.ALGORITHM:
                case MySqlParser.ANY:
                case MySqlParser.AT:
                case MySqlParser.AUTHORS:
                case MySqlParser.AUTOCOMMIT:
                case MySqlParser.AUTOEXTEND_SIZE:
                case MySqlParser.AUTO_INCREMENT:
                case MySqlParser.AVG_ROW_LENGTH:
                case MySqlParser.BEGIN:
                case MySqlParser.BINLOG:
                case MySqlParser.BIT:
                case MySqlParser.BLOCK:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.BTREE:
                case MySqlParser.CACHE:
                case MySqlParser.CASCADED:
                case MySqlParser.CHAIN:
                case MySqlParser.CHANGED:
                case MySqlParser.CHANNEL:
                case MySqlParser.CHECKSUM:
                case MySqlParser.PAGE_CHECKSUM:
                case MySqlParser.CIPHER:
                case MySqlParser.CLASS_ORIGIN:
                case MySqlParser.CLIENT:
                case MySqlParser.CLOSE:
                case MySqlParser.CLUSTERING:
                case MySqlParser.COALESCE:
                case MySqlParser.CODE:
                case MySqlParser.COLUMNS:
                case MySqlParser.COLUMN_FORMAT:
                case MySqlParser.COLUMN_NAME:
                case MySqlParser.COMMENT:
                case MySqlParser.COMMIT:
                case MySqlParser.COMPACT:
                case MySqlParser.COMPLETION:
                case MySqlParser.COMPRESSED:
                case MySqlParser.COMPRESSION:
                case MySqlParser.CONCURRENT:
                case MySqlParser.CONNECT:
                case MySqlParser.CONNECTION:
                case MySqlParser.CONSISTENT:
                case MySqlParser.CONSTRAINT_CATALOG:
                case MySqlParser.CONSTRAINT_SCHEMA:
                case MySqlParser.CONSTRAINT_NAME:
                case MySqlParser.CONTAINS:
                case MySqlParser.CONTEXT:
                case MySqlParser.CONTRIBUTORS:
                case MySqlParser.COPY:
                case MySqlParser.CPU:
                case MySqlParser.CURSOR_NAME:
                case MySqlParser.DATA:
                case MySqlParser.DATAFILE:
                case MySqlParser.DEALLOCATE:
                case MySqlParser.DEFAULT_AUTH:
                case MySqlParser.DEFINER:
                case MySqlParser.DELAY_KEY_WRITE:
                case MySqlParser.DES_KEY_FILE:
                case MySqlParser.DIRECTORY:
                case MySqlParser.DISABLE:
                case MySqlParser.DISCARD:
                case MySqlParser.DISK:
                case MySqlParser.DO:
                case MySqlParser.DUMPFILE:
                case MySqlParser.DUPLICATE:
                case MySqlParser.DYNAMIC:
                case MySqlParser.ENABLE:
                case MySqlParser.ENCRYPTION:
                case MySqlParser.END:
                case MySqlParser.ENDS:
                case MySqlParser.ENGINE:
                case MySqlParser.ENGINES:
                case MySqlParser.ERROR:
                case MySqlParser.ERRORS:
                case MySqlParser.ESCAPE:
                case MySqlParser.EVEN:
                case MySqlParser.EVENT:
                case MySqlParser.EVENTS:
                case MySqlParser.EVERY:
                case MySqlParser.EXCHANGE:
                case MySqlParser.EXCLUSIVE:
                case MySqlParser.EXPIRE:
                case MySqlParser.EXPORT:
                case MySqlParser.EXTENDED:
                case MySqlParser.EXTENT_SIZE:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.FAST:
                case MySqlParser.FAULTS:
                case MySqlParser.FIELDS:
                case MySqlParser.FILE_BLOCK_SIZE:
                case MySqlParser.FILTER:
                case MySqlParser.FIRST:
                case MySqlParser.FIXED:
                case MySqlParser.FLUSH:
                case MySqlParser.FOLLOWS:
                case MySqlParser.FOUND:
                case MySqlParser.FULL:
                case MySqlParser.FUNCTION:
                case MySqlParser.GENERAL:
                case MySqlParser.GLOBAL:
                case MySqlParser.GRANTS:
                case MySqlParser.GROUP_REPLICATION:
                case MySqlParser.HANDLER:
                case MySqlParser.HASH:
                case MySqlParser.HELP:
                case MySqlParser.HISTORY:
                case MySqlParser.HOST:
                case MySqlParser.HOSTS:
                case MySqlParser.IDENTIFIED:
                case MySqlParser.IGNORE_SERVER_IDS:
                case MySqlParser.IMPORT:
                case MySqlParser.INDEXES:
                case MySqlParser.INITIAL_SIZE:
                case MySqlParser.INPLACE:
                case MySqlParser.INSERT_METHOD:
                case MySqlParser.INSTALL:
                case MySqlParser.INSTANCE:
                case MySqlParser.INSTANT:
                case MySqlParser.INVISIBLE:
                case MySqlParser.INVOKER:
                case MySqlParser.IO:
                case MySqlParser.IO_THREAD:
                case MySqlParser.IPC:
                case MySqlParser.ISOLATION:
                case MySqlParser.ISSUER:
                case MySqlParser.JSON:
                case MySqlParser.KEY_BLOCK_SIZE:
                case MySqlParser.LANGUAGE:
                case MySqlParser.LAST:
                case MySqlParser.LEAVES:
                case MySqlParser.LESS:
                case MySqlParser.LEVEL:
                case MySqlParser.LIST:
                case MySqlParser.LOCAL:
                case MySqlParser.LOGFILE:
                case MySqlParser.LOGS:
                case MySqlParser.MASTER:
                case MySqlParser.MASTER_AUTO_POSITION:
                case MySqlParser.MASTER_CONNECT_RETRY:
                case MySqlParser.MASTER_DELAY:
                case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                case MySqlParser.MASTER_HOST:
                case MySqlParser.MASTER_LOG_FILE:
                case MySqlParser.MASTER_LOG_POS:
                case MySqlParser.MASTER_PASSWORD:
                case MySqlParser.MASTER_PORT:
                case MySqlParser.MASTER_RETRY_COUNT:
                case MySqlParser.MASTER_SSL:
                case MySqlParser.MASTER_SSL_CA:
                case MySqlParser.MASTER_SSL_CAPATH:
                case MySqlParser.MASTER_SSL_CERT:
                case MySqlParser.MASTER_SSL_CIPHER:
                case MySqlParser.MASTER_SSL_CRL:
                case MySqlParser.MASTER_SSL_CRLPATH:
                case MySqlParser.MASTER_SSL_KEY:
                case MySqlParser.MASTER_TLS_VERSION:
                case MySqlParser.MASTER_USER:
                case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                case MySqlParser.MAX_QUERIES_PER_HOUR:
                case MySqlParser.MAX_ROWS:
                case MySqlParser.MAX_SIZE:
                case MySqlParser.MAX_UPDATES_PER_HOUR:
                case MySqlParser.MAX_USER_CONNECTIONS:
                case MySqlParser.MEDIUM:
                case MySqlParser.MEMBER:
                case MySqlParser.MERGE:
                case MySqlParser.MESSAGE_TEXT:
                case MySqlParser.MID:
                case MySqlParser.MIGRATE:
                case MySqlParser.MIN_ROWS:
                case MySqlParser.MODE:
                case MySqlParser.MODIFY:
                case MySqlParser.MUTEX:
                case MySqlParser.MYSQL:
                case MySqlParser.MYSQL_ERRNO:
                case MySqlParser.NAME:
                case MySqlParser.NAMES:
                case MySqlParser.NCHAR:
                case MySqlParser.NEVER:
                case MySqlParser.NEXT:
                case MySqlParser.NO:
                case MySqlParser.NOCOPY:
                case MySqlParser.NOWAIT:
                case MySqlParser.NODEGROUP:
                case MySqlParser.NONE:
                case MySqlParser.ODBC:
                case MySqlParser.OFFLINE:
                case MySqlParser.OFFSET:
                case MySqlParser.OF:
                case MySqlParser.OJ:
                case MySqlParser.OLD_PASSWORD:
                case MySqlParser.ONE:
                case MySqlParser.ONLINE:
                case MySqlParser.ONLY:
                case MySqlParser.OPEN:
                case MySqlParser.OPTIMIZER_COSTS:
                case MySqlParser.OPTIONS:
                case MySqlParser.OWNER:
                case MySqlParser.PACK_KEYS:
                case MySqlParser.PAGE:
                case MySqlParser.PARSER:
                case MySqlParser.PARTIAL:
                case MySqlParser.PARTITIONING:
                case MySqlParser.PARTITIONS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.PHASE:
                case MySqlParser.PLUGIN:
                case MySqlParser.PLUGIN_DIR:
                case MySqlParser.PLUGINS:
                case MySqlParser.PORT:
                case MySqlParser.PRECEDES:
                case MySqlParser.PREPARE:
                case MySqlParser.PRESERVE:
                case MySqlParser.PREV:
                case MySqlParser.PROCESSLIST:
                case MySqlParser.PROFILE:
                case MySqlParser.PROFILES:
                case MySqlParser.PROXY:
                case MySqlParser.QUERY:
                case MySqlParser.QUICK:
                case MySqlParser.REBUILD:
                case MySqlParser.RECOVER:
                case MySqlParser.RECURSIVE:
                case MySqlParser.REDO_BUFFER_SIZE:
                case MySqlParser.REDUNDANT:
                case MySqlParser.RELAY:
                case MySqlParser.RELAY_LOG_FILE:
                case MySqlParser.RELAY_LOG_POS:
                case MySqlParser.RELAYLOG:
                case MySqlParser.REMOVE:
                case MySqlParser.REORGANIZE:
                case MySqlParser.REPAIR:
                case MySqlParser.REPLICATE_DO_DB:
                case MySqlParser.REPLICATE_DO_TABLE:
                case MySqlParser.REPLICATE_IGNORE_DB:
                case MySqlParser.REPLICATE_IGNORE_TABLE:
                case MySqlParser.REPLICATE_REWRITE_DB:
                case MySqlParser.REPLICATE_WILD_DO_TABLE:
                case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                case MySqlParser.REPLICATION:
                case MySqlParser.RESET:
                case MySqlParser.RESUME:
                case MySqlParser.RETURNED_SQLSTATE:
                case MySqlParser.RETURNS:
                case MySqlParser.REUSE:
                case MySqlParser.ROLE:
                case MySqlParser.ROLLBACK:
                case MySqlParser.ROLLUP:
                case MySqlParser.ROTATE:
                case MySqlParser.ROW:
                case MySqlParser.ROWS:
                case MySqlParser.ROW_FORMAT:
                case MySqlParser.RTREE:
                case MySqlParser.SAVEPOINT:
                case MySqlParser.SCHEDULE:
                case MySqlParser.SECURITY:
                case MySqlParser.SERVER:
                case MySqlParser.SESSION:
                case MySqlParser.SHARE:
                case MySqlParser.SHARED:
                case MySqlParser.SIGNED:
                case MySqlParser.SIMPLE:
                case MySqlParser.SLAVE:
                case MySqlParser.SLOW:
                case MySqlParser.SNAPSHOT:
                case MySqlParser.SOCKET:
                case MySqlParser.SOME:
                case MySqlParser.SONAME:
                case MySqlParser.SOUNDS:
                case MySqlParser.SOURCE:
                case MySqlParser.SQL_AFTER_GTIDS:
                case MySqlParser.SQL_AFTER_MTS_GAPS:
                case MySqlParser.SQL_BEFORE_GTIDS:
                case MySqlParser.SQL_BUFFER_RESULT:
                case MySqlParser.SQL_CACHE:
                case MySqlParser.SQL_NO_CACHE:
                case MySqlParser.SQL_THREAD:
                case MySqlParser.START:
                case MySqlParser.STARTS:
                case MySqlParser.STATS_AUTO_RECALC:
                case MySqlParser.STATS_PERSISTENT:
                case MySqlParser.STATS_SAMPLE_PAGES:
                case MySqlParser.STATUS:
                case MySqlParser.STOP:
                case MySqlParser.STORAGE:
                case MySqlParser.STRING:
                case MySqlParser.SUBCLASS_ORIGIN:
                case MySqlParser.SUBJECT:
                case MySqlParser.SUBPARTITION:
                case MySqlParser.SUBPARTITIONS:
                case MySqlParser.SUSPEND:
                case MySqlParser.SWAPS:
                case MySqlParser.SWITCHES:
                case MySqlParser.TABLE_NAME:
                case MySqlParser.TABLESPACE:
                case MySqlParser.TABLE_TYPE:
                case MySqlParser.TEMPORARY:
                case MySqlParser.TEMPTABLE:
                case MySqlParser.THAN:
                case MySqlParser.TRADITIONAL:
                case MySqlParser.TRANSACTION:
                case MySqlParser.TRANSACTIONAL:
                case MySqlParser.TRIGGERS:
                case MySqlParser.TRUNCATE:
                case MySqlParser.UNBOUNDED:
                case MySqlParser.UNDEFINED:
                case MySqlParser.UNDOFILE:
                case MySqlParser.UNDO_BUFFER_SIZE:
                case MySqlParser.UNINSTALL:
                case MySqlParser.UNKNOWN:
                case MySqlParser.UNTIL:
                case MySqlParser.UPGRADE:
                case MySqlParser.USER:
                case MySqlParser.USE_FRM:
                case MySqlParser.USER_RESOURCES:
                case MySqlParser.VALIDATION:
                case MySqlParser.VALUE:
                case MySqlParser.VARIABLES:
                case MySqlParser.VIEW:
                case MySqlParser.VIRTUAL:
                case MySqlParser.VISIBLE:
                case MySqlParser.WAIT:
                case MySqlParser.WARNINGS:
                case MySqlParser.WITHOUT:
                case MySqlParser.WORK:
                case MySqlParser.WRAPPER:
                case MySqlParser.X509:
                case MySqlParser.XA:
                case MySqlParser.XML:
                case MySqlParser.EUR:
                case MySqlParser.USA:
                case MySqlParser.JIS:
                case MySqlParser.ISO:
                case MySqlParser.INTERNAL:
                case MySqlParser.QUARTER:
                case MySqlParser.MONTH:
                case MySqlParser.DAY:
                case MySqlParser.HOUR:
                case MySqlParser.MINUTE:
                case MySqlParser.WEEK:
                case MySqlParser.SECOND:
                case MySqlParser.MICROSECOND:
                case MySqlParser.ADMIN:
                case MySqlParser.AUDIT_ABORT_EXEMPT:
                case MySqlParser.AUDIT_ADMIN:
                case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
                case MySqlParser.BACKUP_ADMIN:
                case MySqlParser.BINLOG_ADMIN:
                case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
                case MySqlParser.CLONE_ADMIN:
                case MySqlParser.CONNECTION_ADMIN:
                case MySqlParser.ENCRYPTION_KEY_ADMIN:
                case MySqlParser.EXECUTE:
                case MySqlParser.FILE:
                case MySqlParser.FIREWALL_ADMIN:
                case MySqlParser.FIREWALL_EXEMPT:
                case MySqlParser.FIREWALL_USER:
                case MySqlParser.GROUP_REPLICATION_ADMIN:
                case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
                case MySqlParser.INVOKE:
                case MySqlParser.LAMBDA:
                case MySqlParser.NDB_STORED_USER:
                case MySqlParser.PASSWORDLESS_USER_ADMIN:
                case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
                case MySqlParser.PRIVILEGES:
                case MySqlParser.PROCESS:
                case MySqlParser.RELOAD:
                case MySqlParser.REPLICATION_APPLIER:
                case MySqlParser.REPLICATION_SLAVE_ADMIN:
                case MySqlParser.RESOURCE_GROUP_ADMIN:
                case MySqlParser.RESOURCE_GROUP_USER:
                case MySqlParser.ROLE_ADMIN:
                case MySqlParser.ROUTINE:
                case MySqlParser.S3:
                case MySqlParser.SESSION_VARIABLES_ADMIN:
                case MySqlParser.SET_USER_ID:
                case MySqlParser.SHOW_ROUTINE:
                case MySqlParser.SHUTDOWN:
                case MySqlParser.SUPER:
                case MySqlParser.SYSTEM_VARIABLES_ADMIN:
                case MySqlParser.TABLES:
                case MySqlParser.TABLE_ENCRYPTION_ADMIN:
                case MySqlParser.VERSION_TOKEN_ADMIN:
                case MySqlParser.XA_RECOVER_ADMIN:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.ARCHIVE:
                case MySqlParser.BLACKHOLE:
                case MySqlParser.CSV:
                case MySqlParser.FEDERATED:
                case MySqlParser.INNODB:
                case MySqlParser.MEMORY:
                case MySqlParser.MRG_MYISAM:
                case MySqlParser.MYISAM:
                case MySqlParser.NDB:
                case MySqlParser.NDBCLUSTER:
                case MySqlParser.PERFORMANCE_SCHEMA:
                case MySqlParser.TOKUDB:
                case MySqlParser.REPEATABLE:
                case MySqlParser.COMMITTED:
                case MySqlParser.UNCOMMITTED:
                case MySqlParser.SERIALIZABLE:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                case MySqlParser.ABS:
                case MySqlParser.ACOS:
                case MySqlParser.ADDDATE:
                case MySqlParser.ADDTIME:
                case MySqlParser.AES_DECRYPT:
                case MySqlParser.AES_ENCRYPT:
                case MySqlParser.AREA:
                case MySqlParser.ASBINARY:
                case MySqlParser.ASIN:
                case MySqlParser.ASTEXT:
                case MySqlParser.ASWKB:
                case MySqlParser.ASWKT:
                case MySqlParser.ASYMMETRIC_DECRYPT:
                case MySqlParser.ASYMMETRIC_DERIVE:
                case MySqlParser.ASYMMETRIC_ENCRYPT:
                case MySqlParser.ASYMMETRIC_SIGN:
                case MySqlParser.ASYMMETRIC_VERIFY:
                case MySqlParser.ATAN:
                case MySqlParser.ATAN2:
                case MySqlParser.BENCHMARK:
                case MySqlParser.BIN:
                case MySqlParser.BIT_COUNT:
                case MySqlParser.BIT_LENGTH:
                case MySqlParser.BUFFER:
                case MySqlParser.CATALOG_NAME:
                case MySqlParser.CEIL:
                case MySqlParser.CEILING:
                case MySqlParser.CENTROID:
                case MySqlParser.CHARACTER_LENGTH:
                case MySqlParser.CHARSET:
                case MySqlParser.CHAR_LENGTH:
                case MySqlParser.COERCIBILITY:
                case MySqlParser.COLLATION:
                case MySqlParser.COMPRESS:
                case MySqlParser.CONCAT:
                case MySqlParser.CONCAT_WS:
                case MySqlParser.CONNECTION_ID:
                case MySqlParser.CONV:
                case MySqlParser.CONVERT_TZ:
                case MySqlParser.COS:
                case MySqlParser.COT:
                case MySqlParser.CRC32:
                case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
                case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
                case MySqlParser.CREATE_DH_PARAMETERS:
                case MySqlParser.CREATE_DIGEST:
                case MySqlParser.CROSSES:
                case MySqlParser.DATEDIFF:
                case MySqlParser.DATE_FORMAT:
                case MySqlParser.DAYNAME:
                case MySqlParser.DAYOFMONTH:
                case MySqlParser.DAYOFWEEK:
                case MySqlParser.DAYOFYEAR:
                case MySqlParser.DECODE:
                case MySqlParser.DEGREES:
                case MySqlParser.DES_DECRYPT:
                case MySqlParser.DES_ENCRYPT:
                case MySqlParser.DIMENSION:
                case MySqlParser.DISJOINT:
                case MySqlParser.ELT:
                case MySqlParser.ENCODE:
                case MySqlParser.ENCRYPT:
                case MySqlParser.ENDPOINT:
                case MySqlParser.ENGINE_ATTRIBUTE:
                case MySqlParser.ENVELOPE:
                case MySqlParser.EQUALS:
                case MySqlParser.EXP:
                case MySqlParser.EXPORT_SET:
                case MySqlParser.EXTERIORRING:
                case MySqlParser.EXTRACTVALUE:
                case MySqlParser.FIELD:
                case MySqlParser.FIND_IN_SET:
                case MySqlParser.FLOOR:
                case MySqlParser.FORMAT:
                case MySqlParser.FOUND_ROWS:
                case MySqlParser.FROM_BASE64:
                case MySqlParser.FROM_DAYS:
                case MySqlParser.FROM_UNIXTIME:
                case MySqlParser.GEOMCOLLFROMTEXT:
                case MySqlParser.GEOMCOLLFROMWKB:
                case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.GEOMETRYFROMTEXT:
                case MySqlParser.GEOMETRYFROMWKB:
                case MySqlParser.GEOMETRYN:
                case MySqlParser.GEOMETRYTYPE:
                case MySqlParser.GEOMFROMTEXT:
                case MySqlParser.GEOMFROMWKB:
                case MySqlParser.GET_FORMAT:
                case MySqlParser.GET_LOCK:
                case MySqlParser.GLENGTH:
                case MySqlParser.GREATEST:
                case MySqlParser.GTID_SUBSET:
                case MySqlParser.GTID_SUBTRACT:
                case MySqlParser.HEX:
                case MySqlParser.IFNULL:
                case MySqlParser.INET6_ATON:
                case MySqlParser.INET6_NTOA:
                case MySqlParser.INET_ATON:
                case MySqlParser.INET_NTOA:
                case MySqlParser.INSTR:
                case MySqlParser.INTERIORRINGN:
                case MySqlParser.INTERSECTS:
                case MySqlParser.ISCLOSED:
                case MySqlParser.ISEMPTY:
                case MySqlParser.ISNULL:
                case MySqlParser.ISSIMPLE:
                case MySqlParser.IS_FREE_LOCK:
                case MySqlParser.IS_IPV4:
                case MySqlParser.IS_IPV4_COMPAT:
                case MySqlParser.IS_IPV4_MAPPED:
                case MySqlParser.IS_IPV6:
                case MySqlParser.IS_USED_LOCK:
                case MySqlParser.LAST_INSERT_ID:
                case MySqlParser.LCASE:
                case MySqlParser.LEAST:
                case MySqlParser.LENGTH:
                case MySqlParser.LINEFROMTEXT:
                case MySqlParser.LINEFROMWKB:
                case MySqlParser.LINESTRINGFROMTEXT:
                case MySqlParser.LINESTRINGFROMWKB:
                case MySqlParser.LN:
                case MySqlParser.LOAD_FILE:
                case MySqlParser.LOCATE:
                case MySqlParser.LOG:
                case MySqlParser.LOG10:
                case MySqlParser.LOG2:
                case MySqlParser.LOWER:
                case MySqlParser.LPAD:
                case MySqlParser.LTRIM:
                case MySqlParser.MAKEDATE:
                case MySqlParser.MAKETIME:
                case MySqlParser.MAKE_SET:
                case MySqlParser.MASTER_POS_WAIT:
                case MySqlParser.MBRCONTAINS:
                case MySqlParser.MBRDISJOINT:
                case MySqlParser.MBREQUAL:
                case MySqlParser.MBRINTERSECTS:
                case MySqlParser.MBROVERLAPS:
                case MySqlParser.MBRTOUCHES:
                case MySqlParser.MBRWITHIN:
                case MySqlParser.MD5:
                case MySqlParser.MLINEFROMTEXT:
                case MySqlParser.MLINEFROMWKB:
                case MySqlParser.MONTHNAME:
                case MySqlParser.MPOINTFROMTEXT:
                case MySqlParser.MPOINTFROMWKB:
                case MySqlParser.MPOLYFROMTEXT:
                case MySqlParser.MPOLYFROMWKB:
                case MySqlParser.MULTILINESTRINGFROMTEXT:
                case MySqlParser.MULTILINESTRINGFROMWKB:
                case MySqlParser.MULTIPOINTFROMTEXT:
                case MySqlParser.MULTIPOINTFROMWKB:
                case MySqlParser.MULTIPOLYGONFROMTEXT:
                case MySqlParser.MULTIPOLYGONFROMWKB:
                case MySqlParser.NAME_CONST:
                case MySqlParser.NULLIF:
                case MySqlParser.NUMGEOMETRIES:
                case MySqlParser.NUMINTERIORRINGS:
                case MySqlParser.NUMPOINTS:
                case MySqlParser.OCT:
                case MySqlParser.OCTET_LENGTH:
                case MySqlParser.ORD:
                case MySqlParser.OVERLAPS:
                case MySqlParser.PERIOD_ADD:
                case MySqlParser.PERIOD_DIFF:
                case MySqlParser.PI:
                case MySqlParser.POINTFROMTEXT:
                case MySqlParser.POINTFROMWKB:
                case MySqlParser.POINTN:
                case MySqlParser.POLYFROMTEXT:
                case MySqlParser.POLYFROMWKB:
                case MySqlParser.POLYGONFROMTEXT:
                case MySqlParser.POLYGONFROMWKB:
                case MySqlParser.POW:
                case MySqlParser.POWER:
                case MySqlParser.QUOTE:
                case MySqlParser.RADIANS:
                case MySqlParser.RAND:
                case MySqlParser.RANDOM:
                case MySqlParser.RANDOM_BYTES:
                case MySqlParser.RELEASE_LOCK:
                case MySqlParser.REVERSE:
                case MySqlParser.ROUND:
                case MySqlParser.ROW_COUNT:
                case MySqlParser.RPAD:
                case MySqlParser.RTRIM:
                case MySqlParser.SEC_TO_TIME:
                case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                case MySqlParser.SESSION_USER:
                case MySqlParser.SHA:
                case MySqlParser.SHA1:
                case MySqlParser.SHA2:
                case MySqlParser.SCHEMA_NAME:
                case MySqlParser.SIGN:
                case MySqlParser.SIN:
                case MySqlParser.SLEEP:
                case MySqlParser.SOUNDEX:
                case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
                case MySqlParser.SQRT:
                case MySqlParser.SRID:
                case MySqlParser.STARTPOINT:
                case MySqlParser.STRCMP:
                case MySqlParser.STR_TO_DATE:
                case MySqlParser.ST_AREA:
                case MySqlParser.ST_ASBINARY:
                case MySqlParser.ST_ASTEXT:
                case MySqlParser.ST_ASWKB:
                case MySqlParser.ST_ASWKT:
                case MySqlParser.ST_BUFFER:
                case MySqlParser.ST_CENTROID:
                case MySqlParser.ST_CONTAINS:
                case MySqlParser.ST_CROSSES:
                case MySqlParser.ST_DIFFERENCE:
                case MySqlParser.ST_DIMENSION:
                case MySqlParser.ST_DISJOINT:
                case MySqlParser.ST_DISTANCE:
                case MySqlParser.ST_ENDPOINT:
                case MySqlParser.ST_ENVELOPE:
                case MySqlParser.ST_EQUALS:
                case MySqlParser.ST_EXTERIORRING:
                case MySqlParser.ST_GEOMCOLLFROMTEXT:
                case MySqlParser.ST_GEOMCOLLFROMTXT:
                case MySqlParser.ST_GEOMCOLLFROMWKB:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.ST_GEOMETRYFROMTEXT:
                case MySqlParser.ST_GEOMETRYFROMWKB:
                case MySqlParser.ST_GEOMETRYN:
                case MySqlParser.ST_GEOMETRYTYPE:
                case MySqlParser.ST_GEOMFROMTEXT:
                case MySqlParser.ST_GEOMFROMWKB:
                case MySqlParser.ST_INTERIORRINGN:
                case MySqlParser.ST_INTERSECTION:
                case MySqlParser.ST_INTERSECTS:
                case MySqlParser.ST_ISCLOSED:
                case MySqlParser.ST_ISEMPTY:
                case MySqlParser.ST_ISSIMPLE:
                case MySqlParser.ST_LINEFROMTEXT:
                case MySqlParser.ST_LINEFROMWKB:
                case MySqlParser.ST_LINESTRINGFROMTEXT:
                case MySqlParser.ST_LINESTRINGFROMWKB:
                case MySqlParser.ST_NUMGEOMETRIES:
                case MySqlParser.ST_NUMINTERIORRING:
                case MySqlParser.ST_NUMINTERIORRINGS:
                case MySqlParser.ST_NUMPOINTS:
                case MySqlParser.ST_OVERLAPS:
                case MySqlParser.ST_POINTFROMTEXT:
                case MySqlParser.ST_POINTFROMWKB:
                case MySqlParser.ST_POINTN:
                case MySqlParser.ST_POLYFROMTEXT:
                case MySqlParser.ST_POLYFROMWKB:
                case MySqlParser.ST_POLYGONFROMTEXT:
                case MySqlParser.ST_POLYGONFROMWKB:
                case MySqlParser.ST_SRID:
                case MySqlParser.ST_STARTPOINT:
                case MySqlParser.ST_SYMDIFFERENCE:
                case MySqlParser.ST_TOUCHES:
                case MySqlParser.ST_UNION:
                case MySqlParser.ST_WITHIN:
                case MySqlParser.ST_X:
                case MySqlParser.ST_Y:
                case MySqlParser.SUBDATE:
                case MySqlParser.SUBSTRING_INDEX:
                case MySqlParser.SUBTIME:
                case MySqlParser.SYSTEM_USER:
                case MySqlParser.TAN:
                case MySqlParser.TIMEDIFF:
                case MySqlParser.TIMESTAMPADD:
                case MySqlParser.TIMESTAMPDIFF:
                case MySqlParser.TIME_FORMAT:
                case MySqlParser.TIME_TO_SEC:
                case MySqlParser.TOUCHES:
                case MySqlParser.TO_BASE64:
                case MySqlParser.TO_DAYS:
                case MySqlParser.TO_SECONDS:
                case MySqlParser.TP_CONNECTION_ADMIN:
                case MySqlParser.UCASE:
                case MySqlParser.UNCOMPRESS:
                case MySqlParser.UNCOMPRESSED_LENGTH:
                case MySqlParser.UNHEX:
                case MySqlParser.UNIX_TIMESTAMP:
                case MySqlParser.UPDATEXML:
                case MySqlParser.UPPER:
                case MySqlParser.UUID:
                case MySqlParser.UUID_SHORT:
                case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
                case MySqlParser.VERSION:
                case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case MySqlParser.WEEKDAY:
                case MySqlParser.WEEKOFYEAR:
                case MySqlParser.WEIGHT_STRING:
                case MySqlParser.WITHIN:
                case MySqlParser.YEARWEEK:
                case MySqlParser.Y_FUNCTION:
                case MySqlParser.X_FUNCTION:
                case MySqlParser.MOD:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.ID:
                    {
                    this.state = 2934;
                    this.uidList();
                    }
                    break;
                case MySqlParser.ALL:
                    {
                    this.state = 2935;
                    this.match(MySqlParser.ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySqlParser.OPTIMIZE:
                localContext = new AlterByOptimizePartitionContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2938;
                this.match(MySqlParser.OPTIMIZE);
                this.state = 2939;
                this.match(MySqlParser.PARTITION);
                this.state = 2942;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ARRAY:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.BUCKETS:
                case MySqlParser.CONDITION:
                case MySqlParser.CURRENT:
                case MySqlParser.CURRENT_USER:
                case MySqlParser.DATABASE:
                case MySqlParser.DEFAULT:
                case MySqlParser.DIAGNOSTICS:
                case MySqlParser.EMPTY:
                case MySqlParser.ENFORCED:
                case MySqlParser.EXCEPT:
                case MySqlParser.GROUP:
                case MySqlParser.IF:
                case MySqlParser.IGNORED:
                case MySqlParser.INSERT:
                case MySqlParser.LATERAL:
                case MySqlParser.LEFT:
                case MySqlParser.NUMBER:
                case MySqlParser.OPTIONAL:
                case MySqlParser.ORDER:
                case MySqlParser.PRIMARY:
                case MySqlParser.REPEAT:
                case MySqlParser.REPLACE:
                case MySqlParser.RIGHT:
                case MySqlParser.SCHEMA:
                case MySqlParser.SKIP_QUERY_REWRITE:
                case MySqlParser.STACKED:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.BINARY:
                case MySqlParser.TEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.JSON_ARRAY:
                case MySqlParser.JSON_ARRAYAGG:
                case MySqlParser.JSON_ARRAY_APPEND:
                case MySqlParser.JSON_ARRAY_INSERT:
                case MySqlParser.JSON_CONTAINS:
                case MySqlParser.JSON_CONTAINS_PATH:
                case MySqlParser.JSON_DEPTH:
                case MySqlParser.JSON_EXTRACT:
                case MySqlParser.JSON_INSERT:
                case MySqlParser.JSON_KEYS:
                case MySqlParser.JSON_LENGTH:
                case MySqlParser.JSON_MERGE:
                case MySqlParser.JSON_MERGE_PATCH:
                case MySqlParser.JSON_MERGE_PRESERVE:
                case MySqlParser.JSON_OBJECT:
                case MySqlParser.JSON_OBJECTAGG:
                case MySqlParser.JSON_OVERLAPS:
                case MySqlParser.JSON_PRETTY:
                case MySqlParser.JSON_QUOTE:
                case MySqlParser.JSON_REMOVE:
                case MySqlParser.JSON_REPLACE:
                case MySqlParser.JSON_SCHEMA_VALID:
                case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
                case MySqlParser.JSON_SEARCH:
                case MySqlParser.JSON_SET:
                case MySqlParser.JSON_STORAGE_FREE:
                case MySqlParser.JSON_STORAGE_SIZE:
                case MySqlParser.JSON_TABLE:
                case MySqlParser.JSON_TYPE:
                case MySqlParser.JSON_UNQUOTE:
                case MySqlParser.JSON_VALID:
                case MySqlParser.JSON_VALUE:
                case MySqlParser.NESTED:
                case MySqlParser.ORDINALITY:
                case MySqlParser.PATH:
                case MySqlParser.AVG:
                case MySqlParser.BIT_AND:
                case MySqlParser.BIT_OR:
                case MySqlParser.BIT_XOR:
                case MySqlParser.COUNT:
                case MySqlParser.CUME_DIST:
                case MySqlParser.DENSE_RANK:
                case MySqlParser.FIRST_VALUE:
                case MySqlParser.GROUP_CONCAT:
                case MySqlParser.LAG:
                case MySqlParser.LAST_VALUE:
                case MySqlParser.LEAD:
                case MySqlParser.MAX:
                case MySqlParser.MIN:
                case MySqlParser.NTILE:
                case MySqlParser.NTH_VALUE:
                case MySqlParser.PERCENT_RANK:
                case MySqlParser.RANK:
                case MySqlParser.ROW_NUMBER:
                case MySqlParser.STD:
                case MySqlParser.STDDEV:
                case MySqlParser.STDDEV_POP:
                case MySqlParser.STDDEV_SAMP:
                case MySqlParser.SUM:
                case MySqlParser.VAR_POP:
                case MySqlParser.VAR_SAMP:
                case MySqlParser.VARIANCE:
                case MySqlParser.CURRENT_DATE:
                case MySqlParser.CURRENT_TIME:
                case MySqlParser.CURRENT_TIMESTAMP:
                case MySqlParser.LOCALTIME:
                case MySqlParser.CURDATE:
                case MySqlParser.CURTIME:
                case MySqlParser.DATE_ADD:
                case MySqlParser.DATE_SUB:
                case MySqlParser.LOCALTIMESTAMP:
                case MySqlParser.NOW:
                case MySqlParser.POSITION:
                case MySqlParser.SUBSTR:
                case MySqlParser.SUBSTRING:
                case MySqlParser.SYSDATE:
                case MySqlParser.TRIM:
                case MySqlParser.UTC_DATE:
                case MySqlParser.UTC_TIME:
                case MySqlParser.UTC_TIMESTAMP:
                case MySqlParser.ACCOUNT:
                case MySqlParser.ACTION:
                case MySqlParser.AFTER:
                case MySqlParser.AGGREGATE:
                case MySqlParser.ALGORITHM:
                case MySqlParser.ANY:
                case MySqlParser.AT:
                case MySqlParser.AUTHORS:
                case MySqlParser.AUTOCOMMIT:
                case MySqlParser.AUTOEXTEND_SIZE:
                case MySqlParser.AUTO_INCREMENT:
                case MySqlParser.AVG_ROW_LENGTH:
                case MySqlParser.BEGIN:
                case MySqlParser.BINLOG:
                case MySqlParser.BIT:
                case MySqlParser.BLOCK:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.BTREE:
                case MySqlParser.CACHE:
                case MySqlParser.CASCADED:
                case MySqlParser.CHAIN:
                case MySqlParser.CHANGED:
                case MySqlParser.CHANNEL:
                case MySqlParser.CHECKSUM:
                case MySqlParser.PAGE_CHECKSUM:
                case MySqlParser.CIPHER:
                case MySqlParser.CLASS_ORIGIN:
                case MySqlParser.CLIENT:
                case MySqlParser.CLOSE:
                case MySqlParser.CLUSTERING:
                case MySqlParser.COALESCE:
                case MySqlParser.CODE:
                case MySqlParser.COLUMNS:
                case MySqlParser.COLUMN_FORMAT:
                case MySqlParser.COLUMN_NAME:
                case MySqlParser.COMMENT:
                case MySqlParser.COMMIT:
                case MySqlParser.COMPACT:
                case MySqlParser.COMPLETION:
                case MySqlParser.COMPRESSED:
                case MySqlParser.COMPRESSION:
                case MySqlParser.CONCURRENT:
                case MySqlParser.CONNECT:
                case MySqlParser.CONNECTION:
                case MySqlParser.CONSISTENT:
                case MySqlParser.CONSTRAINT_CATALOG:
                case MySqlParser.CONSTRAINT_SCHEMA:
                case MySqlParser.CONSTRAINT_NAME:
                case MySqlParser.CONTAINS:
                case MySqlParser.CONTEXT:
                case MySqlParser.CONTRIBUTORS:
                case MySqlParser.COPY:
                case MySqlParser.CPU:
                case MySqlParser.CURSOR_NAME:
                case MySqlParser.DATA:
                case MySqlParser.DATAFILE:
                case MySqlParser.DEALLOCATE:
                case MySqlParser.DEFAULT_AUTH:
                case MySqlParser.DEFINER:
                case MySqlParser.DELAY_KEY_WRITE:
                case MySqlParser.DES_KEY_FILE:
                case MySqlParser.DIRECTORY:
                case MySqlParser.DISABLE:
                case MySqlParser.DISCARD:
                case MySqlParser.DISK:
                case MySqlParser.DO:
                case MySqlParser.DUMPFILE:
                case MySqlParser.DUPLICATE:
                case MySqlParser.DYNAMIC:
                case MySqlParser.ENABLE:
                case MySqlParser.ENCRYPTION:
                case MySqlParser.END:
                case MySqlParser.ENDS:
                case MySqlParser.ENGINE:
                case MySqlParser.ENGINES:
                case MySqlParser.ERROR:
                case MySqlParser.ERRORS:
                case MySqlParser.ESCAPE:
                case MySqlParser.EVEN:
                case MySqlParser.EVENT:
                case MySqlParser.EVENTS:
                case MySqlParser.EVERY:
                case MySqlParser.EXCHANGE:
                case MySqlParser.EXCLUSIVE:
                case MySqlParser.EXPIRE:
                case MySqlParser.EXPORT:
                case MySqlParser.EXTENDED:
                case MySqlParser.EXTENT_SIZE:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.FAST:
                case MySqlParser.FAULTS:
                case MySqlParser.FIELDS:
                case MySqlParser.FILE_BLOCK_SIZE:
                case MySqlParser.FILTER:
                case MySqlParser.FIRST:
                case MySqlParser.FIXED:
                case MySqlParser.FLUSH:
                case MySqlParser.FOLLOWS:
                case MySqlParser.FOUND:
                case MySqlParser.FULL:
                case MySqlParser.FUNCTION:
                case MySqlParser.GENERAL:
                case MySqlParser.GLOBAL:
                case MySqlParser.GRANTS:
                case MySqlParser.GROUP_REPLICATION:
                case MySqlParser.HANDLER:
                case MySqlParser.HASH:
                case MySqlParser.HELP:
                case MySqlParser.HISTORY:
                case MySqlParser.HOST:
                case MySqlParser.HOSTS:
                case MySqlParser.IDENTIFIED:
                case MySqlParser.IGNORE_SERVER_IDS:
                case MySqlParser.IMPORT:
                case MySqlParser.INDEXES:
                case MySqlParser.INITIAL_SIZE:
                case MySqlParser.INPLACE:
                case MySqlParser.INSERT_METHOD:
                case MySqlParser.INSTALL:
                case MySqlParser.INSTANCE:
                case MySqlParser.INSTANT:
                case MySqlParser.INVISIBLE:
                case MySqlParser.INVOKER:
                case MySqlParser.IO:
                case MySqlParser.IO_THREAD:
                case MySqlParser.IPC:
                case MySqlParser.ISOLATION:
                case MySqlParser.ISSUER:
                case MySqlParser.JSON:
                case MySqlParser.KEY_BLOCK_SIZE:
                case MySqlParser.LANGUAGE:
                case MySqlParser.LAST:
                case MySqlParser.LEAVES:
                case MySqlParser.LESS:
                case MySqlParser.LEVEL:
                case MySqlParser.LIST:
                case MySqlParser.LOCAL:
                case MySqlParser.LOGFILE:
                case MySqlParser.LOGS:
                case MySqlParser.MASTER:
                case MySqlParser.MASTER_AUTO_POSITION:
                case MySqlParser.MASTER_CONNECT_RETRY:
                case MySqlParser.MASTER_DELAY:
                case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                case MySqlParser.MASTER_HOST:
                case MySqlParser.MASTER_LOG_FILE:
                case MySqlParser.MASTER_LOG_POS:
                case MySqlParser.MASTER_PASSWORD:
                case MySqlParser.MASTER_PORT:
                case MySqlParser.MASTER_RETRY_COUNT:
                case MySqlParser.MASTER_SSL:
                case MySqlParser.MASTER_SSL_CA:
                case MySqlParser.MASTER_SSL_CAPATH:
                case MySqlParser.MASTER_SSL_CERT:
                case MySqlParser.MASTER_SSL_CIPHER:
                case MySqlParser.MASTER_SSL_CRL:
                case MySqlParser.MASTER_SSL_CRLPATH:
                case MySqlParser.MASTER_SSL_KEY:
                case MySqlParser.MASTER_TLS_VERSION:
                case MySqlParser.MASTER_USER:
                case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                case MySqlParser.MAX_QUERIES_PER_HOUR:
                case MySqlParser.MAX_ROWS:
                case MySqlParser.MAX_SIZE:
                case MySqlParser.MAX_UPDATES_PER_HOUR:
                case MySqlParser.MAX_USER_CONNECTIONS:
                case MySqlParser.MEDIUM:
                case MySqlParser.MEMBER:
                case MySqlParser.MERGE:
                case MySqlParser.MESSAGE_TEXT:
                case MySqlParser.MID:
                case MySqlParser.MIGRATE:
                case MySqlParser.MIN_ROWS:
                case MySqlParser.MODE:
                case MySqlParser.MODIFY:
                case MySqlParser.MUTEX:
                case MySqlParser.MYSQL:
                case MySqlParser.MYSQL_ERRNO:
                case MySqlParser.NAME:
                case MySqlParser.NAMES:
                case MySqlParser.NCHAR:
                case MySqlParser.NEVER:
                case MySqlParser.NEXT:
                case MySqlParser.NO:
                case MySqlParser.NOCOPY:
                case MySqlParser.NOWAIT:
                case MySqlParser.NODEGROUP:
                case MySqlParser.NONE:
                case MySqlParser.ODBC:
                case MySqlParser.OFFLINE:
                case MySqlParser.OFFSET:
                case MySqlParser.OF:
                case MySqlParser.OJ:
                case MySqlParser.OLD_PASSWORD:
                case MySqlParser.ONE:
                case MySqlParser.ONLINE:
                case MySqlParser.ONLY:
                case MySqlParser.OPEN:
                case MySqlParser.OPTIMIZER_COSTS:
                case MySqlParser.OPTIONS:
                case MySqlParser.OWNER:
                case MySqlParser.PACK_KEYS:
                case MySqlParser.PAGE:
                case MySqlParser.PARSER:
                case MySqlParser.PARTIAL:
                case MySqlParser.PARTITIONING:
                case MySqlParser.PARTITIONS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.PHASE:
                case MySqlParser.PLUGIN:
                case MySqlParser.PLUGIN_DIR:
                case MySqlParser.PLUGINS:
                case MySqlParser.PORT:
                case MySqlParser.PRECEDES:
                case MySqlParser.PREPARE:
                case MySqlParser.PRESERVE:
                case MySqlParser.PREV:
                case MySqlParser.PROCESSLIST:
                case MySqlParser.PROFILE:
                case MySqlParser.PROFILES:
                case MySqlParser.PROXY:
                case MySqlParser.QUERY:
                case MySqlParser.QUICK:
                case MySqlParser.REBUILD:
                case MySqlParser.RECOVER:
                case MySqlParser.RECURSIVE:
                case MySqlParser.REDO_BUFFER_SIZE:
                case MySqlParser.REDUNDANT:
                case MySqlParser.RELAY:
                case MySqlParser.RELAY_LOG_FILE:
                case MySqlParser.RELAY_LOG_POS:
                case MySqlParser.RELAYLOG:
                case MySqlParser.REMOVE:
                case MySqlParser.REORGANIZE:
                case MySqlParser.REPAIR:
                case MySqlParser.REPLICATE_DO_DB:
                case MySqlParser.REPLICATE_DO_TABLE:
                case MySqlParser.REPLICATE_IGNORE_DB:
                case MySqlParser.REPLICATE_IGNORE_TABLE:
                case MySqlParser.REPLICATE_REWRITE_DB:
                case MySqlParser.REPLICATE_WILD_DO_TABLE:
                case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                case MySqlParser.REPLICATION:
                case MySqlParser.RESET:
                case MySqlParser.RESUME:
                case MySqlParser.RETURNED_SQLSTATE:
                case MySqlParser.RETURNS:
                case MySqlParser.REUSE:
                case MySqlParser.ROLE:
                case MySqlParser.ROLLBACK:
                case MySqlParser.ROLLUP:
                case MySqlParser.ROTATE:
                case MySqlParser.ROW:
                case MySqlParser.ROWS:
                case MySqlParser.ROW_FORMAT:
                case MySqlParser.RTREE:
                case MySqlParser.SAVEPOINT:
                case MySqlParser.SCHEDULE:
                case MySqlParser.SECURITY:
                case MySqlParser.SERVER:
                case MySqlParser.SESSION:
                case MySqlParser.SHARE:
                case MySqlParser.SHARED:
                case MySqlParser.SIGNED:
                case MySqlParser.SIMPLE:
                case MySqlParser.SLAVE:
                case MySqlParser.SLOW:
                case MySqlParser.SNAPSHOT:
                case MySqlParser.SOCKET:
                case MySqlParser.SOME:
                case MySqlParser.SONAME:
                case MySqlParser.SOUNDS:
                case MySqlParser.SOURCE:
                case MySqlParser.SQL_AFTER_GTIDS:
                case MySqlParser.SQL_AFTER_MTS_GAPS:
                case MySqlParser.SQL_BEFORE_GTIDS:
                case MySqlParser.SQL_BUFFER_RESULT:
                case MySqlParser.SQL_CACHE:
                case MySqlParser.SQL_NO_CACHE:
                case MySqlParser.SQL_THREAD:
                case MySqlParser.START:
                case MySqlParser.STARTS:
                case MySqlParser.STATS_AUTO_RECALC:
                case MySqlParser.STATS_PERSISTENT:
                case MySqlParser.STATS_SAMPLE_PAGES:
                case MySqlParser.STATUS:
                case MySqlParser.STOP:
                case MySqlParser.STORAGE:
                case MySqlParser.STRING:
                case MySqlParser.SUBCLASS_ORIGIN:
                case MySqlParser.SUBJECT:
                case MySqlParser.SUBPARTITION:
                case MySqlParser.SUBPARTITIONS:
                case MySqlParser.SUSPEND:
                case MySqlParser.SWAPS:
                case MySqlParser.SWITCHES:
                case MySqlParser.TABLE_NAME:
                case MySqlParser.TABLESPACE:
                case MySqlParser.TABLE_TYPE:
                case MySqlParser.TEMPORARY:
                case MySqlParser.TEMPTABLE:
                case MySqlParser.THAN:
                case MySqlParser.TRADITIONAL:
                case MySqlParser.TRANSACTION:
                case MySqlParser.TRANSACTIONAL:
                case MySqlParser.TRIGGERS:
                case MySqlParser.TRUNCATE:
                case MySqlParser.UNBOUNDED:
                case MySqlParser.UNDEFINED:
                case MySqlParser.UNDOFILE:
                case MySqlParser.UNDO_BUFFER_SIZE:
                case MySqlParser.UNINSTALL:
                case MySqlParser.UNKNOWN:
                case MySqlParser.UNTIL:
                case MySqlParser.UPGRADE:
                case MySqlParser.USER:
                case MySqlParser.USE_FRM:
                case MySqlParser.USER_RESOURCES:
                case MySqlParser.VALIDATION:
                case MySqlParser.VALUE:
                case MySqlParser.VARIABLES:
                case MySqlParser.VIEW:
                case MySqlParser.VIRTUAL:
                case MySqlParser.VISIBLE:
                case MySqlParser.WAIT:
                case MySqlParser.WARNINGS:
                case MySqlParser.WITHOUT:
                case MySqlParser.WORK:
                case MySqlParser.WRAPPER:
                case MySqlParser.X509:
                case MySqlParser.XA:
                case MySqlParser.XML:
                case MySqlParser.EUR:
                case MySqlParser.USA:
                case MySqlParser.JIS:
                case MySqlParser.ISO:
                case MySqlParser.INTERNAL:
                case MySqlParser.QUARTER:
                case MySqlParser.MONTH:
                case MySqlParser.DAY:
                case MySqlParser.HOUR:
                case MySqlParser.MINUTE:
                case MySqlParser.WEEK:
                case MySqlParser.SECOND:
                case MySqlParser.MICROSECOND:
                case MySqlParser.ADMIN:
                case MySqlParser.AUDIT_ABORT_EXEMPT:
                case MySqlParser.AUDIT_ADMIN:
                case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
                case MySqlParser.BACKUP_ADMIN:
                case MySqlParser.BINLOG_ADMIN:
                case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
                case MySqlParser.CLONE_ADMIN:
                case MySqlParser.CONNECTION_ADMIN:
                case MySqlParser.ENCRYPTION_KEY_ADMIN:
                case MySqlParser.EXECUTE:
                case MySqlParser.FILE:
                case MySqlParser.FIREWALL_ADMIN:
                case MySqlParser.FIREWALL_EXEMPT:
                case MySqlParser.FIREWALL_USER:
                case MySqlParser.GROUP_REPLICATION_ADMIN:
                case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
                case MySqlParser.INVOKE:
                case MySqlParser.LAMBDA:
                case MySqlParser.NDB_STORED_USER:
                case MySqlParser.PASSWORDLESS_USER_ADMIN:
                case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
                case MySqlParser.PRIVILEGES:
                case MySqlParser.PROCESS:
                case MySqlParser.RELOAD:
                case MySqlParser.REPLICATION_APPLIER:
                case MySqlParser.REPLICATION_SLAVE_ADMIN:
                case MySqlParser.RESOURCE_GROUP_ADMIN:
                case MySqlParser.RESOURCE_GROUP_USER:
                case MySqlParser.ROLE_ADMIN:
                case MySqlParser.ROUTINE:
                case MySqlParser.S3:
                case MySqlParser.SESSION_VARIABLES_ADMIN:
                case MySqlParser.SET_USER_ID:
                case MySqlParser.SHOW_ROUTINE:
                case MySqlParser.SHUTDOWN:
                case MySqlParser.SUPER:
                case MySqlParser.SYSTEM_VARIABLES_ADMIN:
                case MySqlParser.TABLES:
                case MySqlParser.TABLE_ENCRYPTION_ADMIN:
                case MySqlParser.VERSION_TOKEN_ADMIN:
                case MySqlParser.XA_RECOVER_ADMIN:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.ARCHIVE:
                case MySqlParser.BLACKHOLE:
                case MySqlParser.CSV:
                case MySqlParser.FEDERATED:
                case MySqlParser.INNODB:
                case MySqlParser.MEMORY:
                case MySqlParser.MRG_MYISAM:
                case MySqlParser.MYISAM:
                case MySqlParser.NDB:
                case MySqlParser.NDBCLUSTER:
                case MySqlParser.PERFORMANCE_SCHEMA:
                case MySqlParser.TOKUDB:
                case MySqlParser.REPEATABLE:
                case MySqlParser.COMMITTED:
                case MySqlParser.UNCOMMITTED:
                case MySqlParser.SERIALIZABLE:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                case MySqlParser.ABS:
                case MySqlParser.ACOS:
                case MySqlParser.ADDDATE:
                case MySqlParser.ADDTIME:
                case MySqlParser.AES_DECRYPT:
                case MySqlParser.AES_ENCRYPT:
                case MySqlParser.AREA:
                case MySqlParser.ASBINARY:
                case MySqlParser.ASIN:
                case MySqlParser.ASTEXT:
                case MySqlParser.ASWKB:
                case MySqlParser.ASWKT:
                case MySqlParser.ASYMMETRIC_DECRYPT:
                case MySqlParser.ASYMMETRIC_DERIVE:
                case MySqlParser.ASYMMETRIC_ENCRYPT:
                case MySqlParser.ASYMMETRIC_SIGN:
                case MySqlParser.ASYMMETRIC_VERIFY:
                case MySqlParser.ATAN:
                case MySqlParser.ATAN2:
                case MySqlParser.BENCHMARK:
                case MySqlParser.BIN:
                case MySqlParser.BIT_COUNT:
                case MySqlParser.BIT_LENGTH:
                case MySqlParser.BUFFER:
                case MySqlParser.CATALOG_NAME:
                case MySqlParser.CEIL:
                case MySqlParser.CEILING:
                case MySqlParser.CENTROID:
                case MySqlParser.CHARACTER_LENGTH:
                case MySqlParser.CHARSET:
                case MySqlParser.CHAR_LENGTH:
                case MySqlParser.COERCIBILITY:
                case MySqlParser.COLLATION:
                case MySqlParser.COMPRESS:
                case MySqlParser.CONCAT:
                case MySqlParser.CONCAT_WS:
                case MySqlParser.CONNECTION_ID:
                case MySqlParser.CONV:
                case MySqlParser.CONVERT_TZ:
                case MySqlParser.COS:
                case MySqlParser.COT:
                case MySqlParser.CRC32:
                case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
                case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
                case MySqlParser.CREATE_DH_PARAMETERS:
                case MySqlParser.CREATE_DIGEST:
                case MySqlParser.CROSSES:
                case MySqlParser.DATEDIFF:
                case MySqlParser.DATE_FORMAT:
                case MySqlParser.DAYNAME:
                case MySqlParser.DAYOFMONTH:
                case MySqlParser.DAYOFWEEK:
                case MySqlParser.DAYOFYEAR:
                case MySqlParser.DECODE:
                case MySqlParser.DEGREES:
                case MySqlParser.DES_DECRYPT:
                case MySqlParser.DES_ENCRYPT:
                case MySqlParser.DIMENSION:
                case MySqlParser.DISJOINT:
                case MySqlParser.ELT:
                case MySqlParser.ENCODE:
                case MySqlParser.ENCRYPT:
                case MySqlParser.ENDPOINT:
                case MySqlParser.ENGINE_ATTRIBUTE:
                case MySqlParser.ENVELOPE:
                case MySqlParser.EQUALS:
                case MySqlParser.EXP:
                case MySqlParser.EXPORT_SET:
                case MySqlParser.EXTERIORRING:
                case MySqlParser.EXTRACTVALUE:
                case MySqlParser.FIELD:
                case MySqlParser.FIND_IN_SET:
                case MySqlParser.FLOOR:
                case MySqlParser.FORMAT:
                case MySqlParser.FOUND_ROWS:
                case MySqlParser.FROM_BASE64:
                case MySqlParser.FROM_DAYS:
                case MySqlParser.FROM_UNIXTIME:
                case MySqlParser.GEOMCOLLFROMTEXT:
                case MySqlParser.GEOMCOLLFROMWKB:
                case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.GEOMETRYFROMTEXT:
                case MySqlParser.GEOMETRYFROMWKB:
                case MySqlParser.GEOMETRYN:
                case MySqlParser.GEOMETRYTYPE:
                case MySqlParser.GEOMFROMTEXT:
                case MySqlParser.GEOMFROMWKB:
                case MySqlParser.GET_FORMAT:
                case MySqlParser.GET_LOCK:
                case MySqlParser.GLENGTH:
                case MySqlParser.GREATEST:
                case MySqlParser.GTID_SUBSET:
                case MySqlParser.GTID_SUBTRACT:
                case MySqlParser.HEX:
                case MySqlParser.IFNULL:
                case MySqlParser.INET6_ATON:
                case MySqlParser.INET6_NTOA:
                case MySqlParser.INET_ATON:
                case MySqlParser.INET_NTOA:
                case MySqlParser.INSTR:
                case MySqlParser.INTERIORRINGN:
                case MySqlParser.INTERSECTS:
                case MySqlParser.ISCLOSED:
                case MySqlParser.ISEMPTY:
                case MySqlParser.ISNULL:
                case MySqlParser.ISSIMPLE:
                case MySqlParser.IS_FREE_LOCK:
                case MySqlParser.IS_IPV4:
                case MySqlParser.IS_IPV4_COMPAT:
                case MySqlParser.IS_IPV4_MAPPED:
                case MySqlParser.IS_IPV6:
                case MySqlParser.IS_USED_LOCK:
                case MySqlParser.LAST_INSERT_ID:
                case MySqlParser.LCASE:
                case MySqlParser.LEAST:
                case MySqlParser.LENGTH:
                case MySqlParser.LINEFROMTEXT:
                case MySqlParser.LINEFROMWKB:
                case MySqlParser.LINESTRINGFROMTEXT:
                case MySqlParser.LINESTRINGFROMWKB:
                case MySqlParser.LN:
                case MySqlParser.LOAD_FILE:
                case MySqlParser.LOCATE:
                case MySqlParser.LOG:
                case MySqlParser.LOG10:
                case MySqlParser.LOG2:
                case MySqlParser.LOWER:
                case MySqlParser.LPAD:
                case MySqlParser.LTRIM:
                case MySqlParser.MAKEDATE:
                case MySqlParser.MAKETIME:
                case MySqlParser.MAKE_SET:
                case MySqlParser.MASTER_POS_WAIT:
                case MySqlParser.MBRCONTAINS:
                case MySqlParser.MBRDISJOINT:
                case MySqlParser.MBREQUAL:
                case MySqlParser.MBRINTERSECTS:
                case MySqlParser.MBROVERLAPS:
                case MySqlParser.MBRTOUCHES:
                case MySqlParser.MBRWITHIN:
                case MySqlParser.MD5:
                case MySqlParser.MLINEFROMTEXT:
                case MySqlParser.MLINEFROMWKB:
                case MySqlParser.MONTHNAME:
                case MySqlParser.MPOINTFROMTEXT:
                case MySqlParser.MPOINTFROMWKB:
                case MySqlParser.MPOLYFROMTEXT:
                case MySqlParser.MPOLYFROMWKB:
                case MySqlParser.MULTILINESTRINGFROMTEXT:
                case MySqlParser.MULTILINESTRINGFROMWKB:
                case MySqlParser.MULTIPOINTFROMTEXT:
                case MySqlParser.MULTIPOINTFROMWKB:
                case MySqlParser.MULTIPOLYGONFROMTEXT:
                case MySqlParser.MULTIPOLYGONFROMWKB:
                case MySqlParser.NAME_CONST:
                case MySqlParser.NULLIF:
                case MySqlParser.NUMGEOMETRIES:
                case MySqlParser.NUMINTERIORRINGS:
                case MySqlParser.NUMPOINTS:
                case MySqlParser.OCT:
                case MySqlParser.OCTET_LENGTH:
                case MySqlParser.ORD:
                case MySqlParser.OVERLAPS:
                case MySqlParser.PERIOD_ADD:
                case MySqlParser.PERIOD_DIFF:
                case MySqlParser.PI:
                case MySqlParser.POINTFROMTEXT:
                case MySqlParser.POINTFROMWKB:
                case MySqlParser.POINTN:
                case MySqlParser.POLYFROMTEXT:
                case MySqlParser.POLYFROMWKB:
                case MySqlParser.POLYGONFROMTEXT:
                case MySqlParser.POLYGONFROMWKB:
                case MySqlParser.POW:
                case MySqlParser.POWER:
                case MySqlParser.QUOTE:
                case MySqlParser.RADIANS:
                case MySqlParser.RAND:
                case MySqlParser.RANDOM:
                case MySqlParser.RANDOM_BYTES:
                case MySqlParser.RELEASE_LOCK:
                case MySqlParser.REVERSE:
                case MySqlParser.ROUND:
                case MySqlParser.ROW_COUNT:
                case MySqlParser.RPAD:
                case MySqlParser.RTRIM:
                case MySqlParser.SEC_TO_TIME:
                case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                case MySqlParser.SESSION_USER:
                case MySqlParser.SHA:
                case MySqlParser.SHA1:
                case MySqlParser.SHA2:
                case MySqlParser.SCHEMA_NAME:
                case MySqlParser.SIGN:
                case MySqlParser.SIN:
                case MySqlParser.SLEEP:
                case MySqlParser.SOUNDEX:
                case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
                case MySqlParser.SQRT:
                case MySqlParser.SRID:
                case MySqlParser.STARTPOINT:
                case MySqlParser.STRCMP:
                case MySqlParser.STR_TO_DATE:
                case MySqlParser.ST_AREA:
                case MySqlParser.ST_ASBINARY:
                case MySqlParser.ST_ASTEXT:
                case MySqlParser.ST_ASWKB:
                case MySqlParser.ST_ASWKT:
                case MySqlParser.ST_BUFFER:
                case MySqlParser.ST_CENTROID:
                case MySqlParser.ST_CONTAINS:
                case MySqlParser.ST_CROSSES:
                case MySqlParser.ST_DIFFERENCE:
                case MySqlParser.ST_DIMENSION:
                case MySqlParser.ST_DISJOINT:
                case MySqlParser.ST_DISTANCE:
                case MySqlParser.ST_ENDPOINT:
                case MySqlParser.ST_ENVELOPE:
                case MySqlParser.ST_EQUALS:
                case MySqlParser.ST_EXTERIORRING:
                case MySqlParser.ST_GEOMCOLLFROMTEXT:
                case MySqlParser.ST_GEOMCOLLFROMTXT:
                case MySqlParser.ST_GEOMCOLLFROMWKB:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.ST_GEOMETRYFROMTEXT:
                case MySqlParser.ST_GEOMETRYFROMWKB:
                case MySqlParser.ST_GEOMETRYN:
                case MySqlParser.ST_GEOMETRYTYPE:
                case MySqlParser.ST_GEOMFROMTEXT:
                case MySqlParser.ST_GEOMFROMWKB:
                case MySqlParser.ST_INTERIORRINGN:
                case MySqlParser.ST_INTERSECTION:
                case MySqlParser.ST_INTERSECTS:
                case MySqlParser.ST_ISCLOSED:
                case MySqlParser.ST_ISEMPTY:
                case MySqlParser.ST_ISSIMPLE:
                case MySqlParser.ST_LINEFROMTEXT:
                case MySqlParser.ST_LINEFROMWKB:
                case MySqlParser.ST_LINESTRINGFROMTEXT:
                case MySqlParser.ST_LINESTRINGFROMWKB:
                case MySqlParser.ST_NUMGEOMETRIES:
                case MySqlParser.ST_NUMINTERIORRING:
                case MySqlParser.ST_NUMINTERIORRINGS:
                case MySqlParser.ST_NUMPOINTS:
                case MySqlParser.ST_OVERLAPS:
                case MySqlParser.ST_POINTFROMTEXT:
                case MySqlParser.ST_POINTFROMWKB:
                case MySqlParser.ST_POINTN:
                case MySqlParser.ST_POLYFROMTEXT:
                case MySqlParser.ST_POLYFROMWKB:
                case MySqlParser.ST_POLYGONFROMTEXT:
                case MySqlParser.ST_POLYGONFROMWKB:
                case MySqlParser.ST_SRID:
                case MySqlParser.ST_STARTPOINT:
                case MySqlParser.ST_SYMDIFFERENCE:
                case MySqlParser.ST_TOUCHES:
                case MySqlParser.ST_UNION:
                case MySqlParser.ST_WITHIN:
                case MySqlParser.ST_X:
                case MySqlParser.ST_Y:
                case MySqlParser.SUBDATE:
                case MySqlParser.SUBSTRING_INDEX:
                case MySqlParser.SUBTIME:
                case MySqlParser.SYSTEM_USER:
                case MySqlParser.TAN:
                case MySqlParser.TIMEDIFF:
                case MySqlParser.TIMESTAMPADD:
                case MySqlParser.TIMESTAMPDIFF:
                case MySqlParser.TIME_FORMAT:
                case MySqlParser.TIME_TO_SEC:
                case MySqlParser.TOUCHES:
                case MySqlParser.TO_BASE64:
                case MySqlParser.TO_DAYS:
                case MySqlParser.TO_SECONDS:
                case MySqlParser.TP_CONNECTION_ADMIN:
                case MySqlParser.UCASE:
                case MySqlParser.UNCOMPRESS:
                case MySqlParser.UNCOMPRESSED_LENGTH:
                case MySqlParser.UNHEX:
                case MySqlParser.UNIX_TIMESTAMP:
                case MySqlParser.UPDATEXML:
                case MySqlParser.UPPER:
                case MySqlParser.UUID:
                case MySqlParser.UUID_SHORT:
                case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
                case MySqlParser.VERSION:
                case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case MySqlParser.WEEKDAY:
                case MySqlParser.WEEKOFYEAR:
                case MySqlParser.WEIGHT_STRING:
                case MySqlParser.WITHIN:
                case MySqlParser.YEARWEEK:
                case MySqlParser.Y_FUNCTION:
                case MySqlParser.X_FUNCTION:
                case MySqlParser.MOD:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.ID:
                    {
                    this.state = 2940;
                    this.uidList();
                    }
                    break;
                case MySqlParser.ALL:
                    {
                    this.state = 2941;
                    this.match(MySqlParser.ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySqlParser.REBUILD:
                localContext = new AlterByRebuildPartitionContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2944;
                this.match(MySqlParser.REBUILD);
                this.state = 2945;
                this.match(MySqlParser.PARTITION);
                this.state = 2948;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ARRAY:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.BUCKETS:
                case MySqlParser.CONDITION:
                case MySqlParser.CURRENT:
                case MySqlParser.CURRENT_USER:
                case MySqlParser.DATABASE:
                case MySqlParser.DEFAULT:
                case MySqlParser.DIAGNOSTICS:
                case MySqlParser.EMPTY:
                case MySqlParser.ENFORCED:
                case MySqlParser.EXCEPT:
                case MySqlParser.GROUP:
                case MySqlParser.IF:
                case MySqlParser.IGNORED:
                case MySqlParser.INSERT:
                case MySqlParser.LATERAL:
                case MySqlParser.LEFT:
                case MySqlParser.NUMBER:
                case MySqlParser.OPTIONAL:
                case MySqlParser.ORDER:
                case MySqlParser.PRIMARY:
                case MySqlParser.REPEAT:
                case MySqlParser.REPLACE:
                case MySqlParser.RIGHT:
                case MySqlParser.SCHEMA:
                case MySqlParser.SKIP_QUERY_REWRITE:
                case MySqlParser.STACKED:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.BINARY:
                case MySqlParser.TEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.JSON_ARRAY:
                case MySqlParser.JSON_ARRAYAGG:
                case MySqlParser.JSON_ARRAY_APPEND:
                case MySqlParser.JSON_ARRAY_INSERT:
                case MySqlParser.JSON_CONTAINS:
                case MySqlParser.JSON_CONTAINS_PATH:
                case MySqlParser.JSON_DEPTH:
                case MySqlParser.JSON_EXTRACT:
                case MySqlParser.JSON_INSERT:
                case MySqlParser.JSON_KEYS:
                case MySqlParser.JSON_LENGTH:
                case MySqlParser.JSON_MERGE:
                case MySqlParser.JSON_MERGE_PATCH:
                case MySqlParser.JSON_MERGE_PRESERVE:
                case MySqlParser.JSON_OBJECT:
                case MySqlParser.JSON_OBJECTAGG:
                case MySqlParser.JSON_OVERLAPS:
                case MySqlParser.JSON_PRETTY:
                case MySqlParser.JSON_QUOTE:
                case MySqlParser.JSON_REMOVE:
                case MySqlParser.JSON_REPLACE:
                case MySqlParser.JSON_SCHEMA_VALID:
                case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
                case MySqlParser.JSON_SEARCH:
                case MySqlParser.JSON_SET:
                case MySqlParser.JSON_STORAGE_FREE:
                case MySqlParser.JSON_STORAGE_SIZE:
                case MySqlParser.JSON_TABLE:
                case MySqlParser.JSON_TYPE:
                case MySqlParser.JSON_UNQUOTE:
                case MySqlParser.JSON_VALID:
                case MySqlParser.JSON_VALUE:
                case MySqlParser.NESTED:
                case MySqlParser.ORDINALITY:
                case MySqlParser.PATH:
                case MySqlParser.AVG:
                case MySqlParser.BIT_AND:
                case MySqlParser.BIT_OR:
                case MySqlParser.BIT_XOR:
                case MySqlParser.COUNT:
                case MySqlParser.CUME_DIST:
                case MySqlParser.DENSE_RANK:
                case MySqlParser.FIRST_VALUE:
                case MySqlParser.GROUP_CONCAT:
                case MySqlParser.LAG:
                case MySqlParser.LAST_VALUE:
                case MySqlParser.LEAD:
                case MySqlParser.MAX:
                case MySqlParser.MIN:
                case MySqlParser.NTILE:
                case MySqlParser.NTH_VALUE:
                case MySqlParser.PERCENT_RANK:
                case MySqlParser.RANK:
                case MySqlParser.ROW_NUMBER:
                case MySqlParser.STD:
                case MySqlParser.STDDEV:
                case MySqlParser.STDDEV_POP:
                case MySqlParser.STDDEV_SAMP:
                case MySqlParser.SUM:
                case MySqlParser.VAR_POP:
                case MySqlParser.VAR_SAMP:
                case MySqlParser.VARIANCE:
                case MySqlParser.CURRENT_DATE:
                case MySqlParser.CURRENT_TIME:
                case MySqlParser.CURRENT_TIMESTAMP:
                case MySqlParser.LOCALTIME:
                case MySqlParser.CURDATE:
                case MySqlParser.CURTIME:
                case MySqlParser.DATE_ADD:
                case MySqlParser.DATE_SUB:
                case MySqlParser.LOCALTIMESTAMP:
                case MySqlParser.NOW:
                case MySqlParser.POSITION:
                case MySqlParser.SUBSTR:
                case MySqlParser.SUBSTRING:
                case MySqlParser.SYSDATE:
                case MySqlParser.TRIM:
                case MySqlParser.UTC_DATE:
                case MySqlParser.UTC_TIME:
                case MySqlParser.UTC_TIMESTAMP:
                case MySqlParser.ACCOUNT:
                case MySqlParser.ACTION:
                case MySqlParser.AFTER:
                case MySqlParser.AGGREGATE:
                case MySqlParser.ALGORITHM:
                case MySqlParser.ANY:
                case MySqlParser.AT:
                case MySqlParser.AUTHORS:
                case MySqlParser.AUTOCOMMIT:
                case MySqlParser.AUTOEXTEND_SIZE:
                case MySqlParser.AUTO_INCREMENT:
                case MySqlParser.AVG_ROW_LENGTH:
                case MySqlParser.BEGIN:
                case MySqlParser.BINLOG:
                case MySqlParser.BIT:
                case MySqlParser.BLOCK:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.BTREE:
                case MySqlParser.CACHE:
                case MySqlParser.CASCADED:
                case MySqlParser.CHAIN:
                case MySqlParser.CHANGED:
                case MySqlParser.CHANNEL:
                case MySqlParser.CHECKSUM:
                case MySqlParser.PAGE_CHECKSUM:
                case MySqlParser.CIPHER:
                case MySqlParser.CLASS_ORIGIN:
                case MySqlParser.CLIENT:
                case MySqlParser.CLOSE:
                case MySqlParser.CLUSTERING:
                case MySqlParser.COALESCE:
                case MySqlParser.CODE:
                case MySqlParser.COLUMNS:
                case MySqlParser.COLUMN_FORMAT:
                case MySqlParser.COLUMN_NAME:
                case MySqlParser.COMMENT:
                case MySqlParser.COMMIT:
                case MySqlParser.COMPACT:
                case MySqlParser.COMPLETION:
                case MySqlParser.COMPRESSED:
                case MySqlParser.COMPRESSION:
                case MySqlParser.CONCURRENT:
                case MySqlParser.CONNECT:
                case MySqlParser.CONNECTION:
                case MySqlParser.CONSISTENT:
                case MySqlParser.CONSTRAINT_CATALOG:
                case MySqlParser.CONSTRAINT_SCHEMA:
                case MySqlParser.CONSTRAINT_NAME:
                case MySqlParser.CONTAINS:
                case MySqlParser.CONTEXT:
                case MySqlParser.CONTRIBUTORS:
                case MySqlParser.COPY:
                case MySqlParser.CPU:
                case MySqlParser.CURSOR_NAME:
                case MySqlParser.DATA:
                case MySqlParser.DATAFILE:
                case MySqlParser.DEALLOCATE:
                case MySqlParser.DEFAULT_AUTH:
                case MySqlParser.DEFINER:
                case MySqlParser.DELAY_KEY_WRITE:
                case MySqlParser.DES_KEY_FILE:
                case MySqlParser.DIRECTORY:
                case MySqlParser.DISABLE:
                case MySqlParser.DISCARD:
                case MySqlParser.DISK:
                case MySqlParser.DO:
                case MySqlParser.DUMPFILE:
                case MySqlParser.DUPLICATE:
                case MySqlParser.DYNAMIC:
                case MySqlParser.ENABLE:
                case MySqlParser.ENCRYPTION:
                case MySqlParser.END:
                case MySqlParser.ENDS:
                case MySqlParser.ENGINE:
                case MySqlParser.ENGINES:
                case MySqlParser.ERROR:
                case MySqlParser.ERRORS:
                case MySqlParser.ESCAPE:
                case MySqlParser.EVEN:
                case MySqlParser.EVENT:
                case MySqlParser.EVENTS:
                case MySqlParser.EVERY:
                case MySqlParser.EXCHANGE:
                case MySqlParser.EXCLUSIVE:
                case MySqlParser.EXPIRE:
                case MySqlParser.EXPORT:
                case MySqlParser.EXTENDED:
                case MySqlParser.EXTENT_SIZE:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.FAST:
                case MySqlParser.FAULTS:
                case MySqlParser.FIELDS:
                case MySqlParser.FILE_BLOCK_SIZE:
                case MySqlParser.FILTER:
                case MySqlParser.FIRST:
                case MySqlParser.FIXED:
                case MySqlParser.FLUSH:
                case MySqlParser.FOLLOWS:
                case MySqlParser.FOUND:
                case MySqlParser.FULL:
                case MySqlParser.FUNCTION:
                case MySqlParser.GENERAL:
                case MySqlParser.GLOBAL:
                case MySqlParser.GRANTS:
                case MySqlParser.GROUP_REPLICATION:
                case MySqlParser.HANDLER:
                case MySqlParser.HASH:
                case MySqlParser.HELP:
                case MySqlParser.HISTORY:
                case MySqlParser.HOST:
                case MySqlParser.HOSTS:
                case MySqlParser.IDENTIFIED:
                case MySqlParser.IGNORE_SERVER_IDS:
                case MySqlParser.IMPORT:
                case MySqlParser.INDEXES:
                case MySqlParser.INITIAL_SIZE:
                case MySqlParser.INPLACE:
                case MySqlParser.INSERT_METHOD:
                case MySqlParser.INSTALL:
                case MySqlParser.INSTANCE:
                case MySqlParser.INSTANT:
                case MySqlParser.INVISIBLE:
                case MySqlParser.INVOKER:
                case MySqlParser.IO:
                case MySqlParser.IO_THREAD:
                case MySqlParser.IPC:
                case MySqlParser.ISOLATION:
                case MySqlParser.ISSUER:
                case MySqlParser.JSON:
                case MySqlParser.KEY_BLOCK_SIZE:
                case MySqlParser.LANGUAGE:
                case MySqlParser.LAST:
                case MySqlParser.LEAVES:
                case MySqlParser.LESS:
                case MySqlParser.LEVEL:
                case MySqlParser.LIST:
                case MySqlParser.LOCAL:
                case MySqlParser.LOGFILE:
                case MySqlParser.LOGS:
                case MySqlParser.MASTER:
                case MySqlParser.MASTER_AUTO_POSITION:
                case MySqlParser.MASTER_CONNECT_RETRY:
                case MySqlParser.MASTER_DELAY:
                case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                case MySqlParser.MASTER_HOST:
                case MySqlParser.MASTER_LOG_FILE:
                case MySqlParser.MASTER_LOG_POS:
                case MySqlParser.MASTER_PASSWORD:
                case MySqlParser.MASTER_PORT:
                case MySqlParser.MASTER_RETRY_COUNT:
                case MySqlParser.MASTER_SSL:
                case MySqlParser.MASTER_SSL_CA:
                case MySqlParser.MASTER_SSL_CAPATH:
                case MySqlParser.MASTER_SSL_CERT:
                case MySqlParser.MASTER_SSL_CIPHER:
                case MySqlParser.MASTER_SSL_CRL:
                case MySqlParser.MASTER_SSL_CRLPATH:
                case MySqlParser.MASTER_SSL_KEY:
                case MySqlParser.MASTER_TLS_VERSION:
                case MySqlParser.MASTER_USER:
                case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                case MySqlParser.MAX_QUERIES_PER_HOUR:
                case MySqlParser.MAX_ROWS:
                case MySqlParser.MAX_SIZE:
                case MySqlParser.MAX_UPDATES_PER_HOUR:
                case MySqlParser.MAX_USER_CONNECTIONS:
                case MySqlParser.MEDIUM:
                case MySqlParser.MEMBER:
                case MySqlParser.MERGE:
                case MySqlParser.MESSAGE_TEXT:
                case MySqlParser.MID:
                case MySqlParser.MIGRATE:
                case MySqlParser.MIN_ROWS:
                case MySqlParser.MODE:
                case MySqlParser.MODIFY:
                case MySqlParser.MUTEX:
                case MySqlParser.MYSQL:
                case MySqlParser.MYSQL_ERRNO:
                case MySqlParser.NAME:
                case MySqlParser.NAMES:
                case MySqlParser.NCHAR:
                case MySqlParser.NEVER:
                case MySqlParser.NEXT:
                case MySqlParser.NO:
                case MySqlParser.NOCOPY:
                case MySqlParser.NOWAIT:
                case MySqlParser.NODEGROUP:
                case MySqlParser.NONE:
                case MySqlParser.ODBC:
                case MySqlParser.OFFLINE:
                case MySqlParser.OFFSET:
                case MySqlParser.OF:
                case MySqlParser.OJ:
                case MySqlParser.OLD_PASSWORD:
                case MySqlParser.ONE:
                case MySqlParser.ONLINE:
                case MySqlParser.ONLY:
                case MySqlParser.OPEN:
                case MySqlParser.OPTIMIZER_COSTS:
                case MySqlParser.OPTIONS:
                case MySqlParser.OWNER:
                case MySqlParser.PACK_KEYS:
                case MySqlParser.PAGE:
                case MySqlParser.PARSER:
                case MySqlParser.PARTIAL:
                case MySqlParser.PARTITIONING:
                case MySqlParser.PARTITIONS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.PHASE:
                case MySqlParser.PLUGIN:
                case MySqlParser.PLUGIN_DIR:
                case MySqlParser.PLUGINS:
                case MySqlParser.PORT:
                case MySqlParser.PRECEDES:
                case MySqlParser.PREPARE:
                case MySqlParser.PRESERVE:
                case MySqlParser.PREV:
                case MySqlParser.PROCESSLIST:
                case MySqlParser.PROFILE:
                case MySqlParser.PROFILES:
                case MySqlParser.PROXY:
                case MySqlParser.QUERY:
                case MySqlParser.QUICK:
                case MySqlParser.REBUILD:
                case MySqlParser.RECOVER:
                case MySqlParser.RECURSIVE:
                case MySqlParser.REDO_BUFFER_SIZE:
                case MySqlParser.REDUNDANT:
                case MySqlParser.RELAY:
                case MySqlParser.RELAY_LOG_FILE:
                case MySqlParser.RELAY_LOG_POS:
                case MySqlParser.RELAYLOG:
                case MySqlParser.REMOVE:
                case MySqlParser.REORGANIZE:
                case MySqlParser.REPAIR:
                case MySqlParser.REPLICATE_DO_DB:
                case MySqlParser.REPLICATE_DO_TABLE:
                case MySqlParser.REPLICATE_IGNORE_DB:
                case MySqlParser.REPLICATE_IGNORE_TABLE:
                case MySqlParser.REPLICATE_REWRITE_DB:
                case MySqlParser.REPLICATE_WILD_DO_TABLE:
                case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                case MySqlParser.REPLICATION:
                case MySqlParser.RESET:
                case MySqlParser.RESUME:
                case MySqlParser.RETURNED_SQLSTATE:
                case MySqlParser.RETURNS:
                case MySqlParser.REUSE:
                case MySqlParser.ROLE:
                case MySqlParser.ROLLBACK:
                case MySqlParser.ROLLUP:
                case MySqlParser.ROTATE:
                case MySqlParser.ROW:
                case MySqlParser.ROWS:
                case MySqlParser.ROW_FORMAT:
                case MySqlParser.RTREE:
                case MySqlParser.SAVEPOINT:
                case MySqlParser.SCHEDULE:
                case MySqlParser.SECURITY:
                case MySqlParser.SERVER:
                case MySqlParser.SESSION:
                case MySqlParser.SHARE:
                case MySqlParser.SHARED:
                case MySqlParser.SIGNED:
                case MySqlParser.SIMPLE:
                case MySqlParser.SLAVE:
                case MySqlParser.SLOW:
                case MySqlParser.SNAPSHOT:
                case MySqlParser.SOCKET:
                case MySqlParser.SOME:
                case MySqlParser.SONAME:
                case MySqlParser.SOUNDS:
                case MySqlParser.SOURCE:
                case MySqlParser.SQL_AFTER_GTIDS:
                case MySqlParser.SQL_AFTER_MTS_GAPS:
                case MySqlParser.SQL_BEFORE_GTIDS:
                case MySqlParser.SQL_BUFFER_RESULT:
                case MySqlParser.SQL_CACHE:
                case MySqlParser.SQL_NO_CACHE:
                case MySqlParser.SQL_THREAD:
                case MySqlParser.START:
                case MySqlParser.STARTS:
                case MySqlParser.STATS_AUTO_RECALC:
                case MySqlParser.STATS_PERSISTENT:
                case MySqlParser.STATS_SAMPLE_PAGES:
                case MySqlParser.STATUS:
                case MySqlParser.STOP:
                case MySqlParser.STORAGE:
                case MySqlParser.STRING:
                case MySqlParser.SUBCLASS_ORIGIN:
                case MySqlParser.SUBJECT:
                case MySqlParser.SUBPARTITION:
                case MySqlParser.SUBPARTITIONS:
                case MySqlParser.SUSPEND:
                case MySqlParser.SWAPS:
                case MySqlParser.SWITCHES:
                case MySqlParser.TABLE_NAME:
                case MySqlParser.TABLESPACE:
                case MySqlParser.TABLE_TYPE:
                case MySqlParser.TEMPORARY:
                case MySqlParser.TEMPTABLE:
                case MySqlParser.THAN:
                case MySqlParser.TRADITIONAL:
                case MySqlParser.TRANSACTION:
                case MySqlParser.TRANSACTIONAL:
                case MySqlParser.TRIGGERS:
                case MySqlParser.TRUNCATE:
                case MySqlParser.UNBOUNDED:
                case MySqlParser.UNDEFINED:
                case MySqlParser.UNDOFILE:
                case MySqlParser.UNDO_BUFFER_SIZE:
                case MySqlParser.UNINSTALL:
                case MySqlParser.UNKNOWN:
                case MySqlParser.UNTIL:
                case MySqlParser.UPGRADE:
                case MySqlParser.USER:
                case MySqlParser.USE_FRM:
                case MySqlParser.USER_RESOURCES:
                case MySqlParser.VALIDATION:
                case MySqlParser.VALUE:
                case MySqlParser.VARIABLES:
                case MySqlParser.VIEW:
                case MySqlParser.VIRTUAL:
                case MySqlParser.VISIBLE:
                case MySqlParser.WAIT:
                case MySqlParser.WARNINGS:
                case MySqlParser.WITHOUT:
                case MySqlParser.WORK:
                case MySqlParser.WRAPPER:
                case MySqlParser.X509:
                case MySqlParser.XA:
                case MySqlParser.XML:
                case MySqlParser.EUR:
                case MySqlParser.USA:
                case MySqlParser.JIS:
                case MySqlParser.ISO:
                case MySqlParser.INTERNAL:
                case MySqlParser.QUARTER:
                case MySqlParser.MONTH:
                case MySqlParser.DAY:
                case MySqlParser.HOUR:
                case MySqlParser.MINUTE:
                case MySqlParser.WEEK:
                case MySqlParser.SECOND:
                case MySqlParser.MICROSECOND:
                case MySqlParser.ADMIN:
                case MySqlParser.AUDIT_ABORT_EXEMPT:
                case MySqlParser.AUDIT_ADMIN:
                case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
                case MySqlParser.BACKUP_ADMIN:
                case MySqlParser.BINLOG_ADMIN:
                case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
                case MySqlParser.CLONE_ADMIN:
                case MySqlParser.CONNECTION_ADMIN:
                case MySqlParser.ENCRYPTION_KEY_ADMIN:
                case MySqlParser.EXECUTE:
                case MySqlParser.FILE:
                case MySqlParser.FIREWALL_ADMIN:
                case MySqlParser.FIREWALL_EXEMPT:
                case MySqlParser.FIREWALL_USER:
                case MySqlParser.GROUP_REPLICATION_ADMIN:
                case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
                case MySqlParser.INVOKE:
                case MySqlParser.LAMBDA:
                case MySqlParser.NDB_STORED_USER:
                case MySqlParser.PASSWORDLESS_USER_ADMIN:
                case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
                case MySqlParser.PRIVILEGES:
                case MySqlParser.PROCESS:
                case MySqlParser.RELOAD:
                case MySqlParser.REPLICATION_APPLIER:
                case MySqlParser.REPLICATION_SLAVE_ADMIN:
                case MySqlParser.RESOURCE_GROUP_ADMIN:
                case MySqlParser.RESOURCE_GROUP_USER:
                case MySqlParser.ROLE_ADMIN:
                case MySqlParser.ROUTINE:
                case MySqlParser.S3:
                case MySqlParser.SESSION_VARIABLES_ADMIN:
                case MySqlParser.SET_USER_ID:
                case MySqlParser.SHOW_ROUTINE:
                case MySqlParser.SHUTDOWN:
                case MySqlParser.SUPER:
                case MySqlParser.SYSTEM_VARIABLES_ADMIN:
                case MySqlParser.TABLES:
                case MySqlParser.TABLE_ENCRYPTION_ADMIN:
                case MySqlParser.VERSION_TOKEN_ADMIN:
                case MySqlParser.XA_RECOVER_ADMIN:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.ARCHIVE:
                case MySqlParser.BLACKHOLE:
                case MySqlParser.CSV:
                case MySqlParser.FEDERATED:
                case MySqlParser.INNODB:
                case MySqlParser.MEMORY:
                case MySqlParser.MRG_MYISAM:
                case MySqlParser.MYISAM:
                case MySqlParser.NDB:
                case MySqlParser.NDBCLUSTER:
                case MySqlParser.PERFORMANCE_SCHEMA:
                case MySqlParser.TOKUDB:
                case MySqlParser.REPEATABLE:
                case MySqlParser.COMMITTED:
                case MySqlParser.UNCOMMITTED:
                case MySqlParser.SERIALIZABLE:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                case MySqlParser.ABS:
                case MySqlParser.ACOS:
                case MySqlParser.ADDDATE:
                case MySqlParser.ADDTIME:
                case MySqlParser.AES_DECRYPT:
                case MySqlParser.AES_ENCRYPT:
                case MySqlParser.AREA:
                case MySqlParser.ASBINARY:
                case MySqlParser.ASIN:
                case MySqlParser.ASTEXT:
                case MySqlParser.ASWKB:
                case MySqlParser.ASWKT:
                case MySqlParser.ASYMMETRIC_DECRYPT:
                case MySqlParser.ASYMMETRIC_DERIVE:
                case MySqlParser.ASYMMETRIC_ENCRYPT:
                case MySqlParser.ASYMMETRIC_SIGN:
                case MySqlParser.ASYMMETRIC_VERIFY:
                case MySqlParser.ATAN:
                case MySqlParser.ATAN2:
                case MySqlParser.BENCHMARK:
                case MySqlParser.BIN:
                case MySqlParser.BIT_COUNT:
                case MySqlParser.BIT_LENGTH:
                case MySqlParser.BUFFER:
                case MySqlParser.CATALOG_NAME:
                case MySqlParser.CEIL:
                case MySqlParser.CEILING:
                case MySqlParser.CENTROID:
                case MySqlParser.CHARACTER_LENGTH:
                case MySqlParser.CHARSET:
                case MySqlParser.CHAR_LENGTH:
                case MySqlParser.COERCIBILITY:
                case MySqlParser.COLLATION:
                case MySqlParser.COMPRESS:
                case MySqlParser.CONCAT:
                case MySqlParser.CONCAT_WS:
                case MySqlParser.CONNECTION_ID:
                case MySqlParser.CONV:
                case MySqlParser.CONVERT_TZ:
                case MySqlParser.COS:
                case MySqlParser.COT:
                case MySqlParser.CRC32:
                case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
                case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
                case MySqlParser.CREATE_DH_PARAMETERS:
                case MySqlParser.CREATE_DIGEST:
                case MySqlParser.CROSSES:
                case MySqlParser.DATEDIFF:
                case MySqlParser.DATE_FORMAT:
                case MySqlParser.DAYNAME:
                case MySqlParser.DAYOFMONTH:
                case MySqlParser.DAYOFWEEK:
                case MySqlParser.DAYOFYEAR:
                case MySqlParser.DECODE:
                case MySqlParser.DEGREES:
                case MySqlParser.DES_DECRYPT:
                case MySqlParser.DES_ENCRYPT:
                case MySqlParser.DIMENSION:
                case MySqlParser.DISJOINT:
                case MySqlParser.ELT:
                case MySqlParser.ENCODE:
                case MySqlParser.ENCRYPT:
                case MySqlParser.ENDPOINT:
                case MySqlParser.ENGINE_ATTRIBUTE:
                case MySqlParser.ENVELOPE:
                case MySqlParser.EQUALS:
                case MySqlParser.EXP:
                case MySqlParser.EXPORT_SET:
                case MySqlParser.EXTERIORRING:
                case MySqlParser.EXTRACTVALUE:
                case MySqlParser.FIELD:
                case MySqlParser.FIND_IN_SET:
                case MySqlParser.FLOOR:
                case MySqlParser.FORMAT:
                case MySqlParser.FOUND_ROWS:
                case MySqlParser.FROM_BASE64:
                case MySqlParser.FROM_DAYS:
                case MySqlParser.FROM_UNIXTIME:
                case MySqlParser.GEOMCOLLFROMTEXT:
                case MySqlParser.GEOMCOLLFROMWKB:
                case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.GEOMETRYFROMTEXT:
                case MySqlParser.GEOMETRYFROMWKB:
                case MySqlParser.GEOMETRYN:
                case MySqlParser.GEOMETRYTYPE:
                case MySqlParser.GEOMFROMTEXT:
                case MySqlParser.GEOMFROMWKB:
                case MySqlParser.GET_FORMAT:
                case MySqlParser.GET_LOCK:
                case MySqlParser.GLENGTH:
                case MySqlParser.GREATEST:
                case MySqlParser.GTID_SUBSET:
                case MySqlParser.GTID_SUBTRACT:
                case MySqlParser.HEX:
                case MySqlParser.IFNULL:
                case MySqlParser.INET6_ATON:
                case MySqlParser.INET6_NTOA:
                case MySqlParser.INET_ATON:
                case MySqlParser.INET_NTOA:
                case MySqlParser.INSTR:
                case MySqlParser.INTERIORRINGN:
                case MySqlParser.INTERSECTS:
                case MySqlParser.ISCLOSED:
                case MySqlParser.ISEMPTY:
                case MySqlParser.ISNULL:
                case MySqlParser.ISSIMPLE:
                case MySqlParser.IS_FREE_LOCK:
                case MySqlParser.IS_IPV4:
                case MySqlParser.IS_IPV4_COMPAT:
                case MySqlParser.IS_IPV4_MAPPED:
                case MySqlParser.IS_IPV6:
                case MySqlParser.IS_USED_LOCK:
                case MySqlParser.LAST_INSERT_ID:
                case MySqlParser.LCASE:
                case MySqlParser.LEAST:
                case MySqlParser.LENGTH:
                case MySqlParser.LINEFROMTEXT:
                case MySqlParser.LINEFROMWKB:
                case MySqlParser.LINESTRINGFROMTEXT:
                case MySqlParser.LINESTRINGFROMWKB:
                case MySqlParser.LN:
                case MySqlParser.LOAD_FILE:
                case MySqlParser.LOCATE:
                case MySqlParser.LOG:
                case MySqlParser.LOG10:
                case MySqlParser.LOG2:
                case MySqlParser.LOWER:
                case MySqlParser.LPAD:
                case MySqlParser.LTRIM:
                case MySqlParser.MAKEDATE:
                case MySqlParser.MAKETIME:
                case MySqlParser.MAKE_SET:
                case MySqlParser.MASTER_POS_WAIT:
                case MySqlParser.MBRCONTAINS:
                case MySqlParser.MBRDISJOINT:
                case MySqlParser.MBREQUAL:
                case MySqlParser.MBRINTERSECTS:
                case MySqlParser.MBROVERLAPS:
                case MySqlParser.MBRTOUCHES:
                case MySqlParser.MBRWITHIN:
                case MySqlParser.MD5:
                case MySqlParser.MLINEFROMTEXT:
                case MySqlParser.MLINEFROMWKB:
                case MySqlParser.MONTHNAME:
                case MySqlParser.MPOINTFROMTEXT:
                case MySqlParser.MPOINTFROMWKB:
                case MySqlParser.MPOLYFROMTEXT:
                case MySqlParser.MPOLYFROMWKB:
                case MySqlParser.MULTILINESTRINGFROMTEXT:
                case MySqlParser.MULTILINESTRINGFROMWKB:
                case MySqlParser.MULTIPOINTFROMTEXT:
                case MySqlParser.MULTIPOINTFROMWKB:
                case MySqlParser.MULTIPOLYGONFROMTEXT:
                case MySqlParser.MULTIPOLYGONFROMWKB:
                case MySqlParser.NAME_CONST:
                case MySqlParser.NULLIF:
                case MySqlParser.NUMGEOMETRIES:
                case MySqlParser.NUMINTERIORRINGS:
                case MySqlParser.NUMPOINTS:
                case MySqlParser.OCT:
                case MySqlParser.OCTET_LENGTH:
                case MySqlParser.ORD:
                case MySqlParser.OVERLAPS:
                case MySqlParser.PERIOD_ADD:
                case MySqlParser.PERIOD_DIFF:
                case MySqlParser.PI:
                case MySqlParser.POINTFROMTEXT:
                case MySqlParser.POINTFROMWKB:
                case MySqlParser.POINTN:
                case MySqlParser.POLYFROMTEXT:
                case MySqlParser.POLYFROMWKB:
                case MySqlParser.POLYGONFROMTEXT:
                case MySqlParser.POLYGONFROMWKB:
                case MySqlParser.POW:
                case MySqlParser.POWER:
                case MySqlParser.QUOTE:
                case MySqlParser.RADIANS:
                case MySqlParser.RAND:
                case MySqlParser.RANDOM:
                case MySqlParser.RANDOM_BYTES:
                case MySqlParser.RELEASE_LOCK:
                case MySqlParser.REVERSE:
                case MySqlParser.ROUND:
                case MySqlParser.ROW_COUNT:
                case MySqlParser.RPAD:
                case MySqlParser.RTRIM:
                case MySqlParser.SEC_TO_TIME:
                case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                case MySqlParser.SESSION_USER:
                case MySqlParser.SHA:
                case MySqlParser.SHA1:
                case MySqlParser.SHA2:
                case MySqlParser.SCHEMA_NAME:
                case MySqlParser.SIGN:
                case MySqlParser.SIN:
                case MySqlParser.SLEEP:
                case MySqlParser.SOUNDEX:
                case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
                case MySqlParser.SQRT:
                case MySqlParser.SRID:
                case MySqlParser.STARTPOINT:
                case MySqlParser.STRCMP:
                case MySqlParser.STR_TO_DATE:
                case MySqlParser.ST_AREA:
                case MySqlParser.ST_ASBINARY:
                case MySqlParser.ST_ASTEXT:
                case MySqlParser.ST_ASWKB:
                case MySqlParser.ST_ASWKT:
                case MySqlParser.ST_BUFFER:
                case MySqlParser.ST_CENTROID:
                case MySqlParser.ST_CONTAINS:
                case MySqlParser.ST_CROSSES:
                case MySqlParser.ST_DIFFERENCE:
                case MySqlParser.ST_DIMENSION:
                case MySqlParser.ST_DISJOINT:
                case MySqlParser.ST_DISTANCE:
                case MySqlParser.ST_ENDPOINT:
                case MySqlParser.ST_ENVELOPE:
                case MySqlParser.ST_EQUALS:
                case MySqlParser.ST_EXTERIORRING:
                case MySqlParser.ST_GEOMCOLLFROMTEXT:
                case MySqlParser.ST_GEOMCOLLFROMTXT:
                case MySqlParser.ST_GEOMCOLLFROMWKB:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.ST_GEOMETRYFROMTEXT:
                case MySqlParser.ST_GEOMETRYFROMWKB:
                case MySqlParser.ST_GEOMETRYN:
                case MySqlParser.ST_GEOMETRYTYPE:
                case MySqlParser.ST_GEOMFROMTEXT:
                case MySqlParser.ST_GEOMFROMWKB:
                case MySqlParser.ST_INTERIORRINGN:
                case MySqlParser.ST_INTERSECTION:
                case MySqlParser.ST_INTERSECTS:
                case MySqlParser.ST_ISCLOSED:
                case MySqlParser.ST_ISEMPTY:
                case MySqlParser.ST_ISSIMPLE:
                case MySqlParser.ST_LINEFROMTEXT:
                case MySqlParser.ST_LINEFROMWKB:
                case MySqlParser.ST_LINESTRINGFROMTEXT:
                case MySqlParser.ST_LINESTRINGFROMWKB:
                case MySqlParser.ST_NUMGEOMETRIES:
                case MySqlParser.ST_NUMINTERIORRING:
                case MySqlParser.ST_NUMINTERIORRINGS:
                case MySqlParser.ST_NUMPOINTS:
                case MySqlParser.ST_OVERLAPS:
                case MySqlParser.ST_POINTFROMTEXT:
                case MySqlParser.ST_POINTFROMWKB:
                case MySqlParser.ST_POINTN:
                case MySqlParser.ST_POLYFROMTEXT:
                case MySqlParser.ST_POLYFROMWKB:
                case MySqlParser.ST_POLYGONFROMTEXT:
                case MySqlParser.ST_POLYGONFROMWKB:
                case MySqlParser.ST_SRID:
                case MySqlParser.ST_STARTPOINT:
                case MySqlParser.ST_SYMDIFFERENCE:
                case MySqlParser.ST_TOUCHES:
                case MySqlParser.ST_UNION:
                case MySqlParser.ST_WITHIN:
                case MySqlParser.ST_X:
                case MySqlParser.ST_Y:
                case MySqlParser.SUBDATE:
                case MySqlParser.SUBSTRING_INDEX:
                case MySqlParser.SUBTIME:
                case MySqlParser.SYSTEM_USER:
                case MySqlParser.TAN:
                case MySqlParser.TIMEDIFF:
                case MySqlParser.TIMESTAMPADD:
                case MySqlParser.TIMESTAMPDIFF:
                case MySqlParser.TIME_FORMAT:
                case MySqlParser.TIME_TO_SEC:
                case MySqlParser.TOUCHES:
                case MySqlParser.TO_BASE64:
                case MySqlParser.TO_DAYS:
                case MySqlParser.TO_SECONDS:
                case MySqlParser.TP_CONNECTION_ADMIN:
                case MySqlParser.UCASE:
                case MySqlParser.UNCOMPRESS:
                case MySqlParser.UNCOMPRESSED_LENGTH:
                case MySqlParser.UNHEX:
                case MySqlParser.UNIX_TIMESTAMP:
                case MySqlParser.UPDATEXML:
                case MySqlParser.UPPER:
                case MySqlParser.UUID:
                case MySqlParser.UUID_SHORT:
                case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
                case MySqlParser.VERSION:
                case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case MySqlParser.WEEKDAY:
                case MySqlParser.WEEKOFYEAR:
                case MySqlParser.WEIGHT_STRING:
                case MySqlParser.WITHIN:
                case MySqlParser.YEARWEEK:
                case MySqlParser.Y_FUNCTION:
                case MySqlParser.X_FUNCTION:
                case MySqlParser.MOD:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.ID:
                    {
                    this.state = 2946;
                    this.uidList();
                    }
                    break;
                case MySqlParser.ALL:
                    {
                    this.state = 2947;
                    this.match(MySqlParser.ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySqlParser.REPAIR:
                localContext = new AlterByRepairPartitionContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2950;
                this.match(MySqlParser.REPAIR);
                this.state = 2951;
                this.match(MySqlParser.PARTITION);
                this.state = 2954;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ARRAY:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.BUCKETS:
                case MySqlParser.CONDITION:
                case MySqlParser.CURRENT:
                case MySqlParser.CURRENT_USER:
                case MySqlParser.DATABASE:
                case MySqlParser.DEFAULT:
                case MySqlParser.DIAGNOSTICS:
                case MySqlParser.EMPTY:
                case MySqlParser.ENFORCED:
                case MySqlParser.EXCEPT:
                case MySqlParser.GROUP:
                case MySqlParser.IF:
                case MySqlParser.IGNORED:
                case MySqlParser.INSERT:
                case MySqlParser.LATERAL:
                case MySqlParser.LEFT:
                case MySqlParser.NUMBER:
                case MySqlParser.OPTIONAL:
                case MySqlParser.ORDER:
                case MySqlParser.PRIMARY:
                case MySqlParser.REPEAT:
                case MySqlParser.REPLACE:
                case MySqlParser.RIGHT:
                case MySqlParser.SCHEMA:
                case MySqlParser.SKIP_QUERY_REWRITE:
                case MySqlParser.STACKED:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.BINARY:
                case MySqlParser.TEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.JSON_ARRAY:
                case MySqlParser.JSON_ARRAYAGG:
                case MySqlParser.JSON_ARRAY_APPEND:
                case MySqlParser.JSON_ARRAY_INSERT:
                case MySqlParser.JSON_CONTAINS:
                case MySqlParser.JSON_CONTAINS_PATH:
                case MySqlParser.JSON_DEPTH:
                case MySqlParser.JSON_EXTRACT:
                case MySqlParser.JSON_INSERT:
                case MySqlParser.JSON_KEYS:
                case MySqlParser.JSON_LENGTH:
                case MySqlParser.JSON_MERGE:
                case MySqlParser.JSON_MERGE_PATCH:
                case MySqlParser.JSON_MERGE_PRESERVE:
                case MySqlParser.JSON_OBJECT:
                case MySqlParser.JSON_OBJECTAGG:
                case MySqlParser.JSON_OVERLAPS:
                case MySqlParser.JSON_PRETTY:
                case MySqlParser.JSON_QUOTE:
                case MySqlParser.JSON_REMOVE:
                case MySqlParser.JSON_REPLACE:
                case MySqlParser.JSON_SCHEMA_VALID:
                case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
                case MySqlParser.JSON_SEARCH:
                case MySqlParser.JSON_SET:
                case MySqlParser.JSON_STORAGE_FREE:
                case MySqlParser.JSON_STORAGE_SIZE:
                case MySqlParser.JSON_TABLE:
                case MySqlParser.JSON_TYPE:
                case MySqlParser.JSON_UNQUOTE:
                case MySqlParser.JSON_VALID:
                case MySqlParser.JSON_VALUE:
                case MySqlParser.NESTED:
                case MySqlParser.ORDINALITY:
                case MySqlParser.PATH:
                case MySqlParser.AVG:
                case MySqlParser.BIT_AND:
                case MySqlParser.BIT_OR:
                case MySqlParser.BIT_XOR:
                case MySqlParser.COUNT:
                case MySqlParser.CUME_DIST:
                case MySqlParser.DENSE_RANK:
                case MySqlParser.FIRST_VALUE:
                case MySqlParser.GROUP_CONCAT:
                case MySqlParser.LAG:
                case MySqlParser.LAST_VALUE:
                case MySqlParser.LEAD:
                case MySqlParser.MAX:
                case MySqlParser.MIN:
                case MySqlParser.NTILE:
                case MySqlParser.NTH_VALUE:
                case MySqlParser.PERCENT_RANK:
                case MySqlParser.RANK:
                case MySqlParser.ROW_NUMBER:
                case MySqlParser.STD:
                case MySqlParser.STDDEV:
                case MySqlParser.STDDEV_POP:
                case MySqlParser.STDDEV_SAMP:
                case MySqlParser.SUM:
                case MySqlParser.VAR_POP:
                case MySqlParser.VAR_SAMP:
                case MySqlParser.VARIANCE:
                case MySqlParser.CURRENT_DATE:
                case MySqlParser.CURRENT_TIME:
                case MySqlParser.CURRENT_TIMESTAMP:
                case MySqlParser.LOCALTIME:
                case MySqlParser.CURDATE:
                case MySqlParser.CURTIME:
                case MySqlParser.DATE_ADD:
                case MySqlParser.DATE_SUB:
                case MySqlParser.LOCALTIMESTAMP:
                case MySqlParser.NOW:
                case MySqlParser.POSITION:
                case MySqlParser.SUBSTR:
                case MySqlParser.SUBSTRING:
                case MySqlParser.SYSDATE:
                case MySqlParser.TRIM:
                case MySqlParser.UTC_DATE:
                case MySqlParser.UTC_TIME:
                case MySqlParser.UTC_TIMESTAMP:
                case MySqlParser.ACCOUNT:
                case MySqlParser.ACTION:
                case MySqlParser.AFTER:
                case MySqlParser.AGGREGATE:
                case MySqlParser.ALGORITHM:
                case MySqlParser.ANY:
                case MySqlParser.AT:
                case MySqlParser.AUTHORS:
                case MySqlParser.AUTOCOMMIT:
                case MySqlParser.AUTOEXTEND_SIZE:
                case MySqlParser.AUTO_INCREMENT:
                case MySqlParser.AVG_ROW_LENGTH:
                case MySqlParser.BEGIN:
                case MySqlParser.BINLOG:
                case MySqlParser.BIT:
                case MySqlParser.BLOCK:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.BTREE:
                case MySqlParser.CACHE:
                case MySqlParser.CASCADED:
                case MySqlParser.CHAIN:
                case MySqlParser.CHANGED:
                case MySqlParser.CHANNEL:
                case MySqlParser.CHECKSUM:
                case MySqlParser.PAGE_CHECKSUM:
                case MySqlParser.CIPHER:
                case MySqlParser.CLASS_ORIGIN:
                case MySqlParser.CLIENT:
                case MySqlParser.CLOSE:
                case MySqlParser.CLUSTERING:
                case MySqlParser.COALESCE:
                case MySqlParser.CODE:
                case MySqlParser.COLUMNS:
                case MySqlParser.COLUMN_FORMAT:
                case MySqlParser.COLUMN_NAME:
                case MySqlParser.COMMENT:
                case MySqlParser.COMMIT:
                case MySqlParser.COMPACT:
                case MySqlParser.COMPLETION:
                case MySqlParser.COMPRESSED:
                case MySqlParser.COMPRESSION:
                case MySqlParser.CONCURRENT:
                case MySqlParser.CONNECT:
                case MySqlParser.CONNECTION:
                case MySqlParser.CONSISTENT:
                case MySqlParser.CONSTRAINT_CATALOG:
                case MySqlParser.CONSTRAINT_SCHEMA:
                case MySqlParser.CONSTRAINT_NAME:
                case MySqlParser.CONTAINS:
                case MySqlParser.CONTEXT:
                case MySqlParser.CONTRIBUTORS:
                case MySqlParser.COPY:
                case MySqlParser.CPU:
                case MySqlParser.CURSOR_NAME:
                case MySqlParser.DATA:
                case MySqlParser.DATAFILE:
                case MySqlParser.DEALLOCATE:
                case MySqlParser.DEFAULT_AUTH:
                case MySqlParser.DEFINER:
                case MySqlParser.DELAY_KEY_WRITE:
                case MySqlParser.DES_KEY_FILE:
                case MySqlParser.DIRECTORY:
                case MySqlParser.DISABLE:
                case MySqlParser.DISCARD:
                case MySqlParser.DISK:
                case MySqlParser.DO:
                case MySqlParser.DUMPFILE:
                case MySqlParser.DUPLICATE:
                case MySqlParser.DYNAMIC:
                case MySqlParser.ENABLE:
                case MySqlParser.ENCRYPTION:
                case MySqlParser.END:
                case MySqlParser.ENDS:
                case MySqlParser.ENGINE:
                case MySqlParser.ENGINES:
                case MySqlParser.ERROR:
                case MySqlParser.ERRORS:
                case MySqlParser.ESCAPE:
                case MySqlParser.EVEN:
                case MySqlParser.EVENT:
                case MySqlParser.EVENTS:
                case MySqlParser.EVERY:
                case MySqlParser.EXCHANGE:
                case MySqlParser.EXCLUSIVE:
                case MySqlParser.EXPIRE:
                case MySqlParser.EXPORT:
                case MySqlParser.EXTENDED:
                case MySqlParser.EXTENT_SIZE:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.FAST:
                case MySqlParser.FAULTS:
                case MySqlParser.FIELDS:
                case MySqlParser.FILE_BLOCK_SIZE:
                case MySqlParser.FILTER:
                case MySqlParser.FIRST:
                case MySqlParser.FIXED:
                case MySqlParser.FLUSH:
                case MySqlParser.FOLLOWS:
                case MySqlParser.FOUND:
                case MySqlParser.FULL:
                case MySqlParser.FUNCTION:
                case MySqlParser.GENERAL:
                case MySqlParser.GLOBAL:
                case MySqlParser.GRANTS:
                case MySqlParser.GROUP_REPLICATION:
                case MySqlParser.HANDLER:
                case MySqlParser.HASH:
                case MySqlParser.HELP:
                case MySqlParser.HISTORY:
                case MySqlParser.HOST:
                case MySqlParser.HOSTS:
                case MySqlParser.IDENTIFIED:
                case MySqlParser.IGNORE_SERVER_IDS:
                case MySqlParser.IMPORT:
                case MySqlParser.INDEXES:
                case MySqlParser.INITIAL_SIZE:
                case MySqlParser.INPLACE:
                case MySqlParser.INSERT_METHOD:
                case MySqlParser.INSTALL:
                case MySqlParser.INSTANCE:
                case MySqlParser.INSTANT:
                case MySqlParser.INVISIBLE:
                case MySqlParser.INVOKER:
                case MySqlParser.IO:
                case MySqlParser.IO_THREAD:
                case MySqlParser.IPC:
                case MySqlParser.ISOLATION:
                case MySqlParser.ISSUER:
                case MySqlParser.JSON:
                case MySqlParser.KEY_BLOCK_SIZE:
                case MySqlParser.LANGUAGE:
                case MySqlParser.LAST:
                case MySqlParser.LEAVES:
                case MySqlParser.LESS:
                case MySqlParser.LEVEL:
                case MySqlParser.LIST:
                case MySqlParser.LOCAL:
                case MySqlParser.LOGFILE:
                case MySqlParser.LOGS:
                case MySqlParser.MASTER:
                case MySqlParser.MASTER_AUTO_POSITION:
                case MySqlParser.MASTER_CONNECT_RETRY:
                case MySqlParser.MASTER_DELAY:
                case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                case MySqlParser.MASTER_HOST:
                case MySqlParser.MASTER_LOG_FILE:
                case MySqlParser.MASTER_LOG_POS:
                case MySqlParser.MASTER_PASSWORD:
                case MySqlParser.MASTER_PORT:
                case MySqlParser.MASTER_RETRY_COUNT:
                case MySqlParser.MASTER_SSL:
                case MySqlParser.MASTER_SSL_CA:
                case MySqlParser.MASTER_SSL_CAPATH:
                case MySqlParser.MASTER_SSL_CERT:
                case MySqlParser.MASTER_SSL_CIPHER:
                case MySqlParser.MASTER_SSL_CRL:
                case MySqlParser.MASTER_SSL_CRLPATH:
                case MySqlParser.MASTER_SSL_KEY:
                case MySqlParser.MASTER_TLS_VERSION:
                case MySqlParser.MASTER_USER:
                case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                case MySqlParser.MAX_QUERIES_PER_HOUR:
                case MySqlParser.MAX_ROWS:
                case MySqlParser.MAX_SIZE:
                case MySqlParser.MAX_UPDATES_PER_HOUR:
                case MySqlParser.MAX_USER_CONNECTIONS:
                case MySqlParser.MEDIUM:
                case MySqlParser.MEMBER:
                case MySqlParser.MERGE:
                case MySqlParser.MESSAGE_TEXT:
                case MySqlParser.MID:
                case MySqlParser.MIGRATE:
                case MySqlParser.MIN_ROWS:
                case MySqlParser.MODE:
                case MySqlParser.MODIFY:
                case MySqlParser.MUTEX:
                case MySqlParser.MYSQL:
                case MySqlParser.MYSQL_ERRNO:
                case MySqlParser.NAME:
                case MySqlParser.NAMES:
                case MySqlParser.NCHAR:
                case MySqlParser.NEVER:
                case MySqlParser.NEXT:
                case MySqlParser.NO:
                case MySqlParser.NOCOPY:
                case MySqlParser.NOWAIT:
                case MySqlParser.NODEGROUP:
                case MySqlParser.NONE:
                case MySqlParser.ODBC:
                case MySqlParser.OFFLINE:
                case MySqlParser.OFFSET:
                case MySqlParser.OF:
                case MySqlParser.OJ:
                case MySqlParser.OLD_PASSWORD:
                case MySqlParser.ONE:
                case MySqlParser.ONLINE:
                case MySqlParser.ONLY:
                case MySqlParser.OPEN:
                case MySqlParser.OPTIMIZER_COSTS:
                case MySqlParser.OPTIONS:
                case MySqlParser.OWNER:
                case MySqlParser.PACK_KEYS:
                case MySqlParser.PAGE:
                case MySqlParser.PARSER:
                case MySqlParser.PARTIAL:
                case MySqlParser.PARTITIONING:
                case MySqlParser.PARTITIONS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.PHASE:
                case MySqlParser.PLUGIN:
                case MySqlParser.PLUGIN_DIR:
                case MySqlParser.PLUGINS:
                case MySqlParser.PORT:
                case MySqlParser.PRECEDES:
                case MySqlParser.PREPARE:
                case MySqlParser.PRESERVE:
                case MySqlParser.PREV:
                case MySqlParser.PROCESSLIST:
                case MySqlParser.PROFILE:
                case MySqlParser.PROFILES:
                case MySqlParser.PROXY:
                case MySqlParser.QUERY:
                case MySqlParser.QUICK:
                case MySqlParser.REBUILD:
                case MySqlParser.RECOVER:
                case MySqlParser.RECURSIVE:
                case MySqlParser.REDO_BUFFER_SIZE:
                case MySqlParser.REDUNDANT:
                case MySqlParser.RELAY:
                case MySqlParser.RELAY_LOG_FILE:
                case MySqlParser.RELAY_LOG_POS:
                case MySqlParser.RELAYLOG:
                case MySqlParser.REMOVE:
                case MySqlParser.REORGANIZE:
                case MySqlParser.REPAIR:
                case MySqlParser.REPLICATE_DO_DB:
                case MySqlParser.REPLICATE_DO_TABLE:
                case MySqlParser.REPLICATE_IGNORE_DB:
                case MySqlParser.REPLICATE_IGNORE_TABLE:
                case MySqlParser.REPLICATE_REWRITE_DB:
                case MySqlParser.REPLICATE_WILD_DO_TABLE:
                case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                case MySqlParser.REPLICATION:
                case MySqlParser.RESET:
                case MySqlParser.RESUME:
                case MySqlParser.RETURNED_SQLSTATE:
                case MySqlParser.RETURNS:
                case MySqlParser.REUSE:
                case MySqlParser.ROLE:
                case MySqlParser.ROLLBACK:
                case MySqlParser.ROLLUP:
                case MySqlParser.ROTATE:
                case MySqlParser.ROW:
                case MySqlParser.ROWS:
                case MySqlParser.ROW_FORMAT:
                case MySqlParser.RTREE:
                case MySqlParser.SAVEPOINT:
                case MySqlParser.SCHEDULE:
                case MySqlParser.SECURITY:
                case MySqlParser.SERVER:
                case MySqlParser.SESSION:
                case MySqlParser.SHARE:
                case MySqlParser.SHARED:
                case MySqlParser.SIGNED:
                case MySqlParser.SIMPLE:
                case MySqlParser.SLAVE:
                case MySqlParser.SLOW:
                case MySqlParser.SNAPSHOT:
                case MySqlParser.SOCKET:
                case MySqlParser.SOME:
                case MySqlParser.SONAME:
                case MySqlParser.SOUNDS:
                case MySqlParser.SOURCE:
                case MySqlParser.SQL_AFTER_GTIDS:
                case MySqlParser.SQL_AFTER_MTS_GAPS:
                case MySqlParser.SQL_BEFORE_GTIDS:
                case MySqlParser.SQL_BUFFER_RESULT:
                case MySqlParser.SQL_CACHE:
                case MySqlParser.SQL_NO_CACHE:
                case MySqlParser.SQL_THREAD:
                case MySqlParser.START:
                case MySqlParser.STARTS:
                case MySqlParser.STATS_AUTO_RECALC:
                case MySqlParser.STATS_PERSISTENT:
                case MySqlParser.STATS_SAMPLE_PAGES:
                case MySqlParser.STATUS:
                case MySqlParser.STOP:
                case MySqlParser.STORAGE:
                case MySqlParser.STRING:
                case MySqlParser.SUBCLASS_ORIGIN:
                case MySqlParser.SUBJECT:
                case MySqlParser.SUBPARTITION:
                case MySqlParser.SUBPARTITIONS:
                case MySqlParser.SUSPEND:
                case MySqlParser.SWAPS:
                case MySqlParser.SWITCHES:
                case MySqlParser.TABLE_NAME:
                case MySqlParser.TABLESPACE:
                case MySqlParser.TABLE_TYPE:
                case MySqlParser.TEMPORARY:
                case MySqlParser.TEMPTABLE:
                case MySqlParser.THAN:
                case MySqlParser.TRADITIONAL:
                case MySqlParser.TRANSACTION:
                case MySqlParser.TRANSACTIONAL:
                case MySqlParser.TRIGGERS:
                case MySqlParser.TRUNCATE:
                case MySqlParser.UNBOUNDED:
                case MySqlParser.UNDEFINED:
                case MySqlParser.UNDOFILE:
                case MySqlParser.UNDO_BUFFER_SIZE:
                case MySqlParser.UNINSTALL:
                case MySqlParser.UNKNOWN:
                case MySqlParser.UNTIL:
                case MySqlParser.UPGRADE:
                case MySqlParser.USER:
                case MySqlParser.USE_FRM:
                case MySqlParser.USER_RESOURCES:
                case MySqlParser.VALIDATION:
                case MySqlParser.VALUE:
                case MySqlParser.VARIABLES:
                case MySqlParser.VIEW:
                case MySqlParser.VIRTUAL:
                case MySqlParser.VISIBLE:
                case MySqlParser.WAIT:
                case MySqlParser.WARNINGS:
                case MySqlParser.WITHOUT:
                case MySqlParser.WORK:
                case MySqlParser.WRAPPER:
                case MySqlParser.X509:
                case MySqlParser.XA:
                case MySqlParser.XML:
                case MySqlParser.EUR:
                case MySqlParser.USA:
                case MySqlParser.JIS:
                case MySqlParser.ISO:
                case MySqlParser.INTERNAL:
                case MySqlParser.QUARTER:
                case MySqlParser.MONTH:
                case MySqlParser.DAY:
                case MySqlParser.HOUR:
                case MySqlParser.MINUTE:
                case MySqlParser.WEEK:
                case MySqlParser.SECOND:
                case MySqlParser.MICROSECOND:
                case MySqlParser.ADMIN:
                case MySqlParser.AUDIT_ABORT_EXEMPT:
                case MySqlParser.AUDIT_ADMIN:
                case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
                case MySqlParser.BACKUP_ADMIN:
                case MySqlParser.BINLOG_ADMIN:
                case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
                case MySqlParser.CLONE_ADMIN:
                case MySqlParser.CONNECTION_ADMIN:
                case MySqlParser.ENCRYPTION_KEY_ADMIN:
                case MySqlParser.EXECUTE:
                case MySqlParser.FILE:
                case MySqlParser.FIREWALL_ADMIN:
                case MySqlParser.FIREWALL_EXEMPT:
                case MySqlParser.FIREWALL_USER:
                case MySqlParser.GROUP_REPLICATION_ADMIN:
                case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
                case MySqlParser.INVOKE:
                case MySqlParser.LAMBDA:
                case MySqlParser.NDB_STORED_USER:
                case MySqlParser.PASSWORDLESS_USER_ADMIN:
                case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
                case MySqlParser.PRIVILEGES:
                case MySqlParser.PROCESS:
                case MySqlParser.RELOAD:
                case MySqlParser.REPLICATION_APPLIER:
                case MySqlParser.REPLICATION_SLAVE_ADMIN:
                case MySqlParser.RESOURCE_GROUP_ADMIN:
                case MySqlParser.RESOURCE_GROUP_USER:
                case MySqlParser.ROLE_ADMIN:
                case MySqlParser.ROUTINE:
                case MySqlParser.S3:
                case MySqlParser.SESSION_VARIABLES_ADMIN:
                case MySqlParser.SET_USER_ID:
                case MySqlParser.SHOW_ROUTINE:
                case MySqlParser.SHUTDOWN:
                case MySqlParser.SUPER:
                case MySqlParser.SYSTEM_VARIABLES_ADMIN:
                case MySqlParser.TABLES:
                case MySqlParser.TABLE_ENCRYPTION_ADMIN:
                case MySqlParser.VERSION_TOKEN_ADMIN:
                case MySqlParser.XA_RECOVER_ADMIN:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.ARCHIVE:
                case MySqlParser.BLACKHOLE:
                case MySqlParser.CSV:
                case MySqlParser.FEDERATED:
                case MySqlParser.INNODB:
                case MySqlParser.MEMORY:
                case MySqlParser.MRG_MYISAM:
                case MySqlParser.MYISAM:
                case MySqlParser.NDB:
                case MySqlParser.NDBCLUSTER:
                case MySqlParser.PERFORMANCE_SCHEMA:
                case MySqlParser.TOKUDB:
                case MySqlParser.REPEATABLE:
                case MySqlParser.COMMITTED:
                case MySqlParser.UNCOMMITTED:
                case MySqlParser.SERIALIZABLE:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                case MySqlParser.ABS:
                case MySqlParser.ACOS:
                case MySqlParser.ADDDATE:
                case MySqlParser.ADDTIME:
                case MySqlParser.AES_DECRYPT:
                case MySqlParser.AES_ENCRYPT:
                case MySqlParser.AREA:
                case MySqlParser.ASBINARY:
                case MySqlParser.ASIN:
                case MySqlParser.ASTEXT:
                case MySqlParser.ASWKB:
                case MySqlParser.ASWKT:
                case MySqlParser.ASYMMETRIC_DECRYPT:
                case MySqlParser.ASYMMETRIC_DERIVE:
                case MySqlParser.ASYMMETRIC_ENCRYPT:
                case MySqlParser.ASYMMETRIC_SIGN:
                case MySqlParser.ASYMMETRIC_VERIFY:
                case MySqlParser.ATAN:
                case MySqlParser.ATAN2:
                case MySqlParser.BENCHMARK:
                case MySqlParser.BIN:
                case MySqlParser.BIT_COUNT:
                case MySqlParser.BIT_LENGTH:
                case MySqlParser.BUFFER:
                case MySqlParser.CATALOG_NAME:
                case MySqlParser.CEIL:
                case MySqlParser.CEILING:
                case MySqlParser.CENTROID:
                case MySqlParser.CHARACTER_LENGTH:
                case MySqlParser.CHARSET:
                case MySqlParser.CHAR_LENGTH:
                case MySqlParser.COERCIBILITY:
                case MySqlParser.COLLATION:
                case MySqlParser.COMPRESS:
                case MySqlParser.CONCAT:
                case MySqlParser.CONCAT_WS:
                case MySqlParser.CONNECTION_ID:
                case MySqlParser.CONV:
                case MySqlParser.CONVERT_TZ:
                case MySqlParser.COS:
                case MySqlParser.COT:
                case MySqlParser.CRC32:
                case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
                case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
                case MySqlParser.CREATE_DH_PARAMETERS:
                case MySqlParser.CREATE_DIGEST:
                case MySqlParser.CROSSES:
                case MySqlParser.DATEDIFF:
                case MySqlParser.DATE_FORMAT:
                case MySqlParser.DAYNAME:
                case MySqlParser.DAYOFMONTH:
                case MySqlParser.DAYOFWEEK:
                case MySqlParser.DAYOFYEAR:
                case MySqlParser.DECODE:
                case MySqlParser.DEGREES:
                case MySqlParser.DES_DECRYPT:
                case MySqlParser.DES_ENCRYPT:
                case MySqlParser.DIMENSION:
                case MySqlParser.DISJOINT:
                case MySqlParser.ELT:
                case MySqlParser.ENCODE:
                case MySqlParser.ENCRYPT:
                case MySqlParser.ENDPOINT:
                case MySqlParser.ENGINE_ATTRIBUTE:
                case MySqlParser.ENVELOPE:
                case MySqlParser.EQUALS:
                case MySqlParser.EXP:
                case MySqlParser.EXPORT_SET:
                case MySqlParser.EXTERIORRING:
                case MySqlParser.EXTRACTVALUE:
                case MySqlParser.FIELD:
                case MySqlParser.FIND_IN_SET:
                case MySqlParser.FLOOR:
                case MySqlParser.FORMAT:
                case MySqlParser.FOUND_ROWS:
                case MySqlParser.FROM_BASE64:
                case MySqlParser.FROM_DAYS:
                case MySqlParser.FROM_UNIXTIME:
                case MySqlParser.GEOMCOLLFROMTEXT:
                case MySqlParser.GEOMCOLLFROMWKB:
                case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.GEOMETRYFROMTEXT:
                case MySqlParser.GEOMETRYFROMWKB:
                case MySqlParser.GEOMETRYN:
                case MySqlParser.GEOMETRYTYPE:
                case MySqlParser.GEOMFROMTEXT:
                case MySqlParser.GEOMFROMWKB:
                case MySqlParser.GET_FORMAT:
                case MySqlParser.GET_LOCK:
                case MySqlParser.GLENGTH:
                case MySqlParser.GREATEST:
                case MySqlParser.GTID_SUBSET:
                case MySqlParser.GTID_SUBTRACT:
                case MySqlParser.HEX:
                case MySqlParser.IFNULL:
                case MySqlParser.INET6_ATON:
                case MySqlParser.INET6_NTOA:
                case MySqlParser.INET_ATON:
                case MySqlParser.INET_NTOA:
                case MySqlParser.INSTR:
                case MySqlParser.INTERIORRINGN:
                case MySqlParser.INTERSECTS:
                case MySqlParser.ISCLOSED:
                case MySqlParser.ISEMPTY:
                case MySqlParser.ISNULL:
                case MySqlParser.ISSIMPLE:
                case MySqlParser.IS_FREE_LOCK:
                case MySqlParser.IS_IPV4:
                case MySqlParser.IS_IPV4_COMPAT:
                case MySqlParser.IS_IPV4_MAPPED:
                case MySqlParser.IS_IPV6:
                case MySqlParser.IS_USED_LOCK:
                case MySqlParser.LAST_INSERT_ID:
                case MySqlParser.LCASE:
                case MySqlParser.LEAST:
                case MySqlParser.LENGTH:
                case MySqlParser.LINEFROMTEXT:
                case MySqlParser.LINEFROMWKB:
                case MySqlParser.LINESTRINGFROMTEXT:
                case MySqlParser.LINESTRINGFROMWKB:
                case MySqlParser.LN:
                case MySqlParser.LOAD_FILE:
                case MySqlParser.LOCATE:
                case MySqlParser.LOG:
                case MySqlParser.LOG10:
                case MySqlParser.LOG2:
                case MySqlParser.LOWER:
                case MySqlParser.LPAD:
                case MySqlParser.LTRIM:
                case MySqlParser.MAKEDATE:
                case MySqlParser.MAKETIME:
                case MySqlParser.MAKE_SET:
                case MySqlParser.MASTER_POS_WAIT:
                case MySqlParser.MBRCONTAINS:
                case MySqlParser.MBRDISJOINT:
                case MySqlParser.MBREQUAL:
                case MySqlParser.MBRINTERSECTS:
                case MySqlParser.MBROVERLAPS:
                case MySqlParser.MBRTOUCHES:
                case MySqlParser.MBRWITHIN:
                case MySqlParser.MD5:
                case MySqlParser.MLINEFROMTEXT:
                case MySqlParser.MLINEFROMWKB:
                case MySqlParser.MONTHNAME:
                case MySqlParser.MPOINTFROMTEXT:
                case MySqlParser.MPOINTFROMWKB:
                case MySqlParser.MPOLYFROMTEXT:
                case MySqlParser.MPOLYFROMWKB:
                case MySqlParser.MULTILINESTRINGFROMTEXT:
                case MySqlParser.MULTILINESTRINGFROMWKB:
                case MySqlParser.MULTIPOINTFROMTEXT:
                case MySqlParser.MULTIPOINTFROMWKB:
                case MySqlParser.MULTIPOLYGONFROMTEXT:
                case MySqlParser.MULTIPOLYGONFROMWKB:
                case MySqlParser.NAME_CONST:
                case MySqlParser.NULLIF:
                case MySqlParser.NUMGEOMETRIES:
                case MySqlParser.NUMINTERIORRINGS:
                case MySqlParser.NUMPOINTS:
                case MySqlParser.OCT:
                case MySqlParser.OCTET_LENGTH:
                case MySqlParser.ORD:
                case MySqlParser.OVERLAPS:
                case MySqlParser.PERIOD_ADD:
                case MySqlParser.PERIOD_DIFF:
                case MySqlParser.PI:
                case MySqlParser.POINTFROMTEXT:
                case MySqlParser.POINTFROMWKB:
                case MySqlParser.POINTN:
                case MySqlParser.POLYFROMTEXT:
                case MySqlParser.POLYFROMWKB:
                case MySqlParser.POLYGONFROMTEXT:
                case MySqlParser.POLYGONFROMWKB:
                case MySqlParser.POW:
                case MySqlParser.POWER:
                case MySqlParser.QUOTE:
                case MySqlParser.RADIANS:
                case MySqlParser.RAND:
                case MySqlParser.RANDOM:
                case MySqlParser.RANDOM_BYTES:
                case MySqlParser.RELEASE_LOCK:
                case MySqlParser.REVERSE:
                case MySqlParser.ROUND:
                case MySqlParser.ROW_COUNT:
                case MySqlParser.RPAD:
                case MySqlParser.RTRIM:
                case MySqlParser.SEC_TO_TIME:
                case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                case MySqlParser.SESSION_USER:
                case MySqlParser.SHA:
                case MySqlParser.SHA1:
                case MySqlParser.SHA2:
                case MySqlParser.SCHEMA_NAME:
                case MySqlParser.SIGN:
                case MySqlParser.SIN:
                case MySqlParser.SLEEP:
                case MySqlParser.SOUNDEX:
                case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
                case MySqlParser.SQRT:
                case MySqlParser.SRID:
                case MySqlParser.STARTPOINT:
                case MySqlParser.STRCMP:
                case MySqlParser.STR_TO_DATE:
                case MySqlParser.ST_AREA:
                case MySqlParser.ST_ASBINARY:
                case MySqlParser.ST_ASTEXT:
                case MySqlParser.ST_ASWKB:
                case MySqlParser.ST_ASWKT:
                case MySqlParser.ST_BUFFER:
                case MySqlParser.ST_CENTROID:
                case MySqlParser.ST_CONTAINS:
                case MySqlParser.ST_CROSSES:
                case MySqlParser.ST_DIFFERENCE:
                case MySqlParser.ST_DIMENSION:
                case MySqlParser.ST_DISJOINT:
                case MySqlParser.ST_DISTANCE:
                case MySqlParser.ST_ENDPOINT:
                case MySqlParser.ST_ENVELOPE:
                case MySqlParser.ST_EQUALS:
                case MySqlParser.ST_EXTERIORRING:
                case MySqlParser.ST_GEOMCOLLFROMTEXT:
                case MySqlParser.ST_GEOMCOLLFROMTXT:
                case MySqlParser.ST_GEOMCOLLFROMWKB:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.ST_GEOMETRYFROMTEXT:
                case MySqlParser.ST_GEOMETRYFROMWKB:
                case MySqlParser.ST_GEOMETRYN:
                case MySqlParser.ST_GEOMETRYTYPE:
                case MySqlParser.ST_GEOMFROMTEXT:
                case MySqlParser.ST_GEOMFROMWKB:
                case MySqlParser.ST_INTERIORRINGN:
                case MySqlParser.ST_INTERSECTION:
                case MySqlParser.ST_INTERSECTS:
                case MySqlParser.ST_ISCLOSED:
                case MySqlParser.ST_ISEMPTY:
                case MySqlParser.ST_ISSIMPLE:
                case MySqlParser.ST_LINEFROMTEXT:
                case MySqlParser.ST_LINEFROMWKB:
                case MySqlParser.ST_LINESTRINGFROMTEXT:
                case MySqlParser.ST_LINESTRINGFROMWKB:
                case MySqlParser.ST_NUMGEOMETRIES:
                case MySqlParser.ST_NUMINTERIORRING:
                case MySqlParser.ST_NUMINTERIORRINGS:
                case MySqlParser.ST_NUMPOINTS:
                case MySqlParser.ST_OVERLAPS:
                case MySqlParser.ST_POINTFROMTEXT:
                case MySqlParser.ST_POINTFROMWKB:
                case MySqlParser.ST_POINTN:
                case MySqlParser.ST_POLYFROMTEXT:
                case MySqlParser.ST_POLYFROMWKB:
                case MySqlParser.ST_POLYGONFROMTEXT:
                case MySqlParser.ST_POLYGONFROMWKB:
                case MySqlParser.ST_SRID:
                case MySqlParser.ST_STARTPOINT:
                case MySqlParser.ST_SYMDIFFERENCE:
                case MySqlParser.ST_TOUCHES:
                case MySqlParser.ST_UNION:
                case MySqlParser.ST_WITHIN:
                case MySqlParser.ST_X:
                case MySqlParser.ST_Y:
                case MySqlParser.SUBDATE:
                case MySqlParser.SUBSTRING_INDEX:
                case MySqlParser.SUBTIME:
                case MySqlParser.SYSTEM_USER:
                case MySqlParser.TAN:
                case MySqlParser.TIMEDIFF:
                case MySqlParser.TIMESTAMPADD:
                case MySqlParser.TIMESTAMPDIFF:
                case MySqlParser.TIME_FORMAT:
                case MySqlParser.TIME_TO_SEC:
                case MySqlParser.TOUCHES:
                case MySqlParser.TO_BASE64:
                case MySqlParser.TO_DAYS:
                case MySqlParser.TO_SECONDS:
                case MySqlParser.TP_CONNECTION_ADMIN:
                case MySqlParser.UCASE:
                case MySqlParser.UNCOMPRESS:
                case MySqlParser.UNCOMPRESSED_LENGTH:
                case MySqlParser.UNHEX:
                case MySqlParser.UNIX_TIMESTAMP:
                case MySqlParser.UPDATEXML:
                case MySqlParser.UPPER:
                case MySqlParser.UUID:
                case MySqlParser.UUID_SHORT:
                case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
                case MySqlParser.VERSION:
                case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case MySqlParser.WEEKDAY:
                case MySqlParser.WEEKOFYEAR:
                case MySqlParser.WEIGHT_STRING:
                case MySqlParser.WITHIN:
                case MySqlParser.YEARWEEK:
                case MySqlParser.Y_FUNCTION:
                case MySqlParser.X_FUNCTION:
                case MySqlParser.MOD:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.ID:
                    {
                    this.state = 2952;
                    this.uidList();
                    }
                    break;
                case MySqlParser.ALL:
                    {
                    this.state = 2953;
                    this.match(MySqlParser.ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySqlParser.REMOVE:
                localContext = new AlterByRemovePartitioningContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2956;
                this.match(MySqlParser.REMOVE);
                this.state = 2957;
                this.match(MySqlParser.PARTITIONING);
                }
                break;
            case MySqlParser.UPGRADE:
                localContext = new AlterByUpgradePartitioningContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2958;
                this.match(MySqlParser.UPGRADE);
                this.state = 2959;
                this.match(MySqlParser.PARTITIONING);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropDatabase(): DropDatabaseContext {
        let localContext = new DropDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 150, MySqlParser.RULE_dropDatabase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2962;
            this.match(MySqlParser.DROP);
            this.state = 2963;
            localContext._dbFormat = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 39 || _la === 150)) {
                localContext._dbFormat = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2965;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
            case 1:
                {
                this.state = 2964;
                this.ifExists();
                }
                break;
            }
            this.state = 2967;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropEvent(): DropEventContext {
        let localContext = new DropEventContext(this.context, this.state);
        this.enterRule(localContext, 152, MySqlParser.RULE_dropEvent);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2969;
            this.match(MySqlParser.DROP);
            this.state = 2970;
            this.match(MySqlParser.EVENT);
            this.state = 2972;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
            case 1:
                {
                this.state = 2971;
                this.ifExists();
                }
                break;
            }
            this.state = 2974;
            this.fullId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropIndex(): DropIndexContext {
        let localContext = new DropIndexContext(this.context, this.state);
        this.enterRule(localContext, 154, MySqlParser.RULE_dropIndex);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2976;
            this.match(MySqlParser.DROP);
            this.state = 2977;
            this.match(MySqlParser.INDEX);
            this.state = 2979;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 379, this.context) ) {
            case 1:
                {
                this.state = 2978;
                localContext._intimeAction = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 531 || _la === 537)) {
                    localContext._intimeAction = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 2981;
            this.uid();
            this.state = 2982;
            this.match(MySqlParser.ON);
            this.state = 2983;
            this.tableName();
            this.state = 2996;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 103 || _la === 336) {
                {
                this.state = 2994;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ALGORITHM:
                    {
                    this.state = 2984;
                    this.match(MySqlParser.ALGORITHM);
                    this.state = 2986;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1124) {
                        {
                        this.state = 2985;
                        this.match(MySqlParser.EQUAL_SYMBOL);
                        }
                    }

                    this.state = 2988;
                    localContext._algType = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 42 || _la === 384 || _la === 454)) {
                        localContext._algType = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case MySqlParser.LOCK:
                    {
                    this.state = 2989;
                    this.match(MySqlParser.LOCK);
                    this.state = 2991;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1124) {
                        {
                        this.state = 2990;
                        this.match(MySqlParser.EQUAL_SYMBOL);
                        }
                    }

                    this.state = 2993;
                    localContext._lockType = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 42 || _la === 419 || _la === 529 || _la === 611)) {
                        localContext._lockType = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 2998;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropLogfileGroup(): DropLogfileGroupContext {
        let localContext = new DropLogfileGroupContext(this.context, this.state);
        this.enterRule(localContext, 156, MySqlParser.RULE_dropLogfileGroup);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2999;
            this.match(MySqlParser.DROP);
            this.state = 3000;
            this.match(MySqlParser.LOGFILE);
            this.state = 3001;
            this.match(MySqlParser.GROUP);
            this.state = 3002;
            this.uid();
            this.state = 3003;
            this.match(MySqlParser.ENGINE);
            this.state = 3004;
            this.match(MySqlParser.EQUAL_SYMBOL);
            this.state = 3005;
            this.engineName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropProcedure(): DropProcedureContext {
        let localContext = new DropProcedureContext(this.context, this.state);
        this.enterRule(localContext, 158, MySqlParser.RULE_dropProcedure);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3007;
            this.match(MySqlParser.DROP);
            this.state = 3008;
            this.match(MySqlParser.PROCEDURE);
            this.state = 3010;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 384, this.context) ) {
            case 1:
                {
                this.state = 3009;
                this.ifExists();
                }
                break;
            }
            this.state = 3012;
            this.fullId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropFunction(): DropFunctionContext {
        let localContext = new DropFunctionContext(this.context, this.state);
        this.enterRule(localContext, 160, MySqlParser.RULE_dropFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3014;
            this.match(MySqlParser.DROP);
            this.state = 3015;
            this.match(MySqlParser.FUNCTION);
            this.state = 3017;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 385, this.context) ) {
            case 1:
                {
                this.state = 3016;
                this.ifExists();
                }
                break;
            }
            this.state = 3019;
            this.fullId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropServer(): DropServerContext {
        let localContext = new DropServerContext(this.context, this.state);
        this.enterRule(localContext, 162, MySqlParser.RULE_dropServer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3021;
            this.match(MySqlParser.DROP);
            this.state = 3022;
            this.match(MySqlParser.SERVER);
            this.state = 3024;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 386, this.context) ) {
            case 1:
                {
                this.state = 3023;
                this.ifExists();
                }
                break;
            }
            this.state = 3026;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropTable(): DropTableContext {
        let localContext = new DropTableContext(this.context, this.state);
        this.enterRule(localContext, 164, MySqlParser.RULE_dropTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3028;
            this.match(MySqlParser.DROP);
            this.state = 3030;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 649) {
                {
                this.state = 3029;
                this.match(MySqlParser.TEMPORARY);
                }
            }

            this.state = 3032;
            this.match(MySqlParser.TABLE);
            this.state = 3034;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 388, this.context) ) {
            case 1:
                {
                this.state = 3033;
                this.ifExists();
                }
                break;
            }
            this.state = 3036;
            this.tables();
            this.state = 3038;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 21 || _la === 144) {
                {
                this.state = 3037;
                localContext._dropType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 21 || _la === 144)) {
                    localContext._dropType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropTablespace(): DropTablespaceContext {
        let localContext = new DropTablespaceContext(this.context, this.state);
        this.enterRule(localContext, 166, MySqlParser.RULE_dropTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3040;
            this.match(MySqlParser.DROP);
            this.state = 3041;
            this.match(MySqlParser.TABLESPACE);
            this.state = 3042;
            this.uid();
            this.state = 3048;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 409) {
                {
                this.state = 3043;
                this.match(MySqlParser.ENGINE);
                this.state = 3045;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1124) {
                    {
                    this.state = 3044;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    }
                }

                this.state = 3047;
                this.engineName();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropTrigger(): DropTriggerContext {
        let localContext = new DropTriggerContext(this.context, this.state);
        this.enterRule(localContext, 168, MySqlParser.RULE_dropTrigger);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3050;
            this.match(MySqlParser.DROP);
            this.state = 3051;
            this.match(MySqlParser.TRIGGER);
            this.state = 3053;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 392, this.context) ) {
            case 1:
                {
                this.state = 3052;
                this.ifExists();
                }
                break;
            }
            this.state = 3055;
            this.fullId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropView(): DropViewContext {
        let localContext = new DropViewContext(this.context, this.state);
        this.enterRule(localContext, 170, MySqlParser.RULE_dropView);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3057;
            this.match(MySqlParser.DROP);
            this.state = 3058;
            this.match(MySqlParser.VIEW);
            this.state = 3060;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 393, this.context) ) {
            case 1:
                {
                this.state = 3059;
                this.ifExists();
                }
                break;
            }
            this.state = 3062;
            this.fullId();
            this.state = 3067;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 3063;
                this.match(MySqlParser.COMMA);
                this.state = 3064;
                this.fullId();
                }
                }
                this.state = 3069;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3071;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 21 || _la === 144) {
                {
                this.state = 3070;
                localContext._dropType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 21 || _la === 144)) {
                    localContext._dropType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropRole(): DropRoleContext {
        let localContext = new DropRoleContext(this.context, this.state);
        this.enterRule(localContext, 172, MySqlParser.RULE_dropRole);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3073;
            this.match(MySqlParser.DROP);
            this.state = 3074;
            this.match(MySqlParser.ROLE);
            this.state = 3076;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 396, this.context) ) {
            case 1:
                {
                this.state = 3075;
                this.ifExists();
                }
                break;
            }
            this.state = 3078;
            this.roleName();
            this.state = 3083;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 3079;
                this.match(MySqlParser.COMMA);
                this.state = 3080;
                this.roleName();
                }
                }
                this.state = 3085;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setRole(): SetRoleContext {
        let localContext = new SetRoleContext(this.context, this.state);
        this.enterRule(localContext, 174, MySqlParser.RULE_setRole);
        let _la: number;
        try {
            this.state = 3119;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 403, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3086;
                this.match(MySqlParser.SET);
                this.state = 3087;
                this.match(MySqlParser.DEFAULT);
                this.state = 3088;
                this.match(MySqlParser.ROLE);
                this.state = 3099;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
                case 1:
                    {
                    this.state = 3089;
                    this.match(MySqlParser.NONE);
                    }
                    break;
                case 2:
                    {
                    this.state = 3090;
                    this.match(MySqlParser.ALL);
                    }
                    break;
                case 3:
                    {
                    this.state = 3091;
                    this.roleName();
                    this.state = 3096;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 1135) {
                        {
                        {
                        this.state = 3092;
                        this.match(MySqlParser.COMMA);
                        this.state = 3093;
                        this.roleName();
                        }
                        }
                        this.state = 3098;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                }
                this.state = 3101;
                this.match(MySqlParser.TO);
                this.state = 3104;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 400, this.context) ) {
                case 1:
                    {
                    this.state = 3102;
                    this.userName();
                    }
                    break;
                case 2:
                    {
                    this.state = 3103;
                    this.uid();
                    }
                    break;
                }
                this.state = 3113;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 3106;
                    this.match(MySqlParser.COMMA);
                    this.state = 3109;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 401, this.context) ) {
                    case 1:
                        {
                        this.state = 3107;
                        this.userName();
                        }
                        break;
                    case 2:
                        {
                        this.state = 3108;
                        this.uid();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 3115;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3116;
                this.match(MySqlParser.SET);
                this.state = 3117;
                this.match(MySqlParser.ROLE);
                this.state = 3118;
                this.roleOption();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameTable(): RenameTableContext {
        let localContext = new RenameTableContext(this.context, this.state);
        this.enterRule(localContext, 176, MySqlParser.RULE_renameTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3121;
            this.match(MySqlParser.RENAME);
            this.state = 3122;
            this.match(MySqlParser.TABLE);
            this.state = 3123;
            this.renameTableClause();
            this.state = 3128;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 3124;
                this.match(MySqlParser.COMMA);
                this.state = 3125;
                this.renameTableClause();
                }
                }
                this.state = 3130;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameTableClause(): RenameTableClauseContext {
        let localContext = new RenameTableClauseContext(this.context, this.state);
        this.enterRule(localContext, 178, MySqlParser.RULE_renameTableClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3131;
            this.tableName();
            this.state = 3132;
            this.match(MySqlParser.TO);
            this.state = 3133;
            this.tableName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateTable(): TruncateTableContext {
        let localContext = new TruncateTableContext(this.context, this.state);
        this.enterRule(localContext, 180, MySqlParser.RULE_truncateTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3135;
            this.match(MySqlParser.TRUNCATE);
            this.state = 3137;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 172) {
                {
                this.state = 3136;
                this.match(MySqlParser.TABLE);
                }
            }

            this.state = 3139;
            this.tableName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callStatement(): CallStatementContext {
        let localContext = new CallStatementContext(this.context, this.state);
        this.enterRule(localContext, 182, MySqlParser.RULE_callStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3141;
            this.match(MySqlParser.CALL);
            this.state = 3142;
            this.fullId();
            this.state = 3149;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1133) {
                {
                this.state = 3143;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3146;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
                case 1:
                    {
                    this.state = 3144;
                    this.constants();
                    }
                    break;
                case 2:
                    {
                    this.state = 3145;
                    this.expressions();
                    }
                    break;
                }
                this.state = 3148;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteStatement(): DeleteStatementContext {
        let localContext = new DeleteStatementContext(this.context, this.state);
        this.enterRule(localContext, 184, MySqlParser.RULE_deleteStatement);
        try {
            this.state = 3153;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 408, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3151;
                this.singleDeleteStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3152;
                this.multipleDeleteStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public doStatement(): DoStatementContext {
        let localContext = new DoStatementContext(this.context, this.state);
        this.enterRule(localContext, 186, MySqlParser.RULE_doStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3155;
            this.match(MySqlParser.DO);
            this.state = 3156;
            this.expressions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public handlerStatement(): HandlerStatementContext {
        let localContext = new HandlerStatementContext(this.context, this.state);
        this.enterRule(localContext, 188, MySqlParser.RULE_handlerStatement);
        try {
            this.state = 3162;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 409, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3158;
                this.handlerOpenStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3159;
                this.handlerReadIndexStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3160;
                this.handlerReadStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3161;
                this.handlerCloseStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertStatement(): InsertStatementContext {
        let localContext = new InsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 190, MySqlParser.RULE_insertStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3164;
            this.match(MySqlParser.INSERT);
            this.state = 3166;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43 || _la === 75 || _la === 106) {
                {
                this.state = 3165;
                localContext._priority = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 43 || _la === 75 || _la === 106)) {
                    localContext._priority = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3169;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78) {
                {
                this.state = 3168;
                this.match(MySqlParser.IGNORE);
                }
            }

            this.state = 3172;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 3171;
                this.match(MySqlParser.INTO);
                }
            }

            this.state = 3174;
            this.tableName();
            this.state = 3181;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 3175;
                this.match(MySqlParser.PARTITION);
                this.state = 3176;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3178;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 3177;
                    localContext._partitions = this.uidList();
                    }
                }

                this.state = 3180;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 3206;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.SELECT:
            case MySqlParser.VALUES:
            case MySqlParser.VALUE:
            case MySqlParser.LR_BRACKET:
                {
                this.state = 3188;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 416, this.context) ) {
                case 1:
                    {
                    this.state = 3183;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 3185;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 415, this.context) ) {
                    case 1:
                        {
                        this.state = 3184;
                        localContext._columns = this.fullColumnNameList();
                        }
                        break;
                    }
                    this.state = 3187;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    break;
                }
                this.state = 3190;
                this.insertStatementValue();
                this.state = 3195;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537155584) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 3192;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 12) {
                        {
                        this.state = 3191;
                        this.match(MySqlParser.AS);
                        }
                    }

                    this.state = 3194;
                    this.uid();
                    }
                }

                }
                break;
            case MySqlParser.SET:
                {
                this.state = 3197;
                this.match(MySqlParser.SET);
                this.state = 3198;
                localContext._setFirst = this.updatedElement();
                this.state = 3203;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 3199;
                    this.match(MySqlParser.COMMA);
                    this.state = 3200;
                    localContext._updatedElement = this.updatedElement();
                    localContext._setElements.push(localContext._updatedElement);
                    }
                    }
                    this.state = 3205;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3220;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118) {
                {
                this.state = 3208;
                this.match(MySqlParser.ON);
                this.state = 3209;
                this.match(MySqlParser.DUPLICATE);
                this.state = 3210;
                this.match(MySqlParser.KEY);
                this.state = 3211;
                this.match(MySqlParser.UPDATE);
                this.state = 3212;
                localContext._duplicatedFirst = this.updatedElement();
                this.state = 3217;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 3213;
                    this.match(MySqlParser.COMMA);
                    this.state = 3214;
                    localContext._updatedElement = this.updatedElement();
                    localContext._duplicatedElements.push(localContext._updatedElement);
                    }
                    }
                    this.state = 3219;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadDataStatement(): LoadDataStatementContext {
        let localContext = new LoadDataStatementContext(this.context, this.state);
        this.enterRule(localContext, 192, MySqlParser.RULE_loadDataStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3222;
            this.match(MySqlParser.LOAD);
            this.state = 3223;
            this.match(MySqlParser.DATA);
            this.state = 3225;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 106 || _la === 374) {
                {
                this.state = 3224;
                localContext._priority = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 106 || _la === 374)) {
                    localContext._priority = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3228;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 474) {
                {
                this.state = 3227;
                this.match(MySqlParser.LOCAL);
                }
            }

            this.state = 3230;
            this.match(MySqlParser.INFILE);
            this.state = 3231;
            localContext._filename = this.match(MySqlParser.STRING_LITERAL);
            this.state = 3233;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78 || _la === 141) {
                {
                this.state = 3232;
                localContext._violation = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 78 || _la === 141)) {
                    localContext._violation = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3235;
            this.match(MySqlParser.INTO);
            this.state = 3236;
            this.match(MySqlParser.TABLE);
            this.state = 3237;
            this.tableName();
            this.state = 3243;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 3238;
                this.match(MySqlParser.PARTITION);
                this.state = 3239;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3240;
                this.uidList();
                this.state = 3241;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 3248;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 3245;
                this.match(MySqlParser.CHARACTER);
                this.state = 3246;
                this.match(MySqlParser.SET);
                this.state = 3247;
                localContext._charset = this.charsetName();
                }
            }

            this.state = 3256;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 365 || _la === 427) {
                {
                this.state = 3250;
                localContext._fieldsFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 365 || _la === 427)) {
                    localContext._fieldsFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3252;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3251;
                    this.selectFieldsInto();
                    }
                    }
                    this.state = 3254;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 56 || _la === 58 || _la === 122 || _la === 173);
                }
            }

            this.state = 3264;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 101) {
                {
                this.state = 3258;
                this.match(MySqlParser.LINES);
                this.state = 3260;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3259;
                    this.selectLinesInto();
                    }
                    }
                    this.state = 3262;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 169 || _la === 173);
                }
            }

            this.state = 3270;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78) {
                {
                this.state = 3266;
                this.match(MySqlParser.IGNORE);
                this.state = 3267;
                this.decimalLiteral();
                this.state = 3268;
                localContext._linesFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 101 || _la === 601)) {
                    localContext._linesFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3283;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1133) {
                {
                this.state = 3272;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3273;
                this.assignmentField();
                this.state = 3278;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 3274;
                    this.match(MySqlParser.COMMA);
                    this.state = 3275;
                    this.assignmentField();
                    }
                    }
                    this.state = 3280;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3281;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 3294;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 3285;
                this.match(MySqlParser.SET);
                this.state = 3286;
                this.updatedElement();
                this.state = 3291;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 3287;
                    this.match(MySqlParser.COMMA);
                    this.state = 3288;
                    this.updatedElement();
                    }
                    }
                    this.state = 3293;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadXmlStatement(): LoadXmlStatementContext {
        let localContext = new LoadXmlStatementContext(this.context, this.state);
        this.enterRule(localContext, 194, MySqlParser.RULE_loadXmlStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3296;
            this.match(MySqlParser.LOAD);
            this.state = 3297;
            this.match(MySqlParser.XML);
            this.state = 3299;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 106 || _la === 374) {
                {
                this.state = 3298;
                localContext._priority = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 106 || _la === 374)) {
                    localContext._priority = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3302;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 474) {
                {
                this.state = 3301;
                this.match(MySqlParser.LOCAL);
                }
            }

            this.state = 3304;
            this.match(MySqlParser.INFILE);
            this.state = 3305;
            localContext._filename = this.match(MySqlParser.STRING_LITERAL);
            this.state = 3307;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78 || _la === 141) {
                {
                this.state = 3306;
                localContext._violation = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 78 || _la === 141)) {
                    localContext._violation = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3309;
            this.match(MySqlParser.INTO);
            this.state = 3310;
            this.match(MySqlParser.TABLE);
            this.state = 3311;
            this.tableName();
            this.state = 3315;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 3312;
                this.match(MySqlParser.CHARACTER);
                this.state = 3313;
                this.match(MySqlParser.SET);
                this.state = 3314;
                localContext._charset = this.charsetName();
                }
            }

            this.state = 3323;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 601) {
                {
                this.state = 3317;
                this.match(MySqlParser.ROWS);
                this.state = 3318;
                this.match(MySqlParser.IDENTIFIED);
                this.state = 3319;
                this.match(MySqlParser.BY);
                this.state = 3320;
                this.match(MySqlParser.LESS_SYMBOL);
                this.state = 3321;
                localContext._tag = this.match(MySqlParser.STRING_LITERAL);
                this.state = 3322;
                this.match(MySqlParser.GREATER_SYMBOL);
                }
            }

            this.state = 3329;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78) {
                {
                this.state = 3325;
                this.match(MySqlParser.IGNORE);
                this.state = 3326;
                this.decimalLiteral();
                this.state = 3327;
                localContext._linesFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 101 || _la === 601)) {
                    localContext._linesFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3342;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1133) {
                {
                this.state = 3331;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3332;
                this.assignmentField();
                this.state = 3337;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 3333;
                    this.match(MySqlParser.COMMA);
                    this.state = 3334;
                    this.assignmentField();
                    }
                    }
                    this.state = 3339;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3340;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 3353;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 3344;
                this.match(MySqlParser.SET);
                this.state = 3345;
                this.updatedElement();
                this.state = 3350;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 3346;
                    this.match(MySqlParser.COMMA);
                    this.state = 3347;
                    this.updatedElement();
                    }
                    }
                    this.state = 3352;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceStatement(): ReplaceStatementContext {
        let localContext = new ReplaceStatementContext(this.context, this.state);
        this.enterRule(localContext, 196, MySqlParser.RULE_replaceStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3355;
            this.match(MySqlParser.REPLACE);
            this.state = 3357;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43 || _la === 106) {
                {
                this.state = 3356;
                localContext._priority = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 43 || _la === 106)) {
                    localContext._priority = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3360;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 3359;
                this.match(MySqlParser.INTO);
                }
            }

            this.state = 3362;
            this.tableName();
            this.state = 3368;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 3363;
                this.match(MySqlParser.PARTITION);
                this.state = 3364;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3365;
                localContext._partitions = this.uidList();
                this.state = 3366;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 3386;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.SELECT:
            case MySqlParser.VALUES:
            case MySqlParser.VALUE:
            case MySqlParser.LR_BRACKET:
                {
                this.state = 3374;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 450, this.context) ) {
                case 1:
                    {
                    this.state = 3370;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 3371;
                    localContext._columns = this.uidList();
                    this.state = 3372;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    break;
                }
                this.state = 3376;
                this.insertStatementValue();
                }
                break;
            case MySqlParser.SET:
                {
                this.state = 3377;
                this.match(MySqlParser.SET);
                this.state = 3378;
                localContext._setFirst = this.updatedElement();
                this.state = 3383;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 3379;
                    this.match(MySqlParser.COMMA);
                    this.state = 3380;
                    localContext._updatedElement = this.updatedElement();
                    localContext._setElements.push(localContext._updatedElement);
                    }
                    }
                    this.state = 3385;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatement(): SelectStatementContext {
        let localContext = new SelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 198, MySqlParser.RULE_selectStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3453;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 470, this.context) ) {
            case 1:
                localContext = new SimpleSelectContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3388;
                this.querySpecification();
                this.state = 3390;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65 || _la === 103) {
                    {
                    this.state = 3389;
                    this.lockClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new ParenthesisSelectContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3392;
                this.queryExpression();
                this.state = 3394;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65 || _la === 103) {
                    {
                    this.state = 3393;
                    this.lockClause();
                    }
                }

                }
                break;
            case 3:
                localContext = new UnionSelectContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3398;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.SELECT:
                    {
                    this.state = 3396;
                    this.querySpecificationNointo();
                    }
                    break;
                case MySqlParser.LR_BRACKET:
                    {
                    this.state = 3397;
                    this.queryExpressionNointo();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3401;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 3400;
                        this.unionStatement();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3403;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 456, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                this.state = 3413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 180) {
                    {
                    this.state = 3405;
                    this.match(MySqlParser.UNION);
                    this.state = 3407;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 6 || _la === 49) {
                        {
                        this.state = 3406;
                        (localContext as UnionSelectContext)._unionType = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 6 || _la === 49)) {
                            (localContext as UnionSelectContext)._unionType = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 3411;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySqlParser.SELECT:
                        {
                        this.state = 3409;
                        this.querySpecification();
                        }
                        break;
                    case MySqlParser.LR_BRACKET:
                        {
                        this.state = 3410;
                        this.queryExpression();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                this.state = 3416;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 460, this.context) ) {
                case 1:
                    {
                    this.state = 3415;
                    this.orderByClause();
                    }
                    break;
                }
                this.state = 3419;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99) {
                    {
                    this.state = 3418;
                    this.limitClause();
                    }
                }

                this.state = 3422;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65 || _la === 103) {
                    {
                    this.state = 3421;
                    this.lockClause();
                    }
                }

                }
                break;
            case 4:
                localContext = new UnionParenthesisSelectContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3424;
                this.queryExpressionNointo();
                this.state = 3426;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 3425;
                        this.unionParenthesis();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3428;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 463, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                this.state = 3435;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 180) {
                    {
                    this.state = 3430;
                    this.match(MySqlParser.UNION);
                    this.state = 3432;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 6 || _la === 49) {
                        {
                        this.state = 3431;
                        (localContext as UnionParenthesisSelectContext)._unionType = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 6 || _la === 49)) {
                            (localContext as UnionParenthesisSelectContext)._unionType = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 3434;
                    this.queryExpression();
                    }
                }

                this.state = 3438;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 466, this.context) ) {
                case 1:
                    {
                    this.state = 3437;
                    this.orderByClause();
                    }
                    break;
                }
                this.state = 3441;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99) {
                    {
                    this.state = 3440;
                    this.limitClause();
                    }
                }

                this.state = 3444;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65 || _la === 103) {
                    {
                    this.state = 3443;
                    this.lockClause();
                    }
                }

                }
                break;
            case 5:
                localContext = new WithLateralStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3446;
                this.querySpecificationNointo();
                this.state = 3449;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3447;
                    this.match(MySqlParser.COMMA);
                    this.state = 3448;
                    this.lateralStatement();
                    }
                    }
                    this.state = 3451;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 1135);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateStatement(): UpdateStatementContext {
        let localContext = new UpdateStatementContext(this.context, this.state);
        this.enterRule(localContext, 200, MySqlParser.RULE_updateStatement);
        try {
            this.state = 3457;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 471, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3455;
                this.singleUpdateStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3456;
                this.multipleUpdateStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesStatement(): ValuesStatementContext {
        let localContext = new ValuesStatementContext(this.context, this.state);
        this.enterRule(localContext, 202, MySqlParser.RULE_valuesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3459;
            this.match(MySqlParser.VALUES);
            this.state = 3460;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 3462;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 472, this.context) ) {
            case 1:
                {
                this.state = 3461;
                this.expressionsWithDefaults();
                }
                break;
            }
            this.state = 3464;
            this.match(MySqlParser.RR_BRACKET);
            this.state = 3473;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 3465;
                this.match(MySqlParser.COMMA);
                this.state = 3466;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3468;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 473, this.context) ) {
                case 1:
                    {
                    this.state = 3467;
                    this.expressionsWithDefaults();
                    }
                    break;
                }
                this.state = 3470;
                this.match(MySqlParser.RR_BRACKET);
                }
                }
                this.state = 3475;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertStatementValue(): InsertStatementValueContext {
        let localContext = new InsertStatementValueContext(this.context, this.state);
        this.enterRule(localContext, 204, MySqlParser.RULE_insertStatementValue);
        let _la: number;
        try {
            this.state = 3494;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.SELECT:
            case MySqlParser.LR_BRACKET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3476;
                this.selectStatement();
                }
                break;
            case MySqlParser.VALUES:
            case MySqlParser.VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3477;
                localContext._insertFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 188 || _la === 669)) {
                    localContext._insertFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3478;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3480;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 475, this.context) ) {
                case 1:
                    {
                    this.state = 3479;
                    this.expressionsWithDefaults();
                    }
                    break;
                }
                this.state = 3482;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 3491;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 3483;
                    this.match(MySqlParser.COMMA);
                    this.state = 3484;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 3486;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 476, this.context) ) {
                    case 1:
                        {
                        this.state = 3485;
                        this.expressionsWithDefaults();
                        }
                        break;
                    }
                    this.state = 3488;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    }
                    this.state = 3493;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updatedElement(): UpdatedElementContext {
        let localContext = new UpdatedElementContext(this.context, this.state);
        this.enterRule(localContext, 206, MySqlParser.RULE_updatedElement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3496;
            this.fullColumnName();
            this.state = 3497;
            this.match(MySqlParser.EQUAL_SYMBOL);
            this.state = 3500;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 479, this.context) ) {
            case 1:
                {
                this.state = 3498;
                this.expression(0);
                }
                break;
            case 2:
                {
                this.state = 3499;
                this.match(MySqlParser.DEFAULT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentField(): AssignmentFieldContext {
        let localContext = new AssignmentFieldContext(this.context, this.state);
        this.enterRule(localContext, 208, MySqlParser.RULE_assignmentField);
        try {
            this.state = 3504;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ARRAY:
            case MySqlParser.ATTRIBUTE:
            case MySqlParser.BUCKETS:
            case MySqlParser.CONDITION:
            case MySqlParser.CURRENT:
            case MySqlParser.CURRENT_USER:
            case MySqlParser.DATABASE:
            case MySqlParser.DEFAULT:
            case MySqlParser.DIAGNOSTICS:
            case MySqlParser.EMPTY:
            case MySqlParser.ENFORCED:
            case MySqlParser.EXCEPT:
            case MySqlParser.GROUP:
            case MySqlParser.IF:
            case MySqlParser.IGNORED:
            case MySqlParser.INSERT:
            case MySqlParser.LATERAL:
            case MySqlParser.LEFT:
            case MySqlParser.NUMBER:
            case MySqlParser.OPTIONAL:
            case MySqlParser.ORDER:
            case MySqlParser.PRIMARY:
            case MySqlParser.REPEAT:
            case MySqlParser.REPLACE:
            case MySqlParser.RIGHT:
            case MySqlParser.SCHEMA:
            case MySqlParser.SKIP_QUERY_REWRITE:
            case MySqlParser.STACKED:
            case MySqlParser.DATE:
            case MySqlParser.TIME:
            case MySqlParser.TIMESTAMP:
            case MySqlParser.DATETIME:
            case MySqlParser.YEAR:
            case MySqlParser.BINARY:
            case MySqlParser.TEXT:
            case MySqlParser.ENUM:
            case MySqlParser.SERIAL:
            case MySqlParser.JSON_ARRAY:
            case MySqlParser.JSON_ARRAYAGG:
            case MySqlParser.JSON_ARRAY_APPEND:
            case MySqlParser.JSON_ARRAY_INSERT:
            case MySqlParser.JSON_CONTAINS:
            case MySqlParser.JSON_CONTAINS_PATH:
            case MySqlParser.JSON_DEPTH:
            case MySqlParser.JSON_EXTRACT:
            case MySqlParser.JSON_INSERT:
            case MySqlParser.JSON_KEYS:
            case MySqlParser.JSON_LENGTH:
            case MySqlParser.JSON_MERGE:
            case MySqlParser.JSON_MERGE_PATCH:
            case MySqlParser.JSON_MERGE_PRESERVE:
            case MySqlParser.JSON_OBJECT:
            case MySqlParser.JSON_OBJECTAGG:
            case MySqlParser.JSON_OVERLAPS:
            case MySqlParser.JSON_PRETTY:
            case MySqlParser.JSON_QUOTE:
            case MySqlParser.JSON_REMOVE:
            case MySqlParser.JSON_REPLACE:
            case MySqlParser.JSON_SCHEMA_VALID:
            case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
            case MySqlParser.JSON_SEARCH:
            case MySqlParser.JSON_SET:
            case MySqlParser.JSON_STORAGE_FREE:
            case MySqlParser.JSON_STORAGE_SIZE:
            case MySqlParser.JSON_TABLE:
            case MySqlParser.JSON_TYPE:
            case MySqlParser.JSON_UNQUOTE:
            case MySqlParser.JSON_VALID:
            case MySqlParser.JSON_VALUE:
            case MySqlParser.NESTED:
            case MySqlParser.ORDINALITY:
            case MySqlParser.PATH:
            case MySqlParser.AVG:
            case MySqlParser.BIT_AND:
            case MySqlParser.BIT_OR:
            case MySqlParser.BIT_XOR:
            case MySqlParser.COUNT:
            case MySqlParser.CUME_DIST:
            case MySqlParser.DENSE_RANK:
            case MySqlParser.FIRST_VALUE:
            case MySqlParser.GROUP_CONCAT:
            case MySqlParser.LAG:
            case MySqlParser.LAST_VALUE:
            case MySqlParser.LEAD:
            case MySqlParser.MAX:
            case MySqlParser.MIN:
            case MySqlParser.NTILE:
            case MySqlParser.NTH_VALUE:
            case MySqlParser.PERCENT_RANK:
            case MySqlParser.RANK:
            case MySqlParser.ROW_NUMBER:
            case MySqlParser.STD:
            case MySqlParser.STDDEV:
            case MySqlParser.STDDEV_POP:
            case MySqlParser.STDDEV_SAMP:
            case MySqlParser.SUM:
            case MySqlParser.VAR_POP:
            case MySqlParser.VAR_SAMP:
            case MySqlParser.VARIANCE:
            case MySqlParser.CURRENT_DATE:
            case MySqlParser.CURRENT_TIME:
            case MySqlParser.CURRENT_TIMESTAMP:
            case MySqlParser.LOCALTIME:
            case MySqlParser.CURDATE:
            case MySqlParser.CURTIME:
            case MySqlParser.DATE_ADD:
            case MySqlParser.DATE_SUB:
            case MySqlParser.LOCALTIMESTAMP:
            case MySqlParser.NOW:
            case MySqlParser.POSITION:
            case MySqlParser.SUBSTR:
            case MySqlParser.SUBSTRING:
            case MySqlParser.SYSDATE:
            case MySqlParser.TRIM:
            case MySqlParser.UTC_DATE:
            case MySqlParser.UTC_TIME:
            case MySqlParser.UTC_TIMESTAMP:
            case MySqlParser.ACCOUNT:
            case MySqlParser.ACTION:
            case MySqlParser.AFTER:
            case MySqlParser.AGGREGATE:
            case MySqlParser.ALGORITHM:
            case MySqlParser.ANY:
            case MySqlParser.AT:
            case MySqlParser.AUTHORS:
            case MySqlParser.AUTOCOMMIT:
            case MySqlParser.AUTOEXTEND_SIZE:
            case MySqlParser.AUTO_INCREMENT:
            case MySqlParser.AVG_ROW_LENGTH:
            case MySqlParser.BEGIN:
            case MySqlParser.BINLOG:
            case MySqlParser.BIT:
            case MySqlParser.BLOCK:
            case MySqlParser.BOOL:
            case MySqlParser.BOOLEAN:
            case MySqlParser.BTREE:
            case MySqlParser.CACHE:
            case MySqlParser.CASCADED:
            case MySqlParser.CHAIN:
            case MySqlParser.CHANGED:
            case MySqlParser.CHANNEL:
            case MySqlParser.CHECKSUM:
            case MySqlParser.PAGE_CHECKSUM:
            case MySqlParser.CIPHER:
            case MySqlParser.CLASS_ORIGIN:
            case MySqlParser.CLIENT:
            case MySqlParser.CLOSE:
            case MySqlParser.CLUSTERING:
            case MySqlParser.COALESCE:
            case MySqlParser.CODE:
            case MySqlParser.COLUMNS:
            case MySqlParser.COLUMN_FORMAT:
            case MySqlParser.COLUMN_NAME:
            case MySqlParser.COMMENT:
            case MySqlParser.COMMIT:
            case MySqlParser.COMPACT:
            case MySqlParser.COMPLETION:
            case MySqlParser.COMPRESSED:
            case MySqlParser.COMPRESSION:
            case MySqlParser.CONCURRENT:
            case MySqlParser.CONNECT:
            case MySqlParser.CONNECTION:
            case MySqlParser.CONSISTENT:
            case MySqlParser.CONSTRAINT_CATALOG:
            case MySqlParser.CONSTRAINT_SCHEMA:
            case MySqlParser.CONSTRAINT_NAME:
            case MySqlParser.CONTAINS:
            case MySqlParser.CONTEXT:
            case MySqlParser.CONTRIBUTORS:
            case MySqlParser.COPY:
            case MySqlParser.CPU:
            case MySqlParser.CURSOR_NAME:
            case MySqlParser.DATA:
            case MySqlParser.DATAFILE:
            case MySqlParser.DEALLOCATE:
            case MySqlParser.DEFAULT_AUTH:
            case MySqlParser.DEFINER:
            case MySqlParser.DELAY_KEY_WRITE:
            case MySqlParser.DES_KEY_FILE:
            case MySqlParser.DIRECTORY:
            case MySqlParser.DISABLE:
            case MySqlParser.DISCARD:
            case MySqlParser.DISK:
            case MySqlParser.DO:
            case MySqlParser.DUMPFILE:
            case MySqlParser.DUPLICATE:
            case MySqlParser.DYNAMIC:
            case MySqlParser.ENABLE:
            case MySqlParser.ENCRYPTION:
            case MySqlParser.END:
            case MySqlParser.ENDS:
            case MySqlParser.ENGINE:
            case MySqlParser.ENGINES:
            case MySqlParser.ERROR:
            case MySqlParser.ERRORS:
            case MySqlParser.ESCAPE:
            case MySqlParser.EVEN:
            case MySqlParser.EVENT:
            case MySqlParser.EVENTS:
            case MySqlParser.EVERY:
            case MySqlParser.EXCHANGE:
            case MySqlParser.EXCLUSIVE:
            case MySqlParser.EXPIRE:
            case MySqlParser.EXPORT:
            case MySqlParser.EXTENDED:
            case MySqlParser.EXTENT_SIZE:
            case MySqlParser.FAILED_LOGIN_ATTEMPTS:
            case MySqlParser.FAST:
            case MySqlParser.FAULTS:
            case MySqlParser.FIELDS:
            case MySqlParser.FILE_BLOCK_SIZE:
            case MySqlParser.FILTER:
            case MySqlParser.FIRST:
            case MySqlParser.FIXED:
            case MySqlParser.FLUSH:
            case MySqlParser.FOLLOWS:
            case MySqlParser.FOUND:
            case MySqlParser.FULL:
            case MySqlParser.FUNCTION:
            case MySqlParser.GENERAL:
            case MySqlParser.GLOBAL:
            case MySqlParser.GRANTS:
            case MySqlParser.GROUP_REPLICATION:
            case MySqlParser.HANDLER:
            case MySqlParser.HASH:
            case MySqlParser.HELP:
            case MySqlParser.HISTORY:
            case MySqlParser.HOST:
            case MySqlParser.HOSTS:
            case MySqlParser.IDENTIFIED:
            case MySqlParser.IGNORE_SERVER_IDS:
            case MySqlParser.IMPORT:
            case MySqlParser.INDEXES:
            case MySqlParser.INITIAL_SIZE:
            case MySqlParser.INPLACE:
            case MySqlParser.INSERT_METHOD:
            case MySqlParser.INSTALL:
            case MySqlParser.INSTANCE:
            case MySqlParser.INSTANT:
            case MySqlParser.INVISIBLE:
            case MySqlParser.INVOKER:
            case MySqlParser.IO:
            case MySqlParser.IO_THREAD:
            case MySqlParser.IPC:
            case MySqlParser.ISOLATION:
            case MySqlParser.ISSUER:
            case MySqlParser.JSON:
            case MySqlParser.KEY_BLOCK_SIZE:
            case MySqlParser.LANGUAGE:
            case MySqlParser.LAST:
            case MySqlParser.LEAVES:
            case MySqlParser.LESS:
            case MySqlParser.LEVEL:
            case MySqlParser.LIST:
            case MySqlParser.LOCAL:
            case MySqlParser.LOGFILE:
            case MySqlParser.LOGS:
            case MySqlParser.MASTER:
            case MySqlParser.MASTER_AUTO_POSITION:
            case MySqlParser.MASTER_CONNECT_RETRY:
            case MySqlParser.MASTER_DELAY:
            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
            case MySqlParser.MASTER_HOST:
            case MySqlParser.MASTER_LOG_FILE:
            case MySqlParser.MASTER_LOG_POS:
            case MySqlParser.MASTER_PASSWORD:
            case MySqlParser.MASTER_PORT:
            case MySqlParser.MASTER_RETRY_COUNT:
            case MySqlParser.MASTER_SSL:
            case MySqlParser.MASTER_SSL_CA:
            case MySqlParser.MASTER_SSL_CAPATH:
            case MySqlParser.MASTER_SSL_CERT:
            case MySqlParser.MASTER_SSL_CIPHER:
            case MySqlParser.MASTER_SSL_CRL:
            case MySqlParser.MASTER_SSL_CRLPATH:
            case MySqlParser.MASTER_SSL_KEY:
            case MySqlParser.MASTER_TLS_VERSION:
            case MySqlParser.MASTER_USER:
            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
            case MySqlParser.MAX_QUERIES_PER_HOUR:
            case MySqlParser.MAX_ROWS:
            case MySqlParser.MAX_SIZE:
            case MySqlParser.MAX_UPDATES_PER_HOUR:
            case MySqlParser.MAX_USER_CONNECTIONS:
            case MySqlParser.MEDIUM:
            case MySqlParser.MEMBER:
            case MySqlParser.MERGE:
            case MySqlParser.MESSAGE_TEXT:
            case MySqlParser.MID:
            case MySqlParser.MIGRATE:
            case MySqlParser.MIN_ROWS:
            case MySqlParser.MODE:
            case MySqlParser.MODIFY:
            case MySqlParser.MUTEX:
            case MySqlParser.MYSQL:
            case MySqlParser.MYSQL_ERRNO:
            case MySqlParser.NAME:
            case MySqlParser.NAMES:
            case MySqlParser.NCHAR:
            case MySqlParser.NEVER:
            case MySqlParser.NEXT:
            case MySqlParser.NO:
            case MySqlParser.NOCOPY:
            case MySqlParser.NOWAIT:
            case MySqlParser.NODEGROUP:
            case MySqlParser.NONE:
            case MySqlParser.ODBC:
            case MySqlParser.OFFLINE:
            case MySqlParser.OFFSET:
            case MySqlParser.OF:
            case MySqlParser.OJ:
            case MySqlParser.OLD_PASSWORD:
            case MySqlParser.ONE:
            case MySqlParser.ONLINE:
            case MySqlParser.ONLY:
            case MySqlParser.OPEN:
            case MySqlParser.OPTIMIZER_COSTS:
            case MySqlParser.OPTIONS:
            case MySqlParser.OWNER:
            case MySqlParser.PACK_KEYS:
            case MySqlParser.PAGE:
            case MySqlParser.PARSER:
            case MySqlParser.PARTIAL:
            case MySqlParser.PARTITIONING:
            case MySqlParser.PARTITIONS:
            case MySqlParser.PASSWORD:
            case MySqlParser.PASSWORD_LOCK_TIME:
            case MySqlParser.PHASE:
            case MySqlParser.PLUGIN:
            case MySqlParser.PLUGIN_DIR:
            case MySqlParser.PLUGINS:
            case MySqlParser.PORT:
            case MySqlParser.PRECEDES:
            case MySqlParser.PREPARE:
            case MySqlParser.PRESERVE:
            case MySqlParser.PREV:
            case MySqlParser.PROCESSLIST:
            case MySqlParser.PROFILE:
            case MySqlParser.PROFILES:
            case MySqlParser.PROXY:
            case MySqlParser.QUERY:
            case MySqlParser.QUICK:
            case MySqlParser.REBUILD:
            case MySqlParser.RECOVER:
            case MySqlParser.RECURSIVE:
            case MySqlParser.REDO_BUFFER_SIZE:
            case MySqlParser.REDUNDANT:
            case MySqlParser.RELAY:
            case MySqlParser.RELAY_LOG_FILE:
            case MySqlParser.RELAY_LOG_POS:
            case MySqlParser.RELAYLOG:
            case MySqlParser.REMOVE:
            case MySqlParser.REORGANIZE:
            case MySqlParser.REPAIR:
            case MySqlParser.REPLICATE_DO_DB:
            case MySqlParser.REPLICATE_DO_TABLE:
            case MySqlParser.REPLICATE_IGNORE_DB:
            case MySqlParser.REPLICATE_IGNORE_TABLE:
            case MySqlParser.REPLICATE_REWRITE_DB:
            case MySqlParser.REPLICATE_WILD_DO_TABLE:
            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySqlParser.REPLICATION:
            case MySqlParser.RESET:
            case MySqlParser.RESUME:
            case MySqlParser.RETURNED_SQLSTATE:
            case MySqlParser.RETURNS:
            case MySqlParser.REUSE:
            case MySqlParser.ROLE:
            case MySqlParser.ROLLBACK:
            case MySqlParser.ROLLUP:
            case MySqlParser.ROTATE:
            case MySqlParser.ROW:
            case MySqlParser.ROWS:
            case MySqlParser.ROW_FORMAT:
            case MySqlParser.RTREE:
            case MySqlParser.SAVEPOINT:
            case MySqlParser.SCHEDULE:
            case MySqlParser.SECURITY:
            case MySqlParser.SERVER:
            case MySqlParser.SESSION:
            case MySqlParser.SHARE:
            case MySqlParser.SHARED:
            case MySqlParser.SIGNED:
            case MySqlParser.SIMPLE:
            case MySqlParser.SLAVE:
            case MySqlParser.SLOW:
            case MySqlParser.SNAPSHOT:
            case MySqlParser.SOCKET:
            case MySqlParser.SOME:
            case MySqlParser.SONAME:
            case MySqlParser.SOUNDS:
            case MySqlParser.SOURCE:
            case MySqlParser.SQL_AFTER_GTIDS:
            case MySqlParser.SQL_AFTER_MTS_GAPS:
            case MySqlParser.SQL_BEFORE_GTIDS:
            case MySqlParser.SQL_BUFFER_RESULT:
            case MySqlParser.SQL_CACHE:
            case MySqlParser.SQL_NO_CACHE:
            case MySqlParser.SQL_THREAD:
            case MySqlParser.START:
            case MySqlParser.STARTS:
            case MySqlParser.STATS_AUTO_RECALC:
            case MySqlParser.STATS_PERSISTENT:
            case MySqlParser.STATS_SAMPLE_PAGES:
            case MySqlParser.STATUS:
            case MySqlParser.STOP:
            case MySqlParser.STORAGE:
            case MySqlParser.STRING:
            case MySqlParser.SUBCLASS_ORIGIN:
            case MySqlParser.SUBJECT:
            case MySqlParser.SUBPARTITION:
            case MySqlParser.SUBPARTITIONS:
            case MySqlParser.SUSPEND:
            case MySqlParser.SWAPS:
            case MySqlParser.SWITCHES:
            case MySqlParser.TABLE_NAME:
            case MySqlParser.TABLESPACE:
            case MySqlParser.TABLE_TYPE:
            case MySqlParser.TEMPORARY:
            case MySqlParser.TEMPTABLE:
            case MySqlParser.THAN:
            case MySqlParser.TRADITIONAL:
            case MySqlParser.TRANSACTION:
            case MySqlParser.TRANSACTIONAL:
            case MySqlParser.TRIGGERS:
            case MySqlParser.TRUNCATE:
            case MySqlParser.UNBOUNDED:
            case MySqlParser.UNDEFINED:
            case MySqlParser.UNDOFILE:
            case MySqlParser.UNDO_BUFFER_SIZE:
            case MySqlParser.UNINSTALL:
            case MySqlParser.UNKNOWN:
            case MySqlParser.UNTIL:
            case MySqlParser.UPGRADE:
            case MySqlParser.USER:
            case MySqlParser.USE_FRM:
            case MySqlParser.USER_RESOURCES:
            case MySqlParser.VALIDATION:
            case MySqlParser.VALUE:
            case MySqlParser.VARIABLES:
            case MySqlParser.VIEW:
            case MySqlParser.VIRTUAL:
            case MySqlParser.VISIBLE:
            case MySqlParser.WAIT:
            case MySqlParser.WARNINGS:
            case MySqlParser.WITHOUT:
            case MySqlParser.WORK:
            case MySqlParser.WRAPPER:
            case MySqlParser.X509:
            case MySqlParser.XA:
            case MySqlParser.XML:
            case MySqlParser.EUR:
            case MySqlParser.USA:
            case MySqlParser.JIS:
            case MySqlParser.ISO:
            case MySqlParser.INTERNAL:
            case MySqlParser.QUARTER:
            case MySqlParser.MONTH:
            case MySqlParser.DAY:
            case MySqlParser.HOUR:
            case MySqlParser.MINUTE:
            case MySqlParser.WEEK:
            case MySqlParser.SECOND:
            case MySqlParser.MICROSECOND:
            case MySqlParser.ADMIN:
            case MySqlParser.AUDIT_ABORT_EXEMPT:
            case MySqlParser.AUDIT_ADMIN:
            case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
            case MySqlParser.BACKUP_ADMIN:
            case MySqlParser.BINLOG_ADMIN:
            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
            case MySqlParser.CLONE_ADMIN:
            case MySqlParser.CONNECTION_ADMIN:
            case MySqlParser.ENCRYPTION_KEY_ADMIN:
            case MySqlParser.EXECUTE:
            case MySqlParser.FILE:
            case MySqlParser.FIREWALL_ADMIN:
            case MySqlParser.FIREWALL_EXEMPT:
            case MySqlParser.FIREWALL_USER:
            case MySqlParser.GROUP_REPLICATION_ADMIN:
            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
            case MySqlParser.INVOKE:
            case MySqlParser.LAMBDA:
            case MySqlParser.NDB_STORED_USER:
            case MySqlParser.PASSWORDLESS_USER_ADMIN:
            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySqlParser.PRIVILEGES:
            case MySqlParser.PROCESS:
            case MySqlParser.RELOAD:
            case MySqlParser.REPLICATION_APPLIER:
            case MySqlParser.REPLICATION_SLAVE_ADMIN:
            case MySqlParser.RESOURCE_GROUP_ADMIN:
            case MySqlParser.RESOURCE_GROUP_USER:
            case MySqlParser.ROLE_ADMIN:
            case MySqlParser.ROUTINE:
            case MySqlParser.S3:
            case MySqlParser.SESSION_VARIABLES_ADMIN:
            case MySqlParser.SET_USER_ID:
            case MySqlParser.SHOW_ROUTINE:
            case MySqlParser.SHUTDOWN:
            case MySqlParser.SUPER:
            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
            case MySqlParser.TABLES:
            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
            case MySqlParser.VERSION_TOKEN_ADMIN:
            case MySqlParser.XA_RECOVER_ADMIN:
            case MySqlParser.ARMSCII8:
            case MySqlParser.ASCII:
            case MySqlParser.BIG5:
            case MySqlParser.CP1250:
            case MySqlParser.CP1251:
            case MySqlParser.CP1256:
            case MySqlParser.CP1257:
            case MySqlParser.CP850:
            case MySqlParser.CP852:
            case MySqlParser.CP866:
            case MySqlParser.CP932:
            case MySqlParser.DEC8:
            case MySqlParser.EUCJPMS:
            case MySqlParser.EUCKR:
            case MySqlParser.GB18030:
            case MySqlParser.GB2312:
            case MySqlParser.GBK:
            case MySqlParser.GEOSTD8:
            case MySqlParser.GREEK:
            case MySqlParser.HEBREW:
            case MySqlParser.HP8:
            case MySqlParser.KEYBCS2:
            case MySqlParser.KOI8R:
            case MySqlParser.KOI8U:
            case MySqlParser.LATIN1:
            case MySqlParser.LATIN2:
            case MySqlParser.LATIN5:
            case MySqlParser.LATIN7:
            case MySqlParser.MACCE:
            case MySqlParser.MACROMAN:
            case MySqlParser.SJIS:
            case MySqlParser.SWE7:
            case MySqlParser.TIS620:
            case MySqlParser.UCS2:
            case MySqlParser.UJIS:
            case MySqlParser.UTF16:
            case MySqlParser.UTF16LE:
            case MySqlParser.UTF32:
            case MySqlParser.UTF8:
            case MySqlParser.UTF8MB3:
            case MySqlParser.UTF8MB4:
            case MySqlParser.ARCHIVE:
            case MySqlParser.BLACKHOLE:
            case MySqlParser.CSV:
            case MySqlParser.FEDERATED:
            case MySqlParser.INNODB:
            case MySqlParser.MEMORY:
            case MySqlParser.MRG_MYISAM:
            case MySqlParser.MYISAM:
            case MySqlParser.NDB:
            case MySqlParser.NDBCLUSTER:
            case MySqlParser.PERFORMANCE_SCHEMA:
            case MySqlParser.TOKUDB:
            case MySqlParser.REPEATABLE:
            case MySqlParser.COMMITTED:
            case MySqlParser.UNCOMMITTED:
            case MySqlParser.SERIALIZABLE:
            case MySqlParser.GEOMETRYCOLLECTION:
            case MySqlParser.LINESTRING:
            case MySqlParser.MULTILINESTRING:
            case MySqlParser.MULTIPOINT:
            case MySqlParser.MULTIPOLYGON:
            case MySqlParser.POINT:
            case MySqlParser.POLYGON:
            case MySqlParser.ABS:
            case MySqlParser.ACOS:
            case MySqlParser.ADDDATE:
            case MySqlParser.ADDTIME:
            case MySqlParser.AES_DECRYPT:
            case MySqlParser.AES_ENCRYPT:
            case MySqlParser.AREA:
            case MySqlParser.ASBINARY:
            case MySqlParser.ASIN:
            case MySqlParser.ASTEXT:
            case MySqlParser.ASWKB:
            case MySqlParser.ASWKT:
            case MySqlParser.ASYMMETRIC_DECRYPT:
            case MySqlParser.ASYMMETRIC_DERIVE:
            case MySqlParser.ASYMMETRIC_ENCRYPT:
            case MySqlParser.ASYMMETRIC_SIGN:
            case MySqlParser.ASYMMETRIC_VERIFY:
            case MySqlParser.ATAN:
            case MySqlParser.ATAN2:
            case MySqlParser.BENCHMARK:
            case MySqlParser.BIN:
            case MySqlParser.BIT_COUNT:
            case MySqlParser.BIT_LENGTH:
            case MySqlParser.BUFFER:
            case MySqlParser.CATALOG_NAME:
            case MySqlParser.CEIL:
            case MySqlParser.CEILING:
            case MySqlParser.CENTROID:
            case MySqlParser.CHARACTER_LENGTH:
            case MySqlParser.CHARSET:
            case MySqlParser.CHAR_LENGTH:
            case MySqlParser.COERCIBILITY:
            case MySqlParser.COLLATION:
            case MySqlParser.COMPRESS:
            case MySqlParser.CONCAT:
            case MySqlParser.CONCAT_WS:
            case MySqlParser.CONNECTION_ID:
            case MySqlParser.CONV:
            case MySqlParser.CONVERT_TZ:
            case MySqlParser.COS:
            case MySqlParser.COT:
            case MySqlParser.CRC32:
            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySqlParser.CREATE_DH_PARAMETERS:
            case MySqlParser.CREATE_DIGEST:
            case MySqlParser.CROSSES:
            case MySqlParser.DATEDIFF:
            case MySqlParser.DATE_FORMAT:
            case MySqlParser.DAYNAME:
            case MySqlParser.DAYOFMONTH:
            case MySqlParser.DAYOFWEEK:
            case MySqlParser.DAYOFYEAR:
            case MySqlParser.DECODE:
            case MySqlParser.DEGREES:
            case MySqlParser.DES_DECRYPT:
            case MySqlParser.DES_ENCRYPT:
            case MySqlParser.DIMENSION:
            case MySqlParser.DISJOINT:
            case MySqlParser.ELT:
            case MySqlParser.ENCODE:
            case MySqlParser.ENCRYPT:
            case MySqlParser.ENDPOINT:
            case MySqlParser.ENGINE_ATTRIBUTE:
            case MySqlParser.ENVELOPE:
            case MySqlParser.EQUALS:
            case MySqlParser.EXP:
            case MySqlParser.EXPORT_SET:
            case MySqlParser.EXTERIORRING:
            case MySqlParser.EXTRACTVALUE:
            case MySqlParser.FIELD:
            case MySqlParser.FIND_IN_SET:
            case MySqlParser.FLOOR:
            case MySqlParser.FORMAT:
            case MySqlParser.FOUND_ROWS:
            case MySqlParser.FROM_BASE64:
            case MySqlParser.FROM_DAYS:
            case MySqlParser.FROM_UNIXTIME:
            case MySqlParser.GEOMCOLLFROMTEXT:
            case MySqlParser.GEOMCOLLFROMWKB:
            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.GEOMETRYFROMTEXT:
            case MySqlParser.GEOMETRYFROMWKB:
            case MySqlParser.GEOMETRYN:
            case MySqlParser.GEOMETRYTYPE:
            case MySqlParser.GEOMFROMTEXT:
            case MySqlParser.GEOMFROMWKB:
            case MySqlParser.GET_FORMAT:
            case MySqlParser.GET_LOCK:
            case MySqlParser.GLENGTH:
            case MySqlParser.GREATEST:
            case MySqlParser.GTID_SUBSET:
            case MySqlParser.GTID_SUBTRACT:
            case MySqlParser.HEX:
            case MySqlParser.IFNULL:
            case MySqlParser.INET6_ATON:
            case MySqlParser.INET6_NTOA:
            case MySqlParser.INET_ATON:
            case MySqlParser.INET_NTOA:
            case MySqlParser.INSTR:
            case MySqlParser.INTERIORRINGN:
            case MySqlParser.INTERSECTS:
            case MySqlParser.ISCLOSED:
            case MySqlParser.ISEMPTY:
            case MySqlParser.ISNULL:
            case MySqlParser.ISSIMPLE:
            case MySqlParser.IS_FREE_LOCK:
            case MySqlParser.IS_IPV4:
            case MySqlParser.IS_IPV4_COMPAT:
            case MySqlParser.IS_IPV4_MAPPED:
            case MySqlParser.IS_IPV6:
            case MySqlParser.IS_USED_LOCK:
            case MySqlParser.LAST_INSERT_ID:
            case MySqlParser.LCASE:
            case MySqlParser.LEAST:
            case MySqlParser.LENGTH:
            case MySqlParser.LINEFROMTEXT:
            case MySqlParser.LINEFROMWKB:
            case MySqlParser.LINESTRINGFROMTEXT:
            case MySqlParser.LINESTRINGFROMWKB:
            case MySqlParser.LN:
            case MySqlParser.LOAD_FILE:
            case MySqlParser.LOCATE:
            case MySqlParser.LOG:
            case MySqlParser.LOG10:
            case MySqlParser.LOG2:
            case MySqlParser.LOWER:
            case MySqlParser.LPAD:
            case MySqlParser.LTRIM:
            case MySqlParser.MAKEDATE:
            case MySqlParser.MAKETIME:
            case MySqlParser.MAKE_SET:
            case MySqlParser.MASTER_POS_WAIT:
            case MySqlParser.MBRCONTAINS:
            case MySqlParser.MBRDISJOINT:
            case MySqlParser.MBREQUAL:
            case MySqlParser.MBRINTERSECTS:
            case MySqlParser.MBROVERLAPS:
            case MySqlParser.MBRTOUCHES:
            case MySqlParser.MBRWITHIN:
            case MySqlParser.MD5:
            case MySqlParser.MLINEFROMTEXT:
            case MySqlParser.MLINEFROMWKB:
            case MySqlParser.MONTHNAME:
            case MySqlParser.MPOINTFROMTEXT:
            case MySqlParser.MPOINTFROMWKB:
            case MySqlParser.MPOLYFROMTEXT:
            case MySqlParser.MPOLYFROMWKB:
            case MySqlParser.MULTILINESTRINGFROMTEXT:
            case MySqlParser.MULTILINESTRINGFROMWKB:
            case MySqlParser.MULTIPOINTFROMTEXT:
            case MySqlParser.MULTIPOINTFROMWKB:
            case MySqlParser.MULTIPOLYGONFROMTEXT:
            case MySqlParser.MULTIPOLYGONFROMWKB:
            case MySqlParser.NAME_CONST:
            case MySqlParser.NULLIF:
            case MySqlParser.NUMGEOMETRIES:
            case MySqlParser.NUMINTERIORRINGS:
            case MySqlParser.NUMPOINTS:
            case MySqlParser.OCT:
            case MySqlParser.OCTET_LENGTH:
            case MySqlParser.ORD:
            case MySqlParser.OVERLAPS:
            case MySqlParser.PERIOD_ADD:
            case MySqlParser.PERIOD_DIFF:
            case MySqlParser.PI:
            case MySqlParser.POINTFROMTEXT:
            case MySqlParser.POINTFROMWKB:
            case MySqlParser.POINTN:
            case MySqlParser.POLYFROMTEXT:
            case MySqlParser.POLYFROMWKB:
            case MySqlParser.POLYGONFROMTEXT:
            case MySqlParser.POLYGONFROMWKB:
            case MySqlParser.POW:
            case MySqlParser.POWER:
            case MySqlParser.QUOTE:
            case MySqlParser.RADIANS:
            case MySqlParser.RAND:
            case MySqlParser.RANDOM:
            case MySqlParser.RANDOM_BYTES:
            case MySqlParser.RELEASE_LOCK:
            case MySqlParser.REVERSE:
            case MySqlParser.ROUND:
            case MySqlParser.ROW_COUNT:
            case MySqlParser.RPAD:
            case MySqlParser.RTRIM:
            case MySqlParser.SEC_TO_TIME:
            case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
            case MySqlParser.SESSION_USER:
            case MySqlParser.SHA:
            case MySqlParser.SHA1:
            case MySqlParser.SHA2:
            case MySqlParser.SCHEMA_NAME:
            case MySqlParser.SIGN:
            case MySqlParser.SIN:
            case MySqlParser.SLEEP:
            case MySqlParser.SOUNDEX:
            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySqlParser.SQRT:
            case MySqlParser.SRID:
            case MySqlParser.STARTPOINT:
            case MySqlParser.STRCMP:
            case MySqlParser.STR_TO_DATE:
            case MySqlParser.ST_AREA:
            case MySqlParser.ST_ASBINARY:
            case MySqlParser.ST_ASTEXT:
            case MySqlParser.ST_ASWKB:
            case MySqlParser.ST_ASWKT:
            case MySqlParser.ST_BUFFER:
            case MySqlParser.ST_CENTROID:
            case MySqlParser.ST_CONTAINS:
            case MySqlParser.ST_CROSSES:
            case MySqlParser.ST_DIFFERENCE:
            case MySqlParser.ST_DIMENSION:
            case MySqlParser.ST_DISJOINT:
            case MySqlParser.ST_DISTANCE:
            case MySqlParser.ST_ENDPOINT:
            case MySqlParser.ST_ENVELOPE:
            case MySqlParser.ST_EQUALS:
            case MySqlParser.ST_EXTERIORRING:
            case MySqlParser.ST_GEOMCOLLFROMTEXT:
            case MySqlParser.ST_GEOMCOLLFROMTXT:
            case MySqlParser.ST_GEOMCOLLFROMWKB:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.ST_GEOMETRYFROMTEXT:
            case MySqlParser.ST_GEOMETRYFROMWKB:
            case MySqlParser.ST_GEOMETRYN:
            case MySqlParser.ST_GEOMETRYTYPE:
            case MySqlParser.ST_GEOMFROMTEXT:
            case MySqlParser.ST_GEOMFROMWKB:
            case MySqlParser.ST_INTERIORRINGN:
            case MySqlParser.ST_INTERSECTION:
            case MySqlParser.ST_INTERSECTS:
            case MySqlParser.ST_ISCLOSED:
            case MySqlParser.ST_ISEMPTY:
            case MySqlParser.ST_ISSIMPLE:
            case MySqlParser.ST_LINEFROMTEXT:
            case MySqlParser.ST_LINEFROMWKB:
            case MySqlParser.ST_LINESTRINGFROMTEXT:
            case MySqlParser.ST_LINESTRINGFROMWKB:
            case MySqlParser.ST_NUMGEOMETRIES:
            case MySqlParser.ST_NUMINTERIORRING:
            case MySqlParser.ST_NUMINTERIORRINGS:
            case MySqlParser.ST_NUMPOINTS:
            case MySqlParser.ST_OVERLAPS:
            case MySqlParser.ST_POINTFROMTEXT:
            case MySqlParser.ST_POINTFROMWKB:
            case MySqlParser.ST_POINTN:
            case MySqlParser.ST_POLYFROMTEXT:
            case MySqlParser.ST_POLYFROMWKB:
            case MySqlParser.ST_POLYGONFROMTEXT:
            case MySqlParser.ST_POLYGONFROMWKB:
            case MySqlParser.ST_SRID:
            case MySqlParser.ST_STARTPOINT:
            case MySqlParser.ST_SYMDIFFERENCE:
            case MySqlParser.ST_TOUCHES:
            case MySqlParser.ST_UNION:
            case MySqlParser.ST_WITHIN:
            case MySqlParser.ST_X:
            case MySqlParser.ST_Y:
            case MySqlParser.SUBDATE:
            case MySqlParser.SUBSTRING_INDEX:
            case MySqlParser.SUBTIME:
            case MySqlParser.SYSTEM_USER:
            case MySqlParser.TAN:
            case MySqlParser.TIMEDIFF:
            case MySqlParser.TIMESTAMPADD:
            case MySqlParser.TIMESTAMPDIFF:
            case MySqlParser.TIME_FORMAT:
            case MySqlParser.TIME_TO_SEC:
            case MySqlParser.TOUCHES:
            case MySqlParser.TO_BASE64:
            case MySqlParser.TO_DAYS:
            case MySqlParser.TO_SECONDS:
            case MySqlParser.TP_CONNECTION_ADMIN:
            case MySqlParser.UCASE:
            case MySqlParser.UNCOMPRESS:
            case MySqlParser.UNCOMPRESSED_LENGTH:
            case MySqlParser.UNHEX:
            case MySqlParser.UNIX_TIMESTAMP:
            case MySqlParser.UPDATEXML:
            case MySqlParser.UPPER:
            case MySqlParser.UUID:
            case MySqlParser.UUID_SHORT:
            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
            case MySqlParser.VERSION:
            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySqlParser.WEEKDAY:
            case MySqlParser.WEEKOFYEAR:
            case MySqlParser.WEIGHT_STRING:
            case MySqlParser.WITHIN:
            case MySqlParser.YEARWEEK:
            case MySqlParser.Y_FUNCTION:
            case MySqlParser.X_FUNCTION:
            case MySqlParser.MOD:
            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySqlParser.STRING_LITERAL:
            case MySqlParser.ID:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3502;
                this.uid();
                }
                break;
            case MySqlParser.LOCAL_ID:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3503;
                this.match(MySqlParser.LOCAL_ID);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockClause(): LockClauseContext {
        let localContext = new LockClauseContext(this.context, this.state);
        this.enterRule(localContext, 210, MySqlParser.RULE_lockClause);
        try {
            this.state = 3512;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.FOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3506;
                this.match(MySqlParser.FOR);
                this.state = 3507;
                this.match(MySqlParser.UPDATE);
                }
                break;
            case MySqlParser.LOCK:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3508;
                this.match(MySqlParser.LOCK);
                this.state = 3509;
                this.match(MySqlParser.IN);
                this.state = 3510;
                this.match(MySqlParser.SHARE);
                this.state = 3511;
                this.match(MySqlParser.MODE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleDeleteStatement(): SingleDeleteStatementContext {
        let localContext = new SingleDeleteStatementContext(this.context, this.state);
        this.enterRule(localContext, 212, MySqlParser.RULE_singleDeleteStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3514;
            this.match(MySqlParser.DELETE);
            this.state = 3516;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 106) {
                {
                this.state = 3515;
                localContext._priority = this.match(MySqlParser.LOW_PRIORITY);
                }
            }

            this.state = 3519;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 568) {
                {
                this.state = 3518;
                this.match(MySqlParser.QUICK);
                }
            }

            this.state = 3522;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78) {
                {
                this.state = 3521;
                this.match(MySqlParser.IGNORE);
                }
            }

            this.state = 3524;
            this.match(MySqlParser.FROM);
            this.state = 3525;
            this.tableName();
            this.state = 3530;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 486, this.context) ) {
            case 1:
                {
                this.state = 3527;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12) {
                    {
                    this.state = 3526;
                    this.match(MySqlParser.AS);
                    }
                }

                this.state = 3529;
                this.uid();
                }
                break;
            }
            this.state = 3537;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 3532;
                this.match(MySqlParser.PARTITION);
                this.state = 3533;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3534;
                this.uidList();
                this.state = 3535;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 3541;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 190) {
                {
                this.state = 3539;
                this.match(MySqlParser.WHERE);
                this.state = 3540;
                this.expression(0);
                }
            }

            this.state = 3544;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 124) {
                {
                this.state = 3543;
                this.orderByClause();
                }
            }

            this.state = 3548;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99) {
                {
                this.state = 3546;
                this.match(MySqlParser.LIMIT);
                this.state = 3547;
                this.limitClauseAtom();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipleDeleteStatement(): MultipleDeleteStatementContext {
        let localContext = new MultipleDeleteStatementContext(this.context, this.state);
        this.enterRule(localContext, 214, MySqlParser.RULE_multipleDeleteStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3550;
            this.match(MySqlParser.DELETE);
            this.state = 3552;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 106) {
                {
                this.state = 3551;
                localContext._priority = this.match(MySqlParser.LOW_PRIORITY);
                }
            }

            this.state = 3555;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 492, this.context) ) {
            case 1:
                {
                this.state = 3554;
                this.match(MySqlParser.QUICK);
                }
                break;
            }
            this.state = 3558;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78) {
                {
                this.state = 3557;
                this.match(MySqlParser.IGNORE);
                }
            }

            this.state = 3599;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ARRAY:
            case MySqlParser.ATTRIBUTE:
            case MySqlParser.BUCKETS:
            case MySqlParser.CONDITION:
            case MySqlParser.CURRENT:
            case MySqlParser.CURRENT_USER:
            case MySqlParser.DATABASE:
            case MySqlParser.DEFAULT:
            case MySqlParser.DIAGNOSTICS:
            case MySqlParser.EMPTY:
            case MySqlParser.ENFORCED:
            case MySqlParser.EXCEPT:
            case MySqlParser.GROUP:
            case MySqlParser.IF:
            case MySqlParser.IGNORED:
            case MySqlParser.INSERT:
            case MySqlParser.LATERAL:
            case MySqlParser.LEFT:
            case MySqlParser.NUMBER:
            case MySqlParser.OPTIONAL:
            case MySqlParser.ORDER:
            case MySqlParser.PRIMARY:
            case MySqlParser.REPEAT:
            case MySqlParser.REPLACE:
            case MySqlParser.RIGHT:
            case MySqlParser.SCHEMA:
            case MySqlParser.SKIP_QUERY_REWRITE:
            case MySqlParser.STACKED:
            case MySqlParser.DATE:
            case MySqlParser.TIME:
            case MySqlParser.TIMESTAMP:
            case MySqlParser.DATETIME:
            case MySqlParser.YEAR:
            case MySqlParser.BINARY:
            case MySqlParser.TEXT:
            case MySqlParser.ENUM:
            case MySqlParser.SERIAL:
            case MySqlParser.JSON_ARRAY:
            case MySqlParser.JSON_ARRAYAGG:
            case MySqlParser.JSON_ARRAY_APPEND:
            case MySqlParser.JSON_ARRAY_INSERT:
            case MySqlParser.JSON_CONTAINS:
            case MySqlParser.JSON_CONTAINS_PATH:
            case MySqlParser.JSON_DEPTH:
            case MySqlParser.JSON_EXTRACT:
            case MySqlParser.JSON_INSERT:
            case MySqlParser.JSON_KEYS:
            case MySqlParser.JSON_LENGTH:
            case MySqlParser.JSON_MERGE:
            case MySqlParser.JSON_MERGE_PATCH:
            case MySqlParser.JSON_MERGE_PRESERVE:
            case MySqlParser.JSON_OBJECT:
            case MySqlParser.JSON_OBJECTAGG:
            case MySqlParser.JSON_OVERLAPS:
            case MySqlParser.JSON_PRETTY:
            case MySqlParser.JSON_QUOTE:
            case MySqlParser.JSON_REMOVE:
            case MySqlParser.JSON_REPLACE:
            case MySqlParser.JSON_SCHEMA_VALID:
            case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
            case MySqlParser.JSON_SEARCH:
            case MySqlParser.JSON_SET:
            case MySqlParser.JSON_STORAGE_FREE:
            case MySqlParser.JSON_STORAGE_SIZE:
            case MySqlParser.JSON_TABLE:
            case MySqlParser.JSON_TYPE:
            case MySqlParser.JSON_UNQUOTE:
            case MySqlParser.JSON_VALID:
            case MySqlParser.JSON_VALUE:
            case MySqlParser.NESTED:
            case MySqlParser.ORDINALITY:
            case MySqlParser.PATH:
            case MySqlParser.AVG:
            case MySqlParser.BIT_AND:
            case MySqlParser.BIT_OR:
            case MySqlParser.BIT_XOR:
            case MySqlParser.COUNT:
            case MySqlParser.CUME_DIST:
            case MySqlParser.DENSE_RANK:
            case MySqlParser.FIRST_VALUE:
            case MySqlParser.GROUP_CONCAT:
            case MySqlParser.LAG:
            case MySqlParser.LAST_VALUE:
            case MySqlParser.LEAD:
            case MySqlParser.MAX:
            case MySqlParser.MIN:
            case MySqlParser.NTILE:
            case MySqlParser.NTH_VALUE:
            case MySqlParser.PERCENT_RANK:
            case MySqlParser.RANK:
            case MySqlParser.ROW_NUMBER:
            case MySqlParser.STD:
            case MySqlParser.STDDEV:
            case MySqlParser.STDDEV_POP:
            case MySqlParser.STDDEV_SAMP:
            case MySqlParser.SUM:
            case MySqlParser.VAR_POP:
            case MySqlParser.VAR_SAMP:
            case MySqlParser.VARIANCE:
            case MySqlParser.CURRENT_DATE:
            case MySqlParser.CURRENT_TIME:
            case MySqlParser.CURRENT_TIMESTAMP:
            case MySqlParser.LOCALTIME:
            case MySqlParser.CURDATE:
            case MySqlParser.CURTIME:
            case MySqlParser.DATE_ADD:
            case MySqlParser.DATE_SUB:
            case MySqlParser.LOCALTIMESTAMP:
            case MySqlParser.NOW:
            case MySqlParser.POSITION:
            case MySqlParser.SUBSTR:
            case MySqlParser.SUBSTRING:
            case MySqlParser.SYSDATE:
            case MySqlParser.TRIM:
            case MySqlParser.UTC_DATE:
            case MySqlParser.UTC_TIME:
            case MySqlParser.UTC_TIMESTAMP:
            case MySqlParser.ACCOUNT:
            case MySqlParser.ACTION:
            case MySqlParser.AFTER:
            case MySqlParser.AGGREGATE:
            case MySqlParser.ALGORITHM:
            case MySqlParser.ANY:
            case MySqlParser.AT:
            case MySqlParser.AUTHORS:
            case MySqlParser.AUTOCOMMIT:
            case MySqlParser.AUTOEXTEND_SIZE:
            case MySqlParser.AUTO_INCREMENT:
            case MySqlParser.AVG_ROW_LENGTH:
            case MySqlParser.BEGIN:
            case MySqlParser.BINLOG:
            case MySqlParser.BIT:
            case MySqlParser.BLOCK:
            case MySqlParser.BOOL:
            case MySqlParser.BOOLEAN:
            case MySqlParser.BTREE:
            case MySqlParser.CACHE:
            case MySqlParser.CASCADED:
            case MySqlParser.CHAIN:
            case MySqlParser.CHANGED:
            case MySqlParser.CHANNEL:
            case MySqlParser.CHECKSUM:
            case MySqlParser.PAGE_CHECKSUM:
            case MySqlParser.CIPHER:
            case MySqlParser.CLASS_ORIGIN:
            case MySqlParser.CLIENT:
            case MySqlParser.CLOSE:
            case MySqlParser.CLUSTERING:
            case MySqlParser.COALESCE:
            case MySqlParser.CODE:
            case MySqlParser.COLUMNS:
            case MySqlParser.COLUMN_FORMAT:
            case MySqlParser.COLUMN_NAME:
            case MySqlParser.COMMENT:
            case MySqlParser.COMMIT:
            case MySqlParser.COMPACT:
            case MySqlParser.COMPLETION:
            case MySqlParser.COMPRESSED:
            case MySqlParser.COMPRESSION:
            case MySqlParser.CONCURRENT:
            case MySqlParser.CONNECT:
            case MySqlParser.CONNECTION:
            case MySqlParser.CONSISTENT:
            case MySqlParser.CONSTRAINT_CATALOG:
            case MySqlParser.CONSTRAINT_SCHEMA:
            case MySqlParser.CONSTRAINT_NAME:
            case MySqlParser.CONTAINS:
            case MySqlParser.CONTEXT:
            case MySqlParser.CONTRIBUTORS:
            case MySqlParser.COPY:
            case MySqlParser.CPU:
            case MySqlParser.CURSOR_NAME:
            case MySqlParser.DATA:
            case MySqlParser.DATAFILE:
            case MySqlParser.DEALLOCATE:
            case MySqlParser.DEFAULT_AUTH:
            case MySqlParser.DEFINER:
            case MySqlParser.DELAY_KEY_WRITE:
            case MySqlParser.DES_KEY_FILE:
            case MySqlParser.DIRECTORY:
            case MySqlParser.DISABLE:
            case MySqlParser.DISCARD:
            case MySqlParser.DISK:
            case MySqlParser.DO:
            case MySqlParser.DUMPFILE:
            case MySqlParser.DUPLICATE:
            case MySqlParser.DYNAMIC:
            case MySqlParser.ENABLE:
            case MySqlParser.ENCRYPTION:
            case MySqlParser.END:
            case MySqlParser.ENDS:
            case MySqlParser.ENGINE:
            case MySqlParser.ENGINES:
            case MySqlParser.ERROR:
            case MySqlParser.ERRORS:
            case MySqlParser.ESCAPE:
            case MySqlParser.EVEN:
            case MySqlParser.EVENT:
            case MySqlParser.EVENTS:
            case MySqlParser.EVERY:
            case MySqlParser.EXCHANGE:
            case MySqlParser.EXCLUSIVE:
            case MySqlParser.EXPIRE:
            case MySqlParser.EXPORT:
            case MySqlParser.EXTENDED:
            case MySqlParser.EXTENT_SIZE:
            case MySqlParser.FAILED_LOGIN_ATTEMPTS:
            case MySqlParser.FAST:
            case MySqlParser.FAULTS:
            case MySqlParser.FIELDS:
            case MySqlParser.FILE_BLOCK_SIZE:
            case MySqlParser.FILTER:
            case MySqlParser.FIRST:
            case MySqlParser.FIXED:
            case MySqlParser.FLUSH:
            case MySqlParser.FOLLOWS:
            case MySqlParser.FOUND:
            case MySqlParser.FULL:
            case MySqlParser.FUNCTION:
            case MySqlParser.GENERAL:
            case MySqlParser.GLOBAL:
            case MySqlParser.GRANTS:
            case MySqlParser.GROUP_REPLICATION:
            case MySqlParser.HANDLER:
            case MySqlParser.HASH:
            case MySqlParser.HELP:
            case MySqlParser.HISTORY:
            case MySqlParser.HOST:
            case MySqlParser.HOSTS:
            case MySqlParser.IDENTIFIED:
            case MySqlParser.IGNORE_SERVER_IDS:
            case MySqlParser.IMPORT:
            case MySqlParser.INDEXES:
            case MySqlParser.INITIAL_SIZE:
            case MySqlParser.INPLACE:
            case MySqlParser.INSERT_METHOD:
            case MySqlParser.INSTALL:
            case MySqlParser.INSTANCE:
            case MySqlParser.INSTANT:
            case MySqlParser.INVISIBLE:
            case MySqlParser.INVOKER:
            case MySqlParser.IO:
            case MySqlParser.IO_THREAD:
            case MySqlParser.IPC:
            case MySqlParser.ISOLATION:
            case MySqlParser.ISSUER:
            case MySqlParser.JSON:
            case MySqlParser.KEY_BLOCK_SIZE:
            case MySqlParser.LANGUAGE:
            case MySqlParser.LAST:
            case MySqlParser.LEAVES:
            case MySqlParser.LESS:
            case MySqlParser.LEVEL:
            case MySqlParser.LIST:
            case MySqlParser.LOCAL:
            case MySqlParser.LOGFILE:
            case MySqlParser.LOGS:
            case MySqlParser.MASTER:
            case MySqlParser.MASTER_AUTO_POSITION:
            case MySqlParser.MASTER_CONNECT_RETRY:
            case MySqlParser.MASTER_DELAY:
            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
            case MySqlParser.MASTER_HOST:
            case MySqlParser.MASTER_LOG_FILE:
            case MySqlParser.MASTER_LOG_POS:
            case MySqlParser.MASTER_PASSWORD:
            case MySqlParser.MASTER_PORT:
            case MySqlParser.MASTER_RETRY_COUNT:
            case MySqlParser.MASTER_SSL:
            case MySqlParser.MASTER_SSL_CA:
            case MySqlParser.MASTER_SSL_CAPATH:
            case MySqlParser.MASTER_SSL_CERT:
            case MySqlParser.MASTER_SSL_CIPHER:
            case MySqlParser.MASTER_SSL_CRL:
            case MySqlParser.MASTER_SSL_CRLPATH:
            case MySqlParser.MASTER_SSL_KEY:
            case MySqlParser.MASTER_TLS_VERSION:
            case MySqlParser.MASTER_USER:
            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
            case MySqlParser.MAX_QUERIES_PER_HOUR:
            case MySqlParser.MAX_ROWS:
            case MySqlParser.MAX_SIZE:
            case MySqlParser.MAX_UPDATES_PER_HOUR:
            case MySqlParser.MAX_USER_CONNECTIONS:
            case MySqlParser.MEDIUM:
            case MySqlParser.MEMBER:
            case MySqlParser.MERGE:
            case MySqlParser.MESSAGE_TEXT:
            case MySqlParser.MID:
            case MySqlParser.MIGRATE:
            case MySqlParser.MIN_ROWS:
            case MySqlParser.MODE:
            case MySqlParser.MODIFY:
            case MySqlParser.MUTEX:
            case MySqlParser.MYSQL:
            case MySqlParser.MYSQL_ERRNO:
            case MySqlParser.NAME:
            case MySqlParser.NAMES:
            case MySqlParser.NCHAR:
            case MySqlParser.NEVER:
            case MySqlParser.NEXT:
            case MySqlParser.NO:
            case MySqlParser.NOCOPY:
            case MySqlParser.NOWAIT:
            case MySqlParser.NODEGROUP:
            case MySqlParser.NONE:
            case MySqlParser.ODBC:
            case MySqlParser.OFFLINE:
            case MySqlParser.OFFSET:
            case MySqlParser.OF:
            case MySqlParser.OJ:
            case MySqlParser.OLD_PASSWORD:
            case MySqlParser.ONE:
            case MySqlParser.ONLINE:
            case MySqlParser.ONLY:
            case MySqlParser.OPEN:
            case MySqlParser.OPTIMIZER_COSTS:
            case MySqlParser.OPTIONS:
            case MySqlParser.OWNER:
            case MySqlParser.PACK_KEYS:
            case MySqlParser.PAGE:
            case MySqlParser.PARSER:
            case MySqlParser.PARTIAL:
            case MySqlParser.PARTITIONING:
            case MySqlParser.PARTITIONS:
            case MySqlParser.PASSWORD:
            case MySqlParser.PASSWORD_LOCK_TIME:
            case MySqlParser.PHASE:
            case MySqlParser.PLUGIN:
            case MySqlParser.PLUGIN_DIR:
            case MySqlParser.PLUGINS:
            case MySqlParser.PORT:
            case MySqlParser.PRECEDES:
            case MySqlParser.PREPARE:
            case MySqlParser.PRESERVE:
            case MySqlParser.PREV:
            case MySqlParser.PROCESSLIST:
            case MySqlParser.PROFILE:
            case MySqlParser.PROFILES:
            case MySqlParser.PROXY:
            case MySqlParser.QUERY:
            case MySqlParser.QUICK:
            case MySqlParser.REBUILD:
            case MySqlParser.RECOVER:
            case MySqlParser.RECURSIVE:
            case MySqlParser.REDO_BUFFER_SIZE:
            case MySqlParser.REDUNDANT:
            case MySqlParser.RELAY:
            case MySqlParser.RELAY_LOG_FILE:
            case MySqlParser.RELAY_LOG_POS:
            case MySqlParser.RELAYLOG:
            case MySqlParser.REMOVE:
            case MySqlParser.REORGANIZE:
            case MySqlParser.REPAIR:
            case MySqlParser.REPLICATE_DO_DB:
            case MySqlParser.REPLICATE_DO_TABLE:
            case MySqlParser.REPLICATE_IGNORE_DB:
            case MySqlParser.REPLICATE_IGNORE_TABLE:
            case MySqlParser.REPLICATE_REWRITE_DB:
            case MySqlParser.REPLICATE_WILD_DO_TABLE:
            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySqlParser.REPLICATION:
            case MySqlParser.RESET:
            case MySqlParser.RESUME:
            case MySqlParser.RETURNED_SQLSTATE:
            case MySqlParser.RETURNS:
            case MySqlParser.REUSE:
            case MySqlParser.ROLE:
            case MySqlParser.ROLLBACK:
            case MySqlParser.ROLLUP:
            case MySqlParser.ROTATE:
            case MySqlParser.ROW:
            case MySqlParser.ROWS:
            case MySqlParser.ROW_FORMAT:
            case MySqlParser.RTREE:
            case MySqlParser.SAVEPOINT:
            case MySqlParser.SCHEDULE:
            case MySqlParser.SECURITY:
            case MySqlParser.SERVER:
            case MySqlParser.SESSION:
            case MySqlParser.SHARE:
            case MySqlParser.SHARED:
            case MySqlParser.SIGNED:
            case MySqlParser.SIMPLE:
            case MySqlParser.SLAVE:
            case MySqlParser.SLOW:
            case MySqlParser.SNAPSHOT:
            case MySqlParser.SOCKET:
            case MySqlParser.SOME:
            case MySqlParser.SONAME:
            case MySqlParser.SOUNDS:
            case MySqlParser.SOURCE:
            case MySqlParser.SQL_AFTER_GTIDS:
            case MySqlParser.SQL_AFTER_MTS_GAPS:
            case MySqlParser.SQL_BEFORE_GTIDS:
            case MySqlParser.SQL_BUFFER_RESULT:
            case MySqlParser.SQL_CACHE:
            case MySqlParser.SQL_NO_CACHE:
            case MySqlParser.SQL_THREAD:
            case MySqlParser.START:
            case MySqlParser.STARTS:
            case MySqlParser.STATS_AUTO_RECALC:
            case MySqlParser.STATS_PERSISTENT:
            case MySqlParser.STATS_SAMPLE_PAGES:
            case MySqlParser.STATUS:
            case MySqlParser.STOP:
            case MySqlParser.STORAGE:
            case MySqlParser.STRING:
            case MySqlParser.SUBCLASS_ORIGIN:
            case MySqlParser.SUBJECT:
            case MySqlParser.SUBPARTITION:
            case MySqlParser.SUBPARTITIONS:
            case MySqlParser.SUSPEND:
            case MySqlParser.SWAPS:
            case MySqlParser.SWITCHES:
            case MySqlParser.TABLE_NAME:
            case MySqlParser.TABLESPACE:
            case MySqlParser.TABLE_TYPE:
            case MySqlParser.TEMPORARY:
            case MySqlParser.TEMPTABLE:
            case MySqlParser.THAN:
            case MySqlParser.TRADITIONAL:
            case MySqlParser.TRANSACTION:
            case MySqlParser.TRANSACTIONAL:
            case MySqlParser.TRIGGERS:
            case MySqlParser.TRUNCATE:
            case MySqlParser.UNBOUNDED:
            case MySqlParser.UNDEFINED:
            case MySqlParser.UNDOFILE:
            case MySqlParser.UNDO_BUFFER_SIZE:
            case MySqlParser.UNINSTALL:
            case MySqlParser.UNKNOWN:
            case MySqlParser.UNTIL:
            case MySqlParser.UPGRADE:
            case MySqlParser.USER:
            case MySqlParser.USE_FRM:
            case MySqlParser.USER_RESOURCES:
            case MySqlParser.VALIDATION:
            case MySqlParser.VALUE:
            case MySqlParser.VARIABLES:
            case MySqlParser.VIEW:
            case MySqlParser.VIRTUAL:
            case MySqlParser.VISIBLE:
            case MySqlParser.WAIT:
            case MySqlParser.WARNINGS:
            case MySqlParser.WITHOUT:
            case MySqlParser.WORK:
            case MySqlParser.WRAPPER:
            case MySqlParser.X509:
            case MySqlParser.XA:
            case MySqlParser.XML:
            case MySqlParser.EUR:
            case MySqlParser.USA:
            case MySqlParser.JIS:
            case MySqlParser.ISO:
            case MySqlParser.INTERNAL:
            case MySqlParser.QUARTER:
            case MySqlParser.MONTH:
            case MySqlParser.DAY:
            case MySqlParser.HOUR:
            case MySqlParser.MINUTE:
            case MySqlParser.WEEK:
            case MySqlParser.SECOND:
            case MySqlParser.MICROSECOND:
            case MySqlParser.ADMIN:
            case MySqlParser.AUDIT_ABORT_EXEMPT:
            case MySqlParser.AUDIT_ADMIN:
            case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
            case MySqlParser.BACKUP_ADMIN:
            case MySqlParser.BINLOG_ADMIN:
            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
            case MySqlParser.CLONE_ADMIN:
            case MySqlParser.CONNECTION_ADMIN:
            case MySqlParser.ENCRYPTION_KEY_ADMIN:
            case MySqlParser.EXECUTE:
            case MySqlParser.FILE:
            case MySqlParser.FIREWALL_ADMIN:
            case MySqlParser.FIREWALL_EXEMPT:
            case MySqlParser.FIREWALL_USER:
            case MySqlParser.GROUP_REPLICATION_ADMIN:
            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
            case MySqlParser.INVOKE:
            case MySqlParser.LAMBDA:
            case MySqlParser.NDB_STORED_USER:
            case MySqlParser.PASSWORDLESS_USER_ADMIN:
            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySqlParser.PRIVILEGES:
            case MySqlParser.PROCESS:
            case MySqlParser.RELOAD:
            case MySqlParser.REPLICATION_APPLIER:
            case MySqlParser.REPLICATION_SLAVE_ADMIN:
            case MySqlParser.RESOURCE_GROUP_ADMIN:
            case MySqlParser.RESOURCE_GROUP_USER:
            case MySqlParser.ROLE_ADMIN:
            case MySqlParser.ROUTINE:
            case MySqlParser.S3:
            case MySqlParser.SESSION_VARIABLES_ADMIN:
            case MySqlParser.SET_USER_ID:
            case MySqlParser.SHOW_ROUTINE:
            case MySqlParser.SHUTDOWN:
            case MySqlParser.SUPER:
            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
            case MySqlParser.TABLES:
            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
            case MySqlParser.VERSION_TOKEN_ADMIN:
            case MySqlParser.XA_RECOVER_ADMIN:
            case MySqlParser.ARMSCII8:
            case MySqlParser.ASCII:
            case MySqlParser.BIG5:
            case MySqlParser.CP1250:
            case MySqlParser.CP1251:
            case MySqlParser.CP1256:
            case MySqlParser.CP1257:
            case MySqlParser.CP850:
            case MySqlParser.CP852:
            case MySqlParser.CP866:
            case MySqlParser.CP932:
            case MySqlParser.DEC8:
            case MySqlParser.EUCJPMS:
            case MySqlParser.EUCKR:
            case MySqlParser.GB18030:
            case MySqlParser.GB2312:
            case MySqlParser.GBK:
            case MySqlParser.GEOSTD8:
            case MySqlParser.GREEK:
            case MySqlParser.HEBREW:
            case MySqlParser.HP8:
            case MySqlParser.KEYBCS2:
            case MySqlParser.KOI8R:
            case MySqlParser.KOI8U:
            case MySqlParser.LATIN1:
            case MySqlParser.LATIN2:
            case MySqlParser.LATIN5:
            case MySqlParser.LATIN7:
            case MySqlParser.MACCE:
            case MySqlParser.MACROMAN:
            case MySqlParser.SJIS:
            case MySqlParser.SWE7:
            case MySqlParser.TIS620:
            case MySqlParser.UCS2:
            case MySqlParser.UJIS:
            case MySqlParser.UTF16:
            case MySqlParser.UTF16LE:
            case MySqlParser.UTF32:
            case MySqlParser.UTF8:
            case MySqlParser.UTF8MB3:
            case MySqlParser.UTF8MB4:
            case MySqlParser.ARCHIVE:
            case MySqlParser.BLACKHOLE:
            case MySqlParser.CSV:
            case MySqlParser.FEDERATED:
            case MySqlParser.INNODB:
            case MySqlParser.MEMORY:
            case MySqlParser.MRG_MYISAM:
            case MySqlParser.MYISAM:
            case MySqlParser.NDB:
            case MySqlParser.NDBCLUSTER:
            case MySqlParser.PERFORMANCE_SCHEMA:
            case MySqlParser.TOKUDB:
            case MySqlParser.REPEATABLE:
            case MySqlParser.COMMITTED:
            case MySqlParser.UNCOMMITTED:
            case MySqlParser.SERIALIZABLE:
            case MySqlParser.GEOMETRYCOLLECTION:
            case MySqlParser.LINESTRING:
            case MySqlParser.MULTILINESTRING:
            case MySqlParser.MULTIPOINT:
            case MySqlParser.MULTIPOLYGON:
            case MySqlParser.POINT:
            case MySqlParser.POLYGON:
            case MySqlParser.ABS:
            case MySqlParser.ACOS:
            case MySqlParser.ADDDATE:
            case MySqlParser.ADDTIME:
            case MySqlParser.AES_DECRYPT:
            case MySqlParser.AES_ENCRYPT:
            case MySqlParser.AREA:
            case MySqlParser.ASBINARY:
            case MySqlParser.ASIN:
            case MySqlParser.ASTEXT:
            case MySqlParser.ASWKB:
            case MySqlParser.ASWKT:
            case MySqlParser.ASYMMETRIC_DECRYPT:
            case MySqlParser.ASYMMETRIC_DERIVE:
            case MySqlParser.ASYMMETRIC_ENCRYPT:
            case MySqlParser.ASYMMETRIC_SIGN:
            case MySqlParser.ASYMMETRIC_VERIFY:
            case MySqlParser.ATAN:
            case MySqlParser.ATAN2:
            case MySqlParser.BENCHMARK:
            case MySqlParser.BIN:
            case MySqlParser.BIT_COUNT:
            case MySqlParser.BIT_LENGTH:
            case MySqlParser.BUFFER:
            case MySqlParser.CATALOG_NAME:
            case MySqlParser.CEIL:
            case MySqlParser.CEILING:
            case MySqlParser.CENTROID:
            case MySqlParser.CHARACTER_LENGTH:
            case MySqlParser.CHARSET:
            case MySqlParser.CHAR_LENGTH:
            case MySqlParser.COERCIBILITY:
            case MySqlParser.COLLATION:
            case MySqlParser.COMPRESS:
            case MySqlParser.CONCAT:
            case MySqlParser.CONCAT_WS:
            case MySqlParser.CONNECTION_ID:
            case MySqlParser.CONV:
            case MySqlParser.CONVERT_TZ:
            case MySqlParser.COS:
            case MySqlParser.COT:
            case MySqlParser.CRC32:
            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySqlParser.CREATE_DH_PARAMETERS:
            case MySqlParser.CREATE_DIGEST:
            case MySqlParser.CROSSES:
            case MySqlParser.DATEDIFF:
            case MySqlParser.DATE_FORMAT:
            case MySqlParser.DAYNAME:
            case MySqlParser.DAYOFMONTH:
            case MySqlParser.DAYOFWEEK:
            case MySqlParser.DAYOFYEAR:
            case MySqlParser.DECODE:
            case MySqlParser.DEGREES:
            case MySqlParser.DES_DECRYPT:
            case MySqlParser.DES_ENCRYPT:
            case MySqlParser.DIMENSION:
            case MySqlParser.DISJOINT:
            case MySqlParser.ELT:
            case MySqlParser.ENCODE:
            case MySqlParser.ENCRYPT:
            case MySqlParser.ENDPOINT:
            case MySqlParser.ENGINE_ATTRIBUTE:
            case MySqlParser.ENVELOPE:
            case MySqlParser.EQUALS:
            case MySqlParser.EXP:
            case MySqlParser.EXPORT_SET:
            case MySqlParser.EXTERIORRING:
            case MySqlParser.EXTRACTVALUE:
            case MySqlParser.FIELD:
            case MySqlParser.FIND_IN_SET:
            case MySqlParser.FLOOR:
            case MySqlParser.FORMAT:
            case MySqlParser.FOUND_ROWS:
            case MySqlParser.FROM_BASE64:
            case MySqlParser.FROM_DAYS:
            case MySqlParser.FROM_UNIXTIME:
            case MySqlParser.GEOMCOLLFROMTEXT:
            case MySqlParser.GEOMCOLLFROMWKB:
            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.GEOMETRYFROMTEXT:
            case MySqlParser.GEOMETRYFROMWKB:
            case MySqlParser.GEOMETRYN:
            case MySqlParser.GEOMETRYTYPE:
            case MySqlParser.GEOMFROMTEXT:
            case MySqlParser.GEOMFROMWKB:
            case MySqlParser.GET_FORMAT:
            case MySqlParser.GET_LOCK:
            case MySqlParser.GLENGTH:
            case MySqlParser.GREATEST:
            case MySqlParser.GTID_SUBSET:
            case MySqlParser.GTID_SUBTRACT:
            case MySqlParser.HEX:
            case MySqlParser.IFNULL:
            case MySqlParser.INET6_ATON:
            case MySqlParser.INET6_NTOA:
            case MySqlParser.INET_ATON:
            case MySqlParser.INET_NTOA:
            case MySqlParser.INSTR:
            case MySqlParser.INTERIORRINGN:
            case MySqlParser.INTERSECTS:
            case MySqlParser.ISCLOSED:
            case MySqlParser.ISEMPTY:
            case MySqlParser.ISNULL:
            case MySqlParser.ISSIMPLE:
            case MySqlParser.IS_FREE_LOCK:
            case MySqlParser.IS_IPV4:
            case MySqlParser.IS_IPV4_COMPAT:
            case MySqlParser.IS_IPV4_MAPPED:
            case MySqlParser.IS_IPV6:
            case MySqlParser.IS_USED_LOCK:
            case MySqlParser.LAST_INSERT_ID:
            case MySqlParser.LCASE:
            case MySqlParser.LEAST:
            case MySqlParser.LENGTH:
            case MySqlParser.LINEFROMTEXT:
            case MySqlParser.LINEFROMWKB:
            case MySqlParser.LINESTRINGFROMTEXT:
            case MySqlParser.LINESTRINGFROMWKB:
            case MySqlParser.LN:
            case MySqlParser.LOAD_FILE:
            case MySqlParser.LOCATE:
            case MySqlParser.LOG:
            case MySqlParser.LOG10:
            case MySqlParser.LOG2:
            case MySqlParser.LOWER:
            case MySqlParser.LPAD:
            case MySqlParser.LTRIM:
            case MySqlParser.MAKEDATE:
            case MySqlParser.MAKETIME:
            case MySqlParser.MAKE_SET:
            case MySqlParser.MASTER_POS_WAIT:
            case MySqlParser.MBRCONTAINS:
            case MySqlParser.MBRDISJOINT:
            case MySqlParser.MBREQUAL:
            case MySqlParser.MBRINTERSECTS:
            case MySqlParser.MBROVERLAPS:
            case MySqlParser.MBRTOUCHES:
            case MySqlParser.MBRWITHIN:
            case MySqlParser.MD5:
            case MySqlParser.MLINEFROMTEXT:
            case MySqlParser.MLINEFROMWKB:
            case MySqlParser.MONTHNAME:
            case MySqlParser.MPOINTFROMTEXT:
            case MySqlParser.MPOINTFROMWKB:
            case MySqlParser.MPOLYFROMTEXT:
            case MySqlParser.MPOLYFROMWKB:
            case MySqlParser.MULTILINESTRINGFROMTEXT:
            case MySqlParser.MULTILINESTRINGFROMWKB:
            case MySqlParser.MULTIPOINTFROMTEXT:
            case MySqlParser.MULTIPOINTFROMWKB:
            case MySqlParser.MULTIPOLYGONFROMTEXT:
            case MySqlParser.MULTIPOLYGONFROMWKB:
            case MySqlParser.NAME_CONST:
            case MySqlParser.NULLIF:
            case MySqlParser.NUMGEOMETRIES:
            case MySqlParser.NUMINTERIORRINGS:
            case MySqlParser.NUMPOINTS:
            case MySqlParser.OCT:
            case MySqlParser.OCTET_LENGTH:
            case MySqlParser.ORD:
            case MySqlParser.OVERLAPS:
            case MySqlParser.PERIOD_ADD:
            case MySqlParser.PERIOD_DIFF:
            case MySqlParser.PI:
            case MySqlParser.POINTFROMTEXT:
            case MySqlParser.POINTFROMWKB:
            case MySqlParser.POINTN:
            case MySqlParser.POLYFROMTEXT:
            case MySqlParser.POLYFROMWKB:
            case MySqlParser.POLYGONFROMTEXT:
            case MySqlParser.POLYGONFROMWKB:
            case MySqlParser.POW:
            case MySqlParser.POWER:
            case MySqlParser.QUOTE:
            case MySqlParser.RADIANS:
            case MySqlParser.RAND:
            case MySqlParser.RANDOM:
            case MySqlParser.RANDOM_BYTES:
            case MySqlParser.RELEASE_LOCK:
            case MySqlParser.REVERSE:
            case MySqlParser.ROUND:
            case MySqlParser.ROW_COUNT:
            case MySqlParser.RPAD:
            case MySqlParser.RTRIM:
            case MySqlParser.SEC_TO_TIME:
            case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
            case MySqlParser.SESSION_USER:
            case MySqlParser.SHA:
            case MySqlParser.SHA1:
            case MySqlParser.SHA2:
            case MySqlParser.SCHEMA_NAME:
            case MySqlParser.SIGN:
            case MySqlParser.SIN:
            case MySqlParser.SLEEP:
            case MySqlParser.SOUNDEX:
            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySqlParser.SQRT:
            case MySqlParser.SRID:
            case MySqlParser.STARTPOINT:
            case MySqlParser.STRCMP:
            case MySqlParser.STR_TO_DATE:
            case MySqlParser.ST_AREA:
            case MySqlParser.ST_ASBINARY:
            case MySqlParser.ST_ASTEXT:
            case MySqlParser.ST_ASWKB:
            case MySqlParser.ST_ASWKT:
            case MySqlParser.ST_BUFFER:
            case MySqlParser.ST_CENTROID:
            case MySqlParser.ST_CONTAINS:
            case MySqlParser.ST_CROSSES:
            case MySqlParser.ST_DIFFERENCE:
            case MySqlParser.ST_DIMENSION:
            case MySqlParser.ST_DISJOINT:
            case MySqlParser.ST_DISTANCE:
            case MySqlParser.ST_ENDPOINT:
            case MySqlParser.ST_ENVELOPE:
            case MySqlParser.ST_EQUALS:
            case MySqlParser.ST_EXTERIORRING:
            case MySqlParser.ST_GEOMCOLLFROMTEXT:
            case MySqlParser.ST_GEOMCOLLFROMTXT:
            case MySqlParser.ST_GEOMCOLLFROMWKB:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.ST_GEOMETRYFROMTEXT:
            case MySqlParser.ST_GEOMETRYFROMWKB:
            case MySqlParser.ST_GEOMETRYN:
            case MySqlParser.ST_GEOMETRYTYPE:
            case MySqlParser.ST_GEOMFROMTEXT:
            case MySqlParser.ST_GEOMFROMWKB:
            case MySqlParser.ST_INTERIORRINGN:
            case MySqlParser.ST_INTERSECTION:
            case MySqlParser.ST_INTERSECTS:
            case MySqlParser.ST_ISCLOSED:
            case MySqlParser.ST_ISEMPTY:
            case MySqlParser.ST_ISSIMPLE:
            case MySqlParser.ST_LINEFROMTEXT:
            case MySqlParser.ST_LINEFROMWKB:
            case MySqlParser.ST_LINESTRINGFROMTEXT:
            case MySqlParser.ST_LINESTRINGFROMWKB:
            case MySqlParser.ST_NUMGEOMETRIES:
            case MySqlParser.ST_NUMINTERIORRING:
            case MySqlParser.ST_NUMINTERIORRINGS:
            case MySqlParser.ST_NUMPOINTS:
            case MySqlParser.ST_OVERLAPS:
            case MySqlParser.ST_POINTFROMTEXT:
            case MySqlParser.ST_POINTFROMWKB:
            case MySqlParser.ST_POINTN:
            case MySqlParser.ST_POLYFROMTEXT:
            case MySqlParser.ST_POLYFROMWKB:
            case MySqlParser.ST_POLYGONFROMTEXT:
            case MySqlParser.ST_POLYGONFROMWKB:
            case MySqlParser.ST_SRID:
            case MySqlParser.ST_STARTPOINT:
            case MySqlParser.ST_SYMDIFFERENCE:
            case MySqlParser.ST_TOUCHES:
            case MySqlParser.ST_UNION:
            case MySqlParser.ST_WITHIN:
            case MySqlParser.ST_X:
            case MySqlParser.ST_Y:
            case MySqlParser.SUBDATE:
            case MySqlParser.SUBSTRING_INDEX:
            case MySqlParser.SUBTIME:
            case MySqlParser.SYSTEM_USER:
            case MySqlParser.TAN:
            case MySqlParser.TIMEDIFF:
            case MySqlParser.TIMESTAMPADD:
            case MySqlParser.TIMESTAMPDIFF:
            case MySqlParser.TIME_FORMAT:
            case MySqlParser.TIME_TO_SEC:
            case MySqlParser.TOUCHES:
            case MySqlParser.TO_BASE64:
            case MySqlParser.TO_DAYS:
            case MySqlParser.TO_SECONDS:
            case MySqlParser.TP_CONNECTION_ADMIN:
            case MySqlParser.UCASE:
            case MySqlParser.UNCOMPRESS:
            case MySqlParser.UNCOMPRESSED_LENGTH:
            case MySqlParser.UNHEX:
            case MySqlParser.UNIX_TIMESTAMP:
            case MySqlParser.UPDATEXML:
            case MySqlParser.UPPER:
            case MySqlParser.UUID:
            case MySqlParser.UUID_SHORT:
            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
            case MySqlParser.VERSION:
            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySqlParser.WEEKDAY:
            case MySqlParser.WEEKOFYEAR:
            case MySqlParser.WEIGHT_STRING:
            case MySqlParser.WITHIN:
            case MySqlParser.YEARWEEK:
            case MySqlParser.Y_FUNCTION:
            case MySqlParser.X_FUNCTION:
            case MySqlParser.MOD:
            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySqlParser.STRING_LITERAL:
            case MySqlParser.ID:
                {
                this.state = 3560;
                this.tableName();
                this.state = 3563;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1132) {
                    {
                    this.state = 3561;
                    this.match(MySqlParser.DOT);
                    this.state = 3562;
                    this.match(MySqlParser.STAR);
                    }
                }

                this.state = 3573;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 3565;
                    this.match(MySqlParser.COMMA);
                    this.state = 3566;
                    this.tableName();
                    this.state = 3569;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1132) {
                        {
                        this.state = 3567;
                        this.match(MySqlParser.DOT);
                        this.state = 3568;
                        this.match(MySqlParser.STAR);
                        }
                    }

                    }
                    }
                    this.state = 3575;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3576;
                this.match(MySqlParser.FROM);
                this.state = 3577;
                this.tableSources();
                }
                break;
            case MySqlParser.FROM:
                {
                this.state = 3579;
                this.match(MySqlParser.FROM);
                this.state = 3580;
                this.tableName();
                this.state = 3583;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1132) {
                    {
                    this.state = 3581;
                    this.match(MySqlParser.DOT);
                    this.state = 3582;
                    this.match(MySqlParser.STAR);
                    }
                }

                this.state = 3593;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 3585;
                    this.match(MySqlParser.COMMA);
                    this.state = 3586;
                    this.tableName();
                    this.state = 3589;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1132) {
                        {
                        this.state = 3587;
                        this.match(MySqlParser.DOT);
                        this.state = 3588;
                        this.match(MySqlParser.STAR);
                        }
                    }

                    }
                    }
                    this.state = 3595;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3596;
                this.match(MySqlParser.USING);
                this.state = 3597;
                this.tableSources();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3603;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 190) {
                {
                this.state = 3601;
                this.match(MySqlParser.WHERE);
                this.state = 3602;
                this.expression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public handlerOpenStatement(): HandlerOpenStatementContext {
        let localContext = new HandlerOpenStatementContext(this.context, this.state);
        this.enterRule(localContext, 216, MySqlParser.RULE_handlerOpenStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3605;
            this.match(MySqlParser.HANDLER);
            this.state = 3606;
            this.tableName();
            this.state = 3607;
            this.match(MySqlParser.OPEN);
            this.state = 3612;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537155584) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                {
                this.state = 3609;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12) {
                    {
                    this.state = 3608;
                    this.match(MySqlParser.AS);
                    }
                }

                this.state = 3611;
                this.uid();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public handlerReadIndexStatement(): HandlerReadIndexStatementContext {
        let localContext = new HandlerReadIndexStatementContext(this.context, this.state);
        this.enterRule(localContext, 218, MySqlParser.RULE_handlerReadIndexStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3614;
            this.match(MySqlParser.HANDLER);
            this.state = 3615;
            this.tableName();
            this.state = 3616;
            this.match(MySqlParser.READ);
            this.state = 3617;
            localContext._index = this.uid();
            this.state = 3624;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.EQUAL_SYMBOL:
            case MySqlParser.GREATER_SYMBOL:
            case MySqlParser.LESS_SYMBOL:
            case MySqlParser.EXCLAMATION_SYMBOL:
                {
                this.state = 3618;
                this.comparisonOperator();
                this.state = 3619;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3620;
                this.constants();
                this.state = 3621;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case MySqlParser.FIRST:
            case MySqlParser.LAST:
            case MySqlParser.NEXT:
            case MySqlParser.PREV:
                {
                this.state = 3623;
                localContext._moveOrder = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 430 || _la === 469 || _la === 520 || _la === 562)) {
                    localContext._moveOrder = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3628;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 190) {
                {
                this.state = 3626;
                this.match(MySqlParser.WHERE);
                this.state = 3627;
                this.expression(0);
                }
            }

            this.state = 3632;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99) {
                {
                this.state = 3630;
                this.match(MySqlParser.LIMIT);
                this.state = 3631;
                this.limitClauseAtom();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public handlerReadStatement(): HandlerReadStatementContext {
        let localContext = new HandlerReadStatementContext(this.context, this.state);
        this.enterRule(localContext, 220, MySqlParser.RULE_handlerReadStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3634;
            this.match(MySqlParser.HANDLER);
            this.state = 3635;
            this.tableName();
            this.state = 3636;
            this.match(MySqlParser.READ);
            this.state = 3637;
            localContext._moveOrder = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 430 || _la === 520)) {
                localContext._moveOrder = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3640;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 190) {
                {
                this.state = 3638;
                this.match(MySqlParser.WHERE);
                this.state = 3639;
                this.expression(0);
                }
            }

            this.state = 3644;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99) {
                {
                this.state = 3642;
                this.match(MySqlParser.LIMIT);
                this.state = 3643;
                this.limitClauseAtom();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public handlerCloseStatement(): HandlerCloseStatementContext {
        let localContext = new HandlerCloseStatementContext(this.context, this.state);
        this.enterRule(localContext, 222, MySqlParser.RULE_handlerCloseStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3646;
            this.match(MySqlParser.HANDLER);
            this.state = 3647;
            this.tableName();
            this.state = 3648;
            this.match(MySqlParser.CLOSE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleUpdateStatement(): SingleUpdateStatementContext {
        let localContext = new SingleUpdateStatementContext(this.context, this.state);
        this.enterRule(localContext, 224, MySqlParser.RULE_singleUpdateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3650;
            this.match(MySqlParser.UPDATE);
            this.state = 3652;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 106) {
                {
                this.state = 3651;
                localContext._priority = this.match(MySqlParser.LOW_PRIORITY);
                }
            }

            this.state = 3655;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78) {
                {
                this.state = 3654;
                this.match(MySqlParser.IGNORE);
                }
            }

            this.state = 3657;
            this.tableName();
            this.state = 3662;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537155584) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                {
                this.state = 3659;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12) {
                    {
                    this.state = 3658;
                    this.match(MySqlParser.AS);
                    }
                }

                this.state = 3661;
                this.uid();
                }
            }

            this.state = 3664;
            this.match(MySqlParser.SET);
            this.state = 3665;
            this.updatedElement();
            this.state = 3670;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 3666;
                this.match(MySqlParser.COMMA);
                this.state = 3667;
                this.updatedElement();
                }
                }
                this.state = 3672;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3675;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 190) {
                {
                this.state = 3673;
                this.match(MySqlParser.WHERE);
                this.state = 3674;
                this.expression(0);
                }
            }

            this.state = 3678;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 124) {
                {
                this.state = 3677;
                this.orderByClause();
                }
            }

            this.state = 3681;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99) {
                {
                this.state = 3680;
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipleUpdateStatement(): MultipleUpdateStatementContext {
        let localContext = new MultipleUpdateStatementContext(this.context, this.state);
        this.enterRule(localContext, 226, MySqlParser.RULE_multipleUpdateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3683;
            this.match(MySqlParser.UPDATE);
            this.state = 3685;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 106) {
                {
                this.state = 3684;
                localContext._priority = this.match(MySqlParser.LOW_PRIORITY);
                }
            }

            this.state = 3688;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78) {
                {
                this.state = 3687;
                this.match(MySqlParser.IGNORE);
                }
            }

            this.state = 3690;
            this.tableNames();
            this.state = 3691;
            this.match(MySqlParser.SET);
            this.state = 3692;
            this.updatedElement();
            this.state = 3697;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 3693;
                this.match(MySqlParser.COMMA);
                this.state = 3694;
                this.updatedElement();
                }
                }
                this.state = 3699;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3702;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 190) {
                {
                this.state = 3700;
                this.match(MySqlParser.WHERE);
                this.state = 3701;
                this.expression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByClause(): OrderByClauseContext {
        let localContext = new OrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 228, MySqlParser.RULE_orderByClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3704;
            this.match(MySqlParser.ORDER);
            this.state = 3705;
            this.match(MySqlParser.BY);
            this.state = 3706;
            this.orderByExpression();
            this.state = 3711;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 521, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3707;
                    this.match(MySqlParser.COMMA);
                    this.state = 3708;
                    this.orderByExpression();
                    }
                    }
                }
                this.state = 3713;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 521, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByExpression(): OrderByExpressionContext {
        let localContext = new OrderByExpressionContext(this.context, this.state);
        this.enterRule(localContext, 230, MySqlParser.RULE_orderByExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3714;
            this.expression(0);
            this.state = 3716;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 13 || _la === 45) {
                {
                this.state = 3715;
                localContext._order = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 13 || _la === 45)) {
                    localContext._order = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSources(): TableSourcesContext {
        let localContext = new TableSourcesContext(this.context, this.state);
        this.enterRule(localContext, 232, MySqlParser.RULE_tableSources);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3718;
            this.tableSource();
            this.state = 3723;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 523, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3719;
                    this.match(MySqlParser.COMMA);
                    this.state = 3720;
                    this.tableSource();
                    }
                    }
                }
                this.state = 3725;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 523, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSource(): TableSourceContext {
        let localContext = new TableSourceContext(this.context, this.state);
        this.enterRule(localContext, 234, MySqlParser.RULE_tableSource);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3744;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 526, this.context) ) {
            case 1:
                localContext = new TableSourceBaseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3726;
                this.tableSourceItem();
                this.state = 3730;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 524, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3727;
                        this.joinPart();
                        }
                        }
                    }
                    this.state = 3732;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 524, this.context);
                }
                }
                break;
            case 2:
                localContext = new TableSourceNestedContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3733;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3734;
                this.tableSourceItem();
                this.state = 3738;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 34 || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & 1073758337) !== 0) || _la === 148 || _la === 171) {
                    {
                    {
                    this.state = 3735;
                    this.joinPart();
                    }
                    }
                    this.state = 3740;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3741;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 3:
                localContext = new TableJsonContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3743;
                this.jsonTable();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSourceItem(): TableSourceItemContext {
        let localContext = new TableSourceItemContext(this.context, this.state);
        this.enterRule(localContext, 236, MySqlParser.RULE_tableSourceItem);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3783;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 533, this.context) ) {
            case 1:
                localContext = new AtomTableItemContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3746;
                this.tableName();
                this.state = 3752;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 129) {
                    {
                    this.state = 3747;
                    this.match(MySqlParser.PARTITION);
                    this.state = 3748;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 3749;
                    this.uidList();
                    this.state = 3750;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                }

                this.state = 3758;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 529, this.context) ) {
                case 1:
                    {
                    this.state = 3755;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 12) {
                        {
                        this.state = 3754;
                        this.match(MySqlParser.AS);
                        }
                    }

                    this.state = 3757;
                    (localContext as AtomTableItemContext)._alias = this.uid();
                    }
                    break;
                }
                this.state = 3768;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 66 || _la === 78 || _la === 186) {
                    {
                    this.state = 3760;
                    this.indexHint();
                    this.state = 3765;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 530, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 3761;
                            this.match(MySqlParser.COMMA);
                            this.state = 3762;
                            this.indexHint();
                            }
                            }
                        }
                        this.state = 3767;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 530, this.context);
                    }
                    }
                }

                }
                break;
            case 2:
                localContext = new SubqueryTableItemContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 3770;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3771;
                (localContext as SubqueryTableItemContext)._parenthesisSubquery = this.selectStatement();
                this.state = 3772;
                this.match(MySqlParser.RR_BRACKET);
                }
                this.state = 3775;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12) {
                    {
                    this.state = 3774;
                    this.match(MySqlParser.AS);
                    }
                }

                this.state = 3777;
                (localContext as SubqueryTableItemContext)._alias = this.uid();
                }
                break;
            case 3:
                localContext = new TableSourcesItemContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3779;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3780;
                this.tableSources();
                this.state = 3781;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexHint(): IndexHintContext {
        let localContext = new IndexHintContext(this.context, this.state);
        this.enterRule(localContext, 238, MySqlParser.RULE_indexHint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3785;
            localContext._indexHintAction = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 66 || _la === 78 || _la === 186)) {
                localContext._indexHintAction = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3786;
            localContext._keyFormat = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 81 || _la === 91)) {
                localContext._keyFormat = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3789;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 65) {
                {
                this.state = 3787;
                this.match(MySqlParser.FOR);
                this.state = 3788;
                this.indexHintType();
                }
            }

            this.state = 3791;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 3792;
            this.uidList();
            this.state = 3793;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexHintType(): IndexHintTypeContext {
        let localContext = new IndexHintTypeContext(this.context, this.state);
        this.enterRule(localContext, 240, MySqlParser.RULE_indexHintType);
        try {
            this.state = 3800;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.JOIN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3795;
                this.match(MySqlParser.JOIN);
                }
                break;
            case MySqlParser.ORDER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3796;
                this.match(MySqlParser.ORDER);
                this.state = 3797;
                this.match(MySqlParser.BY);
                }
                break;
            case MySqlParser.GROUP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3798;
                this.match(MySqlParser.GROUP);
                this.state = 3799;
                this.match(MySqlParser.BY);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinPart(): JoinPartContext {
        let localContext = new JoinPartContext(this.context, this.state);
        this.enterRule(localContext, 242, MySqlParser.RULE_joinPart);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3849;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.CROSS:
            case MySqlParser.INNER:
            case MySqlParser.JOIN:
                localContext = new InnerJoinContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3803;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 83) {
                    {
                    this.state = 3802;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 34 || _la === 83)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3805;
                this.match(MySqlParser.JOIN);
                this.state = 3807;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 537, this.context) ) {
                case 1:
                    {
                    this.state = 3806;
                    this.match(MySqlParser.LATERAL);
                    }
                    break;
                }
                this.state = 3809;
                this.tableSourceItem();
                this.state = 3813;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 538, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3810;
                        this.joinSpec();
                        }
                        }
                    }
                    this.state = 3815;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 538, this.context);
                }
                }
                break;
            case MySqlParser.STRAIGHT_JOIN:
                localContext = new StraightJoinContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3816;
                this.match(MySqlParser.STRAIGHT_JOIN);
                this.state = 3817;
                this.tableSourceItem();
                this.state = 3822;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 539, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3818;
                        this.match(MySqlParser.ON);
                        this.state = 3819;
                        this.expression(0);
                        }
                        }
                    }
                    this.state = 3824;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 539, this.context);
                }
                }
                break;
            case MySqlParser.LEFT:
            case MySqlParser.RIGHT:
                localContext = new OuterJoinContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3825;
                _la = this.tokenStream.LA(1);
                if(!(_la === 97 || _la === 148)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3827;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 126) {
                    {
                    this.state = 3826;
                    this.match(MySqlParser.OUTER);
                    }
                }

                this.state = 3829;
                this.match(MySqlParser.JOIN);
                this.state = 3831;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 541, this.context) ) {
                case 1:
                    {
                    this.state = 3830;
                    this.match(MySqlParser.LATERAL);
                    }
                    break;
                }
                this.state = 3833;
                this.tableSourceItem();
                this.state = 3837;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 542, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3834;
                        this.joinSpec();
                        }
                        }
                    }
                    this.state = 3839;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 542, this.context);
                }
                }
                break;
            case MySqlParser.NATURAL:
                localContext = new NaturalJoinContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3840;
                this.match(MySqlParser.NATURAL);
                this.state = 3845;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97 || _la === 148) {
                    {
                    this.state = 3841;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 97 || _la === 148)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3843;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 126) {
                        {
                        this.state = 3842;
                        this.match(MySqlParser.OUTER);
                        }
                    }

                    }
                }

                this.state = 3847;
                this.match(MySqlParser.JOIN);
                this.state = 3848;
                this.tableSourceItem();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinSpec(): JoinSpecContext {
        let localContext = new JoinSpecContext(this.context, this.state);
        this.enterRule(localContext, 244, MySqlParser.RULE_joinSpec);
        try {
            this.state = 3858;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ON:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 3851;
                this.match(MySqlParser.ON);
                this.state = 3852;
                this.expression(0);
                }
                }
                break;
            case MySqlParser.USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3853;
                this.match(MySqlParser.USING);
                this.state = 3854;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3855;
                this.uidList();
                this.state = 3856;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryExpression(): QueryExpressionContext {
        let localContext = new QueryExpressionContext(this.context, this.state);
        this.enterRule(localContext, 246, MySqlParser.RULE_queryExpression);
        try {
            this.state = 3868;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 547, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3860;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3861;
                this.querySpecification();
                this.state = 3862;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3864;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3865;
                this.queryExpression();
                this.state = 3866;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryExpressionNointo(): QueryExpressionNointoContext {
        let localContext = new QueryExpressionNointoContext(this.context, this.state);
        this.enterRule(localContext, 248, MySqlParser.RULE_queryExpressionNointo);
        try {
            this.state = 3878;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 548, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3870;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3871;
                this.querySpecificationNointo();
                this.state = 3872;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3874;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3875;
                this.queryExpressionNointo();
                this.state = 3876;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 250, MySqlParser.RULE_querySpecification);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3934;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 563, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3880;
                this.match(MySqlParser.SELECT);
                this.state = 3884;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 549, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3881;
                        this.selectSpec();
                        }
                        }
                    }
                    this.state = 3886;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 549, this.context);
                }
                this.state = 3887;
                this.selectElements();
                this.state = 3889;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 87) {
                    {
                    this.state = 3888;
                    this.selectIntoExpression();
                    }
                }

                this.state = 3891;
                this.fromClause();
                this.state = 3893;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 551, this.context) ) {
                case 1:
                    {
                    this.state = 3892;
                    this.groupByClause();
                    }
                    break;
                }
                this.state = 3896;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 74) {
                    {
                    this.state = 3895;
                    this.havingClause();
                    }
                }

                this.state = 3899;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 676) {
                    {
                    this.state = 3898;
                    this.windowClause();
                    }
                }

                this.state = 3902;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 554, this.context) ) {
                case 1:
                    {
                    this.state = 3901;
                    this.orderByClause();
                    }
                    break;
                }
                this.state = 3905;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 555, this.context) ) {
                case 1:
                    {
                    this.state = 3904;
                    this.limitClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3907;
                this.match(MySqlParser.SELECT);
                this.state = 3911;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 556, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3908;
                        this.selectSpec();
                        }
                        }
                    }
                    this.state = 3913;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 556, this.context);
                }
                this.state = 3914;
                this.selectElements();
                this.state = 3915;
                this.fromClause();
                this.state = 3917;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 557, this.context) ) {
                case 1:
                    {
                    this.state = 3916;
                    this.groupByClause();
                    }
                    break;
                }
                this.state = 3920;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 74) {
                    {
                    this.state = 3919;
                    this.havingClause();
                    }
                }

                this.state = 3923;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 676) {
                    {
                    this.state = 3922;
                    this.windowClause();
                    }
                }

                this.state = 3926;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 560, this.context) ) {
                case 1:
                    {
                    this.state = 3925;
                    this.orderByClause();
                    }
                    break;
                }
                this.state = 3929;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 561, this.context) ) {
                case 1:
                    {
                    this.state = 3928;
                    this.limitClause();
                    }
                    break;
                }
                this.state = 3932;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 87) {
                    {
                    this.state = 3931;
                    this.selectIntoExpression();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecificationNointo(): QuerySpecificationNointoContext {
        let localContext = new QuerySpecificationNointoContext(this.context, this.state);
        this.enterRule(localContext, 252, MySqlParser.RULE_querySpecificationNointo);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3936;
            this.match(MySqlParser.SELECT);
            this.state = 3940;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 564, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3937;
                    this.selectSpec();
                    }
                    }
                }
                this.state = 3942;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 564, this.context);
            }
            this.state = 3943;
            this.selectElements();
            this.state = 3944;
            this.fromClause();
            this.state = 3946;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 565, this.context) ) {
            case 1:
                {
                this.state = 3945;
                this.groupByClause();
                }
                break;
            }
            this.state = 3949;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 3948;
                this.havingClause();
                }
            }

            this.state = 3952;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 676) {
                {
                this.state = 3951;
                this.windowClause();
                }
            }

            this.state = 3955;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 568, this.context) ) {
            case 1:
                {
                this.state = 3954;
                this.orderByClause();
                }
                break;
            }
            this.state = 3958;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 569, this.context) ) {
            case 1:
                {
                this.state = 3957;
                this.limitClause();
                }
                break;
            }
            this.state = 3961;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 570, this.context) ) {
            case 1:
                {
                this.state = 3960;
                this.unionStatement();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unionParenthesis(): UnionParenthesisContext {
        let localContext = new UnionParenthesisContext(this.context, this.state);
        this.enterRule(localContext, 254, MySqlParser.RULE_unionParenthesis);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3963;
            this.match(MySqlParser.UNION);
            this.state = 3965;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6 || _la === 49) {
                {
                this.state = 3964;
                localContext._unionType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 6 || _la === 49)) {
                    localContext._unionType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3967;
            this.queryExpressionNointo();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unionStatement(): UnionStatementContext {
        let localContext = new UnionStatementContext(this.context, this.state);
        this.enterRule(localContext, 256, MySqlParser.RULE_unionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3969;
            this.match(MySqlParser.UNION);
            this.state = 3971;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6 || _la === 49) {
                {
                this.state = 3970;
                localContext._unionType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 6 || _la === 49)) {
                    localContext._unionType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3975;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.SELECT:
                {
                this.state = 3973;
                this.querySpecificationNointo();
                }
                break;
            case MySqlParser.LR_BRACKET:
                {
                this.state = 3974;
                this.queryExpressionNointo();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lateralStatement(): LateralStatementContext {
        let localContext = new LateralStatementContext(this.context, this.state);
        this.enterRule(localContext, 258, MySqlParser.RULE_lateralStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3977;
            this.match(MySqlParser.LATERAL);
            this.state = 3992;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 577, this.context) ) {
            case 1:
                {
                this.state = 3978;
                this.querySpecificationNointo();
                }
                break;
            case 2:
                {
                this.state = 3979;
                this.queryExpressionNointo();
                }
                break;
            case 3:
                {
                {
                this.state = 3980;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 3983;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.SELECT:
                    {
                    this.state = 3981;
                    this.querySpecificationNointo();
                    }
                    break;
                case MySqlParser.LR_BRACKET:
                    {
                    this.state = 3982;
                    this.queryExpressionNointo();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3985;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 3990;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 576, this.context) ) {
                case 1:
                    {
                    this.state = 3987;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 12) {
                        {
                        this.state = 3986;
                        this.match(MySqlParser.AS);
                        }
                    }

                    this.state = 3989;
                    this.uid();
                    }
                    break;
                }
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTable(): JsonTableContext {
        let localContext = new JsonTableContext(this.context, this.state);
        this.enterRule(localContext, 260, MySqlParser.RULE_jsonTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3994;
            this.match(MySqlParser.JSON_TABLE);
            this.state = 3995;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 3996;
            this.match(MySqlParser.STRING_LITERAL);
            this.state = 3997;
            this.match(MySqlParser.COMMA);
            this.state = 3998;
            this.match(MySqlParser.STRING_LITERAL);
            this.state = 3999;
            this.match(MySqlParser.COLUMNS);
            this.state = 4000;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 4001;
            this.jsonColumnList();
            this.state = 4002;
            this.match(MySqlParser.RR_BRACKET);
            this.state = 4003;
            this.match(MySqlParser.RR_BRACKET);
            this.state = 4008;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 579, this.context) ) {
            case 1:
                {
                this.state = 4005;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12) {
                    {
                    this.state = 4004;
                    this.match(MySqlParser.AS);
                    }
                }

                this.state = 4007;
                this.uid();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonColumnList(): JsonColumnListContext {
        let localContext = new JsonColumnListContext(this.context, this.state);
        this.enterRule(localContext, 262, MySqlParser.RULE_jsonColumnList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4010;
            this.jsonColumn();
            this.state = 4015;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 4011;
                this.match(MySqlParser.COMMA);
                this.state = 4012;
                this.jsonColumn();
                }
                }
                this.state = 4017;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonColumn(): JsonColumnContext {
        let localContext = new JsonColumnContext(this.context, this.state);
        this.enterRule(localContext, 264, MySqlParser.RULE_jsonColumn);
        let _la: number;
        try {
            this.state = 4047;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 586, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4018;
                this.fullColumnName();
                this.state = 4035;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.FOR:
                    {
                    this.state = 4019;
                    this.match(MySqlParser.FOR);
                    this.state = 4020;
                    this.match(MySqlParser.ORDINALITY);
                    }
                    break;
                case MySqlParser.CHARACTER:
                case MySqlParser.SET:
                case MySqlParser.TINYINT:
                case MySqlParser.SMALLINT:
                case MySqlParser.MEDIUMINT:
                case MySqlParser.MIDDLEINT:
                case MySqlParser.INT:
                case MySqlParser.INT1:
                case MySqlParser.INT2:
                case MySqlParser.INT3:
                case MySqlParser.INT4:
                case MySqlParser.INT8:
                case MySqlParser.INTEGER:
                case MySqlParser.BIGINT:
                case MySqlParser.REAL:
                case MySqlParser.DOUBLE:
                case MySqlParser.FLOAT:
                case MySqlParser.FLOAT4:
                case MySqlParser.FLOAT8:
                case MySqlParser.DECIMAL:
                case MySqlParser.DEC:
                case MySqlParser.NUMERIC:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.CHAR:
                case MySqlParser.VARCHAR:
                case MySqlParser.NVARCHAR:
                case MySqlParser.NATIONAL:
                case MySqlParser.BINARY:
                case MySqlParser.VARBINARY:
                case MySqlParser.TINYBLOB:
                case MySqlParser.BLOB:
                case MySqlParser.MEDIUMBLOB:
                case MySqlParser.LONG:
                case MySqlParser.LONGBLOB:
                case MySqlParser.TINYTEXT:
                case MySqlParser.TEXT:
                case MySqlParser.MEDIUMTEXT:
                case MySqlParser.LONGTEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.BIT:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.FIXED:
                case MySqlParser.JSON:
                case MySqlParser.NCHAR:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.GEOMCOLLECTION:
                case MySqlParser.GEOMETRY:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                    {
                    this.state = 4021;
                    this.dataType();
                    this.state = 4033;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySqlParser.PATH:
                        {
                        this.state = 4022;
                        this.match(MySqlParser.PATH);
                        this.state = 4023;
                        this.match(MySqlParser.STRING_LITERAL);
                        this.state = 4025;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 581, this.context) ) {
                        case 1:
                            {
                            this.state = 4024;
                            this.jsonOnEmpty();
                            }
                            break;
                        }
                        this.state = 4028;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 42 || _la === 116 || _la === 411) {
                            {
                            this.state = 4027;
                            this.jsonOnError();
                            }
                        }

                        }
                        break;
                    case MySqlParser.EXISTS:
                        {
                        this.state = 4030;
                        this.match(MySqlParser.EXISTS);
                        this.state = 4031;
                        this.match(MySqlParser.PATH);
                        this.state = 4032;
                        this.match(MySqlParser.STRING_LITERAL);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4037;
                this.match(MySqlParser.NESTED);
                this.state = 4039;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 285) {
                    {
                    this.state = 4038;
                    this.match(MySqlParser.PATH);
                    }
                }

                this.state = 4041;
                this.match(MySqlParser.STRING_LITERAL);
                this.state = 4042;
                this.match(MySqlParser.COLUMNS);
                this.state = 4043;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 4044;
                this.jsonColumnList();
                this.state = 4045;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonOnEmpty(): JsonOnEmptyContext {
        let localContext = new JsonOnEmptyContext(this.context, this.state);
        this.enterRule(localContext, 266, MySqlParser.RULE_jsonOnEmpty);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4053;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.NULL_LITERAL:
                {
                this.state = 4049;
                this.match(MySqlParser.NULL_LITERAL);
                }
                break;
            case MySqlParser.ERROR:
                {
                this.state = 4050;
                this.match(MySqlParser.ERROR);
                }
                break;
            case MySqlParser.DEFAULT:
                {
                this.state = 4051;
                this.match(MySqlParser.DEFAULT);
                this.state = 4052;
                this.defaultValue();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4055;
            this.match(MySqlParser.ON);
            this.state = 4056;
            this.match(MySqlParser.EMPTY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonOnError(): JsonOnErrorContext {
        let localContext = new JsonOnErrorContext(this.context, this.state);
        this.enterRule(localContext, 268, MySqlParser.RULE_jsonOnError);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4062;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.NULL_LITERAL:
                {
                this.state = 4058;
                this.match(MySqlParser.NULL_LITERAL);
                }
                break;
            case MySqlParser.ERROR:
                {
                this.state = 4059;
                this.match(MySqlParser.ERROR);
                }
                break;
            case MySqlParser.DEFAULT:
                {
                this.state = 4060;
                this.match(MySqlParser.DEFAULT);
                this.state = 4061;
                this.defaultValue();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4064;
            this.match(MySqlParser.ON);
            this.state = 4065;
            this.match(MySqlParser.ERROR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectSpec(): SelectSpecContext {
        let localContext = new SelectSpecContext(this.context, this.state);
        this.enterRule(localContext, 270, MySqlParser.RULE_selectSpec);
        let _la: number;
        try {
            this.state = 4075;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ALL:
            case MySqlParser.DISTINCT:
            case MySqlParser.DISTINCTROW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4067;
                _la = this.tokenStream.LA(1);
                if(!(_la === 6 || _la === 49 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySqlParser.HIGH_PRIORITY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4068;
                this.match(MySqlParser.HIGH_PRIORITY);
                }
                break;
            case MySqlParser.STRAIGHT_JOIN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4069;
                this.match(MySqlParser.STRAIGHT_JOIN);
                }
                break;
            case MySqlParser.SQL_SMALL_RESULT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4070;
                this.match(MySqlParser.SQL_SMALL_RESULT);
                }
                break;
            case MySqlParser.SQL_BIG_RESULT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4071;
                this.match(MySqlParser.SQL_BIG_RESULT);
                }
                break;
            case MySqlParser.SQL_BUFFER_RESULT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4072;
                this.match(MySqlParser.SQL_BUFFER_RESULT);
                }
                break;
            case MySqlParser.SQL_CACHE:
            case MySqlParser.SQL_NO_CACHE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4073;
                _la = this.tokenStream.LA(1);
                if(!(_la === 626 || _la === 627)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySqlParser.SQL_CALC_FOUND_ROWS:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4074;
                this.match(MySqlParser.SQL_CALC_FOUND_ROWS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectElements(): SelectElementsContext {
        let localContext = new SelectElementsContext(this.context, this.state);
        this.enterRule(localContext, 272, MySqlParser.RULE_selectElements);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4079;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 590, this.context) ) {
            case 1:
                {
                this.state = 4077;
                localContext._star = this.match(MySqlParser.STAR);
                }
                break;
            case 2:
                {
                this.state = 4078;
                this.selectElement();
                }
                break;
            }
            this.state = 4085;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 591, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4081;
                    this.match(MySqlParser.COMMA);
                    this.state = 4082;
                    this.selectElement();
                    }
                    }
                }
                this.state = 4087;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 591, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectElement(): SelectElementContext {
        let localContext = new SelectElementContext(this.context, this.state);
        this.enterRule(localContext, 274, MySqlParser.RULE_selectElement);
        let _la: number;
        try {
            this.state = 4117;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 599, this.context) ) {
            case 1:
                localContext = new SelectStarElementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4088;
                this.fullId();
                this.state = 4089;
                this.match(MySqlParser.DOT);
                this.state = 4090;
                this.match(MySqlParser.STAR);
                }
                break;
            case 2:
                localContext = new SelectColumnElementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4092;
                this.fullColumnName();
                this.state = 4097;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 593, this.context) ) {
                case 1:
                    {
                    this.state = 4094;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 12) {
                        {
                        this.state = 4093;
                        this.match(MySqlParser.AS);
                        }
                    }

                    this.state = 4096;
                    this.uid();
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new SelectFunctionElementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4099;
                this.functionCall();
                this.state = 4104;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 595, this.context) ) {
                case 1:
                    {
                    this.state = 4101;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 12) {
                        {
                        this.state = 4100;
                        this.match(MySqlParser.AS);
                        }
                    }

                    this.state = 4103;
                    this.uid();
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new SelectExpressionElementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4108;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 596, this.context) ) {
                case 1:
                    {
                    this.state = 4106;
                    this.match(MySqlParser.LOCAL_ID);
                    this.state = 4107;
                    this.match(MySqlParser.VAR_ASSIGN);
                    }
                    break;
                }
                this.state = 4110;
                this.expression(0);
                this.state = 4115;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 598, this.context) ) {
                case 1:
                    {
                    this.state = 4112;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 12) {
                        {
                        this.state = 4111;
                        this.match(MySqlParser.AS);
                        }
                    }

                    this.state = 4114;
                    this.uid();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectIntoExpression(): SelectIntoExpressionContext {
        let localContext = new SelectIntoExpressionContext(this.context, this.state);
        this.enterRule(localContext, 276, MySqlParser.RULE_selectIntoExpression);
        let _la: number;
        try {
            this.state = 4155;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 606, this.context) ) {
            case 1:
                localContext = new SelectIntoVariablesContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4119;
                this.match(MySqlParser.INTO);
                this.state = 4120;
                this.assignmentField();
                this.state = 4125;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 4121;
                    this.match(MySqlParser.COMMA);
                    this.state = 4122;
                    this.assignmentField();
                    }
                    }
                    this.state = 4127;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new SelectIntoDumpFileContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4128;
                this.match(MySqlParser.INTO);
                this.state = 4129;
                this.match(MySqlParser.DUMPFILE);
                this.state = 4130;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 3:
                localContext = new SelectIntoTextFileContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 4131;
                this.match(MySqlParser.INTO);
                this.state = 4132;
                this.match(MySqlParser.OUTFILE);
                this.state = 4133;
                (localContext as SelectIntoTextFileContext)._filename = this.match(MySqlParser.STRING_LITERAL);
                this.state = 4137;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 4134;
                    this.match(MySqlParser.CHARACTER);
                    this.state = 4135;
                    this.match(MySqlParser.SET);
                    this.state = 4136;
                    (localContext as SelectIntoTextFileContext)._charset = this.charsetName();
                    }
                }

                this.state = 4145;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 603, this.context) ) {
                case 1:
                    {
                    this.state = 4139;
                    (localContext as SelectIntoTextFileContext)._fieldsFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 365 || _la === 427)) {
                        (localContext as SelectIntoTextFileContext)._fieldsFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4141;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 4140;
                        this.selectFieldsInto();
                        }
                        }
                        this.state = 4143;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 56 || _la === 58 || _la === 122 || _la === 173);
                    }
                    break;
                }
                this.state = 4153;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 101) {
                    {
                    this.state = 4147;
                    this.match(MySqlParser.LINES);
                    this.state = 4149;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 4148;
                        this.selectLinesInto();
                        }
                        }
                        this.state = 4151;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 169 || _la === 173);
                    }
                }

                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectFieldsInto(): SelectFieldsIntoContext {
        let localContext = new SelectFieldsIntoContext(this.context, this.state);
        this.enterRule(localContext, 278, MySqlParser.RULE_selectFieldsInto);
        let _la: number;
        try {
            this.state = 4169;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.TERMINATED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4157;
                this.match(MySqlParser.TERMINATED);
                this.state = 4158;
                this.match(MySqlParser.BY);
                this.state = 4159;
                localContext._terminationField = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.ENCLOSED:
            case MySqlParser.OPTIONALLY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4161;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 4160;
                    this.match(MySqlParser.OPTIONALLY);
                    }
                }

                this.state = 4163;
                this.match(MySqlParser.ENCLOSED);
                this.state = 4164;
                this.match(MySqlParser.BY);
                this.state = 4165;
                localContext._enclosion = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.ESCAPED:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4166;
                this.match(MySqlParser.ESCAPED);
                this.state = 4167;
                this.match(MySqlParser.BY);
                this.state = 4168;
                localContext._escaping = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectLinesInto(): SelectLinesIntoContext {
        let localContext = new SelectLinesIntoContext(this.context, this.state);
        this.enterRule(localContext, 280, MySqlParser.RULE_selectLinesInto);
        try {
            this.state = 4177;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.STARTING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4171;
                this.match(MySqlParser.STARTING);
                this.state = 4172;
                this.match(MySqlParser.BY);
                this.state = 4173;
                localContext._starting = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.TERMINATED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4174;
                this.match(MySqlParser.TERMINATED);
                this.state = 4175;
                this.match(MySqlParser.BY);
                this.state = 4176;
                localContext._terminationLine = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 282, MySqlParser.RULE_fromClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4181;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 68) {
                {
                this.state = 4179;
                this.match(MySqlParser.FROM);
                this.state = 4180;
                this.tableSources();
                }
            }

            this.state = 4185;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 190) {
                {
                this.state = 4183;
                this.match(MySqlParser.WHERE);
                this.state = 4184;
                localContext._whereExpr = this.expression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 284, MySqlParser.RULE_groupByClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4187;
            this.match(MySqlParser.GROUP);
            this.state = 4188;
            this.match(MySqlParser.BY);
            this.state = 4189;
            this.groupByItem();
            this.state = 4194;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 612, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4190;
                    this.match(MySqlParser.COMMA);
                    this.state = 4191;
                    this.groupByItem();
                    }
                    }
                }
                this.state = 4196;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 612, this.context);
            }
            this.state = 4199;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 613, this.context) ) {
            case 1:
                {
                this.state = 4197;
                this.match(MySqlParser.WITH);
                this.state = 4198;
                this.match(MySqlParser.ROLLUP);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 286, MySqlParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4201;
            this.match(MySqlParser.HAVING);
            this.state = 4202;
            localContext._havingExpr = this.expression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 288, MySqlParser.RULE_windowClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4204;
            this.match(MySqlParser.WINDOW);
            this.state = 4205;
            this.windowName();
            this.state = 4206;
            this.match(MySqlParser.AS);
            this.state = 4207;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 4208;
            this.windowSpec();
            this.state = 4209;
            this.match(MySqlParser.RR_BRACKET);
            this.state = 4219;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 614, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4210;
                    this.match(MySqlParser.COMMA);
                    this.state = 4211;
                    this.windowName();
                    this.state = 4212;
                    this.match(MySqlParser.AS);
                    this.state = 4213;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 4214;
                    this.windowSpec();
                    this.state = 4215;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    }
                }
                this.state = 4221;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 614, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByItem(): GroupByItemContext {
        let localContext = new GroupByItemContext(this.context, this.state);
        this.enterRule(localContext, 290, MySqlParser.RULE_groupByItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4222;
            this.expression(0);
            this.state = 4224;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 13 || _la === 45) {
                {
                this.state = 4223;
                localContext._order = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 13 || _la === 45)) {
                    localContext._order = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 292, MySqlParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4226;
            this.match(MySqlParser.LIMIT);
            this.state = 4237;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 617, this.context) ) {
            case 1:
                {
                this.state = 4230;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 616, this.context) ) {
                case 1:
                    {
                    this.state = 4227;
                    localContext._offset = this.limitClauseAtom();
                    this.state = 4228;
                    this.match(MySqlParser.COMMA);
                    }
                    break;
                }
                this.state = 4232;
                localContext._limit = this.limitClauseAtom();
                }
                break;
            case 2:
                {
                this.state = 4233;
                localContext._limit = this.limitClauseAtom();
                this.state = 4234;
                this.match(MySqlParser.OFFSET);
                this.state = 4235;
                localContext._offset = this.limitClauseAtom();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClauseAtom(): LimitClauseAtomContext {
        let localContext = new LimitClauseAtomContext(this.context, this.state);
        this.enterRule(localContext, 294, MySqlParser.RULE_limitClauseAtom);
        try {
            this.state = 4242;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ZERO_DECIMAL:
            case MySqlParser.ONE_DECIMAL:
            case MySqlParser.TWO_DECIMAL:
            case MySqlParser.DECIMAL_LITERAL:
            case MySqlParser.REAL_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4239;
                this.decimalLiteral();
                }
                break;
            case MySqlParser.LOCAL_ID:
            case MySqlParser.GLOBAL_ID:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4240;
                this.mysqlVariable();
                }
                break;
            case MySqlParser.ARRAY:
            case MySqlParser.ATTRIBUTE:
            case MySqlParser.BUCKETS:
            case MySqlParser.CONDITION:
            case MySqlParser.CURRENT:
            case MySqlParser.CURRENT_USER:
            case MySqlParser.DATABASE:
            case MySqlParser.DEFAULT:
            case MySqlParser.DIAGNOSTICS:
            case MySqlParser.EMPTY:
            case MySqlParser.ENFORCED:
            case MySqlParser.EXCEPT:
            case MySqlParser.GROUP:
            case MySqlParser.IF:
            case MySqlParser.IGNORED:
            case MySqlParser.INSERT:
            case MySqlParser.LATERAL:
            case MySqlParser.LEFT:
            case MySqlParser.NUMBER:
            case MySqlParser.OPTIONAL:
            case MySqlParser.ORDER:
            case MySqlParser.PRIMARY:
            case MySqlParser.REPEAT:
            case MySqlParser.REPLACE:
            case MySqlParser.RIGHT:
            case MySqlParser.SCHEMA:
            case MySqlParser.SKIP_QUERY_REWRITE:
            case MySqlParser.STACKED:
            case MySqlParser.DATE:
            case MySqlParser.TIME:
            case MySqlParser.TIMESTAMP:
            case MySqlParser.DATETIME:
            case MySqlParser.YEAR:
            case MySqlParser.BINARY:
            case MySqlParser.TEXT:
            case MySqlParser.ENUM:
            case MySqlParser.SERIAL:
            case MySqlParser.JSON_ARRAY:
            case MySqlParser.JSON_ARRAYAGG:
            case MySqlParser.JSON_ARRAY_APPEND:
            case MySqlParser.JSON_ARRAY_INSERT:
            case MySqlParser.JSON_CONTAINS:
            case MySqlParser.JSON_CONTAINS_PATH:
            case MySqlParser.JSON_DEPTH:
            case MySqlParser.JSON_EXTRACT:
            case MySqlParser.JSON_INSERT:
            case MySqlParser.JSON_KEYS:
            case MySqlParser.JSON_LENGTH:
            case MySqlParser.JSON_MERGE:
            case MySqlParser.JSON_MERGE_PATCH:
            case MySqlParser.JSON_MERGE_PRESERVE:
            case MySqlParser.JSON_OBJECT:
            case MySqlParser.JSON_OBJECTAGG:
            case MySqlParser.JSON_OVERLAPS:
            case MySqlParser.JSON_PRETTY:
            case MySqlParser.JSON_QUOTE:
            case MySqlParser.JSON_REMOVE:
            case MySqlParser.JSON_REPLACE:
            case MySqlParser.JSON_SCHEMA_VALID:
            case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
            case MySqlParser.JSON_SEARCH:
            case MySqlParser.JSON_SET:
            case MySqlParser.JSON_STORAGE_FREE:
            case MySqlParser.JSON_STORAGE_SIZE:
            case MySqlParser.JSON_TABLE:
            case MySqlParser.JSON_TYPE:
            case MySqlParser.JSON_UNQUOTE:
            case MySqlParser.JSON_VALID:
            case MySqlParser.JSON_VALUE:
            case MySqlParser.NESTED:
            case MySqlParser.ORDINALITY:
            case MySqlParser.PATH:
            case MySqlParser.AVG:
            case MySqlParser.BIT_AND:
            case MySqlParser.BIT_OR:
            case MySqlParser.BIT_XOR:
            case MySqlParser.COUNT:
            case MySqlParser.CUME_DIST:
            case MySqlParser.DENSE_RANK:
            case MySqlParser.FIRST_VALUE:
            case MySqlParser.GROUP_CONCAT:
            case MySqlParser.LAG:
            case MySqlParser.LAST_VALUE:
            case MySqlParser.LEAD:
            case MySqlParser.MAX:
            case MySqlParser.MIN:
            case MySqlParser.NTILE:
            case MySqlParser.NTH_VALUE:
            case MySqlParser.PERCENT_RANK:
            case MySqlParser.RANK:
            case MySqlParser.ROW_NUMBER:
            case MySqlParser.STD:
            case MySqlParser.STDDEV:
            case MySqlParser.STDDEV_POP:
            case MySqlParser.STDDEV_SAMP:
            case MySqlParser.SUM:
            case MySqlParser.VAR_POP:
            case MySqlParser.VAR_SAMP:
            case MySqlParser.VARIANCE:
            case MySqlParser.CURRENT_DATE:
            case MySqlParser.CURRENT_TIME:
            case MySqlParser.CURRENT_TIMESTAMP:
            case MySqlParser.LOCALTIME:
            case MySqlParser.CURDATE:
            case MySqlParser.CURTIME:
            case MySqlParser.DATE_ADD:
            case MySqlParser.DATE_SUB:
            case MySqlParser.LOCALTIMESTAMP:
            case MySqlParser.NOW:
            case MySqlParser.POSITION:
            case MySqlParser.SUBSTR:
            case MySqlParser.SUBSTRING:
            case MySqlParser.SYSDATE:
            case MySqlParser.TRIM:
            case MySqlParser.UTC_DATE:
            case MySqlParser.UTC_TIME:
            case MySqlParser.UTC_TIMESTAMP:
            case MySqlParser.ACCOUNT:
            case MySqlParser.ACTION:
            case MySqlParser.AFTER:
            case MySqlParser.AGGREGATE:
            case MySqlParser.ALGORITHM:
            case MySqlParser.ANY:
            case MySqlParser.AT:
            case MySqlParser.AUTHORS:
            case MySqlParser.AUTOCOMMIT:
            case MySqlParser.AUTOEXTEND_SIZE:
            case MySqlParser.AUTO_INCREMENT:
            case MySqlParser.AVG_ROW_LENGTH:
            case MySqlParser.BEGIN:
            case MySqlParser.BINLOG:
            case MySqlParser.BIT:
            case MySqlParser.BLOCK:
            case MySqlParser.BOOL:
            case MySqlParser.BOOLEAN:
            case MySqlParser.BTREE:
            case MySqlParser.CACHE:
            case MySqlParser.CASCADED:
            case MySqlParser.CHAIN:
            case MySqlParser.CHANGED:
            case MySqlParser.CHANNEL:
            case MySqlParser.CHECKSUM:
            case MySqlParser.PAGE_CHECKSUM:
            case MySqlParser.CIPHER:
            case MySqlParser.CLASS_ORIGIN:
            case MySqlParser.CLIENT:
            case MySqlParser.CLOSE:
            case MySqlParser.CLUSTERING:
            case MySqlParser.COALESCE:
            case MySqlParser.CODE:
            case MySqlParser.COLUMNS:
            case MySqlParser.COLUMN_FORMAT:
            case MySqlParser.COLUMN_NAME:
            case MySqlParser.COMMENT:
            case MySqlParser.COMMIT:
            case MySqlParser.COMPACT:
            case MySqlParser.COMPLETION:
            case MySqlParser.COMPRESSED:
            case MySqlParser.COMPRESSION:
            case MySqlParser.CONCURRENT:
            case MySqlParser.CONNECT:
            case MySqlParser.CONNECTION:
            case MySqlParser.CONSISTENT:
            case MySqlParser.CONSTRAINT_CATALOG:
            case MySqlParser.CONSTRAINT_SCHEMA:
            case MySqlParser.CONSTRAINT_NAME:
            case MySqlParser.CONTAINS:
            case MySqlParser.CONTEXT:
            case MySqlParser.CONTRIBUTORS:
            case MySqlParser.COPY:
            case MySqlParser.CPU:
            case MySqlParser.CURSOR_NAME:
            case MySqlParser.DATA:
            case MySqlParser.DATAFILE:
            case MySqlParser.DEALLOCATE:
            case MySqlParser.DEFAULT_AUTH:
            case MySqlParser.DEFINER:
            case MySqlParser.DELAY_KEY_WRITE:
            case MySqlParser.DES_KEY_FILE:
            case MySqlParser.DIRECTORY:
            case MySqlParser.DISABLE:
            case MySqlParser.DISCARD:
            case MySqlParser.DISK:
            case MySqlParser.DO:
            case MySqlParser.DUMPFILE:
            case MySqlParser.DUPLICATE:
            case MySqlParser.DYNAMIC:
            case MySqlParser.ENABLE:
            case MySqlParser.ENCRYPTION:
            case MySqlParser.END:
            case MySqlParser.ENDS:
            case MySqlParser.ENGINE:
            case MySqlParser.ENGINES:
            case MySqlParser.ERROR:
            case MySqlParser.ERRORS:
            case MySqlParser.ESCAPE:
            case MySqlParser.EVEN:
            case MySqlParser.EVENT:
            case MySqlParser.EVENTS:
            case MySqlParser.EVERY:
            case MySqlParser.EXCHANGE:
            case MySqlParser.EXCLUSIVE:
            case MySqlParser.EXPIRE:
            case MySqlParser.EXPORT:
            case MySqlParser.EXTENDED:
            case MySqlParser.EXTENT_SIZE:
            case MySqlParser.FAILED_LOGIN_ATTEMPTS:
            case MySqlParser.FAST:
            case MySqlParser.FAULTS:
            case MySqlParser.FIELDS:
            case MySqlParser.FILE_BLOCK_SIZE:
            case MySqlParser.FILTER:
            case MySqlParser.FIRST:
            case MySqlParser.FIXED:
            case MySqlParser.FLUSH:
            case MySqlParser.FOLLOWS:
            case MySqlParser.FOUND:
            case MySqlParser.FULL:
            case MySqlParser.FUNCTION:
            case MySqlParser.GENERAL:
            case MySqlParser.GLOBAL:
            case MySqlParser.GRANTS:
            case MySqlParser.GROUP_REPLICATION:
            case MySqlParser.HANDLER:
            case MySqlParser.HASH:
            case MySqlParser.HELP:
            case MySqlParser.HISTORY:
            case MySqlParser.HOST:
            case MySqlParser.HOSTS:
            case MySqlParser.IDENTIFIED:
            case MySqlParser.IGNORE_SERVER_IDS:
            case MySqlParser.IMPORT:
            case MySqlParser.INDEXES:
            case MySqlParser.INITIAL_SIZE:
            case MySqlParser.INPLACE:
            case MySqlParser.INSERT_METHOD:
            case MySqlParser.INSTALL:
            case MySqlParser.INSTANCE:
            case MySqlParser.INSTANT:
            case MySqlParser.INVISIBLE:
            case MySqlParser.INVOKER:
            case MySqlParser.IO:
            case MySqlParser.IO_THREAD:
            case MySqlParser.IPC:
            case MySqlParser.ISOLATION:
            case MySqlParser.ISSUER:
            case MySqlParser.JSON:
            case MySqlParser.KEY_BLOCK_SIZE:
            case MySqlParser.LANGUAGE:
            case MySqlParser.LAST:
            case MySqlParser.LEAVES:
            case MySqlParser.LESS:
            case MySqlParser.LEVEL:
            case MySqlParser.LIST:
            case MySqlParser.LOCAL:
            case MySqlParser.LOGFILE:
            case MySqlParser.LOGS:
            case MySqlParser.MASTER:
            case MySqlParser.MASTER_AUTO_POSITION:
            case MySqlParser.MASTER_CONNECT_RETRY:
            case MySqlParser.MASTER_DELAY:
            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
            case MySqlParser.MASTER_HOST:
            case MySqlParser.MASTER_LOG_FILE:
            case MySqlParser.MASTER_LOG_POS:
            case MySqlParser.MASTER_PASSWORD:
            case MySqlParser.MASTER_PORT:
            case MySqlParser.MASTER_RETRY_COUNT:
            case MySqlParser.MASTER_SSL:
            case MySqlParser.MASTER_SSL_CA:
            case MySqlParser.MASTER_SSL_CAPATH:
            case MySqlParser.MASTER_SSL_CERT:
            case MySqlParser.MASTER_SSL_CIPHER:
            case MySqlParser.MASTER_SSL_CRL:
            case MySqlParser.MASTER_SSL_CRLPATH:
            case MySqlParser.MASTER_SSL_KEY:
            case MySqlParser.MASTER_TLS_VERSION:
            case MySqlParser.MASTER_USER:
            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
            case MySqlParser.MAX_QUERIES_PER_HOUR:
            case MySqlParser.MAX_ROWS:
            case MySqlParser.MAX_SIZE:
            case MySqlParser.MAX_UPDATES_PER_HOUR:
            case MySqlParser.MAX_USER_CONNECTIONS:
            case MySqlParser.MEDIUM:
            case MySqlParser.MEMBER:
            case MySqlParser.MERGE:
            case MySqlParser.MESSAGE_TEXT:
            case MySqlParser.MID:
            case MySqlParser.MIGRATE:
            case MySqlParser.MIN_ROWS:
            case MySqlParser.MODE:
            case MySqlParser.MODIFY:
            case MySqlParser.MUTEX:
            case MySqlParser.MYSQL:
            case MySqlParser.MYSQL_ERRNO:
            case MySqlParser.NAME:
            case MySqlParser.NAMES:
            case MySqlParser.NCHAR:
            case MySqlParser.NEVER:
            case MySqlParser.NEXT:
            case MySqlParser.NO:
            case MySqlParser.NOCOPY:
            case MySqlParser.NOWAIT:
            case MySqlParser.NODEGROUP:
            case MySqlParser.NONE:
            case MySqlParser.ODBC:
            case MySqlParser.OFFLINE:
            case MySqlParser.OFFSET:
            case MySqlParser.OF:
            case MySqlParser.OJ:
            case MySqlParser.OLD_PASSWORD:
            case MySqlParser.ONE:
            case MySqlParser.ONLINE:
            case MySqlParser.ONLY:
            case MySqlParser.OPEN:
            case MySqlParser.OPTIMIZER_COSTS:
            case MySqlParser.OPTIONS:
            case MySqlParser.OWNER:
            case MySqlParser.PACK_KEYS:
            case MySqlParser.PAGE:
            case MySqlParser.PARSER:
            case MySqlParser.PARTIAL:
            case MySqlParser.PARTITIONING:
            case MySqlParser.PARTITIONS:
            case MySqlParser.PASSWORD:
            case MySqlParser.PASSWORD_LOCK_TIME:
            case MySqlParser.PHASE:
            case MySqlParser.PLUGIN:
            case MySqlParser.PLUGIN_DIR:
            case MySqlParser.PLUGINS:
            case MySqlParser.PORT:
            case MySqlParser.PRECEDES:
            case MySqlParser.PREPARE:
            case MySqlParser.PRESERVE:
            case MySqlParser.PREV:
            case MySqlParser.PROCESSLIST:
            case MySqlParser.PROFILE:
            case MySqlParser.PROFILES:
            case MySqlParser.PROXY:
            case MySqlParser.QUERY:
            case MySqlParser.QUICK:
            case MySqlParser.REBUILD:
            case MySqlParser.RECOVER:
            case MySqlParser.RECURSIVE:
            case MySqlParser.REDO_BUFFER_SIZE:
            case MySqlParser.REDUNDANT:
            case MySqlParser.RELAY:
            case MySqlParser.RELAY_LOG_FILE:
            case MySqlParser.RELAY_LOG_POS:
            case MySqlParser.RELAYLOG:
            case MySqlParser.REMOVE:
            case MySqlParser.REORGANIZE:
            case MySqlParser.REPAIR:
            case MySqlParser.REPLICATE_DO_DB:
            case MySqlParser.REPLICATE_DO_TABLE:
            case MySqlParser.REPLICATE_IGNORE_DB:
            case MySqlParser.REPLICATE_IGNORE_TABLE:
            case MySqlParser.REPLICATE_REWRITE_DB:
            case MySqlParser.REPLICATE_WILD_DO_TABLE:
            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySqlParser.REPLICATION:
            case MySqlParser.RESET:
            case MySqlParser.RESUME:
            case MySqlParser.RETURNED_SQLSTATE:
            case MySqlParser.RETURNS:
            case MySqlParser.REUSE:
            case MySqlParser.ROLE:
            case MySqlParser.ROLLBACK:
            case MySqlParser.ROLLUP:
            case MySqlParser.ROTATE:
            case MySqlParser.ROW:
            case MySqlParser.ROWS:
            case MySqlParser.ROW_FORMAT:
            case MySqlParser.RTREE:
            case MySqlParser.SAVEPOINT:
            case MySqlParser.SCHEDULE:
            case MySqlParser.SECURITY:
            case MySqlParser.SERVER:
            case MySqlParser.SESSION:
            case MySqlParser.SHARE:
            case MySqlParser.SHARED:
            case MySqlParser.SIGNED:
            case MySqlParser.SIMPLE:
            case MySqlParser.SLAVE:
            case MySqlParser.SLOW:
            case MySqlParser.SNAPSHOT:
            case MySqlParser.SOCKET:
            case MySqlParser.SOME:
            case MySqlParser.SONAME:
            case MySqlParser.SOUNDS:
            case MySqlParser.SOURCE:
            case MySqlParser.SQL_AFTER_GTIDS:
            case MySqlParser.SQL_AFTER_MTS_GAPS:
            case MySqlParser.SQL_BEFORE_GTIDS:
            case MySqlParser.SQL_BUFFER_RESULT:
            case MySqlParser.SQL_CACHE:
            case MySqlParser.SQL_NO_CACHE:
            case MySqlParser.SQL_THREAD:
            case MySqlParser.START:
            case MySqlParser.STARTS:
            case MySqlParser.STATS_AUTO_RECALC:
            case MySqlParser.STATS_PERSISTENT:
            case MySqlParser.STATS_SAMPLE_PAGES:
            case MySqlParser.STATUS:
            case MySqlParser.STOP:
            case MySqlParser.STORAGE:
            case MySqlParser.STRING:
            case MySqlParser.SUBCLASS_ORIGIN:
            case MySqlParser.SUBJECT:
            case MySqlParser.SUBPARTITION:
            case MySqlParser.SUBPARTITIONS:
            case MySqlParser.SUSPEND:
            case MySqlParser.SWAPS:
            case MySqlParser.SWITCHES:
            case MySqlParser.TABLE_NAME:
            case MySqlParser.TABLESPACE:
            case MySqlParser.TABLE_TYPE:
            case MySqlParser.TEMPORARY:
            case MySqlParser.TEMPTABLE:
            case MySqlParser.THAN:
            case MySqlParser.TRADITIONAL:
            case MySqlParser.TRANSACTION:
            case MySqlParser.TRANSACTIONAL:
            case MySqlParser.TRIGGERS:
            case MySqlParser.TRUNCATE:
            case MySqlParser.UNBOUNDED:
            case MySqlParser.UNDEFINED:
            case MySqlParser.UNDOFILE:
            case MySqlParser.UNDO_BUFFER_SIZE:
            case MySqlParser.UNINSTALL:
            case MySqlParser.UNKNOWN:
            case MySqlParser.UNTIL:
            case MySqlParser.UPGRADE:
            case MySqlParser.USER:
            case MySqlParser.USE_FRM:
            case MySqlParser.USER_RESOURCES:
            case MySqlParser.VALIDATION:
            case MySqlParser.VALUE:
            case MySqlParser.VARIABLES:
            case MySqlParser.VIEW:
            case MySqlParser.VIRTUAL:
            case MySqlParser.VISIBLE:
            case MySqlParser.WAIT:
            case MySqlParser.WARNINGS:
            case MySqlParser.WITHOUT:
            case MySqlParser.WORK:
            case MySqlParser.WRAPPER:
            case MySqlParser.X509:
            case MySqlParser.XA:
            case MySqlParser.XML:
            case MySqlParser.EUR:
            case MySqlParser.USA:
            case MySqlParser.JIS:
            case MySqlParser.ISO:
            case MySqlParser.INTERNAL:
            case MySqlParser.QUARTER:
            case MySqlParser.MONTH:
            case MySqlParser.DAY:
            case MySqlParser.HOUR:
            case MySqlParser.MINUTE:
            case MySqlParser.WEEK:
            case MySqlParser.SECOND:
            case MySqlParser.MICROSECOND:
            case MySqlParser.ADMIN:
            case MySqlParser.AUDIT_ABORT_EXEMPT:
            case MySqlParser.AUDIT_ADMIN:
            case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
            case MySqlParser.BACKUP_ADMIN:
            case MySqlParser.BINLOG_ADMIN:
            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
            case MySqlParser.CLONE_ADMIN:
            case MySqlParser.CONNECTION_ADMIN:
            case MySqlParser.ENCRYPTION_KEY_ADMIN:
            case MySqlParser.EXECUTE:
            case MySqlParser.FILE:
            case MySqlParser.FIREWALL_ADMIN:
            case MySqlParser.FIREWALL_EXEMPT:
            case MySqlParser.FIREWALL_USER:
            case MySqlParser.GROUP_REPLICATION_ADMIN:
            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
            case MySqlParser.INVOKE:
            case MySqlParser.LAMBDA:
            case MySqlParser.NDB_STORED_USER:
            case MySqlParser.PASSWORDLESS_USER_ADMIN:
            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySqlParser.PRIVILEGES:
            case MySqlParser.PROCESS:
            case MySqlParser.RELOAD:
            case MySqlParser.REPLICATION_APPLIER:
            case MySqlParser.REPLICATION_SLAVE_ADMIN:
            case MySqlParser.RESOURCE_GROUP_ADMIN:
            case MySqlParser.RESOURCE_GROUP_USER:
            case MySqlParser.ROLE_ADMIN:
            case MySqlParser.ROUTINE:
            case MySqlParser.S3:
            case MySqlParser.SESSION_VARIABLES_ADMIN:
            case MySqlParser.SET_USER_ID:
            case MySqlParser.SHOW_ROUTINE:
            case MySqlParser.SHUTDOWN:
            case MySqlParser.SUPER:
            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
            case MySqlParser.TABLES:
            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
            case MySqlParser.VERSION_TOKEN_ADMIN:
            case MySqlParser.XA_RECOVER_ADMIN:
            case MySqlParser.ARMSCII8:
            case MySqlParser.ASCII:
            case MySqlParser.BIG5:
            case MySqlParser.CP1250:
            case MySqlParser.CP1251:
            case MySqlParser.CP1256:
            case MySqlParser.CP1257:
            case MySqlParser.CP850:
            case MySqlParser.CP852:
            case MySqlParser.CP866:
            case MySqlParser.CP932:
            case MySqlParser.DEC8:
            case MySqlParser.EUCJPMS:
            case MySqlParser.EUCKR:
            case MySqlParser.GB18030:
            case MySqlParser.GB2312:
            case MySqlParser.GBK:
            case MySqlParser.GEOSTD8:
            case MySqlParser.GREEK:
            case MySqlParser.HEBREW:
            case MySqlParser.HP8:
            case MySqlParser.KEYBCS2:
            case MySqlParser.KOI8R:
            case MySqlParser.KOI8U:
            case MySqlParser.LATIN1:
            case MySqlParser.LATIN2:
            case MySqlParser.LATIN5:
            case MySqlParser.LATIN7:
            case MySqlParser.MACCE:
            case MySqlParser.MACROMAN:
            case MySqlParser.SJIS:
            case MySqlParser.SWE7:
            case MySqlParser.TIS620:
            case MySqlParser.UCS2:
            case MySqlParser.UJIS:
            case MySqlParser.UTF16:
            case MySqlParser.UTF16LE:
            case MySqlParser.UTF32:
            case MySqlParser.UTF8:
            case MySqlParser.UTF8MB3:
            case MySqlParser.UTF8MB4:
            case MySqlParser.ARCHIVE:
            case MySqlParser.BLACKHOLE:
            case MySqlParser.CSV:
            case MySqlParser.FEDERATED:
            case MySqlParser.INNODB:
            case MySqlParser.MEMORY:
            case MySqlParser.MRG_MYISAM:
            case MySqlParser.MYISAM:
            case MySqlParser.NDB:
            case MySqlParser.NDBCLUSTER:
            case MySqlParser.PERFORMANCE_SCHEMA:
            case MySqlParser.TOKUDB:
            case MySqlParser.REPEATABLE:
            case MySqlParser.COMMITTED:
            case MySqlParser.UNCOMMITTED:
            case MySqlParser.SERIALIZABLE:
            case MySqlParser.GEOMETRYCOLLECTION:
            case MySqlParser.LINESTRING:
            case MySqlParser.MULTILINESTRING:
            case MySqlParser.MULTIPOINT:
            case MySqlParser.MULTIPOLYGON:
            case MySqlParser.POINT:
            case MySqlParser.POLYGON:
            case MySqlParser.ABS:
            case MySqlParser.ACOS:
            case MySqlParser.ADDDATE:
            case MySqlParser.ADDTIME:
            case MySqlParser.AES_DECRYPT:
            case MySqlParser.AES_ENCRYPT:
            case MySqlParser.AREA:
            case MySqlParser.ASBINARY:
            case MySqlParser.ASIN:
            case MySqlParser.ASTEXT:
            case MySqlParser.ASWKB:
            case MySqlParser.ASWKT:
            case MySqlParser.ASYMMETRIC_DECRYPT:
            case MySqlParser.ASYMMETRIC_DERIVE:
            case MySqlParser.ASYMMETRIC_ENCRYPT:
            case MySqlParser.ASYMMETRIC_SIGN:
            case MySqlParser.ASYMMETRIC_VERIFY:
            case MySqlParser.ATAN:
            case MySqlParser.ATAN2:
            case MySqlParser.BENCHMARK:
            case MySqlParser.BIN:
            case MySqlParser.BIT_COUNT:
            case MySqlParser.BIT_LENGTH:
            case MySqlParser.BUFFER:
            case MySqlParser.CATALOG_NAME:
            case MySqlParser.CEIL:
            case MySqlParser.CEILING:
            case MySqlParser.CENTROID:
            case MySqlParser.CHARACTER_LENGTH:
            case MySqlParser.CHARSET:
            case MySqlParser.CHAR_LENGTH:
            case MySqlParser.COERCIBILITY:
            case MySqlParser.COLLATION:
            case MySqlParser.COMPRESS:
            case MySqlParser.CONCAT:
            case MySqlParser.CONCAT_WS:
            case MySqlParser.CONNECTION_ID:
            case MySqlParser.CONV:
            case MySqlParser.CONVERT_TZ:
            case MySqlParser.COS:
            case MySqlParser.COT:
            case MySqlParser.CRC32:
            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySqlParser.CREATE_DH_PARAMETERS:
            case MySqlParser.CREATE_DIGEST:
            case MySqlParser.CROSSES:
            case MySqlParser.DATEDIFF:
            case MySqlParser.DATE_FORMAT:
            case MySqlParser.DAYNAME:
            case MySqlParser.DAYOFMONTH:
            case MySqlParser.DAYOFWEEK:
            case MySqlParser.DAYOFYEAR:
            case MySqlParser.DECODE:
            case MySqlParser.DEGREES:
            case MySqlParser.DES_DECRYPT:
            case MySqlParser.DES_ENCRYPT:
            case MySqlParser.DIMENSION:
            case MySqlParser.DISJOINT:
            case MySqlParser.ELT:
            case MySqlParser.ENCODE:
            case MySqlParser.ENCRYPT:
            case MySqlParser.ENDPOINT:
            case MySqlParser.ENGINE_ATTRIBUTE:
            case MySqlParser.ENVELOPE:
            case MySqlParser.EQUALS:
            case MySqlParser.EXP:
            case MySqlParser.EXPORT_SET:
            case MySqlParser.EXTERIORRING:
            case MySqlParser.EXTRACTVALUE:
            case MySqlParser.FIELD:
            case MySqlParser.FIND_IN_SET:
            case MySqlParser.FLOOR:
            case MySqlParser.FORMAT:
            case MySqlParser.FOUND_ROWS:
            case MySqlParser.FROM_BASE64:
            case MySqlParser.FROM_DAYS:
            case MySqlParser.FROM_UNIXTIME:
            case MySqlParser.GEOMCOLLFROMTEXT:
            case MySqlParser.GEOMCOLLFROMWKB:
            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.GEOMETRYFROMTEXT:
            case MySqlParser.GEOMETRYFROMWKB:
            case MySqlParser.GEOMETRYN:
            case MySqlParser.GEOMETRYTYPE:
            case MySqlParser.GEOMFROMTEXT:
            case MySqlParser.GEOMFROMWKB:
            case MySqlParser.GET_FORMAT:
            case MySqlParser.GET_LOCK:
            case MySqlParser.GLENGTH:
            case MySqlParser.GREATEST:
            case MySqlParser.GTID_SUBSET:
            case MySqlParser.GTID_SUBTRACT:
            case MySqlParser.HEX:
            case MySqlParser.IFNULL:
            case MySqlParser.INET6_ATON:
            case MySqlParser.INET6_NTOA:
            case MySqlParser.INET_ATON:
            case MySqlParser.INET_NTOA:
            case MySqlParser.INSTR:
            case MySqlParser.INTERIORRINGN:
            case MySqlParser.INTERSECTS:
            case MySqlParser.ISCLOSED:
            case MySqlParser.ISEMPTY:
            case MySqlParser.ISNULL:
            case MySqlParser.ISSIMPLE:
            case MySqlParser.IS_FREE_LOCK:
            case MySqlParser.IS_IPV4:
            case MySqlParser.IS_IPV4_COMPAT:
            case MySqlParser.IS_IPV4_MAPPED:
            case MySqlParser.IS_IPV6:
            case MySqlParser.IS_USED_LOCK:
            case MySqlParser.LAST_INSERT_ID:
            case MySqlParser.LCASE:
            case MySqlParser.LEAST:
            case MySqlParser.LENGTH:
            case MySqlParser.LINEFROMTEXT:
            case MySqlParser.LINEFROMWKB:
            case MySqlParser.LINESTRINGFROMTEXT:
            case MySqlParser.LINESTRINGFROMWKB:
            case MySqlParser.LN:
            case MySqlParser.LOAD_FILE:
            case MySqlParser.LOCATE:
            case MySqlParser.LOG:
            case MySqlParser.LOG10:
            case MySqlParser.LOG2:
            case MySqlParser.LOWER:
            case MySqlParser.LPAD:
            case MySqlParser.LTRIM:
            case MySqlParser.MAKEDATE:
            case MySqlParser.MAKETIME:
            case MySqlParser.MAKE_SET:
            case MySqlParser.MASTER_POS_WAIT:
            case MySqlParser.MBRCONTAINS:
            case MySqlParser.MBRDISJOINT:
            case MySqlParser.MBREQUAL:
            case MySqlParser.MBRINTERSECTS:
            case MySqlParser.MBROVERLAPS:
            case MySqlParser.MBRTOUCHES:
            case MySqlParser.MBRWITHIN:
            case MySqlParser.MD5:
            case MySqlParser.MLINEFROMTEXT:
            case MySqlParser.MLINEFROMWKB:
            case MySqlParser.MONTHNAME:
            case MySqlParser.MPOINTFROMTEXT:
            case MySqlParser.MPOINTFROMWKB:
            case MySqlParser.MPOLYFROMTEXT:
            case MySqlParser.MPOLYFROMWKB:
            case MySqlParser.MULTILINESTRINGFROMTEXT:
            case MySqlParser.MULTILINESTRINGFROMWKB:
            case MySqlParser.MULTIPOINTFROMTEXT:
            case MySqlParser.MULTIPOINTFROMWKB:
            case MySqlParser.MULTIPOLYGONFROMTEXT:
            case MySqlParser.MULTIPOLYGONFROMWKB:
            case MySqlParser.NAME_CONST:
            case MySqlParser.NULLIF:
            case MySqlParser.NUMGEOMETRIES:
            case MySqlParser.NUMINTERIORRINGS:
            case MySqlParser.NUMPOINTS:
            case MySqlParser.OCT:
            case MySqlParser.OCTET_LENGTH:
            case MySqlParser.ORD:
            case MySqlParser.OVERLAPS:
            case MySqlParser.PERIOD_ADD:
            case MySqlParser.PERIOD_DIFF:
            case MySqlParser.PI:
            case MySqlParser.POINTFROMTEXT:
            case MySqlParser.POINTFROMWKB:
            case MySqlParser.POINTN:
            case MySqlParser.POLYFROMTEXT:
            case MySqlParser.POLYFROMWKB:
            case MySqlParser.POLYGONFROMTEXT:
            case MySqlParser.POLYGONFROMWKB:
            case MySqlParser.POW:
            case MySqlParser.POWER:
            case MySqlParser.QUOTE:
            case MySqlParser.RADIANS:
            case MySqlParser.RAND:
            case MySqlParser.RANDOM:
            case MySqlParser.RANDOM_BYTES:
            case MySqlParser.RELEASE_LOCK:
            case MySqlParser.REVERSE:
            case MySqlParser.ROUND:
            case MySqlParser.ROW_COUNT:
            case MySqlParser.RPAD:
            case MySqlParser.RTRIM:
            case MySqlParser.SEC_TO_TIME:
            case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
            case MySqlParser.SESSION_USER:
            case MySqlParser.SHA:
            case MySqlParser.SHA1:
            case MySqlParser.SHA2:
            case MySqlParser.SCHEMA_NAME:
            case MySqlParser.SIGN:
            case MySqlParser.SIN:
            case MySqlParser.SLEEP:
            case MySqlParser.SOUNDEX:
            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySqlParser.SQRT:
            case MySqlParser.SRID:
            case MySqlParser.STARTPOINT:
            case MySqlParser.STRCMP:
            case MySqlParser.STR_TO_DATE:
            case MySqlParser.ST_AREA:
            case MySqlParser.ST_ASBINARY:
            case MySqlParser.ST_ASTEXT:
            case MySqlParser.ST_ASWKB:
            case MySqlParser.ST_ASWKT:
            case MySqlParser.ST_BUFFER:
            case MySqlParser.ST_CENTROID:
            case MySqlParser.ST_CONTAINS:
            case MySqlParser.ST_CROSSES:
            case MySqlParser.ST_DIFFERENCE:
            case MySqlParser.ST_DIMENSION:
            case MySqlParser.ST_DISJOINT:
            case MySqlParser.ST_DISTANCE:
            case MySqlParser.ST_ENDPOINT:
            case MySqlParser.ST_ENVELOPE:
            case MySqlParser.ST_EQUALS:
            case MySqlParser.ST_EXTERIORRING:
            case MySqlParser.ST_GEOMCOLLFROMTEXT:
            case MySqlParser.ST_GEOMCOLLFROMTXT:
            case MySqlParser.ST_GEOMCOLLFROMWKB:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.ST_GEOMETRYFROMTEXT:
            case MySqlParser.ST_GEOMETRYFROMWKB:
            case MySqlParser.ST_GEOMETRYN:
            case MySqlParser.ST_GEOMETRYTYPE:
            case MySqlParser.ST_GEOMFROMTEXT:
            case MySqlParser.ST_GEOMFROMWKB:
            case MySqlParser.ST_INTERIORRINGN:
            case MySqlParser.ST_INTERSECTION:
            case MySqlParser.ST_INTERSECTS:
            case MySqlParser.ST_ISCLOSED:
            case MySqlParser.ST_ISEMPTY:
            case MySqlParser.ST_ISSIMPLE:
            case MySqlParser.ST_LINEFROMTEXT:
            case MySqlParser.ST_LINEFROMWKB:
            case MySqlParser.ST_LINESTRINGFROMTEXT:
            case MySqlParser.ST_LINESTRINGFROMWKB:
            case MySqlParser.ST_NUMGEOMETRIES:
            case MySqlParser.ST_NUMINTERIORRING:
            case MySqlParser.ST_NUMINTERIORRINGS:
            case MySqlParser.ST_NUMPOINTS:
            case MySqlParser.ST_OVERLAPS:
            case MySqlParser.ST_POINTFROMTEXT:
            case MySqlParser.ST_POINTFROMWKB:
            case MySqlParser.ST_POINTN:
            case MySqlParser.ST_POLYFROMTEXT:
            case MySqlParser.ST_POLYFROMWKB:
            case MySqlParser.ST_POLYGONFROMTEXT:
            case MySqlParser.ST_POLYGONFROMWKB:
            case MySqlParser.ST_SRID:
            case MySqlParser.ST_STARTPOINT:
            case MySqlParser.ST_SYMDIFFERENCE:
            case MySqlParser.ST_TOUCHES:
            case MySqlParser.ST_UNION:
            case MySqlParser.ST_WITHIN:
            case MySqlParser.ST_X:
            case MySqlParser.ST_Y:
            case MySqlParser.SUBDATE:
            case MySqlParser.SUBSTRING_INDEX:
            case MySqlParser.SUBTIME:
            case MySqlParser.SYSTEM_USER:
            case MySqlParser.TAN:
            case MySqlParser.TIMEDIFF:
            case MySqlParser.TIMESTAMPADD:
            case MySqlParser.TIMESTAMPDIFF:
            case MySqlParser.TIME_FORMAT:
            case MySqlParser.TIME_TO_SEC:
            case MySqlParser.TOUCHES:
            case MySqlParser.TO_BASE64:
            case MySqlParser.TO_DAYS:
            case MySqlParser.TO_SECONDS:
            case MySqlParser.TP_CONNECTION_ADMIN:
            case MySqlParser.UCASE:
            case MySqlParser.UNCOMPRESS:
            case MySqlParser.UNCOMPRESSED_LENGTH:
            case MySqlParser.UNHEX:
            case MySqlParser.UNIX_TIMESTAMP:
            case MySqlParser.UPDATEXML:
            case MySqlParser.UPPER:
            case MySqlParser.UUID:
            case MySqlParser.UUID_SHORT:
            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
            case MySqlParser.VERSION:
            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySqlParser.WEEKDAY:
            case MySqlParser.WEEKOFYEAR:
            case MySqlParser.WEIGHT_STRING:
            case MySqlParser.WITHIN:
            case MySqlParser.YEARWEEK:
            case MySqlParser.Y_FUNCTION:
            case MySqlParser.X_FUNCTION:
            case MySqlParser.MOD:
            case MySqlParser.ID:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4241;
                this.simpleId();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public startTransaction(): StartTransactionContext {
        let localContext = new StartTransactionContext(this.context, this.state);
        this.enterRule(localContext, 296, MySqlParser.RULE_startTransaction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4244;
            this.match(MySqlParser.START);
            this.state = 4245;
            this.match(MySqlParser.TRANSACTION);
            this.state = 4254;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134 || _la === 192) {
                {
                this.state = 4246;
                this.transactionMode();
                this.state = 4251;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 4247;
                    this.match(MySqlParser.COMMA);
                    this.state = 4248;
                    this.transactionMode();
                    }
                    }
                    this.state = 4253;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public beginWork(): BeginWorkContext {
        let localContext = new BeginWorkContext(this.context, this.state);
        this.enterRule(localContext, 298, MySqlParser.RULE_beginWork);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4256;
            this.match(MySqlParser.BEGIN);
            this.state = 4258;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 678) {
                {
                this.state = 4257;
                this.match(MySqlParser.WORK);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commitWork(): CommitWorkContext {
        let localContext = new CommitWorkContext(this.context, this.state);
        this.enterRule(localContext, 300, MySqlParser.RULE_commitWork);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4260;
            this.match(MySqlParser.COMMIT);
            this.state = 4262;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 678) {
                {
                this.state = 4261;
                this.match(MySqlParser.WORK);
                }
            }

            this.state = 4269;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 4264;
                this.match(MySqlParser.AND);
                this.state = 4266;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 521) {
                    {
                    this.state = 4265;
                    localContext._nochain = this.match(MySqlParser.NO);
                    }
                }

                this.state = 4268;
                this.match(MySqlParser.CHAIN);
                }
            }

            this.state = 4275;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 138 || _la === 521) {
                {
                this.state = 4272;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 521) {
                    {
                    this.state = 4271;
                    localContext._norelease = this.match(MySqlParser.NO);
                    }
                }

                this.state = 4274;
                this.match(MySqlParser.RELEASE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollbackWork(): RollbackWorkContext {
        let localContext = new RollbackWorkContext(this.context, this.state);
        this.enterRule(localContext, 302, MySqlParser.RULE_rollbackWork);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4277;
            this.match(MySqlParser.ROLLBACK);
            this.state = 4279;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 678) {
                {
                this.state = 4278;
                this.match(MySqlParser.WORK);
                }
            }

            this.state = 4286;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 4281;
                this.match(MySqlParser.AND);
                this.state = 4283;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 521) {
                    {
                    this.state = 4282;
                    localContext._nochain = this.match(MySqlParser.NO);
                    }
                }

                this.state = 4285;
                this.match(MySqlParser.CHAIN);
                }
            }

            this.state = 4292;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 138 || _la === 521) {
                {
                this.state = 4289;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 521) {
                    {
                    this.state = 4288;
                    localContext._norelease = this.match(MySqlParser.NO);
                    }
                }

                this.state = 4291;
                this.match(MySqlParser.RELEASE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public savepointStatement(): SavepointStatementContext {
        let localContext = new SavepointStatementContext(this.context, this.state);
        this.enterRule(localContext, 304, MySqlParser.RULE_savepointStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4294;
            this.match(MySqlParser.SAVEPOINT);
            this.state = 4295;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollbackStatement(): RollbackStatementContext {
        let localContext = new RollbackStatementContext(this.context, this.state);
        this.enterRule(localContext, 306, MySqlParser.RULE_rollbackStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4297;
            this.match(MySqlParser.ROLLBACK);
            this.state = 4299;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 678) {
                {
                this.state = 4298;
                this.match(MySqlParser.WORK);
                }
            }

            this.state = 4301;
            this.match(MySqlParser.TO);
            this.state = 4303;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 633, this.context) ) {
            case 1:
                {
                this.state = 4302;
                this.match(MySqlParser.SAVEPOINT);
                }
                break;
            }
            this.state = 4305;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public releaseStatement(): ReleaseStatementContext {
        let localContext = new ReleaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 308, MySqlParser.RULE_releaseStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4307;
            this.match(MySqlParser.RELEASE);
            this.state = 4308;
            this.match(MySqlParser.SAVEPOINT);
            this.state = 4309;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockTables(): LockTablesContext {
        let localContext = new LockTablesContext(this.context, this.state);
        this.enterRule(localContext, 310, MySqlParser.RULE_lockTables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4311;
            this.match(MySqlParser.LOCK);
            this.state = 4312;
            _la = this.tokenStream.LA(1);
            if(!(_la === 172 || _la === 742)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4313;
            this.lockTableElement();
            this.state = 4318;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 4314;
                this.match(MySqlParser.COMMA);
                this.state = 4315;
                this.lockTableElement();
                }
                }
                this.state = 4320;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4322;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 527 || _la === 674) {
                {
                this.state = 4321;
                this.waitNowaitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlockTables(): UnlockTablesContext {
        let localContext = new UnlockTablesContext(this.context, this.state);
        this.enterRule(localContext, 312, MySqlParser.RULE_unlockTables);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4324;
            this.match(MySqlParser.UNLOCK);
            this.state = 4325;
            this.match(MySqlParser.TABLES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setAutocommitStatement(): SetAutocommitStatementContext {
        let localContext = new SetAutocommitStatementContext(this.context, this.state);
        this.enterRule(localContext, 314, MySqlParser.RULE_setAutocommitStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4327;
            this.match(MySqlParser.SET);
            this.state = 4328;
            this.match(MySqlParser.AUTOCOMMIT);
            this.state = 4329;
            this.match(MySqlParser.EQUAL_SYMBOL);
            this.state = 4330;
            localContext._autocommitValue = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 1138 || _la === 1139)) {
                localContext._autocommitValue = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setTransactionStatement(): SetTransactionStatementContext {
        let localContext = new SetTransactionStatementContext(this.context, this.state);
        this.enterRule(localContext, 316, MySqlParser.RULE_setTransactionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4332;
            this.match(MySqlParser.SET);
            this.state = 4334;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 439 || _la === 609) {
                {
                this.state = 4333;
                localContext._transactionContext = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 439 || _la === 609)) {
                    localContext._transactionContext = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 4336;
            this.match(MySqlParser.TRANSACTION);
            this.state = 4337;
            this.transactionOption();
            this.state = 4342;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 4338;
                this.match(MySqlParser.COMMA);
                this.state = 4339;
                this.transactionOption();
                }
                }
                this.state = 4344;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionMode(): TransactionModeContext {
        let localContext = new TransactionModeContext(this.context, this.state);
        this.enterRule(localContext, 318, MySqlParser.RULE_transactionMode);
        try {
            this.state = 4352;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 638, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4345;
                this.match(MySqlParser.WITH);
                this.state = 4346;
                this.match(MySqlParser.CONSISTENT);
                this.state = 4347;
                this.match(MySqlParser.SNAPSHOT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4348;
                this.match(MySqlParser.READ);
                this.state = 4349;
                this.match(MySqlParser.WRITE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4350;
                this.match(MySqlParser.READ);
                this.state = 4351;
                this.match(MySqlParser.ONLY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockTableElement(): LockTableElementContext {
        let localContext = new LockTableElementContext(this.context, this.state);
        this.enterRule(localContext, 320, MySqlParser.RULE_lockTableElement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4354;
            this.tableName();
            this.state = 4359;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537155584) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                {
                this.state = 4356;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12) {
                    {
                    this.state = 4355;
                    this.match(MySqlParser.AS);
                    }
                }

                this.state = 4358;
                this.uid();
                }
            }

            this.state = 4361;
            this.lockAction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockAction(): LockActionContext {
        let localContext = new LockActionContext(this.context, this.state);
        this.enterRule(localContext, 322, MySqlParser.RULE_lockAction);
        let _la: number;
        try {
            this.state = 4371;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.READ:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4363;
                this.match(MySqlParser.READ);
                this.state = 4365;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 474) {
                    {
                    this.state = 4364;
                    this.match(MySqlParser.LOCAL);
                    }
                }

                }
                break;
            case MySqlParser.LOW_PRIORITY:
            case MySqlParser.WRITE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4368;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 106) {
                    {
                    this.state = 4367;
                    this.match(MySqlParser.LOW_PRIORITY);
                    }
                }

                this.state = 4370;
                this.match(MySqlParser.WRITE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionOption(): TransactionOptionContext {
        let localContext = new TransactionOptionContext(this.context, this.state);
        this.enterRule(localContext, 324, MySqlParser.RULE_transactionOption);
        try {
            this.state = 4380;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 644, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4373;
                this.match(MySqlParser.ISOLATION);
                this.state = 4374;
                this.match(MySqlParser.LEVEL);
                this.state = 4375;
                this.transactionLevel();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4376;
                this.match(MySqlParser.READ);
                this.state = 4377;
                this.match(MySqlParser.WRITE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4378;
                this.match(MySqlParser.READ);
                this.state = 4379;
                this.match(MySqlParser.ONLY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionLevel(): TransactionLevelContext {
        let localContext = new TransactionLevelContext(this.context, this.state);
        this.enterRule(localContext, 326, MySqlParser.RULE_transactionLevel);
        try {
            this.state = 4389;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 645, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4382;
                this.match(MySqlParser.REPEATABLE);
                this.state = 4383;
                this.match(MySqlParser.READ);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4384;
                this.match(MySqlParser.READ);
                this.state = 4385;
                this.match(MySqlParser.COMMITTED);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4386;
                this.match(MySqlParser.READ);
                this.state = 4387;
                this.match(MySqlParser.UNCOMMITTED);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4388;
                this.match(MySqlParser.SERIALIZABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeMaster(): ChangeMasterContext {
        let localContext = new ChangeMasterContext(this.context, this.state);
        this.enterRule(localContext, 328, MySqlParser.RULE_changeMaster);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4391;
            this.match(MySqlParser.CHANGE);
            this.state = 4392;
            this.match(MySqlParser.MASTER);
            this.state = 4393;
            this.match(MySqlParser.TO);
            this.state = 4394;
            this.masterOption();
            this.state = 4399;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 4395;
                this.match(MySqlParser.COMMA);
                this.state = 4396;
                this.masterOption();
                }
                }
                this.state = 4401;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4403;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 65) {
                {
                this.state = 4402;
                this.channelOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changeReplicationFilter(): ChangeReplicationFilterContext {
        let localContext = new ChangeReplicationFilterContext(this.context, this.state);
        this.enterRule(localContext, 330, MySqlParser.RULE_changeReplicationFilter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4405;
            this.match(MySqlParser.CHANGE);
            this.state = 4406;
            this.match(MySqlParser.REPLICATION);
            this.state = 4407;
            this.match(MySqlParser.FILTER);
            this.state = 4408;
            this.replicationFilter();
            this.state = 4413;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 4409;
                this.match(MySqlParser.COMMA);
                this.state = 4410;
                this.replicationFilter();
                }
                }
                this.state = 4415;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public purgeBinaryLogs(): PurgeBinaryLogsContext {
        let localContext = new PurgeBinaryLogsContext(this.context, this.state);
        this.enterRule(localContext, 332, MySqlParser.RULE_purgeBinaryLogs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4416;
            this.match(MySqlParser.PURGE);
            this.state = 4417;
            localContext._purgeFormat = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 226 || _la === 477)) {
                localContext._purgeFormat = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4418;
            this.match(MySqlParser.LOGS);
            this.state = 4423;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.TO:
                {
                this.state = 4419;
                this.match(MySqlParser.TO);
                this.state = 4420;
                localContext._fileName = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.BEFORE:
                {
                this.state = 4421;
                this.match(MySqlParser.BEFORE);
                this.state = 4422;
                localContext._timeValue = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resetMaster(): ResetMasterContext {
        let localContext = new ResetMasterContext(this.context, this.state);
        this.enterRule(localContext, 334, MySqlParser.RULE_resetMaster);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4425;
            this.match(MySqlParser.RESET);
            this.state = 4426;
            this.match(MySqlParser.MASTER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resetSlave(): ResetSlaveContext {
        let localContext = new ResetSlaveContext(this.context, this.state);
        this.enterRule(localContext, 336, MySqlParser.RULE_resetSlave);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4428;
            this.match(MySqlParser.RESET);
            this.state = 4429;
            this.match(MySqlParser.SLAVE);
            this.state = 4431;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 4430;
                this.match(MySqlParser.ALL);
                }
            }

            this.state = 4434;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 65) {
                {
                this.state = 4433;
                this.channelOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public startSlave(): StartSlaveContext {
        let localContext = new StartSlaveContext(this.context, this.state);
        this.enterRule(localContext, 338, MySqlParser.RULE_startSlave);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4436;
            this.match(MySqlParser.START);
            this.state = 4437;
            this.match(MySqlParser.SLAVE);
            this.state = 4446;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 462 || _la === 628) {
                {
                this.state = 4438;
                this.threadType();
                this.state = 4443;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 4439;
                    this.match(MySqlParser.COMMA);
                    this.state = 4440;
                    this.threadType();
                    }
                    }
                    this.state = 4445;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 4450;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 663) {
                {
                this.state = 4448;
                this.match(MySqlParser.UNTIL);
                this.state = 4449;
                this.untilOption();
                }
            }

            this.state = 4455;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 391 || _la === 551 || _la === 555 || _la === 665) {
                {
                {
                this.state = 4452;
                this.connectionOption();
                }
                }
                this.state = 4457;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4459;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 65) {
                {
                this.state = 4458;
                this.channelOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stopSlave(): StopSlaveContext {
        let localContext = new StopSlaveContext(this.context, this.state);
        this.enterRule(localContext, 340, MySqlParser.RULE_stopSlave);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4461;
            this.match(MySqlParser.STOP);
            this.state = 4462;
            this.match(MySqlParser.SLAVE);
            this.state = 4471;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 462 || _la === 628) {
                {
                this.state = 4463;
                this.threadType();
                this.state = 4468;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 4464;
                    this.match(MySqlParser.COMMA);
                    this.state = 4465;
                    this.threadType();
                    }
                    }
                    this.state = 4470;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public startGroupReplication(): StartGroupReplicationContext {
        let localContext = new StartGroupReplicationContext(this.context, this.state);
        this.enterRule(localContext, 342, MySqlParser.RULE_startGroupReplication);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4473;
            this.match(MySqlParser.START);
            this.state = 4474;
            this.match(MySqlParser.GROUP_REPLICATION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stopGroupReplication(): StopGroupReplicationContext {
        let localContext = new StopGroupReplicationContext(this.context, this.state);
        this.enterRule(localContext, 344, MySqlParser.RULE_stopGroupReplication);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4476;
            this.match(MySqlParser.STOP);
            this.state = 4477;
            this.match(MySqlParser.GROUP_REPLICATION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public masterOption(): MasterOptionContext {
        let localContext = new MasterOptionContext(this.context, this.state);
        this.enterRule(localContext, 346, MySqlParser.RULE_masterOption);
        let _la: number;
        try {
            this.state = 4508;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.MASTER_BIND:
            case MySqlParser.MASTER_HOST:
            case MySqlParser.MASTER_LOG_FILE:
            case MySqlParser.MASTER_PASSWORD:
            case MySqlParser.MASTER_SSL_CA:
            case MySqlParser.MASTER_SSL_CAPATH:
            case MySqlParser.MASTER_SSL_CERT:
            case MySqlParser.MASTER_SSL_CIPHER:
            case MySqlParser.MASTER_SSL_CRL:
            case MySqlParser.MASTER_SSL_CRLPATH:
            case MySqlParser.MASTER_SSL_KEY:
            case MySqlParser.MASTER_TLS_VERSION:
            case MySqlParser.MASTER_USER:
            case MySqlParser.RELAY_LOG_FILE:
                localContext = new MasterStringOptionContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4479;
                this.stringMasterOption();
                this.state = 4480;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4481;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.MASTER_CONNECT_RETRY:
            case MySqlParser.MASTER_DELAY:
            case MySqlParser.MASTER_LOG_POS:
            case MySqlParser.MASTER_PORT:
            case MySqlParser.MASTER_RETRY_COUNT:
            case MySqlParser.RELAY_LOG_POS:
                localContext = new MasterDecimalOptionContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4483;
                this.decimalMasterOption();
                this.state = 4484;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4485;
                this.decimalLiteral();
                }
                break;
            case MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT:
            case MySqlParser.MASTER_AUTO_POSITION:
            case MySqlParser.MASTER_SSL:
                localContext = new MasterBoolOptionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4487;
                this.boolMasterOption();
                this.state = 4488;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4489;
                (localContext as MasterBoolOptionContext)._boolVal = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 1138 || _la === 1139)) {
                    (localContext as MasterBoolOptionContext)._boolVal = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                localContext = new MasterRealOptionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4491;
                this.match(MySqlParser.MASTER_HEARTBEAT_PERIOD);
                this.state = 4492;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4493;
                this.match(MySqlParser.REAL_LITERAL);
                }
                break;
            case MySqlParser.IGNORE_SERVER_IDS:
                localContext = new MasterUidListOptionContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4494;
                this.match(MySqlParser.IGNORE_SERVER_IDS);
                this.state = 4495;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4496;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 4505;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 4497;
                    this.uid();
                    this.state = 4502;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 1135) {
                        {
                        {
                        this.state = 4498;
                        this.match(MySqlParser.COMMA);
                        this.state = 4499;
                        this.uid();
                        }
                        }
                        this.state = 4504;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 4507;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringMasterOption(): StringMasterOptionContext {
        let localContext = new StringMasterOptionContext(this.context, this.state);
        this.enterRule(localContext, 348, MySqlParser.RULE_stringMasterOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4510;
            _la = this.tokenStream.LA(1);
            if(!(_la === 107 || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 65419) !== 0) || _la === 575)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decimalMasterOption(): DecimalMasterOptionContext {
        let localContext = new DecimalMasterOptionContext(this.context, this.state);
        this.enterRule(localContext, 350, MySqlParser.RULE_decimalMasterOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4512;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & 419) !== 0) || _la === 576)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public boolMasterOption(): BoolMasterOptionContext {
        let localContext = new BoolMasterOptionContext(this.context, this.state);
        this.enterRule(localContext, 352, MySqlParser.RULE_boolMasterOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4514;
            _la = this.tokenStream.LA(1);
            if(!(_la === 108 || _la === 478 || _la === 488)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public channelOption(): ChannelOptionContext {
        let localContext = new ChannelOptionContext(this.context, this.state);
        this.enterRule(localContext, 354, MySqlParser.RULE_channelOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4516;
            this.match(MySqlParser.FOR);
            this.state = 4517;
            this.match(MySqlParser.CHANNEL);
            this.state = 4518;
            this.match(MySqlParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replicationFilter(): ReplicationFilterContext {
        let localContext = new ReplicationFilterContext(this.context, this.state);
        this.enterRule(localContext, 356, MySqlParser.RULE_replicationFilter);
        let _la: number;
        try {
            this.state = 4569;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.REPLICATE_DO_DB:
                localContext = new DoDbReplicationContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4520;
                this.match(MySqlParser.REPLICATE_DO_DB);
                this.state = 4521;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4522;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 4523;
                this.uidList();
                this.state = 4524;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case MySqlParser.REPLICATE_IGNORE_DB:
                localContext = new IgnoreDbReplicationContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4526;
                this.match(MySqlParser.REPLICATE_IGNORE_DB);
                this.state = 4527;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4528;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 4529;
                this.uidList();
                this.state = 4530;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case MySqlParser.REPLICATE_DO_TABLE:
                localContext = new DoTableReplicationContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4532;
                this.match(MySqlParser.REPLICATE_DO_TABLE);
                this.state = 4533;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4534;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 4535;
                this.tables();
                this.state = 4536;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case MySqlParser.REPLICATE_IGNORE_TABLE:
                localContext = new IgnoreTableReplicationContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4538;
                this.match(MySqlParser.REPLICATE_IGNORE_TABLE);
                this.state = 4539;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4540;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 4541;
                this.tables();
                this.state = 4542;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case MySqlParser.REPLICATE_WILD_DO_TABLE:
                localContext = new WildDoTableReplicationContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4544;
                this.match(MySqlParser.REPLICATE_WILD_DO_TABLE);
                this.state = 4545;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4546;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 4547;
                this.simpleStrings();
                this.state = 4548;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                localContext = new WildIgnoreTableReplicationContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4550;
                this.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE);
                this.state = 4551;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4552;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 4553;
                this.simpleStrings();
                this.state = 4554;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case MySqlParser.REPLICATE_REWRITE_DB:
                localContext = new RewriteDbReplicationContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4556;
                this.match(MySqlParser.REPLICATE_REWRITE_DB);
                this.state = 4557;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4558;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 4559;
                this.tablePair();
                this.state = 4564;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 4560;
                    this.match(MySqlParser.COMMA);
                    this.state = 4561;
                    this.tablePair();
                    }
                    }
                    this.state = 4566;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4567;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePair(): TablePairContext {
        let localContext = new TablePairContext(this.context, this.state);
        this.enterRule(localContext, 358, MySqlParser.RULE_tablePair);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4571;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 4572;
            localContext._firstTable = this.tableName();
            this.state = 4573;
            this.match(MySqlParser.COMMA);
            this.state = 4574;
            localContext._secondTable = this.tableName();
            this.state = 4575;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public threadType(): ThreadTypeContext {
        let localContext = new ThreadTypeContext(this.context, this.state);
        this.enterRule(localContext, 360, MySqlParser.RULE_threadType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4577;
            _la = this.tokenStream.LA(1);
            if(!(_la === 462 || _la === 628)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public untilOption(): UntilOptionContext {
        let localContext = new UntilOptionContext(this.context, this.state);
        this.enterRule(localContext, 362, MySqlParser.RULE_untilOption);
        let _la: number;
        try {
            this.state = 4597;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.SQL_AFTER_GTIDS:
            case MySqlParser.SQL_BEFORE_GTIDS:
                localContext = new GtidsUntilOptionContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4579;
                (localContext as GtidsUntilOptionContext)._gtids = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 622 || _la === 624)) {
                    (localContext as GtidsUntilOptionContext)._gtids = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4580;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4581;
                this.gtuidSet();
                }
                break;
            case MySqlParser.MASTER_LOG_FILE:
                localContext = new MasterLogUntilOptionContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4582;
                this.match(MySqlParser.MASTER_LOG_FILE);
                this.state = 4583;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4584;
                this.match(MySqlParser.STRING_LITERAL);
                this.state = 4585;
                this.match(MySqlParser.COMMA);
                this.state = 4586;
                this.match(MySqlParser.MASTER_LOG_POS);
                this.state = 4587;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4588;
                this.decimalLiteral();
                }
                break;
            case MySqlParser.RELAY_LOG_FILE:
                localContext = new RelayLogUntilOptionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4589;
                this.match(MySqlParser.RELAY_LOG_FILE);
                this.state = 4590;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4591;
                this.match(MySqlParser.STRING_LITERAL);
                this.state = 4592;
                this.match(MySqlParser.COMMA);
                this.state = 4593;
                this.match(MySqlParser.RELAY_LOG_POS);
                this.state = 4594;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4595;
                this.decimalLiteral();
                }
                break;
            case MySqlParser.SQL_AFTER_MTS_GAPS:
                localContext = new SqlGapsUntilOptionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4596;
                this.match(MySqlParser.SQL_AFTER_MTS_GAPS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public connectionOption(): ConnectionOptionContext {
        let localContext = new ConnectionOptionContext(this.context, this.state);
        this.enterRule(localContext, 364, MySqlParser.RULE_connectionOption);
        try {
            this.state = 4611;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.USER:
                localContext = new UserConnectionOptionContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4599;
                this.match(MySqlParser.USER);
                this.state = 4600;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4601;
                (localContext as UserConnectionOptionContext)._conOptUser = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.PASSWORD:
                localContext = new PasswordConnectionOptionContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4602;
                this.match(MySqlParser.PASSWORD);
                this.state = 4603;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4604;
                (localContext as PasswordConnectionOptionContext)._conOptPassword = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.DEFAULT_AUTH:
                localContext = new DefaultAuthConnectionOptionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4605;
                this.match(MySqlParser.DEFAULT_AUTH);
                this.state = 4606;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4607;
                (localContext as DefaultAuthConnectionOptionContext)._conOptDefAuth = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.PLUGIN_DIR:
                localContext = new PluginDirConnectionOptionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4608;
                this.match(MySqlParser.PLUGIN_DIR);
                this.state = 4609;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 4610;
                (localContext as PluginDirConnectionOptionContext)._conOptPluginDir = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public gtuidSet(): GtuidSetContext {
        let localContext = new GtuidSetContext(this.context, this.state);
        this.enterRule(localContext, 366, MySqlParser.RULE_gtuidSet);
        let _la: number;
        try {
            this.state = 4622;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ZERO_DECIMAL:
            case MySqlParser.ONE_DECIMAL:
            case MySqlParser.TWO_DECIMAL:
            case MySqlParser.DECIMAL_LITERAL:
            case MySqlParser.REAL_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4613;
                this.uuidSet();
                this.state = 4618;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 4614;
                    this.match(MySqlParser.COMMA);
                    this.state = 4615;
                    this.uuidSet();
                    }
                    }
                    this.state = 4620;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case MySqlParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4621;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xaStartTransaction(): XaStartTransactionContext {
        let localContext = new XaStartTransactionContext(this.context, this.state);
        this.enterRule(localContext, 368, MySqlParser.RULE_xaStartTransaction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4624;
            this.match(MySqlParser.XA);
            this.state = 4625;
            localContext._xaStart = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 344 || _la === 629)) {
                localContext._xaStart = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4626;
            this.xid();
            this.state = 4628;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 90 || _la === 591) {
                {
                this.state = 4627;
                localContext._xaAction = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 90 || _la === 591)) {
                    localContext._xaAction = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xaEndTransaction(): XaEndTransactionContext {
        let localContext = new XaEndTransactionContext(this.context, this.state);
        this.enterRule(localContext, 370, MySqlParser.RULE_xaEndTransaction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4630;
            this.match(MySqlParser.XA);
            this.state = 4631;
            this.match(MySqlParser.END);
            this.state = 4632;
            this.xid();
            this.state = 4638;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 643) {
                {
                this.state = 4633;
                this.match(MySqlParser.SUSPEND);
                this.state = 4636;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 4634;
                    this.match(MySqlParser.FOR);
                    this.state = 4635;
                    this.match(MySqlParser.MIGRATE);
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xaPrepareStatement(): XaPrepareStatementContext {
        let localContext = new XaPrepareStatementContext(this.context, this.state);
        this.enterRule(localContext, 372, MySqlParser.RULE_xaPrepareStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4640;
            this.match(MySqlParser.XA);
            this.state = 4641;
            this.match(MySqlParser.PREPARE);
            this.state = 4642;
            this.xid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xaCommitWork(): XaCommitWorkContext {
        let localContext = new XaCommitWorkContext(this.context, this.state);
        this.enterRule(localContext, 374, MySqlParser.RULE_xaCommitWork);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4644;
            this.match(MySqlParser.XA);
            this.state = 4645;
            this.match(MySqlParser.COMMIT);
            this.state = 4646;
            this.xid();
            this.state = 4649;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 536) {
                {
                this.state = 4647;
                this.match(MySqlParser.ONE);
                this.state = 4648;
                this.match(MySqlParser.PHASE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xaRollbackWork(): XaRollbackWorkContext {
        let localContext = new XaRollbackWorkContext(this.context, this.state);
        this.enterRule(localContext, 376, MySqlParser.RULE_xaRollbackWork);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4651;
            this.match(MySqlParser.XA);
            this.state = 4652;
            this.match(MySqlParser.ROLLBACK);
            this.state = 4653;
            this.xid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xaRecoverWork(): XaRecoverWorkContext {
        let localContext = new XaRecoverWorkContext(this.context, this.state);
        this.enterRule(localContext, 378, MySqlParser.RULE_xaRecoverWork);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4655;
            this.match(MySqlParser.XA);
            this.state = 4656;
            this.match(MySqlParser.RECOVER);
            this.state = 4659;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 32) {
                {
                this.state = 4657;
                this.match(MySqlParser.CONVERT);
                this.state = 4658;
                this.xid();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prepareStatement(): PrepareStatementContext {
        let localContext = new PrepareStatementContext(this.context, this.state);
        this.enterRule(localContext, 380, MySqlParser.RULE_prepareStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4661;
            this.match(MySqlParser.PREPARE);
            this.state = 4662;
            this.uid();
            this.state = 4663;
            this.match(MySqlParser.FROM);
            this.state = 4666;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.STRING_LITERAL:
                {
                this.state = 4664;
                localContext._query = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.LOCAL_ID:
                {
                this.state = 4665;
                localContext._variable = this.match(MySqlParser.LOCAL_ID);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executeStatement(): ExecuteStatementContext {
        let localContext = new ExecuteStatementContext(this.context, this.state);
        this.enterRule(localContext, 382, MySqlParser.RULE_executeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4668;
            this.match(MySqlParser.EXECUTE);
            this.state = 4669;
            this.uid();
            this.state = 4672;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 187) {
                {
                this.state = 4670;
                this.match(MySqlParser.USING);
                this.state = 4671;
                this.userVariables();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deallocatePrepare(): DeallocatePrepareContext {
        let localContext = new DeallocatePrepareContext(this.context, this.state);
        this.enterRule(localContext, 384, MySqlParser.RULE_deallocatePrepare);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4674;
            localContext._dropFormat = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 51 || _la === 390)) {
                localContext._dropFormat = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4675;
            this.match(MySqlParser.PREPARE);
            this.state = 4676;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineBody(): RoutineBodyContext {
        let localContext = new RoutineBodyContext(this.context, this.state);
        this.enterRule(localContext, 386, MySqlParser.RULE_routineBody);
        try {
            this.state = 4680;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 675, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4678;
                this.blockStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4679;
                this.sqlStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public blockStatement(): BlockStatementContext {
        let localContext = new BlockStatementContext(this.context, this.state);
        this.enterRule(localContext, 388, MySqlParser.RULE_blockStatement);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4685;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 676, this.context) ) {
            case 1:
                {
                this.state = 4682;
                this.uid();
                this.state = 4683;
                this.match(MySqlParser.COLON_SYMB);
                }
                break;
            }
            this.state = 4687;
            this.match(MySqlParser.BEGIN);
            this.state = 4693;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 677, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4688;
                    this.declareVariable();
                    this.state = 4689;
                    this.match(MySqlParser.SEMI);
                    }
                    }
                }
                this.state = 4695;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 677, this.context);
            }
            this.state = 4701;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 678, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4696;
                    this.declareCondition();
                    this.state = 4697;
                    this.match(MySqlParser.SEMI);
                    }
                    }
                }
                this.state = 4703;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 678, this.context);
            }
            this.state = 4709;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 679, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4704;
                    this.declareCursor();
                    this.state = 4705;
                    this.match(MySqlParser.SEMI);
                    }
                    }
                }
                this.state = 4711;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 679, this.context);
            }
            this.state = 4717;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 41) {
                {
                {
                this.state = 4712;
                this.declareHandler();
                this.state = 4713;
                this.match(MySqlParser.SEMI);
                }
                }
                this.state = 4719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4723;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 681, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4720;
                    this.procedureSqlStatement();
                    }
                    }
                }
                this.state = 4725;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 681, this.context);
            }
            this.state = 4726;
            this.match(MySqlParser.END);
            this.state = 4728;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                {
                this.state = 4727;
                this.uid();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseStatement(): CaseStatementContext {
        let localContext = new CaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 390, MySqlParser.RULE_caseStatement);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4730;
            this.match(MySqlParser.CASE);
            this.state = 4733;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 683, this.context) ) {
            case 1:
                {
                this.state = 4731;
                this.uid();
                }
                break;
            case 2:
                {
                this.state = 4732;
                this.expression(0);
                }
                break;
            }
            this.state = 4736;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4735;
                this.caseAlternative();
                }
                }
                this.state = 4738;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 189);
            this.state = 4746;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 4740;
                this.match(MySqlParser.ELSE);
                this.state = 4742;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 4741;
                        this.procedureSqlStatement();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 4744;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 685, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
            }

            this.state = 4748;
            this.match(MySqlParser.END);
            this.state = 4749;
            this.match(MySqlParser.CASE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifStatement(): IfStatementContext {
        let localContext = new IfStatementContext(this.context, this.state);
        this.enterRule(localContext, 392, MySqlParser.RULE_ifStatement);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4751;
            this.match(MySqlParser.IF);
            this.state = 4752;
            this.expression(0);
            this.state = 4753;
            this.match(MySqlParser.THEN);
            this.state = 4755;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4754;
                    localContext._procedureSqlStatement = this.procedureSqlStatement();
                    localContext._thenStatements.push(localContext._procedureSqlStatement);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4757;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 687, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 4762;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 54) {
                {
                {
                this.state = 4759;
                this.elifAlternative();
                }
                }
                this.state = 4764;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4771;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 4765;
                this.match(MySqlParser.ELSE);
                this.state = 4767;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 4766;
                        localContext._procedureSqlStatement = this.procedureSqlStatement();
                        localContext._elseStatements.push(localContext._procedureSqlStatement);
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 4769;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 689, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
            }

            this.state = 4773;
            this.match(MySqlParser.END);
            this.state = 4774;
            this.match(MySqlParser.IF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public iterateStatement(): IterateStatementContext {
        let localContext = new IterateStatementContext(this.context, this.state);
        this.enterRule(localContext, 394, MySqlParser.RULE_iterateStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4776;
            this.match(MySqlParser.ITERATE);
            this.state = 4777;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public leaveStatement(): LeaveStatementContext {
        let localContext = new LeaveStatementContext(this.context, this.state);
        this.enterRule(localContext, 396, MySqlParser.RULE_leaveStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4779;
            this.match(MySqlParser.LEAVE);
            this.state = 4780;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loopStatement(): LoopStatementContext {
        let localContext = new LoopStatementContext(this.context, this.state);
        this.enterRule(localContext, 398, MySqlParser.RULE_loopStatement);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4785;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                {
                this.state = 4782;
                this.uid();
                this.state = 4783;
                this.match(MySqlParser.COLON_SYMB);
                }
            }

            this.state = 4787;
            this.match(MySqlParser.LOOP);
            this.state = 4789;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4788;
                    this.procedureSqlStatement();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4791;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 692, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 4793;
            this.match(MySqlParser.END);
            this.state = 4794;
            this.match(MySqlParser.LOOP);
            this.state = 4796;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                {
                this.state = 4795;
                this.uid();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public repeatStatement(): RepeatStatementContext {
        let localContext = new RepeatStatementContext(this.context, this.state);
        this.enterRule(localContext, 400, MySqlParser.RULE_repeatStatement);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4801;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 694, this.context) ) {
            case 1:
                {
                this.state = 4798;
                this.uid();
                this.state = 4799;
                this.match(MySqlParser.COLON_SYMB);
                }
                break;
            }
            this.state = 4803;
            this.match(MySqlParser.REPEAT);
            this.state = 4805;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4804;
                    this.procedureSqlStatement();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4807;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 695, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 4809;
            this.match(MySqlParser.UNTIL);
            this.state = 4810;
            this.expression(0);
            this.state = 4811;
            this.match(MySqlParser.END);
            this.state = 4812;
            this.match(MySqlParser.REPEAT);
            this.state = 4814;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                {
                this.state = 4813;
                this.uid();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnStatement(): ReturnStatementContext {
        let localContext = new ReturnStatementContext(this.context, this.state);
        this.enterRule(localContext, 402, MySqlParser.RULE_returnStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4816;
            this.match(MySqlParser.RETURN);
            this.state = 4817;
            this.expression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whileStatement(): WhileStatementContext {
        let localContext = new WhileStatementContext(this.context, this.state);
        this.enterRule(localContext, 404, MySqlParser.RULE_whileStatement);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4822;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                {
                this.state = 4819;
                this.uid();
                this.state = 4820;
                this.match(MySqlParser.COLON_SYMB);
                }
            }

            this.state = 4824;
            this.match(MySqlParser.WHILE);
            this.state = 4825;
            this.expression(0);
            this.state = 4826;
            this.match(MySqlParser.DO);
            this.state = 4828;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4827;
                    this.procedureSqlStatement();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4830;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 698, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 4832;
            this.match(MySqlParser.END);
            this.state = 4833;
            this.match(MySqlParser.WHILE);
            this.state = 4835;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                {
                this.state = 4834;
                this.uid();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cursorStatement(): CursorStatementContext {
        let localContext = new CursorStatementContext(this.context, this.state);
        this.enterRule(localContext, 406, MySqlParser.RULE_cursorStatement);
        let _la: number;
        try {
            this.state = 4852;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.CLOSE:
                localContext = new CloseCursorContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4837;
                this.match(MySqlParser.CLOSE);
                this.state = 4838;
                this.uid();
                }
                break;
            case MySqlParser.FETCH:
                localContext = new FetchCursorContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4839;
                this.match(MySqlParser.FETCH);
                this.state = 4844;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 701, this.context) ) {
                case 1:
                    {
                    this.state = 4841;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 520) {
                        {
                        this.state = 4840;
                        this.match(MySqlParser.NEXT);
                        }
                    }

                    this.state = 4843;
                    this.match(MySqlParser.FROM);
                    }
                    break;
                }
                this.state = 4846;
                this.uid();
                this.state = 4847;
                this.match(MySqlParser.INTO);
                this.state = 4848;
                this.uidList();
                }
                break;
            case MySqlParser.OPEN:
                localContext = new OpenCursorContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4850;
                this.match(MySqlParser.OPEN);
                this.state = 4851;
                this.uid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declareVariable(): DeclareVariableContext {
        let localContext = new DeclareVariableContext(this.context, this.state);
        this.enterRule(localContext, 408, MySqlParser.RULE_declareVariable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4854;
            this.match(MySqlParser.DECLARE);
            this.state = 4855;
            this.uidList();
            this.state = 4856;
            this.dataType();
            this.state = 4859;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 4857;
                this.match(MySqlParser.DEFAULT);
                this.state = 4858;
                this.expression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declareCondition(): DeclareConditionContext {
        let localContext = new DeclareConditionContext(this.context, this.state);
        this.enterRule(localContext, 410, MySqlParser.RULE_declareCondition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4861;
            this.match(MySqlParser.DECLARE);
            this.state = 4862;
            this.uid();
            this.state = 4863;
            this.match(MySqlParser.CONDITION);
            this.state = 4864;
            this.match(MySqlParser.FOR);
            this.state = 4871;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ZERO_DECIMAL:
            case MySqlParser.ONE_DECIMAL:
            case MySqlParser.TWO_DECIMAL:
            case MySqlParser.DECIMAL_LITERAL:
            case MySqlParser.REAL_LITERAL:
                {
                this.state = 4865;
                this.decimalLiteral();
                }
                break;
            case MySqlParser.SQLSTATE:
                {
                this.state = 4866;
                this.match(MySqlParser.SQLSTATE);
                this.state = 4868;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 669) {
                    {
                    this.state = 4867;
                    this.match(MySqlParser.VALUE);
                    }
                }

                this.state = 4870;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declareCursor(): DeclareCursorContext {
        let localContext = new DeclareCursorContext(this.context, this.state);
        this.enterRule(localContext, 412, MySqlParser.RULE_declareCursor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4873;
            this.match(MySqlParser.DECLARE);
            this.state = 4874;
            this.uid();
            this.state = 4875;
            this.match(MySqlParser.CURSOR);
            this.state = 4876;
            this.match(MySqlParser.FOR);
            this.state = 4877;
            this.selectStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declareHandler(): DeclareHandlerContext {
        let localContext = new DeclareHandlerContext(this.context, this.state);
        this.enterRule(localContext, 414, MySqlParser.RULE_declareHandler);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4879;
            this.match(MySqlParser.DECLARE);
            this.state = 4880;
            localContext._handlerAction = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 31 || _la === 61 || _la === 179)) {
                localContext._handlerAction = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4881;
            this.match(MySqlParser.HANDLER);
            this.state = 4882;
            this.match(MySqlParser.FOR);
            this.state = 4883;
            this.handlerConditionValue();
            this.state = 4888;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 4884;
                this.match(MySqlParser.COMMA);
                this.state = 4885;
                this.handlerConditionValue();
                }
                }
                this.state = 4890;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4891;
            this.routineBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public handlerConditionValue(): HandlerConditionValueContext {
        let localContext = new HandlerConditionValueContext(this.context, this.state);
        this.enterRule(localContext, 416, MySqlParser.RULE_handlerConditionValue);
        let _la: number;
        try {
            this.state = 4904;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ZERO_DECIMAL:
            case MySqlParser.ONE_DECIMAL:
            case MySqlParser.TWO_DECIMAL:
            case MySqlParser.DECIMAL_LITERAL:
            case MySqlParser.REAL_LITERAL:
                localContext = new HandlerConditionCodeContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4893;
                this.decimalLiteral();
                }
                break;
            case MySqlParser.SQLSTATE:
                localContext = new HandlerConditionStateContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4894;
                this.match(MySqlParser.SQLSTATE);
                this.state = 4896;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 669) {
                    {
                    this.state = 4895;
                    this.match(MySqlParser.VALUE);
                    }
                }

                this.state = 4898;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.ARRAY:
            case MySqlParser.ATTRIBUTE:
            case MySqlParser.BUCKETS:
            case MySqlParser.CONDITION:
            case MySqlParser.CURRENT:
            case MySqlParser.CURRENT_USER:
            case MySqlParser.DATABASE:
            case MySqlParser.DEFAULT:
            case MySqlParser.DIAGNOSTICS:
            case MySqlParser.EMPTY:
            case MySqlParser.ENFORCED:
            case MySqlParser.EXCEPT:
            case MySqlParser.GROUP:
            case MySqlParser.IF:
            case MySqlParser.IGNORED:
            case MySqlParser.INSERT:
            case MySqlParser.LATERAL:
            case MySqlParser.LEFT:
            case MySqlParser.NUMBER:
            case MySqlParser.OPTIONAL:
            case MySqlParser.ORDER:
            case MySqlParser.PRIMARY:
            case MySqlParser.REPEAT:
            case MySqlParser.REPLACE:
            case MySqlParser.RIGHT:
            case MySqlParser.SCHEMA:
            case MySqlParser.SKIP_QUERY_REWRITE:
            case MySqlParser.STACKED:
            case MySqlParser.DATE:
            case MySqlParser.TIME:
            case MySqlParser.TIMESTAMP:
            case MySqlParser.DATETIME:
            case MySqlParser.YEAR:
            case MySqlParser.BINARY:
            case MySqlParser.TEXT:
            case MySqlParser.ENUM:
            case MySqlParser.SERIAL:
            case MySqlParser.JSON_ARRAY:
            case MySqlParser.JSON_ARRAYAGG:
            case MySqlParser.JSON_ARRAY_APPEND:
            case MySqlParser.JSON_ARRAY_INSERT:
            case MySqlParser.JSON_CONTAINS:
            case MySqlParser.JSON_CONTAINS_PATH:
            case MySqlParser.JSON_DEPTH:
            case MySqlParser.JSON_EXTRACT:
            case MySqlParser.JSON_INSERT:
            case MySqlParser.JSON_KEYS:
            case MySqlParser.JSON_LENGTH:
            case MySqlParser.JSON_MERGE:
            case MySqlParser.JSON_MERGE_PATCH:
            case MySqlParser.JSON_MERGE_PRESERVE:
            case MySqlParser.JSON_OBJECT:
            case MySqlParser.JSON_OBJECTAGG:
            case MySqlParser.JSON_OVERLAPS:
            case MySqlParser.JSON_PRETTY:
            case MySqlParser.JSON_QUOTE:
            case MySqlParser.JSON_REMOVE:
            case MySqlParser.JSON_REPLACE:
            case MySqlParser.JSON_SCHEMA_VALID:
            case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
            case MySqlParser.JSON_SEARCH:
            case MySqlParser.JSON_SET:
            case MySqlParser.JSON_STORAGE_FREE:
            case MySqlParser.JSON_STORAGE_SIZE:
            case MySqlParser.JSON_TABLE:
            case MySqlParser.JSON_TYPE:
            case MySqlParser.JSON_UNQUOTE:
            case MySqlParser.JSON_VALID:
            case MySqlParser.JSON_VALUE:
            case MySqlParser.NESTED:
            case MySqlParser.ORDINALITY:
            case MySqlParser.PATH:
            case MySqlParser.AVG:
            case MySqlParser.BIT_AND:
            case MySqlParser.BIT_OR:
            case MySqlParser.BIT_XOR:
            case MySqlParser.COUNT:
            case MySqlParser.CUME_DIST:
            case MySqlParser.DENSE_RANK:
            case MySqlParser.FIRST_VALUE:
            case MySqlParser.GROUP_CONCAT:
            case MySqlParser.LAG:
            case MySqlParser.LAST_VALUE:
            case MySqlParser.LEAD:
            case MySqlParser.MAX:
            case MySqlParser.MIN:
            case MySqlParser.NTILE:
            case MySqlParser.NTH_VALUE:
            case MySqlParser.PERCENT_RANK:
            case MySqlParser.RANK:
            case MySqlParser.ROW_NUMBER:
            case MySqlParser.STD:
            case MySqlParser.STDDEV:
            case MySqlParser.STDDEV_POP:
            case MySqlParser.STDDEV_SAMP:
            case MySqlParser.SUM:
            case MySqlParser.VAR_POP:
            case MySqlParser.VAR_SAMP:
            case MySqlParser.VARIANCE:
            case MySqlParser.CURRENT_DATE:
            case MySqlParser.CURRENT_TIME:
            case MySqlParser.CURRENT_TIMESTAMP:
            case MySqlParser.LOCALTIME:
            case MySqlParser.CURDATE:
            case MySqlParser.CURTIME:
            case MySqlParser.DATE_ADD:
            case MySqlParser.DATE_SUB:
            case MySqlParser.LOCALTIMESTAMP:
            case MySqlParser.NOW:
            case MySqlParser.POSITION:
            case MySqlParser.SUBSTR:
            case MySqlParser.SUBSTRING:
            case MySqlParser.SYSDATE:
            case MySqlParser.TRIM:
            case MySqlParser.UTC_DATE:
            case MySqlParser.UTC_TIME:
            case MySqlParser.UTC_TIMESTAMP:
            case MySqlParser.ACCOUNT:
            case MySqlParser.ACTION:
            case MySqlParser.AFTER:
            case MySqlParser.AGGREGATE:
            case MySqlParser.ALGORITHM:
            case MySqlParser.ANY:
            case MySqlParser.AT:
            case MySqlParser.AUTHORS:
            case MySqlParser.AUTOCOMMIT:
            case MySqlParser.AUTOEXTEND_SIZE:
            case MySqlParser.AUTO_INCREMENT:
            case MySqlParser.AVG_ROW_LENGTH:
            case MySqlParser.BEGIN:
            case MySqlParser.BINLOG:
            case MySqlParser.BIT:
            case MySqlParser.BLOCK:
            case MySqlParser.BOOL:
            case MySqlParser.BOOLEAN:
            case MySqlParser.BTREE:
            case MySqlParser.CACHE:
            case MySqlParser.CASCADED:
            case MySqlParser.CHAIN:
            case MySqlParser.CHANGED:
            case MySqlParser.CHANNEL:
            case MySqlParser.CHECKSUM:
            case MySqlParser.PAGE_CHECKSUM:
            case MySqlParser.CIPHER:
            case MySqlParser.CLASS_ORIGIN:
            case MySqlParser.CLIENT:
            case MySqlParser.CLOSE:
            case MySqlParser.CLUSTERING:
            case MySqlParser.COALESCE:
            case MySqlParser.CODE:
            case MySqlParser.COLUMNS:
            case MySqlParser.COLUMN_FORMAT:
            case MySqlParser.COLUMN_NAME:
            case MySqlParser.COMMENT:
            case MySqlParser.COMMIT:
            case MySqlParser.COMPACT:
            case MySqlParser.COMPLETION:
            case MySqlParser.COMPRESSED:
            case MySqlParser.COMPRESSION:
            case MySqlParser.CONCURRENT:
            case MySqlParser.CONNECT:
            case MySqlParser.CONNECTION:
            case MySqlParser.CONSISTENT:
            case MySqlParser.CONSTRAINT_CATALOG:
            case MySqlParser.CONSTRAINT_SCHEMA:
            case MySqlParser.CONSTRAINT_NAME:
            case MySqlParser.CONTAINS:
            case MySqlParser.CONTEXT:
            case MySqlParser.CONTRIBUTORS:
            case MySqlParser.COPY:
            case MySqlParser.CPU:
            case MySqlParser.CURSOR_NAME:
            case MySqlParser.DATA:
            case MySqlParser.DATAFILE:
            case MySqlParser.DEALLOCATE:
            case MySqlParser.DEFAULT_AUTH:
            case MySqlParser.DEFINER:
            case MySqlParser.DELAY_KEY_WRITE:
            case MySqlParser.DES_KEY_FILE:
            case MySqlParser.DIRECTORY:
            case MySqlParser.DISABLE:
            case MySqlParser.DISCARD:
            case MySqlParser.DISK:
            case MySqlParser.DO:
            case MySqlParser.DUMPFILE:
            case MySqlParser.DUPLICATE:
            case MySqlParser.DYNAMIC:
            case MySqlParser.ENABLE:
            case MySqlParser.ENCRYPTION:
            case MySqlParser.END:
            case MySqlParser.ENDS:
            case MySqlParser.ENGINE:
            case MySqlParser.ENGINES:
            case MySqlParser.ERROR:
            case MySqlParser.ERRORS:
            case MySqlParser.ESCAPE:
            case MySqlParser.EVEN:
            case MySqlParser.EVENT:
            case MySqlParser.EVENTS:
            case MySqlParser.EVERY:
            case MySqlParser.EXCHANGE:
            case MySqlParser.EXCLUSIVE:
            case MySqlParser.EXPIRE:
            case MySqlParser.EXPORT:
            case MySqlParser.EXTENDED:
            case MySqlParser.EXTENT_SIZE:
            case MySqlParser.FAILED_LOGIN_ATTEMPTS:
            case MySqlParser.FAST:
            case MySqlParser.FAULTS:
            case MySqlParser.FIELDS:
            case MySqlParser.FILE_BLOCK_SIZE:
            case MySqlParser.FILTER:
            case MySqlParser.FIRST:
            case MySqlParser.FIXED:
            case MySqlParser.FLUSH:
            case MySqlParser.FOLLOWS:
            case MySqlParser.FOUND:
            case MySqlParser.FULL:
            case MySqlParser.FUNCTION:
            case MySqlParser.GENERAL:
            case MySqlParser.GLOBAL:
            case MySqlParser.GRANTS:
            case MySqlParser.GROUP_REPLICATION:
            case MySqlParser.HANDLER:
            case MySqlParser.HASH:
            case MySqlParser.HELP:
            case MySqlParser.HISTORY:
            case MySqlParser.HOST:
            case MySqlParser.HOSTS:
            case MySqlParser.IDENTIFIED:
            case MySqlParser.IGNORE_SERVER_IDS:
            case MySqlParser.IMPORT:
            case MySqlParser.INDEXES:
            case MySqlParser.INITIAL_SIZE:
            case MySqlParser.INPLACE:
            case MySqlParser.INSERT_METHOD:
            case MySqlParser.INSTALL:
            case MySqlParser.INSTANCE:
            case MySqlParser.INSTANT:
            case MySqlParser.INVISIBLE:
            case MySqlParser.INVOKER:
            case MySqlParser.IO:
            case MySqlParser.IO_THREAD:
            case MySqlParser.IPC:
            case MySqlParser.ISOLATION:
            case MySqlParser.ISSUER:
            case MySqlParser.JSON:
            case MySqlParser.KEY_BLOCK_SIZE:
            case MySqlParser.LANGUAGE:
            case MySqlParser.LAST:
            case MySqlParser.LEAVES:
            case MySqlParser.LESS:
            case MySqlParser.LEVEL:
            case MySqlParser.LIST:
            case MySqlParser.LOCAL:
            case MySqlParser.LOGFILE:
            case MySqlParser.LOGS:
            case MySqlParser.MASTER:
            case MySqlParser.MASTER_AUTO_POSITION:
            case MySqlParser.MASTER_CONNECT_RETRY:
            case MySqlParser.MASTER_DELAY:
            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
            case MySqlParser.MASTER_HOST:
            case MySqlParser.MASTER_LOG_FILE:
            case MySqlParser.MASTER_LOG_POS:
            case MySqlParser.MASTER_PASSWORD:
            case MySqlParser.MASTER_PORT:
            case MySqlParser.MASTER_RETRY_COUNT:
            case MySqlParser.MASTER_SSL:
            case MySqlParser.MASTER_SSL_CA:
            case MySqlParser.MASTER_SSL_CAPATH:
            case MySqlParser.MASTER_SSL_CERT:
            case MySqlParser.MASTER_SSL_CIPHER:
            case MySqlParser.MASTER_SSL_CRL:
            case MySqlParser.MASTER_SSL_CRLPATH:
            case MySqlParser.MASTER_SSL_KEY:
            case MySqlParser.MASTER_TLS_VERSION:
            case MySqlParser.MASTER_USER:
            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
            case MySqlParser.MAX_QUERIES_PER_HOUR:
            case MySqlParser.MAX_ROWS:
            case MySqlParser.MAX_SIZE:
            case MySqlParser.MAX_UPDATES_PER_HOUR:
            case MySqlParser.MAX_USER_CONNECTIONS:
            case MySqlParser.MEDIUM:
            case MySqlParser.MEMBER:
            case MySqlParser.MERGE:
            case MySqlParser.MESSAGE_TEXT:
            case MySqlParser.MID:
            case MySqlParser.MIGRATE:
            case MySqlParser.MIN_ROWS:
            case MySqlParser.MODE:
            case MySqlParser.MODIFY:
            case MySqlParser.MUTEX:
            case MySqlParser.MYSQL:
            case MySqlParser.MYSQL_ERRNO:
            case MySqlParser.NAME:
            case MySqlParser.NAMES:
            case MySqlParser.NCHAR:
            case MySqlParser.NEVER:
            case MySqlParser.NEXT:
            case MySqlParser.NO:
            case MySqlParser.NOCOPY:
            case MySqlParser.NOWAIT:
            case MySqlParser.NODEGROUP:
            case MySqlParser.NONE:
            case MySqlParser.ODBC:
            case MySqlParser.OFFLINE:
            case MySqlParser.OFFSET:
            case MySqlParser.OF:
            case MySqlParser.OJ:
            case MySqlParser.OLD_PASSWORD:
            case MySqlParser.ONE:
            case MySqlParser.ONLINE:
            case MySqlParser.ONLY:
            case MySqlParser.OPEN:
            case MySqlParser.OPTIMIZER_COSTS:
            case MySqlParser.OPTIONS:
            case MySqlParser.OWNER:
            case MySqlParser.PACK_KEYS:
            case MySqlParser.PAGE:
            case MySqlParser.PARSER:
            case MySqlParser.PARTIAL:
            case MySqlParser.PARTITIONING:
            case MySqlParser.PARTITIONS:
            case MySqlParser.PASSWORD:
            case MySqlParser.PASSWORD_LOCK_TIME:
            case MySqlParser.PHASE:
            case MySqlParser.PLUGIN:
            case MySqlParser.PLUGIN_DIR:
            case MySqlParser.PLUGINS:
            case MySqlParser.PORT:
            case MySqlParser.PRECEDES:
            case MySqlParser.PREPARE:
            case MySqlParser.PRESERVE:
            case MySqlParser.PREV:
            case MySqlParser.PROCESSLIST:
            case MySqlParser.PROFILE:
            case MySqlParser.PROFILES:
            case MySqlParser.PROXY:
            case MySqlParser.QUERY:
            case MySqlParser.QUICK:
            case MySqlParser.REBUILD:
            case MySqlParser.RECOVER:
            case MySqlParser.RECURSIVE:
            case MySqlParser.REDO_BUFFER_SIZE:
            case MySqlParser.REDUNDANT:
            case MySqlParser.RELAY:
            case MySqlParser.RELAY_LOG_FILE:
            case MySqlParser.RELAY_LOG_POS:
            case MySqlParser.RELAYLOG:
            case MySqlParser.REMOVE:
            case MySqlParser.REORGANIZE:
            case MySqlParser.REPAIR:
            case MySqlParser.REPLICATE_DO_DB:
            case MySqlParser.REPLICATE_DO_TABLE:
            case MySqlParser.REPLICATE_IGNORE_DB:
            case MySqlParser.REPLICATE_IGNORE_TABLE:
            case MySqlParser.REPLICATE_REWRITE_DB:
            case MySqlParser.REPLICATE_WILD_DO_TABLE:
            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySqlParser.REPLICATION:
            case MySqlParser.RESET:
            case MySqlParser.RESUME:
            case MySqlParser.RETURNED_SQLSTATE:
            case MySqlParser.RETURNS:
            case MySqlParser.REUSE:
            case MySqlParser.ROLE:
            case MySqlParser.ROLLBACK:
            case MySqlParser.ROLLUP:
            case MySqlParser.ROTATE:
            case MySqlParser.ROW:
            case MySqlParser.ROWS:
            case MySqlParser.ROW_FORMAT:
            case MySqlParser.RTREE:
            case MySqlParser.SAVEPOINT:
            case MySqlParser.SCHEDULE:
            case MySqlParser.SECURITY:
            case MySqlParser.SERVER:
            case MySqlParser.SESSION:
            case MySqlParser.SHARE:
            case MySqlParser.SHARED:
            case MySqlParser.SIGNED:
            case MySqlParser.SIMPLE:
            case MySqlParser.SLAVE:
            case MySqlParser.SLOW:
            case MySqlParser.SNAPSHOT:
            case MySqlParser.SOCKET:
            case MySqlParser.SOME:
            case MySqlParser.SONAME:
            case MySqlParser.SOUNDS:
            case MySqlParser.SOURCE:
            case MySqlParser.SQL_AFTER_GTIDS:
            case MySqlParser.SQL_AFTER_MTS_GAPS:
            case MySqlParser.SQL_BEFORE_GTIDS:
            case MySqlParser.SQL_BUFFER_RESULT:
            case MySqlParser.SQL_CACHE:
            case MySqlParser.SQL_NO_CACHE:
            case MySqlParser.SQL_THREAD:
            case MySqlParser.START:
            case MySqlParser.STARTS:
            case MySqlParser.STATS_AUTO_RECALC:
            case MySqlParser.STATS_PERSISTENT:
            case MySqlParser.STATS_SAMPLE_PAGES:
            case MySqlParser.STATUS:
            case MySqlParser.STOP:
            case MySqlParser.STORAGE:
            case MySqlParser.STRING:
            case MySqlParser.SUBCLASS_ORIGIN:
            case MySqlParser.SUBJECT:
            case MySqlParser.SUBPARTITION:
            case MySqlParser.SUBPARTITIONS:
            case MySqlParser.SUSPEND:
            case MySqlParser.SWAPS:
            case MySqlParser.SWITCHES:
            case MySqlParser.TABLE_NAME:
            case MySqlParser.TABLESPACE:
            case MySqlParser.TABLE_TYPE:
            case MySqlParser.TEMPORARY:
            case MySqlParser.TEMPTABLE:
            case MySqlParser.THAN:
            case MySqlParser.TRADITIONAL:
            case MySqlParser.TRANSACTION:
            case MySqlParser.TRANSACTIONAL:
            case MySqlParser.TRIGGERS:
            case MySqlParser.TRUNCATE:
            case MySqlParser.UNBOUNDED:
            case MySqlParser.UNDEFINED:
            case MySqlParser.UNDOFILE:
            case MySqlParser.UNDO_BUFFER_SIZE:
            case MySqlParser.UNINSTALL:
            case MySqlParser.UNKNOWN:
            case MySqlParser.UNTIL:
            case MySqlParser.UPGRADE:
            case MySqlParser.USER:
            case MySqlParser.USE_FRM:
            case MySqlParser.USER_RESOURCES:
            case MySqlParser.VALIDATION:
            case MySqlParser.VALUE:
            case MySqlParser.VARIABLES:
            case MySqlParser.VIEW:
            case MySqlParser.VIRTUAL:
            case MySqlParser.VISIBLE:
            case MySqlParser.WAIT:
            case MySqlParser.WARNINGS:
            case MySqlParser.WITHOUT:
            case MySqlParser.WORK:
            case MySqlParser.WRAPPER:
            case MySqlParser.X509:
            case MySqlParser.XA:
            case MySqlParser.XML:
            case MySqlParser.EUR:
            case MySqlParser.USA:
            case MySqlParser.JIS:
            case MySqlParser.ISO:
            case MySqlParser.INTERNAL:
            case MySqlParser.QUARTER:
            case MySqlParser.MONTH:
            case MySqlParser.DAY:
            case MySqlParser.HOUR:
            case MySqlParser.MINUTE:
            case MySqlParser.WEEK:
            case MySqlParser.SECOND:
            case MySqlParser.MICROSECOND:
            case MySqlParser.ADMIN:
            case MySqlParser.AUDIT_ABORT_EXEMPT:
            case MySqlParser.AUDIT_ADMIN:
            case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
            case MySqlParser.BACKUP_ADMIN:
            case MySqlParser.BINLOG_ADMIN:
            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
            case MySqlParser.CLONE_ADMIN:
            case MySqlParser.CONNECTION_ADMIN:
            case MySqlParser.ENCRYPTION_KEY_ADMIN:
            case MySqlParser.EXECUTE:
            case MySqlParser.FILE:
            case MySqlParser.FIREWALL_ADMIN:
            case MySqlParser.FIREWALL_EXEMPT:
            case MySqlParser.FIREWALL_USER:
            case MySqlParser.GROUP_REPLICATION_ADMIN:
            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
            case MySqlParser.INVOKE:
            case MySqlParser.LAMBDA:
            case MySqlParser.NDB_STORED_USER:
            case MySqlParser.PASSWORDLESS_USER_ADMIN:
            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySqlParser.PRIVILEGES:
            case MySqlParser.PROCESS:
            case MySqlParser.RELOAD:
            case MySqlParser.REPLICATION_APPLIER:
            case MySqlParser.REPLICATION_SLAVE_ADMIN:
            case MySqlParser.RESOURCE_GROUP_ADMIN:
            case MySqlParser.RESOURCE_GROUP_USER:
            case MySqlParser.ROLE_ADMIN:
            case MySqlParser.ROUTINE:
            case MySqlParser.S3:
            case MySqlParser.SESSION_VARIABLES_ADMIN:
            case MySqlParser.SET_USER_ID:
            case MySqlParser.SHOW_ROUTINE:
            case MySqlParser.SHUTDOWN:
            case MySqlParser.SUPER:
            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
            case MySqlParser.TABLES:
            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
            case MySqlParser.VERSION_TOKEN_ADMIN:
            case MySqlParser.XA_RECOVER_ADMIN:
            case MySqlParser.ARMSCII8:
            case MySqlParser.ASCII:
            case MySqlParser.BIG5:
            case MySqlParser.CP1250:
            case MySqlParser.CP1251:
            case MySqlParser.CP1256:
            case MySqlParser.CP1257:
            case MySqlParser.CP850:
            case MySqlParser.CP852:
            case MySqlParser.CP866:
            case MySqlParser.CP932:
            case MySqlParser.DEC8:
            case MySqlParser.EUCJPMS:
            case MySqlParser.EUCKR:
            case MySqlParser.GB18030:
            case MySqlParser.GB2312:
            case MySqlParser.GBK:
            case MySqlParser.GEOSTD8:
            case MySqlParser.GREEK:
            case MySqlParser.HEBREW:
            case MySqlParser.HP8:
            case MySqlParser.KEYBCS2:
            case MySqlParser.KOI8R:
            case MySqlParser.KOI8U:
            case MySqlParser.LATIN1:
            case MySqlParser.LATIN2:
            case MySqlParser.LATIN5:
            case MySqlParser.LATIN7:
            case MySqlParser.MACCE:
            case MySqlParser.MACROMAN:
            case MySqlParser.SJIS:
            case MySqlParser.SWE7:
            case MySqlParser.TIS620:
            case MySqlParser.UCS2:
            case MySqlParser.UJIS:
            case MySqlParser.UTF16:
            case MySqlParser.UTF16LE:
            case MySqlParser.UTF32:
            case MySqlParser.UTF8:
            case MySqlParser.UTF8MB3:
            case MySqlParser.UTF8MB4:
            case MySqlParser.ARCHIVE:
            case MySqlParser.BLACKHOLE:
            case MySqlParser.CSV:
            case MySqlParser.FEDERATED:
            case MySqlParser.INNODB:
            case MySqlParser.MEMORY:
            case MySqlParser.MRG_MYISAM:
            case MySqlParser.MYISAM:
            case MySqlParser.NDB:
            case MySqlParser.NDBCLUSTER:
            case MySqlParser.PERFORMANCE_SCHEMA:
            case MySqlParser.TOKUDB:
            case MySqlParser.REPEATABLE:
            case MySqlParser.COMMITTED:
            case MySqlParser.UNCOMMITTED:
            case MySqlParser.SERIALIZABLE:
            case MySqlParser.GEOMETRYCOLLECTION:
            case MySqlParser.LINESTRING:
            case MySqlParser.MULTILINESTRING:
            case MySqlParser.MULTIPOINT:
            case MySqlParser.MULTIPOLYGON:
            case MySqlParser.POINT:
            case MySqlParser.POLYGON:
            case MySqlParser.ABS:
            case MySqlParser.ACOS:
            case MySqlParser.ADDDATE:
            case MySqlParser.ADDTIME:
            case MySqlParser.AES_DECRYPT:
            case MySqlParser.AES_ENCRYPT:
            case MySqlParser.AREA:
            case MySqlParser.ASBINARY:
            case MySqlParser.ASIN:
            case MySqlParser.ASTEXT:
            case MySqlParser.ASWKB:
            case MySqlParser.ASWKT:
            case MySqlParser.ASYMMETRIC_DECRYPT:
            case MySqlParser.ASYMMETRIC_DERIVE:
            case MySqlParser.ASYMMETRIC_ENCRYPT:
            case MySqlParser.ASYMMETRIC_SIGN:
            case MySqlParser.ASYMMETRIC_VERIFY:
            case MySqlParser.ATAN:
            case MySqlParser.ATAN2:
            case MySqlParser.BENCHMARK:
            case MySqlParser.BIN:
            case MySqlParser.BIT_COUNT:
            case MySqlParser.BIT_LENGTH:
            case MySqlParser.BUFFER:
            case MySqlParser.CATALOG_NAME:
            case MySqlParser.CEIL:
            case MySqlParser.CEILING:
            case MySqlParser.CENTROID:
            case MySqlParser.CHARACTER_LENGTH:
            case MySqlParser.CHARSET:
            case MySqlParser.CHAR_LENGTH:
            case MySqlParser.COERCIBILITY:
            case MySqlParser.COLLATION:
            case MySqlParser.COMPRESS:
            case MySqlParser.CONCAT:
            case MySqlParser.CONCAT_WS:
            case MySqlParser.CONNECTION_ID:
            case MySqlParser.CONV:
            case MySqlParser.CONVERT_TZ:
            case MySqlParser.COS:
            case MySqlParser.COT:
            case MySqlParser.CRC32:
            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySqlParser.CREATE_DH_PARAMETERS:
            case MySqlParser.CREATE_DIGEST:
            case MySqlParser.CROSSES:
            case MySqlParser.DATEDIFF:
            case MySqlParser.DATE_FORMAT:
            case MySqlParser.DAYNAME:
            case MySqlParser.DAYOFMONTH:
            case MySqlParser.DAYOFWEEK:
            case MySqlParser.DAYOFYEAR:
            case MySqlParser.DECODE:
            case MySqlParser.DEGREES:
            case MySqlParser.DES_DECRYPT:
            case MySqlParser.DES_ENCRYPT:
            case MySqlParser.DIMENSION:
            case MySqlParser.DISJOINT:
            case MySqlParser.ELT:
            case MySqlParser.ENCODE:
            case MySqlParser.ENCRYPT:
            case MySqlParser.ENDPOINT:
            case MySqlParser.ENGINE_ATTRIBUTE:
            case MySqlParser.ENVELOPE:
            case MySqlParser.EQUALS:
            case MySqlParser.EXP:
            case MySqlParser.EXPORT_SET:
            case MySqlParser.EXTERIORRING:
            case MySqlParser.EXTRACTVALUE:
            case MySqlParser.FIELD:
            case MySqlParser.FIND_IN_SET:
            case MySqlParser.FLOOR:
            case MySqlParser.FORMAT:
            case MySqlParser.FOUND_ROWS:
            case MySqlParser.FROM_BASE64:
            case MySqlParser.FROM_DAYS:
            case MySqlParser.FROM_UNIXTIME:
            case MySqlParser.GEOMCOLLFROMTEXT:
            case MySqlParser.GEOMCOLLFROMWKB:
            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.GEOMETRYFROMTEXT:
            case MySqlParser.GEOMETRYFROMWKB:
            case MySqlParser.GEOMETRYN:
            case MySqlParser.GEOMETRYTYPE:
            case MySqlParser.GEOMFROMTEXT:
            case MySqlParser.GEOMFROMWKB:
            case MySqlParser.GET_FORMAT:
            case MySqlParser.GET_LOCK:
            case MySqlParser.GLENGTH:
            case MySqlParser.GREATEST:
            case MySqlParser.GTID_SUBSET:
            case MySqlParser.GTID_SUBTRACT:
            case MySqlParser.HEX:
            case MySqlParser.IFNULL:
            case MySqlParser.INET6_ATON:
            case MySqlParser.INET6_NTOA:
            case MySqlParser.INET_ATON:
            case MySqlParser.INET_NTOA:
            case MySqlParser.INSTR:
            case MySqlParser.INTERIORRINGN:
            case MySqlParser.INTERSECTS:
            case MySqlParser.ISCLOSED:
            case MySqlParser.ISEMPTY:
            case MySqlParser.ISNULL:
            case MySqlParser.ISSIMPLE:
            case MySqlParser.IS_FREE_LOCK:
            case MySqlParser.IS_IPV4:
            case MySqlParser.IS_IPV4_COMPAT:
            case MySqlParser.IS_IPV4_MAPPED:
            case MySqlParser.IS_IPV6:
            case MySqlParser.IS_USED_LOCK:
            case MySqlParser.LAST_INSERT_ID:
            case MySqlParser.LCASE:
            case MySqlParser.LEAST:
            case MySqlParser.LENGTH:
            case MySqlParser.LINEFROMTEXT:
            case MySqlParser.LINEFROMWKB:
            case MySqlParser.LINESTRINGFROMTEXT:
            case MySqlParser.LINESTRINGFROMWKB:
            case MySqlParser.LN:
            case MySqlParser.LOAD_FILE:
            case MySqlParser.LOCATE:
            case MySqlParser.LOG:
            case MySqlParser.LOG10:
            case MySqlParser.LOG2:
            case MySqlParser.LOWER:
            case MySqlParser.LPAD:
            case MySqlParser.LTRIM:
            case MySqlParser.MAKEDATE:
            case MySqlParser.MAKETIME:
            case MySqlParser.MAKE_SET:
            case MySqlParser.MASTER_POS_WAIT:
            case MySqlParser.MBRCONTAINS:
            case MySqlParser.MBRDISJOINT:
            case MySqlParser.MBREQUAL:
            case MySqlParser.MBRINTERSECTS:
            case MySqlParser.MBROVERLAPS:
            case MySqlParser.MBRTOUCHES:
            case MySqlParser.MBRWITHIN:
            case MySqlParser.MD5:
            case MySqlParser.MLINEFROMTEXT:
            case MySqlParser.MLINEFROMWKB:
            case MySqlParser.MONTHNAME:
            case MySqlParser.MPOINTFROMTEXT:
            case MySqlParser.MPOINTFROMWKB:
            case MySqlParser.MPOLYFROMTEXT:
            case MySqlParser.MPOLYFROMWKB:
            case MySqlParser.MULTILINESTRINGFROMTEXT:
            case MySqlParser.MULTILINESTRINGFROMWKB:
            case MySqlParser.MULTIPOINTFROMTEXT:
            case MySqlParser.MULTIPOINTFROMWKB:
            case MySqlParser.MULTIPOLYGONFROMTEXT:
            case MySqlParser.MULTIPOLYGONFROMWKB:
            case MySqlParser.NAME_CONST:
            case MySqlParser.NULLIF:
            case MySqlParser.NUMGEOMETRIES:
            case MySqlParser.NUMINTERIORRINGS:
            case MySqlParser.NUMPOINTS:
            case MySqlParser.OCT:
            case MySqlParser.OCTET_LENGTH:
            case MySqlParser.ORD:
            case MySqlParser.OVERLAPS:
            case MySqlParser.PERIOD_ADD:
            case MySqlParser.PERIOD_DIFF:
            case MySqlParser.PI:
            case MySqlParser.POINTFROMTEXT:
            case MySqlParser.POINTFROMWKB:
            case MySqlParser.POINTN:
            case MySqlParser.POLYFROMTEXT:
            case MySqlParser.POLYFROMWKB:
            case MySqlParser.POLYGONFROMTEXT:
            case MySqlParser.POLYGONFROMWKB:
            case MySqlParser.POW:
            case MySqlParser.POWER:
            case MySqlParser.QUOTE:
            case MySqlParser.RADIANS:
            case MySqlParser.RAND:
            case MySqlParser.RANDOM:
            case MySqlParser.RANDOM_BYTES:
            case MySqlParser.RELEASE_LOCK:
            case MySqlParser.REVERSE:
            case MySqlParser.ROUND:
            case MySqlParser.ROW_COUNT:
            case MySqlParser.RPAD:
            case MySqlParser.RTRIM:
            case MySqlParser.SEC_TO_TIME:
            case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
            case MySqlParser.SESSION_USER:
            case MySqlParser.SHA:
            case MySqlParser.SHA1:
            case MySqlParser.SHA2:
            case MySqlParser.SCHEMA_NAME:
            case MySqlParser.SIGN:
            case MySqlParser.SIN:
            case MySqlParser.SLEEP:
            case MySqlParser.SOUNDEX:
            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySqlParser.SQRT:
            case MySqlParser.SRID:
            case MySqlParser.STARTPOINT:
            case MySqlParser.STRCMP:
            case MySqlParser.STR_TO_DATE:
            case MySqlParser.ST_AREA:
            case MySqlParser.ST_ASBINARY:
            case MySqlParser.ST_ASTEXT:
            case MySqlParser.ST_ASWKB:
            case MySqlParser.ST_ASWKT:
            case MySqlParser.ST_BUFFER:
            case MySqlParser.ST_CENTROID:
            case MySqlParser.ST_CONTAINS:
            case MySqlParser.ST_CROSSES:
            case MySqlParser.ST_DIFFERENCE:
            case MySqlParser.ST_DIMENSION:
            case MySqlParser.ST_DISJOINT:
            case MySqlParser.ST_DISTANCE:
            case MySqlParser.ST_ENDPOINT:
            case MySqlParser.ST_ENVELOPE:
            case MySqlParser.ST_EQUALS:
            case MySqlParser.ST_EXTERIORRING:
            case MySqlParser.ST_GEOMCOLLFROMTEXT:
            case MySqlParser.ST_GEOMCOLLFROMTXT:
            case MySqlParser.ST_GEOMCOLLFROMWKB:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.ST_GEOMETRYFROMTEXT:
            case MySqlParser.ST_GEOMETRYFROMWKB:
            case MySqlParser.ST_GEOMETRYN:
            case MySqlParser.ST_GEOMETRYTYPE:
            case MySqlParser.ST_GEOMFROMTEXT:
            case MySqlParser.ST_GEOMFROMWKB:
            case MySqlParser.ST_INTERIORRINGN:
            case MySqlParser.ST_INTERSECTION:
            case MySqlParser.ST_INTERSECTS:
            case MySqlParser.ST_ISCLOSED:
            case MySqlParser.ST_ISEMPTY:
            case MySqlParser.ST_ISSIMPLE:
            case MySqlParser.ST_LINEFROMTEXT:
            case MySqlParser.ST_LINEFROMWKB:
            case MySqlParser.ST_LINESTRINGFROMTEXT:
            case MySqlParser.ST_LINESTRINGFROMWKB:
            case MySqlParser.ST_NUMGEOMETRIES:
            case MySqlParser.ST_NUMINTERIORRING:
            case MySqlParser.ST_NUMINTERIORRINGS:
            case MySqlParser.ST_NUMPOINTS:
            case MySqlParser.ST_OVERLAPS:
            case MySqlParser.ST_POINTFROMTEXT:
            case MySqlParser.ST_POINTFROMWKB:
            case MySqlParser.ST_POINTN:
            case MySqlParser.ST_POLYFROMTEXT:
            case MySqlParser.ST_POLYFROMWKB:
            case MySqlParser.ST_POLYGONFROMTEXT:
            case MySqlParser.ST_POLYGONFROMWKB:
            case MySqlParser.ST_SRID:
            case MySqlParser.ST_STARTPOINT:
            case MySqlParser.ST_SYMDIFFERENCE:
            case MySqlParser.ST_TOUCHES:
            case MySqlParser.ST_UNION:
            case MySqlParser.ST_WITHIN:
            case MySqlParser.ST_X:
            case MySqlParser.ST_Y:
            case MySqlParser.SUBDATE:
            case MySqlParser.SUBSTRING_INDEX:
            case MySqlParser.SUBTIME:
            case MySqlParser.SYSTEM_USER:
            case MySqlParser.TAN:
            case MySqlParser.TIMEDIFF:
            case MySqlParser.TIMESTAMPADD:
            case MySqlParser.TIMESTAMPDIFF:
            case MySqlParser.TIME_FORMAT:
            case MySqlParser.TIME_TO_SEC:
            case MySqlParser.TOUCHES:
            case MySqlParser.TO_BASE64:
            case MySqlParser.TO_DAYS:
            case MySqlParser.TO_SECONDS:
            case MySqlParser.TP_CONNECTION_ADMIN:
            case MySqlParser.UCASE:
            case MySqlParser.UNCOMPRESS:
            case MySqlParser.UNCOMPRESSED_LENGTH:
            case MySqlParser.UNHEX:
            case MySqlParser.UNIX_TIMESTAMP:
            case MySqlParser.UPDATEXML:
            case MySqlParser.UPPER:
            case MySqlParser.UUID:
            case MySqlParser.UUID_SHORT:
            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
            case MySqlParser.VERSION:
            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySqlParser.WEEKDAY:
            case MySqlParser.WEEKOFYEAR:
            case MySqlParser.WEIGHT_STRING:
            case MySqlParser.WITHIN:
            case MySqlParser.YEARWEEK:
            case MySqlParser.Y_FUNCTION:
            case MySqlParser.X_FUNCTION:
            case MySqlParser.MOD:
            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySqlParser.STRING_LITERAL:
            case MySqlParser.ID:
                localContext = new HandlerConditionNameContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4899;
                this.uid();
                }
                break;
            case MySqlParser.SQLWARNING:
                localContext = new HandlerConditionWarningContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4900;
                this.match(MySqlParser.SQLWARNING);
                }
                break;
            case MySqlParser.NOT:
                localContext = new HandlerConditionNotfoundContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4901;
                this.match(MySqlParser.NOT);
                this.state = 4902;
                this.match(MySqlParser.FOUND);
                }
                break;
            case MySqlParser.SQLEXCEPTION:
                localContext = new HandlerConditionExceptionContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4903;
                this.match(MySqlParser.SQLEXCEPTION);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureSqlStatement(): ProcedureSqlStatementContext {
        let localContext = new ProcedureSqlStatementContext(this.context, this.state);
        this.enterRule(localContext, 418, MySqlParser.RULE_procedureSqlStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4908;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 709, this.context) ) {
            case 1:
                {
                this.state = 4906;
                this.compoundStatement();
                }
                break;
            case 2:
                {
                this.state = 4907;
                this.sqlStatement();
                }
                break;
            }
            this.state = 4910;
            this.match(MySqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseAlternative(): CaseAlternativeContext {
        let localContext = new CaseAlternativeContext(this.context, this.state);
        this.enterRule(localContext, 420, MySqlParser.RULE_caseAlternative);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4912;
            this.match(MySqlParser.WHEN);
            this.state = 4915;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 710, this.context) ) {
            case 1:
                {
                this.state = 4913;
                this.constant();
                }
                break;
            case 2:
                {
                this.state = 4914;
                this.expression(0);
                }
                break;
            }
            this.state = 4917;
            this.match(MySqlParser.THEN);
            this.state = 4919;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4918;
                    this.procedureSqlStatement();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4921;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 711, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elifAlternative(): ElifAlternativeContext {
        let localContext = new ElifAlternativeContext(this.context, this.state);
        this.enterRule(localContext, 422, MySqlParser.RULE_elifAlternative);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4923;
            this.match(MySqlParser.ELSEIF);
            this.state = 4924;
            this.expression(0);
            this.state = 4925;
            this.match(MySqlParser.THEN);
            this.state = 4927;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4926;
                    this.procedureSqlStatement();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4929;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 712, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterUser(): AlterUserContext {
        let localContext = new AlterUserContext(this.context, this.state);
        this.enterRule(localContext, 424, MySqlParser.RULE_alterUser);
        let _la: number;
        try {
            this.state = 5004;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 727, this.context) ) {
            case 1:
                localContext = new AlterUserMysqlV56Context(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4931;
                this.match(MySqlParser.ALTER);
                this.state = 4932;
                this.match(MySqlParser.USER);
                this.state = 4933;
                this.userSpecification();
                this.state = 4938;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 4934;
                    this.match(MySqlParser.COMMA);
                    this.state = 4935;
                    this.userSpecification();
                    }
                    }
                    this.state = 4940;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new AlterUserMysqlV80Context(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4941;
                this.match(MySqlParser.ALTER);
                this.state = 4942;
                this.match(MySqlParser.USER);
                this.state = 4944;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 4943;
                    this.ifExists();
                    }
                }

                this.state = 4946;
                this.userAuthOption();
                this.state = 4951;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 4947;
                    this.match(MySqlParser.COMMA);
                    this.state = 4948;
                    this.userAuthOption();
                    }
                    }
                    this.state = 4953;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4968;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 142) {
                    {
                    this.state = 4954;
                    this.match(MySqlParser.REQUIRE);
                    this.state = 4966;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySqlParser.NONE:
                        {
                        this.state = 4955;
                        (localContext as AlterUserMysqlV80Context)._tlsNone = this.match(MySqlParser.NONE);
                        }
                        break;
                    case MySqlParser.SSL:
                    case MySqlParser.CIPHER:
                    case MySqlParser.ISSUER:
                    case MySqlParser.SUBJECT:
                    case MySqlParser.X509:
                        {
                        this.state = 4956;
                        this.tlsOption();
                        this.state = 4963;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 10 || _la === 167 || _la === 358 || _la === 465 || _la === 640 || _la === 680) {
                            {
                            {
                            this.state = 4958;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 10) {
                                {
                                this.state = 4957;
                                this.match(MySqlParser.AND);
                                }
                            }

                            this.state = 4960;
                            this.tlsOption();
                            }
                            }
                            this.state = 4965;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                this.state = 4976;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 192) {
                    {
                    this.state = 4970;
                    this.match(MySqlParser.WITH);
                    this.state = 4972;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 4971;
                        this.userResourceOption();
                        }
                        }
                        this.state = 4974;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & 51) !== 0));
                    }
                }

                this.state = 4982;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 332 || _la === 424 || _la === 551 || _la === 552) {
                    {
                    this.state = 4980;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                    case MySqlParser.PASSWORD:
                    case MySqlParser.PASSWORD_LOCK_TIME:
                        {
                        this.state = 4978;
                        this.userPasswordOption();
                        }
                        break;
                    case MySqlParser.ACCOUNT:
                        {
                        this.state = 4979;
                        this.userLockOption();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 4984;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4989;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.COMMENT:
                    {
                    this.state = 4985;
                    this.match(MySqlParser.COMMENT);
                    this.state = 4986;
                    this.match(MySqlParser.STRING_LITERAL);
                    }
                    break;
                case MySqlParser.ATTRIBUTE:
                    {
                    this.state = 4987;
                    this.match(MySqlParser.ATTRIBUTE);
                    this.state = 4988;
                    this.match(MySqlParser.STRING_LITERAL);
                    }
                    break;
                case MySqlParser.EOF:
                case MySqlParser.SEMI:
                    break;
                default:
                    break;
                }
                }
                break;
            case 3:
                localContext = new AlterUserMysqlV80Context(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4991;
                this.match(MySqlParser.ALTER);
                this.state = 4992;
                this.match(MySqlParser.USER);
                this.state = 4994;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 725, this.context) ) {
                case 1:
                    {
                    this.state = 4993;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 4998;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 726, this.context) ) {
                case 1:
                    {
                    this.state = 4996;
                    this.userName();
                    }
                    break;
                case 2:
                    {
                    this.state = 4997;
                    this.uid();
                    }
                    break;
                }
                this.state = 5000;
                this.match(MySqlParser.DEFAULT);
                this.state = 5001;
                this.match(MySqlParser.ROLE);
                this.state = 5002;
                this.roleOption();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUser(): CreateUserContext {
        let localContext = new CreateUserContext(this.context, this.state);
        this.enterRule(localContext, 426, MySqlParser.RULE_createUser);
        let _la: number;
        try {
            this.state = 5071;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 741, this.context) ) {
            case 1:
                localContext = new CreateUserMysqlV56Context(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5006;
                this.match(MySqlParser.CREATE);
                this.state = 5007;
                this.match(MySqlParser.USER);
                this.state = 5008;
                this.userAuthOption();
                this.state = 5013;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5009;
                    this.match(MySqlParser.COMMA);
                    this.state = 5010;
                    this.userAuthOption();
                    }
                    }
                    this.state = 5015;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new CreateUserMysqlV80Context(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5016;
                this.match(MySqlParser.CREATE);
                this.state = 5017;
                this.match(MySqlParser.USER);
                this.state = 5019;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 5018;
                    this.ifNotExists();
                    }
                }

                this.state = 5021;
                this.userAuthOption();
                this.state = 5026;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5022;
                    this.match(MySqlParser.COMMA);
                    this.state = 5023;
                    this.userAuthOption();
                    }
                    }
                    this.state = 5028;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5032;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42) {
                    {
                    this.state = 5029;
                    this.match(MySqlParser.DEFAULT);
                    this.state = 5030;
                    this.match(MySqlParser.ROLE);
                    this.state = 5031;
                    this.roleOption();
                    }
                }

                this.state = 5048;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 142) {
                    {
                    this.state = 5034;
                    this.match(MySqlParser.REQUIRE);
                    this.state = 5046;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySqlParser.NONE:
                        {
                        this.state = 5035;
                        (localContext as CreateUserMysqlV80Context)._tlsNone = this.match(MySqlParser.NONE);
                        }
                        break;
                    case MySqlParser.SSL:
                    case MySqlParser.CIPHER:
                    case MySqlParser.ISSUER:
                    case MySqlParser.SUBJECT:
                    case MySqlParser.X509:
                        {
                        this.state = 5036;
                        this.tlsOption();
                        this.state = 5043;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 10 || _la === 167 || _la === 358 || _la === 465 || _la === 640 || _la === 680) {
                            {
                            {
                            this.state = 5038;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 10) {
                                {
                                this.state = 5037;
                                this.match(MySqlParser.AND);
                                }
                            }

                            this.state = 5040;
                            this.tlsOption();
                            }
                            }
                            this.state = 5045;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                this.state = 5056;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 192) {
                    {
                    this.state = 5050;
                    this.match(MySqlParser.WITH);
                    this.state = 5052;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 5051;
                        this.userResourceOption();
                        }
                        }
                        this.state = 5054;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & 51) !== 0));
                    }
                }

                this.state = 5062;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 332 || _la === 424 || _la === 551 || _la === 552) {
                    {
                    this.state = 5060;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                    case MySqlParser.PASSWORD:
                    case MySqlParser.PASSWORD_LOCK_TIME:
                        {
                        this.state = 5058;
                        this.userPasswordOption();
                        }
                        break;
                    case MySqlParser.ACCOUNT:
                        {
                        this.state = 5059;
                        this.userLockOption();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 5064;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5069;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.COMMENT:
                    {
                    this.state = 5065;
                    this.match(MySqlParser.COMMENT);
                    this.state = 5066;
                    this.match(MySqlParser.STRING_LITERAL);
                    }
                    break;
                case MySqlParser.ATTRIBUTE:
                    {
                    this.state = 5067;
                    this.match(MySqlParser.ATTRIBUTE);
                    this.state = 5068;
                    this.match(MySqlParser.STRING_LITERAL);
                    }
                    break;
                case MySqlParser.EOF:
                case MySqlParser.SEMI:
                    break;
                default:
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropUser(): DropUserContext {
        let localContext = new DropUserContext(this.context, this.state);
        this.enterRule(localContext, 428, MySqlParser.RULE_dropUser);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5073;
            this.match(MySqlParser.DROP);
            this.state = 5074;
            this.match(MySqlParser.USER);
            this.state = 5076;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 77) {
                {
                this.state = 5075;
                this.ifExists();
                }
            }

            this.state = 5078;
            this.userName();
            this.state = 5083;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 5079;
                this.match(MySqlParser.COMMA);
                this.state = 5080;
                this.userName();
                }
                }
                this.state = 5085;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantStatement(): GrantStatementContext {
        let localContext = new GrantStatementContext(this.context, this.state);
        this.enterRule(localContext, 430, MySqlParser.RULE_grantStatement);
        let _la: number;
        try {
            this.state = 5179;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 762, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5086;
                this.match(MySqlParser.GRANT);
                this.state = 5087;
                this.privelegeClause();
                this.state = 5092;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5088;
                    this.match(MySqlParser.COMMA);
                    this.state = 5089;
                    this.privelegeClause();
                    }
                    }
                    this.state = 5094;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5095;
                this.match(MySqlParser.ON);
                this.state = 5097;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 745, this.context) ) {
                case 1:
                    {
                    this.state = 5096;
                    localContext._privilegeObject = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 131 || _la === 172 || _la === 437)) {
                        localContext._privilegeObject = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 5099;
                this.privilegeLevel();
                this.state = 5100;
                this.match(MySqlParser.TO);
                this.state = 5101;
                this.userAuthOption();
                this.state = 5106;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5102;
                    this.match(MySqlParser.COMMA);
                    this.state = 5103;
                    this.userAuthOption();
                    }
                    }
                    this.state = 5108;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5123;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 142) {
                    {
                    this.state = 5109;
                    this.match(MySqlParser.REQUIRE);
                    this.state = 5121;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySqlParser.NONE:
                        {
                        this.state = 5110;
                        localContext._tlsNone = this.match(MySqlParser.NONE);
                        }
                        break;
                    case MySqlParser.SSL:
                    case MySqlParser.CIPHER:
                    case MySqlParser.ISSUER:
                    case MySqlParser.SUBJECT:
                    case MySqlParser.X509:
                        {
                        this.state = 5111;
                        this.tlsOption();
                        this.state = 5118;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 10 || _la === 167 || _la === 358 || _la === 465 || _la === 640 || _la === 680) {
                            {
                            {
                            this.state = 5113;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 10) {
                                {
                                this.state = 5112;
                                this.match(MySqlParser.AND);
                                }
                            }

                            this.state = 5115;
                            this.tlsOption();
                            }
                            }
                            this.state = 5120;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                this.state = 5134;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 192) {
                    {
                    this.state = 5125;
                    this.match(MySqlParser.WITH);
                    this.state = 5131;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 72 || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & 51) !== 0)) {
                        {
                        this.state = 5129;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case MySqlParser.GRANT:
                            {
                            this.state = 5126;
                            this.match(MySqlParser.GRANT);
                            this.state = 5127;
                            this.match(MySqlParser.OPTION);
                            }
                            break;
                        case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                        case MySqlParser.MAX_QUERIES_PER_HOUR:
                        case MySqlParser.MAX_UPDATES_PER_HOUR:
                        case MySqlParser.MAX_USER_CONNECTIONS:
                            {
                            this.state = 5128;
                            this.userResourceOption();
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        this.state = 5133;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 5142;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12) {
                    {
                    this.state = 5136;
                    this.match(MySqlParser.AS);
                    this.state = 5137;
                    this.userName();
                    this.state = 5138;
                    this.match(MySqlParser.WITH);
                    this.state = 5139;
                    this.match(MySqlParser.ROLE);
                    this.state = 5140;
                    this.roleOption();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5144;
                this.match(MySqlParser.GRANT);
                this.state = 5147;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 755, this.context) ) {
                case 1:
                    {
                    this.state = 5145;
                    this.userName();
                    }
                    break;
                case 2:
                    {
                    this.state = 5146;
                    this.uid();
                    }
                    break;
                }
                this.state = 5156;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5149;
                    this.match(MySqlParser.COMMA);
                    this.state = 5152;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 756, this.context) ) {
                    case 1:
                        {
                        this.state = 5150;
                        this.userName();
                        }
                        break;
                    case 2:
                        {
                        this.state = 5151;
                        this.uid();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 5158;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5159;
                this.match(MySqlParser.TO);
                this.state = 5162;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 758, this.context) ) {
                case 1:
                    {
                    this.state = 5160;
                    this.userName();
                    }
                    break;
                case 2:
                    {
                    this.state = 5161;
                    this.uid();
                    }
                    break;
                }
                this.state = 5171;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5164;
                    this.match(MySqlParser.COMMA);
                    this.state = 5167;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 759, this.context) ) {
                    case 1:
                        {
                        this.state = 5165;
                        this.userName();
                        }
                        break;
                    case 2:
                        {
                        this.state = 5166;
                        this.uid();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 5173;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5177;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 192) {
                    {
                    this.state = 5174;
                    this.match(MySqlParser.WITH);
                    this.state = 5175;
                    this.match(MySqlParser.ADMIN);
                    this.state = 5176;
                    this.match(MySqlParser.OPTION);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleOption(): RoleOptionContext {
        let localContext = new RoleOptionContext(this.context, this.state);
        this.enterRule(localContext, 432, MySqlParser.RULE_roleOption);
        let _la: number;
        try {
            this.state = 5203;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 766, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5181;
                this.match(MySqlParser.DEFAULT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5182;
                this.match(MySqlParser.NONE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5183;
                this.match(MySqlParser.ALL);
                this.state = 5193;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 59) {
                    {
                    this.state = 5184;
                    this.match(MySqlParser.EXCEPT);
                    this.state = 5185;
                    this.userName();
                    this.state = 5190;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 1135) {
                        {
                        {
                        this.state = 5186;
                        this.match(MySqlParser.COMMA);
                        this.state = 5187;
                        this.userName();
                        }
                        }
                        this.state = 5192;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5195;
                this.userName();
                this.state = 5200;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5196;
                    this.match(MySqlParser.COMMA);
                    this.state = 5197;
                    this.userName();
                    }
                    }
                    this.state = 5202;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantProxy(): GrantProxyContext {
        let localContext = new GrantProxyContext(this.context, this.state);
        this.enterRule(localContext, 434, MySqlParser.RULE_grantProxy);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5205;
            this.match(MySqlParser.GRANT);
            this.state = 5206;
            this.match(MySqlParser.PROXY);
            this.state = 5207;
            this.match(MySqlParser.ON);
            this.state = 5208;
            localContext._fromFirst = this.userName();
            this.state = 5209;
            this.match(MySqlParser.TO);
            this.state = 5210;
            localContext._toFirst = this.userName();
            this.state = 5215;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 5211;
                this.match(MySqlParser.COMMA);
                this.state = 5212;
                localContext._userName = this.userName();
                localContext._toOther.push(localContext._userName);
                }
                }
                this.state = 5217;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5221;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 192) {
                {
                this.state = 5218;
                this.match(MySqlParser.WITH);
                this.state = 5219;
                this.match(MySqlParser.GRANT);
                this.state = 5220;
                this.match(MySqlParser.OPTION);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameUser(): RenameUserContext {
        let localContext = new RenameUserContext(this.context, this.state);
        this.enterRule(localContext, 436, MySqlParser.RULE_renameUser);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5223;
            this.match(MySqlParser.RENAME);
            this.state = 5224;
            this.match(MySqlParser.USER);
            this.state = 5225;
            this.renameUserClause();
            this.state = 5230;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 5226;
                this.match(MySqlParser.COMMA);
                this.state = 5227;
                this.renameUserClause();
                }
                }
                this.state = 5232;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokeStatement(): RevokeStatementContext {
        let localContext = new RevokeStatementContext(this.context, this.state);
        this.enterRule(localContext, 438, MySqlParser.RULE_revokeStatement);
        let _la: number;
        try {
            this.state = 5303;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 781, this.context) ) {
            case 1:
                localContext = new DetailRevokeContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5233;
                this.match(MySqlParser.REVOKE);
                this.state = 5234;
                this.privelegeClause();
                this.state = 5239;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5235;
                    this.match(MySqlParser.COMMA);
                    this.state = 5236;
                    this.privelegeClause();
                    }
                    }
                    this.state = 5241;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5242;
                this.match(MySqlParser.ON);
                this.state = 5244;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 771, this.context) ) {
                case 1:
                    {
                    this.state = 5243;
                    (localContext as DetailRevokeContext)._privilegeObject = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 131 || _la === 172 || _la === 437)) {
                        (localContext as DetailRevokeContext)._privilegeObject = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 5246;
                this.privilegeLevel();
                this.state = 5247;
                this.match(MySqlParser.FROM);
                this.state = 5248;
                this.userName();
                this.state = 5253;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5249;
                    this.match(MySqlParser.COMMA);
                    this.state = 5250;
                    this.userName();
                    }
                    }
                    this.state = 5255;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new ShortRevokeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5256;
                this.match(MySqlParser.REVOKE);
                this.state = 5257;
                this.match(MySqlParser.ALL);
                this.state = 5259;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 725) {
                    {
                    this.state = 5258;
                    this.match(MySqlParser.PRIVILEGES);
                    }
                }

                this.state = 5261;
                this.match(MySqlParser.COMMA);
                this.state = 5262;
                this.match(MySqlParser.GRANT);
                this.state = 5263;
                this.match(MySqlParser.OPTION);
                this.state = 5264;
                this.match(MySqlParser.FROM);
                this.state = 5265;
                this.userName();
                this.state = 5270;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5266;
                    this.match(MySqlParser.COMMA);
                    this.state = 5267;
                    this.userName();
                    }
                    }
                    this.state = 5272;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 3:
                localContext = new RoleRevokeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5273;
                this.match(MySqlParser.REVOKE);
                this.state = 5276;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 775, this.context) ) {
                case 1:
                    {
                    this.state = 5274;
                    this.userName();
                    }
                    break;
                case 2:
                    {
                    this.state = 5275;
                    this.uid();
                    }
                    break;
                }
                this.state = 5285;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5278;
                    this.match(MySqlParser.COMMA);
                    this.state = 5281;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 776, this.context) ) {
                    case 1:
                        {
                        this.state = 5279;
                        this.userName();
                        }
                        break;
                    case 2:
                        {
                        this.state = 5280;
                        this.uid();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 5287;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5288;
                this.match(MySqlParser.FROM);
                this.state = 5291;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 778, this.context) ) {
                case 1:
                    {
                    this.state = 5289;
                    this.userName();
                    }
                    break;
                case 2:
                    {
                    this.state = 5290;
                    this.uid();
                    }
                    break;
                }
                this.state = 5300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5293;
                    this.match(MySqlParser.COMMA);
                    this.state = 5296;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 779, this.context) ) {
                    case 1:
                        {
                        this.state = 5294;
                        this.userName();
                        }
                        break;
                    case 2:
                        {
                        this.state = 5295;
                        this.uid();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 5302;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokeProxy(): RevokeProxyContext {
        let localContext = new RevokeProxyContext(this.context, this.state);
        this.enterRule(localContext, 440, MySqlParser.RULE_revokeProxy);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5305;
            this.match(MySqlParser.REVOKE);
            this.state = 5306;
            this.match(MySqlParser.PROXY);
            this.state = 5307;
            this.match(MySqlParser.ON);
            this.state = 5308;
            localContext._onUser = this.userName();
            this.state = 5309;
            this.match(MySqlParser.FROM);
            this.state = 5310;
            localContext._fromFirst = this.userName();
            this.state = 5315;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 5311;
                this.match(MySqlParser.COMMA);
                this.state = 5312;
                localContext._userName = this.userName();
                localContext._fromOther.push(localContext._userName);
                }
                }
                this.state = 5317;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setPasswordStatement(): SetPasswordStatementContext {
        let localContext = new SetPasswordStatementContext(this.context, this.state);
        this.enterRule(localContext, 442, MySqlParser.RULE_setPasswordStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5318;
            this.match(MySqlParser.SET);
            this.state = 5319;
            this.match(MySqlParser.PASSWORD);
            this.state = 5322;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 65) {
                {
                this.state = 5320;
                this.match(MySqlParser.FOR);
                this.state = 5321;
                this.userName();
                }
            }

            this.state = 5324;
            this.match(MySqlParser.EQUAL_SYMBOL);
            this.state = 5327;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.OLD_PASSWORD:
            case MySqlParser.PASSWORD:
                {
                this.state = 5325;
                this.passwordFunctionClause();
                }
                break;
            case MySqlParser.STRING_LITERAL:
                {
                this.state = 5326;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userSpecification(): UserSpecificationContext {
        let localContext = new UserSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 444, MySqlParser.RULE_userSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5329;
            this.userName();
            this.state = 5330;
            this.userPasswordOption();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userAuthOption(): UserAuthOptionContext {
        let localContext = new UserAuthOptionContext(this.context, this.state);
        this.enterRule(localContext, 446, MySqlParser.RULE_userAuthOption);
        try {
            this.state = 5357;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 785, this.context) ) {
            case 1:
                localContext = new HashAuthOptionContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5332;
                this.userName();
                this.state = 5333;
                this.match(MySqlParser.IDENTIFIED);
                this.state = 5334;
                this.match(MySqlParser.BY);
                this.state = 5335;
                this.match(MySqlParser.PASSWORD);
                this.state = 5336;
                (localContext as HashAuthOptionContext)._hashed = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 2:
                localContext = new RandomAuthOptionContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5338;
                this.userName();
                this.state = 5339;
                this.match(MySqlParser.IDENTIFIED);
                this.state = 5340;
                this.match(MySqlParser.BY);
                this.state = 5341;
                this.match(MySqlParser.RANDOM);
                this.state = 5342;
                this.match(MySqlParser.PASSWORD);
                this.state = 5343;
                this.authOptionClause();
                }
                break;
            case 3:
                localContext = new StringAuthOptionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5345;
                this.userName();
                this.state = 5346;
                this.match(MySqlParser.IDENTIFIED);
                this.state = 5347;
                this.match(MySqlParser.BY);
                this.state = 5348;
                this.match(MySqlParser.STRING_LITERAL);
                this.state = 5349;
                this.authOptionClause();
                }
                break;
            case 4:
                localContext = new ModuleAuthOptionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5351;
                this.userName();
                this.state = 5352;
                this.match(MySqlParser.IDENTIFIED);
                this.state = 5353;
                this.match(MySqlParser.WITH);
                this.state = 5354;
                this.authenticationRule();
                }
                break;
            case 5:
                localContext = new SimpleAuthOptionContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5356;
                this.userName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public authOptionClause(): AuthOptionClauseContext {
        let localContext = new AuthOptionClauseContext(this.context, this.state);
        this.enterRule(localContext, 448, MySqlParser.RULE_authOptionClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5361;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 141) {
                {
                this.state = 5359;
                this.match(MySqlParser.REPLACE);
                this.state = 5360;
                this.match(MySqlParser.STRING_LITERAL);
                }
            }

            this.state = 5366;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 145) {
                {
                this.state = 5363;
                this.match(MySqlParser.RETAIN);
                this.state = 5364;
                this.match(MySqlParser.CURRENT);
                this.state = 5365;
                this.match(MySqlParser.PASSWORD);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public authenticationRule(): AuthenticationRuleContext {
        let localContext = new AuthenticationRuleContext(this.context, this.state);
        this.enterRule(localContext, 450, MySqlParser.RULE_authenticationRule);
        let _la: number;
        try {
            this.state = 5382;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 790, this.context) ) {
            case 1:
                localContext = new ModuleContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5368;
                this.authPlugin();
                this.state = 5376;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 789, this.context) ) {
                case 1:
                    {
                    this.state = 5369;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 12 || _la === 19 || _la === 187)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5373;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case MySqlParser.STRING_LITERAL:
                        {
                        this.state = 5370;
                        this.match(MySqlParser.STRING_LITERAL);
                        }
                        break;
                    case MySqlParser.RANDOM:
                        {
                        this.state = 5371;
                        this.match(MySqlParser.RANDOM);
                        this.state = 5372;
                        this.match(MySqlParser.PASSWORD);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 5375;
                    this.authOptionClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new PasswordModuleOptionContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5378;
                this.authPlugin();
                this.state = 5379;
                this.match(MySqlParser.USING);
                this.state = 5380;
                this.passwordFunctionClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tlsOption(): TlsOptionContext {
        let localContext = new TlsOptionContext(this.context, this.state);
        this.enterRule(localContext, 452, MySqlParser.RULE_tlsOption);
        try {
            this.state = 5392;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.SSL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5384;
                this.match(MySqlParser.SSL);
                }
                break;
            case MySqlParser.X509:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5385;
                this.match(MySqlParser.X509);
                }
                break;
            case MySqlParser.CIPHER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5386;
                this.match(MySqlParser.CIPHER);
                this.state = 5387;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.ISSUER:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5388;
                this.match(MySqlParser.ISSUER);
                this.state = 5389;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.SUBJECT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5390;
                this.match(MySqlParser.SUBJECT);
                this.state = 5391;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userResourceOption(): UserResourceOptionContext {
        let localContext = new UserResourceOptionContext(this.context, this.state);
        this.enterRule(localContext, 454, MySqlParser.RULE_userResourceOption);
        try {
            this.state = 5402;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.MAX_QUERIES_PER_HOUR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5394;
                this.match(MySqlParser.MAX_QUERIES_PER_HOUR);
                this.state = 5395;
                this.decimalLiteral();
                }
                break;
            case MySqlParser.MAX_UPDATES_PER_HOUR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5396;
                this.match(MySqlParser.MAX_UPDATES_PER_HOUR);
                this.state = 5397;
                this.decimalLiteral();
                }
                break;
            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5398;
                this.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR);
                this.state = 5399;
                this.decimalLiteral();
                }
                break;
            case MySqlParser.MAX_USER_CONNECTIONS:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5400;
                this.match(MySqlParser.MAX_USER_CONNECTIONS);
                this.state = 5401;
                this.decimalLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userPasswordOption(): UserPasswordOptionContext {
        let localContext = new UserPasswordOptionContext(this.context, this.state);
        this.enterRule(localContext, 456, MySqlParser.RULE_userPasswordOption);
        let _la: number;
        try {
            this.state = 5442;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 798, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5404;
                this.match(MySqlParser.PASSWORD);
                this.state = 5405;
                this.match(MySqlParser.EXPIRE);
                this.state = 5412;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.DEFAULT:
                    {
                    this.state = 5406;
                    localContext._expireType = this.match(MySqlParser.DEFAULT);
                    }
                    break;
                case MySqlParser.NEVER:
                    {
                    this.state = 5407;
                    localContext._expireType = this.match(MySqlParser.NEVER);
                    }
                    break;
                case MySqlParser.INTERVAL:
                    {
                    this.state = 5408;
                    localContext._expireType = this.match(MySqlParser.INTERVAL);
                    this.state = 5409;
                    this.decimalLiteral();
                    this.state = 5410;
                    this.match(MySqlParser.DAY);
                    }
                    break;
                case MySqlParser.EOF:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.ACCOUNT:
                case MySqlParser.COMMENT:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.COMMA:
                case MySqlParser.SEMI:
                    break;
                default:
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5414;
                this.match(MySqlParser.PASSWORD);
                this.state = 5415;
                this.match(MySqlParser.HISTORY);
                this.state = 5418;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.DEFAULT:
                    {
                    this.state = 5416;
                    this.match(MySqlParser.DEFAULT);
                    }
                    break;
                case MySqlParser.ZERO_DECIMAL:
                case MySqlParser.ONE_DECIMAL:
                case MySqlParser.TWO_DECIMAL:
                case MySqlParser.DECIMAL_LITERAL:
                case MySqlParser.REAL_LITERAL:
                    {
                    this.state = 5417;
                    this.decimalLiteral();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5420;
                this.match(MySqlParser.PASSWORD);
                this.state = 5421;
                this.match(MySqlParser.REUSE);
                this.state = 5422;
                this.match(MySqlParser.INTERVAL);
                this.state = 5427;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.DEFAULT:
                    {
                    this.state = 5423;
                    this.match(MySqlParser.DEFAULT);
                    }
                    break;
                case MySqlParser.ZERO_DECIMAL:
                case MySqlParser.ONE_DECIMAL:
                case MySqlParser.TWO_DECIMAL:
                case MySqlParser.DECIMAL_LITERAL:
                case MySqlParser.REAL_LITERAL:
                    {
                    this.state = 5424;
                    this.decimalLiteral();
                    this.state = 5425;
                    this.match(MySqlParser.DAY);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5429;
                this.match(MySqlParser.PASSWORD);
                this.state = 5430;
                this.match(MySqlParser.REQUIRE);
                this.state = 5431;
                this.match(MySqlParser.CURRENT);
                this.state = 5433;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42 || _la === 121) {
                    {
                    this.state = 5432;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 42 || _la === 121)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5435;
                this.match(MySqlParser.FAILED_LOGIN_ATTEMPTS);
                this.state = 5436;
                this.decimalLiteral();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5437;
                this.match(MySqlParser.PASSWORD_LOCK_TIME);
                this.state = 5440;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ZERO_DECIMAL:
                case MySqlParser.ONE_DECIMAL:
                case MySqlParser.TWO_DECIMAL:
                case MySqlParser.DECIMAL_LITERAL:
                case MySqlParser.REAL_LITERAL:
                    {
                    this.state = 5438;
                    this.decimalLiteral();
                    }
                    break;
                case MySqlParser.UNBOUNDED:
                    {
                    this.state = 5439;
                    this.match(MySqlParser.UNBOUNDED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userLockOption(): UserLockOptionContext {
        let localContext = new UserLockOptionContext(this.context, this.state);
        this.enterRule(localContext, 458, MySqlParser.RULE_userLockOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5444;
            this.match(MySqlParser.ACCOUNT);
            this.state = 5445;
            localContext._lockType = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 103 || _la === 182)) {
                localContext._lockType = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privelegeClause(): PrivelegeClauseContext {
        let localContext = new PrivelegeClauseContext(this.context, this.state);
        this.enterRule(localContext, 460, MySqlParser.RULE_privelegeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5447;
            this.privilege();
            this.state = 5452;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1133) {
                {
                this.state = 5448;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 5449;
                this.uidList();
                this.state = 5450;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 462, MySqlParser.RULE_privilege);
        let _la: number;
        try {
            this.state = 5547;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 804, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5454;
                this.match(MySqlParser.ALL);
                this.state = 5456;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 725) {
                    {
                    this.state = 5455;
                    this.match(MySqlParser.PRIVILEGES);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5458;
                this.match(MySqlParser.ALTER);
                this.state = 5460;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 733) {
                    {
                    this.state = 5459;
                    this.match(MySqlParser.ROUTINE);
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5462;
                this.match(MySqlParser.CREATE);
                this.state = 5470;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.TEMPORARY:
                    {
                    this.state = 5463;
                    this.match(MySqlParser.TEMPORARY);
                    this.state = 5464;
                    this.match(MySqlParser.TABLES);
                    }
                    break;
                case MySqlParser.ROUTINE:
                    {
                    this.state = 5465;
                    this.match(MySqlParser.ROUTINE);
                    }
                    break;
                case MySqlParser.VIEW:
                    {
                    this.state = 5466;
                    this.match(MySqlParser.VIEW);
                    }
                    break;
                case MySqlParser.USER:
                    {
                    this.state = 5467;
                    this.match(MySqlParser.USER);
                    }
                    break;
                case MySqlParser.TABLESPACE:
                    {
                    this.state = 5468;
                    this.match(MySqlParser.TABLESPACE);
                    }
                    break;
                case MySqlParser.ROLE:
                    {
                    this.state = 5469;
                    this.match(MySqlParser.ROLE);
                    }
                    break;
                case MySqlParser.ON:
                case MySqlParser.LR_BRACKET:
                case MySqlParser.COMMA:
                    break;
                default:
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5472;
                this.match(MySqlParser.DELETE);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5473;
                this.match(MySqlParser.DROP);
                this.state = 5475;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 596) {
                    {
                    this.state = 5474;
                    this.match(MySqlParser.ROLE);
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5477;
                this.match(MySqlParser.EVENT);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5478;
                this.match(MySqlParser.EXECUTE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5479;
                this.match(MySqlParser.FILE);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5480;
                this.match(MySqlParser.GRANT);
                this.state = 5481;
                this.match(MySqlParser.OPTION);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 5482;
                this.match(MySqlParser.INDEX);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 5483;
                this.match(MySqlParser.INSERT);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 5484;
                this.match(MySqlParser.LOCK);
                this.state = 5485;
                this.match(MySqlParser.TABLES);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 5486;
                this.match(MySqlParser.PROCESS);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 5487;
                this.match(MySqlParser.PROXY);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 5488;
                this.match(MySqlParser.REFERENCES);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 5489;
                this.match(MySqlParser.RELOAD);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 5490;
                this.match(MySqlParser.REPLICATION);
                this.state = 5491;
                _la = this.tokenStream.LA(1);
                if(!(_la === 360 || _la === 614)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 5492;
                this.match(MySqlParser.SELECT);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 5493;
                this.match(MySqlParser.SHOW);
                this.state = 5494;
                _la = this.tokenStream.LA(1);
                if(!(_la === 40 || _la === 671)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 5495;
                this.match(MySqlParser.SHUTDOWN);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 5496;
                this.match(MySqlParser.SUPER);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 5497;
                this.match(MySqlParser.TRIGGER);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 5498;
                this.match(MySqlParser.UPDATE);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 5499;
                this.match(MySqlParser.USAGE);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 5500;
                this.match(MySqlParser.APPLICATION_PASSWORD_ADMIN);
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 5501;
                this.match(MySqlParser.AUDIT_ABORT_EXEMPT);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 5502;
                this.match(MySqlParser.AUDIT_ADMIN);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 5503;
                this.match(MySqlParser.AUTHENTICATION_POLICY_ADMIN);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 5504;
                this.match(MySqlParser.BACKUP_ADMIN);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 5505;
                this.match(MySqlParser.BINLOG_ADMIN);
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 5506;
                this.match(MySqlParser.BINLOG_ENCRYPTION_ADMIN);
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 5507;
                this.match(MySqlParser.CLONE_ADMIN);
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 5508;
                this.match(MySqlParser.CONNECTION_ADMIN);
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 5509;
                this.match(MySqlParser.ENCRYPTION_KEY_ADMIN);
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 5510;
                this.match(MySqlParser.FIREWALL_ADMIN);
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 5511;
                this.match(MySqlParser.FIREWALL_EXEMPT);
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 5512;
                this.match(MySqlParser.FIREWALL_USER);
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 5513;
                this.match(MySqlParser.FLUSH_OPTIMIZER_COSTS);
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 5514;
                this.match(MySqlParser.FLUSH_STATUS);
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 5515;
                this.match(MySqlParser.FLUSH_TABLES);
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 5516;
                this.match(MySqlParser.FLUSH_USER_RESOURCES);
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 5517;
                this.match(MySqlParser.GROUP_REPLICATION_ADMIN);
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 5518;
                this.match(MySqlParser.INNODB_REDO_LOG_ARCHIVE);
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 5519;
                this.match(MySqlParser.INNODB_REDO_LOG_ENABLE);
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 5520;
                this.match(MySqlParser.NDB_STORED_USER);
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 5521;
                this.match(MySqlParser.PASSWORDLESS_USER_ADMIN);
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 5522;
                this.match(MySqlParser.PERSIST_RO_VARIABLES_ADMIN);
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 5523;
                this.match(MySqlParser.REPLICATION_APPLIER);
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 5524;
                this.match(MySqlParser.REPLICATION_SLAVE_ADMIN);
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 5525;
                this.match(MySqlParser.RESOURCE_GROUP_ADMIN);
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 5526;
                this.match(MySqlParser.RESOURCE_GROUP_USER);
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 5527;
                this.match(MySqlParser.ROLE_ADMIN);
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 5528;
                this.match(MySqlParser.SERVICE_CONNECTION_ADMIN);
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 5529;
                this.match(MySqlParser.SESSION_VARIABLES_ADMIN);
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 5530;
                this.match(MySqlParser.SET_USER_ID);
                }
                break;
            case 56:
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 5531;
                this.match(MySqlParser.SKIP_QUERY_REWRITE);
                }
                break;
            case 57:
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 5532;
                this.match(MySqlParser.SHOW_ROUTINE);
                }
                break;
            case 58:
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 5533;
                this.match(MySqlParser.SYSTEM_USER);
                }
                break;
            case 59:
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 5534;
                this.match(MySqlParser.SYSTEM_VARIABLES_ADMIN);
                }
                break;
            case 60:
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 5535;
                this.match(MySqlParser.TABLE_ENCRYPTION_ADMIN);
                }
                break;
            case 61:
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 5536;
                this.match(MySqlParser.TP_CONNECTION_ADMIN);
                }
                break;
            case 62:
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 5537;
                this.match(MySqlParser.VERSION_TOKEN_ADMIN);
                }
                break;
            case 63:
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 5538;
                this.match(MySqlParser.XA_RECOVER_ADMIN);
                }
                break;
            case 64:
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 5539;
                this.match(MySqlParser.LOAD);
                this.state = 5540;
                this.match(MySqlParser.FROM);
                this.state = 5541;
                this.match(MySqlParser.S3);
                }
                break;
            case 65:
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 5542;
                this.match(MySqlParser.SELECT);
                this.state = 5543;
                this.match(MySqlParser.INTO);
                this.state = 5544;
                this.match(MySqlParser.S3);
                }
                break;
            case 66:
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 5545;
                this.match(MySqlParser.INVOKE);
                this.state = 5546;
                this.match(MySqlParser.LAMBDA);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeLevel(): PrivilegeLevelContext {
        let localContext = new PrivilegeLevelContext(this.context, this.state);
        this.enterRule(localContext, 464, MySqlParser.RULE_privilegeLevel);
        try {
            this.state = 5565;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 805, this.context) ) {
            case 1:
                localContext = new CurrentSchemaPriviLevelContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5549;
                this.match(MySqlParser.STAR);
                }
                break;
            case 2:
                localContext = new GlobalPrivLevelContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5550;
                this.match(MySqlParser.STAR);
                this.state = 5551;
                this.match(MySqlParser.DOT);
                this.state = 5552;
                this.match(MySqlParser.STAR);
                }
                break;
            case 3:
                localContext = new DefiniteSchemaPrivLevelContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5553;
                this.uid();
                this.state = 5554;
                this.match(MySqlParser.DOT);
                this.state = 5555;
                this.match(MySqlParser.STAR);
                }
                break;
            case 4:
                localContext = new DefiniteFullTablePrivLevelContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5557;
                this.uid();
                this.state = 5558;
                this.match(MySqlParser.DOT);
                this.state = 5559;
                this.uid();
                }
                break;
            case 5:
                localContext = new DefiniteFullTablePrivLevel2Context(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5561;
                this.uid();
                this.state = 5562;
                this.dottedId();
                }
                break;
            case 6:
                localContext = new DefiniteTablePrivLevelContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5564;
                this.uid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameUserClause(): RenameUserClauseContext {
        let localContext = new RenameUserClauseContext(this.context, this.state);
        this.enterRule(localContext, 466, MySqlParser.RULE_renameUserClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5567;
            localContext._fromFirst = this.userName();
            this.state = 5568;
            this.match(MySqlParser.TO);
            this.state = 5569;
            localContext._toFirst = this.userName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzeTable(): AnalyzeTableContext {
        let localContext = new AnalyzeTableContext(this.context, this.state);
        this.enterRule(localContext, 468, MySqlParser.RULE_analyzeTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5571;
            this.match(MySqlParser.ANALYZE);
            this.state = 5573;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 115 || _la === 474) {
                {
                this.state = 5572;
                localContext._actionOption = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 115 || _la === 474)) {
                    localContext._actionOption = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 5575;
            _la = this.tokenStream.LA(1);
            if(!(_la === 172 || _la === 742)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5576;
            this.tables();
            this.state = 5594;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 5577;
                this.match(MySqlParser.UPDATE);
                this.state = 5578;
                this.match(MySqlParser.HISTOGRAM);
                this.state = 5579;
                this.match(MySqlParser.ON);
                this.state = 5580;
                this.fullColumnName();
                this.state = 5585;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5581;
                    this.match(MySqlParser.COMMA);
                    this.state = 5582;
                    this.fullColumnName();
                    }
                    }
                    this.state = 5587;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5592;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 192) {
                    {
                    this.state = 5588;
                    this.match(MySqlParser.WITH);
                    this.state = 5589;
                    this.decimalLiteral();
                    this.state = 5590;
                    this.match(MySqlParser.BUCKETS);
                    }
                }

                }
            }

            this.state = 5607;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 5596;
                this.match(MySqlParser.DROP);
                this.state = 5597;
                this.match(MySqlParser.HISTOGRAM);
                this.state = 5598;
                this.match(MySqlParser.ON);
                this.state = 5599;
                this.fullColumnName();
                this.state = 5604;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5600;
                    this.match(MySqlParser.COMMA);
                    this.state = 5601;
                    this.fullColumnName();
                    }
                    }
                    this.state = 5606;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkTable(): CheckTableContext {
        let localContext = new CheckTableContext(this.context, this.state);
        this.enterRule(localContext, 470, MySqlParser.RULE_checkTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5609;
            this.match(MySqlParser.CHECK);
            this.state = 5610;
            this.match(MySqlParser.TABLE);
            this.state = 5611;
            this.tables();
            this.state = 5615;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 65 || _la === 354 || _la === 422 || _la === 425 || _la === 504 || _la === 568) {
                {
                {
                this.state = 5612;
                this.checkTableOption();
                }
                }
                this.state = 5617;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checksumTable(): ChecksumTableContext {
        let localContext = new ChecksumTableContext(this.context, this.state);
        this.enterRule(localContext, 472, MySqlParser.RULE_checksumTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5618;
            this.match(MySqlParser.CHECKSUM);
            this.state = 5619;
            this.match(MySqlParser.TABLE);
            this.state = 5620;
            this.tables();
            this.state = 5622;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 422 || _la === 568) {
                {
                this.state = 5621;
                localContext._actionOption = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 422 || _la === 568)) {
                    localContext._actionOption = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optimizeTable(): OptimizeTableContext {
        let localContext = new OptimizeTableContext(this.context, this.state);
        this.enterRule(localContext, 474, MySqlParser.RULE_optimizeTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5624;
            this.match(MySqlParser.OPTIMIZE);
            this.state = 5626;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 115 || _la === 474) {
                {
                this.state = 5625;
                localContext._actionOption = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 115 || _la === 474)) {
                    localContext._actionOption = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 5628;
            _la = this.tokenStream.LA(1);
            if(!(_la === 172 || _la === 742)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5629;
            this.tables();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public repairTable(): RepairTableContext {
        let localContext = new RepairTableContext(this.context, this.state);
        this.enterRule(localContext, 476, MySqlParser.RULE_repairTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5631;
            this.match(MySqlParser.REPAIR);
            this.state = 5633;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 115 || _la === 474) {
                {
                this.state = 5632;
                localContext._actionOption = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 115 || _la === 474)) {
                    localContext._actionOption = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 5635;
            this.match(MySqlParser.TABLE);
            this.state = 5636;
            this.tables();
            this.state = 5638;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 568) {
                {
                this.state = 5637;
                this.match(MySqlParser.QUICK);
                }
            }

            this.state = 5641;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 422) {
                {
                this.state = 5640;
                this.match(MySqlParser.EXTENDED);
                }
            }

            this.state = 5644;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 666) {
                {
                this.state = 5643;
                this.match(MySqlParser.USE_FRM);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkTableOption(): CheckTableOptionContext {
        let localContext = new CheckTableOptionContext(this.context, this.state);
        this.enterRule(localContext, 478, MySqlParser.RULE_checkTableOption);
        try {
            this.state = 5653;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.FOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5646;
                this.match(MySqlParser.FOR);
                this.state = 5647;
                this.match(MySqlParser.UPGRADE);
                }
                break;
            case MySqlParser.QUICK:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5648;
                this.match(MySqlParser.QUICK);
                }
                break;
            case MySqlParser.FAST:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5649;
                this.match(MySqlParser.FAST);
                }
                break;
            case MySqlParser.MEDIUM:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5650;
                this.match(MySqlParser.MEDIUM);
                }
                break;
            case MySqlParser.EXTENDED:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5651;
                this.match(MySqlParser.EXTENDED);
                }
                break;
            case MySqlParser.CHANGED:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5652;
                this.match(MySqlParser.CHANGED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUdfunction(): CreateUdfunctionContext {
        let localContext = new CreateUdfunctionContext(this.context, this.state);
        this.enterRule(localContext, 480, MySqlParser.RULE_createUdfunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5655;
            this.match(MySqlParser.CREATE);
            this.state = 5657;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 335) {
                {
                this.state = 5656;
                this.match(MySqlParser.AGGREGATE);
                }
            }

            this.state = 5659;
            this.match(MySqlParser.FUNCTION);
            this.state = 5661;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 821, this.context) ) {
            case 1:
                {
                this.state = 5660;
                this.ifNotExists();
                }
                break;
            }
            this.state = 5663;
            this.uid();
            this.state = 5664;
            this.match(MySqlParser.RETURNS);
            this.state = 5665;
            localContext._returnType = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & 261) !== 0) || _la === 638)) {
                localContext._returnType = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5666;
            this.match(MySqlParser.SONAME);
            this.state = 5667;
            this.match(MySqlParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public installPlugin(): InstallPluginContext {
        let localContext = new InstallPluginContext(this.context, this.state);
        this.enterRule(localContext, 482, MySqlParser.RULE_installPlugin);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5669;
            this.match(MySqlParser.INSTALL);
            this.state = 5670;
            this.match(MySqlParser.PLUGIN);
            this.state = 5671;
            this.uid();
            this.state = 5672;
            this.match(MySqlParser.SONAME);
            this.state = 5673;
            this.match(MySqlParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uninstallPlugin(): UninstallPluginContext {
        let localContext = new UninstallPluginContext(this.context, this.state);
        this.enterRule(localContext, 484, MySqlParser.RULE_uninstallPlugin);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5675;
            this.match(MySqlParser.UNINSTALL);
            this.state = 5676;
            this.match(MySqlParser.PLUGIN);
            this.state = 5677;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setStatement(): SetStatementContext {
        let localContext = new SetStatementContext(this.context, this.state);
        this.enterRule(localContext, 486, MySqlParser.RULE_setStatement);
        let _la: number;
        try {
            this.state = 5731;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 829, this.context) ) {
            case 1:
                localContext = new SetVariableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5679;
                this.match(MySqlParser.SET);
                this.state = 5680;
                this.variableClause();
                this.state = 5681;
                _la = this.tokenStream.LA(1);
                if(!(_la === 1108 || _la === 1124)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5684;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 822, this.context) ) {
                case 1:
                    {
                    this.state = 5682;
                    this.expression(0);
                    }
                    break;
                case 2:
                    {
                    this.state = 5683;
                    this.match(MySqlParser.ON);
                    }
                    break;
                }
                this.state = 5695;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5686;
                    this.match(MySqlParser.COMMA);
                    this.state = 5687;
                    this.variableClause();
                    this.state = 5688;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1108 || _la === 1124)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5691;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 823, this.context) ) {
                    case 1:
                        {
                        this.state = 5689;
                        this.expression(0);
                        }
                        break;
                    case 2:
                        {
                        this.state = 5690;
                        this.match(MySqlParser.ON);
                        }
                        break;
                    }
                    }
                    }
                    this.state = 5697;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new SetCharsetContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5698;
                this.match(MySqlParser.SET);
                this.state = 5699;
                this.charSet();
                this.state = 5702;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.BINARY:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                    {
                    this.state = 5700;
                    this.charsetName();
                    }
                    break;
                case MySqlParser.DEFAULT:
                    {
                    this.state = 5701;
                    this.match(MySqlParser.DEFAULT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                localContext = new SetNamesContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5704;
                this.match(MySqlParser.SET);
                this.state = 5705;
                this.match(MySqlParser.NAMES);
                this.state = 5712;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.BINARY:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                    {
                    this.state = 5706;
                    this.charsetName();
                    this.state = 5709;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 27) {
                        {
                        this.state = 5707;
                        this.match(MySqlParser.COLLATE);
                        this.state = 5708;
                        this.collationName();
                        }
                    }

                    }
                    break;
                case MySqlParser.DEFAULT:
                    {
                    this.state = 5711;
                    this.match(MySqlParser.DEFAULT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                localContext = new SetPasswordContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5714;
                this.setPasswordStatement();
                }
                break;
            case 5:
                localContext = new SetTransactionContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5715;
                this.setTransactionStatement();
                }
                break;
            case 6:
                localContext = new SetAutocommitContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5716;
                this.setAutocommitStatement();
                }
                break;
            case 7:
                localContext = new SetNewValueInsideTriggerContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5717;
                this.match(MySqlParser.SET);
                this.state = 5718;
                this.fullId();
                this.state = 5719;
                _la = this.tokenStream.LA(1);
                if(!(_la === 1108 || _la === 1124)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5720;
                this.expression(0);
                this.state = 5728;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5721;
                    this.match(MySqlParser.COMMA);
                    this.state = 5722;
                    this.fullId();
                    this.state = 5723;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1108 || _la === 1124)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5724;
                    this.expression(0);
                    }
                    }
                    this.state = 5730;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStatement(): ShowStatementContext {
        let localContext = new ShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 488, MySqlParser.RULE_showStatement);
        let _la: number;
        try {
            this.state = 5886;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 852, this.context) ) {
            case 1:
                localContext = new ShowMasterLogsContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5733;
                this.match(MySqlParser.SHOW);
                this.state = 5734;
                (localContext as ShowMasterLogsContext)._logFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 226 || _la === 477)) {
                    (localContext as ShowMasterLogsContext)._logFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5735;
                this.match(MySqlParser.LOGS);
                }
                break;
            case 2:
                localContext = new ShowLogEventsContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5736;
                this.match(MySqlParser.SHOW);
                this.state = 5737;
                (localContext as ShowLogEventsContext)._logFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 345 || _la === 577)) {
                    (localContext as ShowLogEventsContext)._logFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5738;
                this.match(MySqlParser.EVENTS);
                this.state = 5741;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 5739;
                    this.match(MySqlParser.IN);
                    this.state = 5740;
                    (localContext as ShowLogEventsContext)._filename = this.match(MySqlParser.STRING_LITERAL);
                    }
                }

                this.state = 5745;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68) {
                    {
                    this.state = 5743;
                    this.match(MySqlParser.FROM);
                    this.state = 5744;
                    (localContext as ShowLogEventsContext)._fromPosition = this.decimalLiteral();
                    }
                }

                this.state = 5754;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99) {
                    {
                    this.state = 5747;
                    this.match(MySqlParser.LIMIT);
                    this.state = 5751;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 832, this.context) ) {
                    case 1:
                        {
                        this.state = 5748;
                        (localContext as ShowLogEventsContext)._offset = this.decimalLiteral();
                        this.state = 5749;
                        this.match(MySqlParser.COMMA);
                        }
                        break;
                    }
                    this.state = 5753;
                    (localContext as ShowLogEventsContext)._rowCount = this.decimalLiteral();
                    }
                }

                }
                break;
            case 3:
                localContext = new ShowObjectFilterContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5756;
                this.match(MySqlParser.SHOW);
                this.state = 5757;
                this.showCommonEntity();
                this.state = 5759;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 98 || _la === 190) {
                    {
                    this.state = 5758;
                    this.showFilter();
                    }
                }

                }
                break;
            case 4:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5761;
                this.match(MySqlParser.SHOW);
                this.state = 5763;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 436) {
                    {
                    this.state = 5762;
                    this.match(MySqlParser.FULL);
                    }
                }

                this.state = 5765;
                (localContext as ShowColumnsContext)._columnsFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 365 || _la === 427)) {
                    (localContext as ShowColumnsContext)._columnsFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5766;
                (localContext as ShowColumnsContext)._tableFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 68 || _la === 80)) {
                    (localContext as ShowColumnsContext)._tableFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5767;
                this.tableName();
                this.state = 5770;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68 || _la === 80) {
                    {
                    this.state = 5768;
                    (localContext as ShowColumnsContext)._schemaFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 68 || _la === 80)) {
                        (localContext as ShowColumnsContext)._schemaFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5769;
                    this.uid();
                    }
                }

                this.state = 5773;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 98 || _la === 190) {
                    {
                    this.state = 5772;
                    this.showFilter();
                    }
                }

                }
                break;
            case 5:
                localContext = new ShowCreateDbContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5775;
                this.match(MySqlParser.SHOW);
                this.state = 5776;
                this.match(MySqlParser.CREATE);
                this.state = 5777;
                (localContext as ShowCreateDbContext)._schemaFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 39 || _la === 150)) {
                    (localContext as ShowCreateDbContext)._schemaFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5779;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 838, this.context) ) {
                case 1:
                    {
                    this.state = 5778;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 5781;
                this.uid();
                }
                break;
            case 6:
                localContext = new ShowCreateFullIdObjectContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5782;
                this.match(MySqlParser.SHOW);
                this.state = 5783;
                this.match(MySqlParser.CREATE);
                this.state = 5784;
                (localContext as ShowCreateFullIdObjectContext)._namedEntity = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 131 || _la === 172 || _la === 177 || _la === 415 || _la === 437 || _la === 671)) {
                    (localContext as ShowCreateFullIdObjectContext)._namedEntity = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5785;
                this.fullId();
                }
                break;
            case 7:
                localContext = new ShowCreateUserContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5786;
                this.match(MySqlParser.SHOW);
                this.state = 5787;
                this.match(MySqlParser.CREATE);
                this.state = 5788;
                this.match(MySqlParser.USER);
                this.state = 5789;
                this.userName();
                }
                break;
            case 8:
                localContext = new ShowEngineContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5790;
                this.match(MySqlParser.SHOW);
                this.state = 5791;
                this.match(MySqlParser.ENGINE);
                this.state = 5792;
                this.engineName();
                this.state = 5793;
                (localContext as ShowEngineContext)._engineOption = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 513 || _la === 634)) {
                    (localContext as ShowEngineContext)._engineOption = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 9:
                localContext = new ShowGlobalInfoContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5795;
                this.match(MySqlParser.SHOW);
                this.state = 5796;
                this.showGlobalInfoClause();
                }
                break;
            case 10:
                localContext = new ShowErrorsContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 5797;
                this.match(MySqlParser.SHOW);
                this.state = 5798;
                (localContext as ShowErrorsContext)._errorFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 412 || _la === 675)) {
                    (localContext as ShowErrorsContext)._errorFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5806;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99) {
                    {
                    this.state = 5799;
                    this.match(MySqlParser.LIMIT);
                    this.state = 5803;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 839, this.context) ) {
                    case 1:
                        {
                        this.state = 5800;
                        (localContext as ShowErrorsContext)._offset = this.decimalLiteral();
                        this.state = 5801;
                        this.match(MySqlParser.COMMA);
                        }
                        break;
                    }
                    this.state = 5805;
                    (localContext as ShowErrorsContext)._rowCount = this.decimalLiteral();
                    }
                }

                }
                break;
            case 11:
                localContext = new ShowCountErrorsContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 5808;
                this.match(MySqlParser.SHOW);
                this.state = 5809;
                this.match(MySqlParser.COUNT);
                this.state = 5810;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 5811;
                this.match(MySqlParser.STAR);
                this.state = 5812;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 5813;
                (localContext as ShowCountErrorsContext)._errorFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 412 || _la === 675)) {
                    (localContext as ShowCountErrorsContext)._errorFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 12:
                localContext = new ShowSchemaFilterContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 5814;
                this.match(MySqlParser.SHOW);
                this.state = 5815;
                this.showSchemaEntity();
                this.state = 5818;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68 || _la === 80) {
                    {
                    this.state = 5816;
                    (localContext as ShowSchemaFilterContext)._schemaFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 68 || _la === 80)) {
                        (localContext as ShowSchemaFilterContext)._schemaFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5817;
                    this.uid();
                    }
                }

                this.state = 5821;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 98 || _la === 190) {
                    {
                    this.state = 5820;
                    this.showFilter();
                    }
                }

                }
                break;
            case 13:
                localContext = new ShowRoutineContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 5823;
                this.match(MySqlParser.SHOW);
                this.state = 5824;
                (localContext as ShowRoutineContext)._routine = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 131 || _la === 437)) {
                    (localContext as ShowRoutineContext)._routine = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5825;
                this.match(MySqlParser.CODE);
                this.state = 5826;
                this.fullId();
                }
                break;
            case 14:
                localContext = new ShowGrantsContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 5827;
                this.match(MySqlParser.SHOW);
                this.state = 5828;
                this.match(MySqlParser.GRANTS);
                this.state = 5831;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 5829;
                    this.match(MySqlParser.FOR);
                    this.state = 5830;
                    this.userName();
                    }
                }

                }
                break;
            case 15:
                localContext = new ShowIndexesContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 5833;
                this.match(MySqlParser.SHOW);
                this.state = 5834;
                (localContext as ShowIndexesContext)._indexFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 81 || _la === 92 || _la === 452)) {
                    (localContext as ShowIndexesContext)._indexFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5835;
                (localContext as ShowIndexesContext)._tableFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 68 || _la === 80)) {
                    (localContext as ShowIndexesContext)._tableFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5836;
                this.tableName();
                this.state = 5839;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68 || _la === 80) {
                    {
                    this.state = 5837;
                    (localContext as ShowIndexesContext)._schemaFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 68 || _la === 80)) {
                        (localContext as ShowIndexesContext)._schemaFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5838;
                    this.uid();
                    }
                }

                this.state = 5843;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 190) {
                    {
                    this.state = 5841;
                    this.match(MySqlParser.WHERE);
                    this.state = 5842;
                    this.expression(0);
                    }
                }

                }
                break;
            case 16:
                localContext = new ShowOpenTablesContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 5845;
                this.match(MySqlParser.SHOW);
                this.state = 5846;
                this.match(MySqlParser.OPEN);
                this.state = 5847;
                this.match(MySqlParser.TABLES);
                this.state = 5850;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68 || _la === 80) {
                    {
                    this.state = 5848;
                    (localContext as ShowOpenTablesContext)._schemaFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 68 || _la === 80)) {
                        (localContext as ShowOpenTablesContext)._schemaFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5849;
                    this.uid();
                    }
                }

                this.state = 5853;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 98 || _la === 190) {
                    {
                    this.state = 5852;
                    this.showFilter();
                    }
                }

                }
                break;
            case 17:
                localContext = new ShowProfileContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 5855;
                this.match(MySqlParser.SHOW);
                this.state = 5856;
                this.match(MySqlParser.PROFILE);
                this.state = 5857;
                this.showProfileType();
                this.state = 5862;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 5858;
                    this.match(MySqlParser.COMMA);
                    this.state = 5859;
                    this.showProfileType();
                    }
                    }
                    this.state = 5864;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5868;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 5865;
                    this.match(MySqlParser.FOR);
                    this.state = 5866;
                    this.match(MySqlParser.QUERY);
                    this.state = 5867;
                    (localContext as ShowProfileContext)._queryCount = this.decimalLiteral();
                    }
                }

                {
                this.state = 5870;
                this.match(MySqlParser.LIMIT);
                this.state = 5874;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 850, this.context) ) {
                case 1:
                    {
                    this.state = 5871;
                    (localContext as ShowProfileContext)._offset = this.decimalLiteral();
                    this.state = 5872;
                    this.match(MySqlParser.COMMA);
                    }
                    break;
                }
                this.state = 5876;
                (localContext as ShowProfileContext)._rowCount = this.decimalLiteral();
                }
                }
                break;
            case 18:
                localContext = new ShowSlaveStatusContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 5878;
                this.match(MySqlParser.SHOW);
                this.state = 5879;
                this.match(MySqlParser.SLAVE);
                this.state = 5880;
                this.match(MySqlParser.STATUS);
                this.state = 5884;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 5881;
                    this.match(MySqlParser.FOR);
                    this.state = 5882;
                    this.match(MySqlParser.CHANNEL);
                    this.state = 5883;
                    this.match(MySqlParser.STRING_LITERAL);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableClause(): VariableClauseContext {
        let localContext = new VariableClauseContext(this.context, this.state);
        this.enterRule(localContext, 490, MySqlParser.RULE_variableClause);
        let _la: number;
        try {
            this.state = 5898;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.LOCAL_ID:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5888;
                this.match(MySqlParser.LOCAL_ID);
                }
                break;
            case MySqlParser.GLOBAL_ID:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5889;
                this.match(MySqlParser.GLOBAL_ID);
                }
                break;
            case MySqlParser.ARRAY:
            case MySqlParser.ATTRIBUTE:
            case MySqlParser.BUCKETS:
            case MySqlParser.CONDITION:
            case MySqlParser.CURRENT:
            case MySqlParser.CURRENT_USER:
            case MySqlParser.DATABASE:
            case MySqlParser.DEFAULT:
            case MySqlParser.DIAGNOSTICS:
            case MySqlParser.EMPTY:
            case MySqlParser.ENFORCED:
            case MySqlParser.EXCEPT:
            case MySqlParser.GROUP:
            case MySqlParser.IF:
            case MySqlParser.IGNORED:
            case MySqlParser.INSERT:
            case MySqlParser.LATERAL:
            case MySqlParser.LEFT:
            case MySqlParser.NUMBER:
            case MySqlParser.OPTIONAL:
            case MySqlParser.ORDER:
            case MySqlParser.PRIMARY:
            case MySqlParser.REPEAT:
            case MySqlParser.REPLACE:
            case MySqlParser.RIGHT:
            case MySqlParser.SCHEMA:
            case MySqlParser.SKIP_QUERY_REWRITE:
            case MySqlParser.STACKED:
            case MySqlParser.DATE:
            case MySqlParser.TIME:
            case MySqlParser.TIMESTAMP:
            case MySqlParser.DATETIME:
            case MySqlParser.YEAR:
            case MySqlParser.BINARY:
            case MySqlParser.TEXT:
            case MySqlParser.ENUM:
            case MySqlParser.SERIAL:
            case MySqlParser.JSON_ARRAY:
            case MySqlParser.JSON_ARRAYAGG:
            case MySqlParser.JSON_ARRAY_APPEND:
            case MySqlParser.JSON_ARRAY_INSERT:
            case MySqlParser.JSON_CONTAINS:
            case MySqlParser.JSON_CONTAINS_PATH:
            case MySqlParser.JSON_DEPTH:
            case MySqlParser.JSON_EXTRACT:
            case MySqlParser.JSON_INSERT:
            case MySqlParser.JSON_KEYS:
            case MySqlParser.JSON_LENGTH:
            case MySqlParser.JSON_MERGE:
            case MySqlParser.JSON_MERGE_PATCH:
            case MySqlParser.JSON_MERGE_PRESERVE:
            case MySqlParser.JSON_OBJECT:
            case MySqlParser.JSON_OBJECTAGG:
            case MySqlParser.JSON_OVERLAPS:
            case MySqlParser.JSON_PRETTY:
            case MySqlParser.JSON_QUOTE:
            case MySqlParser.JSON_REMOVE:
            case MySqlParser.JSON_REPLACE:
            case MySqlParser.JSON_SCHEMA_VALID:
            case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
            case MySqlParser.JSON_SEARCH:
            case MySqlParser.JSON_SET:
            case MySqlParser.JSON_STORAGE_FREE:
            case MySqlParser.JSON_STORAGE_SIZE:
            case MySqlParser.JSON_TABLE:
            case MySqlParser.JSON_TYPE:
            case MySqlParser.JSON_UNQUOTE:
            case MySqlParser.JSON_VALID:
            case MySqlParser.JSON_VALUE:
            case MySqlParser.NESTED:
            case MySqlParser.ORDINALITY:
            case MySqlParser.PATH:
            case MySqlParser.AVG:
            case MySqlParser.BIT_AND:
            case MySqlParser.BIT_OR:
            case MySqlParser.BIT_XOR:
            case MySqlParser.COUNT:
            case MySqlParser.CUME_DIST:
            case MySqlParser.DENSE_RANK:
            case MySqlParser.FIRST_VALUE:
            case MySqlParser.GROUP_CONCAT:
            case MySqlParser.LAG:
            case MySqlParser.LAST_VALUE:
            case MySqlParser.LEAD:
            case MySqlParser.MAX:
            case MySqlParser.MIN:
            case MySqlParser.NTILE:
            case MySqlParser.NTH_VALUE:
            case MySqlParser.PERCENT_RANK:
            case MySqlParser.RANK:
            case MySqlParser.ROW_NUMBER:
            case MySqlParser.STD:
            case MySqlParser.STDDEV:
            case MySqlParser.STDDEV_POP:
            case MySqlParser.STDDEV_SAMP:
            case MySqlParser.SUM:
            case MySqlParser.VAR_POP:
            case MySqlParser.VAR_SAMP:
            case MySqlParser.VARIANCE:
            case MySqlParser.CURRENT_DATE:
            case MySqlParser.CURRENT_TIME:
            case MySqlParser.CURRENT_TIMESTAMP:
            case MySqlParser.LOCALTIME:
            case MySqlParser.CURDATE:
            case MySqlParser.CURTIME:
            case MySqlParser.DATE_ADD:
            case MySqlParser.DATE_SUB:
            case MySqlParser.LOCALTIMESTAMP:
            case MySqlParser.NOW:
            case MySqlParser.POSITION:
            case MySqlParser.SUBSTR:
            case MySqlParser.SUBSTRING:
            case MySqlParser.SYSDATE:
            case MySqlParser.TRIM:
            case MySqlParser.UTC_DATE:
            case MySqlParser.UTC_TIME:
            case MySqlParser.UTC_TIMESTAMP:
            case MySqlParser.ACCOUNT:
            case MySqlParser.ACTION:
            case MySqlParser.AFTER:
            case MySqlParser.AGGREGATE:
            case MySqlParser.ALGORITHM:
            case MySqlParser.ANY:
            case MySqlParser.AT:
            case MySqlParser.AUTHORS:
            case MySqlParser.AUTOCOMMIT:
            case MySqlParser.AUTOEXTEND_SIZE:
            case MySqlParser.AUTO_INCREMENT:
            case MySqlParser.AVG_ROW_LENGTH:
            case MySqlParser.BEGIN:
            case MySqlParser.BINLOG:
            case MySqlParser.BIT:
            case MySqlParser.BLOCK:
            case MySqlParser.BOOL:
            case MySqlParser.BOOLEAN:
            case MySqlParser.BTREE:
            case MySqlParser.CACHE:
            case MySqlParser.CASCADED:
            case MySqlParser.CHAIN:
            case MySqlParser.CHANGED:
            case MySqlParser.CHANNEL:
            case MySqlParser.CHECKSUM:
            case MySqlParser.PAGE_CHECKSUM:
            case MySqlParser.CIPHER:
            case MySqlParser.CLASS_ORIGIN:
            case MySqlParser.CLIENT:
            case MySqlParser.CLOSE:
            case MySqlParser.CLUSTERING:
            case MySqlParser.COALESCE:
            case MySqlParser.CODE:
            case MySqlParser.COLUMNS:
            case MySqlParser.COLUMN_FORMAT:
            case MySqlParser.COLUMN_NAME:
            case MySqlParser.COMMENT:
            case MySqlParser.COMMIT:
            case MySqlParser.COMPACT:
            case MySqlParser.COMPLETION:
            case MySqlParser.COMPRESSED:
            case MySqlParser.COMPRESSION:
            case MySqlParser.CONCURRENT:
            case MySqlParser.CONNECT:
            case MySqlParser.CONNECTION:
            case MySqlParser.CONSISTENT:
            case MySqlParser.CONSTRAINT_CATALOG:
            case MySqlParser.CONSTRAINT_SCHEMA:
            case MySqlParser.CONSTRAINT_NAME:
            case MySqlParser.CONTAINS:
            case MySqlParser.CONTEXT:
            case MySqlParser.CONTRIBUTORS:
            case MySqlParser.COPY:
            case MySqlParser.CPU:
            case MySqlParser.CURSOR_NAME:
            case MySqlParser.DATA:
            case MySqlParser.DATAFILE:
            case MySqlParser.DEALLOCATE:
            case MySqlParser.DEFAULT_AUTH:
            case MySqlParser.DEFINER:
            case MySqlParser.DELAY_KEY_WRITE:
            case MySqlParser.DES_KEY_FILE:
            case MySqlParser.DIRECTORY:
            case MySqlParser.DISABLE:
            case MySqlParser.DISCARD:
            case MySqlParser.DISK:
            case MySqlParser.DO:
            case MySqlParser.DUMPFILE:
            case MySqlParser.DUPLICATE:
            case MySqlParser.DYNAMIC:
            case MySqlParser.ENABLE:
            case MySqlParser.ENCRYPTION:
            case MySqlParser.END:
            case MySqlParser.ENDS:
            case MySqlParser.ENGINE:
            case MySqlParser.ENGINES:
            case MySqlParser.ERROR:
            case MySqlParser.ERRORS:
            case MySqlParser.ESCAPE:
            case MySqlParser.EVEN:
            case MySqlParser.EVENT:
            case MySqlParser.EVENTS:
            case MySqlParser.EVERY:
            case MySqlParser.EXCHANGE:
            case MySqlParser.EXCLUSIVE:
            case MySqlParser.EXPIRE:
            case MySqlParser.EXPORT:
            case MySqlParser.EXTENDED:
            case MySqlParser.EXTENT_SIZE:
            case MySqlParser.FAILED_LOGIN_ATTEMPTS:
            case MySqlParser.FAST:
            case MySqlParser.FAULTS:
            case MySqlParser.FIELDS:
            case MySqlParser.FILE_BLOCK_SIZE:
            case MySqlParser.FILTER:
            case MySqlParser.FIRST:
            case MySqlParser.FIXED:
            case MySqlParser.FLUSH:
            case MySqlParser.FOLLOWS:
            case MySqlParser.FOUND:
            case MySqlParser.FULL:
            case MySqlParser.FUNCTION:
            case MySqlParser.GENERAL:
            case MySqlParser.GLOBAL:
            case MySqlParser.GRANTS:
            case MySqlParser.GROUP_REPLICATION:
            case MySqlParser.HANDLER:
            case MySqlParser.HASH:
            case MySqlParser.HELP:
            case MySqlParser.HISTORY:
            case MySqlParser.HOST:
            case MySqlParser.HOSTS:
            case MySqlParser.IDENTIFIED:
            case MySqlParser.IGNORE_SERVER_IDS:
            case MySqlParser.IMPORT:
            case MySqlParser.INDEXES:
            case MySqlParser.INITIAL_SIZE:
            case MySqlParser.INPLACE:
            case MySqlParser.INSERT_METHOD:
            case MySqlParser.INSTALL:
            case MySqlParser.INSTANCE:
            case MySqlParser.INSTANT:
            case MySqlParser.INVISIBLE:
            case MySqlParser.INVOKER:
            case MySqlParser.IO:
            case MySqlParser.IO_THREAD:
            case MySqlParser.IPC:
            case MySqlParser.ISOLATION:
            case MySqlParser.ISSUER:
            case MySqlParser.JSON:
            case MySqlParser.KEY_BLOCK_SIZE:
            case MySqlParser.LANGUAGE:
            case MySqlParser.LAST:
            case MySqlParser.LEAVES:
            case MySqlParser.LESS:
            case MySqlParser.LEVEL:
            case MySqlParser.LIST:
            case MySqlParser.LOCAL:
            case MySqlParser.LOGFILE:
            case MySqlParser.LOGS:
            case MySqlParser.MASTER:
            case MySqlParser.MASTER_AUTO_POSITION:
            case MySqlParser.MASTER_CONNECT_RETRY:
            case MySqlParser.MASTER_DELAY:
            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
            case MySqlParser.MASTER_HOST:
            case MySqlParser.MASTER_LOG_FILE:
            case MySqlParser.MASTER_LOG_POS:
            case MySqlParser.MASTER_PASSWORD:
            case MySqlParser.MASTER_PORT:
            case MySqlParser.MASTER_RETRY_COUNT:
            case MySqlParser.MASTER_SSL:
            case MySqlParser.MASTER_SSL_CA:
            case MySqlParser.MASTER_SSL_CAPATH:
            case MySqlParser.MASTER_SSL_CERT:
            case MySqlParser.MASTER_SSL_CIPHER:
            case MySqlParser.MASTER_SSL_CRL:
            case MySqlParser.MASTER_SSL_CRLPATH:
            case MySqlParser.MASTER_SSL_KEY:
            case MySqlParser.MASTER_TLS_VERSION:
            case MySqlParser.MASTER_USER:
            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
            case MySqlParser.MAX_QUERIES_PER_HOUR:
            case MySqlParser.MAX_ROWS:
            case MySqlParser.MAX_SIZE:
            case MySqlParser.MAX_UPDATES_PER_HOUR:
            case MySqlParser.MAX_USER_CONNECTIONS:
            case MySqlParser.MEDIUM:
            case MySqlParser.MEMBER:
            case MySqlParser.MERGE:
            case MySqlParser.MESSAGE_TEXT:
            case MySqlParser.MID:
            case MySqlParser.MIGRATE:
            case MySqlParser.MIN_ROWS:
            case MySqlParser.MODE:
            case MySqlParser.MODIFY:
            case MySqlParser.MUTEX:
            case MySqlParser.MYSQL:
            case MySqlParser.MYSQL_ERRNO:
            case MySqlParser.NAME:
            case MySqlParser.NAMES:
            case MySqlParser.NCHAR:
            case MySqlParser.NEVER:
            case MySqlParser.NEXT:
            case MySqlParser.NO:
            case MySqlParser.NOCOPY:
            case MySqlParser.NOWAIT:
            case MySqlParser.NODEGROUP:
            case MySqlParser.NONE:
            case MySqlParser.ODBC:
            case MySqlParser.OFFLINE:
            case MySqlParser.OFFSET:
            case MySqlParser.OF:
            case MySqlParser.OJ:
            case MySqlParser.OLD_PASSWORD:
            case MySqlParser.ONE:
            case MySqlParser.ONLINE:
            case MySqlParser.ONLY:
            case MySqlParser.OPEN:
            case MySqlParser.OPTIMIZER_COSTS:
            case MySqlParser.OPTIONS:
            case MySqlParser.OWNER:
            case MySqlParser.PACK_KEYS:
            case MySqlParser.PAGE:
            case MySqlParser.PARSER:
            case MySqlParser.PARTIAL:
            case MySqlParser.PARTITIONING:
            case MySqlParser.PARTITIONS:
            case MySqlParser.PASSWORD:
            case MySqlParser.PASSWORD_LOCK_TIME:
            case MySqlParser.PHASE:
            case MySqlParser.PLUGIN:
            case MySqlParser.PLUGIN_DIR:
            case MySqlParser.PLUGINS:
            case MySqlParser.PORT:
            case MySqlParser.PRECEDES:
            case MySqlParser.PREPARE:
            case MySqlParser.PRESERVE:
            case MySqlParser.PREV:
            case MySqlParser.PROCESSLIST:
            case MySqlParser.PROFILE:
            case MySqlParser.PROFILES:
            case MySqlParser.PROXY:
            case MySqlParser.QUERY:
            case MySqlParser.QUICK:
            case MySqlParser.REBUILD:
            case MySqlParser.RECOVER:
            case MySqlParser.RECURSIVE:
            case MySqlParser.REDO_BUFFER_SIZE:
            case MySqlParser.REDUNDANT:
            case MySqlParser.RELAY:
            case MySqlParser.RELAY_LOG_FILE:
            case MySqlParser.RELAY_LOG_POS:
            case MySqlParser.RELAYLOG:
            case MySqlParser.REMOVE:
            case MySqlParser.REORGANIZE:
            case MySqlParser.REPAIR:
            case MySqlParser.REPLICATE_DO_DB:
            case MySqlParser.REPLICATE_DO_TABLE:
            case MySqlParser.REPLICATE_IGNORE_DB:
            case MySqlParser.REPLICATE_IGNORE_TABLE:
            case MySqlParser.REPLICATE_REWRITE_DB:
            case MySqlParser.REPLICATE_WILD_DO_TABLE:
            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySqlParser.REPLICATION:
            case MySqlParser.RESET:
            case MySqlParser.RESUME:
            case MySqlParser.RETURNED_SQLSTATE:
            case MySqlParser.RETURNS:
            case MySqlParser.REUSE:
            case MySqlParser.ROLE:
            case MySqlParser.ROLLBACK:
            case MySqlParser.ROLLUP:
            case MySqlParser.ROTATE:
            case MySqlParser.ROW:
            case MySqlParser.ROWS:
            case MySqlParser.ROW_FORMAT:
            case MySqlParser.RTREE:
            case MySqlParser.SAVEPOINT:
            case MySqlParser.SCHEDULE:
            case MySqlParser.SECURITY:
            case MySqlParser.SERVER:
            case MySqlParser.SESSION:
            case MySqlParser.SHARE:
            case MySqlParser.SHARED:
            case MySqlParser.SIGNED:
            case MySqlParser.SIMPLE:
            case MySqlParser.SLAVE:
            case MySqlParser.SLOW:
            case MySqlParser.SNAPSHOT:
            case MySqlParser.SOCKET:
            case MySqlParser.SOME:
            case MySqlParser.SONAME:
            case MySqlParser.SOUNDS:
            case MySqlParser.SOURCE:
            case MySqlParser.SQL_AFTER_GTIDS:
            case MySqlParser.SQL_AFTER_MTS_GAPS:
            case MySqlParser.SQL_BEFORE_GTIDS:
            case MySqlParser.SQL_BUFFER_RESULT:
            case MySqlParser.SQL_CACHE:
            case MySqlParser.SQL_NO_CACHE:
            case MySqlParser.SQL_THREAD:
            case MySqlParser.START:
            case MySqlParser.STARTS:
            case MySqlParser.STATS_AUTO_RECALC:
            case MySqlParser.STATS_PERSISTENT:
            case MySqlParser.STATS_SAMPLE_PAGES:
            case MySqlParser.STATUS:
            case MySqlParser.STOP:
            case MySqlParser.STORAGE:
            case MySqlParser.STRING:
            case MySqlParser.SUBCLASS_ORIGIN:
            case MySqlParser.SUBJECT:
            case MySqlParser.SUBPARTITION:
            case MySqlParser.SUBPARTITIONS:
            case MySqlParser.SUSPEND:
            case MySqlParser.SWAPS:
            case MySqlParser.SWITCHES:
            case MySqlParser.TABLE_NAME:
            case MySqlParser.TABLESPACE:
            case MySqlParser.TABLE_TYPE:
            case MySqlParser.TEMPORARY:
            case MySqlParser.TEMPTABLE:
            case MySqlParser.THAN:
            case MySqlParser.TRADITIONAL:
            case MySqlParser.TRANSACTION:
            case MySqlParser.TRANSACTIONAL:
            case MySqlParser.TRIGGERS:
            case MySqlParser.TRUNCATE:
            case MySqlParser.UNBOUNDED:
            case MySqlParser.UNDEFINED:
            case MySqlParser.UNDOFILE:
            case MySqlParser.UNDO_BUFFER_SIZE:
            case MySqlParser.UNINSTALL:
            case MySqlParser.UNKNOWN:
            case MySqlParser.UNTIL:
            case MySqlParser.UPGRADE:
            case MySqlParser.USER:
            case MySqlParser.USE_FRM:
            case MySqlParser.USER_RESOURCES:
            case MySqlParser.VALIDATION:
            case MySqlParser.VALUE:
            case MySqlParser.VARIABLES:
            case MySqlParser.VIEW:
            case MySqlParser.VIRTUAL:
            case MySqlParser.VISIBLE:
            case MySqlParser.WAIT:
            case MySqlParser.WARNINGS:
            case MySqlParser.WITHOUT:
            case MySqlParser.WORK:
            case MySqlParser.WRAPPER:
            case MySqlParser.X509:
            case MySqlParser.XA:
            case MySqlParser.XML:
            case MySqlParser.EUR:
            case MySqlParser.USA:
            case MySqlParser.JIS:
            case MySqlParser.ISO:
            case MySqlParser.INTERNAL:
            case MySqlParser.QUARTER:
            case MySqlParser.MONTH:
            case MySqlParser.DAY:
            case MySqlParser.HOUR:
            case MySqlParser.MINUTE:
            case MySqlParser.WEEK:
            case MySqlParser.SECOND:
            case MySqlParser.MICROSECOND:
            case MySqlParser.ADMIN:
            case MySqlParser.AUDIT_ABORT_EXEMPT:
            case MySqlParser.AUDIT_ADMIN:
            case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
            case MySqlParser.BACKUP_ADMIN:
            case MySqlParser.BINLOG_ADMIN:
            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
            case MySqlParser.CLONE_ADMIN:
            case MySqlParser.CONNECTION_ADMIN:
            case MySqlParser.ENCRYPTION_KEY_ADMIN:
            case MySqlParser.EXECUTE:
            case MySqlParser.FILE:
            case MySqlParser.FIREWALL_ADMIN:
            case MySqlParser.FIREWALL_EXEMPT:
            case MySqlParser.FIREWALL_USER:
            case MySqlParser.GROUP_REPLICATION_ADMIN:
            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
            case MySqlParser.INVOKE:
            case MySqlParser.LAMBDA:
            case MySqlParser.NDB_STORED_USER:
            case MySqlParser.PASSWORDLESS_USER_ADMIN:
            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySqlParser.PRIVILEGES:
            case MySqlParser.PROCESS:
            case MySqlParser.RELOAD:
            case MySqlParser.REPLICATION_APPLIER:
            case MySqlParser.REPLICATION_SLAVE_ADMIN:
            case MySqlParser.RESOURCE_GROUP_ADMIN:
            case MySqlParser.RESOURCE_GROUP_USER:
            case MySqlParser.ROLE_ADMIN:
            case MySqlParser.ROUTINE:
            case MySqlParser.S3:
            case MySqlParser.SESSION_VARIABLES_ADMIN:
            case MySqlParser.SET_USER_ID:
            case MySqlParser.SHOW_ROUTINE:
            case MySqlParser.SHUTDOWN:
            case MySqlParser.SUPER:
            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
            case MySqlParser.TABLES:
            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
            case MySqlParser.VERSION_TOKEN_ADMIN:
            case MySqlParser.XA_RECOVER_ADMIN:
            case MySqlParser.ARMSCII8:
            case MySqlParser.ASCII:
            case MySqlParser.BIG5:
            case MySqlParser.CP1250:
            case MySqlParser.CP1251:
            case MySqlParser.CP1256:
            case MySqlParser.CP1257:
            case MySqlParser.CP850:
            case MySqlParser.CP852:
            case MySqlParser.CP866:
            case MySqlParser.CP932:
            case MySqlParser.DEC8:
            case MySqlParser.EUCJPMS:
            case MySqlParser.EUCKR:
            case MySqlParser.GB18030:
            case MySqlParser.GB2312:
            case MySqlParser.GBK:
            case MySqlParser.GEOSTD8:
            case MySqlParser.GREEK:
            case MySqlParser.HEBREW:
            case MySqlParser.HP8:
            case MySqlParser.KEYBCS2:
            case MySqlParser.KOI8R:
            case MySqlParser.KOI8U:
            case MySqlParser.LATIN1:
            case MySqlParser.LATIN2:
            case MySqlParser.LATIN5:
            case MySqlParser.LATIN7:
            case MySqlParser.MACCE:
            case MySqlParser.MACROMAN:
            case MySqlParser.SJIS:
            case MySqlParser.SWE7:
            case MySqlParser.TIS620:
            case MySqlParser.UCS2:
            case MySqlParser.UJIS:
            case MySqlParser.UTF16:
            case MySqlParser.UTF16LE:
            case MySqlParser.UTF32:
            case MySqlParser.UTF8:
            case MySqlParser.UTF8MB3:
            case MySqlParser.UTF8MB4:
            case MySqlParser.ARCHIVE:
            case MySqlParser.BLACKHOLE:
            case MySqlParser.CSV:
            case MySqlParser.FEDERATED:
            case MySqlParser.INNODB:
            case MySqlParser.MEMORY:
            case MySqlParser.MRG_MYISAM:
            case MySqlParser.MYISAM:
            case MySqlParser.NDB:
            case MySqlParser.NDBCLUSTER:
            case MySqlParser.PERFORMANCE_SCHEMA:
            case MySqlParser.TOKUDB:
            case MySqlParser.REPEATABLE:
            case MySqlParser.COMMITTED:
            case MySqlParser.UNCOMMITTED:
            case MySqlParser.SERIALIZABLE:
            case MySqlParser.GEOMETRYCOLLECTION:
            case MySqlParser.LINESTRING:
            case MySqlParser.MULTILINESTRING:
            case MySqlParser.MULTIPOINT:
            case MySqlParser.MULTIPOLYGON:
            case MySqlParser.POINT:
            case MySqlParser.POLYGON:
            case MySqlParser.ABS:
            case MySqlParser.ACOS:
            case MySqlParser.ADDDATE:
            case MySqlParser.ADDTIME:
            case MySqlParser.AES_DECRYPT:
            case MySqlParser.AES_ENCRYPT:
            case MySqlParser.AREA:
            case MySqlParser.ASBINARY:
            case MySqlParser.ASIN:
            case MySqlParser.ASTEXT:
            case MySqlParser.ASWKB:
            case MySqlParser.ASWKT:
            case MySqlParser.ASYMMETRIC_DECRYPT:
            case MySqlParser.ASYMMETRIC_DERIVE:
            case MySqlParser.ASYMMETRIC_ENCRYPT:
            case MySqlParser.ASYMMETRIC_SIGN:
            case MySqlParser.ASYMMETRIC_VERIFY:
            case MySqlParser.ATAN:
            case MySqlParser.ATAN2:
            case MySqlParser.BENCHMARK:
            case MySqlParser.BIN:
            case MySqlParser.BIT_COUNT:
            case MySqlParser.BIT_LENGTH:
            case MySqlParser.BUFFER:
            case MySqlParser.CATALOG_NAME:
            case MySqlParser.CEIL:
            case MySqlParser.CEILING:
            case MySqlParser.CENTROID:
            case MySqlParser.CHARACTER_LENGTH:
            case MySqlParser.CHARSET:
            case MySqlParser.CHAR_LENGTH:
            case MySqlParser.COERCIBILITY:
            case MySqlParser.COLLATION:
            case MySqlParser.COMPRESS:
            case MySqlParser.CONCAT:
            case MySqlParser.CONCAT_WS:
            case MySqlParser.CONNECTION_ID:
            case MySqlParser.CONV:
            case MySqlParser.CONVERT_TZ:
            case MySqlParser.COS:
            case MySqlParser.COT:
            case MySqlParser.CRC32:
            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySqlParser.CREATE_DH_PARAMETERS:
            case MySqlParser.CREATE_DIGEST:
            case MySqlParser.CROSSES:
            case MySqlParser.DATEDIFF:
            case MySqlParser.DATE_FORMAT:
            case MySqlParser.DAYNAME:
            case MySqlParser.DAYOFMONTH:
            case MySqlParser.DAYOFWEEK:
            case MySqlParser.DAYOFYEAR:
            case MySqlParser.DECODE:
            case MySqlParser.DEGREES:
            case MySqlParser.DES_DECRYPT:
            case MySqlParser.DES_ENCRYPT:
            case MySqlParser.DIMENSION:
            case MySqlParser.DISJOINT:
            case MySqlParser.ELT:
            case MySqlParser.ENCODE:
            case MySqlParser.ENCRYPT:
            case MySqlParser.ENDPOINT:
            case MySqlParser.ENGINE_ATTRIBUTE:
            case MySqlParser.ENVELOPE:
            case MySqlParser.EQUALS:
            case MySqlParser.EXP:
            case MySqlParser.EXPORT_SET:
            case MySqlParser.EXTERIORRING:
            case MySqlParser.EXTRACTVALUE:
            case MySqlParser.FIELD:
            case MySqlParser.FIND_IN_SET:
            case MySqlParser.FLOOR:
            case MySqlParser.FORMAT:
            case MySqlParser.FOUND_ROWS:
            case MySqlParser.FROM_BASE64:
            case MySqlParser.FROM_DAYS:
            case MySqlParser.FROM_UNIXTIME:
            case MySqlParser.GEOMCOLLFROMTEXT:
            case MySqlParser.GEOMCOLLFROMWKB:
            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.GEOMETRYFROMTEXT:
            case MySqlParser.GEOMETRYFROMWKB:
            case MySqlParser.GEOMETRYN:
            case MySqlParser.GEOMETRYTYPE:
            case MySqlParser.GEOMFROMTEXT:
            case MySqlParser.GEOMFROMWKB:
            case MySqlParser.GET_FORMAT:
            case MySqlParser.GET_LOCK:
            case MySqlParser.GLENGTH:
            case MySqlParser.GREATEST:
            case MySqlParser.GTID_SUBSET:
            case MySqlParser.GTID_SUBTRACT:
            case MySqlParser.HEX:
            case MySqlParser.IFNULL:
            case MySqlParser.INET6_ATON:
            case MySqlParser.INET6_NTOA:
            case MySqlParser.INET_ATON:
            case MySqlParser.INET_NTOA:
            case MySqlParser.INSTR:
            case MySqlParser.INTERIORRINGN:
            case MySqlParser.INTERSECTS:
            case MySqlParser.ISCLOSED:
            case MySqlParser.ISEMPTY:
            case MySqlParser.ISNULL:
            case MySqlParser.ISSIMPLE:
            case MySqlParser.IS_FREE_LOCK:
            case MySqlParser.IS_IPV4:
            case MySqlParser.IS_IPV4_COMPAT:
            case MySqlParser.IS_IPV4_MAPPED:
            case MySqlParser.IS_IPV6:
            case MySqlParser.IS_USED_LOCK:
            case MySqlParser.LAST_INSERT_ID:
            case MySqlParser.LCASE:
            case MySqlParser.LEAST:
            case MySqlParser.LENGTH:
            case MySqlParser.LINEFROMTEXT:
            case MySqlParser.LINEFROMWKB:
            case MySqlParser.LINESTRINGFROMTEXT:
            case MySqlParser.LINESTRINGFROMWKB:
            case MySqlParser.LN:
            case MySqlParser.LOAD_FILE:
            case MySqlParser.LOCATE:
            case MySqlParser.LOG:
            case MySqlParser.LOG10:
            case MySqlParser.LOG2:
            case MySqlParser.LOWER:
            case MySqlParser.LPAD:
            case MySqlParser.LTRIM:
            case MySqlParser.MAKEDATE:
            case MySqlParser.MAKETIME:
            case MySqlParser.MAKE_SET:
            case MySqlParser.MASTER_POS_WAIT:
            case MySqlParser.MBRCONTAINS:
            case MySqlParser.MBRDISJOINT:
            case MySqlParser.MBREQUAL:
            case MySqlParser.MBRINTERSECTS:
            case MySqlParser.MBROVERLAPS:
            case MySqlParser.MBRTOUCHES:
            case MySqlParser.MBRWITHIN:
            case MySqlParser.MD5:
            case MySqlParser.MLINEFROMTEXT:
            case MySqlParser.MLINEFROMWKB:
            case MySqlParser.MONTHNAME:
            case MySqlParser.MPOINTFROMTEXT:
            case MySqlParser.MPOINTFROMWKB:
            case MySqlParser.MPOLYFROMTEXT:
            case MySqlParser.MPOLYFROMWKB:
            case MySqlParser.MULTILINESTRINGFROMTEXT:
            case MySqlParser.MULTILINESTRINGFROMWKB:
            case MySqlParser.MULTIPOINTFROMTEXT:
            case MySqlParser.MULTIPOINTFROMWKB:
            case MySqlParser.MULTIPOLYGONFROMTEXT:
            case MySqlParser.MULTIPOLYGONFROMWKB:
            case MySqlParser.NAME_CONST:
            case MySqlParser.NULLIF:
            case MySqlParser.NUMGEOMETRIES:
            case MySqlParser.NUMINTERIORRINGS:
            case MySqlParser.NUMPOINTS:
            case MySqlParser.OCT:
            case MySqlParser.OCTET_LENGTH:
            case MySqlParser.ORD:
            case MySqlParser.OVERLAPS:
            case MySqlParser.PERIOD_ADD:
            case MySqlParser.PERIOD_DIFF:
            case MySqlParser.PI:
            case MySqlParser.POINTFROMTEXT:
            case MySqlParser.POINTFROMWKB:
            case MySqlParser.POINTN:
            case MySqlParser.POLYFROMTEXT:
            case MySqlParser.POLYFROMWKB:
            case MySqlParser.POLYGONFROMTEXT:
            case MySqlParser.POLYGONFROMWKB:
            case MySqlParser.POW:
            case MySqlParser.POWER:
            case MySqlParser.QUOTE:
            case MySqlParser.RADIANS:
            case MySqlParser.RAND:
            case MySqlParser.RANDOM:
            case MySqlParser.RANDOM_BYTES:
            case MySqlParser.RELEASE_LOCK:
            case MySqlParser.REVERSE:
            case MySqlParser.ROUND:
            case MySqlParser.ROW_COUNT:
            case MySqlParser.RPAD:
            case MySqlParser.RTRIM:
            case MySqlParser.SEC_TO_TIME:
            case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
            case MySqlParser.SESSION_USER:
            case MySqlParser.SHA:
            case MySqlParser.SHA1:
            case MySqlParser.SHA2:
            case MySqlParser.SCHEMA_NAME:
            case MySqlParser.SIGN:
            case MySqlParser.SIN:
            case MySqlParser.SLEEP:
            case MySqlParser.SOUNDEX:
            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySqlParser.SQRT:
            case MySqlParser.SRID:
            case MySqlParser.STARTPOINT:
            case MySqlParser.STRCMP:
            case MySqlParser.STR_TO_DATE:
            case MySqlParser.ST_AREA:
            case MySqlParser.ST_ASBINARY:
            case MySqlParser.ST_ASTEXT:
            case MySqlParser.ST_ASWKB:
            case MySqlParser.ST_ASWKT:
            case MySqlParser.ST_BUFFER:
            case MySqlParser.ST_CENTROID:
            case MySqlParser.ST_CONTAINS:
            case MySqlParser.ST_CROSSES:
            case MySqlParser.ST_DIFFERENCE:
            case MySqlParser.ST_DIMENSION:
            case MySqlParser.ST_DISJOINT:
            case MySqlParser.ST_DISTANCE:
            case MySqlParser.ST_ENDPOINT:
            case MySqlParser.ST_ENVELOPE:
            case MySqlParser.ST_EQUALS:
            case MySqlParser.ST_EXTERIORRING:
            case MySqlParser.ST_GEOMCOLLFROMTEXT:
            case MySqlParser.ST_GEOMCOLLFROMTXT:
            case MySqlParser.ST_GEOMCOLLFROMWKB:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.ST_GEOMETRYFROMTEXT:
            case MySqlParser.ST_GEOMETRYFROMWKB:
            case MySqlParser.ST_GEOMETRYN:
            case MySqlParser.ST_GEOMETRYTYPE:
            case MySqlParser.ST_GEOMFROMTEXT:
            case MySqlParser.ST_GEOMFROMWKB:
            case MySqlParser.ST_INTERIORRINGN:
            case MySqlParser.ST_INTERSECTION:
            case MySqlParser.ST_INTERSECTS:
            case MySqlParser.ST_ISCLOSED:
            case MySqlParser.ST_ISEMPTY:
            case MySqlParser.ST_ISSIMPLE:
            case MySqlParser.ST_LINEFROMTEXT:
            case MySqlParser.ST_LINEFROMWKB:
            case MySqlParser.ST_LINESTRINGFROMTEXT:
            case MySqlParser.ST_LINESTRINGFROMWKB:
            case MySqlParser.ST_NUMGEOMETRIES:
            case MySqlParser.ST_NUMINTERIORRING:
            case MySqlParser.ST_NUMINTERIORRINGS:
            case MySqlParser.ST_NUMPOINTS:
            case MySqlParser.ST_OVERLAPS:
            case MySqlParser.ST_POINTFROMTEXT:
            case MySqlParser.ST_POINTFROMWKB:
            case MySqlParser.ST_POINTN:
            case MySqlParser.ST_POLYFROMTEXT:
            case MySqlParser.ST_POLYFROMWKB:
            case MySqlParser.ST_POLYGONFROMTEXT:
            case MySqlParser.ST_POLYGONFROMWKB:
            case MySqlParser.ST_SRID:
            case MySqlParser.ST_STARTPOINT:
            case MySqlParser.ST_SYMDIFFERENCE:
            case MySqlParser.ST_TOUCHES:
            case MySqlParser.ST_UNION:
            case MySqlParser.ST_WITHIN:
            case MySqlParser.ST_X:
            case MySqlParser.ST_Y:
            case MySqlParser.SUBDATE:
            case MySqlParser.SUBSTRING_INDEX:
            case MySqlParser.SUBTIME:
            case MySqlParser.SYSTEM_USER:
            case MySqlParser.TAN:
            case MySqlParser.TIMEDIFF:
            case MySqlParser.TIMESTAMPADD:
            case MySqlParser.TIMESTAMPDIFF:
            case MySqlParser.TIME_FORMAT:
            case MySqlParser.TIME_TO_SEC:
            case MySqlParser.TOUCHES:
            case MySqlParser.TO_BASE64:
            case MySqlParser.TO_DAYS:
            case MySqlParser.TO_SECONDS:
            case MySqlParser.TP_CONNECTION_ADMIN:
            case MySqlParser.UCASE:
            case MySqlParser.UNCOMPRESS:
            case MySqlParser.UNCOMPRESSED_LENGTH:
            case MySqlParser.UNHEX:
            case MySqlParser.UNIX_TIMESTAMP:
            case MySqlParser.UPDATEXML:
            case MySqlParser.UPPER:
            case MySqlParser.UUID:
            case MySqlParser.UUID_SHORT:
            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
            case MySqlParser.VERSION:
            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySqlParser.WEEKDAY:
            case MySqlParser.WEEKOFYEAR:
            case MySqlParser.WEIGHT_STRING:
            case MySqlParser.WITHIN:
            case MySqlParser.YEARWEEK:
            case MySqlParser.Y_FUNCTION:
            case MySqlParser.X_FUNCTION:
            case MySqlParser.MOD:
            case MySqlParser.AT_SIGN:
            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySqlParser.STRING_LITERAL:
            case MySqlParser.ID:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5895;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 854, this.context) ) {
                case 1:
                    {
                    this.state = 5892;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1137) {
                        {
                        this.state = 5890;
                        this.match(MySqlParser.AT_SIGN);
                        this.state = 5891;
                        this.match(MySqlParser.AT_SIGN);
                        }
                    }

                    this.state = 5894;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 439 || _la === 474 || _la === 609)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 5897;
                this.uid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCommonEntity(): ShowCommonEntityContext {
        let localContext = new ShowCommonEntityContext(this.context, this.state);
        this.enterRule(localContext, 492, MySqlParser.RULE_showCommonEntity);
        let _la: number;
        try {
            this.state = 5913;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.CHARACTER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5900;
                this.match(MySqlParser.CHARACTER);
                this.state = 5901;
                this.match(MySqlParser.SET);
                }
                break;
            case MySqlParser.COLLATION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5902;
                this.match(MySqlParser.COLLATION);
                }
                break;
            case MySqlParser.DATABASES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5903;
                this.match(MySqlParser.DATABASES);
                }
                break;
            case MySqlParser.SCHEMAS:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5904;
                this.match(MySqlParser.SCHEMAS);
                }
                break;
            case MySqlParser.FUNCTION:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5905;
                this.match(MySqlParser.FUNCTION);
                this.state = 5906;
                this.match(MySqlParser.STATUS);
                }
                break;
            case MySqlParser.PROCEDURE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5907;
                this.match(MySqlParser.PROCEDURE);
                this.state = 5908;
                this.match(MySqlParser.STATUS);
                }
                break;
            case MySqlParser.GLOBAL:
            case MySqlParser.SESSION:
            case MySqlParser.STATUS:
            case MySqlParser.VARIABLES:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 439 || _la === 609) {
                    {
                    this.state = 5909;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 439 || _la === 609)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 5912;
                _la = this.tokenStream.LA(1);
                if(!(_la === 634 || _la === 670)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showFilter(): ShowFilterContext {
        let localContext = new ShowFilterContext(this.context, this.state);
        this.enterRule(localContext, 494, MySqlParser.RULE_showFilter);
        try {
            this.state = 5919;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.LIKE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5915;
                this.match(MySqlParser.LIKE);
                this.state = 5916;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.WHERE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5917;
                this.match(MySqlParser.WHERE);
                this.state = 5918;
                this.expression(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showGlobalInfoClause(): ShowGlobalInfoClauseContext {
        let localContext = new ShowGlobalInfoClauseContext(this.context, this.state);
        this.enterRule(localContext, 496, MySqlParser.RULE_showGlobalInfoClause);
        let _la: number;
        try {
            this.state = 5938;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ENGINES:
            case MySqlParser.STORAGE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5922;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 636) {
                    {
                    this.state = 5921;
                    this.match(MySqlParser.STORAGE);
                    }
                }

                this.state = 5924;
                this.match(MySqlParser.ENGINES);
                }
                break;
            case MySqlParser.MASTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5925;
                this.match(MySqlParser.MASTER);
                this.state = 5926;
                this.match(MySqlParser.STATUS);
                }
                break;
            case MySqlParser.PLUGINS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5927;
                this.match(MySqlParser.PLUGINS);
                }
                break;
            case MySqlParser.PRIVILEGES:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5928;
                this.match(MySqlParser.PRIVILEGES);
                }
                break;
            case MySqlParser.FULL:
            case MySqlParser.PROCESSLIST:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5930;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 436) {
                    {
                    this.state = 5929;
                    this.match(MySqlParser.FULL);
                    }
                }

                this.state = 5932;
                this.match(MySqlParser.PROCESSLIST);
                }
                break;
            case MySqlParser.PROFILES:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5933;
                this.match(MySqlParser.PROFILES);
                }
                break;
            case MySqlParser.SLAVE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5934;
                this.match(MySqlParser.SLAVE);
                this.state = 5935;
                this.match(MySqlParser.HOSTS);
                }
                break;
            case MySqlParser.AUTHORS:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5936;
                this.match(MySqlParser.AUTHORS);
                }
                break;
            case MySqlParser.CONTRIBUTORS:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5937;
                this.match(MySqlParser.CONTRIBUTORS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showSchemaEntity(): ShowSchemaEntityContext {
        let localContext = new ShowSchemaEntityContext(this.context, this.state);
        this.enterRule(localContext, 498, MySqlParser.RULE_showSchemaEntity);
        let _la: number;
        try {
            this.state = 5948;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.EVENTS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5940;
                this.match(MySqlParser.EVENTS);
                }
                break;
            case MySqlParser.TABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5941;
                this.match(MySqlParser.TABLE);
                this.state = 5942;
                this.match(MySqlParser.STATUS);
                }
                break;
            case MySqlParser.FULL:
            case MySqlParser.TABLES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5944;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 436) {
                    {
                    this.state = 5943;
                    this.match(MySqlParser.FULL);
                    }
                }

                this.state = 5946;
                this.match(MySqlParser.TABLES);
                }
                break;
            case MySqlParser.TRIGGERS:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5947;
                this.match(MySqlParser.TRIGGERS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showProfileType(): ShowProfileTypeContext {
        let localContext = new ShowProfileTypeContext(this.context, this.state);
        this.enterRule(localContext, 500, MySqlParser.RULE_showProfileType);
        try {
            this.state = 5962;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5950;
                this.match(MySqlParser.ALL);
                }
                break;
            case MySqlParser.BLOCK:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5951;
                this.match(MySqlParser.BLOCK);
                this.state = 5952;
                this.match(MySqlParser.IO);
                }
                break;
            case MySqlParser.CONTEXT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5953;
                this.match(MySqlParser.CONTEXT);
                this.state = 5954;
                this.match(MySqlParser.SWITCHES);
                }
                break;
            case MySqlParser.CPU:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5955;
                this.match(MySqlParser.CPU);
                }
                break;
            case MySqlParser.IPC:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5956;
                this.match(MySqlParser.IPC);
                }
                break;
            case MySqlParser.MEMORY:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5957;
                this.match(MySqlParser.MEMORY);
                }
                break;
            case MySqlParser.PAGE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5958;
                this.match(MySqlParser.PAGE);
                this.state = 5959;
                this.match(MySqlParser.FAULTS);
                }
                break;
            case MySqlParser.SOURCE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5960;
                this.match(MySqlParser.SOURCE);
                }
                break;
            case MySqlParser.SWAPS:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5961;
                this.match(MySqlParser.SWAPS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public binlogStatement(): BinlogStatementContext {
        let localContext = new BinlogStatementContext(this.context, this.state);
        this.enterRule(localContext, 502, MySqlParser.RULE_binlogStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5964;
            this.match(MySqlParser.BINLOG);
            this.state = 5965;
            this.match(MySqlParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cacheIndexStatement(): CacheIndexStatementContext {
        let localContext = new CacheIndexStatementContext(this.context, this.state);
        this.enterRule(localContext, 504, MySqlParser.RULE_cacheIndexStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5967;
            this.match(MySqlParser.CACHE);
            this.state = 5968;
            this.match(MySqlParser.INDEX);
            this.state = 5969;
            this.tableIndexes();
            this.state = 5974;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 5970;
                this.match(MySqlParser.COMMA);
                this.state = 5971;
                this.tableIndexes();
                }
                }
                this.state = 5976;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5984;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 5977;
                this.match(MySqlParser.PARTITION);
                this.state = 5978;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 5981;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ARRAY:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.BUCKETS:
                case MySqlParser.CONDITION:
                case MySqlParser.CURRENT:
                case MySqlParser.CURRENT_USER:
                case MySqlParser.DATABASE:
                case MySqlParser.DEFAULT:
                case MySqlParser.DIAGNOSTICS:
                case MySqlParser.EMPTY:
                case MySqlParser.ENFORCED:
                case MySqlParser.EXCEPT:
                case MySqlParser.GROUP:
                case MySqlParser.IF:
                case MySqlParser.IGNORED:
                case MySqlParser.INSERT:
                case MySqlParser.LATERAL:
                case MySqlParser.LEFT:
                case MySqlParser.NUMBER:
                case MySqlParser.OPTIONAL:
                case MySqlParser.ORDER:
                case MySqlParser.PRIMARY:
                case MySqlParser.REPEAT:
                case MySqlParser.REPLACE:
                case MySqlParser.RIGHT:
                case MySqlParser.SCHEMA:
                case MySqlParser.SKIP_QUERY_REWRITE:
                case MySqlParser.STACKED:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.BINARY:
                case MySqlParser.TEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.JSON_ARRAY:
                case MySqlParser.JSON_ARRAYAGG:
                case MySqlParser.JSON_ARRAY_APPEND:
                case MySqlParser.JSON_ARRAY_INSERT:
                case MySqlParser.JSON_CONTAINS:
                case MySqlParser.JSON_CONTAINS_PATH:
                case MySqlParser.JSON_DEPTH:
                case MySqlParser.JSON_EXTRACT:
                case MySqlParser.JSON_INSERT:
                case MySqlParser.JSON_KEYS:
                case MySqlParser.JSON_LENGTH:
                case MySqlParser.JSON_MERGE:
                case MySqlParser.JSON_MERGE_PATCH:
                case MySqlParser.JSON_MERGE_PRESERVE:
                case MySqlParser.JSON_OBJECT:
                case MySqlParser.JSON_OBJECTAGG:
                case MySqlParser.JSON_OVERLAPS:
                case MySqlParser.JSON_PRETTY:
                case MySqlParser.JSON_QUOTE:
                case MySqlParser.JSON_REMOVE:
                case MySqlParser.JSON_REPLACE:
                case MySqlParser.JSON_SCHEMA_VALID:
                case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
                case MySqlParser.JSON_SEARCH:
                case MySqlParser.JSON_SET:
                case MySqlParser.JSON_STORAGE_FREE:
                case MySqlParser.JSON_STORAGE_SIZE:
                case MySqlParser.JSON_TABLE:
                case MySqlParser.JSON_TYPE:
                case MySqlParser.JSON_UNQUOTE:
                case MySqlParser.JSON_VALID:
                case MySqlParser.JSON_VALUE:
                case MySqlParser.NESTED:
                case MySqlParser.ORDINALITY:
                case MySqlParser.PATH:
                case MySqlParser.AVG:
                case MySqlParser.BIT_AND:
                case MySqlParser.BIT_OR:
                case MySqlParser.BIT_XOR:
                case MySqlParser.COUNT:
                case MySqlParser.CUME_DIST:
                case MySqlParser.DENSE_RANK:
                case MySqlParser.FIRST_VALUE:
                case MySqlParser.GROUP_CONCAT:
                case MySqlParser.LAG:
                case MySqlParser.LAST_VALUE:
                case MySqlParser.LEAD:
                case MySqlParser.MAX:
                case MySqlParser.MIN:
                case MySqlParser.NTILE:
                case MySqlParser.NTH_VALUE:
                case MySqlParser.PERCENT_RANK:
                case MySqlParser.RANK:
                case MySqlParser.ROW_NUMBER:
                case MySqlParser.STD:
                case MySqlParser.STDDEV:
                case MySqlParser.STDDEV_POP:
                case MySqlParser.STDDEV_SAMP:
                case MySqlParser.SUM:
                case MySqlParser.VAR_POP:
                case MySqlParser.VAR_SAMP:
                case MySqlParser.VARIANCE:
                case MySqlParser.CURRENT_DATE:
                case MySqlParser.CURRENT_TIME:
                case MySqlParser.CURRENT_TIMESTAMP:
                case MySqlParser.LOCALTIME:
                case MySqlParser.CURDATE:
                case MySqlParser.CURTIME:
                case MySqlParser.DATE_ADD:
                case MySqlParser.DATE_SUB:
                case MySqlParser.LOCALTIMESTAMP:
                case MySqlParser.NOW:
                case MySqlParser.POSITION:
                case MySqlParser.SUBSTR:
                case MySqlParser.SUBSTRING:
                case MySqlParser.SYSDATE:
                case MySqlParser.TRIM:
                case MySqlParser.UTC_DATE:
                case MySqlParser.UTC_TIME:
                case MySqlParser.UTC_TIMESTAMP:
                case MySqlParser.ACCOUNT:
                case MySqlParser.ACTION:
                case MySqlParser.AFTER:
                case MySqlParser.AGGREGATE:
                case MySqlParser.ALGORITHM:
                case MySqlParser.ANY:
                case MySqlParser.AT:
                case MySqlParser.AUTHORS:
                case MySqlParser.AUTOCOMMIT:
                case MySqlParser.AUTOEXTEND_SIZE:
                case MySqlParser.AUTO_INCREMENT:
                case MySqlParser.AVG_ROW_LENGTH:
                case MySqlParser.BEGIN:
                case MySqlParser.BINLOG:
                case MySqlParser.BIT:
                case MySqlParser.BLOCK:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.BTREE:
                case MySqlParser.CACHE:
                case MySqlParser.CASCADED:
                case MySqlParser.CHAIN:
                case MySqlParser.CHANGED:
                case MySqlParser.CHANNEL:
                case MySqlParser.CHECKSUM:
                case MySqlParser.PAGE_CHECKSUM:
                case MySqlParser.CIPHER:
                case MySqlParser.CLASS_ORIGIN:
                case MySqlParser.CLIENT:
                case MySqlParser.CLOSE:
                case MySqlParser.CLUSTERING:
                case MySqlParser.COALESCE:
                case MySqlParser.CODE:
                case MySqlParser.COLUMNS:
                case MySqlParser.COLUMN_FORMAT:
                case MySqlParser.COLUMN_NAME:
                case MySqlParser.COMMENT:
                case MySqlParser.COMMIT:
                case MySqlParser.COMPACT:
                case MySqlParser.COMPLETION:
                case MySqlParser.COMPRESSED:
                case MySqlParser.COMPRESSION:
                case MySqlParser.CONCURRENT:
                case MySqlParser.CONNECT:
                case MySqlParser.CONNECTION:
                case MySqlParser.CONSISTENT:
                case MySqlParser.CONSTRAINT_CATALOG:
                case MySqlParser.CONSTRAINT_SCHEMA:
                case MySqlParser.CONSTRAINT_NAME:
                case MySqlParser.CONTAINS:
                case MySqlParser.CONTEXT:
                case MySqlParser.CONTRIBUTORS:
                case MySqlParser.COPY:
                case MySqlParser.CPU:
                case MySqlParser.CURSOR_NAME:
                case MySqlParser.DATA:
                case MySqlParser.DATAFILE:
                case MySqlParser.DEALLOCATE:
                case MySqlParser.DEFAULT_AUTH:
                case MySqlParser.DEFINER:
                case MySqlParser.DELAY_KEY_WRITE:
                case MySqlParser.DES_KEY_FILE:
                case MySqlParser.DIRECTORY:
                case MySqlParser.DISABLE:
                case MySqlParser.DISCARD:
                case MySqlParser.DISK:
                case MySqlParser.DO:
                case MySqlParser.DUMPFILE:
                case MySqlParser.DUPLICATE:
                case MySqlParser.DYNAMIC:
                case MySqlParser.ENABLE:
                case MySqlParser.ENCRYPTION:
                case MySqlParser.END:
                case MySqlParser.ENDS:
                case MySqlParser.ENGINE:
                case MySqlParser.ENGINES:
                case MySqlParser.ERROR:
                case MySqlParser.ERRORS:
                case MySqlParser.ESCAPE:
                case MySqlParser.EVEN:
                case MySqlParser.EVENT:
                case MySqlParser.EVENTS:
                case MySqlParser.EVERY:
                case MySqlParser.EXCHANGE:
                case MySqlParser.EXCLUSIVE:
                case MySqlParser.EXPIRE:
                case MySqlParser.EXPORT:
                case MySqlParser.EXTENDED:
                case MySqlParser.EXTENT_SIZE:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.FAST:
                case MySqlParser.FAULTS:
                case MySqlParser.FIELDS:
                case MySqlParser.FILE_BLOCK_SIZE:
                case MySqlParser.FILTER:
                case MySqlParser.FIRST:
                case MySqlParser.FIXED:
                case MySqlParser.FLUSH:
                case MySqlParser.FOLLOWS:
                case MySqlParser.FOUND:
                case MySqlParser.FULL:
                case MySqlParser.FUNCTION:
                case MySqlParser.GENERAL:
                case MySqlParser.GLOBAL:
                case MySqlParser.GRANTS:
                case MySqlParser.GROUP_REPLICATION:
                case MySqlParser.HANDLER:
                case MySqlParser.HASH:
                case MySqlParser.HELP:
                case MySqlParser.HISTORY:
                case MySqlParser.HOST:
                case MySqlParser.HOSTS:
                case MySqlParser.IDENTIFIED:
                case MySqlParser.IGNORE_SERVER_IDS:
                case MySqlParser.IMPORT:
                case MySqlParser.INDEXES:
                case MySqlParser.INITIAL_SIZE:
                case MySqlParser.INPLACE:
                case MySqlParser.INSERT_METHOD:
                case MySqlParser.INSTALL:
                case MySqlParser.INSTANCE:
                case MySqlParser.INSTANT:
                case MySqlParser.INVISIBLE:
                case MySqlParser.INVOKER:
                case MySqlParser.IO:
                case MySqlParser.IO_THREAD:
                case MySqlParser.IPC:
                case MySqlParser.ISOLATION:
                case MySqlParser.ISSUER:
                case MySqlParser.JSON:
                case MySqlParser.KEY_BLOCK_SIZE:
                case MySqlParser.LANGUAGE:
                case MySqlParser.LAST:
                case MySqlParser.LEAVES:
                case MySqlParser.LESS:
                case MySqlParser.LEVEL:
                case MySqlParser.LIST:
                case MySqlParser.LOCAL:
                case MySqlParser.LOGFILE:
                case MySqlParser.LOGS:
                case MySqlParser.MASTER:
                case MySqlParser.MASTER_AUTO_POSITION:
                case MySqlParser.MASTER_CONNECT_RETRY:
                case MySqlParser.MASTER_DELAY:
                case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                case MySqlParser.MASTER_HOST:
                case MySqlParser.MASTER_LOG_FILE:
                case MySqlParser.MASTER_LOG_POS:
                case MySqlParser.MASTER_PASSWORD:
                case MySqlParser.MASTER_PORT:
                case MySqlParser.MASTER_RETRY_COUNT:
                case MySqlParser.MASTER_SSL:
                case MySqlParser.MASTER_SSL_CA:
                case MySqlParser.MASTER_SSL_CAPATH:
                case MySqlParser.MASTER_SSL_CERT:
                case MySqlParser.MASTER_SSL_CIPHER:
                case MySqlParser.MASTER_SSL_CRL:
                case MySqlParser.MASTER_SSL_CRLPATH:
                case MySqlParser.MASTER_SSL_KEY:
                case MySqlParser.MASTER_TLS_VERSION:
                case MySqlParser.MASTER_USER:
                case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                case MySqlParser.MAX_QUERIES_PER_HOUR:
                case MySqlParser.MAX_ROWS:
                case MySqlParser.MAX_SIZE:
                case MySqlParser.MAX_UPDATES_PER_HOUR:
                case MySqlParser.MAX_USER_CONNECTIONS:
                case MySqlParser.MEDIUM:
                case MySqlParser.MEMBER:
                case MySqlParser.MERGE:
                case MySqlParser.MESSAGE_TEXT:
                case MySqlParser.MID:
                case MySqlParser.MIGRATE:
                case MySqlParser.MIN_ROWS:
                case MySqlParser.MODE:
                case MySqlParser.MODIFY:
                case MySqlParser.MUTEX:
                case MySqlParser.MYSQL:
                case MySqlParser.MYSQL_ERRNO:
                case MySqlParser.NAME:
                case MySqlParser.NAMES:
                case MySqlParser.NCHAR:
                case MySqlParser.NEVER:
                case MySqlParser.NEXT:
                case MySqlParser.NO:
                case MySqlParser.NOCOPY:
                case MySqlParser.NOWAIT:
                case MySqlParser.NODEGROUP:
                case MySqlParser.NONE:
                case MySqlParser.ODBC:
                case MySqlParser.OFFLINE:
                case MySqlParser.OFFSET:
                case MySqlParser.OF:
                case MySqlParser.OJ:
                case MySqlParser.OLD_PASSWORD:
                case MySqlParser.ONE:
                case MySqlParser.ONLINE:
                case MySqlParser.ONLY:
                case MySqlParser.OPEN:
                case MySqlParser.OPTIMIZER_COSTS:
                case MySqlParser.OPTIONS:
                case MySqlParser.OWNER:
                case MySqlParser.PACK_KEYS:
                case MySqlParser.PAGE:
                case MySqlParser.PARSER:
                case MySqlParser.PARTIAL:
                case MySqlParser.PARTITIONING:
                case MySqlParser.PARTITIONS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.PHASE:
                case MySqlParser.PLUGIN:
                case MySqlParser.PLUGIN_DIR:
                case MySqlParser.PLUGINS:
                case MySqlParser.PORT:
                case MySqlParser.PRECEDES:
                case MySqlParser.PREPARE:
                case MySqlParser.PRESERVE:
                case MySqlParser.PREV:
                case MySqlParser.PROCESSLIST:
                case MySqlParser.PROFILE:
                case MySqlParser.PROFILES:
                case MySqlParser.PROXY:
                case MySqlParser.QUERY:
                case MySqlParser.QUICK:
                case MySqlParser.REBUILD:
                case MySqlParser.RECOVER:
                case MySqlParser.RECURSIVE:
                case MySqlParser.REDO_BUFFER_SIZE:
                case MySqlParser.REDUNDANT:
                case MySqlParser.RELAY:
                case MySqlParser.RELAY_LOG_FILE:
                case MySqlParser.RELAY_LOG_POS:
                case MySqlParser.RELAYLOG:
                case MySqlParser.REMOVE:
                case MySqlParser.REORGANIZE:
                case MySqlParser.REPAIR:
                case MySqlParser.REPLICATE_DO_DB:
                case MySqlParser.REPLICATE_DO_TABLE:
                case MySqlParser.REPLICATE_IGNORE_DB:
                case MySqlParser.REPLICATE_IGNORE_TABLE:
                case MySqlParser.REPLICATE_REWRITE_DB:
                case MySqlParser.REPLICATE_WILD_DO_TABLE:
                case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                case MySqlParser.REPLICATION:
                case MySqlParser.RESET:
                case MySqlParser.RESUME:
                case MySqlParser.RETURNED_SQLSTATE:
                case MySqlParser.RETURNS:
                case MySqlParser.REUSE:
                case MySqlParser.ROLE:
                case MySqlParser.ROLLBACK:
                case MySqlParser.ROLLUP:
                case MySqlParser.ROTATE:
                case MySqlParser.ROW:
                case MySqlParser.ROWS:
                case MySqlParser.ROW_FORMAT:
                case MySqlParser.RTREE:
                case MySqlParser.SAVEPOINT:
                case MySqlParser.SCHEDULE:
                case MySqlParser.SECURITY:
                case MySqlParser.SERVER:
                case MySqlParser.SESSION:
                case MySqlParser.SHARE:
                case MySqlParser.SHARED:
                case MySqlParser.SIGNED:
                case MySqlParser.SIMPLE:
                case MySqlParser.SLAVE:
                case MySqlParser.SLOW:
                case MySqlParser.SNAPSHOT:
                case MySqlParser.SOCKET:
                case MySqlParser.SOME:
                case MySqlParser.SONAME:
                case MySqlParser.SOUNDS:
                case MySqlParser.SOURCE:
                case MySqlParser.SQL_AFTER_GTIDS:
                case MySqlParser.SQL_AFTER_MTS_GAPS:
                case MySqlParser.SQL_BEFORE_GTIDS:
                case MySqlParser.SQL_BUFFER_RESULT:
                case MySqlParser.SQL_CACHE:
                case MySqlParser.SQL_NO_CACHE:
                case MySqlParser.SQL_THREAD:
                case MySqlParser.START:
                case MySqlParser.STARTS:
                case MySqlParser.STATS_AUTO_RECALC:
                case MySqlParser.STATS_PERSISTENT:
                case MySqlParser.STATS_SAMPLE_PAGES:
                case MySqlParser.STATUS:
                case MySqlParser.STOP:
                case MySqlParser.STORAGE:
                case MySqlParser.STRING:
                case MySqlParser.SUBCLASS_ORIGIN:
                case MySqlParser.SUBJECT:
                case MySqlParser.SUBPARTITION:
                case MySqlParser.SUBPARTITIONS:
                case MySqlParser.SUSPEND:
                case MySqlParser.SWAPS:
                case MySqlParser.SWITCHES:
                case MySqlParser.TABLE_NAME:
                case MySqlParser.TABLESPACE:
                case MySqlParser.TABLE_TYPE:
                case MySqlParser.TEMPORARY:
                case MySqlParser.TEMPTABLE:
                case MySqlParser.THAN:
                case MySqlParser.TRADITIONAL:
                case MySqlParser.TRANSACTION:
                case MySqlParser.TRANSACTIONAL:
                case MySqlParser.TRIGGERS:
                case MySqlParser.TRUNCATE:
                case MySqlParser.UNBOUNDED:
                case MySqlParser.UNDEFINED:
                case MySqlParser.UNDOFILE:
                case MySqlParser.UNDO_BUFFER_SIZE:
                case MySqlParser.UNINSTALL:
                case MySqlParser.UNKNOWN:
                case MySqlParser.UNTIL:
                case MySqlParser.UPGRADE:
                case MySqlParser.USER:
                case MySqlParser.USE_FRM:
                case MySqlParser.USER_RESOURCES:
                case MySqlParser.VALIDATION:
                case MySqlParser.VALUE:
                case MySqlParser.VARIABLES:
                case MySqlParser.VIEW:
                case MySqlParser.VIRTUAL:
                case MySqlParser.VISIBLE:
                case MySqlParser.WAIT:
                case MySqlParser.WARNINGS:
                case MySqlParser.WITHOUT:
                case MySqlParser.WORK:
                case MySqlParser.WRAPPER:
                case MySqlParser.X509:
                case MySqlParser.XA:
                case MySqlParser.XML:
                case MySqlParser.EUR:
                case MySqlParser.USA:
                case MySqlParser.JIS:
                case MySqlParser.ISO:
                case MySqlParser.INTERNAL:
                case MySqlParser.QUARTER:
                case MySqlParser.MONTH:
                case MySqlParser.DAY:
                case MySqlParser.HOUR:
                case MySqlParser.MINUTE:
                case MySqlParser.WEEK:
                case MySqlParser.SECOND:
                case MySqlParser.MICROSECOND:
                case MySqlParser.ADMIN:
                case MySqlParser.AUDIT_ABORT_EXEMPT:
                case MySqlParser.AUDIT_ADMIN:
                case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
                case MySqlParser.BACKUP_ADMIN:
                case MySqlParser.BINLOG_ADMIN:
                case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
                case MySqlParser.CLONE_ADMIN:
                case MySqlParser.CONNECTION_ADMIN:
                case MySqlParser.ENCRYPTION_KEY_ADMIN:
                case MySqlParser.EXECUTE:
                case MySqlParser.FILE:
                case MySqlParser.FIREWALL_ADMIN:
                case MySqlParser.FIREWALL_EXEMPT:
                case MySqlParser.FIREWALL_USER:
                case MySqlParser.GROUP_REPLICATION_ADMIN:
                case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
                case MySqlParser.INVOKE:
                case MySqlParser.LAMBDA:
                case MySqlParser.NDB_STORED_USER:
                case MySqlParser.PASSWORDLESS_USER_ADMIN:
                case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
                case MySqlParser.PRIVILEGES:
                case MySqlParser.PROCESS:
                case MySqlParser.RELOAD:
                case MySqlParser.REPLICATION_APPLIER:
                case MySqlParser.REPLICATION_SLAVE_ADMIN:
                case MySqlParser.RESOURCE_GROUP_ADMIN:
                case MySqlParser.RESOURCE_GROUP_USER:
                case MySqlParser.ROLE_ADMIN:
                case MySqlParser.ROUTINE:
                case MySqlParser.S3:
                case MySqlParser.SESSION_VARIABLES_ADMIN:
                case MySqlParser.SET_USER_ID:
                case MySqlParser.SHOW_ROUTINE:
                case MySqlParser.SHUTDOWN:
                case MySqlParser.SUPER:
                case MySqlParser.SYSTEM_VARIABLES_ADMIN:
                case MySqlParser.TABLES:
                case MySqlParser.TABLE_ENCRYPTION_ADMIN:
                case MySqlParser.VERSION_TOKEN_ADMIN:
                case MySqlParser.XA_RECOVER_ADMIN:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.ARCHIVE:
                case MySqlParser.BLACKHOLE:
                case MySqlParser.CSV:
                case MySqlParser.FEDERATED:
                case MySqlParser.INNODB:
                case MySqlParser.MEMORY:
                case MySqlParser.MRG_MYISAM:
                case MySqlParser.MYISAM:
                case MySqlParser.NDB:
                case MySqlParser.NDBCLUSTER:
                case MySqlParser.PERFORMANCE_SCHEMA:
                case MySqlParser.TOKUDB:
                case MySqlParser.REPEATABLE:
                case MySqlParser.COMMITTED:
                case MySqlParser.UNCOMMITTED:
                case MySqlParser.SERIALIZABLE:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                case MySqlParser.ABS:
                case MySqlParser.ACOS:
                case MySqlParser.ADDDATE:
                case MySqlParser.ADDTIME:
                case MySqlParser.AES_DECRYPT:
                case MySqlParser.AES_ENCRYPT:
                case MySqlParser.AREA:
                case MySqlParser.ASBINARY:
                case MySqlParser.ASIN:
                case MySqlParser.ASTEXT:
                case MySqlParser.ASWKB:
                case MySqlParser.ASWKT:
                case MySqlParser.ASYMMETRIC_DECRYPT:
                case MySqlParser.ASYMMETRIC_DERIVE:
                case MySqlParser.ASYMMETRIC_ENCRYPT:
                case MySqlParser.ASYMMETRIC_SIGN:
                case MySqlParser.ASYMMETRIC_VERIFY:
                case MySqlParser.ATAN:
                case MySqlParser.ATAN2:
                case MySqlParser.BENCHMARK:
                case MySqlParser.BIN:
                case MySqlParser.BIT_COUNT:
                case MySqlParser.BIT_LENGTH:
                case MySqlParser.BUFFER:
                case MySqlParser.CATALOG_NAME:
                case MySqlParser.CEIL:
                case MySqlParser.CEILING:
                case MySqlParser.CENTROID:
                case MySqlParser.CHARACTER_LENGTH:
                case MySqlParser.CHARSET:
                case MySqlParser.CHAR_LENGTH:
                case MySqlParser.COERCIBILITY:
                case MySqlParser.COLLATION:
                case MySqlParser.COMPRESS:
                case MySqlParser.CONCAT:
                case MySqlParser.CONCAT_WS:
                case MySqlParser.CONNECTION_ID:
                case MySqlParser.CONV:
                case MySqlParser.CONVERT_TZ:
                case MySqlParser.COS:
                case MySqlParser.COT:
                case MySqlParser.CRC32:
                case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
                case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
                case MySqlParser.CREATE_DH_PARAMETERS:
                case MySqlParser.CREATE_DIGEST:
                case MySqlParser.CROSSES:
                case MySqlParser.DATEDIFF:
                case MySqlParser.DATE_FORMAT:
                case MySqlParser.DAYNAME:
                case MySqlParser.DAYOFMONTH:
                case MySqlParser.DAYOFWEEK:
                case MySqlParser.DAYOFYEAR:
                case MySqlParser.DECODE:
                case MySqlParser.DEGREES:
                case MySqlParser.DES_DECRYPT:
                case MySqlParser.DES_ENCRYPT:
                case MySqlParser.DIMENSION:
                case MySqlParser.DISJOINT:
                case MySqlParser.ELT:
                case MySqlParser.ENCODE:
                case MySqlParser.ENCRYPT:
                case MySqlParser.ENDPOINT:
                case MySqlParser.ENGINE_ATTRIBUTE:
                case MySqlParser.ENVELOPE:
                case MySqlParser.EQUALS:
                case MySqlParser.EXP:
                case MySqlParser.EXPORT_SET:
                case MySqlParser.EXTERIORRING:
                case MySqlParser.EXTRACTVALUE:
                case MySqlParser.FIELD:
                case MySqlParser.FIND_IN_SET:
                case MySqlParser.FLOOR:
                case MySqlParser.FORMAT:
                case MySqlParser.FOUND_ROWS:
                case MySqlParser.FROM_BASE64:
                case MySqlParser.FROM_DAYS:
                case MySqlParser.FROM_UNIXTIME:
                case MySqlParser.GEOMCOLLFROMTEXT:
                case MySqlParser.GEOMCOLLFROMWKB:
                case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.GEOMETRYFROMTEXT:
                case MySqlParser.GEOMETRYFROMWKB:
                case MySqlParser.GEOMETRYN:
                case MySqlParser.GEOMETRYTYPE:
                case MySqlParser.GEOMFROMTEXT:
                case MySqlParser.GEOMFROMWKB:
                case MySqlParser.GET_FORMAT:
                case MySqlParser.GET_LOCK:
                case MySqlParser.GLENGTH:
                case MySqlParser.GREATEST:
                case MySqlParser.GTID_SUBSET:
                case MySqlParser.GTID_SUBTRACT:
                case MySqlParser.HEX:
                case MySqlParser.IFNULL:
                case MySqlParser.INET6_ATON:
                case MySqlParser.INET6_NTOA:
                case MySqlParser.INET_ATON:
                case MySqlParser.INET_NTOA:
                case MySqlParser.INSTR:
                case MySqlParser.INTERIORRINGN:
                case MySqlParser.INTERSECTS:
                case MySqlParser.ISCLOSED:
                case MySqlParser.ISEMPTY:
                case MySqlParser.ISNULL:
                case MySqlParser.ISSIMPLE:
                case MySqlParser.IS_FREE_LOCK:
                case MySqlParser.IS_IPV4:
                case MySqlParser.IS_IPV4_COMPAT:
                case MySqlParser.IS_IPV4_MAPPED:
                case MySqlParser.IS_IPV6:
                case MySqlParser.IS_USED_LOCK:
                case MySqlParser.LAST_INSERT_ID:
                case MySqlParser.LCASE:
                case MySqlParser.LEAST:
                case MySqlParser.LENGTH:
                case MySqlParser.LINEFROMTEXT:
                case MySqlParser.LINEFROMWKB:
                case MySqlParser.LINESTRINGFROMTEXT:
                case MySqlParser.LINESTRINGFROMWKB:
                case MySqlParser.LN:
                case MySqlParser.LOAD_FILE:
                case MySqlParser.LOCATE:
                case MySqlParser.LOG:
                case MySqlParser.LOG10:
                case MySqlParser.LOG2:
                case MySqlParser.LOWER:
                case MySqlParser.LPAD:
                case MySqlParser.LTRIM:
                case MySqlParser.MAKEDATE:
                case MySqlParser.MAKETIME:
                case MySqlParser.MAKE_SET:
                case MySqlParser.MASTER_POS_WAIT:
                case MySqlParser.MBRCONTAINS:
                case MySqlParser.MBRDISJOINT:
                case MySqlParser.MBREQUAL:
                case MySqlParser.MBRINTERSECTS:
                case MySqlParser.MBROVERLAPS:
                case MySqlParser.MBRTOUCHES:
                case MySqlParser.MBRWITHIN:
                case MySqlParser.MD5:
                case MySqlParser.MLINEFROMTEXT:
                case MySqlParser.MLINEFROMWKB:
                case MySqlParser.MONTHNAME:
                case MySqlParser.MPOINTFROMTEXT:
                case MySqlParser.MPOINTFROMWKB:
                case MySqlParser.MPOLYFROMTEXT:
                case MySqlParser.MPOLYFROMWKB:
                case MySqlParser.MULTILINESTRINGFROMTEXT:
                case MySqlParser.MULTILINESTRINGFROMWKB:
                case MySqlParser.MULTIPOINTFROMTEXT:
                case MySqlParser.MULTIPOINTFROMWKB:
                case MySqlParser.MULTIPOLYGONFROMTEXT:
                case MySqlParser.MULTIPOLYGONFROMWKB:
                case MySqlParser.NAME_CONST:
                case MySqlParser.NULLIF:
                case MySqlParser.NUMGEOMETRIES:
                case MySqlParser.NUMINTERIORRINGS:
                case MySqlParser.NUMPOINTS:
                case MySqlParser.OCT:
                case MySqlParser.OCTET_LENGTH:
                case MySqlParser.ORD:
                case MySqlParser.OVERLAPS:
                case MySqlParser.PERIOD_ADD:
                case MySqlParser.PERIOD_DIFF:
                case MySqlParser.PI:
                case MySqlParser.POINTFROMTEXT:
                case MySqlParser.POINTFROMWKB:
                case MySqlParser.POINTN:
                case MySqlParser.POLYFROMTEXT:
                case MySqlParser.POLYFROMWKB:
                case MySqlParser.POLYGONFROMTEXT:
                case MySqlParser.POLYGONFROMWKB:
                case MySqlParser.POW:
                case MySqlParser.POWER:
                case MySqlParser.QUOTE:
                case MySqlParser.RADIANS:
                case MySqlParser.RAND:
                case MySqlParser.RANDOM:
                case MySqlParser.RANDOM_BYTES:
                case MySqlParser.RELEASE_LOCK:
                case MySqlParser.REVERSE:
                case MySqlParser.ROUND:
                case MySqlParser.ROW_COUNT:
                case MySqlParser.RPAD:
                case MySqlParser.RTRIM:
                case MySqlParser.SEC_TO_TIME:
                case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                case MySqlParser.SESSION_USER:
                case MySqlParser.SHA:
                case MySqlParser.SHA1:
                case MySqlParser.SHA2:
                case MySqlParser.SCHEMA_NAME:
                case MySqlParser.SIGN:
                case MySqlParser.SIN:
                case MySqlParser.SLEEP:
                case MySqlParser.SOUNDEX:
                case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
                case MySqlParser.SQRT:
                case MySqlParser.SRID:
                case MySqlParser.STARTPOINT:
                case MySqlParser.STRCMP:
                case MySqlParser.STR_TO_DATE:
                case MySqlParser.ST_AREA:
                case MySqlParser.ST_ASBINARY:
                case MySqlParser.ST_ASTEXT:
                case MySqlParser.ST_ASWKB:
                case MySqlParser.ST_ASWKT:
                case MySqlParser.ST_BUFFER:
                case MySqlParser.ST_CENTROID:
                case MySqlParser.ST_CONTAINS:
                case MySqlParser.ST_CROSSES:
                case MySqlParser.ST_DIFFERENCE:
                case MySqlParser.ST_DIMENSION:
                case MySqlParser.ST_DISJOINT:
                case MySqlParser.ST_DISTANCE:
                case MySqlParser.ST_ENDPOINT:
                case MySqlParser.ST_ENVELOPE:
                case MySqlParser.ST_EQUALS:
                case MySqlParser.ST_EXTERIORRING:
                case MySqlParser.ST_GEOMCOLLFROMTEXT:
                case MySqlParser.ST_GEOMCOLLFROMTXT:
                case MySqlParser.ST_GEOMCOLLFROMWKB:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.ST_GEOMETRYFROMTEXT:
                case MySqlParser.ST_GEOMETRYFROMWKB:
                case MySqlParser.ST_GEOMETRYN:
                case MySqlParser.ST_GEOMETRYTYPE:
                case MySqlParser.ST_GEOMFROMTEXT:
                case MySqlParser.ST_GEOMFROMWKB:
                case MySqlParser.ST_INTERIORRINGN:
                case MySqlParser.ST_INTERSECTION:
                case MySqlParser.ST_INTERSECTS:
                case MySqlParser.ST_ISCLOSED:
                case MySqlParser.ST_ISEMPTY:
                case MySqlParser.ST_ISSIMPLE:
                case MySqlParser.ST_LINEFROMTEXT:
                case MySqlParser.ST_LINEFROMWKB:
                case MySqlParser.ST_LINESTRINGFROMTEXT:
                case MySqlParser.ST_LINESTRINGFROMWKB:
                case MySqlParser.ST_NUMGEOMETRIES:
                case MySqlParser.ST_NUMINTERIORRING:
                case MySqlParser.ST_NUMINTERIORRINGS:
                case MySqlParser.ST_NUMPOINTS:
                case MySqlParser.ST_OVERLAPS:
                case MySqlParser.ST_POINTFROMTEXT:
                case MySqlParser.ST_POINTFROMWKB:
                case MySqlParser.ST_POINTN:
                case MySqlParser.ST_POLYFROMTEXT:
                case MySqlParser.ST_POLYFROMWKB:
                case MySqlParser.ST_POLYGONFROMTEXT:
                case MySqlParser.ST_POLYGONFROMWKB:
                case MySqlParser.ST_SRID:
                case MySqlParser.ST_STARTPOINT:
                case MySqlParser.ST_SYMDIFFERENCE:
                case MySqlParser.ST_TOUCHES:
                case MySqlParser.ST_UNION:
                case MySqlParser.ST_WITHIN:
                case MySqlParser.ST_X:
                case MySqlParser.ST_Y:
                case MySqlParser.SUBDATE:
                case MySqlParser.SUBSTRING_INDEX:
                case MySqlParser.SUBTIME:
                case MySqlParser.SYSTEM_USER:
                case MySqlParser.TAN:
                case MySqlParser.TIMEDIFF:
                case MySqlParser.TIMESTAMPADD:
                case MySqlParser.TIMESTAMPDIFF:
                case MySqlParser.TIME_FORMAT:
                case MySqlParser.TIME_TO_SEC:
                case MySqlParser.TOUCHES:
                case MySqlParser.TO_BASE64:
                case MySqlParser.TO_DAYS:
                case MySqlParser.TO_SECONDS:
                case MySqlParser.TP_CONNECTION_ADMIN:
                case MySqlParser.UCASE:
                case MySqlParser.UNCOMPRESS:
                case MySqlParser.UNCOMPRESSED_LENGTH:
                case MySqlParser.UNHEX:
                case MySqlParser.UNIX_TIMESTAMP:
                case MySqlParser.UPDATEXML:
                case MySqlParser.UPPER:
                case MySqlParser.UUID:
                case MySqlParser.UUID_SHORT:
                case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
                case MySqlParser.VERSION:
                case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case MySqlParser.WEEKDAY:
                case MySqlParser.WEEKOFYEAR:
                case MySqlParser.WEIGHT_STRING:
                case MySqlParser.WITHIN:
                case MySqlParser.YEARWEEK:
                case MySqlParser.Y_FUNCTION:
                case MySqlParser.X_FUNCTION:
                case MySqlParser.MOD:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.ID:
                    {
                    this.state = 5979;
                    this.uidList();
                    }
                    break;
                case MySqlParser.ALL:
                    {
                    this.state = 5980;
                    this.match(MySqlParser.ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5983;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 5986;
            this.match(MySqlParser.IN);
            this.state = 5987;
            localContext._schema = this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flushStatement(): FlushStatementContext {
        let localContext = new FlushStatementContext(this.context, this.state);
        this.enterRule(localContext, 506, MySqlParser.RULE_flushStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5989;
            this.match(MySqlParser.FLUSH);
            this.state = 5991;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 115 || _la === 474) {
                {
                this.state = 5990;
                localContext._flushFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 115 || _la === 474)) {
                    localContext._flushFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 5993;
            this.flushOption();
            this.state = 5998;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 5994;
                this.match(MySqlParser.COMMA);
                this.state = 5995;
                this.flushOption();
                }
                }
                this.state = 6000;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public killStatement(): KillStatementContext {
        let localContext = new KillStatementContext(this.context, this.state);
        this.enterRule(localContext, 508, MySqlParser.RULE_killStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6001;
            this.match(MySqlParser.KILL);
            this.state = 6003;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 870, this.context) ) {
            case 1:
                {
                this.state = 6002;
                localContext._connectionFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 376 || _la === 567)) {
                    localContext._connectionFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 6005;
            this.expression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadIndexIntoCache(): LoadIndexIntoCacheContext {
        let localContext = new LoadIndexIntoCacheContext(this.context, this.state);
        this.enterRule(localContext, 510, MySqlParser.RULE_loadIndexIntoCache);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6007;
            this.match(MySqlParser.LOAD);
            this.state = 6008;
            this.match(MySqlParser.INDEX);
            this.state = 6009;
            this.match(MySqlParser.INTO);
            this.state = 6010;
            this.match(MySqlParser.CACHE);
            this.state = 6011;
            this.loadedTableIndexes();
            this.state = 6016;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 6012;
                this.match(MySqlParser.COMMA);
                this.state = 6013;
                this.loadedTableIndexes();
                }
                }
                this.state = 6018;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resetStatement(): ResetStatementContext {
        let localContext = new ResetStatementContext(this.context, this.state);
        this.enterRule(localContext, 512, MySqlParser.RULE_resetStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6019;
            this.match(MySqlParser.RESET);
            this.state = 6020;
            this.match(MySqlParser.QUERY);
            this.state = 6021;
            this.match(MySqlParser.CACHE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public shutdownStatement(): ShutdownStatementContext {
        let localContext = new ShutdownStatementContext(this.context, this.state);
        this.enterRule(localContext, 514, MySqlParser.RULE_shutdownStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6023;
            this.match(MySqlParser.SHUTDOWN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIndexes(): TableIndexesContext {
        let localContext = new TableIndexesContext(this.context, this.state);
        this.enterRule(localContext, 516, MySqlParser.RULE_tableIndexes);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6025;
            this.tableName();
            this.state = 6033;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81 || _la === 91 || _la === 1133) {
                {
                this.state = 6027;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81 || _la === 91) {
                    {
                    this.state = 6026;
                    localContext._indexFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 81 || _la === 91)) {
                        localContext._indexFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 6029;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6030;
                this.uidList();
                this.state = 6031;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flushOption(): FlushOptionContext {
        let localContext = new FlushOptionContext(this.context, this.state);
        this.enterRule(localContext, 518, MySqlParser.RULE_flushOption);
        let _la: number;
        try {
            this.state = 6067;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 880, this.context) ) {
            case 1:
                localContext = new SimpleFlushOptionContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6053;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.DES_KEY_FILE:
                    {
                    this.state = 6035;
                    this.match(MySqlParser.DES_KEY_FILE);
                    }
                    break;
                case MySqlParser.HOSTS:
                    {
                    this.state = 6036;
                    this.match(MySqlParser.HOSTS);
                    }
                    break;
                case MySqlParser.BINARY:
                case MySqlParser.ENGINE:
                case MySqlParser.ERROR:
                case MySqlParser.GENERAL:
                case MySqlParser.LOGS:
                case MySqlParser.RELAY:
                case MySqlParser.SLOW:
                    {
                    this.state = 6038;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 226 || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & 536870917) !== 0) || _la === 574 || _la === 615) {
                        {
                        this.state = 6037;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 226 || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & 536870917) !== 0) || _la === 574 || _la === 615)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 6040;
                    this.match(MySqlParser.LOGS);
                    }
                    break;
                case MySqlParser.OPTIMIZER_COSTS:
                    {
                    this.state = 6041;
                    this.match(MySqlParser.OPTIMIZER_COSTS);
                    }
                    break;
                case MySqlParser.PRIVILEGES:
                    {
                    this.state = 6042;
                    this.match(MySqlParser.PRIVILEGES);
                    }
                    break;
                case MySqlParser.QUERY:
                    {
                    this.state = 6043;
                    this.match(MySqlParser.QUERY);
                    this.state = 6044;
                    this.match(MySqlParser.CACHE);
                    }
                    break;
                case MySqlParser.STATUS:
                    {
                    this.state = 6045;
                    this.match(MySqlParser.STATUS);
                    }
                    break;
                case MySqlParser.USER_RESOURCES:
                    {
                    this.state = 6046;
                    this.match(MySqlParser.USER_RESOURCES);
                    }
                    break;
                case MySqlParser.TABLES:
                    {
                    this.state = 6047;
                    this.match(MySqlParser.TABLES);
                    this.state = 6051;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 192) {
                        {
                        this.state = 6048;
                        this.match(MySqlParser.WITH);
                        this.state = 6049;
                        this.match(MySqlParser.READ);
                        this.state = 6050;
                        this.match(MySqlParser.LOCK);
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                localContext = new ChannelFlushOptionContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6055;
                this.match(MySqlParser.RELAY);
                this.state = 6056;
                this.match(MySqlParser.LOGS);
                this.state = 6058;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 6057;
                    this.channelOption();
                    }
                }

                }
                break;
            case 3:
                localContext = new TableFlushOptionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6060;
                _la = this.tokenStream.LA(1);
                if(!(_la === 172 || _la === 742)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6062;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la === 1156) {
                    {
                    this.state = 6061;
                    this.tables();
                    }
                }

                this.state = 6065;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65 || _la === 192) {
                    {
                    this.state = 6064;
                    this.flushTableOption();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flushTableOption(): FlushTableOptionContext {
        let localContext = new FlushTableOptionContext(this.context, this.state);
        this.enterRule(localContext, 520, MySqlParser.RULE_flushTableOption);
        try {
            this.state = 6074;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.WITH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6069;
                this.match(MySqlParser.WITH);
                this.state = 6070;
                this.match(MySqlParser.READ);
                this.state = 6071;
                this.match(MySqlParser.LOCK);
                }
                break;
            case MySqlParser.FOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6072;
                this.match(MySqlParser.FOR);
                this.state = 6073;
                this.match(MySqlParser.EXPORT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadedTableIndexes(): LoadedTableIndexesContext {
        let localContext = new LoadedTableIndexesContext(this.context, this.state);
        this.enterRule(localContext, 522, MySqlParser.RULE_loadedTableIndexes);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6076;
            this.tableName();
            this.state = 6084;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 6077;
                this.match(MySqlParser.PARTITION);
                this.state = 6078;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6081;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ARRAY:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.BUCKETS:
                case MySqlParser.CONDITION:
                case MySqlParser.CURRENT:
                case MySqlParser.CURRENT_USER:
                case MySqlParser.DATABASE:
                case MySqlParser.DEFAULT:
                case MySqlParser.DIAGNOSTICS:
                case MySqlParser.EMPTY:
                case MySqlParser.ENFORCED:
                case MySqlParser.EXCEPT:
                case MySqlParser.GROUP:
                case MySqlParser.IF:
                case MySqlParser.IGNORED:
                case MySqlParser.INSERT:
                case MySqlParser.LATERAL:
                case MySqlParser.LEFT:
                case MySqlParser.NUMBER:
                case MySqlParser.OPTIONAL:
                case MySqlParser.ORDER:
                case MySqlParser.PRIMARY:
                case MySqlParser.REPEAT:
                case MySqlParser.REPLACE:
                case MySqlParser.RIGHT:
                case MySqlParser.SCHEMA:
                case MySqlParser.SKIP_QUERY_REWRITE:
                case MySqlParser.STACKED:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.BINARY:
                case MySqlParser.TEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.JSON_ARRAY:
                case MySqlParser.JSON_ARRAYAGG:
                case MySqlParser.JSON_ARRAY_APPEND:
                case MySqlParser.JSON_ARRAY_INSERT:
                case MySqlParser.JSON_CONTAINS:
                case MySqlParser.JSON_CONTAINS_PATH:
                case MySqlParser.JSON_DEPTH:
                case MySqlParser.JSON_EXTRACT:
                case MySqlParser.JSON_INSERT:
                case MySqlParser.JSON_KEYS:
                case MySqlParser.JSON_LENGTH:
                case MySqlParser.JSON_MERGE:
                case MySqlParser.JSON_MERGE_PATCH:
                case MySqlParser.JSON_MERGE_PRESERVE:
                case MySqlParser.JSON_OBJECT:
                case MySqlParser.JSON_OBJECTAGG:
                case MySqlParser.JSON_OVERLAPS:
                case MySqlParser.JSON_PRETTY:
                case MySqlParser.JSON_QUOTE:
                case MySqlParser.JSON_REMOVE:
                case MySqlParser.JSON_REPLACE:
                case MySqlParser.JSON_SCHEMA_VALID:
                case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
                case MySqlParser.JSON_SEARCH:
                case MySqlParser.JSON_SET:
                case MySqlParser.JSON_STORAGE_FREE:
                case MySqlParser.JSON_STORAGE_SIZE:
                case MySqlParser.JSON_TABLE:
                case MySqlParser.JSON_TYPE:
                case MySqlParser.JSON_UNQUOTE:
                case MySqlParser.JSON_VALID:
                case MySqlParser.JSON_VALUE:
                case MySqlParser.NESTED:
                case MySqlParser.ORDINALITY:
                case MySqlParser.PATH:
                case MySqlParser.AVG:
                case MySqlParser.BIT_AND:
                case MySqlParser.BIT_OR:
                case MySqlParser.BIT_XOR:
                case MySqlParser.COUNT:
                case MySqlParser.CUME_DIST:
                case MySqlParser.DENSE_RANK:
                case MySqlParser.FIRST_VALUE:
                case MySqlParser.GROUP_CONCAT:
                case MySqlParser.LAG:
                case MySqlParser.LAST_VALUE:
                case MySqlParser.LEAD:
                case MySqlParser.MAX:
                case MySqlParser.MIN:
                case MySqlParser.NTILE:
                case MySqlParser.NTH_VALUE:
                case MySqlParser.PERCENT_RANK:
                case MySqlParser.RANK:
                case MySqlParser.ROW_NUMBER:
                case MySqlParser.STD:
                case MySqlParser.STDDEV:
                case MySqlParser.STDDEV_POP:
                case MySqlParser.STDDEV_SAMP:
                case MySqlParser.SUM:
                case MySqlParser.VAR_POP:
                case MySqlParser.VAR_SAMP:
                case MySqlParser.VARIANCE:
                case MySqlParser.CURRENT_DATE:
                case MySqlParser.CURRENT_TIME:
                case MySqlParser.CURRENT_TIMESTAMP:
                case MySqlParser.LOCALTIME:
                case MySqlParser.CURDATE:
                case MySqlParser.CURTIME:
                case MySqlParser.DATE_ADD:
                case MySqlParser.DATE_SUB:
                case MySqlParser.LOCALTIMESTAMP:
                case MySqlParser.NOW:
                case MySqlParser.POSITION:
                case MySqlParser.SUBSTR:
                case MySqlParser.SUBSTRING:
                case MySqlParser.SYSDATE:
                case MySqlParser.TRIM:
                case MySqlParser.UTC_DATE:
                case MySqlParser.UTC_TIME:
                case MySqlParser.UTC_TIMESTAMP:
                case MySqlParser.ACCOUNT:
                case MySqlParser.ACTION:
                case MySqlParser.AFTER:
                case MySqlParser.AGGREGATE:
                case MySqlParser.ALGORITHM:
                case MySqlParser.ANY:
                case MySqlParser.AT:
                case MySqlParser.AUTHORS:
                case MySqlParser.AUTOCOMMIT:
                case MySqlParser.AUTOEXTEND_SIZE:
                case MySqlParser.AUTO_INCREMENT:
                case MySqlParser.AVG_ROW_LENGTH:
                case MySqlParser.BEGIN:
                case MySqlParser.BINLOG:
                case MySqlParser.BIT:
                case MySqlParser.BLOCK:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.BTREE:
                case MySqlParser.CACHE:
                case MySqlParser.CASCADED:
                case MySqlParser.CHAIN:
                case MySqlParser.CHANGED:
                case MySqlParser.CHANNEL:
                case MySqlParser.CHECKSUM:
                case MySqlParser.PAGE_CHECKSUM:
                case MySqlParser.CIPHER:
                case MySqlParser.CLASS_ORIGIN:
                case MySqlParser.CLIENT:
                case MySqlParser.CLOSE:
                case MySqlParser.CLUSTERING:
                case MySqlParser.COALESCE:
                case MySqlParser.CODE:
                case MySqlParser.COLUMNS:
                case MySqlParser.COLUMN_FORMAT:
                case MySqlParser.COLUMN_NAME:
                case MySqlParser.COMMENT:
                case MySqlParser.COMMIT:
                case MySqlParser.COMPACT:
                case MySqlParser.COMPLETION:
                case MySqlParser.COMPRESSED:
                case MySqlParser.COMPRESSION:
                case MySqlParser.CONCURRENT:
                case MySqlParser.CONNECT:
                case MySqlParser.CONNECTION:
                case MySqlParser.CONSISTENT:
                case MySqlParser.CONSTRAINT_CATALOG:
                case MySqlParser.CONSTRAINT_SCHEMA:
                case MySqlParser.CONSTRAINT_NAME:
                case MySqlParser.CONTAINS:
                case MySqlParser.CONTEXT:
                case MySqlParser.CONTRIBUTORS:
                case MySqlParser.COPY:
                case MySqlParser.CPU:
                case MySqlParser.CURSOR_NAME:
                case MySqlParser.DATA:
                case MySqlParser.DATAFILE:
                case MySqlParser.DEALLOCATE:
                case MySqlParser.DEFAULT_AUTH:
                case MySqlParser.DEFINER:
                case MySqlParser.DELAY_KEY_WRITE:
                case MySqlParser.DES_KEY_FILE:
                case MySqlParser.DIRECTORY:
                case MySqlParser.DISABLE:
                case MySqlParser.DISCARD:
                case MySqlParser.DISK:
                case MySqlParser.DO:
                case MySqlParser.DUMPFILE:
                case MySqlParser.DUPLICATE:
                case MySqlParser.DYNAMIC:
                case MySqlParser.ENABLE:
                case MySqlParser.ENCRYPTION:
                case MySqlParser.END:
                case MySqlParser.ENDS:
                case MySqlParser.ENGINE:
                case MySqlParser.ENGINES:
                case MySqlParser.ERROR:
                case MySqlParser.ERRORS:
                case MySqlParser.ESCAPE:
                case MySqlParser.EVEN:
                case MySqlParser.EVENT:
                case MySqlParser.EVENTS:
                case MySqlParser.EVERY:
                case MySqlParser.EXCHANGE:
                case MySqlParser.EXCLUSIVE:
                case MySqlParser.EXPIRE:
                case MySqlParser.EXPORT:
                case MySqlParser.EXTENDED:
                case MySqlParser.EXTENT_SIZE:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.FAST:
                case MySqlParser.FAULTS:
                case MySqlParser.FIELDS:
                case MySqlParser.FILE_BLOCK_SIZE:
                case MySqlParser.FILTER:
                case MySqlParser.FIRST:
                case MySqlParser.FIXED:
                case MySqlParser.FLUSH:
                case MySqlParser.FOLLOWS:
                case MySqlParser.FOUND:
                case MySqlParser.FULL:
                case MySqlParser.FUNCTION:
                case MySqlParser.GENERAL:
                case MySqlParser.GLOBAL:
                case MySqlParser.GRANTS:
                case MySqlParser.GROUP_REPLICATION:
                case MySqlParser.HANDLER:
                case MySqlParser.HASH:
                case MySqlParser.HELP:
                case MySqlParser.HISTORY:
                case MySqlParser.HOST:
                case MySqlParser.HOSTS:
                case MySqlParser.IDENTIFIED:
                case MySqlParser.IGNORE_SERVER_IDS:
                case MySqlParser.IMPORT:
                case MySqlParser.INDEXES:
                case MySqlParser.INITIAL_SIZE:
                case MySqlParser.INPLACE:
                case MySqlParser.INSERT_METHOD:
                case MySqlParser.INSTALL:
                case MySqlParser.INSTANCE:
                case MySqlParser.INSTANT:
                case MySqlParser.INVISIBLE:
                case MySqlParser.INVOKER:
                case MySqlParser.IO:
                case MySqlParser.IO_THREAD:
                case MySqlParser.IPC:
                case MySqlParser.ISOLATION:
                case MySqlParser.ISSUER:
                case MySqlParser.JSON:
                case MySqlParser.KEY_BLOCK_SIZE:
                case MySqlParser.LANGUAGE:
                case MySqlParser.LAST:
                case MySqlParser.LEAVES:
                case MySqlParser.LESS:
                case MySqlParser.LEVEL:
                case MySqlParser.LIST:
                case MySqlParser.LOCAL:
                case MySqlParser.LOGFILE:
                case MySqlParser.LOGS:
                case MySqlParser.MASTER:
                case MySqlParser.MASTER_AUTO_POSITION:
                case MySqlParser.MASTER_CONNECT_RETRY:
                case MySqlParser.MASTER_DELAY:
                case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                case MySqlParser.MASTER_HOST:
                case MySqlParser.MASTER_LOG_FILE:
                case MySqlParser.MASTER_LOG_POS:
                case MySqlParser.MASTER_PASSWORD:
                case MySqlParser.MASTER_PORT:
                case MySqlParser.MASTER_RETRY_COUNT:
                case MySqlParser.MASTER_SSL:
                case MySqlParser.MASTER_SSL_CA:
                case MySqlParser.MASTER_SSL_CAPATH:
                case MySqlParser.MASTER_SSL_CERT:
                case MySqlParser.MASTER_SSL_CIPHER:
                case MySqlParser.MASTER_SSL_CRL:
                case MySqlParser.MASTER_SSL_CRLPATH:
                case MySqlParser.MASTER_SSL_KEY:
                case MySqlParser.MASTER_TLS_VERSION:
                case MySqlParser.MASTER_USER:
                case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                case MySqlParser.MAX_QUERIES_PER_HOUR:
                case MySqlParser.MAX_ROWS:
                case MySqlParser.MAX_SIZE:
                case MySqlParser.MAX_UPDATES_PER_HOUR:
                case MySqlParser.MAX_USER_CONNECTIONS:
                case MySqlParser.MEDIUM:
                case MySqlParser.MEMBER:
                case MySqlParser.MERGE:
                case MySqlParser.MESSAGE_TEXT:
                case MySqlParser.MID:
                case MySqlParser.MIGRATE:
                case MySqlParser.MIN_ROWS:
                case MySqlParser.MODE:
                case MySqlParser.MODIFY:
                case MySqlParser.MUTEX:
                case MySqlParser.MYSQL:
                case MySqlParser.MYSQL_ERRNO:
                case MySqlParser.NAME:
                case MySqlParser.NAMES:
                case MySqlParser.NCHAR:
                case MySqlParser.NEVER:
                case MySqlParser.NEXT:
                case MySqlParser.NO:
                case MySqlParser.NOCOPY:
                case MySqlParser.NOWAIT:
                case MySqlParser.NODEGROUP:
                case MySqlParser.NONE:
                case MySqlParser.ODBC:
                case MySqlParser.OFFLINE:
                case MySqlParser.OFFSET:
                case MySqlParser.OF:
                case MySqlParser.OJ:
                case MySqlParser.OLD_PASSWORD:
                case MySqlParser.ONE:
                case MySqlParser.ONLINE:
                case MySqlParser.ONLY:
                case MySqlParser.OPEN:
                case MySqlParser.OPTIMIZER_COSTS:
                case MySqlParser.OPTIONS:
                case MySqlParser.OWNER:
                case MySqlParser.PACK_KEYS:
                case MySqlParser.PAGE:
                case MySqlParser.PARSER:
                case MySqlParser.PARTIAL:
                case MySqlParser.PARTITIONING:
                case MySqlParser.PARTITIONS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.PHASE:
                case MySqlParser.PLUGIN:
                case MySqlParser.PLUGIN_DIR:
                case MySqlParser.PLUGINS:
                case MySqlParser.PORT:
                case MySqlParser.PRECEDES:
                case MySqlParser.PREPARE:
                case MySqlParser.PRESERVE:
                case MySqlParser.PREV:
                case MySqlParser.PROCESSLIST:
                case MySqlParser.PROFILE:
                case MySqlParser.PROFILES:
                case MySqlParser.PROXY:
                case MySqlParser.QUERY:
                case MySqlParser.QUICK:
                case MySqlParser.REBUILD:
                case MySqlParser.RECOVER:
                case MySqlParser.RECURSIVE:
                case MySqlParser.REDO_BUFFER_SIZE:
                case MySqlParser.REDUNDANT:
                case MySqlParser.RELAY:
                case MySqlParser.RELAY_LOG_FILE:
                case MySqlParser.RELAY_LOG_POS:
                case MySqlParser.RELAYLOG:
                case MySqlParser.REMOVE:
                case MySqlParser.REORGANIZE:
                case MySqlParser.REPAIR:
                case MySqlParser.REPLICATE_DO_DB:
                case MySqlParser.REPLICATE_DO_TABLE:
                case MySqlParser.REPLICATE_IGNORE_DB:
                case MySqlParser.REPLICATE_IGNORE_TABLE:
                case MySqlParser.REPLICATE_REWRITE_DB:
                case MySqlParser.REPLICATE_WILD_DO_TABLE:
                case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                case MySqlParser.REPLICATION:
                case MySqlParser.RESET:
                case MySqlParser.RESUME:
                case MySqlParser.RETURNED_SQLSTATE:
                case MySqlParser.RETURNS:
                case MySqlParser.REUSE:
                case MySqlParser.ROLE:
                case MySqlParser.ROLLBACK:
                case MySqlParser.ROLLUP:
                case MySqlParser.ROTATE:
                case MySqlParser.ROW:
                case MySqlParser.ROWS:
                case MySqlParser.ROW_FORMAT:
                case MySqlParser.RTREE:
                case MySqlParser.SAVEPOINT:
                case MySqlParser.SCHEDULE:
                case MySqlParser.SECURITY:
                case MySqlParser.SERVER:
                case MySqlParser.SESSION:
                case MySqlParser.SHARE:
                case MySqlParser.SHARED:
                case MySqlParser.SIGNED:
                case MySqlParser.SIMPLE:
                case MySqlParser.SLAVE:
                case MySqlParser.SLOW:
                case MySqlParser.SNAPSHOT:
                case MySqlParser.SOCKET:
                case MySqlParser.SOME:
                case MySqlParser.SONAME:
                case MySqlParser.SOUNDS:
                case MySqlParser.SOURCE:
                case MySqlParser.SQL_AFTER_GTIDS:
                case MySqlParser.SQL_AFTER_MTS_GAPS:
                case MySqlParser.SQL_BEFORE_GTIDS:
                case MySqlParser.SQL_BUFFER_RESULT:
                case MySqlParser.SQL_CACHE:
                case MySqlParser.SQL_NO_CACHE:
                case MySqlParser.SQL_THREAD:
                case MySqlParser.START:
                case MySqlParser.STARTS:
                case MySqlParser.STATS_AUTO_RECALC:
                case MySqlParser.STATS_PERSISTENT:
                case MySqlParser.STATS_SAMPLE_PAGES:
                case MySqlParser.STATUS:
                case MySqlParser.STOP:
                case MySqlParser.STORAGE:
                case MySqlParser.STRING:
                case MySqlParser.SUBCLASS_ORIGIN:
                case MySqlParser.SUBJECT:
                case MySqlParser.SUBPARTITION:
                case MySqlParser.SUBPARTITIONS:
                case MySqlParser.SUSPEND:
                case MySqlParser.SWAPS:
                case MySqlParser.SWITCHES:
                case MySqlParser.TABLE_NAME:
                case MySqlParser.TABLESPACE:
                case MySqlParser.TABLE_TYPE:
                case MySqlParser.TEMPORARY:
                case MySqlParser.TEMPTABLE:
                case MySqlParser.THAN:
                case MySqlParser.TRADITIONAL:
                case MySqlParser.TRANSACTION:
                case MySqlParser.TRANSACTIONAL:
                case MySqlParser.TRIGGERS:
                case MySqlParser.TRUNCATE:
                case MySqlParser.UNBOUNDED:
                case MySqlParser.UNDEFINED:
                case MySqlParser.UNDOFILE:
                case MySqlParser.UNDO_BUFFER_SIZE:
                case MySqlParser.UNINSTALL:
                case MySqlParser.UNKNOWN:
                case MySqlParser.UNTIL:
                case MySqlParser.UPGRADE:
                case MySqlParser.USER:
                case MySqlParser.USE_FRM:
                case MySqlParser.USER_RESOURCES:
                case MySqlParser.VALIDATION:
                case MySqlParser.VALUE:
                case MySqlParser.VARIABLES:
                case MySqlParser.VIEW:
                case MySqlParser.VIRTUAL:
                case MySqlParser.VISIBLE:
                case MySqlParser.WAIT:
                case MySqlParser.WARNINGS:
                case MySqlParser.WITHOUT:
                case MySqlParser.WORK:
                case MySqlParser.WRAPPER:
                case MySqlParser.X509:
                case MySqlParser.XA:
                case MySqlParser.XML:
                case MySqlParser.EUR:
                case MySqlParser.USA:
                case MySqlParser.JIS:
                case MySqlParser.ISO:
                case MySqlParser.INTERNAL:
                case MySqlParser.QUARTER:
                case MySqlParser.MONTH:
                case MySqlParser.DAY:
                case MySqlParser.HOUR:
                case MySqlParser.MINUTE:
                case MySqlParser.WEEK:
                case MySqlParser.SECOND:
                case MySqlParser.MICROSECOND:
                case MySqlParser.ADMIN:
                case MySqlParser.AUDIT_ABORT_EXEMPT:
                case MySqlParser.AUDIT_ADMIN:
                case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
                case MySqlParser.BACKUP_ADMIN:
                case MySqlParser.BINLOG_ADMIN:
                case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
                case MySqlParser.CLONE_ADMIN:
                case MySqlParser.CONNECTION_ADMIN:
                case MySqlParser.ENCRYPTION_KEY_ADMIN:
                case MySqlParser.EXECUTE:
                case MySqlParser.FILE:
                case MySqlParser.FIREWALL_ADMIN:
                case MySqlParser.FIREWALL_EXEMPT:
                case MySqlParser.FIREWALL_USER:
                case MySqlParser.GROUP_REPLICATION_ADMIN:
                case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
                case MySqlParser.INVOKE:
                case MySqlParser.LAMBDA:
                case MySqlParser.NDB_STORED_USER:
                case MySqlParser.PASSWORDLESS_USER_ADMIN:
                case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
                case MySqlParser.PRIVILEGES:
                case MySqlParser.PROCESS:
                case MySqlParser.RELOAD:
                case MySqlParser.REPLICATION_APPLIER:
                case MySqlParser.REPLICATION_SLAVE_ADMIN:
                case MySqlParser.RESOURCE_GROUP_ADMIN:
                case MySqlParser.RESOURCE_GROUP_USER:
                case MySqlParser.ROLE_ADMIN:
                case MySqlParser.ROUTINE:
                case MySqlParser.S3:
                case MySqlParser.SESSION_VARIABLES_ADMIN:
                case MySqlParser.SET_USER_ID:
                case MySqlParser.SHOW_ROUTINE:
                case MySqlParser.SHUTDOWN:
                case MySqlParser.SUPER:
                case MySqlParser.SYSTEM_VARIABLES_ADMIN:
                case MySqlParser.TABLES:
                case MySqlParser.TABLE_ENCRYPTION_ADMIN:
                case MySqlParser.VERSION_TOKEN_ADMIN:
                case MySqlParser.XA_RECOVER_ADMIN:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.ARCHIVE:
                case MySqlParser.BLACKHOLE:
                case MySqlParser.CSV:
                case MySqlParser.FEDERATED:
                case MySqlParser.INNODB:
                case MySqlParser.MEMORY:
                case MySqlParser.MRG_MYISAM:
                case MySqlParser.MYISAM:
                case MySqlParser.NDB:
                case MySqlParser.NDBCLUSTER:
                case MySqlParser.PERFORMANCE_SCHEMA:
                case MySqlParser.TOKUDB:
                case MySqlParser.REPEATABLE:
                case MySqlParser.COMMITTED:
                case MySqlParser.UNCOMMITTED:
                case MySqlParser.SERIALIZABLE:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                case MySqlParser.ABS:
                case MySqlParser.ACOS:
                case MySqlParser.ADDDATE:
                case MySqlParser.ADDTIME:
                case MySqlParser.AES_DECRYPT:
                case MySqlParser.AES_ENCRYPT:
                case MySqlParser.AREA:
                case MySqlParser.ASBINARY:
                case MySqlParser.ASIN:
                case MySqlParser.ASTEXT:
                case MySqlParser.ASWKB:
                case MySqlParser.ASWKT:
                case MySqlParser.ASYMMETRIC_DECRYPT:
                case MySqlParser.ASYMMETRIC_DERIVE:
                case MySqlParser.ASYMMETRIC_ENCRYPT:
                case MySqlParser.ASYMMETRIC_SIGN:
                case MySqlParser.ASYMMETRIC_VERIFY:
                case MySqlParser.ATAN:
                case MySqlParser.ATAN2:
                case MySqlParser.BENCHMARK:
                case MySqlParser.BIN:
                case MySqlParser.BIT_COUNT:
                case MySqlParser.BIT_LENGTH:
                case MySqlParser.BUFFER:
                case MySqlParser.CATALOG_NAME:
                case MySqlParser.CEIL:
                case MySqlParser.CEILING:
                case MySqlParser.CENTROID:
                case MySqlParser.CHARACTER_LENGTH:
                case MySqlParser.CHARSET:
                case MySqlParser.CHAR_LENGTH:
                case MySqlParser.COERCIBILITY:
                case MySqlParser.COLLATION:
                case MySqlParser.COMPRESS:
                case MySqlParser.CONCAT:
                case MySqlParser.CONCAT_WS:
                case MySqlParser.CONNECTION_ID:
                case MySqlParser.CONV:
                case MySqlParser.CONVERT_TZ:
                case MySqlParser.COS:
                case MySqlParser.COT:
                case MySqlParser.CRC32:
                case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
                case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
                case MySqlParser.CREATE_DH_PARAMETERS:
                case MySqlParser.CREATE_DIGEST:
                case MySqlParser.CROSSES:
                case MySqlParser.DATEDIFF:
                case MySqlParser.DATE_FORMAT:
                case MySqlParser.DAYNAME:
                case MySqlParser.DAYOFMONTH:
                case MySqlParser.DAYOFWEEK:
                case MySqlParser.DAYOFYEAR:
                case MySqlParser.DECODE:
                case MySqlParser.DEGREES:
                case MySqlParser.DES_DECRYPT:
                case MySqlParser.DES_ENCRYPT:
                case MySqlParser.DIMENSION:
                case MySqlParser.DISJOINT:
                case MySqlParser.ELT:
                case MySqlParser.ENCODE:
                case MySqlParser.ENCRYPT:
                case MySqlParser.ENDPOINT:
                case MySqlParser.ENGINE_ATTRIBUTE:
                case MySqlParser.ENVELOPE:
                case MySqlParser.EQUALS:
                case MySqlParser.EXP:
                case MySqlParser.EXPORT_SET:
                case MySqlParser.EXTERIORRING:
                case MySqlParser.EXTRACTVALUE:
                case MySqlParser.FIELD:
                case MySqlParser.FIND_IN_SET:
                case MySqlParser.FLOOR:
                case MySqlParser.FORMAT:
                case MySqlParser.FOUND_ROWS:
                case MySqlParser.FROM_BASE64:
                case MySqlParser.FROM_DAYS:
                case MySqlParser.FROM_UNIXTIME:
                case MySqlParser.GEOMCOLLFROMTEXT:
                case MySqlParser.GEOMCOLLFROMWKB:
                case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.GEOMETRYFROMTEXT:
                case MySqlParser.GEOMETRYFROMWKB:
                case MySqlParser.GEOMETRYN:
                case MySqlParser.GEOMETRYTYPE:
                case MySqlParser.GEOMFROMTEXT:
                case MySqlParser.GEOMFROMWKB:
                case MySqlParser.GET_FORMAT:
                case MySqlParser.GET_LOCK:
                case MySqlParser.GLENGTH:
                case MySqlParser.GREATEST:
                case MySqlParser.GTID_SUBSET:
                case MySqlParser.GTID_SUBTRACT:
                case MySqlParser.HEX:
                case MySqlParser.IFNULL:
                case MySqlParser.INET6_ATON:
                case MySqlParser.INET6_NTOA:
                case MySqlParser.INET_ATON:
                case MySqlParser.INET_NTOA:
                case MySqlParser.INSTR:
                case MySqlParser.INTERIORRINGN:
                case MySqlParser.INTERSECTS:
                case MySqlParser.ISCLOSED:
                case MySqlParser.ISEMPTY:
                case MySqlParser.ISNULL:
                case MySqlParser.ISSIMPLE:
                case MySqlParser.IS_FREE_LOCK:
                case MySqlParser.IS_IPV4:
                case MySqlParser.IS_IPV4_COMPAT:
                case MySqlParser.IS_IPV4_MAPPED:
                case MySqlParser.IS_IPV6:
                case MySqlParser.IS_USED_LOCK:
                case MySqlParser.LAST_INSERT_ID:
                case MySqlParser.LCASE:
                case MySqlParser.LEAST:
                case MySqlParser.LENGTH:
                case MySqlParser.LINEFROMTEXT:
                case MySqlParser.LINEFROMWKB:
                case MySqlParser.LINESTRINGFROMTEXT:
                case MySqlParser.LINESTRINGFROMWKB:
                case MySqlParser.LN:
                case MySqlParser.LOAD_FILE:
                case MySqlParser.LOCATE:
                case MySqlParser.LOG:
                case MySqlParser.LOG10:
                case MySqlParser.LOG2:
                case MySqlParser.LOWER:
                case MySqlParser.LPAD:
                case MySqlParser.LTRIM:
                case MySqlParser.MAKEDATE:
                case MySqlParser.MAKETIME:
                case MySqlParser.MAKE_SET:
                case MySqlParser.MASTER_POS_WAIT:
                case MySqlParser.MBRCONTAINS:
                case MySqlParser.MBRDISJOINT:
                case MySqlParser.MBREQUAL:
                case MySqlParser.MBRINTERSECTS:
                case MySqlParser.MBROVERLAPS:
                case MySqlParser.MBRTOUCHES:
                case MySqlParser.MBRWITHIN:
                case MySqlParser.MD5:
                case MySqlParser.MLINEFROMTEXT:
                case MySqlParser.MLINEFROMWKB:
                case MySqlParser.MONTHNAME:
                case MySqlParser.MPOINTFROMTEXT:
                case MySqlParser.MPOINTFROMWKB:
                case MySqlParser.MPOLYFROMTEXT:
                case MySqlParser.MPOLYFROMWKB:
                case MySqlParser.MULTILINESTRINGFROMTEXT:
                case MySqlParser.MULTILINESTRINGFROMWKB:
                case MySqlParser.MULTIPOINTFROMTEXT:
                case MySqlParser.MULTIPOINTFROMWKB:
                case MySqlParser.MULTIPOLYGONFROMTEXT:
                case MySqlParser.MULTIPOLYGONFROMWKB:
                case MySqlParser.NAME_CONST:
                case MySqlParser.NULLIF:
                case MySqlParser.NUMGEOMETRIES:
                case MySqlParser.NUMINTERIORRINGS:
                case MySqlParser.NUMPOINTS:
                case MySqlParser.OCT:
                case MySqlParser.OCTET_LENGTH:
                case MySqlParser.ORD:
                case MySqlParser.OVERLAPS:
                case MySqlParser.PERIOD_ADD:
                case MySqlParser.PERIOD_DIFF:
                case MySqlParser.PI:
                case MySqlParser.POINTFROMTEXT:
                case MySqlParser.POINTFROMWKB:
                case MySqlParser.POINTN:
                case MySqlParser.POLYFROMTEXT:
                case MySqlParser.POLYFROMWKB:
                case MySqlParser.POLYGONFROMTEXT:
                case MySqlParser.POLYGONFROMWKB:
                case MySqlParser.POW:
                case MySqlParser.POWER:
                case MySqlParser.QUOTE:
                case MySqlParser.RADIANS:
                case MySqlParser.RAND:
                case MySqlParser.RANDOM:
                case MySqlParser.RANDOM_BYTES:
                case MySqlParser.RELEASE_LOCK:
                case MySqlParser.REVERSE:
                case MySqlParser.ROUND:
                case MySqlParser.ROW_COUNT:
                case MySqlParser.RPAD:
                case MySqlParser.RTRIM:
                case MySqlParser.SEC_TO_TIME:
                case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                case MySqlParser.SESSION_USER:
                case MySqlParser.SHA:
                case MySqlParser.SHA1:
                case MySqlParser.SHA2:
                case MySqlParser.SCHEMA_NAME:
                case MySqlParser.SIGN:
                case MySqlParser.SIN:
                case MySqlParser.SLEEP:
                case MySqlParser.SOUNDEX:
                case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
                case MySqlParser.SQRT:
                case MySqlParser.SRID:
                case MySqlParser.STARTPOINT:
                case MySqlParser.STRCMP:
                case MySqlParser.STR_TO_DATE:
                case MySqlParser.ST_AREA:
                case MySqlParser.ST_ASBINARY:
                case MySqlParser.ST_ASTEXT:
                case MySqlParser.ST_ASWKB:
                case MySqlParser.ST_ASWKT:
                case MySqlParser.ST_BUFFER:
                case MySqlParser.ST_CENTROID:
                case MySqlParser.ST_CONTAINS:
                case MySqlParser.ST_CROSSES:
                case MySqlParser.ST_DIFFERENCE:
                case MySqlParser.ST_DIMENSION:
                case MySqlParser.ST_DISJOINT:
                case MySqlParser.ST_DISTANCE:
                case MySqlParser.ST_ENDPOINT:
                case MySqlParser.ST_ENVELOPE:
                case MySqlParser.ST_EQUALS:
                case MySqlParser.ST_EXTERIORRING:
                case MySqlParser.ST_GEOMCOLLFROMTEXT:
                case MySqlParser.ST_GEOMCOLLFROMTXT:
                case MySqlParser.ST_GEOMCOLLFROMWKB:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.ST_GEOMETRYFROMTEXT:
                case MySqlParser.ST_GEOMETRYFROMWKB:
                case MySqlParser.ST_GEOMETRYN:
                case MySqlParser.ST_GEOMETRYTYPE:
                case MySqlParser.ST_GEOMFROMTEXT:
                case MySqlParser.ST_GEOMFROMWKB:
                case MySqlParser.ST_INTERIORRINGN:
                case MySqlParser.ST_INTERSECTION:
                case MySqlParser.ST_INTERSECTS:
                case MySqlParser.ST_ISCLOSED:
                case MySqlParser.ST_ISEMPTY:
                case MySqlParser.ST_ISSIMPLE:
                case MySqlParser.ST_LINEFROMTEXT:
                case MySqlParser.ST_LINEFROMWKB:
                case MySqlParser.ST_LINESTRINGFROMTEXT:
                case MySqlParser.ST_LINESTRINGFROMWKB:
                case MySqlParser.ST_NUMGEOMETRIES:
                case MySqlParser.ST_NUMINTERIORRING:
                case MySqlParser.ST_NUMINTERIORRINGS:
                case MySqlParser.ST_NUMPOINTS:
                case MySqlParser.ST_OVERLAPS:
                case MySqlParser.ST_POINTFROMTEXT:
                case MySqlParser.ST_POINTFROMWKB:
                case MySqlParser.ST_POINTN:
                case MySqlParser.ST_POLYFROMTEXT:
                case MySqlParser.ST_POLYFROMWKB:
                case MySqlParser.ST_POLYGONFROMTEXT:
                case MySqlParser.ST_POLYGONFROMWKB:
                case MySqlParser.ST_SRID:
                case MySqlParser.ST_STARTPOINT:
                case MySqlParser.ST_SYMDIFFERENCE:
                case MySqlParser.ST_TOUCHES:
                case MySqlParser.ST_UNION:
                case MySqlParser.ST_WITHIN:
                case MySqlParser.ST_X:
                case MySqlParser.ST_Y:
                case MySqlParser.SUBDATE:
                case MySqlParser.SUBSTRING_INDEX:
                case MySqlParser.SUBTIME:
                case MySqlParser.SYSTEM_USER:
                case MySqlParser.TAN:
                case MySqlParser.TIMEDIFF:
                case MySqlParser.TIMESTAMPADD:
                case MySqlParser.TIMESTAMPDIFF:
                case MySqlParser.TIME_FORMAT:
                case MySqlParser.TIME_TO_SEC:
                case MySqlParser.TOUCHES:
                case MySqlParser.TO_BASE64:
                case MySqlParser.TO_DAYS:
                case MySqlParser.TO_SECONDS:
                case MySqlParser.TP_CONNECTION_ADMIN:
                case MySqlParser.UCASE:
                case MySqlParser.UNCOMPRESS:
                case MySqlParser.UNCOMPRESSED_LENGTH:
                case MySqlParser.UNHEX:
                case MySqlParser.UNIX_TIMESTAMP:
                case MySqlParser.UPDATEXML:
                case MySqlParser.UPPER:
                case MySqlParser.UUID:
                case MySqlParser.UUID_SHORT:
                case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
                case MySqlParser.VERSION:
                case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case MySqlParser.WEEKDAY:
                case MySqlParser.WEEKOFYEAR:
                case MySqlParser.WEIGHT_STRING:
                case MySqlParser.WITHIN:
                case MySqlParser.YEARWEEK:
                case MySqlParser.Y_FUNCTION:
                case MySqlParser.X_FUNCTION:
                case MySqlParser.MOD:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.ID:
                    {
                    this.state = 6079;
                    localContext._partitionList = this.uidList();
                    }
                    break;
                case MySqlParser.ALL:
                    {
                    this.state = 6080;
                    this.match(MySqlParser.ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6083;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 6093;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81 || _la === 91 || _la === 1133) {
                {
                this.state = 6087;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81 || _la === 91) {
                    {
                    this.state = 6086;
                    localContext._indexFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 81 || _la === 91)) {
                        localContext._indexFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 6089;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6090;
                localContext._indexList = this.uidList();
                this.state = 6091;
                this.match(MySqlParser.RR_BRACKET);
                }
            }

            this.state = 6097;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78) {
                {
                this.state = 6095;
                this.match(MySqlParser.IGNORE);
                this.state = 6096;
                this.match(MySqlParser.LEAVES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleDescribeStatement(): SimpleDescribeStatementContext {
        let localContext = new SimpleDescribeStatementContext(this.context, this.state);
        this.enterRule(localContext, 524, MySqlParser.RULE_simpleDescribeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6099;
            localContext._command = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & 131075) !== 0))) {
                localContext._command = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6100;
            this.tableName();
            this.state = 6103;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 887, this.context) ) {
            case 1:
                {
                this.state = 6101;
                localContext._column = this.uid();
                }
                break;
            case 2:
                {
                this.state = 6102;
                localContext._pattern = this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullDescribeStatement(): FullDescribeStatementContext {
        let localContext = new FullDescribeStatementContext(this.context, this.state);
        this.enterRule(localContext, 526, MySqlParser.RULE_fullDescribeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6105;
            localContext._command = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & 131075) !== 0))) {
                localContext._command = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6109;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 422 || _la === 550 || _la === 885) {
                {
                this.state = 6106;
                localContext._formatType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 422 || _la === 550 || _la === 885)) {
                    localContext._formatType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6107;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 6108;
                localContext._formatValue = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 466 || _la === 652)) {
                    localContext._formatValue = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 6111;
            this.describeObjectClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public helpStatement(): HelpStatementContext {
        let localContext = new HelpStatementContext(this.context, this.state);
        this.enterRule(localContext, 528, MySqlParser.RULE_helpStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6113;
            this.match(MySqlParser.HELP);
            this.state = 6114;
            this.match(MySqlParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public useStatement(): UseStatementContext {
        let localContext = new UseStatementContext(this.context, this.state);
        this.enterRule(localContext, 530, MySqlParser.RULE_useStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6116;
            this.match(MySqlParser.USE);
            this.state = 6117;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signalStatement(): SignalStatementContext {
        let localContext = new SignalStatementContext(this.context, this.state);
        this.enterRule(localContext, 532, MySqlParser.RULE_signalStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6119;
            this.match(MySqlParser.SIGNAL);
            this.state = 6127;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.SQLSTATE:
                {
                {
                this.state = 6120;
                this.match(MySqlParser.SQLSTATE);
                this.state = 6122;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 669) {
                    {
                    this.state = 6121;
                    this.match(MySqlParser.VALUE);
                    }
                }

                this.state = 6124;
                this.stringLiteral();
                }
                }
                break;
            case MySqlParser.ID:
                {
                this.state = 6125;
                this.match(MySqlParser.ID);
                }
                break;
            case MySqlParser.REVERSE_QUOTE_ID:
                {
                this.state = 6126;
                this.match(MySqlParser.REVERSE_QUOTE_ID);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 6138;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 6129;
                this.match(MySqlParser.SET);
                this.state = 6130;
                this.signalConditionInformation();
                this.state = 6135;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 6131;
                    this.match(MySqlParser.COMMA);
                    this.state = 6132;
                    this.signalConditionInformation();
                    }
                    }
                    this.state = 6137;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resignalStatement(): ResignalStatementContext {
        let localContext = new ResignalStatementContext(this.context, this.state);
        this.enterRule(localContext, 534, MySqlParser.RULE_resignalStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6140;
            this.match(MySqlParser.RESIGNAL);
            this.state = 6148;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.SQLSTATE:
                {
                {
                this.state = 6141;
                this.match(MySqlParser.SQLSTATE);
                this.state = 6143;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 669) {
                    {
                    this.state = 6142;
                    this.match(MySqlParser.VALUE);
                    }
                }

                this.state = 6145;
                this.stringLiteral();
                }
                }
                break;
            case MySqlParser.ID:
                {
                this.state = 6146;
                this.match(MySqlParser.ID);
                }
                break;
            case MySqlParser.REVERSE_QUOTE_ID:
                {
                this.state = 6147;
                this.match(MySqlParser.REVERSE_QUOTE_ID);
                }
                break;
            case MySqlParser.EOF:
            case MySqlParser.SET:
            case MySqlParser.SEMI:
                break;
            default:
                break;
            }
            this.state = 6159;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 6150;
                this.match(MySqlParser.SET);
                this.state = 6151;
                this.signalConditionInformation();
                this.state = 6156;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 6152;
                    this.match(MySqlParser.COMMA);
                    this.state = 6153;
                    this.signalConditionInformation();
                    }
                    }
                    this.state = 6158;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signalConditionInformation(): SignalConditionInformationContext {
        let localContext = new SignalConditionInformationContext(this.context, this.state);
        this.enterRule(localContext, 536, MySqlParser.RULE_signalConditionInformation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6161;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 272105729) !== 0) || _la === 507 || _la === 515 || _la === 639 || _la === 646 || _la === 836 || _la === 1005)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6162;
            this.match(MySqlParser.EQUAL_SYMBOL);
            this.state = 6167;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.START_NATIONAL_STRING_LITERAL:
            case MySqlParser.STRING_LITERAL:
            case MySqlParser.STRING_CHARSET_NAME:
                {
                this.state = 6163;
                this.stringLiteral();
                }
                break;
            case MySqlParser.DECIMAL_LITERAL:
                {
                this.state = 6164;
                this.match(MySqlParser.DECIMAL_LITERAL);
                }
                break;
            case MySqlParser.LOCAL_ID:
            case MySqlParser.GLOBAL_ID:
                {
                this.state = 6165;
                this.mysqlVariable();
                }
                break;
            case MySqlParser.ARRAY:
            case MySqlParser.ATTRIBUTE:
            case MySqlParser.BUCKETS:
            case MySqlParser.CONDITION:
            case MySqlParser.CURRENT:
            case MySqlParser.CURRENT_USER:
            case MySqlParser.DATABASE:
            case MySqlParser.DEFAULT:
            case MySqlParser.DIAGNOSTICS:
            case MySqlParser.EMPTY:
            case MySqlParser.ENFORCED:
            case MySqlParser.EXCEPT:
            case MySqlParser.GROUP:
            case MySqlParser.IF:
            case MySqlParser.IGNORED:
            case MySqlParser.INSERT:
            case MySqlParser.LATERAL:
            case MySqlParser.LEFT:
            case MySqlParser.NUMBER:
            case MySqlParser.OPTIONAL:
            case MySqlParser.ORDER:
            case MySqlParser.PRIMARY:
            case MySqlParser.REPEAT:
            case MySqlParser.REPLACE:
            case MySqlParser.RIGHT:
            case MySqlParser.SCHEMA:
            case MySqlParser.SKIP_QUERY_REWRITE:
            case MySqlParser.STACKED:
            case MySqlParser.DATE:
            case MySqlParser.TIME:
            case MySqlParser.TIMESTAMP:
            case MySqlParser.DATETIME:
            case MySqlParser.YEAR:
            case MySqlParser.BINARY:
            case MySqlParser.TEXT:
            case MySqlParser.ENUM:
            case MySqlParser.SERIAL:
            case MySqlParser.JSON_ARRAY:
            case MySqlParser.JSON_ARRAYAGG:
            case MySqlParser.JSON_ARRAY_APPEND:
            case MySqlParser.JSON_ARRAY_INSERT:
            case MySqlParser.JSON_CONTAINS:
            case MySqlParser.JSON_CONTAINS_PATH:
            case MySqlParser.JSON_DEPTH:
            case MySqlParser.JSON_EXTRACT:
            case MySqlParser.JSON_INSERT:
            case MySqlParser.JSON_KEYS:
            case MySqlParser.JSON_LENGTH:
            case MySqlParser.JSON_MERGE:
            case MySqlParser.JSON_MERGE_PATCH:
            case MySqlParser.JSON_MERGE_PRESERVE:
            case MySqlParser.JSON_OBJECT:
            case MySqlParser.JSON_OBJECTAGG:
            case MySqlParser.JSON_OVERLAPS:
            case MySqlParser.JSON_PRETTY:
            case MySqlParser.JSON_QUOTE:
            case MySqlParser.JSON_REMOVE:
            case MySqlParser.JSON_REPLACE:
            case MySqlParser.JSON_SCHEMA_VALID:
            case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
            case MySqlParser.JSON_SEARCH:
            case MySqlParser.JSON_SET:
            case MySqlParser.JSON_STORAGE_FREE:
            case MySqlParser.JSON_STORAGE_SIZE:
            case MySqlParser.JSON_TABLE:
            case MySqlParser.JSON_TYPE:
            case MySqlParser.JSON_UNQUOTE:
            case MySqlParser.JSON_VALID:
            case MySqlParser.JSON_VALUE:
            case MySqlParser.NESTED:
            case MySqlParser.ORDINALITY:
            case MySqlParser.PATH:
            case MySqlParser.AVG:
            case MySqlParser.BIT_AND:
            case MySqlParser.BIT_OR:
            case MySqlParser.BIT_XOR:
            case MySqlParser.COUNT:
            case MySqlParser.CUME_DIST:
            case MySqlParser.DENSE_RANK:
            case MySqlParser.FIRST_VALUE:
            case MySqlParser.GROUP_CONCAT:
            case MySqlParser.LAG:
            case MySqlParser.LAST_VALUE:
            case MySqlParser.LEAD:
            case MySqlParser.MAX:
            case MySqlParser.MIN:
            case MySqlParser.NTILE:
            case MySqlParser.NTH_VALUE:
            case MySqlParser.PERCENT_RANK:
            case MySqlParser.RANK:
            case MySqlParser.ROW_NUMBER:
            case MySqlParser.STD:
            case MySqlParser.STDDEV:
            case MySqlParser.STDDEV_POP:
            case MySqlParser.STDDEV_SAMP:
            case MySqlParser.SUM:
            case MySqlParser.VAR_POP:
            case MySqlParser.VAR_SAMP:
            case MySqlParser.VARIANCE:
            case MySqlParser.CURRENT_DATE:
            case MySqlParser.CURRENT_TIME:
            case MySqlParser.CURRENT_TIMESTAMP:
            case MySqlParser.LOCALTIME:
            case MySqlParser.CURDATE:
            case MySqlParser.CURTIME:
            case MySqlParser.DATE_ADD:
            case MySqlParser.DATE_SUB:
            case MySqlParser.LOCALTIMESTAMP:
            case MySqlParser.NOW:
            case MySqlParser.POSITION:
            case MySqlParser.SUBSTR:
            case MySqlParser.SUBSTRING:
            case MySqlParser.SYSDATE:
            case MySqlParser.TRIM:
            case MySqlParser.UTC_DATE:
            case MySqlParser.UTC_TIME:
            case MySqlParser.UTC_TIMESTAMP:
            case MySqlParser.ACCOUNT:
            case MySqlParser.ACTION:
            case MySqlParser.AFTER:
            case MySqlParser.AGGREGATE:
            case MySqlParser.ALGORITHM:
            case MySqlParser.ANY:
            case MySqlParser.AT:
            case MySqlParser.AUTHORS:
            case MySqlParser.AUTOCOMMIT:
            case MySqlParser.AUTOEXTEND_SIZE:
            case MySqlParser.AUTO_INCREMENT:
            case MySqlParser.AVG_ROW_LENGTH:
            case MySqlParser.BEGIN:
            case MySqlParser.BINLOG:
            case MySqlParser.BIT:
            case MySqlParser.BLOCK:
            case MySqlParser.BOOL:
            case MySqlParser.BOOLEAN:
            case MySqlParser.BTREE:
            case MySqlParser.CACHE:
            case MySqlParser.CASCADED:
            case MySqlParser.CHAIN:
            case MySqlParser.CHANGED:
            case MySqlParser.CHANNEL:
            case MySqlParser.CHECKSUM:
            case MySqlParser.PAGE_CHECKSUM:
            case MySqlParser.CIPHER:
            case MySqlParser.CLASS_ORIGIN:
            case MySqlParser.CLIENT:
            case MySqlParser.CLOSE:
            case MySqlParser.CLUSTERING:
            case MySqlParser.COALESCE:
            case MySqlParser.CODE:
            case MySqlParser.COLUMNS:
            case MySqlParser.COLUMN_FORMAT:
            case MySqlParser.COLUMN_NAME:
            case MySqlParser.COMMENT:
            case MySqlParser.COMMIT:
            case MySqlParser.COMPACT:
            case MySqlParser.COMPLETION:
            case MySqlParser.COMPRESSED:
            case MySqlParser.COMPRESSION:
            case MySqlParser.CONCURRENT:
            case MySqlParser.CONNECT:
            case MySqlParser.CONNECTION:
            case MySqlParser.CONSISTENT:
            case MySqlParser.CONSTRAINT_CATALOG:
            case MySqlParser.CONSTRAINT_SCHEMA:
            case MySqlParser.CONSTRAINT_NAME:
            case MySqlParser.CONTAINS:
            case MySqlParser.CONTEXT:
            case MySqlParser.CONTRIBUTORS:
            case MySqlParser.COPY:
            case MySqlParser.CPU:
            case MySqlParser.CURSOR_NAME:
            case MySqlParser.DATA:
            case MySqlParser.DATAFILE:
            case MySqlParser.DEALLOCATE:
            case MySqlParser.DEFAULT_AUTH:
            case MySqlParser.DEFINER:
            case MySqlParser.DELAY_KEY_WRITE:
            case MySqlParser.DES_KEY_FILE:
            case MySqlParser.DIRECTORY:
            case MySqlParser.DISABLE:
            case MySqlParser.DISCARD:
            case MySqlParser.DISK:
            case MySqlParser.DO:
            case MySqlParser.DUMPFILE:
            case MySqlParser.DUPLICATE:
            case MySqlParser.DYNAMIC:
            case MySqlParser.ENABLE:
            case MySqlParser.ENCRYPTION:
            case MySqlParser.END:
            case MySqlParser.ENDS:
            case MySqlParser.ENGINE:
            case MySqlParser.ENGINES:
            case MySqlParser.ERROR:
            case MySqlParser.ERRORS:
            case MySqlParser.ESCAPE:
            case MySqlParser.EVEN:
            case MySqlParser.EVENT:
            case MySqlParser.EVENTS:
            case MySqlParser.EVERY:
            case MySqlParser.EXCHANGE:
            case MySqlParser.EXCLUSIVE:
            case MySqlParser.EXPIRE:
            case MySqlParser.EXPORT:
            case MySqlParser.EXTENDED:
            case MySqlParser.EXTENT_SIZE:
            case MySqlParser.FAILED_LOGIN_ATTEMPTS:
            case MySqlParser.FAST:
            case MySqlParser.FAULTS:
            case MySqlParser.FIELDS:
            case MySqlParser.FILE_BLOCK_SIZE:
            case MySqlParser.FILTER:
            case MySqlParser.FIRST:
            case MySqlParser.FIXED:
            case MySqlParser.FLUSH:
            case MySqlParser.FOLLOWS:
            case MySqlParser.FOUND:
            case MySqlParser.FULL:
            case MySqlParser.FUNCTION:
            case MySqlParser.GENERAL:
            case MySqlParser.GLOBAL:
            case MySqlParser.GRANTS:
            case MySqlParser.GROUP_REPLICATION:
            case MySqlParser.HANDLER:
            case MySqlParser.HASH:
            case MySqlParser.HELP:
            case MySqlParser.HISTORY:
            case MySqlParser.HOST:
            case MySqlParser.HOSTS:
            case MySqlParser.IDENTIFIED:
            case MySqlParser.IGNORE_SERVER_IDS:
            case MySqlParser.IMPORT:
            case MySqlParser.INDEXES:
            case MySqlParser.INITIAL_SIZE:
            case MySqlParser.INPLACE:
            case MySqlParser.INSERT_METHOD:
            case MySqlParser.INSTALL:
            case MySqlParser.INSTANCE:
            case MySqlParser.INSTANT:
            case MySqlParser.INVISIBLE:
            case MySqlParser.INVOKER:
            case MySqlParser.IO:
            case MySqlParser.IO_THREAD:
            case MySqlParser.IPC:
            case MySqlParser.ISOLATION:
            case MySqlParser.ISSUER:
            case MySqlParser.JSON:
            case MySqlParser.KEY_BLOCK_SIZE:
            case MySqlParser.LANGUAGE:
            case MySqlParser.LAST:
            case MySqlParser.LEAVES:
            case MySqlParser.LESS:
            case MySqlParser.LEVEL:
            case MySqlParser.LIST:
            case MySqlParser.LOCAL:
            case MySqlParser.LOGFILE:
            case MySqlParser.LOGS:
            case MySqlParser.MASTER:
            case MySqlParser.MASTER_AUTO_POSITION:
            case MySqlParser.MASTER_CONNECT_RETRY:
            case MySqlParser.MASTER_DELAY:
            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
            case MySqlParser.MASTER_HOST:
            case MySqlParser.MASTER_LOG_FILE:
            case MySqlParser.MASTER_LOG_POS:
            case MySqlParser.MASTER_PASSWORD:
            case MySqlParser.MASTER_PORT:
            case MySqlParser.MASTER_RETRY_COUNT:
            case MySqlParser.MASTER_SSL:
            case MySqlParser.MASTER_SSL_CA:
            case MySqlParser.MASTER_SSL_CAPATH:
            case MySqlParser.MASTER_SSL_CERT:
            case MySqlParser.MASTER_SSL_CIPHER:
            case MySqlParser.MASTER_SSL_CRL:
            case MySqlParser.MASTER_SSL_CRLPATH:
            case MySqlParser.MASTER_SSL_KEY:
            case MySqlParser.MASTER_TLS_VERSION:
            case MySqlParser.MASTER_USER:
            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
            case MySqlParser.MAX_QUERIES_PER_HOUR:
            case MySqlParser.MAX_ROWS:
            case MySqlParser.MAX_SIZE:
            case MySqlParser.MAX_UPDATES_PER_HOUR:
            case MySqlParser.MAX_USER_CONNECTIONS:
            case MySqlParser.MEDIUM:
            case MySqlParser.MEMBER:
            case MySqlParser.MERGE:
            case MySqlParser.MESSAGE_TEXT:
            case MySqlParser.MID:
            case MySqlParser.MIGRATE:
            case MySqlParser.MIN_ROWS:
            case MySqlParser.MODE:
            case MySqlParser.MODIFY:
            case MySqlParser.MUTEX:
            case MySqlParser.MYSQL:
            case MySqlParser.MYSQL_ERRNO:
            case MySqlParser.NAME:
            case MySqlParser.NAMES:
            case MySqlParser.NCHAR:
            case MySqlParser.NEVER:
            case MySqlParser.NEXT:
            case MySqlParser.NO:
            case MySqlParser.NOCOPY:
            case MySqlParser.NOWAIT:
            case MySqlParser.NODEGROUP:
            case MySqlParser.NONE:
            case MySqlParser.ODBC:
            case MySqlParser.OFFLINE:
            case MySqlParser.OFFSET:
            case MySqlParser.OF:
            case MySqlParser.OJ:
            case MySqlParser.OLD_PASSWORD:
            case MySqlParser.ONE:
            case MySqlParser.ONLINE:
            case MySqlParser.ONLY:
            case MySqlParser.OPEN:
            case MySqlParser.OPTIMIZER_COSTS:
            case MySqlParser.OPTIONS:
            case MySqlParser.OWNER:
            case MySqlParser.PACK_KEYS:
            case MySqlParser.PAGE:
            case MySqlParser.PARSER:
            case MySqlParser.PARTIAL:
            case MySqlParser.PARTITIONING:
            case MySqlParser.PARTITIONS:
            case MySqlParser.PASSWORD:
            case MySqlParser.PASSWORD_LOCK_TIME:
            case MySqlParser.PHASE:
            case MySqlParser.PLUGIN:
            case MySqlParser.PLUGIN_DIR:
            case MySqlParser.PLUGINS:
            case MySqlParser.PORT:
            case MySqlParser.PRECEDES:
            case MySqlParser.PREPARE:
            case MySqlParser.PRESERVE:
            case MySqlParser.PREV:
            case MySqlParser.PROCESSLIST:
            case MySqlParser.PROFILE:
            case MySqlParser.PROFILES:
            case MySqlParser.PROXY:
            case MySqlParser.QUERY:
            case MySqlParser.QUICK:
            case MySqlParser.REBUILD:
            case MySqlParser.RECOVER:
            case MySqlParser.RECURSIVE:
            case MySqlParser.REDO_BUFFER_SIZE:
            case MySqlParser.REDUNDANT:
            case MySqlParser.RELAY:
            case MySqlParser.RELAY_LOG_FILE:
            case MySqlParser.RELAY_LOG_POS:
            case MySqlParser.RELAYLOG:
            case MySqlParser.REMOVE:
            case MySqlParser.REORGANIZE:
            case MySqlParser.REPAIR:
            case MySqlParser.REPLICATE_DO_DB:
            case MySqlParser.REPLICATE_DO_TABLE:
            case MySqlParser.REPLICATE_IGNORE_DB:
            case MySqlParser.REPLICATE_IGNORE_TABLE:
            case MySqlParser.REPLICATE_REWRITE_DB:
            case MySqlParser.REPLICATE_WILD_DO_TABLE:
            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySqlParser.REPLICATION:
            case MySqlParser.RESET:
            case MySqlParser.RESUME:
            case MySqlParser.RETURNED_SQLSTATE:
            case MySqlParser.RETURNS:
            case MySqlParser.REUSE:
            case MySqlParser.ROLE:
            case MySqlParser.ROLLBACK:
            case MySqlParser.ROLLUP:
            case MySqlParser.ROTATE:
            case MySqlParser.ROW:
            case MySqlParser.ROWS:
            case MySqlParser.ROW_FORMAT:
            case MySqlParser.RTREE:
            case MySqlParser.SAVEPOINT:
            case MySqlParser.SCHEDULE:
            case MySqlParser.SECURITY:
            case MySqlParser.SERVER:
            case MySqlParser.SESSION:
            case MySqlParser.SHARE:
            case MySqlParser.SHARED:
            case MySqlParser.SIGNED:
            case MySqlParser.SIMPLE:
            case MySqlParser.SLAVE:
            case MySqlParser.SLOW:
            case MySqlParser.SNAPSHOT:
            case MySqlParser.SOCKET:
            case MySqlParser.SOME:
            case MySqlParser.SONAME:
            case MySqlParser.SOUNDS:
            case MySqlParser.SOURCE:
            case MySqlParser.SQL_AFTER_GTIDS:
            case MySqlParser.SQL_AFTER_MTS_GAPS:
            case MySqlParser.SQL_BEFORE_GTIDS:
            case MySqlParser.SQL_BUFFER_RESULT:
            case MySqlParser.SQL_CACHE:
            case MySqlParser.SQL_NO_CACHE:
            case MySqlParser.SQL_THREAD:
            case MySqlParser.START:
            case MySqlParser.STARTS:
            case MySqlParser.STATS_AUTO_RECALC:
            case MySqlParser.STATS_PERSISTENT:
            case MySqlParser.STATS_SAMPLE_PAGES:
            case MySqlParser.STATUS:
            case MySqlParser.STOP:
            case MySqlParser.STORAGE:
            case MySqlParser.STRING:
            case MySqlParser.SUBCLASS_ORIGIN:
            case MySqlParser.SUBJECT:
            case MySqlParser.SUBPARTITION:
            case MySqlParser.SUBPARTITIONS:
            case MySqlParser.SUSPEND:
            case MySqlParser.SWAPS:
            case MySqlParser.SWITCHES:
            case MySqlParser.TABLE_NAME:
            case MySqlParser.TABLESPACE:
            case MySqlParser.TABLE_TYPE:
            case MySqlParser.TEMPORARY:
            case MySqlParser.TEMPTABLE:
            case MySqlParser.THAN:
            case MySqlParser.TRADITIONAL:
            case MySqlParser.TRANSACTION:
            case MySqlParser.TRANSACTIONAL:
            case MySqlParser.TRIGGERS:
            case MySqlParser.TRUNCATE:
            case MySqlParser.UNBOUNDED:
            case MySqlParser.UNDEFINED:
            case MySqlParser.UNDOFILE:
            case MySqlParser.UNDO_BUFFER_SIZE:
            case MySqlParser.UNINSTALL:
            case MySqlParser.UNKNOWN:
            case MySqlParser.UNTIL:
            case MySqlParser.UPGRADE:
            case MySqlParser.USER:
            case MySqlParser.USE_FRM:
            case MySqlParser.USER_RESOURCES:
            case MySqlParser.VALIDATION:
            case MySqlParser.VALUE:
            case MySqlParser.VARIABLES:
            case MySqlParser.VIEW:
            case MySqlParser.VIRTUAL:
            case MySqlParser.VISIBLE:
            case MySqlParser.WAIT:
            case MySqlParser.WARNINGS:
            case MySqlParser.WITHOUT:
            case MySqlParser.WORK:
            case MySqlParser.WRAPPER:
            case MySqlParser.X509:
            case MySqlParser.XA:
            case MySqlParser.XML:
            case MySqlParser.EUR:
            case MySqlParser.USA:
            case MySqlParser.JIS:
            case MySqlParser.ISO:
            case MySqlParser.INTERNAL:
            case MySqlParser.QUARTER:
            case MySqlParser.MONTH:
            case MySqlParser.DAY:
            case MySqlParser.HOUR:
            case MySqlParser.MINUTE:
            case MySqlParser.WEEK:
            case MySqlParser.SECOND:
            case MySqlParser.MICROSECOND:
            case MySqlParser.ADMIN:
            case MySqlParser.AUDIT_ABORT_EXEMPT:
            case MySqlParser.AUDIT_ADMIN:
            case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
            case MySqlParser.BACKUP_ADMIN:
            case MySqlParser.BINLOG_ADMIN:
            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
            case MySqlParser.CLONE_ADMIN:
            case MySqlParser.CONNECTION_ADMIN:
            case MySqlParser.ENCRYPTION_KEY_ADMIN:
            case MySqlParser.EXECUTE:
            case MySqlParser.FILE:
            case MySqlParser.FIREWALL_ADMIN:
            case MySqlParser.FIREWALL_EXEMPT:
            case MySqlParser.FIREWALL_USER:
            case MySqlParser.GROUP_REPLICATION_ADMIN:
            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
            case MySqlParser.INVOKE:
            case MySqlParser.LAMBDA:
            case MySqlParser.NDB_STORED_USER:
            case MySqlParser.PASSWORDLESS_USER_ADMIN:
            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySqlParser.PRIVILEGES:
            case MySqlParser.PROCESS:
            case MySqlParser.RELOAD:
            case MySqlParser.REPLICATION_APPLIER:
            case MySqlParser.REPLICATION_SLAVE_ADMIN:
            case MySqlParser.RESOURCE_GROUP_ADMIN:
            case MySqlParser.RESOURCE_GROUP_USER:
            case MySqlParser.ROLE_ADMIN:
            case MySqlParser.ROUTINE:
            case MySqlParser.S3:
            case MySqlParser.SESSION_VARIABLES_ADMIN:
            case MySqlParser.SET_USER_ID:
            case MySqlParser.SHOW_ROUTINE:
            case MySqlParser.SHUTDOWN:
            case MySqlParser.SUPER:
            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
            case MySqlParser.TABLES:
            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
            case MySqlParser.VERSION_TOKEN_ADMIN:
            case MySqlParser.XA_RECOVER_ADMIN:
            case MySqlParser.ARMSCII8:
            case MySqlParser.ASCII:
            case MySqlParser.BIG5:
            case MySqlParser.CP1250:
            case MySqlParser.CP1251:
            case MySqlParser.CP1256:
            case MySqlParser.CP1257:
            case MySqlParser.CP850:
            case MySqlParser.CP852:
            case MySqlParser.CP866:
            case MySqlParser.CP932:
            case MySqlParser.DEC8:
            case MySqlParser.EUCJPMS:
            case MySqlParser.EUCKR:
            case MySqlParser.GB18030:
            case MySqlParser.GB2312:
            case MySqlParser.GBK:
            case MySqlParser.GEOSTD8:
            case MySqlParser.GREEK:
            case MySqlParser.HEBREW:
            case MySqlParser.HP8:
            case MySqlParser.KEYBCS2:
            case MySqlParser.KOI8R:
            case MySqlParser.KOI8U:
            case MySqlParser.LATIN1:
            case MySqlParser.LATIN2:
            case MySqlParser.LATIN5:
            case MySqlParser.LATIN7:
            case MySqlParser.MACCE:
            case MySqlParser.MACROMAN:
            case MySqlParser.SJIS:
            case MySqlParser.SWE7:
            case MySqlParser.TIS620:
            case MySqlParser.UCS2:
            case MySqlParser.UJIS:
            case MySqlParser.UTF16:
            case MySqlParser.UTF16LE:
            case MySqlParser.UTF32:
            case MySqlParser.UTF8:
            case MySqlParser.UTF8MB3:
            case MySqlParser.UTF8MB4:
            case MySqlParser.ARCHIVE:
            case MySqlParser.BLACKHOLE:
            case MySqlParser.CSV:
            case MySqlParser.FEDERATED:
            case MySqlParser.INNODB:
            case MySqlParser.MEMORY:
            case MySqlParser.MRG_MYISAM:
            case MySqlParser.MYISAM:
            case MySqlParser.NDB:
            case MySqlParser.NDBCLUSTER:
            case MySqlParser.PERFORMANCE_SCHEMA:
            case MySqlParser.TOKUDB:
            case MySqlParser.REPEATABLE:
            case MySqlParser.COMMITTED:
            case MySqlParser.UNCOMMITTED:
            case MySqlParser.SERIALIZABLE:
            case MySqlParser.GEOMETRYCOLLECTION:
            case MySqlParser.LINESTRING:
            case MySqlParser.MULTILINESTRING:
            case MySqlParser.MULTIPOINT:
            case MySqlParser.MULTIPOLYGON:
            case MySqlParser.POINT:
            case MySqlParser.POLYGON:
            case MySqlParser.ABS:
            case MySqlParser.ACOS:
            case MySqlParser.ADDDATE:
            case MySqlParser.ADDTIME:
            case MySqlParser.AES_DECRYPT:
            case MySqlParser.AES_ENCRYPT:
            case MySqlParser.AREA:
            case MySqlParser.ASBINARY:
            case MySqlParser.ASIN:
            case MySqlParser.ASTEXT:
            case MySqlParser.ASWKB:
            case MySqlParser.ASWKT:
            case MySqlParser.ASYMMETRIC_DECRYPT:
            case MySqlParser.ASYMMETRIC_DERIVE:
            case MySqlParser.ASYMMETRIC_ENCRYPT:
            case MySqlParser.ASYMMETRIC_SIGN:
            case MySqlParser.ASYMMETRIC_VERIFY:
            case MySqlParser.ATAN:
            case MySqlParser.ATAN2:
            case MySqlParser.BENCHMARK:
            case MySqlParser.BIN:
            case MySqlParser.BIT_COUNT:
            case MySqlParser.BIT_LENGTH:
            case MySqlParser.BUFFER:
            case MySqlParser.CATALOG_NAME:
            case MySqlParser.CEIL:
            case MySqlParser.CEILING:
            case MySqlParser.CENTROID:
            case MySqlParser.CHARACTER_LENGTH:
            case MySqlParser.CHARSET:
            case MySqlParser.CHAR_LENGTH:
            case MySqlParser.COERCIBILITY:
            case MySqlParser.COLLATION:
            case MySqlParser.COMPRESS:
            case MySqlParser.CONCAT:
            case MySqlParser.CONCAT_WS:
            case MySqlParser.CONNECTION_ID:
            case MySqlParser.CONV:
            case MySqlParser.CONVERT_TZ:
            case MySqlParser.COS:
            case MySqlParser.COT:
            case MySqlParser.CRC32:
            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySqlParser.CREATE_DH_PARAMETERS:
            case MySqlParser.CREATE_DIGEST:
            case MySqlParser.CROSSES:
            case MySqlParser.DATEDIFF:
            case MySqlParser.DATE_FORMAT:
            case MySqlParser.DAYNAME:
            case MySqlParser.DAYOFMONTH:
            case MySqlParser.DAYOFWEEK:
            case MySqlParser.DAYOFYEAR:
            case MySqlParser.DECODE:
            case MySqlParser.DEGREES:
            case MySqlParser.DES_DECRYPT:
            case MySqlParser.DES_ENCRYPT:
            case MySqlParser.DIMENSION:
            case MySqlParser.DISJOINT:
            case MySqlParser.ELT:
            case MySqlParser.ENCODE:
            case MySqlParser.ENCRYPT:
            case MySqlParser.ENDPOINT:
            case MySqlParser.ENGINE_ATTRIBUTE:
            case MySqlParser.ENVELOPE:
            case MySqlParser.EQUALS:
            case MySqlParser.EXP:
            case MySqlParser.EXPORT_SET:
            case MySqlParser.EXTERIORRING:
            case MySqlParser.EXTRACTVALUE:
            case MySqlParser.FIELD:
            case MySqlParser.FIND_IN_SET:
            case MySqlParser.FLOOR:
            case MySqlParser.FORMAT:
            case MySqlParser.FOUND_ROWS:
            case MySqlParser.FROM_BASE64:
            case MySqlParser.FROM_DAYS:
            case MySqlParser.FROM_UNIXTIME:
            case MySqlParser.GEOMCOLLFROMTEXT:
            case MySqlParser.GEOMCOLLFROMWKB:
            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.GEOMETRYFROMTEXT:
            case MySqlParser.GEOMETRYFROMWKB:
            case MySqlParser.GEOMETRYN:
            case MySqlParser.GEOMETRYTYPE:
            case MySqlParser.GEOMFROMTEXT:
            case MySqlParser.GEOMFROMWKB:
            case MySqlParser.GET_FORMAT:
            case MySqlParser.GET_LOCK:
            case MySqlParser.GLENGTH:
            case MySqlParser.GREATEST:
            case MySqlParser.GTID_SUBSET:
            case MySqlParser.GTID_SUBTRACT:
            case MySqlParser.HEX:
            case MySqlParser.IFNULL:
            case MySqlParser.INET6_ATON:
            case MySqlParser.INET6_NTOA:
            case MySqlParser.INET_ATON:
            case MySqlParser.INET_NTOA:
            case MySqlParser.INSTR:
            case MySqlParser.INTERIORRINGN:
            case MySqlParser.INTERSECTS:
            case MySqlParser.ISCLOSED:
            case MySqlParser.ISEMPTY:
            case MySqlParser.ISNULL:
            case MySqlParser.ISSIMPLE:
            case MySqlParser.IS_FREE_LOCK:
            case MySqlParser.IS_IPV4:
            case MySqlParser.IS_IPV4_COMPAT:
            case MySqlParser.IS_IPV4_MAPPED:
            case MySqlParser.IS_IPV6:
            case MySqlParser.IS_USED_LOCK:
            case MySqlParser.LAST_INSERT_ID:
            case MySqlParser.LCASE:
            case MySqlParser.LEAST:
            case MySqlParser.LENGTH:
            case MySqlParser.LINEFROMTEXT:
            case MySqlParser.LINEFROMWKB:
            case MySqlParser.LINESTRINGFROMTEXT:
            case MySqlParser.LINESTRINGFROMWKB:
            case MySqlParser.LN:
            case MySqlParser.LOAD_FILE:
            case MySqlParser.LOCATE:
            case MySqlParser.LOG:
            case MySqlParser.LOG10:
            case MySqlParser.LOG2:
            case MySqlParser.LOWER:
            case MySqlParser.LPAD:
            case MySqlParser.LTRIM:
            case MySqlParser.MAKEDATE:
            case MySqlParser.MAKETIME:
            case MySqlParser.MAKE_SET:
            case MySqlParser.MASTER_POS_WAIT:
            case MySqlParser.MBRCONTAINS:
            case MySqlParser.MBRDISJOINT:
            case MySqlParser.MBREQUAL:
            case MySqlParser.MBRINTERSECTS:
            case MySqlParser.MBROVERLAPS:
            case MySqlParser.MBRTOUCHES:
            case MySqlParser.MBRWITHIN:
            case MySqlParser.MD5:
            case MySqlParser.MLINEFROMTEXT:
            case MySqlParser.MLINEFROMWKB:
            case MySqlParser.MONTHNAME:
            case MySqlParser.MPOINTFROMTEXT:
            case MySqlParser.MPOINTFROMWKB:
            case MySqlParser.MPOLYFROMTEXT:
            case MySqlParser.MPOLYFROMWKB:
            case MySqlParser.MULTILINESTRINGFROMTEXT:
            case MySqlParser.MULTILINESTRINGFROMWKB:
            case MySqlParser.MULTIPOINTFROMTEXT:
            case MySqlParser.MULTIPOINTFROMWKB:
            case MySqlParser.MULTIPOLYGONFROMTEXT:
            case MySqlParser.MULTIPOLYGONFROMWKB:
            case MySqlParser.NAME_CONST:
            case MySqlParser.NULLIF:
            case MySqlParser.NUMGEOMETRIES:
            case MySqlParser.NUMINTERIORRINGS:
            case MySqlParser.NUMPOINTS:
            case MySqlParser.OCT:
            case MySqlParser.OCTET_LENGTH:
            case MySqlParser.ORD:
            case MySqlParser.OVERLAPS:
            case MySqlParser.PERIOD_ADD:
            case MySqlParser.PERIOD_DIFF:
            case MySqlParser.PI:
            case MySqlParser.POINTFROMTEXT:
            case MySqlParser.POINTFROMWKB:
            case MySqlParser.POINTN:
            case MySqlParser.POLYFROMTEXT:
            case MySqlParser.POLYFROMWKB:
            case MySqlParser.POLYGONFROMTEXT:
            case MySqlParser.POLYGONFROMWKB:
            case MySqlParser.POW:
            case MySqlParser.POWER:
            case MySqlParser.QUOTE:
            case MySqlParser.RADIANS:
            case MySqlParser.RAND:
            case MySqlParser.RANDOM:
            case MySqlParser.RANDOM_BYTES:
            case MySqlParser.RELEASE_LOCK:
            case MySqlParser.REVERSE:
            case MySqlParser.ROUND:
            case MySqlParser.ROW_COUNT:
            case MySqlParser.RPAD:
            case MySqlParser.RTRIM:
            case MySqlParser.SEC_TO_TIME:
            case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
            case MySqlParser.SESSION_USER:
            case MySqlParser.SHA:
            case MySqlParser.SHA1:
            case MySqlParser.SHA2:
            case MySqlParser.SCHEMA_NAME:
            case MySqlParser.SIGN:
            case MySqlParser.SIN:
            case MySqlParser.SLEEP:
            case MySqlParser.SOUNDEX:
            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySqlParser.SQRT:
            case MySqlParser.SRID:
            case MySqlParser.STARTPOINT:
            case MySqlParser.STRCMP:
            case MySqlParser.STR_TO_DATE:
            case MySqlParser.ST_AREA:
            case MySqlParser.ST_ASBINARY:
            case MySqlParser.ST_ASTEXT:
            case MySqlParser.ST_ASWKB:
            case MySqlParser.ST_ASWKT:
            case MySqlParser.ST_BUFFER:
            case MySqlParser.ST_CENTROID:
            case MySqlParser.ST_CONTAINS:
            case MySqlParser.ST_CROSSES:
            case MySqlParser.ST_DIFFERENCE:
            case MySqlParser.ST_DIMENSION:
            case MySqlParser.ST_DISJOINT:
            case MySqlParser.ST_DISTANCE:
            case MySqlParser.ST_ENDPOINT:
            case MySqlParser.ST_ENVELOPE:
            case MySqlParser.ST_EQUALS:
            case MySqlParser.ST_EXTERIORRING:
            case MySqlParser.ST_GEOMCOLLFROMTEXT:
            case MySqlParser.ST_GEOMCOLLFROMTXT:
            case MySqlParser.ST_GEOMCOLLFROMWKB:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.ST_GEOMETRYFROMTEXT:
            case MySqlParser.ST_GEOMETRYFROMWKB:
            case MySqlParser.ST_GEOMETRYN:
            case MySqlParser.ST_GEOMETRYTYPE:
            case MySqlParser.ST_GEOMFROMTEXT:
            case MySqlParser.ST_GEOMFROMWKB:
            case MySqlParser.ST_INTERIORRINGN:
            case MySqlParser.ST_INTERSECTION:
            case MySqlParser.ST_INTERSECTS:
            case MySqlParser.ST_ISCLOSED:
            case MySqlParser.ST_ISEMPTY:
            case MySqlParser.ST_ISSIMPLE:
            case MySqlParser.ST_LINEFROMTEXT:
            case MySqlParser.ST_LINEFROMWKB:
            case MySqlParser.ST_LINESTRINGFROMTEXT:
            case MySqlParser.ST_LINESTRINGFROMWKB:
            case MySqlParser.ST_NUMGEOMETRIES:
            case MySqlParser.ST_NUMINTERIORRING:
            case MySqlParser.ST_NUMINTERIORRINGS:
            case MySqlParser.ST_NUMPOINTS:
            case MySqlParser.ST_OVERLAPS:
            case MySqlParser.ST_POINTFROMTEXT:
            case MySqlParser.ST_POINTFROMWKB:
            case MySqlParser.ST_POINTN:
            case MySqlParser.ST_POLYFROMTEXT:
            case MySqlParser.ST_POLYFROMWKB:
            case MySqlParser.ST_POLYGONFROMTEXT:
            case MySqlParser.ST_POLYGONFROMWKB:
            case MySqlParser.ST_SRID:
            case MySqlParser.ST_STARTPOINT:
            case MySqlParser.ST_SYMDIFFERENCE:
            case MySqlParser.ST_TOUCHES:
            case MySqlParser.ST_UNION:
            case MySqlParser.ST_WITHIN:
            case MySqlParser.ST_X:
            case MySqlParser.ST_Y:
            case MySqlParser.SUBDATE:
            case MySqlParser.SUBSTRING_INDEX:
            case MySqlParser.SUBTIME:
            case MySqlParser.SYSTEM_USER:
            case MySqlParser.TAN:
            case MySqlParser.TIMEDIFF:
            case MySqlParser.TIMESTAMPADD:
            case MySqlParser.TIMESTAMPDIFF:
            case MySqlParser.TIME_FORMAT:
            case MySqlParser.TIME_TO_SEC:
            case MySqlParser.TOUCHES:
            case MySqlParser.TO_BASE64:
            case MySqlParser.TO_DAYS:
            case MySqlParser.TO_SECONDS:
            case MySqlParser.TP_CONNECTION_ADMIN:
            case MySqlParser.UCASE:
            case MySqlParser.UNCOMPRESS:
            case MySqlParser.UNCOMPRESSED_LENGTH:
            case MySqlParser.UNHEX:
            case MySqlParser.UNIX_TIMESTAMP:
            case MySqlParser.UPDATEXML:
            case MySqlParser.UPPER:
            case MySqlParser.UUID:
            case MySqlParser.UUID_SHORT:
            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
            case MySqlParser.VERSION:
            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySqlParser.WEEKDAY:
            case MySqlParser.WEEKOFYEAR:
            case MySqlParser.WEIGHT_STRING:
            case MySqlParser.WITHIN:
            case MySqlParser.YEARWEEK:
            case MySqlParser.Y_FUNCTION:
            case MySqlParser.X_FUNCTION:
            case MySqlParser.MOD:
            case MySqlParser.ID:
                {
                this.state = 6166;
                this.simpleId();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withStatement(): WithStatementContext {
        let localContext = new WithStatementContext(this.context, this.state);
        this.enterRule(localContext, 538, MySqlParser.RULE_withStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6169;
            this.match(MySqlParser.WITH);
            this.state = 6171;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 898, this.context) ) {
            case 1:
                {
                this.state = 6170;
                this.match(MySqlParser.RECURSIVE);
                }
                break;
            }
            this.state = 6173;
            this.commonTableExpressions();
            this.state = 6178;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 6174;
                this.match(MySqlParser.COMMA);
                this.state = 6175;
                this.commonTableExpressions();
                }
                }
                this.state = 6180;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableStatement(): TableStatementContext {
        let localContext = new TableStatementContext(this.context, this.state);
        this.enterRule(localContext, 540, MySqlParser.RULE_tableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6181;
            this.match(MySqlParser.TABLE);
            this.state = 6182;
            this.tableName();
            this.state = 6184;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 124) {
                {
                this.state = 6183;
                this.orderByClause();
                }
            }

            this.state = 6187;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99) {
                {
                this.state = 6186;
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public diagnosticsStatement(): DiagnosticsStatementContext {
        let localContext = new DiagnosticsStatementContext(this.context, this.state);
        this.enterRule(localContext, 542, MySqlParser.RULE_diagnosticsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6189;
            this.match(MySqlParser.GET);
            this.state = 6191;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35 || _la === 168) {
                {
                this.state = 6190;
                _la = this.tokenStream.LA(1);
                if(!(_la === 35 || _la === 168)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 6193;
            this.match(MySqlParser.DIAGNOSTICS);
            this.state = 6225;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 906, this.context) ) {
            case 1:
                {
                {
                this.state = 6194;
                this.variableClause();
                this.state = 6195;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 6196;
                _la = this.tokenStream.LA(1);
                if(!(_la === 117 || _la === 996)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6204;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 6197;
                    this.match(MySqlParser.COMMA);
                    this.state = 6198;
                    this.variableClause();
                    this.state = 6199;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    this.state = 6200;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 117 || _la === 996)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    }
                    this.state = 6206;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                }
                break;
            case 2:
                {
                {
                this.state = 6207;
                this.match(MySqlParser.CONDITION);
                this.state = 6210;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.ZERO_DECIMAL:
                case MySqlParser.ONE_DECIMAL:
                case MySqlParser.TWO_DECIMAL:
                case MySqlParser.DECIMAL_LITERAL:
                case MySqlParser.REAL_LITERAL:
                    {
                    this.state = 6208;
                    this.decimalLiteral();
                    }
                    break;
                case MySqlParser.ARRAY:
                case MySqlParser.ATTRIBUTE:
                case MySqlParser.BUCKETS:
                case MySqlParser.CONDITION:
                case MySqlParser.CURRENT:
                case MySqlParser.CURRENT_USER:
                case MySqlParser.DATABASE:
                case MySqlParser.DEFAULT:
                case MySqlParser.DIAGNOSTICS:
                case MySqlParser.EMPTY:
                case MySqlParser.ENFORCED:
                case MySqlParser.EXCEPT:
                case MySqlParser.GROUP:
                case MySqlParser.IF:
                case MySqlParser.IGNORED:
                case MySqlParser.INSERT:
                case MySqlParser.LATERAL:
                case MySqlParser.LEFT:
                case MySqlParser.NUMBER:
                case MySqlParser.OPTIONAL:
                case MySqlParser.ORDER:
                case MySqlParser.PRIMARY:
                case MySqlParser.REPEAT:
                case MySqlParser.REPLACE:
                case MySqlParser.RIGHT:
                case MySqlParser.SCHEMA:
                case MySqlParser.SKIP_QUERY_REWRITE:
                case MySqlParser.STACKED:
                case MySqlParser.DATE:
                case MySqlParser.TIME:
                case MySqlParser.TIMESTAMP:
                case MySqlParser.DATETIME:
                case MySqlParser.YEAR:
                case MySqlParser.BINARY:
                case MySqlParser.TEXT:
                case MySqlParser.ENUM:
                case MySqlParser.SERIAL:
                case MySqlParser.JSON_ARRAY:
                case MySqlParser.JSON_ARRAYAGG:
                case MySqlParser.JSON_ARRAY_APPEND:
                case MySqlParser.JSON_ARRAY_INSERT:
                case MySqlParser.JSON_CONTAINS:
                case MySqlParser.JSON_CONTAINS_PATH:
                case MySqlParser.JSON_DEPTH:
                case MySqlParser.JSON_EXTRACT:
                case MySqlParser.JSON_INSERT:
                case MySqlParser.JSON_KEYS:
                case MySqlParser.JSON_LENGTH:
                case MySqlParser.JSON_MERGE:
                case MySqlParser.JSON_MERGE_PATCH:
                case MySqlParser.JSON_MERGE_PRESERVE:
                case MySqlParser.JSON_OBJECT:
                case MySqlParser.JSON_OBJECTAGG:
                case MySqlParser.JSON_OVERLAPS:
                case MySqlParser.JSON_PRETTY:
                case MySqlParser.JSON_QUOTE:
                case MySqlParser.JSON_REMOVE:
                case MySqlParser.JSON_REPLACE:
                case MySqlParser.JSON_SCHEMA_VALID:
                case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
                case MySqlParser.JSON_SEARCH:
                case MySqlParser.JSON_SET:
                case MySqlParser.JSON_STORAGE_FREE:
                case MySqlParser.JSON_STORAGE_SIZE:
                case MySqlParser.JSON_TABLE:
                case MySqlParser.JSON_TYPE:
                case MySqlParser.JSON_UNQUOTE:
                case MySqlParser.JSON_VALID:
                case MySqlParser.JSON_VALUE:
                case MySqlParser.NESTED:
                case MySqlParser.ORDINALITY:
                case MySqlParser.PATH:
                case MySqlParser.AVG:
                case MySqlParser.BIT_AND:
                case MySqlParser.BIT_OR:
                case MySqlParser.BIT_XOR:
                case MySqlParser.COUNT:
                case MySqlParser.CUME_DIST:
                case MySqlParser.DENSE_RANK:
                case MySqlParser.FIRST_VALUE:
                case MySqlParser.GROUP_CONCAT:
                case MySqlParser.LAG:
                case MySqlParser.LAST_VALUE:
                case MySqlParser.LEAD:
                case MySqlParser.MAX:
                case MySqlParser.MIN:
                case MySqlParser.NTILE:
                case MySqlParser.NTH_VALUE:
                case MySqlParser.PERCENT_RANK:
                case MySqlParser.RANK:
                case MySqlParser.ROW_NUMBER:
                case MySqlParser.STD:
                case MySqlParser.STDDEV:
                case MySqlParser.STDDEV_POP:
                case MySqlParser.STDDEV_SAMP:
                case MySqlParser.SUM:
                case MySqlParser.VAR_POP:
                case MySqlParser.VAR_SAMP:
                case MySqlParser.VARIANCE:
                case MySqlParser.CURRENT_DATE:
                case MySqlParser.CURRENT_TIME:
                case MySqlParser.CURRENT_TIMESTAMP:
                case MySqlParser.LOCALTIME:
                case MySqlParser.CURDATE:
                case MySqlParser.CURTIME:
                case MySqlParser.DATE_ADD:
                case MySqlParser.DATE_SUB:
                case MySqlParser.LOCALTIMESTAMP:
                case MySqlParser.NOW:
                case MySqlParser.POSITION:
                case MySqlParser.SUBSTR:
                case MySqlParser.SUBSTRING:
                case MySqlParser.SYSDATE:
                case MySqlParser.TRIM:
                case MySqlParser.UTC_DATE:
                case MySqlParser.UTC_TIME:
                case MySqlParser.UTC_TIMESTAMP:
                case MySqlParser.ACCOUNT:
                case MySqlParser.ACTION:
                case MySqlParser.AFTER:
                case MySqlParser.AGGREGATE:
                case MySqlParser.ALGORITHM:
                case MySqlParser.ANY:
                case MySqlParser.AT:
                case MySqlParser.AUTHORS:
                case MySqlParser.AUTOCOMMIT:
                case MySqlParser.AUTOEXTEND_SIZE:
                case MySqlParser.AUTO_INCREMENT:
                case MySqlParser.AVG_ROW_LENGTH:
                case MySqlParser.BEGIN:
                case MySqlParser.BINLOG:
                case MySqlParser.BIT:
                case MySqlParser.BLOCK:
                case MySqlParser.BOOL:
                case MySqlParser.BOOLEAN:
                case MySqlParser.BTREE:
                case MySqlParser.CACHE:
                case MySqlParser.CASCADED:
                case MySqlParser.CHAIN:
                case MySqlParser.CHANGED:
                case MySqlParser.CHANNEL:
                case MySqlParser.CHECKSUM:
                case MySqlParser.PAGE_CHECKSUM:
                case MySqlParser.CIPHER:
                case MySqlParser.CLASS_ORIGIN:
                case MySqlParser.CLIENT:
                case MySqlParser.CLOSE:
                case MySqlParser.CLUSTERING:
                case MySqlParser.COALESCE:
                case MySqlParser.CODE:
                case MySqlParser.COLUMNS:
                case MySqlParser.COLUMN_FORMAT:
                case MySqlParser.COLUMN_NAME:
                case MySqlParser.COMMENT:
                case MySqlParser.COMMIT:
                case MySqlParser.COMPACT:
                case MySqlParser.COMPLETION:
                case MySqlParser.COMPRESSED:
                case MySqlParser.COMPRESSION:
                case MySqlParser.CONCURRENT:
                case MySqlParser.CONNECT:
                case MySqlParser.CONNECTION:
                case MySqlParser.CONSISTENT:
                case MySqlParser.CONSTRAINT_CATALOG:
                case MySqlParser.CONSTRAINT_SCHEMA:
                case MySqlParser.CONSTRAINT_NAME:
                case MySqlParser.CONTAINS:
                case MySqlParser.CONTEXT:
                case MySqlParser.CONTRIBUTORS:
                case MySqlParser.COPY:
                case MySqlParser.CPU:
                case MySqlParser.CURSOR_NAME:
                case MySqlParser.DATA:
                case MySqlParser.DATAFILE:
                case MySqlParser.DEALLOCATE:
                case MySqlParser.DEFAULT_AUTH:
                case MySqlParser.DEFINER:
                case MySqlParser.DELAY_KEY_WRITE:
                case MySqlParser.DES_KEY_FILE:
                case MySqlParser.DIRECTORY:
                case MySqlParser.DISABLE:
                case MySqlParser.DISCARD:
                case MySqlParser.DISK:
                case MySqlParser.DO:
                case MySqlParser.DUMPFILE:
                case MySqlParser.DUPLICATE:
                case MySqlParser.DYNAMIC:
                case MySqlParser.ENABLE:
                case MySqlParser.ENCRYPTION:
                case MySqlParser.END:
                case MySqlParser.ENDS:
                case MySqlParser.ENGINE:
                case MySqlParser.ENGINES:
                case MySqlParser.ERROR:
                case MySqlParser.ERRORS:
                case MySqlParser.ESCAPE:
                case MySqlParser.EVEN:
                case MySqlParser.EVENT:
                case MySqlParser.EVENTS:
                case MySqlParser.EVERY:
                case MySqlParser.EXCHANGE:
                case MySqlParser.EXCLUSIVE:
                case MySqlParser.EXPIRE:
                case MySqlParser.EXPORT:
                case MySqlParser.EXTENDED:
                case MySqlParser.EXTENT_SIZE:
                case MySqlParser.FAILED_LOGIN_ATTEMPTS:
                case MySqlParser.FAST:
                case MySqlParser.FAULTS:
                case MySqlParser.FIELDS:
                case MySqlParser.FILE_BLOCK_SIZE:
                case MySqlParser.FILTER:
                case MySqlParser.FIRST:
                case MySqlParser.FIXED:
                case MySqlParser.FLUSH:
                case MySqlParser.FOLLOWS:
                case MySqlParser.FOUND:
                case MySqlParser.FULL:
                case MySqlParser.FUNCTION:
                case MySqlParser.GENERAL:
                case MySqlParser.GLOBAL:
                case MySqlParser.GRANTS:
                case MySqlParser.GROUP_REPLICATION:
                case MySqlParser.HANDLER:
                case MySqlParser.HASH:
                case MySqlParser.HELP:
                case MySqlParser.HISTORY:
                case MySqlParser.HOST:
                case MySqlParser.HOSTS:
                case MySqlParser.IDENTIFIED:
                case MySqlParser.IGNORE_SERVER_IDS:
                case MySqlParser.IMPORT:
                case MySqlParser.INDEXES:
                case MySqlParser.INITIAL_SIZE:
                case MySqlParser.INPLACE:
                case MySqlParser.INSERT_METHOD:
                case MySqlParser.INSTALL:
                case MySqlParser.INSTANCE:
                case MySqlParser.INSTANT:
                case MySqlParser.INVISIBLE:
                case MySqlParser.INVOKER:
                case MySqlParser.IO:
                case MySqlParser.IO_THREAD:
                case MySqlParser.IPC:
                case MySqlParser.ISOLATION:
                case MySqlParser.ISSUER:
                case MySqlParser.JSON:
                case MySqlParser.KEY_BLOCK_SIZE:
                case MySqlParser.LANGUAGE:
                case MySqlParser.LAST:
                case MySqlParser.LEAVES:
                case MySqlParser.LESS:
                case MySqlParser.LEVEL:
                case MySqlParser.LIST:
                case MySqlParser.LOCAL:
                case MySqlParser.LOGFILE:
                case MySqlParser.LOGS:
                case MySqlParser.MASTER:
                case MySqlParser.MASTER_AUTO_POSITION:
                case MySqlParser.MASTER_CONNECT_RETRY:
                case MySqlParser.MASTER_DELAY:
                case MySqlParser.MASTER_HEARTBEAT_PERIOD:
                case MySqlParser.MASTER_HOST:
                case MySqlParser.MASTER_LOG_FILE:
                case MySqlParser.MASTER_LOG_POS:
                case MySqlParser.MASTER_PASSWORD:
                case MySqlParser.MASTER_PORT:
                case MySqlParser.MASTER_RETRY_COUNT:
                case MySqlParser.MASTER_SSL:
                case MySqlParser.MASTER_SSL_CA:
                case MySqlParser.MASTER_SSL_CAPATH:
                case MySqlParser.MASTER_SSL_CERT:
                case MySqlParser.MASTER_SSL_CIPHER:
                case MySqlParser.MASTER_SSL_CRL:
                case MySqlParser.MASTER_SSL_CRLPATH:
                case MySqlParser.MASTER_SSL_KEY:
                case MySqlParser.MASTER_TLS_VERSION:
                case MySqlParser.MASTER_USER:
                case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
                case MySqlParser.MAX_QUERIES_PER_HOUR:
                case MySqlParser.MAX_ROWS:
                case MySqlParser.MAX_SIZE:
                case MySqlParser.MAX_UPDATES_PER_HOUR:
                case MySqlParser.MAX_USER_CONNECTIONS:
                case MySqlParser.MEDIUM:
                case MySqlParser.MEMBER:
                case MySqlParser.MERGE:
                case MySqlParser.MESSAGE_TEXT:
                case MySqlParser.MID:
                case MySqlParser.MIGRATE:
                case MySqlParser.MIN_ROWS:
                case MySqlParser.MODE:
                case MySqlParser.MODIFY:
                case MySqlParser.MUTEX:
                case MySqlParser.MYSQL:
                case MySqlParser.MYSQL_ERRNO:
                case MySqlParser.NAME:
                case MySqlParser.NAMES:
                case MySqlParser.NCHAR:
                case MySqlParser.NEVER:
                case MySqlParser.NEXT:
                case MySqlParser.NO:
                case MySqlParser.NOCOPY:
                case MySqlParser.NOWAIT:
                case MySqlParser.NODEGROUP:
                case MySqlParser.NONE:
                case MySqlParser.ODBC:
                case MySqlParser.OFFLINE:
                case MySqlParser.OFFSET:
                case MySqlParser.OF:
                case MySqlParser.OJ:
                case MySqlParser.OLD_PASSWORD:
                case MySqlParser.ONE:
                case MySqlParser.ONLINE:
                case MySqlParser.ONLY:
                case MySqlParser.OPEN:
                case MySqlParser.OPTIMIZER_COSTS:
                case MySqlParser.OPTIONS:
                case MySqlParser.OWNER:
                case MySqlParser.PACK_KEYS:
                case MySqlParser.PAGE:
                case MySqlParser.PARSER:
                case MySqlParser.PARTIAL:
                case MySqlParser.PARTITIONING:
                case MySqlParser.PARTITIONS:
                case MySqlParser.PASSWORD:
                case MySqlParser.PASSWORD_LOCK_TIME:
                case MySqlParser.PHASE:
                case MySqlParser.PLUGIN:
                case MySqlParser.PLUGIN_DIR:
                case MySqlParser.PLUGINS:
                case MySqlParser.PORT:
                case MySqlParser.PRECEDES:
                case MySqlParser.PREPARE:
                case MySqlParser.PRESERVE:
                case MySqlParser.PREV:
                case MySqlParser.PROCESSLIST:
                case MySqlParser.PROFILE:
                case MySqlParser.PROFILES:
                case MySqlParser.PROXY:
                case MySqlParser.QUERY:
                case MySqlParser.QUICK:
                case MySqlParser.REBUILD:
                case MySqlParser.RECOVER:
                case MySqlParser.RECURSIVE:
                case MySqlParser.REDO_BUFFER_SIZE:
                case MySqlParser.REDUNDANT:
                case MySqlParser.RELAY:
                case MySqlParser.RELAY_LOG_FILE:
                case MySqlParser.RELAY_LOG_POS:
                case MySqlParser.RELAYLOG:
                case MySqlParser.REMOVE:
                case MySqlParser.REORGANIZE:
                case MySqlParser.REPAIR:
                case MySqlParser.REPLICATE_DO_DB:
                case MySqlParser.REPLICATE_DO_TABLE:
                case MySqlParser.REPLICATE_IGNORE_DB:
                case MySqlParser.REPLICATE_IGNORE_TABLE:
                case MySqlParser.REPLICATE_REWRITE_DB:
                case MySqlParser.REPLICATE_WILD_DO_TABLE:
                case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
                case MySqlParser.REPLICATION:
                case MySqlParser.RESET:
                case MySqlParser.RESUME:
                case MySqlParser.RETURNED_SQLSTATE:
                case MySqlParser.RETURNS:
                case MySqlParser.REUSE:
                case MySqlParser.ROLE:
                case MySqlParser.ROLLBACK:
                case MySqlParser.ROLLUP:
                case MySqlParser.ROTATE:
                case MySqlParser.ROW:
                case MySqlParser.ROWS:
                case MySqlParser.ROW_FORMAT:
                case MySqlParser.RTREE:
                case MySqlParser.SAVEPOINT:
                case MySqlParser.SCHEDULE:
                case MySqlParser.SECURITY:
                case MySqlParser.SERVER:
                case MySqlParser.SESSION:
                case MySqlParser.SHARE:
                case MySqlParser.SHARED:
                case MySqlParser.SIGNED:
                case MySqlParser.SIMPLE:
                case MySqlParser.SLAVE:
                case MySqlParser.SLOW:
                case MySqlParser.SNAPSHOT:
                case MySqlParser.SOCKET:
                case MySqlParser.SOME:
                case MySqlParser.SONAME:
                case MySqlParser.SOUNDS:
                case MySqlParser.SOURCE:
                case MySqlParser.SQL_AFTER_GTIDS:
                case MySqlParser.SQL_AFTER_MTS_GAPS:
                case MySqlParser.SQL_BEFORE_GTIDS:
                case MySqlParser.SQL_BUFFER_RESULT:
                case MySqlParser.SQL_CACHE:
                case MySqlParser.SQL_NO_CACHE:
                case MySqlParser.SQL_THREAD:
                case MySqlParser.START:
                case MySqlParser.STARTS:
                case MySqlParser.STATS_AUTO_RECALC:
                case MySqlParser.STATS_PERSISTENT:
                case MySqlParser.STATS_SAMPLE_PAGES:
                case MySqlParser.STATUS:
                case MySqlParser.STOP:
                case MySqlParser.STORAGE:
                case MySqlParser.STRING:
                case MySqlParser.SUBCLASS_ORIGIN:
                case MySqlParser.SUBJECT:
                case MySqlParser.SUBPARTITION:
                case MySqlParser.SUBPARTITIONS:
                case MySqlParser.SUSPEND:
                case MySqlParser.SWAPS:
                case MySqlParser.SWITCHES:
                case MySqlParser.TABLE_NAME:
                case MySqlParser.TABLESPACE:
                case MySqlParser.TABLE_TYPE:
                case MySqlParser.TEMPORARY:
                case MySqlParser.TEMPTABLE:
                case MySqlParser.THAN:
                case MySqlParser.TRADITIONAL:
                case MySqlParser.TRANSACTION:
                case MySqlParser.TRANSACTIONAL:
                case MySqlParser.TRIGGERS:
                case MySqlParser.TRUNCATE:
                case MySqlParser.UNBOUNDED:
                case MySqlParser.UNDEFINED:
                case MySqlParser.UNDOFILE:
                case MySqlParser.UNDO_BUFFER_SIZE:
                case MySqlParser.UNINSTALL:
                case MySqlParser.UNKNOWN:
                case MySqlParser.UNTIL:
                case MySqlParser.UPGRADE:
                case MySqlParser.USER:
                case MySqlParser.USE_FRM:
                case MySqlParser.USER_RESOURCES:
                case MySqlParser.VALIDATION:
                case MySqlParser.VALUE:
                case MySqlParser.VARIABLES:
                case MySqlParser.VIEW:
                case MySqlParser.VIRTUAL:
                case MySqlParser.VISIBLE:
                case MySqlParser.WAIT:
                case MySqlParser.WARNINGS:
                case MySqlParser.WITHOUT:
                case MySqlParser.WORK:
                case MySqlParser.WRAPPER:
                case MySqlParser.X509:
                case MySqlParser.XA:
                case MySqlParser.XML:
                case MySqlParser.EUR:
                case MySqlParser.USA:
                case MySqlParser.JIS:
                case MySqlParser.ISO:
                case MySqlParser.INTERNAL:
                case MySqlParser.QUARTER:
                case MySqlParser.MONTH:
                case MySqlParser.DAY:
                case MySqlParser.HOUR:
                case MySqlParser.MINUTE:
                case MySqlParser.WEEK:
                case MySqlParser.SECOND:
                case MySqlParser.MICROSECOND:
                case MySqlParser.ADMIN:
                case MySqlParser.AUDIT_ABORT_EXEMPT:
                case MySqlParser.AUDIT_ADMIN:
                case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
                case MySqlParser.BACKUP_ADMIN:
                case MySqlParser.BINLOG_ADMIN:
                case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
                case MySqlParser.CLONE_ADMIN:
                case MySqlParser.CONNECTION_ADMIN:
                case MySqlParser.ENCRYPTION_KEY_ADMIN:
                case MySqlParser.EXECUTE:
                case MySqlParser.FILE:
                case MySqlParser.FIREWALL_ADMIN:
                case MySqlParser.FIREWALL_EXEMPT:
                case MySqlParser.FIREWALL_USER:
                case MySqlParser.GROUP_REPLICATION_ADMIN:
                case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
                case MySqlParser.INVOKE:
                case MySqlParser.LAMBDA:
                case MySqlParser.NDB_STORED_USER:
                case MySqlParser.PASSWORDLESS_USER_ADMIN:
                case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
                case MySqlParser.PRIVILEGES:
                case MySqlParser.PROCESS:
                case MySqlParser.RELOAD:
                case MySqlParser.REPLICATION_APPLIER:
                case MySqlParser.REPLICATION_SLAVE_ADMIN:
                case MySqlParser.RESOURCE_GROUP_ADMIN:
                case MySqlParser.RESOURCE_GROUP_USER:
                case MySqlParser.ROLE_ADMIN:
                case MySqlParser.ROUTINE:
                case MySqlParser.S3:
                case MySqlParser.SESSION_VARIABLES_ADMIN:
                case MySqlParser.SET_USER_ID:
                case MySqlParser.SHOW_ROUTINE:
                case MySqlParser.SHUTDOWN:
                case MySqlParser.SUPER:
                case MySqlParser.SYSTEM_VARIABLES_ADMIN:
                case MySqlParser.TABLES:
                case MySqlParser.TABLE_ENCRYPTION_ADMIN:
                case MySqlParser.VERSION_TOKEN_ADMIN:
                case MySqlParser.XA_RECOVER_ADMIN:
                case MySqlParser.ARMSCII8:
                case MySqlParser.ASCII:
                case MySqlParser.BIG5:
                case MySqlParser.CP1250:
                case MySqlParser.CP1251:
                case MySqlParser.CP1256:
                case MySqlParser.CP1257:
                case MySqlParser.CP850:
                case MySqlParser.CP852:
                case MySqlParser.CP866:
                case MySqlParser.CP932:
                case MySqlParser.DEC8:
                case MySqlParser.EUCJPMS:
                case MySqlParser.EUCKR:
                case MySqlParser.GB18030:
                case MySqlParser.GB2312:
                case MySqlParser.GBK:
                case MySqlParser.GEOSTD8:
                case MySqlParser.GREEK:
                case MySqlParser.HEBREW:
                case MySqlParser.HP8:
                case MySqlParser.KEYBCS2:
                case MySqlParser.KOI8R:
                case MySqlParser.KOI8U:
                case MySqlParser.LATIN1:
                case MySqlParser.LATIN2:
                case MySqlParser.LATIN5:
                case MySqlParser.LATIN7:
                case MySqlParser.MACCE:
                case MySqlParser.MACROMAN:
                case MySqlParser.SJIS:
                case MySqlParser.SWE7:
                case MySqlParser.TIS620:
                case MySqlParser.UCS2:
                case MySqlParser.UJIS:
                case MySqlParser.UTF16:
                case MySqlParser.UTF16LE:
                case MySqlParser.UTF32:
                case MySqlParser.UTF8:
                case MySqlParser.UTF8MB3:
                case MySqlParser.UTF8MB4:
                case MySqlParser.ARCHIVE:
                case MySqlParser.BLACKHOLE:
                case MySqlParser.CSV:
                case MySqlParser.FEDERATED:
                case MySqlParser.INNODB:
                case MySqlParser.MEMORY:
                case MySqlParser.MRG_MYISAM:
                case MySqlParser.MYISAM:
                case MySqlParser.NDB:
                case MySqlParser.NDBCLUSTER:
                case MySqlParser.PERFORMANCE_SCHEMA:
                case MySqlParser.TOKUDB:
                case MySqlParser.REPEATABLE:
                case MySqlParser.COMMITTED:
                case MySqlParser.UNCOMMITTED:
                case MySqlParser.SERIALIZABLE:
                case MySqlParser.GEOMETRYCOLLECTION:
                case MySqlParser.LINESTRING:
                case MySqlParser.MULTILINESTRING:
                case MySqlParser.MULTIPOINT:
                case MySqlParser.MULTIPOLYGON:
                case MySqlParser.POINT:
                case MySqlParser.POLYGON:
                case MySqlParser.ABS:
                case MySqlParser.ACOS:
                case MySqlParser.ADDDATE:
                case MySqlParser.ADDTIME:
                case MySqlParser.AES_DECRYPT:
                case MySqlParser.AES_ENCRYPT:
                case MySqlParser.AREA:
                case MySqlParser.ASBINARY:
                case MySqlParser.ASIN:
                case MySqlParser.ASTEXT:
                case MySqlParser.ASWKB:
                case MySqlParser.ASWKT:
                case MySqlParser.ASYMMETRIC_DECRYPT:
                case MySqlParser.ASYMMETRIC_DERIVE:
                case MySqlParser.ASYMMETRIC_ENCRYPT:
                case MySqlParser.ASYMMETRIC_SIGN:
                case MySqlParser.ASYMMETRIC_VERIFY:
                case MySqlParser.ATAN:
                case MySqlParser.ATAN2:
                case MySqlParser.BENCHMARK:
                case MySqlParser.BIN:
                case MySqlParser.BIT_COUNT:
                case MySqlParser.BIT_LENGTH:
                case MySqlParser.BUFFER:
                case MySqlParser.CATALOG_NAME:
                case MySqlParser.CEIL:
                case MySqlParser.CEILING:
                case MySqlParser.CENTROID:
                case MySqlParser.CHARACTER_LENGTH:
                case MySqlParser.CHARSET:
                case MySqlParser.CHAR_LENGTH:
                case MySqlParser.COERCIBILITY:
                case MySqlParser.COLLATION:
                case MySqlParser.COMPRESS:
                case MySqlParser.CONCAT:
                case MySqlParser.CONCAT_WS:
                case MySqlParser.CONNECTION_ID:
                case MySqlParser.CONV:
                case MySqlParser.CONVERT_TZ:
                case MySqlParser.COS:
                case MySqlParser.COT:
                case MySqlParser.CRC32:
                case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
                case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
                case MySqlParser.CREATE_DH_PARAMETERS:
                case MySqlParser.CREATE_DIGEST:
                case MySqlParser.CROSSES:
                case MySqlParser.DATEDIFF:
                case MySqlParser.DATE_FORMAT:
                case MySqlParser.DAYNAME:
                case MySqlParser.DAYOFMONTH:
                case MySqlParser.DAYOFWEEK:
                case MySqlParser.DAYOFYEAR:
                case MySqlParser.DECODE:
                case MySqlParser.DEGREES:
                case MySqlParser.DES_DECRYPT:
                case MySqlParser.DES_ENCRYPT:
                case MySqlParser.DIMENSION:
                case MySqlParser.DISJOINT:
                case MySqlParser.ELT:
                case MySqlParser.ENCODE:
                case MySqlParser.ENCRYPT:
                case MySqlParser.ENDPOINT:
                case MySqlParser.ENGINE_ATTRIBUTE:
                case MySqlParser.ENVELOPE:
                case MySqlParser.EQUALS:
                case MySqlParser.EXP:
                case MySqlParser.EXPORT_SET:
                case MySqlParser.EXTERIORRING:
                case MySqlParser.EXTRACTVALUE:
                case MySqlParser.FIELD:
                case MySqlParser.FIND_IN_SET:
                case MySqlParser.FLOOR:
                case MySqlParser.FORMAT:
                case MySqlParser.FOUND_ROWS:
                case MySqlParser.FROM_BASE64:
                case MySqlParser.FROM_DAYS:
                case MySqlParser.FROM_UNIXTIME:
                case MySqlParser.GEOMCOLLFROMTEXT:
                case MySqlParser.GEOMCOLLFROMWKB:
                case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.GEOMETRYFROMTEXT:
                case MySqlParser.GEOMETRYFROMWKB:
                case MySqlParser.GEOMETRYN:
                case MySqlParser.GEOMETRYTYPE:
                case MySqlParser.GEOMFROMTEXT:
                case MySqlParser.GEOMFROMWKB:
                case MySqlParser.GET_FORMAT:
                case MySqlParser.GET_LOCK:
                case MySqlParser.GLENGTH:
                case MySqlParser.GREATEST:
                case MySqlParser.GTID_SUBSET:
                case MySqlParser.GTID_SUBTRACT:
                case MySqlParser.HEX:
                case MySqlParser.IFNULL:
                case MySqlParser.INET6_ATON:
                case MySqlParser.INET6_NTOA:
                case MySqlParser.INET_ATON:
                case MySqlParser.INET_NTOA:
                case MySqlParser.INSTR:
                case MySqlParser.INTERIORRINGN:
                case MySqlParser.INTERSECTS:
                case MySqlParser.ISCLOSED:
                case MySqlParser.ISEMPTY:
                case MySqlParser.ISNULL:
                case MySqlParser.ISSIMPLE:
                case MySqlParser.IS_FREE_LOCK:
                case MySqlParser.IS_IPV4:
                case MySqlParser.IS_IPV4_COMPAT:
                case MySqlParser.IS_IPV4_MAPPED:
                case MySqlParser.IS_IPV6:
                case MySqlParser.IS_USED_LOCK:
                case MySqlParser.LAST_INSERT_ID:
                case MySqlParser.LCASE:
                case MySqlParser.LEAST:
                case MySqlParser.LENGTH:
                case MySqlParser.LINEFROMTEXT:
                case MySqlParser.LINEFROMWKB:
                case MySqlParser.LINESTRINGFROMTEXT:
                case MySqlParser.LINESTRINGFROMWKB:
                case MySqlParser.LN:
                case MySqlParser.LOAD_FILE:
                case MySqlParser.LOCATE:
                case MySqlParser.LOG:
                case MySqlParser.LOG10:
                case MySqlParser.LOG2:
                case MySqlParser.LOWER:
                case MySqlParser.LPAD:
                case MySqlParser.LTRIM:
                case MySqlParser.MAKEDATE:
                case MySqlParser.MAKETIME:
                case MySqlParser.MAKE_SET:
                case MySqlParser.MASTER_POS_WAIT:
                case MySqlParser.MBRCONTAINS:
                case MySqlParser.MBRDISJOINT:
                case MySqlParser.MBREQUAL:
                case MySqlParser.MBRINTERSECTS:
                case MySqlParser.MBROVERLAPS:
                case MySqlParser.MBRTOUCHES:
                case MySqlParser.MBRWITHIN:
                case MySqlParser.MD5:
                case MySqlParser.MLINEFROMTEXT:
                case MySqlParser.MLINEFROMWKB:
                case MySqlParser.MONTHNAME:
                case MySqlParser.MPOINTFROMTEXT:
                case MySqlParser.MPOINTFROMWKB:
                case MySqlParser.MPOLYFROMTEXT:
                case MySqlParser.MPOLYFROMWKB:
                case MySqlParser.MULTILINESTRINGFROMTEXT:
                case MySqlParser.MULTILINESTRINGFROMWKB:
                case MySqlParser.MULTIPOINTFROMTEXT:
                case MySqlParser.MULTIPOINTFROMWKB:
                case MySqlParser.MULTIPOLYGONFROMTEXT:
                case MySqlParser.MULTIPOLYGONFROMWKB:
                case MySqlParser.NAME_CONST:
                case MySqlParser.NULLIF:
                case MySqlParser.NUMGEOMETRIES:
                case MySqlParser.NUMINTERIORRINGS:
                case MySqlParser.NUMPOINTS:
                case MySqlParser.OCT:
                case MySqlParser.OCTET_LENGTH:
                case MySqlParser.ORD:
                case MySqlParser.OVERLAPS:
                case MySqlParser.PERIOD_ADD:
                case MySqlParser.PERIOD_DIFF:
                case MySqlParser.PI:
                case MySqlParser.POINTFROMTEXT:
                case MySqlParser.POINTFROMWKB:
                case MySqlParser.POINTN:
                case MySqlParser.POLYFROMTEXT:
                case MySqlParser.POLYFROMWKB:
                case MySqlParser.POLYGONFROMTEXT:
                case MySqlParser.POLYGONFROMWKB:
                case MySqlParser.POW:
                case MySqlParser.POWER:
                case MySqlParser.QUOTE:
                case MySqlParser.RADIANS:
                case MySqlParser.RAND:
                case MySqlParser.RANDOM:
                case MySqlParser.RANDOM_BYTES:
                case MySqlParser.RELEASE_LOCK:
                case MySqlParser.REVERSE:
                case MySqlParser.ROUND:
                case MySqlParser.ROW_COUNT:
                case MySqlParser.RPAD:
                case MySqlParser.RTRIM:
                case MySqlParser.SEC_TO_TIME:
                case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                case MySqlParser.SESSION_USER:
                case MySqlParser.SHA:
                case MySqlParser.SHA1:
                case MySqlParser.SHA2:
                case MySqlParser.SCHEMA_NAME:
                case MySqlParser.SIGN:
                case MySqlParser.SIN:
                case MySqlParser.SLEEP:
                case MySqlParser.SOUNDEX:
                case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
                case MySqlParser.SQRT:
                case MySqlParser.SRID:
                case MySqlParser.STARTPOINT:
                case MySqlParser.STRCMP:
                case MySqlParser.STR_TO_DATE:
                case MySqlParser.ST_AREA:
                case MySqlParser.ST_ASBINARY:
                case MySqlParser.ST_ASTEXT:
                case MySqlParser.ST_ASWKB:
                case MySqlParser.ST_ASWKT:
                case MySqlParser.ST_BUFFER:
                case MySqlParser.ST_CENTROID:
                case MySqlParser.ST_CONTAINS:
                case MySqlParser.ST_CROSSES:
                case MySqlParser.ST_DIFFERENCE:
                case MySqlParser.ST_DIMENSION:
                case MySqlParser.ST_DISJOINT:
                case MySqlParser.ST_DISTANCE:
                case MySqlParser.ST_ENDPOINT:
                case MySqlParser.ST_ENVELOPE:
                case MySqlParser.ST_EQUALS:
                case MySqlParser.ST_EXTERIORRING:
                case MySqlParser.ST_GEOMCOLLFROMTEXT:
                case MySqlParser.ST_GEOMCOLLFROMTXT:
                case MySqlParser.ST_GEOMCOLLFROMWKB:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
                case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
                case MySqlParser.ST_GEOMETRYFROMTEXT:
                case MySqlParser.ST_GEOMETRYFROMWKB:
                case MySqlParser.ST_GEOMETRYN:
                case MySqlParser.ST_GEOMETRYTYPE:
                case MySqlParser.ST_GEOMFROMTEXT:
                case MySqlParser.ST_GEOMFROMWKB:
                case MySqlParser.ST_INTERIORRINGN:
                case MySqlParser.ST_INTERSECTION:
                case MySqlParser.ST_INTERSECTS:
                case MySqlParser.ST_ISCLOSED:
                case MySqlParser.ST_ISEMPTY:
                case MySqlParser.ST_ISSIMPLE:
                case MySqlParser.ST_LINEFROMTEXT:
                case MySqlParser.ST_LINEFROMWKB:
                case MySqlParser.ST_LINESTRINGFROMTEXT:
                case MySqlParser.ST_LINESTRINGFROMWKB:
                case MySqlParser.ST_NUMGEOMETRIES:
                case MySqlParser.ST_NUMINTERIORRING:
                case MySqlParser.ST_NUMINTERIORRINGS:
                case MySqlParser.ST_NUMPOINTS:
                case MySqlParser.ST_OVERLAPS:
                case MySqlParser.ST_POINTFROMTEXT:
                case MySqlParser.ST_POINTFROMWKB:
                case MySqlParser.ST_POINTN:
                case MySqlParser.ST_POLYFROMTEXT:
                case MySqlParser.ST_POLYFROMWKB:
                case MySqlParser.ST_POLYGONFROMTEXT:
                case MySqlParser.ST_POLYGONFROMWKB:
                case MySqlParser.ST_SRID:
                case MySqlParser.ST_STARTPOINT:
                case MySqlParser.ST_SYMDIFFERENCE:
                case MySqlParser.ST_TOUCHES:
                case MySqlParser.ST_UNION:
                case MySqlParser.ST_WITHIN:
                case MySqlParser.ST_X:
                case MySqlParser.ST_Y:
                case MySqlParser.SUBDATE:
                case MySqlParser.SUBSTRING_INDEX:
                case MySqlParser.SUBTIME:
                case MySqlParser.SYSTEM_USER:
                case MySqlParser.TAN:
                case MySqlParser.TIMEDIFF:
                case MySqlParser.TIMESTAMPADD:
                case MySqlParser.TIMESTAMPDIFF:
                case MySqlParser.TIME_FORMAT:
                case MySqlParser.TIME_TO_SEC:
                case MySqlParser.TOUCHES:
                case MySqlParser.TO_BASE64:
                case MySqlParser.TO_DAYS:
                case MySqlParser.TO_SECONDS:
                case MySqlParser.TP_CONNECTION_ADMIN:
                case MySqlParser.UCASE:
                case MySqlParser.UNCOMPRESS:
                case MySqlParser.UNCOMPRESSED_LENGTH:
                case MySqlParser.UNHEX:
                case MySqlParser.UNIX_TIMESTAMP:
                case MySqlParser.UPDATEXML:
                case MySqlParser.UPPER:
                case MySqlParser.UUID:
                case MySqlParser.UUID_SHORT:
                case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
                case MySqlParser.VERSION:
                case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case MySqlParser.WEEKDAY:
                case MySqlParser.WEEKOFYEAR:
                case MySqlParser.WEIGHT_STRING:
                case MySqlParser.WITHIN:
                case MySqlParser.YEARWEEK:
                case MySqlParser.Y_FUNCTION:
                case MySqlParser.X_FUNCTION:
                case MySqlParser.MOD:
                case MySqlParser.AT_SIGN:
                case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.ID:
                case MySqlParser.LOCAL_ID:
                case MySqlParser.GLOBAL_ID:
                    {
                    this.state = 6209;
                    this.variableClause();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6212;
                this.variableClause();
                this.state = 6213;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 6214;
                this.diagnosticsConditionInformationName();
                this.state = 6222;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 6215;
                    this.match(MySqlParser.COMMA);
                    this.state = 6216;
                    this.variableClause();
                    this.state = 6217;
                    this.match(MySqlParser.EQUAL_SYMBOL);
                    this.state = 6218;
                    this.diagnosticsConditionInformationName();
                    }
                    }
                    this.state = 6224;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public diagnosticsConditionInformationName(): DiagnosticsConditionInformationNameContext {
        let localContext = new DiagnosticsConditionInformationNameContext(this.context, this.state);
        this.enterRule(localContext, 544, MySqlParser.RULE_diagnosticsConditionInformationName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6227;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 272105729) !== 0) || _la === 507 || _la === 515 || _la === 592 || _la === 639 || _la === 646 || _la === 836 || _la === 1005)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeObjectClause(): DescribeObjectClauseContext {
        let localContext = new DescribeObjectClauseContext(this.context, this.state);
        this.enterRule(localContext, 546, MySqlParser.RULE_describeObjectClause);
        try {
            this.state = 6239;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.DELETE:
            case MySqlParser.INSERT:
            case MySqlParser.REPLACE:
            case MySqlParser.SELECT:
            case MySqlParser.UPDATE:
            case MySqlParser.LR_BRACKET:
                localContext = new DescribeStatementsContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6234;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.SELECT:
                case MySqlParser.LR_BRACKET:
                    {
                    this.state = 6229;
                    this.selectStatement();
                    }
                    break;
                case MySqlParser.DELETE:
                    {
                    this.state = 6230;
                    this.deleteStatement();
                    }
                    break;
                case MySqlParser.INSERT:
                    {
                    this.state = 6231;
                    this.insertStatement();
                    }
                    break;
                case MySqlParser.REPLACE:
                    {
                    this.state = 6232;
                    this.replaceStatement();
                    }
                    break;
                case MySqlParser.UPDATE:
                    {
                    this.state = 6233;
                    this.updateStatement();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case MySqlParser.FOR:
                localContext = new DescribeConnectionContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6236;
                this.match(MySqlParser.FOR);
                this.state = 6237;
                this.match(MySqlParser.CONNECTION);
                this.state = 6238;
                this.uid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullId(): FullIdContext {
        let localContext = new FullIdContext(this.context, this.state);
        this.enterRule(localContext, 548, MySqlParser.RULE_fullId);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6241;
            this.uid();
            this.state = 6245;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 909, this.context) ) {
            case 1:
                {
                this.state = 6242;
                this.match(MySqlParser.DOT_ID);
                }
                break;
            case 2:
                {
                this.state = 6243;
                this.match(MySqlParser.DOT);
                this.state = 6244;
                this.uid();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableName(): TableNameContext {
        let localContext = new TableNameContext(this.context, this.state);
        this.enterRule(localContext, 550, MySqlParser.RULE_tableName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6247;
            this.fullId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableNames(): TableNamesContext {
        let localContext = new TableNamesContext(this.context, this.state);
        this.enterRule(localContext, 552, MySqlParser.RULE_tableNames);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6249;
            this.tableName();
            this.state = 6254;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 6250;
                this.match(MySqlParser.COMMA);
                this.state = 6251;
                this.tableName();
                }
                }
                this.state = 6256;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleName(): RoleNameContext {
        let localContext = new RoleNameContext(this.context, this.state);
        this.enterRule(localContext, 554, MySqlParser.RULE_roleName);
        try {
            this.state = 6259;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 911, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6257;
                this.userName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6258;
                this.uid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullColumnName(): FullColumnNameContext {
        let localContext = new FullColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 556, MySqlParser.RULE_fullColumnName);
        try {
            this.state = 6275;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 916, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6261;
                this.uid();
                this.state = 6266;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 913, this.context) ) {
                case 1:
                    {
                    this.state = 6262;
                    this.dottedId();
                    this.state = 6264;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 912, this.context) ) {
                    case 1:
                        {
                        this.state = 6263;
                        this.dottedId();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6269;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 914, this.context) ) {
                case 1:
                    {
                    this.state = 6268;
                    this.matchWildcard();
                    }
                    break;
                }
                this.state = 6271;
                this.dottedId();
                this.state = 6273;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 915, this.context) ) {
                case 1:
                    {
                    this.state = 6272;
                    this.dottedId();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexColumnName(): IndexColumnNameContext {
        let localContext = new IndexColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 558, MySqlParser.RULE_indexColumnName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6288;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 919, this.context) ) {
            case 1:
                {
                this.state = 6279;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 917, this.context) ) {
                case 1:
                    {
                    this.state = 6277;
                    this.uid();
                    }
                    break;
                case 2:
                    {
                    this.state = 6278;
                    this.match(MySqlParser.STRING_LITERAL);
                    }
                    break;
                }
                this.state = 6285;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1133) {
                    {
                    this.state = 6281;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 6282;
                    this.decimalLiteral();
                    this.state = 6283;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 6287;
                this.expression(0);
                }
                break;
            }
            this.state = 6291;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 13 || _la === 45) {
                {
                this.state = 6290;
                localContext._sortType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 13 || _la === 45)) {
                    localContext._sortType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleUserName(): SimpleUserNameContext {
        let localContext = new SimpleUserNameContext(this.context, this.state);
        this.enterRule(localContext, 560, MySqlParser.RULE_simpleUserName);
        try {
            this.state = 6297;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 921, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6293;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6294;
                this.match(MySqlParser.ID);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6295;
                this.match(MySqlParser.ADMIN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6296;
                this.keywordsCanBeId();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hostName(): HostNameContext {
        let localContext = new HostNameContext(this.context, this.state);
        this.enterRule(localContext, 562, MySqlParser.RULE_hostName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6299;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 1137)) & ~0x1F) === 0 && ((1 << (_la - 1137)) & 6291457) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userName(): UserNameContext {
        let localContext = new UserNameContext(this.context, this.state);
        this.enterRule(localContext, 564, MySqlParser.RULE_userName);
        try {
            this.state = 6306;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 922, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6301;
                this.simpleUserName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6302;
                this.simpleUserName();
                this.state = 6303;
                this.hostName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6305;
                this.currentUserExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mysqlVariable(): MysqlVariableContext {
        let localContext = new MysqlVariableContext(this.context, this.state);
        this.enterRule(localContext, 566, MySqlParser.RULE_mysqlVariable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6308;
            _la = this.tokenStream.LA(1);
            if(!(_la === 1159 || _la === 1160)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public charsetName(): CharsetNameContext {
        let localContext = new CharsetNameContext(this.context, this.state);
        this.enterRule(localContext, 568, MySqlParser.RULE_charsetName);
        try {
            this.state = 6314;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 923, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6310;
                this.match(MySqlParser.BINARY);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6311;
                this.charsetNameBase();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6312;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6313;
                this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collationName(): CollationNameContext {
        let localContext = new CollationNameContext(this.context, this.state);
        this.enterRule(localContext, 570, MySqlParser.RULE_collationName);
        try {
            this.state = 6318;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 924, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6316;
                this.uid();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6317;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineName(): EngineNameContext {
        let localContext = new EngineNameContext(this.context, this.state);
        this.enterRule(localContext, 572, MySqlParser.RULE_engineName);
        try {
            this.state = 6323;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.CONNECT:
            case MySqlParser.ARCHIVE:
            case MySqlParser.BLACKHOLE:
            case MySqlParser.CSV:
            case MySqlParser.FEDERATED:
            case MySqlParser.INNODB:
            case MySqlParser.MEMORY:
            case MySqlParser.MRG_MYISAM:
            case MySqlParser.MYISAM:
            case MySqlParser.NDB:
            case MySqlParser.NDBCLUSTER:
            case MySqlParser.PERFORMANCE_SCHEMA:
            case MySqlParser.TOKUDB:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6320;
                this.engineNameBase();
                }
                break;
            case MySqlParser.ID:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6321;
                this.match(MySqlParser.ID);
                }
                break;
            case MySqlParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6322;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineNameBase(): EngineNameBaseContext {
        let localContext = new EngineNameBaseContext(this.context, this.state);
        this.enterRule(localContext, 574, MySqlParser.RULE_engineNameBase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6325;
            _la = this.tokenStream.LA(1);
            if(!(_la === 375 || ((((_la - 787)) & ~0x1F) === 0 && ((1 << (_la - 787)) & 4095) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uuidSet(): UuidSetContext {
        let localContext = new UuidSetContext(this.context, this.state);
        this.enterRule(localContext, 576, MySqlParser.RULE_uuidSet);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6327;
            this.decimalLiteral();
            this.state = 6328;
            this.match(MySqlParser.MINUS);
            this.state = 6329;
            this.decimalLiteral();
            this.state = 6330;
            this.match(MySqlParser.MINUS);
            this.state = 6331;
            this.decimalLiteral();
            this.state = 6332;
            this.match(MySqlParser.MINUS);
            this.state = 6333;
            this.decimalLiteral();
            this.state = 6334;
            this.match(MySqlParser.MINUS);
            this.state = 6335;
            this.decimalLiteral();
            this.state = 6341;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 6336;
                this.match(MySqlParser.COLON_SYMB);
                this.state = 6337;
                this.decimalLiteral();
                this.state = 6338;
                this.match(MySqlParser.MINUS);
                this.state = 6339;
                this.decimalLiteral();
                }
                }
                this.state = 6343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 1144);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xid(): XidContext {
        let localContext = new XidContext(this.context, this.state);
        this.enterRule(localContext, 578, MySqlParser.RULE_xid);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6345;
            localContext._globalTableUid = this.xuidStringId();
            this.state = 6352;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1135) {
                {
                this.state = 6346;
                this.match(MySqlParser.COMMA);
                this.state = 6347;
                localContext._qualifier = this.xuidStringId();
                this.state = 6350;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1135) {
                    {
                    this.state = 6348;
                    this.match(MySqlParser.COMMA);
                    this.state = 6349;
                    localContext._idFormat = this.decimalLiteral();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xuidStringId(): XuidStringIdContext {
        let localContext = new XuidStringIdContext(this.context, this.state);
        this.enterRule(localContext, 580, MySqlParser.RULE_xuidStringId);
        let _la: number;
        try {
            this.state = 6361;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6354;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            case MySqlParser.BIT_STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6355;
                this.match(MySqlParser.BIT_STRING);
                }
                break;
            case MySqlParser.HEXADECIMAL_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6357;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 6356;
                    this.match(MySqlParser.HEXADECIMAL_LITERAL);
                    }
                    }
                    this.state = 6359;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 1150);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public authPlugin(): AuthPluginContext {
        let localContext = new AuthPluginContext(this.context, this.state);
        this.enterRule(localContext, 582, MySqlParser.RULE_authPlugin);
        try {
            this.state = 6365;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 931, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6363;
                this.uid();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6364;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uid(): UidContext {
        let localContext = new UidContext(this.context, this.state);
        this.enterRule(localContext, 584, MySqlParser.RULE_uid);
        try {
            this.state = 6370;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.ARRAY:
            case MySqlParser.ATTRIBUTE:
            case MySqlParser.BUCKETS:
            case MySqlParser.CONDITION:
            case MySqlParser.CURRENT:
            case MySqlParser.CURRENT_USER:
            case MySqlParser.DATABASE:
            case MySqlParser.DEFAULT:
            case MySqlParser.DIAGNOSTICS:
            case MySqlParser.EMPTY:
            case MySqlParser.ENFORCED:
            case MySqlParser.EXCEPT:
            case MySqlParser.GROUP:
            case MySqlParser.IF:
            case MySqlParser.IGNORED:
            case MySqlParser.INSERT:
            case MySqlParser.LATERAL:
            case MySqlParser.LEFT:
            case MySqlParser.NUMBER:
            case MySqlParser.OPTIONAL:
            case MySqlParser.ORDER:
            case MySqlParser.PRIMARY:
            case MySqlParser.REPEAT:
            case MySqlParser.REPLACE:
            case MySqlParser.RIGHT:
            case MySqlParser.SCHEMA:
            case MySqlParser.SKIP_QUERY_REWRITE:
            case MySqlParser.STACKED:
            case MySqlParser.DATE:
            case MySqlParser.TIME:
            case MySqlParser.TIMESTAMP:
            case MySqlParser.DATETIME:
            case MySqlParser.YEAR:
            case MySqlParser.BINARY:
            case MySqlParser.TEXT:
            case MySqlParser.ENUM:
            case MySqlParser.SERIAL:
            case MySqlParser.JSON_ARRAY:
            case MySqlParser.JSON_ARRAYAGG:
            case MySqlParser.JSON_ARRAY_APPEND:
            case MySqlParser.JSON_ARRAY_INSERT:
            case MySqlParser.JSON_CONTAINS:
            case MySqlParser.JSON_CONTAINS_PATH:
            case MySqlParser.JSON_DEPTH:
            case MySqlParser.JSON_EXTRACT:
            case MySqlParser.JSON_INSERT:
            case MySqlParser.JSON_KEYS:
            case MySqlParser.JSON_LENGTH:
            case MySqlParser.JSON_MERGE:
            case MySqlParser.JSON_MERGE_PATCH:
            case MySqlParser.JSON_MERGE_PRESERVE:
            case MySqlParser.JSON_OBJECT:
            case MySqlParser.JSON_OBJECTAGG:
            case MySqlParser.JSON_OVERLAPS:
            case MySqlParser.JSON_PRETTY:
            case MySqlParser.JSON_QUOTE:
            case MySqlParser.JSON_REMOVE:
            case MySqlParser.JSON_REPLACE:
            case MySqlParser.JSON_SCHEMA_VALID:
            case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
            case MySqlParser.JSON_SEARCH:
            case MySqlParser.JSON_SET:
            case MySqlParser.JSON_STORAGE_FREE:
            case MySqlParser.JSON_STORAGE_SIZE:
            case MySqlParser.JSON_TABLE:
            case MySqlParser.JSON_TYPE:
            case MySqlParser.JSON_UNQUOTE:
            case MySqlParser.JSON_VALID:
            case MySqlParser.JSON_VALUE:
            case MySqlParser.NESTED:
            case MySqlParser.ORDINALITY:
            case MySqlParser.PATH:
            case MySqlParser.AVG:
            case MySqlParser.BIT_AND:
            case MySqlParser.BIT_OR:
            case MySqlParser.BIT_XOR:
            case MySqlParser.COUNT:
            case MySqlParser.CUME_DIST:
            case MySqlParser.DENSE_RANK:
            case MySqlParser.FIRST_VALUE:
            case MySqlParser.GROUP_CONCAT:
            case MySqlParser.LAG:
            case MySqlParser.LAST_VALUE:
            case MySqlParser.LEAD:
            case MySqlParser.MAX:
            case MySqlParser.MIN:
            case MySqlParser.NTILE:
            case MySqlParser.NTH_VALUE:
            case MySqlParser.PERCENT_RANK:
            case MySqlParser.RANK:
            case MySqlParser.ROW_NUMBER:
            case MySqlParser.STD:
            case MySqlParser.STDDEV:
            case MySqlParser.STDDEV_POP:
            case MySqlParser.STDDEV_SAMP:
            case MySqlParser.SUM:
            case MySqlParser.VAR_POP:
            case MySqlParser.VAR_SAMP:
            case MySqlParser.VARIANCE:
            case MySqlParser.CURRENT_DATE:
            case MySqlParser.CURRENT_TIME:
            case MySqlParser.CURRENT_TIMESTAMP:
            case MySqlParser.LOCALTIME:
            case MySqlParser.CURDATE:
            case MySqlParser.CURTIME:
            case MySqlParser.DATE_ADD:
            case MySqlParser.DATE_SUB:
            case MySqlParser.LOCALTIMESTAMP:
            case MySqlParser.NOW:
            case MySqlParser.POSITION:
            case MySqlParser.SUBSTR:
            case MySqlParser.SUBSTRING:
            case MySqlParser.SYSDATE:
            case MySqlParser.TRIM:
            case MySqlParser.UTC_DATE:
            case MySqlParser.UTC_TIME:
            case MySqlParser.UTC_TIMESTAMP:
            case MySqlParser.ACCOUNT:
            case MySqlParser.ACTION:
            case MySqlParser.AFTER:
            case MySqlParser.AGGREGATE:
            case MySqlParser.ALGORITHM:
            case MySqlParser.ANY:
            case MySqlParser.AT:
            case MySqlParser.AUTHORS:
            case MySqlParser.AUTOCOMMIT:
            case MySqlParser.AUTOEXTEND_SIZE:
            case MySqlParser.AUTO_INCREMENT:
            case MySqlParser.AVG_ROW_LENGTH:
            case MySqlParser.BEGIN:
            case MySqlParser.BINLOG:
            case MySqlParser.BIT:
            case MySqlParser.BLOCK:
            case MySqlParser.BOOL:
            case MySqlParser.BOOLEAN:
            case MySqlParser.BTREE:
            case MySqlParser.CACHE:
            case MySqlParser.CASCADED:
            case MySqlParser.CHAIN:
            case MySqlParser.CHANGED:
            case MySqlParser.CHANNEL:
            case MySqlParser.CHECKSUM:
            case MySqlParser.PAGE_CHECKSUM:
            case MySqlParser.CIPHER:
            case MySqlParser.CLASS_ORIGIN:
            case MySqlParser.CLIENT:
            case MySqlParser.CLOSE:
            case MySqlParser.CLUSTERING:
            case MySqlParser.COALESCE:
            case MySqlParser.CODE:
            case MySqlParser.COLUMNS:
            case MySqlParser.COLUMN_FORMAT:
            case MySqlParser.COLUMN_NAME:
            case MySqlParser.COMMENT:
            case MySqlParser.COMMIT:
            case MySqlParser.COMPACT:
            case MySqlParser.COMPLETION:
            case MySqlParser.COMPRESSED:
            case MySqlParser.COMPRESSION:
            case MySqlParser.CONCURRENT:
            case MySqlParser.CONNECT:
            case MySqlParser.CONNECTION:
            case MySqlParser.CONSISTENT:
            case MySqlParser.CONSTRAINT_CATALOG:
            case MySqlParser.CONSTRAINT_SCHEMA:
            case MySqlParser.CONSTRAINT_NAME:
            case MySqlParser.CONTAINS:
            case MySqlParser.CONTEXT:
            case MySqlParser.CONTRIBUTORS:
            case MySqlParser.COPY:
            case MySqlParser.CPU:
            case MySqlParser.CURSOR_NAME:
            case MySqlParser.DATA:
            case MySqlParser.DATAFILE:
            case MySqlParser.DEALLOCATE:
            case MySqlParser.DEFAULT_AUTH:
            case MySqlParser.DEFINER:
            case MySqlParser.DELAY_KEY_WRITE:
            case MySqlParser.DES_KEY_FILE:
            case MySqlParser.DIRECTORY:
            case MySqlParser.DISABLE:
            case MySqlParser.DISCARD:
            case MySqlParser.DISK:
            case MySqlParser.DO:
            case MySqlParser.DUMPFILE:
            case MySqlParser.DUPLICATE:
            case MySqlParser.DYNAMIC:
            case MySqlParser.ENABLE:
            case MySqlParser.ENCRYPTION:
            case MySqlParser.END:
            case MySqlParser.ENDS:
            case MySqlParser.ENGINE:
            case MySqlParser.ENGINES:
            case MySqlParser.ERROR:
            case MySqlParser.ERRORS:
            case MySqlParser.ESCAPE:
            case MySqlParser.EVEN:
            case MySqlParser.EVENT:
            case MySqlParser.EVENTS:
            case MySqlParser.EVERY:
            case MySqlParser.EXCHANGE:
            case MySqlParser.EXCLUSIVE:
            case MySqlParser.EXPIRE:
            case MySqlParser.EXPORT:
            case MySqlParser.EXTENDED:
            case MySqlParser.EXTENT_SIZE:
            case MySqlParser.FAILED_LOGIN_ATTEMPTS:
            case MySqlParser.FAST:
            case MySqlParser.FAULTS:
            case MySqlParser.FIELDS:
            case MySqlParser.FILE_BLOCK_SIZE:
            case MySqlParser.FILTER:
            case MySqlParser.FIRST:
            case MySqlParser.FIXED:
            case MySqlParser.FLUSH:
            case MySqlParser.FOLLOWS:
            case MySqlParser.FOUND:
            case MySqlParser.FULL:
            case MySqlParser.FUNCTION:
            case MySqlParser.GENERAL:
            case MySqlParser.GLOBAL:
            case MySqlParser.GRANTS:
            case MySqlParser.GROUP_REPLICATION:
            case MySqlParser.HANDLER:
            case MySqlParser.HASH:
            case MySqlParser.HELP:
            case MySqlParser.HISTORY:
            case MySqlParser.HOST:
            case MySqlParser.HOSTS:
            case MySqlParser.IDENTIFIED:
            case MySqlParser.IGNORE_SERVER_IDS:
            case MySqlParser.IMPORT:
            case MySqlParser.INDEXES:
            case MySqlParser.INITIAL_SIZE:
            case MySqlParser.INPLACE:
            case MySqlParser.INSERT_METHOD:
            case MySqlParser.INSTALL:
            case MySqlParser.INSTANCE:
            case MySqlParser.INSTANT:
            case MySqlParser.INVISIBLE:
            case MySqlParser.INVOKER:
            case MySqlParser.IO:
            case MySqlParser.IO_THREAD:
            case MySqlParser.IPC:
            case MySqlParser.ISOLATION:
            case MySqlParser.ISSUER:
            case MySqlParser.JSON:
            case MySqlParser.KEY_BLOCK_SIZE:
            case MySqlParser.LANGUAGE:
            case MySqlParser.LAST:
            case MySqlParser.LEAVES:
            case MySqlParser.LESS:
            case MySqlParser.LEVEL:
            case MySqlParser.LIST:
            case MySqlParser.LOCAL:
            case MySqlParser.LOGFILE:
            case MySqlParser.LOGS:
            case MySqlParser.MASTER:
            case MySqlParser.MASTER_AUTO_POSITION:
            case MySqlParser.MASTER_CONNECT_RETRY:
            case MySqlParser.MASTER_DELAY:
            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
            case MySqlParser.MASTER_HOST:
            case MySqlParser.MASTER_LOG_FILE:
            case MySqlParser.MASTER_LOG_POS:
            case MySqlParser.MASTER_PASSWORD:
            case MySqlParser.MASTER_PORT:
            case MySqlParser.MASTER_RETRY_COUNT:
            case MySqlParser.MASTER_SSL:
            case MySqlParser.MASTER_SSL_CA:
            case MySqlParser.MASTER_SSL_CAPATH:
            case MySqlParser.MASTER_SSL_CERT:
            case MySqlParser.MASTER_SSL_CIPHER:
            case MySqlParser.MASTER_SSL_CRL:
            case MySqlParser.MASTER_SSL_CRLPATH:
            case MySqlParser.MASTER_SSL_KEY:
            case MySqlParser.MASTER_TLS_VERSION:
            case MySqlParser.MASTER_USER:
            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
            case MySqlParser.MAX_QUERIES_PER_HOUR:
            case MySqlParser.MAX_ROWS:
            case MySqlParser.MAX_SIZE:
            case MySqlParser.MAX_UPDATES_PER_HOUR:
            case MySqlParser.MAX_USER_CONNECTIONS:
            case MySqlParser.MEDIUM:
            case MySqlParser.MEMBER:
            case MySqlParser.MERGE:
            case MySqlParser.MESSAGE_TEXT:
            case MySqlParser.MID:
            case MySqlParser.MIGRATE:
            case MySqlParser.MIN_ROWS:
            case MySqlParser.MODE:
            case MySqlParser.MODIFY:
            case MySqlParser.MUTEX:
            case MySqlParser.MYSQL:
            case MySqlParser.MYSQL_ERRNO:
            case MySqlParser.NAME:
            case MySqlParser.NAMES:
            case MySqlParser.NCHAR:
            case MySqlParser.NEVER:
            case MySqlParser.NEXT:
            case MySqlParser.NO:
            case MySqlParser.NOCOPY:
            case MySqlParser.NOWAIT:
            case MySqlParser.NODEGROUP:
            case MySqlParser.NONE:
            case MySqlParser.ODBC:
            case MySqlParser.OFFLINE:
            case MySqlParser.OFFSET:
            case MySqlParser.OF:
            case MySqlParser.OJ:
            case MySqlParser.OLD_PASSWORD:
            case MySqlParser.ONE:
            case MySqlParser.ONLINE:
            case MySqlParser.ONLY:
            case MySqlParser.OPEN:
            case MySqlParser.OPTIMIZER_COSTS:
            case MySqlParser.OPTIONS:
            case MySqlParser.OWNER:
            case MySqlParser.PACK_KEYS:
            case MySqlParser.PAGE:
            case MySqlParser.PARSER:
            case MySqlParser.PARTIAL:
            case MySqlParser.PARTITIONING:
            case MySqlParser.PARTITIONS:
            case MySqlParser.PASSWORD:
            case MySqlParser.PASSWORD_LOCK_TIME:
            case MySqlParser.PHASE:
            case MySqlParser.PLUGIN:
            case MySqlParser.PLUGIN_DIR:
            case MySqlParser.PLUGINS:
            case MySqlParser.PORT:
            case MySqlParser.PRECEDES:
            case MySqlParser.PREPARE:
            case MySqlParser.PRESERVE:
            case MySqlParser.PREV:
            case MySqlParser.PROCESSLIST:
            case MySqlParser.PROFILE:
            case MySqlParser.PROFILES:
            case MySqlParser.PROXY:
            case MySqlParser.QUERY:
            case MySqlParser.QUICK:
            case MySqlParser.REBUILD:
            case MySqlParser.RECOVER:
            case MySqlParser.RECURSIVE:
            case MySqlParser.REDO_BUFFER_SIZE:
            case MySqlParser.REDUNDANT:
            case MySqlParser.RELAY:
            case MySqlParser.RELAY_LOG_FILE:
            case MySqlParser.RELAY_LOG_POS:
            case MySqlParser.RELAYLOG:
            case MySqlParser.REMOVE:
            case MySqlParser.REORGANIZE:
            case MySqlParser.REPAIR:
            case MySqlParser.REPLICATE_DO_DB:
            case MySqlParser.REPLICATE_DO_TABLE:
            case MySqlParser.REPLICATE_IGNORE_DB:
            case MySqlParser.REPLICATE_IGNORE_TABLE:
            case MySqlParser.REPLICATE_REWRITE_DB:
            case MySqlParser.REPLICATE_WILD_DO_TABLE:
            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySqlParser.REPLICATION:
            case MySqlParser.RESET:
            case MySqlParser.RESUME:
            case MySqlParser.RETURNED_SQLSTATE:
            case MySqlParser.RETURNS:
            case MySqlParser.REUSE:
            case MySqlParser.ROLE:
            case MySqlParser.ROLLBACK:
            case MySqlParser.ROLLUP:
            case MySqlParser.ROTATE:
            case MySqlParser.ROW:
            case MySqlParser.ROWS:
            case MySqlParser.ROW_FORMAT:
            case MySqlParser.RTREE:
            case MySqlParser.SAVEPOINT:
            case MySqlParser.SCHEDULE:
            case MySqlParser.SECURITY:
            case MySqlParser.SERVER:
            case MySqlParser.SESSION:
            case MySqlParser.SHARE:
            case MySqlParser.SHARED:
            case MySqlParser.SIGNED:
            case MySqlParser.SIMPLE:
            case MySqlParser.SLAVE:
            case MySqlParser.SLOW:
            case MySqlParser.SNAPSHOT:
            case MySqlParser.SOCKET:
            case MySqlParser.SOME:
            case MySqlParser.SONAME:
            case MySqlParser.SOUNDS:
            case MySqlParser.SOURCE:
            case MySqlParser.SQL_AFTER_GTIDS:
            case MySqlParser.SQL_AFTER_MTS_GAPS:
            case MySqlParser.SQL_BEFORE_GTIDS:
            case MySqlParser.SQL_BUFFER_RESULT:
            case MySqlParser.SQL_CACHE:
            case MySqlParser.SQL_NO_CACHE:
            case MySqlParser.SQL_THREAD:
            case MySqlParser.START:
            case MySqlParser.STARTS:
            case MySqlParser.STATS_AUTO_RECALC:
            case MySqlParser.STATS_PERSISTENT:
            case MySqlParser.STATS_SAMPLE_PAGES:
            case MySqlParser.STATUS:
            case MySqlParser.STOP:
            case MySqlParser.STORAGE:
            case MySqlParser.STRING:
            case MySqlParser.SUBCLASS_ORIGIN:
            case MySqlParser.SUBJECT:
            case MySqlParser.SUBPARTITION:
            case MySqlParser.SUBPARTITIONS:
            case MySqlParser.SUSPEND:
            case MySqlParser.SWAPS:
            case MySqlParser.SWITCHES:
            case MySqlParser.TABLE_NAME:
            case MySqlParser.TABLESPACE:
            case MySqlParser.TABLE_TYPE:
            case MySqlParser.TEMPORARY:
            case MySqlParser.TEMPTABLE:
            case MySqlParser.THAN:
            case MySqlParser.TRADITIONAL:
            case MySqlParser.TRANSACTION:
            case MySqlParser.TRANSACTIONAL:
            case MySqlParser.TRIGGERS:
            case MySqlParser.TRUNCATE:
            case MySqlParser.UNBOUNDED:
            case MySqlParser.UNDEFINED:
            case MySqlParser.UNDOFILE:
            case MySqlParser.UNDO_BUFFER_SIZE:
            case MySqlParser.UNINSTALL:
            case MySqlParser.UNKNOWN:
            case MySqlParser.UNTIL:
            case MySqlParser.UPGRADE:
            case MySqlParser.USER:
            case MySqlParser.USE_FRM:
            case MySqlParser.USER_RESOURCES:
            case MySqlParser.VALIDATION:
            case MySqlParser.VALUE:
            case MySqlParser.VARIABLES:
            case MySqlParser.VIEW:
            case MySqlParser.VIRTUAL:
            case MySqlParser.VISIBLE:
            case MySqlParser.WAIT:
            case MySqlParser.WARNINGS:
            case MySqlParser.WITHOUT:
            case MySqlParser.WORK:
            case MySqlParser.WRAPPER:
            case MySqlParser.X509:
            case MySqlParser.XA:
            case MySqlParser.XML:
            case MySqlParser.EUR:
            case MySqlParser.USA:
            case MySqlParser.JIS:
            case MySqlParser.ISO:
            case MySqlParser.INTERNAL:
            case MySqlParser.QUARTER:
            case MySqlParser.MONTH:
            case MySqlParser.DAY:
            case MySqlParser.HOUR:
            case MySqlParser.MINUTE:
            case MySqlParser.WEEK:
            case MySqlParser.SECOND:
            case MySqlParser.MICROSECOND:
            case MySqlParser.ADMIN:
            case MySqlParser.AUDIT_ABORT_EXEMPT:
            case MySqlParser.AUDIT_ADMIN:
            case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
            case MySqlParser.BACKUP_ADMIN:
            case MySqlParser.BINLOG_ADMIN:
            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
            case MySqlParser.CLONE_ADMIN:
            case MySqlParser.CONNECTION_ADMIN:
            case MySqlParser.ENCRYPTION_KEY_ADMIN:
            case MySqlParser.EXECUTE:
            case MySqlParser.FILE:
            case MySqlParser.FIREWALL_ADMIN:
            case MySqlParser.FIREWALL_EXEMPT:
            case MySqlParser.FIREWALL_USER:
            case MySqlParser.GROUP_REPLICATION_ADMIN:
            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
            case MySqlParser.INVOKE:
            case MySqlParser.LAMBDA:
            case MySqlParser.NDB_STORED_USER:
            case MySqlParser.PASSWORDLESS_USER_ADMIN:
            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySqlParser.PRIVILEGES:
            case MySqlParser.PROCESS:
            case MySqlParser.RELOAD:
            case MySqlParser.REPLICATION_APPLIER:
            case MySqlParser.REPLICATION_SLAVE_ADMIN:
            case MySqlParser.RESOURCE_GROUP_ADMIN:
            case MySqlParser.RESOURCE_GROUP_USER:
            case MySqlParser.ROLE_ADMIN:
            case MySqlParser.ROUTINE:
            case MySqlParser.S3:
            case MySqlParser.SESSION_VARIABLES_ADMIN:
            case MySqlParser.SET_USER_ID:
            case MySqlParser.SHOW_ROUTINE:
            case MySqlParser.SHUTDOWN:
            case MySqlParser.SUPER:
            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
            case MySqlParser.TABLES:
            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
            case MySqlParser.VERSION_TOKEN_ADMIN:
            case MySqlParser.XA_RECOVER_ADMIN:
            case MySqlParser.ARMSCII8:
            case MySqlParser.ASCII:
            case MySqlParser.BIG5:
            case MySqlParser.CP1250:
            case MySqlParser.CP1251:
            case MySqlParser.CP1256:
            case MySqlParser.CP1257:
            case MySqlParser.CP850:
            case MySqlParser.CP852:
            case MySqlParser.CP866:
            case MySqlParser.CP932:
            case MySqlParser.DEC8:
            case MySqlParser.EUCJPMS:
            case MySqlParser.EUCKR:
            case MySqlParser.GB18030:
            case MySqlParser.GB2312:
            case MySqlParser.GBK:
            case MySqlParser.GEOSTD8:
            case MySqlParser.GREEK:
            case MySqlParser.HEBREW:
            case MySqlParser.HP8:
            case MySqlParser.KEYBCS2:
            case MySqlParser.KOI8R:
            case MySqlParser.KOI8U:
            case MySqlParser.LATIN1:
            case MySqlParser.LATIN2:
            case MySqlParser.LATIN5:
            case MySqlParser.LATIN7:
            case MySqlParser.MACCE:
            case MySqlParser.MACROMAN:
            case MySqlParser.SJIS:
            case MySqlParser.SWE7:
            case MySqlParser.TIS620:
            case MySqlParser.UCS2:
            case MySqlParser.UJIS:
            case MySqlParser.UTF16:
            case MySqlParser.UTF16LE:
            case MySqlParser.UTF32:
            case MySqlParser.UTF8:
            case MySqlParser.UTF8MB3:
            case MySqlParser.UTF8MB4:
            case MySqlParser.ARCHIVE:
            case MySqlParser.BLACKHOLE:
            case MySqlParser.CSV:
            case MySqlParser.FEDERATED:
            case MySqlParser.INNODB:
            case MySqlParser.MEMORY:
            case MySqlParser.MRG_MYISAM:
            case MySqlParser.MYISAM:
            case MySqlParser.NDB:
            case MySqlParser.NDBCLUSTER:
            case MySqlParser.PERFORMANCE_SCHEMA:
            case MySqlParser.TOKUDB:
            case MySqlParser.REPEATABLE:
            case MySqlParser.COMMITTED:
            case MySqlParser.UNCOMMITTED:
            case MySqlParser.SERIALIZABLE:
            case MySqlParser.GEOMETRYCOLLECTION:
            case MySqlParser.LINESTRING:
            case MySqlParser.MULTILINESTRING:
            case MySqlParser.MULTIPOINT:
            case MySqlParser.MULTIPOLYGON:
            case MySqlParser.POINT:
            case MySqlParser.POLYGON:
            case MySqlParser.ABS:
            case MySqlParser.ACOS:
            case MySqlParser.ADDDATE:
            case MySqlParser.ADDTIME:
            case MySqlParser.AES_DECRYPT:
            case MySqlParser.AES_ENCRYPT:
            case MySqlParser.AREA:
            case MySqlParser.ASBINARY:
            case MySqlParser.ASIN:
            case MySqlParser.ASTEXT:
            case MySqlParser.ASWKB:
            case MySqlParser.ASWKT:
            case MySqlParser.ASYMMETRIC_DECRYPT:
            case MySqlParser.ASYMMETRIC_DERIVE:
            case MySqlParser.ASYMMETRIC_ENCRYPT:
            case MySqlParser.ASYMMETRIC_SIGN:
            case MySqlParser.ASYMMETRIC_VERIFY:
            case MySqlParser.ATAN:
            case MySqlParser.ATAN2:
            case MySqlParser.BENCHMARK:
            case MySqlParser.BIN:
            case MySqlParser.BIT_COUNT:
            case MySqlParser.BIT_LENGTH:
            case MySqlParser.BUFFER:
            case MySqlParser.CATALOG_NAME:
            case MySqlParser.CEIL:
            case MySqlParser.CEILING:
            case MySqlParser.CENTROID:
            case MySqlParser.CHARACTER_LENGTH:
            case MySqlParser.CHARSET:
            case MySqlParser.CHAR_LENGTH:
            case MySqlParser.COERCIBILITY:
            case MySqlParser.COLLATION:
            case MySqlParser.COMPRESS:
            case MySqlParser.CONCAT:
            case MySqlParser.CONCAT_WS:
            case MySqlParser.CONNECTION_ID:
            case MySqlParser.CONV:
            case MySqlParser.CONVERT_TZ:
            case MySqlParser.COS:
            case MySqlParser.COT:
            case MySqlParser.CRC32:
            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySqlParser.CREATE_DH_PARAMETERS:
            case MySqlParser.CREATE_DIGEST:
            case MySqlParser.CROSSES:
            case MySqlParser.DATEDIFF:
            case MySqlParser.DATE_FORMAT:
            case MySqlParser.DAYNAME:
            case MySqlParser.DAYOFMONTH:
            case MySqlParser.DAYOFWEEK:
            case MySqlParser.DAYOFYEAR:
            case MySqlParser.DECODE:
            case MySqlParser.DEGREES:
            case MySqlParser.DES_DECRYPT:
            case MySqlParser.DES_ENCRYPT:
            case MySqlParser.DIMENSION:
            case MySqlParser.DISJOINT:
            case MySqlParser.ELT:
            case MySqlParser.ENCODE:
            case MySqlParser.ENCRYPT:
            case MySqlParser.ENDPOINT:
            case MySqlParser.ENGINE_ATTRIBUTE:
            case MySqlParser.ENVELOPE:
            case MySqlParser.EQUALS:
            case MySqlParser.EXP:
            case MySqlParser.EXPORT_SET:
            case MySqlParser.EXTERIORRING:
            case MySqlParser.EXTRACTVALUE:
            case MySqlParser.FIELD:
            case MySqlParser.FIND_IN_SET:
            case MySqlParser.FLOOR:
            case MySqlParser.FORMAT:
            case MySqlParser.FOUND_ROWS:
            case MySqlParser.FROM_BASE64:
            case MySqlParser.FROM_DAYS:
            case MySqlParser.FROM_UNIXTIME:
            case MySqlParser.GEOMCOLLFROMTEXT:
            case MySqlParser.GEOMCOLLFROMWKB:
            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.GEOMETRYFROMTEXT:
            case MySqlParser.GEOMETRYFROMWKB:
            case MySqlParser.GEOMETRYN:
            case MySqlParser.GEOMETRYTYPE:
            case MySqlParser.GEOMFROMTEXT:
            case MySqlParser.GEOMFROMWKB:
            case MySqlParser.GET_FORMAT:
            case MySqlParser.GET_LOCK:
            case MySqlParser.GLENGTH:
            case MySqlParser.GREATEST:
            case MySqlParser.GTID_SUBSET:
            case MySqlParser.GTID_SUBTRACT:
            case MySqlParser.HEX:
            case MySqlParser.IFNULL:
            case MySqlParser.INET6_ATON:
            case MySqlParser.INET6_NTOA:
            case MySqlParser.INET_ATON:
            case MySqlParser.INET_NTOA:
            case MySqlParser.INSTR:
            case MySqlParser.INTERIORRINGN:
            case MySqlParser.INTERSECTS:
            case MySqlParser.ISCLOSED:
            case MySqlParser.ISEMPTY:
            case MySqlParser.ISNULL:
            case MySqlParser.ISSIMPLE:
            case MySqlParser.IS_FREE_LOCK:
            case MySqlParser.IS_IPV4:
            case MySqlParser.IS_IPV4_COMPAT:
            case MySqlParser.IS_IPV4_MAPPED:
            case MySqlParser.IS_IPV6:
            case MySqlParser.IS_USED_LOCK:
            case MySqlParser.LAST_INSERT_ID:
            case MySqlParser.LCASE:
            case MySqlParser.LEAST:
            case MySqlParser.LENGTH:
            case MySqlParser.LINEFROMTEXT:
            case MySqlParser.LINEFROMWKB:
            case MySqlParser.LINESTRINGFROMTEXT:
            case MySqlParser.LINESTRINGFROMWKB:
            case MySqlParser.LN:
            case MySqlParser.LOAD_FILE:
            case MySqlParser.LOCATE:
            case MySqlParser.LOG:
            case MySqlParser.LOG10:
            case MySqlParser.LOG2:
            case MySqlParser.LOWER:
            case MySqlParser.LPAD:
            case MySqlParser.LTRIM:
            case MySqlParser.MAKEDATE:
            case MySqlParser.MAKETIME:
            case MySqlParser.MAKE_SET:
            case MySqlParser.MASTER_POS_WAIT:
            case MySqlParser.MBRCONTAINS:
            case MySqlParser.MBRDISJOINT:
            case MySqlParser.MBREQUAL:
            case MySqlParser.MBRINTERSECTS:
            case MySqlParser.MBROVERLAPS:
            case MySqlParser.MBRTOUCHES:
            case MySqlParser.MBRWITHIN:
            case MySqlParser.MD5:
            case MySqlParser.MLINEFROMTEXT:
            case MySqlParser.MLINEFROMWKB:
            case MySqlParser.MONTHNAME:
            case MySqlParser.MPOINTFROMTEXT:
            case MySqlParser.MPOINTFROMWKB:
            case MySqlParser.MPOLYFROMTEXT:
            case MySqlParser.MPOLYFROMWKB:
            case MySqlParser.MULTILINESTRINGFROMTEXT:
            case MySqlParser.MULTILINESTRINGFROMWKB:
            case MySqlParser.MULTIPOINTFROMTEXT:
            case MySqlParser.MULTIPOINTFROMWKB:
            case MySqlParser.MULTIPOLYGONFROMTEXT:
            case MySqlParser.MULTIPOLYGONFROMWKB:
            case MySqlParser.NAME_CONST:
            case MySqlParser.NULLIF:
            case MySqlParser.NUMGEOMETRIES:
            case MySqlParser.NUMINTERIORRINGS:
            case MySqlParser.NUMPOINTS:
            case MySqlParser.OCT:
            case MySqlParser.OCTET_LENGTH:
            case MySqlParser.ORD:
            case MySqlParser.OVERLAPS:
            case MySqlParser.PERIOD_ADD:
            case MySqlParser.PERIOD_DIFF:
            case MySqlParser.PI:
            case MySqlParser.POINTFROMTEXT:
            case MySqlParser.POINTFROMWKB:
            case MySqlParser.POINTN:
            case MySqlParser.POLYFROMTEXT:
            case MySqlParser.POLYFROMWKB:
            case MySqlParser.POLYGONFROMTEXT:
            case MySqlParser.POLYGONFROMWKB:
            case MySqlParser.POW:
            case MySqlParser.POWER:
            case MySqlParser.QUOTE:
            case MySqlParser.RADIANS:
            case MySqlParser.RAND:
            case MySqlParser.RANDOM:
            case MySqlParser.RANDOM_BYTES:
            case MySqlParser.RELEASE_LOCK:
            case MySqlParser.REVERSE:
            case MySqlParser.ROUND:
            case MySqlParser.ROW_COUNT:
            case MySqlParser.RPAD:
            case MySqlParser.RTRIM:
            case MySqlParser.SEC_TO_TIME:
            case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
            case MySqlParser.SESSION_USER:
            case MySqlParser.SHA:
            case MySqlParser.SHA1:
            case MySqlParser.SHA2:
            case MySqlParser.SCHEMA_NAME:
            case MySqlParser.SIGN:
            case MySqlParser.SIN:
            case MySqlParser.SLEEP:
            case MySqlParser.SOUNDEX:
            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySqlParser.SQRT:
            case MySqlParser.SRID:
            case MySqlParser.STARTPOINT:
            case MySqlParser.STRCMP:
            case MySqlParser.STR_TO_DATE:
            case MySqlParser.ST_AREA:
            case MySqlParser.ST_ASBINARY:
            case MySqlParser.ST_ASTEXT:
            case MySqlParser.ST_ASWKB:
            case MySqlParser.ST_ASWKT:
            case MySqlParser.ST_BUFFER:
            case MySqlParser.ST_CENTROID:
            case MySqlParser.ST_CONTAINS:
            case MySqlParser.ST_CROSSES:
            case MySqlParser.ST_DIFFERENCE:
            case MySqlParser.ST_DIMENSION:
            case MySqlParser.ST_DISJOINT:
            case MySqlParser.ST_DISTANCE:
            case MySqlParser.ST_ENDPOINT:
            case MySqlParser.ST_ENVELOPE:
            case MySqlParser.ST_EQUALS:
            case MySqlParser.ST_EXTERIORRING:
            case MySqlParser.ST_GEOMCOLLFROMTEXT:
            case MySqlParser.ST_GEOMCOLLFROMTXT:
            case MySqlParser.ST_GEOMCOLLFROMWKB:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.ST_GEOMETRYFROMTEXT:
            case MySqlParser.ST_GEOMETRYFROMWKB:
            case MySqlParser.ST_GEOMETRYN:
            case MySqlParser.ST_GEOMETRYTYPE:
            case MySqlParser.ST_GEOMFROMTEXT:
            case MySqlParser.ST_GEOMFROMWKB:
            case MySqlParser.ST_INTERIORRINGN:
            case MySqlParser.ST_INTERSECTION:
            case MySqlParser.ST_INTERSECTS:
            case MySqlParser.ST_ISCLOSED:
            case MySqlParser.ST_ISEMPTY:
            case MySqlParser.ST_ISSIMPLE:
            case MySqlParser.ST_LINEFROMTEXT:
            case MySqlParser.ST_LINEFROMWKB:
            case MySqlParser.ST_LINESTRINGFROMTEXT:
            case MySqlParser.ST_LINESTRINGFROMWKB:
            case MySqlParser.ST_NUMGEOMETRIES:
            case MySqlParser.ST_NUMINTERIORRING:
            case MySqlParser.ST_NUMINTERIORRINGS:
            case MySqlParser.ST_NUMPOINTS:
            case MySqlParser.ST_OVERLAPS:
            case MySqlParser.ST_POINTFROMTEXT:
            case MySqlParser.ST_POINTFROMWKB:
            case MySqlParser.ST_POINTN:
            case MySqlParser.ST_POLYFROMTEXT:
            case MySqlParser.ST_POLYFROMWKB:
            case MySqlParser.ST_POLYGONFROMTEXT:
            case MySqlParser.ST_POLYGONFROMWKB:
            case MySqlParser.ST_SRID:
            case MySqlParser.ST_STARTPOINT:
            case MySqlParser.ST_SYMDIFFERENCE:
            case MySqlParser.ST_TOUCHES:
            case MySqlParser.ST_UNION:
            case MySqlParser.ST_WITHIN:
            case MySqlParser.ST_X:
            case MySqlParser.ST_Y:
            case MySqlParser.SUBDATE:
            case MySqlParser.SUBSTRING_INDEX:
            case MySqlParser.SUBTIME:
            case MySqlParser.SYSTEM_USER:
            case MySqlParser.TAN:
            case MySqlParser.TIMEDIFF:
            case MySqlParser.TIMESTAMPADD:
            case MySqlParser.TIMESTAMPDIFF:
            case MySqlParser.TIME_FORMAT:
            case MySqlParser.TIME_TO_SEC:
            case MySqlParser.TOUCHES:
            case MySqlParser.TO_BASE64:
            case MySqlParser.TO_DAYS:
            case MySqlParser.TO_SECONDS:
            case MySqlParser.TP_CONNECTION_ADMIN:
            case MySqlParser.UCASE:
            case MySqlParser.UNCOMPRESS:
            case MySqlParser.UNCOMPRESSED_LENGTH:
            case MySqlParser.UNHEX:
            case MySqlParser.UNIX_TIMESTAMP:
            case MySqlParser.UPDATEXML:
            case MySqlParser.UPPER:
            case MySqlParser.UUID:
            case MySqlParser.UUID_SHORT:
            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
            case MySqlParser.VERSION:
            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySqlParser.WEEKDAY:
            case MySqlParser.WEEKOFYEAR:
            case MySqlParser.WEIGHT_STRING:
            case MySqlParser.WITHIN:
            case MySqlParser.YEARWEEK:
            case MySqlParser.Y_FUNCTION:
            case MySqlParser.X_FUNCTION:
            case MySqlParser.MOD:
            case MySqlParser.ID:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6367;
                this.simpleId();
                }
                break;
            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6368;
                this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
                }
                break;
            case MySqlParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6369;
                this.match(MySqlParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleId(): SimpleIdContext {
        let localContext = new SimpleIdContext(this.context, this.state);
        this.enterRule(localContext, 586, MySqlParser.RULE_simpleId);
        try {
            this.state = 6381;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 933, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6372;
                this.match(MySqlParser.ID);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6373;
                this.charsetNameBase();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6374;
                this.transactionLevelBase();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6375;
                this.engineNameBase();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6376;
                this.privilegesBase();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6377;
                this.intervalTypeBase();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6378;
                this.dataTypeBase();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6379;
                this.keywordsCanBeId();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6380;
                this.scalarFunctionName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dottedId(): DottedIdContext {
        let localContext = new DottedIdContext(this.context, this.state);
        this.enterRule(localContext, 588, MySqlParser.RULE_dottedId);
        try {
            this.state = 6386;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.DOT_ID:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6383;
                this.match(MySqlParser.DOT_ID);
                }
                break;
            case MySqlParser.DOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6384;
                this.match(MySqlParser.DOT);
                this.state = 6385;
                this.uid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decimalLiteral(): DecimalLiteralContext {
        let localContext = new DecimalLiteralContext(this.context, this.state);
        this.enterRule(localContext, 590, MySqlParser.RULE_decimalLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6388;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 1138)) & ~0x1F) === 0 && ((1 << (_la - 1138)) & 10247) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fileSizeLiteral(): FileSizeLiteralContext {
        let localContext = new FileSizeLiteralContext(this.context, this.state);
        this.enterRule(localContext, 592, MySqlParser.RULE_fileSizeLiteral);
        try {
            this.state = 6392;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.FILESIZE_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6390;
                this.match(MySqlParser.FILESIZE_LITERAL);
                }
                break;
            case MySqlParser.ZERO_DECIMAL:
            case MySqlParser.ONE_DECIMAL:
            case MySqlParser.TWO_DECIMAL:
            case MySqlParser.DECIMAL_LITERAL:
            case MySqlParser.REAL_LITERAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6391;
                this.decimalLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringLiteral(): StringLiteralContext {
        let localContext = new StringLiteralContext(this.context, this.state);
        this.enterRule(localContext, 594, MySqlParser.RULE_stringLiteral);
        let _la: number;
        try {
            let alternative: number;
            this.state = 6417;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 942, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6399;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.STRING_CHARSET_NAME:
                    {
                    this.state = 6395;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1154) {
                        {
                        this.state = 6394;
                        this.match(MySqlParser.STRING_CHARSET_NAME);
                        }
                    }

                    this.state = 6397;
                    this.match(MySqlParser.STRING_LITERAL);
                    }
                    break;
                case MySqlParser.START_NATIONAL_STRING_LITERAL:
                    {
                    this.state = 6398;
                    this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6402;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 6401;
                        this.match(MySqlParser.STRING_LITERAL);
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 6404;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 938, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6411;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case MySqlParser.STRING_LITERAL:
                case MySqlParser.STRING_CHARSET_NAME:
                    {
                    this.state = 6407;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1154) {
                        {
                        this.state = 6406;
                        this.match(MySqlParser.STRING_CHARSET_NAME);
                        }
                    }

                    this.state = 6409;
                    this.match(MySqlParser.STRING_LITERAL);
                    }
                    break;
                case MySqlParser.START_NATIONAL_STRING_LITERAL:
                    {
                    this.state = 6410;
                    this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6415;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 941, this.context) ) {
                case 1:
                    {
                    this.state = 6413;
                    this.match(MySqlParser.COLLATE);
                    this.state = 6414;
                    this.collationName();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanLiteral(): BooleanLiteralContext {
        let localContext = new BooleanLiteralContext(this.context, this.state);
        this.enterRule(localContext, 596, MySqlParser.RULE_booleanLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6419;
            _la = this.tokenStream.LA(1);
            if(!(_la === 63 || _la === 178)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hexadecimalLiteral(): HexadecimalLiteralContext {
        let localContext = new HexadecimalLiteralContext(this.context, this.state);
        this.enterRule(localContext, 598, MySqlParser.RULE_hexadecimalLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6422;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1154) {
                {
                this.state = 6421;
                this.match(MySqlParser.STRING_CHARSET_NAME);
                }
            }

            this.state = 6424;
            this.match(MySqlParser.HEXADECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullNotnull(): NullNotnullContext {
        let localContext = new NullNotnullContext(this.context, this.state);
        this.enterRule(localContext, 600, MySqlParser.RULE_nullNotnull);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6427;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 114) {
                {
                this.state = 6426;
                this.match(MySqlParser.NOT);
                }
            }

            this.state = 6429;
            _la = this.tokenStream.LA(1);
            if(!(_la === 116 || _la === 1152)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constant(): ConstantContext {
        let localContext = new ConstantContext(this.context, this.state);
        this.enterRule(localContext, 602, MySqlParser.RULE_constant);
        let _la: number;
        try {
            this.state = 6443;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 946, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6431;
                this.stringLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6432;
                this.decimalLiteral();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6433;
                this.match(MySqlParser.MINUS);
                this.state = 6434;
                this.decimalLiteral();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6435;
                this.hexadecimalLiteral();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6436;
                this.booleanLiteral();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6437;
                this.match(MySqlParser.REAL_LITERAL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6438;
                this.match(MySqlParser.BIT_STRING);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6440;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 114) {
                    {
                    this.state = 6439;
                    this.match(MySqlParser.NOT);
                    }
                }

                this.state = 6442;
                localContext._nullLiteral = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 116 || _la === 1152)) {
                    localContext._nullLiteral = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataType(): DataTypeContext {
        let localContext = new DataTypeContext(this.context, this.state);
        this.enterRule(localContext, 604, MySqlParser.RULE_dataType);
        let _la: number;
        try {
            let alternative: number;
            this.state = 6571;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 975, this.context) ) {
            case 1:
                localContext = new StringDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6445;
                (localContext as StringDataTypeContext)._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 25 || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & 31239) !== 0) || _la === 518)) {
                    (localContext as StringDataTypeContext)._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6447;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 238) {
                    {
                    this.state = 6446;
                    this.match(MySqlParser.VARYING);
                    }
                }

                this.state = 6450;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 948, this.context) ) {
                case 1:
                    {
                    this.state = 6449;
                    this.lengthOneDimension();
                    }
                    break;
                }
                this.state = 6453;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 949, this.context) ) {
                case 1:
                    {
                    this.state = 6452;
                    this.match(MySqlParser.BINARY);
                    }
                    break;
                }
                this.state = 6458;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 950, this.context) ) {
                case 1:
                    {
                    this.state = 6455;
                    this.charSet();
                    this.state = 6456;
                    this.charsetName();
                    }
                    break;
                }
                this.state = 6463;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 951, this.context) ) {
                case 1:
                    {
                    this.state = 6460;
                    this.match(MySqlParser.COLLATE);
                    this.state = 6461;
                    this.collationName();
                    }
                    break;
                case 2:
                    {
                    this.state = 6462;
                    this.match(MySqlParser.BINARY);
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new NationalVaryingStringDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6465;
                this.match(MySqlParser.NATIONAL);
                this.state = 6466;
                (localContext as NationalVaryingStringDataTypeContext)._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 25 || _la === 222)) {
                    (localContext as NationalVaryingStringDataTypeContext)._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6467;
                this.match(MySqlParser.VARYING);
                this.state = 6469;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 952, this.context) ) {
                case 1:
                    {
                    this.state = 6468;
                    this.lengthOneDimension();
                    }
                    break;
                }
                this.state = 6472;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 953, this.context) ) {
                case 1:
                    {
                    this.state = 6471;
                    this.match(MySqlParser.BINARY);
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new NationalStringDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6474;
                this.match(MySqlParser.NATIONAL);
                this.state = 6475;
                (localContext as NationalStringDataTypeContext)._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 25 || _la === 222 || _la === 223)) {
                    (localContext as NationalStringDataTypeContext)._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6477;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 954, this.context) ) {
                case 1:
                    {
                    this.state = 6476;
                    this.lengthOneDimension();
                    }
                    break;
                }
                this.state = 6480;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 955, this.context) ) {
                case 1:
                    {
                    this.state = 6479;
                    this.match(MySqlParser.BINARY);
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new NationalStringDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6482;
                this.match(MySqlParser.NCHAR);
                this.state = 6483;
                (localContext as NationalStringDataTypeContext)._typeName = this.match(MySqlParser.VARCHAR);
                this.state = 6485;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 956, this.context) ) {
                case 1:
                    {
                    this.state = 6484;
                    this.lengthOneDimension();
                    }
                    break;
                }
                this.state = 6488;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 957, this.context) ) {
                case 1:
                    {
                    this.state = 6487;
                    this.match(MySqlParser.BINARY);
                    }
                    break;
                }
                }
                break;
            case 5:
                localContext = new DimensionDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6490;
                (localContext as DimensionDataTypeContext)._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 4095) !== 0))) {
                    (localContext as DimensionDataTypeContext)._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6492;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 958, this.context) ) {
                case 1:
                    {
                    this.state = 6491;
                    this.lengthOneDimension();
                    }
                    break;
                }
                this.state = 6497;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 959, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 6494;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 183 || _la === 195 || _la === 612)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                        }
                    }
                    this.state = 6499;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 959, this.context);
                }
                }
                break;
            case 6:
                localContext = new DimensionDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6500;
                (localContext as DimensionDataTypeContext)._typeName = this.match(MySqlParser.REAL);
                this.state = 6502;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 960, this.context) ) {
                case 1:
                    {
                    this.state = 6501;
                    this.lengthTwoDimension();
                    }
                    break;
                }
                this.state = 6507;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 961, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 6504;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 183 || _la === 195 || _la === 612)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                        }
                    }
                    this.state = 6509;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 961, this.context);
                }
                }
                break;
            case 7:
                localContext = new DimensionDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6510;
                (localContext as DimensionDataTypeContext)._typeName = this.match(MySqlParser.DOUBLE);
                this.state = 6512;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 210) {
                    {
                    this.state = 6511;
                    this.match(MySqlParser.PRECISION);
                    }
                }

                this.state = 6515;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 963, this.context) ) {
                case 1:
                    {
                    this.state = 6514;
                    this.lengthTwoDimension();
                    }
                    break;
                }
                this.state = 6520;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 964, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 6517;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 183 || _la === 195 || _la === 612)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                        }
                    }
                    this.state = 6522;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 964, this.context);
                }
                }
                break;
            case 8:
                localContext = new DimensionDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6523;
                (localContext as DimensionDataTypeContext)._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 211)) & ~0x1F) === 0 && ((1 << (_la - 211)) & 63) !== 0) || _la === 431)) {
                    (localContext as DimensionDataTypeContext)._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6525;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 965, this.context) ) {
                case 1:
                    {
                    this.state = 6524;
                    this.lengthTwoOptionalDimension();
                    }
                    break;
                }
                this.state = 6530;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 966, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 6527;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 183 || _la === 195 || _la === 612)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                        }
                    }
                    this.state = 6532;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 966, this.context);
                }
                }
                break;
            case 9:
                localContext = new SimpleDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6533;
                (localContext as SimpleDataTypeContext)._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 4237313) !== 0) || _la === 348 || _la === 349)) {
                    (localContext as SimpleDataTypeContext)._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 10:
                localContext = new DimensionDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 6534;
                (localContext as DimensionDataTypeContext)._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 218)) & ~0x1F) === 0 && ((1 << (_la - 218)) & 2831) !== 0) || _la === 346)) {
                    (localContext as DimensionDataTypeContext)._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6536;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 967, this.context) ) {
                case 1:
                    {
                    this.state = 6535;
                    this.lengthOneDimension();
                    }
                    break;
                }
                }
                break;
            case 11:
                localContext = new CollectionDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 6538;
                (localContext as CollectionDataTypeContext)._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 153 || _la === 237)) {
                    (localContext as CollectionDataTypeContext)._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6539;
                this.collectionOptions();
                this.state = 6541;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 968, this.context) ) {
                case 1:
                    {
                    this.state = 6540;
                    this.match(MySqlParser.BINARY);
                    }
                    break;
                }
                this.state = 6546;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 969, this.context) ) {
                case 1:
                    {
                    this.state = 6543;
                    this.charSet();
                    this.state = 6544;
                    this.charsetName();
                    }
                    break;
                }
                }
                break;
            case 12:
                localContext = new SpatialDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 6548;
                (localContext as SpatialDataTypeContext)._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 466 || ((((_la - 803)) & ~0x1F) === 0 && ((1 << (_la - 803)) & 511) !== 0))) {
                    (localContext as SpatialDataTypeContext)._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6551;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 970, this.context) ) {
                case 1:
                    {
                    this.state = 6549;
                    this.match(MySqlParser.SRID);
                    this.state = 6550;
                    this.decimalLiteral();
                    }
                    break;
                }
                }
                break;
            case 13:
                localContext = new LongVarcharDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 6553;
                (localContext as LongVarcharDataTypeContext)._typeName = this.match(MySqlParser.LONG);
                this.state = 6555;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 223) {
                    {
                    this.state = 6554;
                    this.match(MySqlParser.VARCHAR);
                    }
                }

                this.state = 6558;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 972, this.context) ) {
                case 1:
                    {
                    this.state = 6557;
                    this.match(MySqlParser.BINARY);
                    }
                    break;
                }
                this.state = 6563;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 973, this.context) ) {
                case 1:
                    {
                    this.state = 6560;
                    this.charSet();
                    this.state = 6561;
                    this.charsetName();
                    }
                    break;
                }
                this.state = 6567;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 974, this.context) ) {
                case 1:
                    {
                    this.state = 6565;
                    this.match(MySqlParser.COLLATE);
                    this.state = 6566;
                    this.collationName();
                    }
                    break;
                }
                }
                break;
            case 14:
                localContext = new LongVarbinaryDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 6569;
                this.match(MySqlParser.LONG);
                this.state = 6570;
                this.match(MySqlParser.VARBINARY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionOptions(): CollectionOptionsContext {
        let localContext = new CollectionOptionsContext(this.context, this.state);
        this.enterRule(localContext, 606, MySqlParser.RULE_collectionOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6573;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 6574;
            this.match(MySqlParser.STRING_LITERAL);
            this.state = 6579;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 6575;
                this.match(MySqlParser.COMMA);
                this.state = 6576;
                this.match(MySqlParser.STRING_LITERAL);
                }
                }
                this.state = 6581;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 6582;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public convertedDataType(): ConvertedDataTypeContext {
        let localContext = new ConvertedDataTypeContext(this.context, this.state);
        this.enterRule(localContext, 608, MySqlParser.RULE_convertedDataType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6606;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.FLOAT:
            case MySqlParser.BINARY:
            case MySqlParser.NCHAR:
                {
                this.state = 6584;
                localContext._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 211 || _la === 226 || _la === 518)) {
                    localContext._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6586;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1133) {
                    {
                    this.state = 6585;
                    this.lengthOneDimension();
                    }
                }

                }
                break;
            case MySqlParser.CHAR:
                {
                this.state = 6588;
                localContext._typeName = this.match(MySqlParser.CHAR);
                this.state = 6590;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1133) {
                    {
                    this.state = 6589;
                    this.lengthOneDimension();
                    }
                }

                this.state = 6595;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25 || _la === 222 || _la === 841) {
                    {
                    this.state = 6592;
                    this.charSet();
                    this.state = 6593;
                    this.charsetName();
                    }
                }

                }
                break;
            case MySqlParser.INT:
            case MySqlParser.INTEGER:
            case MySqlParser.DOUBLE:
            case MySqlParser.DATE:
            case MySqlParser.TIME:
            case MySqlParser.DATETIME:
            case MySqlParser.YEAR:
            case MySqlParser.JSON:
                {
                this.state = 6597;
                localContext._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 3539521) !== 0) || _la === 466)) {
                    localContext._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySqlParser.DECIMAL:
            case MySqlParser.DEC:
                {
                this.state = 6598;
                localContext._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 214 || _la === 215)) {
                    localContext._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6600;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1133) {
                    {
                    this.state = 6599;
                    this.lengthTwoOptionalDimension();
                    }
                }

                }
                break;
            case MySqlParser.UNSIGNED:
            case MySqlParser.SIGNED:
                {
                this.state = 6602;
                _la = this.tokenStream.LA(1);
                if(!(_la === 183 || _la === 612)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6604;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 200 || _la === 206) {
                    {
                    this.state = 6603;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 200 || _la === 206)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 6609;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 11) {
                {
                this.state = 6608;
                this.match(MySqlParser.ARRAY);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lengthOneDimension(): LengthOneDimensionContext {
        let localContext = new LengthOneDimensionContext(this.context, this.state);
        this.enterRule(localContext, 610, MySqlParser.RULE_lengthOneDimension);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6611;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 6612;
            this.decimalLiteral();
            this.state = 6613;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lengthTwoDimension(): LengthTwoDimensionContext {
        let localContext = new LengthTwoDimensionContext(this.context, this.state);
        this.enterRule(localContext, 612, MySqlParser.RULE_lengthTwoDimension);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6615;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 6616;
            this.decimalLiteral();
            this.state = 6617;
            this.match(MySqlParser.COMMA);
            this.state = 6618;
            this.decimalLiteral();
            this.state = 6619;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext {
        let localContext = new LengthTwoOptionalDimensionContext(this.context, this.state);
        this.enterRule(localContext, 614, MySqlParser.RULE_lengthTwoOptionalDimension);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6621;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 6622;
            this.decimalLiteral();
            this.state = 6625;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1135) {
                {
                this.state = 6623;
                this.match(MySqlParser.COMMA);
                this.state = 6624;
                this.decimalLiteral();
                }
            }

            this.state = 6627;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uidList(): UidListContext {
        let localContext = new UidListContext(this.context, this.state);
        this.enterRule(localContext, 616, MySqlParser.RULE_uidList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6629;
            this.uid();
            this.state = 6634;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 985, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6630;
                    this.match(MySqlParser.COMMA);
                    this.state = 6631;
                    this.uid();
                    }
                    }
                }
                this.state = 6636;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 985, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullColumnNameList(): FullColumnNameListContext {
        let localContext = new FullColumnNameListContext(this.context, this.state);
        this.enterRule(localContext, 618, MySqlParser.RULE_fullColumnNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6637;
            this.fullColumnName();
            this.state = 6642;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 6638;
                this.match(MySqlParser.COMMA);
                this.state = 6639;
                this.fullColumnName();
                }
                }
                this.state = 6644;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tables(): TablesContext {
        let localContext = new TablesContext(this.context, this.state);
        this.enterRule(localContext, 620, MySqlParser.RULE_tables);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6645;
            this.tableName();
            this.state = 6650;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 987, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6646;
                    this.match(MySqlParser.COMMA);
                    this.state = 6647;
                    this.tableName();
                    }
                    }
                }
                this.state = 6652;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 987, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexColumnNames(): IndexColumnNamesContext {
        let localContext = new IndexColumnNamesContext(this.context, this.state);
        this.enterRule(localContext, 622, MySqlParser.RULE_indexColumnNames);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6653;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 6654;
            this.indexColumnName();
            this.state = 6659;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 6655;
                this.match(MySqlParser.COMMA);
                this.state = 6656;
                this.indexColumnName();
                }
                }
                this.state = 6661;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 6662;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressions(): ExpressionsContext {
        let localContext = new ExpressionsContext(this.context, this.state);
        this.enterRule(localContext, 624, MySqlParser.RULE_expressions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6664;
            this.expression(0);
            this.state = 6669;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 6665;
                this.match(MySqlParser.COMMA);
                this.state = 6666;
                this.expression(0);
                }
                }
                this.state = 6671;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionsWithDefaults(): ExpressionsWithDefaultsContext {
        let localContext = new ExpressionsWithDefaultsContext(this.context, this.state);
        this.enterRule(localContext, 626, MySqlParser.RULE_expressionsWithDefaults);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6672;
            this.expressionOrDefault();
            this.state = 6677;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 6673;
                this.match(MySqlParser.COMMA);
                this.state = 6674;
                this.expressionOrDefault();
                }
                }
                this.state = 6679;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constants(): ConstantsContext {
        let localContext = new ConstantsContext(this.context, this.state);
        this.enterRule(localContext, 628, MySqlParser.RULE_constants);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6680;
            this.constant();
            this.state = 6685;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 6681;
                this.match(MySqlParser.COMMA);
                this.state = 6682;
                this.constant();
                }
                }
                this.state = 6687;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleStrings(): SimpleStringsContext {
        let localContext = new SimpleStringsContext(this.context, this.state);
        this.enterRule(localContext, 630, MySqlParser.RULE_simpleStrings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6688;
            this.match(MySqlParser.STRING_LITERAL);
            this.state = 6693;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 6689;
                this.match(MySqlParser.COMMA);
                this.state = 6690;
                this.match(MySqlParser.STRING_LITERAL);
                }
                }
                this.state = 6695;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userVariables(): UserVariablesContext {
        let localContext = new UserVariablesContext(this.context, this.state);
        this.enterRule(localContext, 632, MySqlParser.RULE_userVariables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6696;
            this.match(MySqlParser.LOCAL_ID);
            this.state = 6701;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 6697;
                this.match(MySqlParser.COMMA);
                this.state = 6698;
                this.match(MySqlParser.LOCAL_ID);
                }
                }
                this.state = 6703;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultValue(): DefaultValueContext {
        let localContext = new DefaultValueContext(this.context, this.state);
        this.enterRule(localContext, 634, MySqlParser.RULE_defaultValue);
        try {
            this.state = 6730;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 996, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6704;
                this.match(MySqlParser.NULL_LITERAL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6705;
                this.match(MySqlParser.CAST);
                this.state = 6706;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6707;
                this.expression(0);
                this.state = 6708;
                this.match(MySqlParser.AS);
                this.state = 6709;
                this.convertedDataType();
                this.state = 6710;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6713;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 994, this.context) ) {
                case 1:
                    {
                    this.state = 6712;
                    this.unaryOperator();
                    }
                    break;
                }
                this.state = 6715;
                this.constant();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6716;
                this.currentTimestamp();
                this.state = 6720;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 995, this.context) ) {
                case 1:
                    {
                    this.state = 6717;
                    this.match(MySqlParser.ON);
                    this.state = 6718;
                    this.match(MySqlParser.UPDATE);
                    this.state = 6719;
                    this.currentTimestamp();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6722;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6723;
                this.expression(0);
                this.state = 6724;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6726;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6727;
                this.fullId();
                this.state = 6728;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public currentTimestamp(): CurrentTimestampContext {
        let localContext = new CurrentTimestampContext(this.context, this.state);
        this.enterRule(localContext, 636, MySqlParser.RULE_currentTimestamp);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6746;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.CURRENT_TIMESTAMP:
            case MySqlParser.LOCALTIME:
            case MySqlParser.LOCALTIMESTAMP:
                {
                this.state = 6732;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 131) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6738;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1133) {
                    {
                    this.state = 6733;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 6735;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 1138)) & ~0x1F) === 0 && ((1 << (_la - 1138)) & 10247) !== 0)) {
                        {
                        this.state = 6734;
                        this.decimalLiteral();
                        }
                    }

                    this.state = 6737;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                }

                }
                break;
            case MySqlParser.NOW:
                {
                this.state = 6740;
                this.match(MySqlParser.NOW);
                this.state = 6741;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6743;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1138)) & ~0x1F) === 0 && ((1 << (_la - 1138)) & 10247) !== 0)) {
                    {
                    this.state = 6742;
                    this.decimalLiteral();
                    }
                }

                this.state = 6745;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionOrDefault(): ExpressionOrDefaultContext {
        let localContext = new ExpressionOrDefaultContext(this.context, this.state);
        this.enterRule(localContext, 638, MySqlParser.RULE_expressionOrDefault);
        try {
            this.state = 6750;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1001, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6748;
                this.expression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6749;
                this.match(MySqlParser.DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExists(): IfExistsContext {
        let localContext = new IfExistsContext(this.context, this.state);
        this.enterRule(localContext, 640, MySqlParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6752;
            this.match(MySqlParser.IF);
            this.state = 6753;
            this.match(MySqlParser.EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifNotExists(): IfNotExistsContext {
        let localContext = new IfNotExistsContext(this.context, this.state);
        this.enterRule(localContext, 642, MySqlParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6755;
            this.match(MySqlParser.IF);
            this.state = 6756;
            this.match(MySqlParser.NOT);
            this.state = 6757;
            this.match(MySqlParser.EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orReplace(): OrReplaceContext {
        let localContext = new OrReplaceContext(this.context, this.state);
        this.enterRule(localContext, 644, MySqlParser.RULE_orReplace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6759;
            this.match(MySqlParser.OR);
            this.state = 6760;
            this.match(MySqlParser.REPLACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public waitNowaitClause(): WaitNowaitClauseContext {
        let localContext = new WaitNowaitClauseContext(this.context, this.state);
        this.enterRule(localContext, 646, MySqlParser.RULE_waitNowaitClause);
        try {
            this.state = 6765;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.WAIT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6762;
                this.match(MySqlParser.WAIT);
                this.state = 6763;
                this.decimalLiteral();
                }
                break;
            case MySqlParser.NOWAIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6764;
                this.match(MySqlParser.NOWAIT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionCall(): FunctionCallContext {
        let localContext = new FunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 648, MySqlParser.RULE_functionCall);
        try {
            this.state = 6785;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1005, this.context) ) {
            case 1:
                localContext = new SpecificFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6767;
                this.specificFunction();
                }
                break;
            case 2:
                localContext = new AggregateFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6768;
                this.aggregateWindowedFunction();
                }
                break;
            case 3:
                localContext = new NonAggregateFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6769;
                this.nonAggregateWindowedFunction();
                }
                break;
            case 4:
                localContext = new ScalarFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6770;
                this.scalarFunctionName();
                this.state = 6771;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6773;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1003, this.context) ) {
                case 1:
                    {
                    this.state = 6772;
                    this.functionArgs();
                    }
                    break;
                }
                this.state = 6775;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 5:
                localContext = new UdfFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6777;
                this.fullId();
                this.state = 6778;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6780;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1004, this.context) ) {
                case 1:
                    {
                    this.state = 6779;
                    this.functionArgs();
                    }
                    break;
                }
                this.state = 6782;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 6:
                localContext = new PasswordFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6784;
                this.passwordFunctionClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public specificFunction(): SpecificFunctionContext {
        let localContext = new SpecificFunctionContext(this.context, this.state);
        this.enterRule(localContext, 650, MySqlParser.RULE_specificFunction);
        let _la: number;
        try {
            this.state = 6966;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1029, this.context) ) {
            case 1:
                localContext = new SimpleFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6787;
                _la = this.tokenStream.LA(1);
                if(!(_la === 150 || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & 262159) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6790;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1006, this.context) ) {
                case 1:
                    {
                    this.state = 6788;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 6789;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new CurrentUserContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6792;
                this.currentUserExpression();
                }
                break;
            case 3:
                localContext = new DataTypeFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6793;
                this.match(MySqlParser.CONVERT);
                this.state = 6794;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6795;
                this.expression(0);
                this.state = 6796;
                (localContext as DataTypeFunctionCallContext)._separator = this.match(MySqlParser.COMMA);
                this.state = 6797;
                this.convertedDataType();
                this.state = 6798;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 4:
                localContext = new DataTypeFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6800;
                this.match(MySqlParser.CONVERT);
                this.state = 6801;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6802;
                this.expression(0);
                this.state = 6803;
                this.match(MySqlParser.USING);
                this.state = 6804;
                this.charsetName();
                this.state = 6805;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 5:
                localContext = new DataTypeFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6807;
                this.match(MySqlParser.CAST);
                this.state = 6808;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6809;
                this.expression(0);
                this.state = 6810;
                this.match(MySqlParser.AS);
                this.state = 6811;
                this.convertedDataType();
                this.state = 6812;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 6:
                localContext = new ValuesFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6814;
                this.match(MySqlParser.VALUES);
                this.state = 6815;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6816;
                this.fullColumnName();
                this.state = 6817;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 7:
                localContext = new CaseExpressionFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6819;
                this.match(MySqlParser.CASE);
                this.state = 6820;
                this.expression(0);
                this.state = 6822;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 6821;
                    this.caseFuncAlternative();
                    }
                    }
                    this.state = 6824;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 189);
                this.state = 6828;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53) {
                    {
                    this.state = 6826;
                    this.match(MySqlParser.ELSE);
                    this.state = 6827;
                    (localContext as CaseExpressionFunctionCallContext)._elseArg = this.functionArg();
                    }
                }

                this.state = 6830;
                this.match(MySqlParser.END);
                }
                break;
            case 8:
                localContext = new CaseFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6832;
                this.match(MySqlParser.CASE);
                this.state = 6834;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 6833;
                    this.caseFuncAlternative();
                    }
                    }
                    this.state = 6836;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 189);
                this.state = 6840;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53) {
                    {
                    this.state = 6838;
                    this.match(MySqlParser.ELSE);
                    this.state = 6839;
                    (localContext as CaseFunctionCallContext)._elseArg = this.functionArg();
                    }
                }

                this.state = 6842;
                this.match(MySqlParser.END);
                }
                break;
            case 9:
                localContext = new CharFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6844;
                this.match(MySqlParser.CHAR);
                this.state = 6845;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6846;
                this.functionArgs();
                this.state = 6849;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 187) {
                    {
                    this.state = 6847;
                    this.match(MySqlParser.USING);
                    this.state = 6848;
                    this.charsetName();
                    }
                }

                this.state = 6851;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 10:
                localContext = new PositionFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 6853;
                this.match(MySqlParser.POSITION);
                this.state = 6854;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6857;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1012, this.context) ) {
                case 1:
                    {
                    this.state = 6855;
                    (localContext as PositionFunctionCallContext)._positionString = this.stringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 6856;
                    (localContext as PositionFunctionCallContext)._positionExpression = this.expression(0);
                    }
                    break;
                }
                this.state = 6859;
                this.match(MySqlParser.IN);
                this.state = 6862;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1013, this.context) ) {
                case 1:
                    {
                    this.state = 6860;
                    (localContext as PositionFunctionCallContext)._inString = this.stringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 6861;
                    (localContext as PositionFunctionCallContext)._inExpression = this.expression(0);
                    }
                    break;
                }
                this.state = 6864;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 11:
                localContext = new SubstrFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 6866;
                _la = this.tokenStream.LA(1);
                if(!(_la === 325 || _la === 326)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6867;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6870;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1014, this.context) ) {
                case 1:
                    {
                    this.state = 6868;
                    (localContext as SubstrFunctionCallContext)._sourceString = this.stringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 6869;
                    (localContext as SubstrFunctionCallContext)._sourceExpression = this.expression(0);
                    }
                    break;
                }
                this.state = 6872;
                this.match(MySqlParser.FROM);
                this.state = 6875;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1015, this.context) ) {
                case 1:
                    {
                    this.state = 6873;
                    (localContext as SubstrFunctionCallContext)._fromDecimal = this.decimalLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 6874;
                    (localContext as SubstrFunctionCallContext)._fromExpression = this.expression(0);
                    }
                    break;
                }
                this.state = 6882;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 6877;
                    this.match(MySqlParser.FOR);
                    this.state = 6880;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 1016, this.context) ) {
                    case 1:
                        {
                        this.state = 6878;
                        (localContext as SubstrFunctionCallContext)._forDecimal = this.decimalLiteral();
                        }
                        break;
                    case 2:
                        {
                        this.state = 6879;
                        (localContext as SubstrFunctionCallContext)._forExpression = this.expression(0);
                        }
                        break;
                    }
                    }
                }

                this.state = 6884;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 12:
                localContext = new TrimFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 6886;
                this.match(MySqlParser.TRIM);
                this.state = 6887;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6888;
                (localContext as TrimFunctionCallContext)._positioinForm = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 17 || _la === 95 || _la === 176)) {
                    (localContext as TrimFunctionCallContext)._positioinForm = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6891;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1018, this.context) ) {
                case 1:
                    {
                    this.state = 6889;
                    (localContext as TrimFunctionCallContext)._sourceString = this.stringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 6890;
                    (localContext as TrimFunctionCallContext)._sourceExpression = this.expression(0);
                    }
                    break;
                }
                this.state = 6893;
                this.match(MySqlParser.FROM);
                this.state = 6896;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1019, this.context) ) {
                case 1:
                    {
                    this.state = 6894;
                    (localContext as TrimFunctionCallContext)._fromString = this.stringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 6895;
                    (localContext as TrimFunctionCallContext)._fromExpression = this.expression(0);
                    }
                    break;
                }
                this.state = 6898;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 13:
                localContext = new TrimFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 6900;
                this.match(MySqlParser.TRIM);
                this.state = 6901;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6904;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1020, this.context) ) {
                case 1:
                    {
                    this.state = 6902;
                    (localContext as TrimFunctionCallContext)._sourceString = this.stringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 6903;
                    (localContext as TrimFunctionCallContext)._sourceExpression = this.expression(0);
                    }
                    break;
                }
                this.state = 6906;
                this.match(MySqlParser.FROM);
                this.state = 6909;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1021, this.context) ) {
                case 1:
                    {
                    this.state = 6907;
                    (localContext as TrimFunctionCallContext)._fromString = this.stringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 6908;
                    (localContext as TrimFunctionCallContext)._fromExpression = this.expression(0);
                    }
                    break;
                }
                this.state = 6911;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 14:
                localContext = new WeightFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 6913;
                this.match(MySqlParser.WEIGHT_STRING);
                this.state = 6914;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6917;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1022, this.context) ) {
                case 1:
                    {
                    this.state = 6915;
                    this.stringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 6916;
                    this.expression(0);
                    }
                    break;
                }
                this.state = 6925;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12) {
                    {
                    this.state = 6919;
                    this.match(MySqlParser.AS);
                    this.state = 6920;
                    (localContext as WeightFunctionCallContext)._stringFormat = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 222 || _la === 226)) {
                        (localContext as WeightFunctionCallContext)._stringFormat = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 6921;
                    this.match(MySqlParser.LR_BRACKET);
                    this.state = 6922;
                    this.decimalLiteral();
                    this.state = 6923;
                    this.match(MySqlParser.RR_BRACKET);
                    }
                }

                this.state = 6928;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 472) {
                    {
                    this.state = 6927;
                    this.levelsInWeightString();
                    }
                }

                this.state = 6930;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 15:
                localContext = new ExtractFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 6932;
                this.match(MySqlParser.EXTRACT);
                this.state = 6933;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6934;
                this.intervalType();
                this.state = 6935;
                this.match(MySqlParser.FROM);
                this.state = 6938;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1025, this.context) ) {
                case 1:
                    {
                    this.state = 6936;
                    (localContext as ExtractFunctionCallContext)._sourceString = this.stringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 6937;
                    (localContext as ExtractFunctionCallContext)._sourceExpression = this.expression(0);
                    }
                    break;
                }
                this.state = 6940;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 16:
                localContext = new GetFormatFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 6942;
                this.match(MySqlParser.GET_FORMAT);
                this.state = 6943;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6944;
                (localContext as GetFormatFunctionCallContext)._datetimeFormat = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 11) !== 0))) {
                    (localContext as GetFormatFunctionCallContext)._datetimeFormat = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6945;
                this.match(MySqlParser.COMMA);
                this.state = 6946;
                this.stringLiteral();
                this.state = 6947;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 17:
                localContext = new JsonValueFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 6949;
                this.match(MySqlParser.JSON_VALUE);
                this.state = 6950;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6951;
                this.expression(0);
                this.state = 6952;
                this.match(MySqlParser.COMMA);
                this.state = 6953;
                this.expression(0);
                this.state = 6956;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 593) {
                    {
                    this.state = 6954;
                    this.match(MySqlParser.RETURNING);
                    this.state = 6955;
                    this.convertedDataType();
                    }
                }

                this.state = 6959;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1027, this.context) ) {
                case 1:
                    {
                    this.state = 6958;
                    this.jsonOnEmpty();
                    }
                    break;
                }
                this.state = 6962;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42 || _la === 116 || _la === 411) {
                    {
                    this.state = 6961;
                    this.jsonOnError();
                    }
                }

                this.state = 6964;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseFuncAlternative(): CaseFuncAlternativeContext {
        let localContext = new CaseFuncAlternativeContext(this.context, this.state);
        this.enterRule(localContext, 652, MySqlParser.RULE_caseFuncAlternative);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6968;
            this.match(MySqlParser.WHEN);
            this.state = 6969;
            localContext._condition = this.functionArg();
            this.state = 6970;
            this.match(MySqlParser.THEN);
            this.state = 6971;
            localContext._consequent = this.functionArg();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public levelsInWeightString(): LevelsInWeightStringContext {
        let localContext = new LevelsInWeightStringContext(this.context, this.state);
        this.enterRule(localContext, 654, MySqlParser.RULE_levelsInWeightString);
        let _la: number;
        try {
            this.state = 6987;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1031, this.context) ) {
            case 1:
                localContext = new LevelWeightListContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6973;
                this.match(MySqlParser.LEVEL);
                this.state = 6974;
                this.levelInWeightListElement();
                this.state = 6979;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 6975;
                    this.match(MySqlParser.COMMA);
                    this.state = 6976;
                    this.levelInWeightListElement();
                    }
                    }
                    this.state = 6981;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new LevelWeightRangeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6982;
                this.match(MySqlParser.LEVEL);
                this.state = 6983;
                (localContext as LevelWeightRangeContext)._firstLevel = this.decimalLiteral();
                this.state = 6984;
                this.match(MySqlParser.MINUS);
                this.state = 6985;
                (localContext as LevelWeightRangeContext)._lastLevel = this.decimalLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public levelInWeightListElement(): LevelInWeightListElementContext {
        let localContext = new LevelInWeightListElementContext(this.context, this.state);
        this.enterRule(localContext, 656, MySqlParser.RULE_levelInWeightListElement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6989;
            this.decimalLiteral();
            this.state = 6991;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 13 || _la === 45 || _la === 994) {
                {
                this.state = 6990;
                localContext._orderType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 13 || _la === 45 || _la === 994)) {
                    localContext._orderType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregateWindowedFunction(): AggregateWindowedFunctionContext {
        let localContext = new AggregateWindowedFunctionContext(this.context, this.state);
        this.enterRule(localContext, 658, MySqlParser.RULE_aggregateWindowedFunction);
        let _la: number;
        try {
            this.state = 7052;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.AVG:
            case MySqlParser.MAX:
            case MySqlParser.MIN:
            case MySqlParser.SUM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6993;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & 8400897) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6994;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 6996;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1033, this.context) ) {
                case 1:
                    {
                    this.state = 6995;
                    localContext._aggregator = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 6 || _la === 49)) {
                        localContext._aggregator = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 6998;
                this.functionArg();
                this.state = 6999;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 7001;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1034, this.context) ) {
                case 1:
                    {
                    this.state = 7000;
                    this.overClause();
                    }
                    break;
                }
                }
                break;
            case MySqlParser.COUNT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7003;
                this.match(MySqlParser.COUNT);
                this.state = 7004;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7012;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1036, this.context) ) {
                case 1:
                    {
                    this.state = 7005;
                    localContext._starArg = this.match(MySqlParser.STAR);
                    }
                    break;
                case 2:
                    {
                    this.state = 7007;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 1035, this.context) ) {
                    case 1:
                        {
                        this.state = 7006;
                        localContext._aggregator = this.match(MySqlParser.ALL);
                        }
                        break;
                    }
                    this.state = 7009;
                    this.functionArg();
                    }
                    break;
                case 3:
                    {
                    this.state = 7010;
                    localContext._aggregator = this.match(MySqlParser.DISTINCT);
                    this.state = 7011;
                    this.functionArgs();
                    }
                    break;
                }
                this.state = 7014;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 7016;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1037, this.context) ) {
                case 1:
                    {
                    this.state = 7015;
                    this.overClause();
                    }
                    break;
                }
                }
                break;
            case MySqlParser.BIT_AND:
            case MySqlParser.BIT_OR:
            case MySqlParser.BIT_XOR:
            case MySqlParser.STD:
            case MySqlParser.STDDEV:
            case MySqlParser.STDDEV_POP:
            case MySqlParser.STDDEV_SAMP:
            case MySqlParser.VAR_POP:
            case MySqlParser.VAR_SAMP:
            case MySqlParser.VARIANCE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7018;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & 62652423) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7019;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7021;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1038, this.context) ) {
                case 1:
                    {
                    this.state = 7020;
                    localContext._aggregator = this.match(MySqlParser.ALL);
                    }
                    break;
                }
                this.state = 7023;
                this.functionArg();
                this.state = 7024;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 7026;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1039, this.context) ) {
                case 1:
                    {
                    this.state = 7025;
                    this.overClause();
                    }
                    break;
                }
                }
                break;
            case MySqlParser.GROUP_CONCAT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7028;
                this.match(MySqlParser.GROUP_CONCAT);
                this.state = 7029;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7031;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1040, this.context) ) {
                case 1:
                    {
                    this.state = 7030;
                    localContext._aggregator = this.match(MySqlParser.DISTINCT);
                    }
                    break;
                }
                this.state = 7033;
                this.functionArgs();
                this.state = 7044;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 124) {
                    {
                    this.state = 7034;
                    this.match(MySqlParser.ORDER);
                    this.state = 7035;
                    this.match(MySqlParser.BY);
                    this.state = 7036;
                    this.orderByExpression();
                    this.state = 7041;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 1135) {
                        {
                        {
                        this.state = 7037;
                        this.match(MySqlParser.COMMA);
                        this.state = 7038;
                        this.orderByExpression();
                        }
                        }
                        this.state = 7043;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 7048;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 7046;
                    this.match(MySqlParser.SEPARATOR);
                    this.state = 7047;
                    localContext._separator = this.match(MySqlParser.STRING_LITERAL);
                    }
                }

                this.state = 7050;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonAggregateWindowedFunction(): NonAggregateWindowedFunctionContext {
        let localContext = new NonAggregateWindowedFunctionContext(this.context, this.state);
        this.enterRule(localContext, 660, MySqlParser.RULE_nonAggregateWindowedFunction);
        let _la: number;
        try {
            this.state = 7092;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.LAG:
            case MySqlParser.LEAD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7054;
                _la = this.tokenStream.LA(1);
                if(!(_la === 295 || _la === 297)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7055;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7056;
                this.expression(0);
                this.state = 7059;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1045, this.context) ) {
                case 1:
                    {
                    this.state = 7057;
                    this.match(MySqlParser.COMMA);
                    this.state = 7058;
                    this.decimalLiteral();
                    }
                    break;
                }
                this.state = 7063;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1135) {
                    {
                    this.state = 7061;
                    this.match(MySqlParser.COMMA);
                    this.state = 7062;
                    this.decimalLiteral();
                    }
                }

                this.state = 7065;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 7066;
                this.overClause();
                }
                break;
            case MySqlParser.FIRST_VALUE:
            case MySqlParser.LAST_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7068;
                _la = this.tokenStream.LA(1);
                if(!(_la === 293 || _la === 296)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7069;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7070;
                this.expression(0);
                this.state = 7071;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 7072;
                this.overClause();
                }
                break;
            case MySqlParser.CUME_DIST:
            case MySqlParser.DENSE_RANK:
            case MySqlParser.PERCENT_RANK:
            case MySqlParser.RANK:
            case MySqlParser.ROW_NUMBER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7074;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & 14339) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7075;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7076;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 7077;
                this.overClause();
                }
                break;
            case MySqlParser.NTH_VALUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7078;
                this.match(MySqlParser.NTH_VALUE);
                this.state = 7079;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7080;
                this.expression(0);
                this.state = 7081;
                this.match(MySqlParser.COMMA);
                this.state = 7082;
                this.decimalLiteral();
                this.state = 7083;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 7084;
                this.overClause();
                }
                break;
            case MySqlParser.NTILE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7086;
                this.match(MySqlParser.NTILE);
                this.state = 7087;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7088;
                this.decimalLiteral();
                this.state = 7089;
                this.match(MySqlParser.RR_BRACKET);
                this.state = 7090;
                this.overClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public overClause(): OverClauseContext {
        let localContext = new OverClauseContext(this.context, this.state);
        this.enterRule(localContext, 662, MySqlParser.RULE_overClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7094;
            this.match(MySqlParser.OVER);
            this.state = 7100;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.LR_BRACKET:
                {
                this.state = 7095;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7096;
                this.windowSpec();
                this.state = 7097;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case MySqlParser.ARRAY:
            case MySqlParser.ATTRIBUTE:
            case MySqlParser.BUCKETS:
            case MySqlParser.CONDITION:
            case MySqlParser.CURRENT:
            case MySqlParser.CURRENT_USER:
            case MySqlParser.DATABASE:
            case MySqlParser.DEFAULT:
            case MySqlParser.DIAGNOSTICS:
            case MySqlParser.EMPTY:
            case MySqlParser.ENFORCED:
            case MySqlParser.EXCEPT:
            case MySqlParser.GROUP:
            case MySqlParser.IF:
            case MySqlParser.IGNORED:
            case MySqlParser.INSERT:
            case MySqlParser.LATERAL:
            case MySqlParser.LEFT:
            case MySqlParser.NUMBER:
            case MySqlParser.OPTIONAL:
            case MySqlParser.ORDER:
            case MySqlParser.PRIMARY:
            case MySqlParser.REPEAT:
            case MySqlParser.REPLACE:
            case MySqlParser.RIGHT:
            case MySqlParser.SCHEMA:
            case MySqlParser.SKIP_QUERY_REWRITE:
            case MySqlParser.STACKED:
            case MySqlParser.DATE:
            case MySqlParser.TIME:
            case MySqlParser.TIMESTAMP:
            case MySqlParser.DATETIME:
            case MySqlParser.YEAR:
            case MySqlParser.BINARY:
            case MySqlParser.TEXT:
            case MySqlParser.ENUM:
            case MySqlParser.SERIAL:
            case MySqlParser.JSON_ARRAY:
            case MySqlParser.JSON_ARRAYAGG:
            case MySqlParser.JSON_ARRAY_APPEND:
            case MySqlParser.JSON_ARRAY_INSERT:
            case MySqlParser.JSON_CONTAINS:
            case MySqlParser.JSON_CONTAINS_PATH:
            case MySqlParser.JSON_DEPTH:
            case MySqlParser.JSON_EXTRACT:
            case MySqlParser.JSON_INSERT:
            case MySqlParser.JSON_KEYS:
            case MySqlParser.JSON_LENGTH:
            case MySqlParser.JSON_MERGE:
            case MySqlParser.JSON_MERGE_PATCH:
            case MySqlParser.JSON_MERGE_PRESERVE:
            case MySqlParser.JSON_OBJECT:
            case MySqlParser.JSON_OBJECTAGG:
            case MySqlParser.JSON_OVERLAPS:
            case MySqlParser.JSON_PRETTY:
            case MySqlParser.JSON_QUOTE:
            case MySqlParser.JSON_REMOVE:
            case MySqlParser.JSON_REPLACE:
            case MySqlParser.JSON_SCHEMA_VALID:
            case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
            case MySqlParser.JSON_SEARCH:
            case MySqlParser.JSON_SET:
            case MySqlParser.JSON_STORAGE_FREE:
            case MySqlParser.JSON_STORAGE_SIZE:
            case MySqlParser.JSON_TABLE:
            case MySqlParser.JSON_TYPE:
            case MySqlParser.JSON_UNQUOTE:
            case MySqlParser.JSON_VALID:
            case MySqlParser.JSON_VALUE:
            case MySqlParser.NESTED:
            case MySqlParser.ORDINALITY:
            case MySqlParser.PATH:
            case MySqlParser.AVG:
            case MySqlParser.BIT_AND:
            case MySqlParser.BIT_OR:
            case MySqlParser.BIT_XOR:
            case MySqlParser.COUNT:
            case MySqlParser.CUME_DIST:
            case MySqlParser.DENSE_RANK:
            case MySqlParser.FIRST_VALUE:
            case MySqlParser.GROUP_CONCAT:
            case MySqlParser.LAG:
            case MySqlParser.LAST_VALUE:
            case MySqlParser.LEAD:
            case MySqlParser.MAX:
            case MySqlParser.MIN:
            case MySqlParser.NTILE:
            case MySqlParser.NTH_VALUE:
            case MySqlParser.PERCENT_RANK:
            case MySqlParser.RANK:
            case MySqlParser.ROW_NUMBER:
            case MySqlParser.STD:
            case MySqlParser.STDDEV:
            case MySqlParser.STDDEV_POP:
            case MySqlParser.STDDEV_SAMP:
            case MySqlParser.SUM:
            case MySqlParser.VAR_POP:
            case MySqlParser.VAR_SAMP:
            case MySqlParser.VARIANCE:
            case MySqlParser.CURRENT_DATE:
            case MySqlParser.CURRENT_TIME:
            case MySqlParser.CURRENT_TIMESTAMP:
            case MySqlParser.LOCALTIME:
            case MySqlParser.CURDATE:
            case MySqlParser.CURTIME:
            case MySqlParser.DATE_ADD:
            case MySqlParser.DATE_SUB:
            case MySqlParser.LOCALTIMESTAMP:
            case MySqlParser.NOW:
            case MySqlParser.POSITION:
            case MySqlParser.SUBSTR:
            case MySqlParser.SUBSTRING:
            case MySqlParser.SYSDATE:
            case MySqlParser.TRIM:
            case MySqlParser.UTC_DATE:
            case MySqlParser.UTC_TIME:
            case MySqlParser.UTC_TIMESTAMP:
            case MySqlParser.ACCOUNT:
            case MySqlParser.ACTION:
            case MySqlParser.AFTER:
            case MySqlParser.AGGREGATE:
            case MySqlParser.ALGORITHM:
            case MySqlParser.ANY:
            case MySqlParser.AT:
            case MySqlParser.AUTHORS:
            case MySqlParser.AUTOCOMMIT:
            case MySqlParser.AUTOEXTEND_SIZE:
            case MySqlParser.AUTO_INCREMENT:
            case MySqlParser.AVG_ROW_LENGTH:
            case MySqlParser.BEGIN:
            case MySqlParser.BINLOG:
            case MySqlParser.BIT:
            case MySqlParser.BLOCK:
            case MySqlParser.BOOL:
            case MySqlParser.BOOLEAN:
            case MySqlParser.BTREE:
            case MySqlParser.CACHE:
            case MySqlParser.CASCADED:
            case MySqlParser.CHAIN:
            case MySqlParser.CHANGED:
            case MySqlParser.CHANNEL:
            case MySqlParser.CHECKSUM:
            case MySqlParser.PAGE_CHECKSUM:
            case MySqlParser.CIPHER:
            case MySqlParser.CLASS_ORIGIN:
            case MySqlParser.CLIENT:
            case MySqlParser.CLOSE:
            case MySqlParser.CLUSTERING:
            case MySqlParser.COALESCE:
            case MySqlParser.CODE:
            case MySqlParser.COLUMNS:
            case MySqlParser.COLUMN_FORMAT:
            case MySqlParser.COLUMN_NAME:
            case MySqlParser.COMMENT:
            case MySqlParser.COMMIT:
            case MySqlParser.COMPACT:
            case MySqlParser.COMPLETION:
            case MySqlParser.COMPRESSED:
            case MySqlParser.COMPRESSION:
            case MySqlParser.CONCURRENT:
            case MySqlParser.CONNECT:
            case MySqlParser.CONNECTION:
            case MySqlParser.CONSISTENT:
            case MySqlParser.CONSTRAINT_CATALOG:
            case MySqlParser.CONSTRAINT_SCHEMA:
            case MySqlParser.CONSTRAINT_NAME:
            case MySqlParser.CONTAINS:
            case MySqlParser.CONTEXT:
            case MySqlParser.CONTRIBUTORS:
            case MySqlParser.COPY:
            case MySqlParser.CPU:
            case MySqlParser.CURSOR_NAME:
            case MySqlParser.DATA:
            case MySqlParser.DATAFILE:
            case MySqlParser.DEALLOCATE:
            case MySqlParser.DEFAULT_AUTH:
            case MySqlParser.DEFINER:
            case MySqlParser.DELAY_KEY_WRITE:
            case MySqlParser.DES_KEY_FILE:
            case MySqlParser.DIRECTORY:
            case MySqlParser.DISABLE:
            case MySqlParser.DISCARD:
            case MySqlParser.DISK:
            case MySqlParser.DO:
            case MySqlParser.DUMPFILE:
            case MySqlParser.DUPLICATE:
            case MySqlParser.DYNAMIC:
            case MySqlParser.ENABLE:
            case MySqlParser.ENCRYPTION:
            case MySqlParser.END:
            case MySqlParser.ENDS:
            case MySqlParser.ENGINE:
            case MySqlParser.ENGINES:
            case MySqlParser.ERROR:
            case MySqlParser.ERRORS:
            case MySqlParser.ESCAPE:
            case MySqlParser.EVEN:
            case MySqlParser.EVENT:
            case MySqlParser.EVENTS:
            case MySqlParser.EVERY:
            case MySqlParser.EXCHANGE:
            case MySqlParser.EXCLUSIVE:
            case MySqlParser.EXPIRE:
            case MySqlParser.EXPORT:
            case MySqlParser.EXTENDED:
            case MySqlParser.EXTENT_SIZE:
            case MySqlParser.FAILED_LOGIN_ATTEMPTS:
            case MySqlParser.FAST:
            case MySqlParser.FAULTS:
            case MySqlParser.FIELDS:
            case MySqlParser.FILE_BLOCK_SIZE:
            case MySqlParser.FILTER:
            case MySqlParser.FIRST:
            case MySqlParser.FIXED:
            case MySqlParser.FLUSH:
            case MySqlParser.FOLLOWS:
            case MySqlParser.FOUND:
            case MySqlParser.FULL:
            case MySqlParser.FUNCTION:
            case MySqlParser.GENERAL:
            case MySqlParser.GLOBAL:
            case MySqlParser.GRANTS:
            case MySqlParser.GROUP_REPLICATION:
            case MySqlParser.HANDLER:
            case MySqlParser.HASH:
            case MySqlParser.HELP:
            case MySqlParser.HISTORY:
            case MySqlParser.HOST:
            case MySqlParser.HOSTS:
            case MySqlParser.IDENTIFIED:
            case MySqlParser.IGNORE_SERVER_IDS:
            case MySqlParser.IMPORT:
            case MySqlParser.INDEXES:
            case MySqlParser.INITIAL_SIZE:
            case MySqlParser.INPLACE:
            case MySqlParser.INSERT_METHOD:
            case MySqlParser.INSTALL:
            case MySqlParser.INSTANCE:
            case MySqlParser.INSTANT:
            case MySqlParser.INVISIBLE:
            case MySqlParser.INVOKER:
            case MySqlParser.IO:
            case MySqlParser.IO_THREAD:
            case MySqlParser.IPC:
            case MySqlParser.ISOLATION:
            case MySqlParser.ISSUER:
            case MySqlParser.JSON:
            case MySqlParser.KEY_BLOCK_SIZE:
            case MySqlParser.LANGUAGE:
            case MySqlParser.LAST:
            case MySqlParser.LEAVES:
            case MySqlParser.LESS:
            case MySqlParser.LEVEL:
            case MySqlParser.LIST:
            case MySqlParser.LOCAL:
            case MySqlParser.LOGFILE:
            case MySqlParser.LOGS:
            case MySqlParser.MASTER:
            case MySqlParser.MASTER_AUTO_POSITION:
            case MySqlParser.MASTER_CONNECT_RETRY:
            case MySqlParser.MASTER_DELAY:
            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
            case MySqlParser.MASTER_HOST:
            case MySqlParser.MASTER_LOG_FILE:
            case MySqlParser.MASTER_LOG_POS:
            case MySqlParser.MASTER_PASSWORD:
            case MySqlParser.MASTER_PORT:
            case MySqlParser.MASTER_RETRY_COUNT:
            case MySqlParser.MASTER_SSL:
            case MySqlParser.MASTER_SSL_CA:
            case MySqlParser.MASTER_SSL_CAPATH:
            case MySqlParser.MASTER_SSL_CERT:
            case MySqlParser.MASTER_SSL_CIPHER:
            case MySqlParser.MASTER_SSL_CRL:
            case MySqlParser.MASTER_SSL_CRLPATH:
            case MySqlParser.MASTER_SSL_KEY:
            case MySqlParser.MASTER_TLS_VERSION:
            case MySqlParser.MASTER_USER:
            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
            case MySqlParser.MAX_QUERIES_PER_HOUR:
            case MySqlParser.MAX_ROWS:
            case MySqlParser.MAX_SIZE:
            case MySqlParser.MAX_UPDATES_PER_HOUR:
            case MySqlParser.MAX_USER_CONNECTIONS:
            case MySqlParser.MEDIUM:
            case MySqlParser.MEMBER:
            case MySqlParser.MERGE:
            case MySqlParser.MESSAGE_TEXT:
            case MySqlParser.MID:
            case MySqlParser.MIGRATE:
            case MySqlParser.MIN_ROWS:
            case MySqlParser.MODE:
            case MySqlParser.MODIFY:
            case MySqlParser.MUTEX:
            case MySqlParser.MYSQL:
            case MySqlParser.MYSQL_ERRNO:
            case MySqlParser.NAME:
            case MySqlParser.NAMES:
            case MySqlParser.NCHAR:
            case MySqlParser.NEVER:
            case MySqlParser.NEXT:
            case MySqlParser.NO:
            case MySqlParser.NOCOPY:
            case MySqlParser.NOWAIT:
            case MySqlParser.NODEGROUP:
            case MySqlParser.NONE:
            case MySqlParser.ODBC:
            case MySqlParser.OFFLINE:
            case MySqlParser.OFFSET:
            case MySqlParser.OF:
            case MySqlParser.OJ:
            case MySqlParser.OLD_PASSWORD:
            case MySqlParser.ONE:
            case MySqlParser.ONLINE:
            case MySqlParser.ONLY:
            case MySqlParser.OPEN:
            case MySqlParser.OPTIMIZER_COSTS:
            case MySqlParser.OPTIONS:
            case MySqlParser.OWNER:
            case MySqlParser.PACK_KEYS:
            case MySqlParser.PAGE:
            case MySqlParser.PARSER:
            case MySqlParser.PARTIAL:
            case MySqlParser.PARTITIONING:
            case MySqlParser.PARTITIONS:
            case MySqlParser.PASSWORD:
            case MySqlParser.PASSWORD_LOCK_TIME:
            case MySqlParser.PHASE:
            case MySqlParser.PLUGIN:
            case MySqlParser.PLUGIN_DIR:
            case MySqlParser.PLUGINS:
            case MySqlParser.PORT:
            case MySqlParser.PRECEDES:
            case MySqlParser.PREPARE:
            case MySqlParser.PRESERVE:
            case MySqlParser.PREV:
            case MySqlParser.PROCESSLIST:
            case MySqlParser.PROFILE:
            case MySqlParser.PROFILES:
            case MySqlParser.PROXY:
            case MySqlParser.QUERY:
            case MySqlParser.QUICK:
            case MySqlParser.REBUILD:
            case MySqlParser.RECOVER:
            case MySqlParser.RECURSIVE:
            case MySqlParser.REDO_BUFFER_SIZE:
            case MySqlParser.REDUNDANT:
            case MySqlParser.RELAY:
            case MySqlParser.RELAY_LOG_FILE:
            case MySqlParser.RELAY_LOG_POS:
            case MySqlParser.RELAYLOG:
            case MySqlParser.REMOVE:
            case MySqlParser.REORGANIZE:
            case MySqlParser.REPAIR:
            case MySqlParser.REPLICATE_DO_DB:
            case MySqlParser.REPLICATE_DO_TABLE:
            case MySqlParser.REPLICATE_IGNORE_DB:
            case MySqlParser.REPLICATE_IGNORE_TABLE:
            case MySqlParser.REPLICATE_REWRITE_DB:
            case MySqlParser.REPLICATE_WILD_DO_TABLE:
            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySqlParser.REPLICATION:
            case MySqlParser.RESET:
            case MySqlParser.RESUME:
            case MySqlParser.RETURNED_SQLSTATE:
            case MySqlParser.RETURNS:
            case MySqlParser.REUSE:
            case MySqlParser.ROLE:
            case MySqlParser.ROLLBACK:
            case MySqlParser.ROLLUP:
            case MySqlParser.ROTATE:
            case MySqlParser.ROW:
            case MySqlParser.ROWS:
            case MySqlParser.ROW_FORMAT:
            case MySqlParser.RTREE:
            case MySqlParser.SAVEPOINT:
            case MySqlParser.SCHEDULE:
            case MySqlParser.SECURITY:
            case MySqlParser.SERVER:
            case MySqlParser.SESSION:
            case MySqlParser.SHARE:
            case MySqlParser.SHARED:
            case MySqlParser.SIGNED:
            case MySqlParser.SIMPLE:
            case MySqlParser.SLAVE:
            case MySqlParser.SLOW:
            case MySqlParser.SNAPSHOT:
            case MySqlParser.SOCKET:
            case MySqlParser.SOME:
            case MySqlParser.SONAME:
            case MySqlParser.SOUNDS:
            case MySqlParser.SOURCE:
            case MySqlParser.SQL_AFTER_GTIDS:
            case MySqlParser.SQL_AFTER_MTS_GAPS:
            case MySqlParser.SQL_BEFORE_GTIDS:
            case MySqlParser.SQL_BUFFER_RESULT:
            case MySqlParser.SQL_CACHE:
            case MySqlParser.SQL_NO_CACHE:
            case MySqlParser.SQL_THREAD:
            case MySqlParser.START:
            case MySqlParser.STARTS:
            case MySqlParser.STATS_AUTO_RECALC:
            case MySqlParser.STATS_PERSISTENT:
            case MySqlParser.STATS_SAMPLE_PAGES:
            case MySqlParser.STATUS:
            case MySqlParser.STOP:
            case MySqlParser.STORAGE:
            case MySqlParser.STRING:
            case MySqlParser.SUBCLASS_ORIGIN:
            case MySqlParser.SUBJECT:
            case MySqlParser.SUBPARTITION:
            case MySqlParser.SUBPARTITIONS:
            case MySqlParser.SUSPEND:
            case MySqlParser.SWAPS:
            case MySqlParser.SWITCHES:
            case MySqlParser.TABLE_NAME:
            case MySqlParser.TABLESPACE:
            case MySqlParser.TABLE_TYPE:
            case MySqlParser.TEMPORARY:
            case MySqlParser.TEMPTABLE:
            case MySqlParser.THAN:
            case MySqlParser.TRADITIONAL:
            case MySqlParser.TRANSACTION:
            case MySqlParser.TRANSACTIONAL:
            case MySqlParser.TRIGGERS:
            case MySqlParser.TRUNCATE:
            case MySqlParser.UNBOUNDED:
            case MySqlParser.UNDEFINED:
            case MySqlParser.UNDOFILE:
            case MySqlParser.UNDO_BUFFER_SIZE:
            case MySqlParser.UNINSTALL:
            case MySqlParser.UNKNOWN:
            case MySqlParser.UNTIL:
            case MySqlParser.UPGRADE:
            case MySqlParser.USER:
            case MySqlParser.USE_FRM:
            case MySqlParser.USER_RESOURCES:
            case MySqlParser.VALIDATION:
            case MySqlParser.VALUE:
            case MySqlParser.VARIABLES:
            case MySqlParser.VIEW:
            case MySqlParser.VIRTUAL:
            case MySqlParser.VISIBLE:
            case MySqlParser.WAIT:
            case MySqlParser.WARNINGS:
            case MySqlParser.WITHOUT:
            case MySqlParser.WORK:
            case MySqlParser.WRAPPER:
            case MySqlParser.X509:
            case MySqlParser.XA:
            case MySqlParser.XML:
            case MySqlParser.EUR:
            case MySqlParser.USA:
            case MySqlParser.JIS:
            case MySqlParser.ISO:
            case MySqlParser.INTERNAL:
            case MySqlParser.QUARTER:
            case MySqlParser.MONTH:
            case MySqlParser.DAY:
            case MySqlParser.HOUR:
            case MySqlParser.MINUTE:
            case MySqlParser.WEEK:
            case MySqlParser.SECOND:
            case MySqlParser.MICROSECOND:
            case MySqlParser.ADMIN:
            case MySqlParser.AUDIT_ABORT_EXEMPT:
            case MySqlParser.AUDIT_ADMIN:
            case MySqlParser.AUTHENTICATION_POLICY_ADMIN:
            case MySqlParser.BACKUP_ADMIN:
            case MySqlParser.BINLOG_ADMIN:
            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
            case MySqlParser.CLONE_ADMIN:
            case MySqlParser.CONNECTION_ADMIN:
            case MySqlParser.ENCRYPTION_KEY_ADMIN:
            case MySqlParser.EXECUTE:
            case MySqlParser.FILE:
            case MySqlParser.FIREWALL_ADMIN:
            case MySqlParser.FIREWALL_EXEMPT:
            case MySqlParser.FIREWALL_USER:
            case MySqlParser.GROUP_REPLICATION_ADMIN:
            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
            case MySqlParser.INVOKE:
            case MySqlParser.LAMBDA:
            case MySqlParser.NDB_STORED_USER:
            case MySqlParser.PASSWORDLESS_USER_ADMIN:
            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySqlParser.PRIVILEGES:
            case MySqlParser.PROCESS:
            case MySqlParser.RELOAD:
            case MySqlParser.REPLICATION_APPLIER:
            case MySqlParser.REPLICATION_SLAVE_ADMIN:
            case MySqlParser.RESOURCE_GROUP_ADMIN:
            case MySqlParser.RESOURCE_GROUP_USER:
            case MySqlParser.ROLE_ADMIN:
            case MySqlParser.ROUTINE:
            case MySqlParser.S3:
            case MySqlParser.SESSION_VARIABLES_ADMIN:
            case MySqlParser.SET_USER_ID:
            case MySqlParser.SHOW_ROUTINE:
            case MySqlParser.SHUTDOWN:
            case MySqlParser.SUPER:
            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
            case MySqlParser.TABLES:
            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
            case MySqlParser.VERSION_TOKEN_ADMIN:
            case MySqlParser.XA_RECOVER_ADMIN:
            case MySqlParser.ARMSCII8:
            case MySqlParser.ASCII:
            case MySqlParser.BIG5:
            case MySqlParser.CP1250:
            case MySqlParser.CP1251:
            case MySqlParser.CP1256:
            case MySqlParser.CP1257:
            case MySqlParser.CP850:
            case MySqlParser.CP852:
            case MySqlParser.CP866:
            case MySqlParser.CP932:
            case MySqlParser.DEC8:
            case MySqlParser.EUCJPMS:
            case MySqlParser.EUCKR:
            case MySqlParser.GB18030:
            case MySqlParser.GB2312:
            case MySqlParser.GBK:
            case MySqlParser.GEOSTD8:
            case MySqlParser.GREEK:
            case MySqlParser.HEBREW:
            case MySqlParser.HP8:
            case MySqlParser.KEYBCS2:
            case MySqlParser.KOI8R:
            case MySqlParser.KOI8U:
            case MySqlParser.LATIN1:
            case MySqlParser.LATIN2:
            case MySqlParser.LATIN5:
            case MySqlParser.LATIN7:
            case MySqlParser.MACCE:
            case MySqlParser.MACROMAN:
            case MySqlParser.SJIS:
            case MySqlParser.SWE7:
            case MySqlParser.TIS620:
            case MySqlParser.UCS2:
            case MySqlParser.UJIS:
            case MySqlParser.UTF16:
            case MySqlParser.UTF16LE:
            case MySqlParser.UTF32:
            case MySqlParser.UTF8:
            case MySqlParser.UTF8MB3:
            case MySqlParser.UTF8MB4:
            case MySqlParser.ARCHIVE:
            case MySqlParser.BLACKHOLE:
            case MySqlParser.CSV:
            case MySqlParser.FEDERATED:
            case MySqlParser.INNODB:
            case MySqlParser.MEMORY:
            case MySqlParser.MRG_MYISAM:
            case MySqlParser.MYISAM:
            case MySqlParser.NDB:
            case MySqlParser.NDBCLUSTER:
            case MySqlParser.PERFORMANCE_SCHEMA:
            case MySqlParser.TOKUDB:
            case MySqlParser.REPEATABLE:
            case MySqlParser.COMMITTED:
            case MySqlParser.UNCOMMITTED:
            case MySqlParser.SERIALIZABLE:
            case MySqlParser.GEOMETRYCOLLECTION:
            case MySqlParser.LINESTRING:
            case MySqlParser.MULTILINESTRING:
            case MySqlParser.MULTIPOINT:
            case MySqlParser.MULTIPOLYGON:
            case MySqlParser.POINT:
            case MySqlParser.POLYGON:
            case MySqlParser.ABS:
            case MySqlParser.ACOS:
            case MySqlParser.ADDDATE:
            case MySqlParser.ADDTIME:
            case MySqlParser.AES_DECRYPT:
            case MySqlParser.AES_ENCRYPT:
            case MySqlParser.AREA:
            case MySqlParser.ASBINARY:
            case MySqlParser.ASIN:
            case MySqlParser.ASTEXT:
            case MySqlParser.ASWKB:
            case MySqlParser.ASWKT:
            case MySqlParser.ASYMMETRIC_DECRYPT:
            case MySqlParser.ASYMMETRIC_DERIVE:
            case MySqlParser.ASYMMETRIC_ENCRYPT:
            case MySqlParser.ASYMMETRIC_SIGN:
            case MySqlParser.ASYMMETRIC_VERIFY:
            case MySqlParser.ATAN:
            case MySqlParser.ATAN2:
            case MySqlParser.BENCHMARK:
            case MySqlParser.BIN:
            case MySqlParser.BIT_COUNT:
            case MySqlParser.BIT_LENGTH:
            case MySqlParser.BUFFER:
            case MySqlParser.CATALOG_NAME:
            case MySqlParser.CEIL:
            case MySqlParser.CEILING:
            case MySqlParser.CENTROID:
            case MySqlParser.CHARACTER_LENGTH:
            case MySqlParser.CHARSET:
            case MySqlParser.CHAR_LENGTH:
            case MySqlParser.COERCIBILITY:
            case MySqlParser.COLLATION:
            case MySqlParser.COMPRESS:
            case MySqlParser.CONCAT:
            case MySqlParser.CONCAT_WS:
            case MySqlParser.CONNECTION_ID:
            case MySqlParser.CONV:
            case MySqlParser.CONVERT_TZ:
            case MySqlParser.COS:
            case MySqlParser.COT:
            case MySqlParser.CRC32:
            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySqlParser.CREATE_DH_PARAMETERS:
            case MySqlParser.CREATE_DIGEST:
            case MySqlParser.CROSSES:
            case MySqlParser.DATEDIFF:
            case MySqlParser.DATE_FORMAT:
            case MySqlParser.DAYNAME:
            case MySqlParser.DAYOFMONTH:
            case MySqlParser.DAYOFWEEK:
            case MySqlParser.DAYOFYEAR:
            case MySqlParser.DECODE:
            case MySqlParser.DEGREES:
            case MySqlParser.DES_DECRYPT:
            case MySqlParser.DES_ENCRYPT:
            case MySqlParser.DIMENSION:
            case MySqlParser.DISJOINT:
            case MySqlParser.ELT:
            case MySqlParser.ENCODE:
            case MySqlParser.ENCRYPT:
            case MySqlParser.ENDPOINT:
            case MySqlParser.ENGINE_ATTRIBUTE:
            case MySqlParser.ENVELOPE:
            case MySqlParser.EQUALS:
            case MySqlParser.EXP:
            case MySqlParser.EXPORT_SET:
            case MySqlParser.EXTERIORRING:
            case MySqlParser.EXTRACTVALUE:
            case MySqlParser.FIELD:
            case MySqlParser.FIND_IN_SET:
            case MySqlParser.FLOOR:
            case MySqlParser.FORMAT:
            case MySqlParser.FOUND_ROWS:
            case MySqlParser.FROM_BASE64:
            case MySqlParser.FROM_DAYS:
            case MySqlParser.FROM_UNIXTIME:
            case MySqlParser.GEOMCOLLFROMTEXT:
            case MySqlParser.GEOMCOLLFROMWKB:
            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.GEOMETRYFROMTEXT:
            case MySqlParser.GEOMETRYFROMWKB:
            case MySqlParser.GEOMETRYN:
            case MySqlParser.GEOMETRYTYPE:
            case MySqlParser.GEOMFROMTEXT:
            case MySqlParser.GEOMFROMWKB:
            case MySqlParser.GET_FORMAT:
            case MySqlParser.GET_LOCK:
            case MySqlParser.GLENGTH:
            case MySqlParser.GREATEST:
            case MySqlParser.GTID_SUBSET:
            case MySqlParser.GTID_SUBTRACT:
            case MySqlParser.HEX:
            case MySqlParser.IFNULL:
            case MySqlParser.INET6_ATON:
            case MySqlParser.INET6_NTOA:
            case MySqlParser.INET_ATON:
            case MySqlParser.INET_NTOA:
            case MySqlParser.INSTR:
            case MySqlParser.INTERIORRINGN:
            case MySqlParser.INTERSECTS:
            case MySqlParser.ISCLOSED:
            case MySqlParser.ISEMPTY:
            case MySqlParser.ISNULL:
            case MySqlParser.ISSIMPLE:
            case MySqlParser.IS_FREE_LOCK:
            case MySqlParser.IS_IPV4:
            case MySqlParser.IS_IPV4_COMPAT:
            case MySqlParser.IS_IPV4_MAPPED:
            case MySqlParser.IS_IPV6:
            case MySqlParser.IS_USED_LOCK:
            case MySqlParser.LAST_INSERT_ID:
            case MySqlParser.LCASE:
            case MySqlParser.LEAST:
            case MySqlParser.LENGTH:
            case MySqlParser.LINEFROMTEXT:
            case MySqlParser.LINEFROMWKB:
            case MySqlParser.LINESTRINGFROMTEXT:
            case MySqlParser.LINESTRINGFROMWKB:
            case MySqlParser.LN:
            case MySqlParser.LOAD_FILE:
            case MySqlParser.LOCATE:
            case MySqlParser.LOG:
            case MySqlParser.LOG10:
            case MySqlParser.LOG2:
            case MySqlParser.LOWER:
            case MySqlParser.LPAD:
            case MySqlParser.LTRIM:
            case MySqlParser.MAKEDATE:
            case MySqlParser.MAKETIME:
            case MySqlParser.MAKE_SET:
            case MySqlParser.MASTER_POS_WAIT:
            case MySqlParser.MBRCONTAINS:
            case MySqlParser.MBRDISJOINT:
            case MySqlParser.MBREQUAL:
            case MySqlParser.MBRINTERSECTS:
            case MySqlParser.MBROVERLAPS:
            case MySqlParser.MBRTOUCHES:
            case MySqlParser.MBRWITHIN:
            case MySqlParser.MD5:
            case MySqlParser.MLINEFROMTEXT:
            case MySqlParser.MLINEFROMWKB:
            case MySqlParser.MONTHNAME:
            case MySqlParser.MPOINTFROMTEXT:
            case MySqlParser.MPOINTFROMWKB:
            case MySqlParser.MPOLYFROMTEXT:
            case MySqlParser.MPOLYFROMWKB:
            case MySqlParser.MULTILINESTRINGFROMTEXT:
            case MySqlParser.MULTILINESTRINGFROMWKB:
            case MySqlParser.MULTIPOINTFROMTEXT:
            case MySqlParser.MULTIPOINTFROMWKB:
            case MySqlParser.MULTIPOLYGONFROMTEXT:
            case MySqlParser.MULTIPOLYGONFROMWKB:
            case MySqlParser.NAME_CONST:
            case MySqlParser.NULLIF:
            case MySqlParser.NUMGEOMETRIES:
            case MySqlParser.NUMINTERIORRINGS:
            case MySqlParser.NUMPOINTS:
            case MySqlParser.OCT:
            case MySqlParser.OCTET_LENGTH:
            case MySqlParser.ORD:
            case MySqlParser.OVERLAPS:
            case MySqlParser.PERIOD_ADD:
            case MySqlParser.PERIOD_DIFF:
            case MySqlParser.PI:
            case MySqlParser.POINTFROMTEXT:
            case MySqlParser.POINTFROMWKB:
            case MySqlParser.POINTN:
            case MySqlParser.POLYFROMTEXT:
            case MySqlParser.POLYFROMWKB:
            case MySqlParser.POLYGONFROMTEXT:
            case MySqlParser.POLYGONFROMWKB:
            case MySqlParser.POW:
            case MySqlParser.POWER:
            case MySqlParser.QUOTE:
            case MySqlParser.RADIANS:
            case MySqlParser.RAND:
            case MySqlParser.RANDOM:
            case MySqlParser.RANDOM_BYTES:
            case MySqlParser.RELEASE_LOCK:
            case MySqlParser.REVERSE:
            case MySqlParser.ROUND:
            case MySqlParser.ROW_COUNT:
            case MySqlParser.RPAD:
            case MySqlParser.RTRIM:
            case MySqlParser.SEC_TO_TIME:
            case MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
            case MySqlParser.SESSION_USER:
            case MySqlParser.SHA:
            case MySqlParser.SHA1:
            case MySqlParser.SHA2:
            case MySqlParser.SCHEMA_NAME:
            case MySqlParser.SIGN:
            case MySqlParser.SIN:
            case MySqlParser.SLEEP:
            case MySqlParser.SOUNDEX:
            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySqlParser.SQRT:
            case MySqlParser.SRID:
            case MySqlParser.STARTPOINT:
            case MySqlParser.STRCMP:
            case MySqlParser.STR_TO_DATE:
            case MySqlParser.ST_AREA:
            case MySqlParser.ST_ASBINARY:
            case MySqlParser.ST_ASTEXT:
            case MySqlParser.ST_ASWKB:
            case MySqlParser.ST_ASWKT:
            case MySqlParser.ST_BUFFER:
            case MySqlParser.ST_CENTROID:
            case MySqlParser.ST_CONTAINS:
            case MySqlParser.ST_CROSSES:
            case MySqlParser.ST_DIFFERENCE:
            case MySqlParser.ST_DIMENSION:
            case MySqlParser.ST_DISJOINT:
            case MySqlParser.ST_DISTANCE:
            case MySqlParser.ST_ENDPOINT:
            case MySqlParser.ST_ENVELOPE:
            case MySqlParser.ST_EQUALS:
            case MySqlParser.ST_EXTERIORRING:
            case MySqlParser.ST_GEOMCOLLFROMTEXT:
            case MySqlParser.ST_GEOMCOLLFROMTXT:
            case MySqlParser.ST_GEOMCOLLFROMWKB:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.ST_GEOMETRYFROMTEXT:
            case MySqlParser.ST_GEOMETRYFROMWKB:
            case MySqlParser.ST_GEOMETRYN:
            case MySqlParser.ST_GEOMETRYTYPE:
            case MySqlParser.ST_GEOMFROMTEXT:
            case MySqlParser.ST_GEOMFROMWKB:
            case MySqlParser.ST_INTERIORRINGN:
            case MySqlParser.ST_INTERSECTION:
            case MySqlParser.ST_INTERSECTS:
            case MySqlParser.ST_ISCLOSED:
            case MySqlParser.ST_ISEMPTY:
            case MySqlParser.ST_ISSIMPLE:
            case MySqlParser.ST_LINEFROMTEXT:
            case MySqlParser.ST_LINEFROMWKB:
            case MySqlParser.ST_LINESTRINGFROMTEXT:
            case MySqlParser.ST_LINESTRINGFROMWKB:
            case MySqlParser.ST_NUMGEOMETRIES:
            case MySqlParser.ST_NUMINTERIORRING:
            case MySqlParser.ST_NUMINTERIORRINGS:
            case MySqlParser.ST_NUMPOINTS:
            case MySqlParser.ST_OVERLAPS:
            case MySqlParser.ST_POINTFROMTEXT:
            case MySqlParser.ST_POINTFROMWKB:
            case MySqlParser.ST_POINTN:
            case MySqlParser.ST_POLYFROMTEXT:
            case MySqlParser.ST_POLYFROMWKB:
            case MySqlParser.ST_POLYGONFROMTEXT:
            case MySqlParser.ST_POLYGONFROMWKB:
            case MySqlParser.ST_SRID:
            case MySqlParser.ST_STARTPOINT:
            case MySqlParser.ST_SYMDIFFERENCE:
            case MySqlParser.ST_TOUCHES:
            case MySqlParser.ST_UNION:
            case MySqlParser.ST_WITHIN:
            case MySqlParser.ST_X:
            case MySqlParser.ST_Y:
            case MySqlParser.SUBDATE:
            case MySqlParser.SUBSTRING_INDEX:
            case MySqlParser.SUBTIME:
            case MySqlParser.SYSTEM_USER:
            case MySqlParser.TAN:
            case MySqlParser.TIMEDIFF:
            case MySqlParser.TIMESTAMPADD:
            case MySqlParser.TIMESTAMPDIFF:
            case MySqlParser.TIME_FORMAT:
            case MySqlParser.TIME_TO_SEC:
            case MySqlParser.TOUCHES:
            case MySqlParser.TO_BASE64:
            case MySqlParser.TO_DAYS:
            case MySqlParser.TO_SECONDS:
            case MySqlParser.TP_CONNECTION_ADMIN:
            case MySqlParser.UCASE:
            case MySqlParser.UNCOMPRESS:
            case MySqlParser.UNCOMPRESSED_LENGTH:
            case MySqlParser.UNHEX:
            case MySqlParser.UNIX_TIMESTAMP:
            case MySqlParser.UPDATEXML:
            case MySqlParser.UPPER:
            case MySqlParser.UUID:
            case MySqlParser.UUID_SHORT:
            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
            case MySqlParser.VERSION:
            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySqlParser.WEEKDAY:
            case MySqlParser.WEEKOFYEAR:
            case MySqlParser.WEIGHT_STRING:
            case MySqlParser.WITHIN:
            case MySqlParser.YEARWEEK:
            case MySqlParser.Y_FUNCTION:
            case MySqlParser.X_FUNCTION:
            case MySqlParser.MOD:
            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySqlParser.STRING_LITERAL:
            case MySqlParser.ID:
                {
                this.state = 7099;
                this.windowName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpec(): WindowSpecContext {
        let localContext = new WindowSpecContext(this.context, this.state);
        this.enterRule(localContext, 664, MySqlParser.RULE_windowSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7103;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1049, this.context) ) {
            case 1:
                {
                this.state = 7102;
                this.windowName();
                }
                break;
            }
            this.state = 7106;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 7105;
                this.partitionClause();
                }
            }

            this.state = 7109;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 124) {
                {
                this.state = 7108;
                this.orderByClause();
                }
            }

            this.state = 7112;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 133 || _la === 601) {
                {
                this.state = 7111;
                this.frameClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowName(): WindowNameContext {
        let localContext = new WindowNameContext(this.context, this.state);
        this.enterRule(localContext, 666, MySqlParser.RULE_windowName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7114;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameClause(): FrameClauseContext {
        let localContext = new FrameClauseContext(this.context, this.state);
        this.enterRule(localContext, 668, MySqlParser.RULE_frameClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7116;
            this.frameUnits();
            this.state = 7117;
            this.frameExtent();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameUnits(): FrameUnitsContext {
        let localContext = new FrameUnitsContext(this.context, this.state);
        this.enterRule(localContext, 670, MySqlParser.RULE_frameUnits);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7119;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 601)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameExtent(): FrameExtentContext {
        let localContext = new FrameExtentContext(this.context, this.state);
        this.enterRule(localContext, 672, MySqlParser.RULE_frameExtent);
        try {
            this.state = 7123;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1053, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7121;
                this.frameRange();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7122;
                this.frameBetween();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBetween(): FrameBetweenContext {
        let localContext = new FrameBetweenContext(this.context, this.state);
        this.enterRule(localContext, 674, MySqlParser.RULE_frameBetween);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7125;
            this.match(MySqlParser.BETWEEN);
            this.state = 7126;
            this.frameRange();
            this.state = 7127;
            this.match(MySqlParser.AND);
            this.state = 7128;
            this.frameRange();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameRange(): FrameRangeContext {
        let localContext = new FrameRangeContext(this.context, this.state);
        this.enterRule(localContext, 676, MySqlParser.RULE_frameRange);
        let _la: number;
        try {
            this.state = 7137;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1054, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7130;
                this.match(MySqlParser.CURRENT);
                this.state = 7131;
                this.match(MySqlParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7132;
                this.match(MySqlParser.UNBOUNDED);
                this.state = 7133;
                _la = this.tokenStream.LA(1);
                if(!(_la === 433 || _la === 559)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7134;
                this.expression(0);
                this.state = 7135;
                _la = this.tokenStream.LA(1);
                if(!(_la === 433 || _la === 559)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionClause(): PartitionClauseContext {
        let localContext = new PartitionClauseContext(this.context, this.state);
        this.enterRule(localContext, 678, MySqlParser.RULE_partitionClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7139;
            this.match(MySqlParser.PARTITION);
            this.state = 7140;
            this.match(MySqlParser.BY);
            this.state = 7141;
            this.expression(0);
            this.state = 7146;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 7142;
                this.match(MySqlParser.COMMA);
                this.state = 7143;
                this.expression(0);
                }
                }
                this.state = 7148;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scalarFunctionName(): ScalarFunctionNameContext {
        let localContext = new ScalarFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 680, MySqlParser.RULE_scalarFunctionName);
        try {
            this.state = 7173;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.DATABASE:
            case MySqlParser.LEFT:
            case MySqlParser.RIGHT:
            case MySqlParser.SCHEMA:
            case MySqlParser.DATE:
            case MySqlParser.TIME:
            case MySqlParser.TIMESTAMP:
            case MySqlParser.YEAR:
            case MySqlParser.JSON_ARRAY:
            case MySqlParser.JSON_ARRAYAGG:
            case MySqlParser.JSON_ARRAY_APPEND:
            case MySqlParser.JSON_ARRAY_INSERT:
            case MySqlParser.JSON_CONTAINS:
            case MySqlParser.JSON_CONTAINS_PATH:
            case MySqlParser.JSON_DEPTH:
            case MySqlParser.JSON_EXTRACT:
            case MySqlParser.JSON_INSERT:
            case MySqlParser.JSON_KEYS:
            case MySqlParser.JSON_LENGTH:
            case MySqlParser.JSON_MERGE:
            case MySqlParser.JSON_MERGE_PATCH:
            case MySqlParser.JSON_MERGE_PRESERVE:
            case MySqlParser.JSON_OBJECT:
            case MySqlParser.JSON_OBJECTAGG:
            case MySqlParser.JSON_OVERLAPS:
            case MySqlParser.JSON_PRETTY:
            case MySqlParser.JSON_QUOTE:
            case MySqlParser.JSON_REMOVE:
            case MySqlParser.JSON_REPLACE:
            case MySqlParser.JSON_SCHEMA_VALID:
            case MySqlParser.JSON_SCHEMA_VALIDATION_REPORT:
            case MySqlParser.JSON_SEARCH:
            case MySqlParser.JSON_SET:
            case MySqlParser.JSON_STORAGE_FREE:
            case MySqlParser.JSON_STORAGE_SIZE:
            case MySqlParser.JSON_TABLE:
            case MySqlParser.JSON_TYPE:
            case MySqlParser.JSON_UNQUOTE:
            case MySqlParser.JSON_VALID:
            case MySqlParser.JSON_VALUE:
            case MySqlParser.COUNT:
            case MySqlParser.CUME_DIST:
            case MySqlParser.DENSE_RANK:
            case MySqlParser.FIRST_VALUE:
            case MySqlParser.LAG:
            case MySqlParser.LAST_VALUE:
            case MySqlParser.LEAD:
            case MySqlParser.NTILE:
            case MySqlParser.NTH_VALUE:
            case MySqlParser.PERCENT_RANK:
            case MySqlParser.RANK:
            case MySqlParser.ROW_NUMBER:
            case MySqlParser.POSITION:
            case MySqlParser.INVISIBLE:
            case MySqlParser.VISIBLE:
            case MySqlParser.QUARTER:
            case MySqlParser.MONTH:
            case MySqlParser.DAY:
            case MySqlParser.HOUR:
            case MySqlParser.MINUTE:
            case MySqlParser.WEEK:
            case MySqlParser.SECOND:
            case MySqlParser.MICROSECOND:
            case MySqlParser.SESSION_VARIABLES_ADMIN:
            case MySqlParser.GEOMETRYCOLLECTION:
            case MySqlParser.LINESTRING:
            case MySqlParser.MULTILINESTRING:
            case MySqlParser.MULTIPOINT:
            case MySqlParser.MULTIPOLYGON:
            case MySqlParser.POINT:
            case MySqlParser.POLYGON:
            case MySqlParser.ABS:
            case MySqlParser.ACOS:
            case MySqlParser.ADDDATE:
            case MySqlParser.ADDTIME:
            case MySqlParser.AES_DECRYPT:
            case MySqlParser.AES_ENCRYPT:
            case MySqlParser.AREA:
            case MySqlParser.ASBINARY:
            case MySqlParser.ASIN:
            case MySqlParser.ASTEXT:
            case MySqlParser.ASWKB:
            case MySqlParser.ASWKT:
            case MySqlParser.ASYMMETRIC_DECRYPT:
            case MySqlParser.ASYMMETRIC_DERIVE:
            case MySqlParser.ASYMMETRIC_ENCRYPT:
            case MySqlParser.ASYMMETRIC_SIGN:
            case MySqlParser.ASYMMETRIC_VERIFY:
            case MySqlParser.ATAN:
            case MySqlParser.ATAN2:
            case MySqlParser.BENCHMARK:
            case MySqlParser.BIN:
            case MySqlParser.BIT_COUNT:
            case MySqlParser.BIT_LENGTH:
            case MySqlParser.BUFFER:
            case MySqlParser.CEIL:
            case MySqlParser.CEILING:
            case MySqlParser.CENTROID:
            case MySqlParser.CHARACTER_LENGTH:
            case MySqlParser.CHARSET:
            case MySqlParser.CHAR_LENGTH:
            case MySqlParser.COERCIBILITY:
            case MySqlParser.COLLATION:
            case MySqlParser.COMPRESS:
            case MySqlParser.CONCAT:
            case MySqlParser.CONCAT_WS:
            case MySqlParser.CONNECTION_ID:
            case MySqlParser.CONV:
            case MySqlParser.CONVERT_TZ:
            case MySqlParser.COS:
            case MySqlParser.COT:
            case MySqlParser.CRC32:
            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySqlParser.CREATE_DH_PARAMETERS:
            case MySqlParser.CREATE_DIGEST:
            case MySqlParser.CROSSES:
            case MySqlParser.DATEDIFF:
            case MySqlParser.DATE_FORMAT:
            case MySqlParser.DAYNAME:
            case MySqlParser.DAYOFMONTH:
            case MySqlParser.DAYOFWEEK:
            case MySqlParser.DAYOFYEAR:
            case MySqlParser.DECODE:
            case MySqlParser.DEGREES:
            case MySqlParser.DES_DECRYPT:
            case MySqlParser.DES_ENCRYPT:
            case MySqlParser.DIMENSION:
            case MySqlParser.DISJOINT:
            case MySqlParser.ELT:
            case MySqlParser.ENCODE:
            case MySqlParser.ENCRYPT:
            case MySqlParser.ENDPOINT:
            case MySqlParser.ENVELOPE:
            case MySqlParser.EQUALS:
            case MySqlParser.EXP:
            case MySqlParser.EXPORT_SET:
            case MySqlParser.EXTERIORRING:
            case MySqlParser.EXTRACTVALUE:
            case MySqlParser.FIELD:
            case MySqlParser.FIND_IN_SET:
            case MySqlParser.FLOOR:
            case MySqlParser.FORMAT:
            case MySqlParser.FOUND_ROWS:
            case MySqlParser.FROM_BASE64:
            case MySqlParser.FROM_DAYS:
            case MySqlParser.FROM_UNIXTIME:
            case MySqlParser.GEOMCOLLFROMTEXT:
            case MySqlParser.GEOMCOLLFROMWKB:
            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.GEOMETRYFROMTEXT:
            case MySqlParser.GEOMETRYFROMWKB:
            case MySqlParser.GEOMETRYN:
            case MySqlParser.GEOMETRYTYPE:
            case MySqlParser.GEOMFROMTEXT:
            case MySqlParser.GEOMFROMWKB:
            case MySqlParser.GET_FORMAT:
            case MySqlParser.GET_LOCK:
            case MySqlParser.GLENGTH:
            case MySqlParser.GREATEST:
            case MySqlParser.GTID_SUBSET:
            case MySqlParser.GTID_SUBTRACT:
            case MySqlParser.HEX:
            case MySqlParser.IFNULL:
            case MySqlParser.INET6_ATON:
            case MySqlParser.INET6_NTOA:
            case MySqlParser.INET_ATON:
            case MySqlParser.INET_NTOA:
            case MySqlParser.INSTR:
            case MySqlParser.INTERIORRINGN:
            case MySqlParser.INTERSECTS:
            case MySqlParser.ISCLOSED:
            case MySqlParser.ISEMPTY:
            case MySqlParser.ISNULL:
            case MySqlParser.ISSIMPLE:
            case MySqlParser.IS_FREE_LOCK:
            case MySqlParser.IS_IPV4:
            case MySqlParser.IS_IPV4_COMPAT:
            case MySqlParser.IS_IPV4_MAPPED:
            case MySqlParser.IS_IPV6:
            case MySqlParser.IS_USED_LOCK:
            case MySqlParser.LAST_INSERT_ID:
            case MySqlParser.LCASE:
            case MySqlParser.LEAST:
            case MySqlParser.LENGTH:
            case MySqlParser.LINEFROMTEXT:
            case MySqlParser.LINEFROMWKB:
            case MySqlParser.LINESTRINGFROMTEXT:
            case MySqlParser.LINESTRINGFROMWKB:
            case MySqlParser.LN:
            case MySqlParser.LOAD_FILE:
            case MySqlParser.LOCATE:
            case MySqlParser.LOG:
            case MySqlParser.LOG10:
            case MySqlParser.LOG2:
            case MySqlParser.LOWER:
            case MySqlParser.LPAD:
            case MySqlParser.LTRIM:
            case MySqlParser.MAKEDATE:
            case MySqlParser.MAKETIME:
            case MySqlParser.MAKE_SET:
            case MySqlParser.MASTER_POS_WAIT:
            case MySqlParser.MBRCONTAINS:
            case MySqlParser.MBRDISJOINT:
            case MySqlParser.MBREQUAL:
            case MySqlParser.MBRINTERSECTS:
            case MySqlParser.MBROVERLAPS:
            case MySqlParser.MBRTOUCHES:
            case MySqlParser.MBRWITHIN:
            case MySqlParser.MD5:
            case MySqlParser.MLINEFROMTEXT:
            case MySqlParser.MLINEFROMWKB:
            case MySqlParser.MONTHNAME:
            case MySqlParser.MPOINTFROMTEXT:
            case MySqlParser.MPOINTFROMWKB:
            case MySqlParser.MPOLYFROMTEXT:
            case MySqlParser.MPOLYFROMWKB:
            case MySqlParser.MULTILINESTRINGFROMTEXT:
            case MySqlParser.MULTILINESTRINGFROMWKB:
            case MySqlParser.MULTIPOINTFROMTEXT:
            case MySqlParser.MULTIPOINTFROMWKB:
            case MySqlParser.MULTIPOLYGONFROMTEXT:
            case MySqlParser.MULTIPOLYGONFROMWKB:
            case MySqlParser.NAME_CONST:
            case MySqlParser.NULLIF:
            case MySqlParser.NUMGEOMETRIES:
            case MySqlParser.NUMINTERIORRINGS:
            case MySqlParser.NUMPOINTS:
            case MySqlParser.OCT:
            case MySqlParser.OCTET_LENGTH:
            case MySqlParser.ORD:
            case MySqlParser.OVERLAPS:
            case MySqlParser.PERIOD_ADD:
            case MySqlParser.PERIOD_DIFF:
            case MySqlParser.PI:
            case MySqlParser.POINTFROMTEXT:
            case MySqlParser.POINTFROMWKB:
            case MySqlParser.POINTN:
            case MySqlParser.POLYFROMTEXT:
            case MySqlParser.POLYFROMWKB:
            case MySqlParser.POLYGONFROMTEXT:
            case MySqlParser.POLYGONFROMWKB:
            case MySqlParser.POW:
            case MySqlParser.POWER:
            case MySqlParser.QUOTE:
            case MySqlParser.RADIANS:
            case MySqlParser.RAND:
            case MySqlParser.RANDOM:
            case MySqlParser.RANDOM_BYTES:
            case MySqlParser.RELEASE_LOCK:
            case MySqlParser.REVERSE:
            case MySqlParser.ROUND:
            case MySqlParser.ROW_COUNT:
            case MySqlParser.RPAD:
            case MySqlParser.RTRIM:
            case MySqlParser.SEC_TO_TIME:
            case MySqlParser.SESSION_USER:
            case MySqlParser.SHA:
            case MySqlParser.SHA1:
            case MySqlParser.SHA2:
            case MySqlParser.SIGN:
            case MySqlParser.SIN:
            case MySqlParser.SLEEP:
            case MySqlParser.SOUNDEX:
            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySqlParser.SQRT:
            case MySqlParser.SRID:
            case MySqlParser.STARTPOINT:
            case MySqlParser.STRCMP:
            case MySqlParser.STR_TO_DATE:
            case MySqlParser.ST_AREA:
            case MySqlParser.ST_ASBINARY:
            case MySqlParser.ST_ASTEXT:
            case MySqlParser.ST_ASWKB:
            case MySqlParser.ST_ASWKT:
            case MySqlParser.ST_BUFFER:
            case MySqlParser.ST_CENTROID:
            case MySqlParser.ST_CONTAINS:
            case MySqlParser.ST_CROSSES:
            case MySqlParser.ST_DIFFERENCE:
            case MySqlParser.ST_DIMENSION:
            case MySqlParser.ST_DISJOINT:
            case MySqlParser.ST_DISTANCE:
            case MySqlParser.ST_ENDPOINT:
            case MySqlParser.ST_ENVELOPE:
            case MySqlParser.ST_EQUALS:
            case MySqlParser.ST_EXTERIORRING:
            case MySqlParser.ST_GEOMCOLLFROMTEXT:
            case MySqlParser.ST_GEOMCOLLFROMTXT:
            case MySqlParser.ST_GEOMCOLLFROMWKB:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySqlParser.ST_GEOMETRYFROMTEXT:
            case MySqlParser.ST_GEOMETRYFROMWKB:
            case MySqlParser.ST_GEOMETRYN:
            case MySqlParser.ST_GEOMETRYTYPE:
            case MySqlParser.ST_GEOMFROMTEXT:
            case MySqlParser.ST_GEOMFROMWKB:
            case MySqlParser.ST_INTERIORRINGN:
            case MySqlParser.ST_INTERSECTION:
            case MySqlParser.ST_INTERSECTS:
            case MySqlParser.ST_ISCLOSED:
            case MySqlParser.ST_ISEMPTY:
            case MySqlParser.ST_ISSIMPLE:
            case MySqlParser.ST_LINEFROMTEXT:
            case MySqlParser.ST_LINEFROMWKB:
            case MySqlParser.ST_LINESTRINGFROMTEXT:
            case MySqlParser.ST_LINESTRINGFROMWKB:
            case MySqlParser.ST_NUMGEOMETRIES:
            case MySqlParser.ST_NUMINTERIORRING:
            case MySqlParser.ST_NUMINTERIORRINGS:
            case MySqlParser.ST_NUMPOINTS:
            case MySqlParser.ST_OVERLAPS:
            case MySqlParser.ST_POINTFROMTEXT:
            case MySqlParser.ST_POINTFROMWKB:
            case MySqlParser.ST_POINTN:
            case MySqlParser.ST_POLYFROMTEXT:
            case MySqlParser.ST_POLYFROMWKB:
            case MySqlParser.ST_POLYGONFROMTEXT:
            case MySqlParser.ST_POLYGONFROMWKB:
            case MySqlParser.ST_SRID:
            case MySqlParser.ST_STARTPOINT:
            case MySqlParser.ST_SYMDIFFERENCE:
            case MySqlParser.ST_TOUCHES:
            case MySqlParser.ST_UNION:
            case MySqlParser.ST_WITHIN:
            case MySqlParser.ST_X:
            case MySqlParser.ST_Y:
            case MySqlParser.SUBDATE:
            case MySqlParser.SUBSTRING_INDEX:
            case MySqlParser.SUBTIME:
            case MySqlParser.SYSTEM_USER:
            case MySqlParser.TAN:
            case MySqlParser.TIMEDIFF:
            case MySqlParser.TIMESTAMPADD:
            case MySqlParser.TIMESTAMPDIFF:
            case MySqlParser.TIME_FORMAT:
            case MySqlParser.TIME_TO_SEC:
            case MySqlParser.TOUCHES:
            case MySqlParser.TO_BASE64:
            case MySqlParser.TO_DAYS:
            case MySqlParser.TO_SECONDS:
            case MySqlParser.UCASE:
            case MySqlParser.UNCOMPRESS:
            case MySqlParser.UNCOMPRESSED_LENGTH:
            case MySqlParser.UNHEX:
            case MySqlParser.UNIX_TIMESTAMP:
            case MySqlParser.UPDATEXML:
            case MySqlParser.UPPER:
            case MySqlParser.UUID:
            case MySqlParser.UUID_SHORT:
            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
            case MySqlParser.VERSION:
            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySqlParser.WEEKDAY:
            case MySqlParser.WEEKOFYEAR:
            case MySqlParser.WEIGHT_STRING:
            case MySqlParser.WITHIN:
            case MySqlParser.YEARWEEK:
            case MySqlParser.Y_FUNCTION:
            case MySqlParser.X_FUNCTION:
            case MySqlParser.MOD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7149;
                this.functionNameBase();
                }
                break;
            case MySqlParser.ASCII:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7150;
                this.match(MySqlParser.ASCII);
                }
                break;
            case MySqlParser.CURDATE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7151;
                this.match(MySqlParser.CURDATE);
                }
                break;
            case MySqlParser.CURRENT_DATE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7152;
                this.match(MySqlParser.CURRENT_DATE);
                }
                break;
            case MySqlParser.CURRENT_TIME:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7153;
                this.match(MySqlParser.CURRENT_TIME);
                }
                break;
            case MySqlParser.CURRENT_TIMESTAMP:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7154;
                this.match(MySqlParser.CURRENT_TIMESTAMP);
                }
                break;
            case MySqlParser.CURTIME:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7155;
                this.match(MySqlParser.CURTIME);
                }
                break;
            case MySqlParser.DATE_ADD:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7156;
                this.match(MySqlParser.DATE_ADD);
                }
                break;
            case MySqlParser.DATE_SUB:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7157;
                this.match(MySqlParser.DATE_SUB);
                }
                break;
            case MySqlParser.IF:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7158;
                this.match(MySqlParser.IF);
                }
                break;
            case MySqlParser.INSERT:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7159;
                this.match(MySqlParser.INSERT);
                }
                break;
            case MySqlParser.LOCALTIME:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7160;
                this.match(MySqlParser.LOCALTIME);
                }
                break;
            case MySqlParser.LOCALTIMESTAMP:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7161;
                this.match(MySqlParser.LOCALTIMESTAMP);
                }
                break;
            case MySqlParser.MID:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 7162;
                this.match(MySqlParser.MID);
                }
                break;
            case MySqlParser.NOW:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 7163;
                this.match(MySqlParser.NOW);
                }
                break;
            case MySqlParser.REPEAT:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 7164;
                this.match(MySqlParser.REPEAT);
                }
                break;
            case MySqlParser.REPLACE:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 7165;
                this.match(MySqlParser.REPLACE);
                }
                break;
            case MySqlParser.SUBSTR:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 7166;
                this.match(MySqlParser.SUBSTR);
                }
                break;
            case MySqlParser.SUBSTRING:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 7167;
                this.match(MySqlParser.SUBSTRING);
                }
                break;
            case MySqlParser.SYSDATE:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 7168;
                this.match(MySqlParser.SYSDATE);
                }
                break;
            case MySqlParser.TRIM:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 7169;
                this.match(MySqlParser.TRIM);
                }
                break;
            case MySqlParser.UTC_DATE:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 7170;
                this.match(MySqlParser.UTC_DATE);
                }
                break;
            case MySqlParser.UTC_TIME:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 7171;
                this.match(MySqlParser.UTC_TIME);
                }
                break;
            case MySqlParser.UTC_TIMESTAMP:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 7172;
                this.match(MySqlParser.UTC_TIMESTAMP);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public passwordFunctionClause(): PasswordFunctionClauseContext {
        let localContext = new PasswordFunctionClauseContext(this.context, this.state);
        this.enterRule(localContext, 682, MySqlParser.RULE_passwordFunctionClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7175;
            localContext._functionName = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 535 || _la === 551)) {
                localContext._functionName = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7176;
            this.match(MySqlParser.LR_BRACKET);
            this.state = 7177;
            this.functionArg();
            this.state = 7178;
            this.match(MySqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionArgs(): FunctionArgsContext {
        let localContext = new FunctionArgsContext(this.context, this.state);
        this.enterRule(localContext, 684, MySqlParser.RULE_functionArgs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7184;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1057, this.context) ) {
            case 1:
                {
                this.state = 7180;
                this.constant();
                }
                break;
            case 2:
                {
                this.state = 7181;
                this.fullColumnName();
                }
                break;
            case 3:
                {
                this.state = 7182;
                this.functionCall();
                }
                break;
            case 4:
                {
                this.state = 7183;
                this.expression(0);
                }
                break;
            }
            this.state = 7195;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1135) {
                {
                {
                this.state = 7186;
                this.match(MySqlParser.COMMA);
                this.state = 7191;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1058, this.context) ) {
                case 1:
                    {
                    this.state = 7187;
                    this.constant();
                    }
                    break;
                case 2:
                    {
                    this.state = 7188;
                    this.fullColumnName();
                    }
                    break;
                case 3:
                    {
                    this.state = 7189;
                    this.functionCall();
                    }
                    break;
                case 4:
                    {
                    this.state = 7190;
                    this.expression(0);
                    }
                    break;
                }
                }
                }
                this.state = 7197;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionArg(): FunctionArgContext {
        let localContext = new FunctionArgContext(this.context, this.state);
        this.enterRule(localContext, 686, MySqlParser.RULE_functionArg);
        try {
            this.state = 7202;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1060, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7198;
                this.constant();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7199;
                this.fullColumnName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7200;
                this.functionCall();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7201;
                this.expression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public expression(): ExpressionContext;
    public expression(_p: number): ExpressionContext;
    public expression(_p?: number): ExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 688;
        this.enterRecursionRule(localContext, 688, MySqlParser.RULE_expression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7215;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1062, this.context) ) {
            case 1:
                {
                localContext = new NotExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 7205;
                (localContext as NotExpressionContext)._notOperator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 114 || _la === 1127)) {
                    (localContext as NotExpressionContext)._notOperator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7206;
                this.expression(4);
                }
                break;
            case 2:
                {
                localContext = new IsExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7207;
                this.predicate(0);
                this.state = 7208;
                this.match(MySqlParser.IS);
                this.state = 7210;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 114) {
                    {
                    this.state = 7209;
                    this.match(MySqlParser.NOT);
                    }
                }

                this.state = 7212;
                (localContext as IsExpressionContext)._testValue = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 63 || _la === 178 || _la === 662)) {
                    (localContext as IsExpressionContext)._testValue = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 3:
                {
                localContext = new PredicateExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7214;
                this.predicate(0);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 7223;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1063, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new LogicalExpressionContext(new ExpressionContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_expression);
                    this.state = 7217;
                    if (!(this.precpred(this.context, 3))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                    }
                    this.state = 7218;
                    this.logicalOperator();
                    this.state = 7219;
                    this.expression(4);
                    }
                    }
                }
                this.state = 7225;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1063, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public predicate(): PredicateContext;
    public predicate(_p: number): PredicateContext;
    public predicate(_p?: number): PredicateContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PredicateContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 690;
        this.enterRecursionRule(localContext, 690, MySqlParser.RULE_predicate, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new ExpressionAtomPredicateContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 7227;
            this.expressionAtom(0);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 7293;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1071, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 7291;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 1070, this.context) ) {
                    case 1:
                        {
                        localContext = new BinaryComparisonPredicateContext(new PredicateContext(parentContext, parentState));
                        (localContext as BinaryComparisonPredicateContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_predicate);
                        this.state = 7229;
                        if (!(this.precpred(this.context, 8))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 8)");
                        }
                        this.state = 7230;
                        this.comparisonOperator();
                        this.state = 7231;
                        (localContext as BinaryComparisonPredicateContext)._right = this.predicate(9);
                        }
                        break;
                    case 2:
                        {
                        localContext = new BetweenPredicateContext(new PredicateContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_predicate);
                        this.state = 7233;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 7235;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 114) {
                            {
                            this.state = 7234;
                            this.match(MySqlParser.NOT);
                            }
                        }

                        this.state = 7237;
                        this.match(MySqlParser.BETWEEN);
                        this.state = 7238;
                        this.predicate(0);
                        this.state = 7239;
                        this.match(MySqlParser.AND);
                        this.state = 7240;
                        this.predicate(7);
                        }
                        break;
                    case 3:
                        {
                        localContext = new SoundsLikePredicateContext(new PredicateContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_predicate);
                        this.state = 7242;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 7243;
                        this.match(MySqlParser.SOUNDS);
                        this.state = 7244;
                        this.match(MySqlParser.LIKE);
                        this.state = 7245;
                        this.predicate(6);
                        }
                        break;
                    case 4:
                        {
                        localContext = new RegexpPredicateContext(new PredicateContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_predicate);
                        this.state = 7246;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 7248;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 114) {
                            {
                            this.state = 7247;
                            this.match(MySqlParser.NOT);
                            }
                        }

                        this.state = 7250;
                        (localContext as RegexpPredicateContext)._regex = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 137 || _la === 149)) {
                            (localContext as RegexpPredicateContext)._regex = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7251;
                        this.predicate(4);
                        }
                        break;
                    case 5:
                        {
                        localContext = new InPredicateContext(new PredicateContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_predicate);
                        this.state = 7252;
                        if (!(this.precpred(this.context, 10))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 10)");
                        }
                        this.state = 7254;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 114) {
                            {
                            this.state = 7253;
                            this.match(MySqlParser.NOT);
                            }
                        }

                        this.state = 7256;
                        this.match(MySqlParser.IN);
                        this.state = 7257;
                        this.match(MySqlParser.LR_BRACKET);
                        this.state = 7260;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 1067, this.context) ) {
                        case 1:
                            {
                            this.state = 7258;
                            this.selectStatement();
                            }
                            break;
                        case 2:
                            {
                            this.state = 7259;
                            this.expressions();
                            }
                            break;
                        }
                        this.state = 7262;
                        this.match(MySqlParser.RR_BRACKET);
                        }
                        break;
                    case 6:
                        {
                        localContext = new IsNullPredicateContext(new PredicateContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_predicate);
                        this.state = 7264;
                        if (!(this.precpred(this.context, 9))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 9)");
                        }
                        this.state = 7265;
                        this.match(MySqlParser.IS);
                        this.state = 7266;
                        this.nullNotnull();
                        }
                        break;
                    case 7:
                        {
                        localContext = new SubqueryComparisonPredicateContext(new PredicateContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_predicate);
                        this.state = 7267;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 7268;
                        this.comparisonOperator();
                        this.state = 7269;
                        (localContext as SubqueryComparisonPredicateContext)._quantifier = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 6 || _la === 337 || _la === 618)) {
                            (localContext as SubqueryComparisonPredicateContext)._quantifier = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7270;
                        this.match(MySqlParser.LR_BRACKET);
                        this.state = 7271;
                        this.selectStatement();
                        this.state = 7272;
                        this.match(MySqlParser.RR_BRACKET);
                        }
                        break;
                    case 8:
                        {
                        localContext = new LikePredicateContext(new PredicateContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_predicate);
                        this.state = 7274;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 7276;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 114) {
                            {
                            this.state = 7275;
                            this.match(MySqlParser.NOT);
                            }
                        }

                        this.state = 7278;
                        this.match(MySqlParser.LIKE);
                        this.state = 7279;
                        this.predicate(0);
                        this.state = 7282;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 1069, this.context) ) {
                        case 1:
                            {
                            this.state = 7280;
                            this.match(MySqlParser.ESCAPE);
                            this.state = 7281;
                            this.match(MySqlParser.STRING_LITERAL);
                            }
                            break;
                        }
                        }
                        break;
                    case 9:
                        {
                        localContext = new JsonMemberOfPredicateContext(new PredicateContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_predicate);
                        this.state = 7284;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 7285;
                        this.match(MySqlParser.MEMBER);
                        this.state = 7286;
                        this.match(MySqlParser.OF);
                        this.state = 7287;
                        this.match(MySqlParser.LR_BRACKET);
                        this.state = 7288;
                        this.predicate(0);
                        this.state = 7289;
                        this.match(MySqlParser.RR_BRACKET);
                        }
                        break;
                    }
                    }
                }
                this.state = 7295;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1071, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public expressionAtom(): ExpressionAtomContext;
    public expressionAtom(_p: number): ExpressionAtomContext;
    public expressionAtom(_p?: number): ExpressionAtomContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ExpressionAtomContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 692;
        this.enterRecursionRule(localContext, 692, MySqlParser.RULE_expressionAtom, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7344;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1074, this.context) ) {
            case 1:
                {
                localContext = new ConstantExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 7297;
                this.constant();
                }
                break;
            case 2:
                {
                localContext = new FullColumnNameExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7298;
                this.fullColumnName();
                }
                break;
            case 3:
                {
                localContext = new FunctionCallExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7299;
                this.functionCall();
                }
                break;
            case 4:
                {
                localContext = new MysqlVariableExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7300;
                this.mysqlVariable();
                }
                break;
            case 5:
                {
                localContext = new UnaryExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7301;
                this.unaryOperator();
                this.state = 7302;
                this.expressionAtom(12);
                }
                break;
            case 6:
                {
                localContext = new BinaryExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7304;
                this.match(MySqlParser.BINARY);
                this.state = 7305;
                this.expressionAtom(11);
                }
                break;
            case 7:
                {
                localContext = new VariableAssignExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7306;
                this.match(MySqlParser.LOCAL_ID);
                this.state = 7307;
                this.match(MySqlParser.VAR_ASSIGN);
                this.state = 7308;
                this.expressionAtom(10);
                }
                break;
            case 8:
                {
                localContext = new NestedExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7309;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7310;
                this.expression(0);
                this.state = 7315;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 1135) {
                    {
                    {
                    this.state = 7311;
                    this.match(MySqlParser.COMMA);
                    this.state = 7312;
                    this.expression(0);
                    }
                    }
                    this.state = 7317;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 7318;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 9:
                {
                localContext = new NestedRowExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7320;
                this.match(MySqlParser.ROW);
                this.state = 7321;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7322;
                this.expression(0);
                this.state = 7325;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 7323;
                    this.match(MySqlParser.COMMA);
                    this.state = 7324;
                    this.expression(0);
                    }
                    }
                    this.state = 7327;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 1135);
                this.state = 7329;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 10:
                {
                localContext = new ExistsExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7331;
                this.match(MySqlParser.EXISTS);
                this.state = 7332;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7333;
                this.selectStatement();
                this.state = 7334;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 11:
                {
                localContext = new SubqueryExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7336;
                this.match(MySqlParser.LR_BRACKET);
                this.state = 7337;
                this.selectStatement();
                this.state = 7338;
                this.match(MySqlParser.RR_BRACKET);
                }
                break;
            case 12:
                {
                localContext = new IntervalExpressionAtomContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7340;
                this.match(MySqlParser.INTERVAL);
                this.state = 7341;
                this.expression(0);
                this.state = 7342;
                this.intervalType();
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 7367;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1076, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 7365;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 1075, this.context) ) {
                    case 1:
                        {
                        localContext = new BitExpressionAtomContext(new ExpressionAtomContext(parentContext, parentState));
                        (localContext as BitExpressionAtomContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_expressionAtom);
                        this.state = 7346;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 7347;
                        this.bitOperator();
                        this.state = 7348;
                        (localContext as BitExpressionAtomContext)._right = this.expressionAtom(5);
                        }
                        break;
                    case 2:
                        {
                        localContext = new MathExpressionAtomContext(new ExpressionAtomContext(parentContext, parentState));
                        (localContext as MathExpressionAtomContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_expressionAtom);
                        this.state = 7350;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 7351;
                        this.multOperator();
                        this.state = 7352;
                        (localContext as MathExpressionAtomContext)._right = this.expressionAtom(4);
                        }
                        break;
                    case 3:
                        {
                        localContext = new MathExpressionAtomContext(new ExpressionAtomContext(parentContext, parentState));
                        (localContext as MathExpressionAtomContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_expressionAtom);
                        this.state = 7354;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 7355;
                        this.addOperator();
                        this.state = 7356;
                        (localContext as MathExpressionAtomContext)._right = this.expressionAtom(3);
                        }
                        break;
                    case 4:
                        {
                        localContext = new JsonExpressionAtomContext(new ExpressionAtomContext(parentContext, parentState));
                        (localContext as JsonExpressionAtomContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_expressionAtom);
                        this.state = 7358;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 7359;
                        this.jsonOperator();
                        this.state = 7360;
                        (localContext as JsonExpressionAtomContext)._right = this.expressionAtom(2);
                        }
                        break;
                    case 5:
                        {
                        localContext = new CollateExpressionAtomContext(new ExpressionAtomContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, MySqlParser.RULE_expressionAtom);
                        this.state = 7362;
                        if (!(this.precpred(this.context, 14))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 14)");
                        }
                        this.state = 7363;
                        this.match(MySqlParser.COLLATE);
                        this.state = 7364;
                        this.collationName();
                        }
                        break;
                    }
                    }
                }
                this.state = 7369;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1076, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public unaryOperator(): UnaryOperatorContext {
        let localContext = new UnaryOperatorContext(this.context, this.state);
        this.enterRule(localContext, 694, MySqlParser.RULE_unaryOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7370;
            _la = this.tokenStream.LA(1);
            if(!(_la === 114 || ((((_la - 1120)) & ~0x1F) === 0 && ((1 << (_la - 1120)) & 387) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 696, MySqlParser.RULE_comparisonOperator);
        try {
            this.state = 7386;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1077, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7372;
                this.match(MySqlParser.EQUAL_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7373;
                this.match(MySqlParser.GREATER_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7374;
                this.match(MySqlParser.LESS_SYMBOL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7375;
                this.match(MySqlParser.LESS_SYMBOL);
                this.state = 7376;
                this.match(MySqlParser.EQUAL_SYMBOL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7377;
                this.match(MySqlParser.GREATER_SYMBOL);
                this.state = 7378;
                this.match(MySqlParser.EQUAL_SYMBOL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7379;
                this.match(MySqlParser.LESS_SYMBOL);
                this.state = 7380;
                this.match(MySqlParser.GREATER_SYMBOL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7381;
                this.match(MySqlParser.EXCLAMATION_SYMBOL);
                this.state = 7382;
                this.match(MySqlParser.EQUAL_SYMBOL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7383;
                this.match(MySqlParser.LESS_SYMBOL);
                this.state = 7384;
                this.match(MySqlParser.EQUAL_SYMBOL);
                this.state = 7385;
                this.match(MySqlParser.GREATER_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public logicalOperator(): LogicalOperatorContext {
        let localContext = new LogicalOperatorContext(this.context, this.state);
        this.enterRule(localContext, 698, MySqlParser.RULE_logicalOperator);
        try {
            this.state = 7395;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.AND:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7388;
                this.match(MySqlParser.AND);
                }
                break;
            case MySqlParser.BIT_AND_OP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7389;
                this.match(MySqlParser.BIT_AND_OP);
                this.state = 7390;
                this.match(MySqlParser.BIT_AND_OP);
                }
                break;
            case MySqlParser.XOR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7391;
                this.match(MySqlParser.XOR);
                }
                break;
            case MySqlParser.OR:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7392;
                this.match(MySqlParser.OR);
                }
                break;
            case MySqlParser.BIT_OR_OP:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7393;
                this.match(MySqlParser.BIT_OR_OP);
                this.state = 7394;
                this.match(MySqlParser.BIT_OR_OP);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bitOperator(): BitOperatorContext {
        let localContext = new BitOperatorContext(this.context, this.state);
        this.enterRule(localContext, 700, MySqlParser.RULE_bitOperator);
        try {
            this.state = 7404;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MySqlParser.LESS_SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7397;
                this.match(MySqlParser.LESS_SYMBOL);
                this.state = 7398;
                this.match(MySqlParser.LESS_SYMBOL);
                }
                break;
            case MySqlParser.GREATER_SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7399;
                this.match(MySqlParser.GREATER_SYMBOL);
                this.state = 7400;
                this.match(MySqlParser.GREATER_SYMBOL);
                }
                break;
            case MySqlParser.BIT_AND_OP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7401;
                this.match(MySqlParser.BIT_AND_OP);
                }
                break;
            case MySqlParser.BIT_XOR_OP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7402;
                this.match(MySqlParser.BIT_XOR_OP);
                }
                break;
            case MySqlParser.BIT_OR_OP:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7403;
                this.match(MySqlParser.BIT_OR_OP);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multOperator(): MultOperatorContext {
        let localContext = new MultOperatorContext(this.context, this.state);
        this.enterRule(localContext, 702, MySqlParser.RULE_multOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7406;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 1117)) & ~0x1F) === 0 && ((1 << (_la - 1117)) & 103) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public addOperator(): AddOperatorContext {
        let localContext = new AddOperatorContext(this.context, this.state);
        this.enterRule(localContext, 704, MySqlParser.RULE_addOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7408;
            _la = this.tokenStream.LA(1);
            if(!(_la === 1120 || _la === 1121)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonOperator(): JsonOperatorContext {
        let localContext = new JsonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 706, MySqlParser.RULE_jsonOperator);
        try {
            this.state = 7415;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1080, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7410;
                this.match(MySqlParser.MINUS);
                this.state = 7411;
                this.match(MySqlParser.GREATER_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7412;
                this.match(MySqlParser.MINUS);
                this.state = 7413;
                this.match(MySqlParser.GREATER_SYMBOL);
                this.state = 7414;
                this.match(MySqlParser.GREATER_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public charsetNameBase(): CharsetNameBaseContext {
        let localContext = new CharsetNameBaseContext(this.context, this.state);
        this.enterRule(localContext, 708, MySqlParser.RULE_charsetNameBase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7417;
            _la = this.tokenStream.LA(1);
            if(!(_la === 226 || ((((_la - 746)) & ~0x1F) === 0 && ((1 << (_la - 746)) & 4294967295) !== 0) || ((((_la - 778)) & ~0x1F) === 0 && ((1 << (_la - 778)) & 511) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionLevelBase(): TransactionLevelBaseContext {
        let localContext = new TransactionLevelBaseContext(this.context, this.state);
        this.enterRule(localContext, 710, MySqlParser.RULE_transactionLevelBase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7419;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 799)) & ~0x1F) === 0 && ((1 << (_la - 799)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegesBase(): PrivilegesBaseContext {
        let localContext = new PrivilegesBaseContext(this.context, this.state);
        this.enterRule(localContext, 712, MySqlParser.RULE_privilegesBase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7421;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 708)) & ~0x1F) === 0 && ((1 << (_la - 708)) & 2181955587) !== 0) || _la === 740 || _la === 742)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalTypeBase(): IntervalTypeBaseContext {
        let localContext = new IntervalTypeBaseContext(this.context, this.state);
        this.enterRule(localContext, 714, MySqlParser.RULE_intervalTypeBase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7423;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 689)) & ~0x1F) === 0 && ((1 << (_la - 689)) & 255) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataTypeBase(): DataTypeBaseContext {
        let localContext = new DataTypeBaseContext(this.context, this.state);
        this.enterRule(localContext, 716, MySqlParser.RULE_dataTypeBase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7425;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 1179679) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keywordsCanBeId(): KeywordsCanBeIdContext {
        let localContext = new KeywordsCanBeIdContext(this.context, this.state);
        this.enterRule(localContext, 718, MySqlParser.RULE_keywordsCanBeId);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7427;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028421) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 2097217) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 8337) !== 0) || _la === 158 || _la === 168 || _la === 239 || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 1069648127) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 4294967295) !== 0) || ((((_la - 364)) & ~0x1F) === 0 && ((1 << (_la - 364)) & 4290772991) !== 0) || ((((_la - 396)) & ~0x1F) === 0 && ((1 << (_la - 396)) & 4294966015) !== 0) || ((((_la - 428)) & ~0x1F) === 0 && ((1 << (_la - 428)) & 2139095007) !== 0) || ((((_la - 460)) & ~0x1F) === 0 && ((1 << (_la - 460)) & 4294967295) !== 0) || ((((_la - 492)) & ~0x1F) === 0 && ((1 << (_la - 492)) & 3221225471) !== 0) || ((((_la - 527)) & ~0x1F) === 0 && ((1 << (_la - 527)) & 4294180863) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & 3221225471) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & 4294934525) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & 4294959103) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & 4159569919) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & 1641019905) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & 61300511) !== 0) || _la === 792 || _la === 836 || _la === 875 || _la === 1000 || _la === 1005 || _la === 1088)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameBase(): FunctionNameBaseContext {
        let localContext = new FunctionNameBaseContext(this.context, this.state);
        this.enterRule(localContext, 720, MySqlParser.RULE_functionNameBase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7429;
            _la = this.tokenStream.LA(1);
            if(!(_la === 39 || _la === 97 || _la === 148 || _la === 150 || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 23) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 31983) !== 0) || _la === 324 || _la === 459 || ((((_la - 673)) & ~0x1F) === 0 && ((1 << (_la - 673)) & 16711681) !== 0) || _la === 736 || ((((_la - 803)) & ~0x1F) === 0 && ((1 << (_la - 803)) & 4294967289) !== 0) || ((((_la - 835)) & ~0x1F) === 0 && ((1 << (_la - 835)) & 4294967293) !== 0) || ((((_la - 867)) & ~0x1F) === 0 && ((1 << (_la - 867)) & 4294967039) !== 0) || ((((_la - 899)) & ~0x1F) === 0 && ((1 << (_la - 899)) & 4294967295) !== 0) || ((((_la - 931)) & ~0x1F) === 0 && ((1 << (_la - 931)) & 4294967295) !== 0) || ((((_la - 963)) & ~0x1F) === 0 && ((1 << (_la - 963)) & 4294967295) !== 0) || ((((_la - 995)) & ~0x1F) === 0 && ((1 << (_la - 995)) & 4294966239) !== 0) || ((((_la - 1027)) & ~0x1F) === 0 && ((1 << (_la - 1027)) & 4294967295) !== 0) || ((((_la - 1059)) & ~0x1F) === 0 && ((1 << (_la - 1059)) & 3758096383) !== 0) || ((((_la - 1091)) & ~0x1F) === 0 && ((1 << (_la - 1091)) & 131071) !== 0) || _la === 1123)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 344:
            return this.expression_sempred(localContext as ExpressionContext, predIndex);
        case 345:
            return this.predicate_sempred(localContext as PredicateContext, predIndex);
        case 346:
            return this.expressionAtom_sempred(localContext as ExpressionAtomContext, predIndex);
        }
        return true;
    }
    private expression_sempred(localContext: ExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 3);
        }
        return true;
    }
    private predicate_sempred(localContext: PredicateContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return this.precpred(this.context, 8);
        case 2:
            return this.precpred(this.context, 6);
        case 3:
            return this.precpred(this.context, 5);
        case 4:
            return this.precpred(this.context, 3);
        case 5:
            return this.precpred(this.context, 10);
        case 6:
            return this.precpred(this.context, 9);
        case 7:
            return this.precpred(this.context, 7);
        case 8:
            return this.precpred(this.context, 4);
        case 9:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private expressionAtom_sempred(localContext: ExpressionAtomContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 10:
            return this.precpred(this.context, 4);
        case 11:
            return this.precpred(this.context, 3);
        case 12:
            return this.precpred(this.context, 2);
        case 13:
            return this.precpred(this.context, 1);
        case 14:
            return this.precpred(this.context, 14);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,1161,7432,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,
        7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
        2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,
        7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
        2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
        7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,
        2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
        7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,
        2,307,7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,
        7,312,2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,
        2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,
        7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,
        2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,
        7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
        2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,
        7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
        2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
        7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,1,0,3,0,724,
        8,0,1,0,1,0,1,1,1,1,3,1,730,8,1,1,1,1,1,1,1,1,1,1,1,3,1,737,8,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,746,8,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        3,3,786,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        3,4,801,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,812,8,5,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,829,
        8,6,1,7,1,7,1,7,3,7,834,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,3,8,846,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,873,8,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,882,8,10,1,11,1,11,1,11,
        3,11,887,8,11,1,11,1,11,5,11,891,8,11,10,11,12,11,894,9,11,1,12,
        1,12,3,12,898,8,12,1,12,1,12,3,12,902,8,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,3,12,911,8,12,1,12,3,12,914,8,12,1,12,3,12,917,8,12,
        1,12,1,12,3,12,921,8,12,1,12,1,12,1,12,1,13,1,13,3,13,928,8,13,1,
        13,3,13,931,8,13,1,13,1,13,1,13,3,13,936,8,13,1,13,1,13,1,13,1,13,
        5,13,942,8,13,10,13,12,13,945,9,13,1,13,1,13,3,13,949,8,13,1,13,
        1,13,1,13,3,13,954,8,13,1,13,5,13,957,8,13,10,13,12,13,960,9,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,971,8,14,1,14,
        3,14,974,8,14,1,14,1,14,3,14,978,8,14,1,14,3,14,981,8,14,1,14,1,
        14,3,14,985,8,14,1,14,3,14,988,8,14,1,14,1,14,3,14,992,8,14,1,14,
        3,14,995,8,14,1,14,3,14,998,8,14,1,14,1,14,3,14,1002,8,14,1,14,3,
        14,1005,8,14,1,14,1,14,3,14,1009,8,14,1,14,1,14,1,15,1,15,3,15,1015,
        8,15,1,15,1,15,1,15,1,15,3,15,1021,8,15,1,15,1,15,5,15,1025,8,15,
        10,15,12,15,1028,9,15,1,15,1,15,5,15,1032,8,15,10,15,12,15,1035,
        9,15,1,15,1,15,1,16,1,16,3,16,1041,8,16,1,16,3,16,1044,8,16,1,16,
        1,16,3,16,1048,8,16,1,16,1,16,1,16,3,16,1053,8,16,1,16,1,16,5,16,
        1057,8,16,10,16,12,16,1060,9,16,1,16,1,16,1,16,1,16,5,16,1066,8,
        16,10,16,12,16,1069,9,16,1,16,1,16,3,16,1073,8,16,1,17,1,17,1,17,
        3,17,1078,8,17,1,17,1,17,1,17,5,17,1083,8,17,10,17,12,17,1086,9,
        17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,
        18,1100,8,18,10,18,12,18,1103,9,18,1,18,1,18,1,19,1,19,3,19,1109,
        8,19,1,19,1,19,3,19,1113,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,3,19,1123,8,19,1,19,1,19,3,19,1127,8,19,1,19,1,19,3,19,1131,
        8,19,1,19,1,19,3,19,1135,8,19,1,19,1,19,3,19,1139,8,19,1,19,5,19,
        1142,8,19,10,19,12,19,1145,9,19,3,19,1147,8,19,1,19,3,19,1150,8,
        19,1,19,3,19,1153,8,19,1,19,3,19,1156,8,19,1,19,1,19,1,19,1,19,3,
        19,1162,8,19,1,19,1,19,3,19,1166,8,19,1,19,1,19,1,19,1,19,3,19,1172,
        8,19,1,19,5,19,1175,8,19,10,19,12,19,1178,9,19,3,19,1180,8,19,1,
        19,3,19,1183,8,19,3,19,1185,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,3,20,1196,8,20,1,20,1,20,3,20,1200,8,20,1,20,3,20,1203,
        8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        3,21,1217,8,21,1,21,3,21,1220,8,21,1,21,1,21,3,21,1224,8,21,1,21,
        3,21,1227,8,21,1,21,1,21,3,21,1231,8,21,1,21,3,21,1234,8,21,1,21,
        1,21,3,21,1238,8,21,1,21,3,21,1241,8,21,1,21,1,21,3,21,1245,8,21,
        1,21,3,21,1248,8,21,1,21,3,21,1251,8,21,1,21,1,21,3,21,1255,8,21,
        1,21,3,21,1258,8,21,1,21,1,21,3,21,1262,8,21,1,21,1,21,1,22,1,22,
        3,22,1268,8,22,1,22,1,22,3,22,1272,8,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,3,22,1284,8,22,1,22,1,22,1,23,1,23,3,23,
        1290,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,5,24,1299,8,24,10,24,
        12,24,1302,9,24,1,24,1,24,3,24,1306,8,24,1,24,1,24,1,24,1,24,1,24,
        1,24,3,24,1314,8,24,1,25,1,25,1,26,1,26,1,27,1,27,3,27,1322,8,27,
        1,27,1,27,1,27,3,27,1327,8,27,1,27,3,27,1330,8,27,1,27,1,27,1,27,
        3,27,1335,8,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,1343,8,27,1,27,
        1,27,1,27,3,27,1348,8,27,1,27,1,27,1,27,1,27,3,27,1354,8,27,1,27,
        1,27,1,27,3,27,1359,8,27,1,27,1,27,3,27,1363,8,27,3,27,1365,8,27,
        1,28,3,28,1368,8,28,1,28,1,28,3,28,1372,8,28,1,28,1,28,3,28,1376,
        8,28,1,28,3,28,1379,8,28,1,28,1,28,3,28,1383,8,28,1,28,1,28,3,28,
        1387,8,28,1,28,1,28,3,28,1391,8,28,1,28,1,28,1,28,1,28,3,28,1397,
        8,28,1,28,3,28,1400,8,28,1,29,1,29,1,29,1,29,1,29,3,29,1407,8,29,
        1,30,1,30,1,30,3,30,1412,8,30,1,31,1,31,1,31,1,31,3,31,1418,8,31,
        1,32,1,32,1,32,5,32,1423,8,32,10,32,12,32,1426,9,32,1,32,1,32,1,
        32,3,32,1431,8,32,1,32,1,32,1,32,1,32,5,32,1437,8,32,10,32,12,32,
        1440,9,32,3,32,1442,8,32,1,32,1,32,1,32,5,32,1447,8,32,10,32,12,
        32,1450,9,32,3,32,1452,8,32,3,32,1454,8,32,1,33,1,33,1,33,1,33,3,
        33,1460,8,33,1,34,1,34,1,34,1,34,3,34,1466,8,34,1,34,1,34,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1483,
        8,35,1,36,1,36,1,36,1,36,1,36,3,36,1490,8,36,1,37,1,37,1,37,1,38,
        1,38,3,38,1497,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,3,38,1509,8,38,1,38,1,38,1,38,3,38,1514,8,38,1,38,3,38,1517,
        8,38,1,39,3,39,1520,8,39,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,
        1,41,1,41,1,41,3,41,1533,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,3,41,1546,8,41,1,41,1,41,1,41,3,41,1551,8,41,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,3,42,1567,8,42,1,43,1,43,1,43,1,43,5,43,1573,8,43,10,43,12,
        43,1576,9,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,3,44,1585,8,44,1,
        44,3,44,1588,8,44,1,44,3,44,1591,8,44,1,45,1,45,5,45,1595,8,45,10,
        45,12,45,1598,9,45,1,45,3,45,1601,8,45,1,45,3,45,1604,8,45,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1615,8,46,1,46,3,46,
        1618,8,46,1,46,1,46,1,46,3,46,1623,8,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,3,46,1636,8,46,1,46,1,46,1,46,1,46,
        1,46,3,46,1643,8,46,1,46,1,46,1,46,1,46,1,46,3,46,1650,8,46,3,46,
        1652,8,46,1,46,1,46,1,46,1,46,1,46,3,46,1659,8,46,1,47,1,47,3,47,
        1663,8,47,3,47,1665,8,47,1,47,1,47,1,47,3,47,1670,8,47,1,47,3,47,
        1673,8,47,1,47,1,47,5,47,1677,8,47,10,47,12,47,1680,9,47,1,47,1,
        47,3,47,1684,8,47,3,47,1686,8,47,1,47,1,47,3,47,1690,8,47,1,47,3,
        47,1693,8,47,1,47,3,47,1696,8,47,1,47,1,47,5,47,1700,8,47,10,47,
        12,47,1703,9,47,1,47,1,47,3,47,1707,8,47,3,47,1709,8,47,1,47,1,47,
        1,47,3,47,1714,8,47,1,47,1,47,1,47,1,47,1,47,3,47,1721,8,47,3,47,
        1723,8,47,1,47,1,47,1,47,1,47,1,47,3,47,1730,8,47,1,48,1,48,1,48,
        3,48,1735,8,48,1,48,1,48,3,48,1739,8,48,1,48,3,48,1742,8,48,1,49,
        1,49,1,49,1,49,1,49,1,49,3,49,1750,8,49,1,49,1,49,1,49,1,49,1,49,
        1,49,3,49,1758,8,49,3,49,1760,8,49,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,3,50,1770,8,50,1,51,1,51,3,51,1774,8,51,1,51,3,51,1777,
        8,51,1,51,1,51,5,51,1781,8,51,10,51,12,51,1784,9,51,1,51,1,51,3,
        51,1788,8,51,1,51,3,51,1791,8,51,1,51,1,51,5,51,1795,8,51,10,51,
        12,51,1798,9,51,3,51,1800,8,51,1,52,1,52,3,52,1804,8,52,1,52,3,52,
        1807,8,52,1,52,1,52,3,52,1811,8,52,1,52,1,52,1,52,3,52,1816,8,52,
        1,52,1,52,1,52,3,52,1821,8,52,1,52,1,52,1,52,3,52,1826,8,52,1,52,
        1,52,3,52,1830,8,52,1,52,1,52,3,52,1834,8,52,1,52,1,52,3,52,1838,
        8,52,1,52,1,52,3,52,1842,8,52,1,52,1,52,3,52,1846,8,52,1,52,1,52,
        3,52,1850,8,52,1,52,1,52,1,52,3,52,1855,8,52,1,52,1,52,1,52,3,52,
        1860,8,52,1,52,1,52,1,52,3,52,1865,8,52,1,52,1,52,1,52,1,52,3,52,
        1871,8,52,1,52,1,52,1,52,3,52,1876,8,52,1,52,1,52,1,52,3,52,1881,
        8,52,1,52,1,52,1,52,3,52,1886,8,52,1,52,1,52,1,52,3,52,1891,8,52,
        1,52,1,52,1,52,3,52,1896,8,52,1,52,1,52,1,52,1,52,3,52,1902,8,52,
        1,52,1,52,1,52,3,52,1907,8,52,1,52,1,52,1,52,3,52,1912,8,52,1,52,
        1,52,1,52,3,52,1917,8,52,1,52,1,52,1,52,3,52,1922,8,52,1,52,1,52,
        1,52,3,52,1927,8,52,1,52,1,52,1,52,3,52,1932,8,52,1,52,1,52,1,52,
        3,52,1937,8,52,1,52,1,52,1,52,1,52,1,52,3,52,1944,8,52,1,52,1,52,
        1,52,3,52,1949,8,52,1,52,1,52,1,52,3,52,1954,8,52,1,52,1,52,1,52,
        3,52,1959,8,52,1,52,1,52,3,52,1963,8,52,1,52,1,52,1,52,3,52,1968,
        8,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1976,8,52,1,52,1,52,1,52,
        3,52,1981,8,52,1,52,1,52,1,52,1,52,3,52,1987,8,52,1,53,1,53,1,54,
        1,54,1,54,1,55,1,55,1,55,1,55,1,55,3,55,1999,8,55,1,55,1,55,1,55,
        1,55,1,55,3,55,2006,8,55,3,55,2008,8,55,1,55,1,55,1,55,1,55,5,55,
        2014,8,55,10,55,12,55,2017,9,55,1,55,1,55,3,55,2021,8,55,1,56,3,
        56,2024,8,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,2032,8,56,1,56,1,
        56,1,56,1,56,3,56,2038,8,56,1,56,1,56,3,56,2042,8,56,1,56,1,56,1,
        56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,2055,8,56,1,56,1,
        56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,2067,8,56,3,56,2069,
        8,56,1,57,3,57,2072,8,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,2080,
        8,57,1,57,1,57,1,57,1,57,3,57,2086,8,57,1,57,1,57,1,57,1,57,3,57,
        2092,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,2103,
        8,58,10,58,12,58,2106,9,58,1,58,1,58,5,58,2110,8,58,10,58,12,58,
        2113,9,58,1,58,1,58,1,58,1,58,5,58,2119,8,58,10,58,12,58,2122,9,
        58,1,58,1,58,3,58,2126,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,
        58,2135,8,58,10,58,12,58,2138,9,58,1,58,1,58,1,58,1,58,5,58,2144,
        8,58,10,58,12,58,2147,9,58,1,58,1,58,3,58,2151,8,58,1,58,1,58,1,
        58,1,58,1,58,1,58,1,58,1,58,5,58,2161,8,58,10,58,12,58,2164,9,58,
        1,58,1,58,5,58,2168,8,58,10,58,12,58,2171,9,58,1,58,1,58,1,58,1,
        58,5,58,2177,8,58,10,58,12,58,2180,9,58,1,58,1,58,3,58,2184,8,58,
        1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,2194,8,58,10,58,12,
        58,2197,9,58,1,58,1,58,5,58,2201,8,58,10,58,12,58,2204,9,58,1,58,
        1,58,1,58,1,58,5,58,2210,8,58,10,58,12,58,2213,9,58,1,58,1,58,3,
        58,2217,8,58,1,58,1,58,1,58,5,58,2222,8,58,10,58,12,58,2225,9,58,
        1,58,1,58,1,58,1,58,5,58,2231,8,58,10,58,12,58,2234,9,58,1,58,1,
        58,3,58,2238,8,58,3,58,2240,8,58,1,59,1,59,1,59,3,59,2245,8,59,1,
        60,1,60,1,60,1,60,4,60,2251,8,60,11,60,12,60,2252,1,60,1,60,1,61,
        1,61,1,61,5,61,2260,8,61,10,61,12,61,2263,9,61,1,62,3,62,2266,8,
        62,1,62,3,62,2269,8,62,1,62,1,62,3,62,2273,8,62,1,62,1,62,1,62,3,
        62,2278,8,62,1,62,1,62,1,62,1,62,3,62,2284,8,62,1,62,1,62,1,62,1,
        62,3,62,2290,8,62,1,62,1,62,1,62,3,62,2295,8,62,1,62,1,62,1,62,3,
        62,2300,8,62,1,62,1,62,1,62,3,62,2305,8,62,1,62,1,62,1,62,3,62,2310,
        8,62,1,62,3,62,2313,8,62,1,63,1,63,1,63,3,63,2318,8,63,1,63,4,63,
        2321,8,63,11,63,12,63,2322,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
        63,3,63,2333,8,63,1,64,1,64,3,64,2337,8,64,1,64,1,64,1,64,1,64,1,
        64,3,64,2344,8,64,1,64,1,64,1,64,3,64,2349,8,64,1,64,3,64,2352,8,
        64,1,64,1,64,1,64,3,64,2357,8,64,1,64,3,64,2360,8,64,1,64,1,64,3,
        64,2364,8,64,1,64,1,64,3,64,2368,8,64,1,65,1,65,1,65,1,65,5,65,2374,
        8,65,10,65,12,65,2377,9,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,2395,8,67,1,67,3,
        67,2398,8,67,1,67,3,67,2401,8,67,1,67,1,67,3,67,2405,8,67,1,67,1,
        67,1,68,1,68,1,68,1,68,5,68,2413,8,68,10,68,12,68,2416,9,68,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,5,69,2426,8,69,10,69,12,69,2429,
        9,69,1,69,1,69,1,70,1,70,3,70,2435,8,70,1,70,3,70,2438,8,70,1,70,
        1,70,1,70,3,70,2443,8,70,1,70,1,70,1,70,5,70,2448,8,70,10,70,12,
        70,2451,9,70,3,70,2453,8,70,1,70,3,70,2456,8,70,1,71,1,71,1,71,1,
        71,1,71,1,71,1,71,1,71,1,71,3,71,2467,8,71,1,71,3,71,2470,8,71,1,
        71,1,71,3,71,2474,8,71,1,71,1,71,1,72,1,72,1,72,1,72,3,72,2482,8,
        72,1,72,3,72,2485,8,72,1,72,1,72,1,72,3,72,2490,8,72,1,72,1,72,1,
        72,1,72,1,72,1,72,3,72,2498,8,72,1,72,1,72,1,72,1,72,3,72,2504,8,
        72,1,72,1,72,3,72,2508,8,72,1,73,1,73,3,73,2512,8,73,1,73,5,73,2515,
        8,73,10,73,12,73,2518,9,73,1,73,1,73,3,73,2522,8,73,1,73,1,73,1,
        73,1,73,1,73,3,73,2529,8,73,1,73,1,73,3,73,2533,8,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,5,73,2542,8,73,10,73,12,73,2545,9,73,1,73,
        1,73,1,73,1,73,1,73,3,73,2552,8,73,1,73,3,73,2555,8,73,1,73,1,73,
        5,73,2559,8,73,10,73,12,73,2562,9,73,1,73,1,73,1,73,3,73,2567,8,
        73,3,73,2569,8,73,1,73,1,73,1,73,3,73,2574,8,73,1,73,3,73,2577,8,
        73,1,73,1,73,5,73,2581,8,73,10,73,12,73,2584,9,73,1,73,1,73,1,73,
        3,73,2589,8,73,3,73,2591,8,73,1,73,1,73,3,73,2595,8,73,1,73,3,73,
        2598,8,73,1,73,3,73,2601,8,73,1,73,1,73,5,73,2605,8,73,10,73,12,
        73,2608,9,73,1,73,1,73,1,73,3,73,2613,8,73,1,73,3,73,2616,8,73,1,
        73,1,73,5,73,2620,8,73,10,73,12,73,2623,9,73,1,73,1,73,1,73,3,73,
        2628,8,73,3,73,2630,8,73,1,73,1,73,1,73,3,73,2635,8,73,1,73,1,73,
        1,73,1,73,1,73,1,73,3,73,2643,8,73,3,73,2645,8,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,3,73,2654,8,73,1,73,3,73,2657,8,73,1,73,3,73,
        2660,8,73,1,73,1,73,1,73,3,73,2665,8,73,3,73,2667,8,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,3,73,2676,8,73,1,73,3,73,2679,8,73,1,73,
        3,73,2682,8,73,1,73,1,73,1,73,3,73,2687,8,73,3,73,2689,8,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,3,73,2698,8,73,1,73,1,73,1,73,3,73,
        2703,8,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2711,8,73,1,73,1,73,
        3,73,2715,8,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2723,8,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2733,8,73,1,73,1,73,1,73,
        3,73,2738,8,73,1,73,1,73,1,73,1,73,1,73,3,73,2745,8,73,1,73,1,73,
        3,73,2749,8,73,1,73,1,73,3,73,2753,8,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,
        2772,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2782,8,73,
        1,73,1,73,1,73,1,73,3,73,2788,8,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2805,8,73,1,73,
        1,73,3,73,2809,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,
        2819,8,73,1,73,1,73,1,73,3,73,2824,8,73,1,73,3,73,2827,8,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,3,73,2836,8,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,3,73,2847,8,73,1,73,1,73,1,73,1,73,5,73,
        2853,8,73,10,73,12,73,2856,9,73,1,73,1,73,1,73,3,73,2861,8,73,1,
        74,1,74,1,74,1,74,1,74,1,74,5,74,2869,8,74,10,74,12,74,2872,9,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2883,8,74,1,74,
        1,74,1,74,1,74,1,74,3,74,2890,8,74,1,74,1,74,1,74,1,74,1,74,3,74,
        2897,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        5,74,2910,8,74,10,74,12,74,2913,9,74,1,74,1,74,1,74,1,74,1,74,1,
        74,1,74,1,74,1,74,1,74,3,74,2925,8,74,1,74,1,74,1,74,1,74,3,74,2931,
        8,74,1,74,1,74,1,74,1,74,3,74,2937,8,74,1,74,1,74,1,74,1,74,3,74,
        2943,8,74,1,74,1,74,1,74,1,74,3,74,2949,8,74,1,74,1,74,1,74,1,74,
        3,74,2955,8,74,1,74,1,74,1,74,1,74,3,74,2961,8,74,1,75,1,75,1,75,
        3,75,2966,8,75,1,75,1,75,1,76,1,76,1,76,3,76,2973,8,76,1,76,1,76,
        1,77,1,77,1,77,3,77,2980,8,77,1,77,1,77,1,77,1,77,1,77,3,77,2987,
        8,77,1,77,1,77,1,77,3,77,2992,8,77,1,77,5,77,2995,8,77,10,77,12,
        77,2998,9,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,
        79,3,79,3011,8,79,1,79,1,79,1,80,1,80,1,80,3,80,3018,8,80,1,80,1,
        80,1,81,1,81,1,81,3,81,3025,8,81,1,81,1,81,1,82,1,82,3,82,3031,8,
        82,1,82,1,82,3,82,3035,8,82,1,82,1,82,3,82,3039,8,82,1,83,1,83,1,
        83,1,83,1,83,3,83,3046,8,83,1,83,3,83,3049,8,83,1,84,1,84,1,84,3,
        84,3054,8,84,1,84,1,84,1,85,1,85,1,85,3,85,3061,8,85,1,85,1,85,1,
        85,5,85,3066,8,85,10,85,12,85,3069,9,85,1,85,3,85,3072,8,85,1,86,
        1,86,1,86,3,86,3077,8,86,1,86,1,86,1,86,5,86,3082,8,86,10,86,12,
        86,3085,9,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,5,87,3095,8,
        87,10,87,12,87,3098,9,87,3,87,3100,8,87,1,87,1,87,1,87,3,87,3105,
        8,87,1,87,1,87,1,87,3,87,3110,8,87,5,87,3112,8,87,10,87,12,87,3115,
        9,87,1,87,1,87,1,87,3,87,3120,8,87,1,88,1,88,1,88,1,88,1,88,5,88,
        3127,8,88,10,88,12,88,3130,9,88,1,89,1,89,1,89,1,89,1,90,1,90,3,
        90,3138,8,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,3,91,3147,8,91,1,
        91,3,91,3150,8,91,1,92,1,92,3,92,3154,8,92,1,93,1,93,1,93,1,94,1,
        94,1,94,1,94,3,94,3163,8,94,1,95,1,95,3,95,3167,8,95,1,95,3,95,3170,
        8,95,1,95,3,95,3173,8,95,1,95,1,95,1,95,1,95,3,95,3179,8,95,1,95,
        3,95,3182,8,95,1,95,1,95,3,95,3186,8,95,1,95,3,95,3189,8,95,1,95,
        1,95,3,95,3193,8,95,1,95,3,95,3196,8,95,1,95,1,95,1,95,1,95,5,95,
        3202,8,95,10,95,12,95,3205,9,95,3,95,3207,8,95,1,95,1,95,1,95,1,
        95,1,95,1,95,1,95,5,95,3216,8,95,10,95,12,95,3219,9,95,3,95,3221,
        8,95,1,96,1,96,1,96,3,96,3226,8,96,1,96,3,96,3229,8,96,1,96,1,96,
        1,96,3,96,3234,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,
        3244,8,96,1,96,1,96,1,96,3,96,3249,8,96,1,96,1,96,4,96,3253,8,96,
        11,96,12,96,3254,3,96,3257,8,96,1,96,1,96,4,96,3261,8,96,11,96,12,
        96,3262,3,96,3265,8,96,1,96,1,96,1,96,1,96,3,96,3271,8,96,1,96,1,
        96,1,96,1,96,5,96,3277,8,96,10,96,12,96,3280,9,96,1,96,1,96,3,96,
        3284,8,96,1,96,1,96,1,96,1,96,5,96,3290,8,96,10,96,12,96,3293,9,
        96,3,96,3295,8,96,1,97,1,97,1,97,3,97,3300,8,97,1,97,3,97,3303,8,
        97,1,97,1,97,1,97,3,97,3308,8,97,1,97,1,97,1,97,1,97,1,97,1,97,3,
        97,3316,8,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,3324,8,97,1,97,1,
        97,1,97,1,97,3,97,3330,8,97,1,97,1,97,1,97,1,97,5,97,3336,8,97,10,
        97,12,97,3339,9,97,1,97,1,97,3,97,3343,8,97,1,97,1,97,1,97,1,97,
        5,97,3349,8,97,10,97,12,97,3352,9,97,3,97,3354,8,97,1,98,1,98,3,
        98,3358,8,98,1,98,3,98,3361,8,98,1,98,1,98,1,98,1,98,1,98,1,98,3,
        98,3369,8,98,1,98,1,98,1,98,1,98,3,98,3375,8,98,1,98,1,98,1,98,1,
        98,1,98,5,98,3382,8,98,10,98,12,98,3385,9,98,3,98,3387,8,98,1,99,
        1,99,3,99,3391,8,99,1,99,1,99,3,99,3395,8,99,1,99,1,99,3,99,3399,
        8,99,1,99,4,99,3402,8,99,11,99,12,99,3403,1,99,1,99,3,99,3408,8,
        99,1,99,1,99,3,99,3412,8,99,3,99,3414,8,99,1,99,3,99,3417,8,99,1,
        99,3,99,3420,8,99,1,99,3,99,3423,8,99,1,99,1,99,4,99,3427,8,99,11,
        99,12,99,3428,1,99,1,99,3,99,3433,8,99,1,99,3,99,3436,8,99,1,99,
        3,99,3439,8,99,1,99,3,99,3442,8,99,1,99,3,99,3445,8,99,1,99,1,99,
        1,99,4,99,3450,8,99,11,99,12,99,3451,3,99,3454,8,99,1,100,1,100,
        3,100,3458,8,100,1,101,1,101,1,101,3,101,3463,8,101,1,101,1,101,
        1,101,1,101,3,101,3469,8,101,1,101,5,101,3472,8,101,10,101,12,101,
        3475,9,101,1,102,1,102,1,102,1,102,3,102,3481,8,102,1,102,1,102,
        1,102,1,102,3,102,3487,8,102,1,102,5,102,3490,8,102,10,102,12,102,
        3493,9,102,3,102,3495,8,102,1,103,1,103,1,103,1,103,3,103,3501,8,
        103,1,104,1,104,3,104,3505,8,104,1,105,1,105,1,105,1,105,1,105,1,
        105,3,105,3513,8,105,1,106,1,106,3,106,3517,8,106,1,106,3,106,3520,
        8,106,1,106,3,106,3523,8,106,1,106,1,106,1,106,3,106,3528,8,106,
        1,106,3,106,3531,8,106,1,106,1,106,1,106,1,106,1,106,3,106,3538,
        8,106,1,106,1,106,3,106,3542,8,106,1,106,3,106,3545,8,106,1,106,
        1,106,3,106,3549,8,106,1,107,1,107,3,107,3553,8,107,1,107,3,107,
        3556,8,107,1,107,3,107,3559,8,107,1,107,1,107,1,107,3,107,3564,8,
        107,1,107,1,107,1,107,1,107,3,107,3570,8,107,5,107,3572,8,107,10,
        107,12,107,3575,9,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,
        3,107,3584,8,107,1,107,1,107,1,107,1,107,3,107,3590,8,107,5,107,
        3592,8,107,10,107,12,107,3595,9,107,1,107,1,107,1,107,3,107,3600,
        8,107,1,107,1,107,3,107,3604,8,107,1,108,1,108,1,108,1,108,3,108,
        3610,8,108,1,108,3,108,3613,8,108,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,3,109,3625,8,109,1,109,1,109,3,109,
        3629,8,109,1,109,1,109,3,109,3633,8,109,1,110,1,110,1,110,1,110,
        1,110,1,110,3,110,3641,8,110,1,110,1,110,3,110,3645,8,110,1,111,
        1,111,1,111,1,111,1,112,1,112,3,112,3653,8,112,1,112,3,112,3656,
        8,112,1,112,1,112,3,112,3660,8,112,1,112,3,112,3663,8,112,1,112,
        1,112,1,112,1,112,5,112,3669,8,112,10,112,12,112,3672,9,112,1,112,
        1,112,3,112,3676,8,112,1,112,3,112,3679,8,112,1,112,3,112,3682,8,
        112,1,113,1,113,3,113,3686,8,113,1,113,3,113,3689,8,113,1,113,1,
        113,1,113,1,113,1,113,5,113,3696,8,113,10,113,12,113,3699,9,113,
        1,113,1,113,3,113,3703,8,113,1,114,1,114,1,114,1,114,1,114,5,114,
        3710,8,114,10,114,12,114,3713,9,114,1,115,1,115,3,115,3717,8,115,
        1,116,1,116,1,116,5,116,3722,8,116,10,116,12,116,3725,9,116,1,117,
        1,117,5,117,3729,8,117,10,117,12,117,3732,9,117,1,117,1,117,1,117,
        5,117,3737,8,117,10,117,12,117,3740,9,117,1,117,1,117,1,117,3,117,
        3745,8,117,1,118,1,118,1,118,1,118,1,118,1,118,3,118,3753,8,118,
        1,118,3,118,3756,8,118,1,118,3,118,3759,8,118,1,118,1,118,1,118,
        5,118,3764,8,118,10,118,12,118,3767,9,118,3,118,3769,8,118,1,118,
        1,118,1,118,1,118,1,118,3,118,3776,8,118,1,118,1,118,1,118,1,118,
        1,118,1,118,3,118,3784,8,118,1,119,1,119,1,119,1,119,3,119,3790,
        8,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,3,120,
        3801,8,120,1,121,3,121,3804,8,121,1,121,1,121,3,121,3808,8,121,1,
        121,1,121,5,121,3812,8,121,10,121,12,121,3815,9,121,1,121,1,121,
        1,121,1,121,5,121,3821,8,121,10,121,12,121,3824,9,121,1,121,1,121,
        3,121,3828,8,121,1,121,1,121,3,121,3832,8,121,1,121,1,121,5,121,
        3836,8,121,10,121,12,121,3839,9,121,1,121,1,121,1,121,3,121,3844,
        8,121,3,121,3846,8,121,1,121,1,121,3,121,3850,8,121,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,3,122,3859,8,122,1,123,1,123,1,123,
        1,123,1,123,1,123,1,123,1,123,3,123,3869,8,123,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,3,124,3879,8,124,1,125,1,125,5,125,
        3883,8,125,10,125,12,125,3886,9,125,1,125,1,125,3,125,3890,8,125,
        1,125,1,125,3,125,3894,8,125,1,125,3,125,3897,8,125,1,125,3,125,
        3900,8,125,1,125,3,125,3903,8,125,1,125,3,125,3906,8,125,1,125,1,
        125,5,125,3910,8,125,10,125,12,125,3913,9,125,1,125,1,125,1,125,
        3,125,3918,8,125,1,125,3,125,3921,8,125,1,125,3,125,3924,8,125,1,
        125,3,125,3927,8,125,1,125,3,125,3930,8,125,1,125,3,125,3933,8,125,
        3,125,3935,8,125,1,126,1,126,5,126,3939,8,126,10,126,12,126,3942,
        9,126,1,126,1,126,1,126,3,126,3947,8,126,1,126,3,126,3950,8,126,
        1,126,3,126,3953,8,126,1,126,3,126,3956,8,126,1,126,3,126,3959,8,
        126,1,126,3,126,3962,8,126,1,127,1,127,3,127,3966,8,127,1,127,1,
        127,1,128,1,128,3,128,3972,8,128,1,128,1,128,3,128,3976,8,128,1,
        129,1,129,1,129,1,129,1,129,1,129,3,129,3984,8,129,1,129,1,129,3,
        129,3988,8,129,1,129,3,129,3991,8,129,3,129,3993,8,129,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,4006,
        8,130,1,130,3,130,4009,8,130,1,131,1,131,1,131,5,131,4014,8,131,
        10,131,12,131,4017,9,131,1,132,1,132,1,132,1,132,1,132,1,132,1,132,
        3,132,4026,8,132,1,132,3,132,4029,8,132,1,132,1,132,1,132,3,132,
        4034,8,132,3,132,4036,8,132,1,132,1,132,3,132,4040,8,132,1,132,1,
        132,1,132,1,132,1,132,1,132,3,132,4048,8,132,1,133,1,133,1,133,1,
        133,3,133,4054,8,133,1,133,1,133,1,133,1,134,1,134,1,134,1,134,3,
        134,4063,8,134,1,134,1,134,1,134,1,135,1,135,1,135,1,135,1,135,1,
        135,1,135,1,135,3,135,4076,8,135,1,136,1,136,3,136,4080,8,136,1,
        136,1,136,5,136,4084,8,136,10,136,12,136,4087,9,136,1,137,1,137,
        1,137,1,137,1,137,1,137,3,137,4095,8,137,1,137,3,137,4098,8,137,
        1,137,1,137,3,137,4102,8,137,1,137,3,137,4105,8,137,1,137,1,137,
        3,137,4109,8,137,1,137,1,137,3,137,4113,8,137,1,137,3,137,4116,8,
        137,3,137,4118,8,137,1,138,1,138,1,138,1,138,5,138,4124,8,138,10,
        138,12,138,4127,9,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,
        1,138,1,138,3,138,4138,8,138,1,138,1,138,4,138,4142,8,138,11,138,
        12,138,4143,3,138,4146,8,138,1,138,1,138,4,138,4150,8,138,11,138,
        12,138,4151,3,138,4154,8,138,3,138,4156,8,138,1,139,1,139,1,139,
        1,139,3,139,4162,8,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,
        4170,8,139,1,140,1,140,1,140,1,140,1,140,1,140,3,140,4178,8,140,
        1,141,1,141,3,141,4182,8,141,1,141,1,141,3,141,4186,8,141,1,142,
        1,142,1,142,1,142,1,142,5,142,4193,8,142,10,142,12,142,4196,9,142,
        1,142,1,142,3,142,4200,8,142,1,143,1,143,1,143,1,144,1,144,1,144,
        1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,5,144,
        4218,8,144,10,144,12,144,4221,9,144,1,145,1,145,3,145,4225,8,145,
        1,146,1,146,1,146,1,146,3,146,4231,8,146,1,146,1,146,1,146,1,146,
        1,146,3,146,4238,8,146,1,147,1,147,1,147,3,147,4243,8,147,1,148,
        1,148,1,148,1,148,1,148,5,148,4250,8,148,10,148,12,148,4253,9,148,
        3,148,4255,8,148,1,149,1,149,3,149,4259,8,149,1,150,1,150,3,150,
        4263,8,150,1,150,1,150,3,150,4267,8,150,1,150,3,150,4270,8,150,1,
        150,3,150,4273,8,150,1,150,3,150,4276,8,150,1,151,1,151,3,151,4280,
        8,151,1,151,1,151,3,151,4284,8,151,1,151,3,151,4287,8,151,1,151,
        3,151,4290,8,151,1,151,3,151,4293,8,151,1,152,1,152,1,152,1,153,
        1,153,3,153,4300,8,153,1,153,1,153,3,153,4304,8,153,1,153,1,153,
        1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,155,1,155,5,155,4317,
        8,155,10,155,12,155,4320,9,155,1,155,3,155,4323,8,155,1,156,1,156,
        1,156,1,157,1,157,1,157,1,157,1,157,1,158,1,158,3,158,4335,8,158,
        1,158,1,158,1,158,1,158,5,158,4341,8,158,10,158,12,158,4344,9,158,
        1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,4353,8,159,1,160,
        1,160,3,160,4357,8,160,1,160,3,160,4360,8,160,1,160,1,160,1,161,
        1,161,3,161,4366,8,161,1,161,3,161,4369,8,161,1,161,3,161,4372,8,
        161,1,162,1,162,1,162,1,162,1,162,1,162,1,162,3,162,4381,8,162,1,
        163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,4390,8,163,1,164,1,
        164,1,164,1,164,1,164,1,164,5,164,4398,8,164,10,164,12,164,4401,
        9,164,1,164,3,164,4404,8,164,1,165,1,165,1,165,1,165,1,165,1,165,
        5,165,4412,8,165,10,165,12,165,4415,9,165,1,166,1,166,1,166,1,166,
        1,166,1,166,1,166,3,166,4424,8,166,1,167,1,167,1,167,1,168,1,168,
        1,168,3,168,4432,8,168,1,168,3,168,4435,8,168,1,169,1,169,1,169,
        1,169,1,169,5,169,4442,8,169,10,169,12,169,4445,9,169,3,169,4447,
        8,169,1,169,1,169,3,169,4451,8,169,1,169,5,169,4454,8,169,10,169,
        12,169,4457,9,169,1,169,3,169,4460,8,169,1,170,1,170,1,170,1,170,
        1,170,5,170,4467,8,170,10,170,12,170,4470,9,170,3,170,4472,8,170,
        1,171,1,171,1,171,1,172,1,172,1,172,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,5,173,4501,8,173,10,173,12,173,4504,
        9,173,3,173,4506,8,173,1,173,3,173,4509,8,173,1,174,1,174,1,175,
        1,175,1,176,1,176,1,177,1,177,1,177,1,177,1,178,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,5,178,4563,8,178,10,178,12,178,4566,
        9,178,1,178,1,178,3,178,4570,8,178,1,179,1,179,1,179,1,179,1,179,
        1,179,1,180,1,180,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,
        4598,8,181,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,3,182,4612,8,182,1,183,1,183,1,183,5,183,4617,
        8,183,10,183,12,183,4620,9,183,1,183,3,183,4623,8,183,1,184,1,184,
        1,184,1,184,3,184,4629,8,184,1,185,1,185,1,185,1,185,1,185,1,185,
        3,185,4637,8,185,3,185,4639,8,185,1,186,1,186,1,186,1,186,1,187,
        1,187,1,187,1,187,1,187,3,187,4650,8,187,1,188,1,188,1,188,1,188,
        1,189,1,189,1,189,1,189,3,189,4660,8,189,1,190,1,190,1,190,1,190,
        1,190,3,190,4667,8,190,1,191,1,191,1,191,1,191,3,191,4673,8,191,
        1,192,1,192,1,192,1,192,1,193,1,193,3,193,4681,8,193,1,194,1,194,
        1,194,3,194,4686,8,194,1,194,1,194,1,194,1,194,5,194,4692,8,194,
        10,194,12,194,4695,9,194,1,194,1,194,1,194,5,194,4700,8,194,10,194,
        12,194,4703,9,194,1,194,1,194,1,194,5,194,4708,8,194,10,194,12,194,
        4711,9,194,1,194,1,194,1,194,5,194,4716,8,194,10,194,12,194,4719,
        9,194,1,194,5,194,4722,8,194,10,194,12,194,4725,9,194,1,194,1,194,
        3,194,4729,8,194,1,195,1,195,1,195,3,195,4734,8,195,1,195,4,195,
        4737,8,195,11,195,12,195,4738,1,195,1,195,4,195,4743,8,195,11,195,
        12,195,4744,3,195,4747,8,195,1,195,1,195,1,195,1,196,1,196,1,196,
        1,196,4,196,4756,8,196,11,196,12,196,4757,1,196,5,196,4761,8,196,
        10,196,12,196,4764,9,196,1,196,1,196,4,196,4768,8,196,11,196,12,
        196,4769,3,196,4772,8,196,1,196,1,196,1,196,1,197,1,197,1,197,1,
        198,1,198,1,198,1,199,1,199,1,199,3,199,4786,8,199,1,199,1,199,4,
        199,4790,8,199,11,199,12,199,4791,1,199,1,199,1,199,3,199,4797,8,
        199,1,200,1,200,1,200,3,200,4802,8,200,1,200,1,200,4,200,4806,8,
        200,11,200,12,200,4807,1,200,1,200,1,200,1,200,1,200,3,200,4815,
        8,200,1,201,1,201,1,201,1,202,1,202,1,202,3,202,4823,8,202,1,202,
        1,202,1,202,1,202,4,202,4829,8,202,11,202,12,202,4830,1,202,1,202,
        1,202,3,202,4836,8,202,1,203,1,203,1,203,1,203,3,203,4842,8,203,
        1,203,3,203,4845,8,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,
        4853,8,203,1,204,1,204,1,204,1,204,1,204,3,204,4860,8,204,1,205,
        1,205,1,205,1,205,1,205,1,205,1,205,3,205,4869,8,205,1,205,3,205,
        4872,8,205,1,206,1,206,1,206,1,206,1,206,1,206,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,5,207,4887,8,207,10,207,12,207,4890,9,207,
        1,207,1,207,1,208,1,208,1,208,3,208,4897,8,208,1,208,1,208,1,208,
        1,208,1,208,1,208,3,208,4905,8,208,1,209,1,209,3,209,4909,8,209,
        1,209,1,209,1,210,1,210,1,210,3,210,4916,8,210,1,210,1,210,4,210,
        4920,8,210,11,210,12,210,4921,1,211,1,211,1,211,1,211,4,211,4928,
        8,211,11,211,12,211,4929,1,212,1,212,1,212,1,212,1,212,5,212,4937,
        8,212,10,212,12,212,4940,9,212,1,212,1,212,1,212,3,212,4945,8,212,
        1,212,1,212,1,212,5,212,4950,8,212,10,212,12,212,4953,9,212,1,212,
        1,212,1,212,1,212,3,212,4959,8,212,1,212,5,212,4962,8,212,10,212,
        12,212,4965,9,212,3,212,4967,8,212,3,212,4969,8,212,1,212,1,212,
        4,212,4973,8,212,11,212,12,212,4974,3,212,4977,8,212,1,212,1,212,
        5,212,4981,8,212,10,212,12,212,4984,9,212,1,212,1,212,1,212,1,212,
        3,212,4990,8,212,1,212,1,212,1,212,3,212,4995,8,212,1,212,1,212,
        3,212,4999,8,212,1,212,1,212,1,212,1,212,3,212,5005,8,212,1,213,
        1,213,1,213,1,213,1,213,5,213,5012,8,213,10,213,12,213,5015,9,213,
        1,213,1,213,1,213,3,213,5020,8,213,1,213,1,213,1,213,5,213,5025,
        8,213,10,213,12,213,5028,9,213,1,213,1,213,1,213,3,213,5033,8,213,
        1,213,1,213,1,213,1,213,3,213,5039,8,213,1,213,5,213,5042,8,213,
        10,213,12,213,5045,9,213,3,213,5047,8,213,3,213,5049,8,213,1,213,
        1,213,4,213,5053,8,213,11,213,12,213,5054,3,213,5057,8,213,1,213,
        1,213,5,213,5061,8,213,10,213,12,213,5064,9,213,1,213,1,213,1,213,
        1,213,3,213,5070,8,213,3,213,5072,8,213,1,214,1,214,1,214,3,214,
        5077,8,214,1,214,1,214,1,214,5,214,5082,8,214,10,214,12,214,5085,
        9,214,1,215,1,215,1,215,1,215,5,215,5091,8,215,10,215,12,215,5094,
        9,215,1,215,1,215,3,215,5098,8,215,1,215,1,215,1,215,1,215,1,215,
        5,215,5105,8,215,10,215,12,215,5108,9,215,1,215,1,215,1,215,1,215,
        3,215,5114,8,215,1,215,5,215,5117,8,215,10,215,12,215,5120,9,215,
        3,215,5122,8,215,3,215,5124,8,215,1,215,1,215,1,215,1,215,5,215,
        5130,8,215,10,215,12,215,5133,9,215,3,215,5135,8,215,1,215,1,215,
        1,215,1,215,1,215,1,215,3,215,5143,8,215,1,215,1,215,1,215,3,215,
        5148,8,215,1,215,1,215,1,215,3,215,5153,8,215,5,215,5155,8,215,10,
        215,12,215,5158,9,215,1,215,1,215,1,215,3,215,5163,8,215,1,215,1,
        215,1,215,3,215,5168,8,215,5,215,5170,8,215,10,215,12,215,5173,9,
        215,1,215,1,215,1,215,3,215,5178,8,215,3,215,5180,8,215,1,216,1,
        216,1,216,1,216,1,216,1,216,1,216,5,216,5189,8,216,10,216,12,216,
        5192,9,216,3,216,5194,8,216,1,216,1,216,1,216,5,216,5199,8,216,10,
        216,12,216,5202,9,216,3,216,5204,8,216,1,217,1,217,1,217,1,217,1,
        217,1,217,1,217,1,217,5,217,5214,8,217,10,217,12,217,5217,9,217,
        1,217,1,217,1,217,3,217,5222,8,217,1,218,1,218,1,218,1,218,1,218,
        5,218,5229,8,218,10,218,12,218,5232,9,218,1,219,1,219,1,219,1,219,
        5,219,5238,8,219,10,219,12,219,5241,9,219,1,219,1,219,3,219,5245,
        8,219,1,219,1,219,1,219,1,219,1,219,5,219,5252,8,219,10,219,12,219,
        5255,9,219,1,219,1,219,1,219,3,219,5260,8,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,5,219,5269,8,219,10,219,12,219,5272,9,219,
        1,219,1,219,1,219,3,219,5277,8,219,1,219,1,219,1,219,3,219,5282,
        8,219,5,219,5284,8,219,10,219,12,219,5287,9,219,1,219,1,219,1,219,
        3,219,5292,8,219,1,219,1,219,1,219,3,219,5297,8,219,5,219,5299,8,
        219,10,219,12,219,5302,9,219,3,219,5304,8,219,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,5,220,5314,8,220,10,220,12,220,5317,
        9,220,1,221,1,221,1,221,1,221,3,221,5323,8,221,1,221,1,221,1,221,
        3,221,5328,8,221,1,222,1,222,1,222,1,223,1,223,1,223,1,223,1,223,
        1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
        1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,5358,
        8,223,1,224,1,224,3,224,5362,8,224,1,224,1,224,1,224,3,224,5367,
        8,224,1,225,1,225,1,225,1,225,1,225,3,225,5374,8,225,1,225,3,225,
        5377,8,225,1,225,1,225,1,225,1,225,3,225,5383,8,225,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,1,226,3,226,5393,8,226,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,3,227,5403,8,227,1,228,1,228,
        1,228,1,228,1,228,1,228,1,228,1,228,3,228,5413,8,228,1,228,1,228,
        1,228,1,228,3,228,5419,8,228,1,228,1,228,1,228,1,228,1,228,1,228,
        1,228,3,228,5428,8,228,1,228,1,228,1,228,1,228,3,228,5434,8,228,
        1,228,1,228,1,228,1,228,1,228,3,228,5441,8,228,3,228,5443,8,228,
        1,229,1,229,1,229,1,230,1,230,1,230,1,230,1,230,3,230,5453,8,230,
        1,231,1,231,3,231,5457,8,231,1,231,1,231,3,231,5461,8,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,5471,8,231,1,231,
        1,231,1,231,3,231,5476,8,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,5548,
        8,231,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
        1,232,1,232,1,232,1,232,1,232,1,232,3,232,5566,8,232,1,233,1,233,
        1,233,1,233,1,234,1,234,3,234,5574,8,234,1,234,1,234,1,234,1,234,
        1,234,1,234,1,234,1,234,5,234,5584,8,234,10,234,12,234,5587,9,234,
        1,234,1,234,1,234,1,234,3,234,5593,8,234,3,234,5595,8,234,1,234,
        1,234,1,234,1,234,1,234,1,234,5,234,5603,8,234,10,234,12,234,5606,
        9,234,3,234,5608,8,234,1,235,1,235,1,235,1,235,5,235,5614,8,235,
        10,235,12,235,5617,9,235,1,236,1,236,1,236,1,236,3,236,5623,8,236,
        1,237,1,237,3,237,5627,8,237,1,237,1,237,1,237,1,238,1,238,3,238,
        5634,8,238,1,238,1,238,1,238,3,238,5639,8,238,1,238,3,238,5642,8,
        238,1,238,3,238,5645,8,238,1,239,1,239,1,239,1,239,1,239,1,239,1,
        239,3,239,5654,8,239,1,240,1,240,3,240,5658,8,240,1,240,1,240,3,
        240,5662,8,240,1,240,1,240,1,240,1,240,1,240,1,240,1,241,1,241,1,
        241,1,241,1,241,1,241,1,242,1,242,1,242,1,242,1,243,1,243,1,243,
        1,243,1,243,3,243,5685,8,243,1,243,1,243,1,243,1,243,1,243,3,243,
        5692,8,243,5,243,5694,8,243,10,243,12,243,5697,9,243,1,243,1,243,
        1,243,1,243,3,243,5703,8,243,1,243,1,243,1,243,1,243,1,243,3,243,
        5710,8,243,1,243,3,243,5713,8,243,1,243,1,243,1,243,1,243,1,243,
        1,243,1,243,1,243,1,243,1,243,1,243,1,243,5,243,5727,8,243,10,243,
        12,243,5730,9,243,3,243,5732,8,243,1,244,1,244,1,244,1,244,1,244,
        1,244,1,244,1,244,3,244,5742,8,244,1,244,1,244,3,244,5746,8,244,
        1,244,1,244,1,244,1,244,3,244,5752,8,244,1,244,3,244,5755,8,244,
        1,244,1,244,1,244,3,244,5760,8,244,1,244,1,244,3,244,5764,8,244,
        1,244,1,244,1,244,1,244,1,244,3,244,5771,8,244,1,244,3,244,5774,
        8,244,1,244,1,244,1,244,1,244,3,244,5780,8,244,1,244,1,244,1,244,
        1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,
        1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,3,244,5804,8,244,
        1,244,3,244,5807,8,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,
        1,244,1,244,1,244,3,244,5819,8,244,1,244,3,244,5822,8,244,1,244,
        1,244,1,244,1,244,1,244,1,244,1,244,1,244,3,244,5832,8,244,1,244,
        1,244,1,244,1,244,1,244,1,244,3,244,5840,8,244,1,244,1,244,3,244,
        5844,8,244,1,244,1,244,1,244,1,244,1,244,3,244,5851,8,244,1,244,
        3,244,5854,8,244,1,244,1,244,1,244,1,244,1,244,5,244,5861,8,244,
        10,244,12,244,5864,9,244,1,244,1,244,1,244,3,244,5869,8,244,1,244,
        1,244,1,244,1,244,3,244,5875,8,244,1,244,1,244,1,244,1,244,1,244,
        1,244,1,244,1,244,3,244,5885,8,244,3,244,5887,8,244,1,245,1,245,
        1,245,1,245,3,245,5893,8,245,1,245,3,245,5896,8,245,1,245,3,245,
        5899,8,245,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,3,246,5911,8,246,1,246,3,246,5914,8,246,1,247,1,247,1,247,
        1,247,3,247,5920,8,247,1,248,3,248,5923,8,248,1,248,1,248,1,248,
        1,248,1,248,1,248,3,248,5931,8,248,1,248,1,248,1,248,1,248,1,248,
        1,248,3,248,5939,8,248,1,249,1,249,1,249,1,249,3,249,5945,8,249,
        1,249,1,249,3,249,5949,8,249,1,250,1,250,1,250,1,250,1,250,1,250,
        1,250,1,250,1,250,1,250,1,250,1,250,3,250,5963,8,250,1,251,1,251,
        1,251,1,252,1,252,1,252,1,252,1,252,5,252,5973,8,252,10,252,12,252,
        5976,9,252,1,252,1,252,1,252,1,252,3,252,5982,8,252,1,252,3,252,
        5985,8,252,1,252,1,252,1,252,1,253,1,253,3,253,5992,8,253,1,253,
        1,253,1,253,5,253,5997,8,253,10,253,12,253,6000,9,253,1,254,1,254,
        3,254,6004,8,254,1,254,1,254,1,255,1,255,1,255,1,255,1,255,1,255,
        1,255,5,255,6015,8,255,10,255,12,255,6018,9,255,1,256,1,256,1,256,
        1,256,1,257,1,257,1,258,1,258,3,258,6028,8,258,1,258,1,258,1,258,
        1,258,3,258,6034,8,258,1,259,1,259,1,259,3,259,6039,8,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,3,259,
        6052,8,259,3,259,6054,8,259,1,259,1,259,1,259,3,259,6059,8,259,1,
        259,1,259,3,259,6063,8,259,1,259,3,259,6066,8,259,3,259,6068,8,259,
        1,260,1,260,1,260,1,260,1,260,3,260,6075,8,260,1,261,1,261,1,261,
        1,261,1,261,3,261,6082,8,261,1,261,3,261,6085,8,261,1,261,3,261,
        6088,8,261,1,261,1,261,1,261,1,261,3,261,6094,8,261,1,261,1,261,
        3,261,6098,8,261,1,262,1,262,1,262,1,262,3,262,6104,8,262,1,263,
        1,263,1,263,1,263,3,263,6110,8,263,1,263,1,263,1,264,1,264,1,264,
        1,265,1,265,1,265,1,266,1,266,1,266,3,266,6123,8,266,1,266,1,266,
        1,266,3,266,6128,8,266,1,266,1,266,1,266,1,266,5,266,6134,8,266,
        10,266,12,266,6137,9,266,3,266,6139,8,266,1,267,1,267,1,267,3,267,
        6144,8,267,1,267,1,267,1,267,3,267,6149,8,267,1,267,1,267,1,267,
        1,267,5,267,6155,8,267,10,267,12,267,6158,9,267,3,267,6160,8,267,
        1,268,1,268,1,268,1,268,1,268,1,268,3,268,6168,8,268,1,269,1,269,
        3,269,6172,8,269,1,269,1,269,1,269,5,269,6177,8,269,10,269,12,269,
        6180,9,269,1,270,1,270,1,270,3,270,6185,8,270,1,270,3,270,6188,8,
        270,1,271,1,271,3,271,6192,8,271,1,271,1,271,1,271,1,271,1,271,1,
        271,1,271,1,271,1,271,5,271,6203,8,271,10,271,12,271,6206,9,271,
        1,271,1,271,1,271,3,271,6211,8,271,1,271,1,271,1,271,1,271,1,271,
        1,271,1,271,1,271,5,271,6221,8,271,10,271,12,271,6224,9,271,3,271,
        6226,8,271,1,272,1,272,1,273,1,273,1,273,1,273,1,273,3,273,6235,
        8,273,1,273,1,273,1,273,3,273,6240,8,273,1,274,1,274,1,274,1,274,
        3,274,6246,8,274,1,275,1,275,1,276,1,276,1,276,5,276,6253,8,276,
        10,276,12,276,6256,9,276,1,277,1,277,3,277,6260,8,277,1,278,1,278,
        1,278,3,278,6265,8,278,3,278,6267,8,278,1,278,3,278,6270,8,278,1,
        278,1,278,3,278,6274,8,278,3,278,6276,8,278,1,279,1,279,3,279,6280,
        8,279,1,279,1,279,1,279,1,279,3,279,6286,8,279,1,279,3,279,6289,
        8,279,1,279,3,279,6292,8,279,1,280,1,280,1,280,1,280,3,280,6298,
        8,280,1,281,1,281,1,282,1,282,1,282,1,282,1,282,3,282,6307,8,282,
        1,283,1,283,1,284,1,284,1,284,1,284,3,284,6315,8,284,1,285,1,285,
        3,285,6319,8,285,1,286,1,286,1,286,3,286,6324,8,286,1,287,1,287,
        1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,
        1,288,1,288,1,288,4,288,6342,8,288,11,288,12,288,6343,1,289,1,289,
        1,289,1,289,1,289,3,289,6351,8,289,3,289,6353,8,289,1,290,1,290,
        1,290,4,290,6358,8,290,11,290,12,290,6359,3,290,6362,8,290,1,291,
        1,291,3,291,6366,8,291,1,292,1,292,1,292,3,292,6371,8,292,1,293,
        1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,3,293,6382,8,293,
        1,294,1,294,1,294,3,294,6387,8,294,1,295,1,295,1,296,1,296,3,296,
        6393,8,296,1,297,3,297,6396,8,297,1,297,1,297,3,297,6400,8,297,1,
        297,4,297,6403,8,297,11,297,12,297,6404,1,297,3,297,6408,8,297,1,
        297,1,297,3,297,6412,8,297,1,297,1,297,3,297,6416,8,297,3,297,6418,
        8,297,1,298,1,298,1,299,3,299,6423,8,299,1,299,1,299,1,300,3,300,
        6428,8,300,1,300,1,300,1,301,1,301,1,301,1,301,1,301,1,301,1,301,
        1,301,1,301,3,301,6441,8,301,1,301,3,301,6444,8,301,1,302,1,302,
        3,302,6448,8,302,1,302,3,302,6451,8,302,1,302,3,302,6454,8,302,1,
        302,1,302,1,302,3,302,6459,8,302,1,302,1,302,1,302,3,302,6464,8,
        302,1,302,1,302,1,302,1,302,3,302,6470,8,302,1,302,3,302,6473,8,
        302,1,302,1,302,1,302,3,302,6478,8,302,1,302,3,302,6481,8,302,1,
        302,1,302,1,302,3,302,6486,8,302,1,302,3,302,6489,8,302,1,302,1,
        302,3,302,6493,8,302,1,302,5,302,6496,8,302,10,302,12,302,6499,9,
        302,1,302,1,302,3,302,6503,8,302,1,302,5,302,6506,8,302,10,302,12,
        302,6509,9,302,1,302,1,302,3,302,6513,8,302,1,302,3,302,6516,8,302,
        1,302,5,302,6519,8,302,10,302,12,302,6522,9,302,1,302,1,302,3,302,
        6526,8,302,1,302,5,302,6529,8,302,10,302,12,302,6532,9,302,1,302,
        1,302,1,302,3,302,6537,8,302,1,302,1,302,1,302,3,302,6542,8,302,
        1,302,1,302,1,302,3,302,6547,8,302,1,302,1,302,1,302,3,302,6552,
        8,302,1,302,1,302,3,302,6556,8,302,1,302,3,302,6559,8,302,1,302,
        1,302,1,302,3,302,6564,8,302,1,302,1,302,3,302,6568,8,302,1,302,
        1,302,3,302,6572,8,302,1,303,1,303,1,303,1,303,5,303,6578,8,303,
        10,303,12,303,6581,9,303,1,303,1,303,1,304,1,304,3,304,6587,8,304,
        1,304,1,304,3,304,6591,8,304,1,304,1,304,1,304,3,304,6596,8,304,
        1,304,1,304,1,304,3,304,6601,8,304,1,304,1,304,3,304,6605,8,304,
        3,304,6607,8,304,1,304,3,304,6610,8,304,1,305,1,305,1,305,1,305,
        1,306,1,306,1,306,1,306,1,306,1,306,1,307,1,307,1,307,1,307,3,307,
        6626,8,307,1,307,1,307,1,308,1,308,1,308,5,308,6633,8,308,10,308,
        12,308,6636,9,308,1,309,1,309,1,309,5,309,6641,8,309,10,309,12,309,
        6644,9,309,1,310,1,310,1,310,5,310,6649,8,310,10,310,12,310,6652,
        9,310,1,311,1,311,1,311,1,311,5,311,6658,8,311,10,311,12,311,6661,
        9,311,1,311,1,311,1,312,1,312,1,312,5,312,6668,8,312,10,312,12,312,
        6671,9,312,1,313,1,313,1,313,5,313,6676,8,313,10,313,12,313,6679,
        9,313,1,314,1,314,1,314,5,314,6684,8,314,10,314,12,314,6687,9,314,
        1,315,1,315,1,315,5,315,6692,8,315,10,315,12,315,6695,9,315,1,316,
        1,316,1,316,5,316,6700,8,316,10,316,12,316,6703,9,316,1,317,1,317,
        1,317,1,317,1,317,1,317,1,317,1,317,1,317,3,317,6714,8,317,1,317,
        1,317,1,317,1,317,1,317,3,317,6721,8,317,1,317,1,317,1,317,1,317,
        1,317,1,317,1,317,1,317,3,317,6731,8,317,1,318,1,318,1,318,3,318,
        6736,8,318,1,318,3,318,6739,8,318,1,318,1,318,1,318,3,318,6744,8,
        318,1,318,3,318,6747,8,318,1,319,1,319,3,319,6751,8,319,1,320,1,
        320,1,320,1,321,1,321,1,321,1,321,1,322,1,322,1,322,1,323,1,323,
        1,323,3,323,6766,8,323,1,324,1,324,1,324,1,324,1,324,1,324,3,324,
        6774,8,324,1,324,1,324,1,324,1,324,1,324,3,324,6781,8,324,1,324,
        1,324,1,324,3,324,6786,8,324,1,325,1,325,1,325,3,325,6791,8,325,
        1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,
        1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,
        1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,4,325,6823,8,325,
        11,325,12,325,6824,1,325,1,325,3,325,6829,8,325,1,325,1,325,1,325,
        1,325,4,325,6835,8,325,11,325,12,325,6836,1,325,1,325,3,325,6841,
        8,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,6850,8,325,
        1,325,1,325,1,325,1,325,1,325,1,325,3,325,6858,8,325,1,325,1,325,
        1,325,3,325,6863,8,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,
        6871,8,325,1,325,1,325,1,325,3,325,6876,8,325,1,325,1,325,1,325,
        3,325,6881,8,325,3,325,6883,8,325,1,325,1,325,1,325,1,325,1,325,
        1,325,1,325,3,325,6892,8,325,1,325,1,325,1,325,3,325,6897,8,325,
        1,325,1,325,1,325,1,325,1,325,1,325,3,325,6905,8,325,1,325,1,325,
        1,325,3,325,6910,8,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,
        6918,8,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,6926,8,325,
        1,325,3,325,6929,8,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,
        1,325,3,325,6939,8,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,
        1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,6957,
        8,325,1,325,3,325,6960,8,325,1,325,3,325,6963,8,325,1,325,1,325,
        3,325,6967,8,325,1,326,1,326,1,326,1,326,1,326,1,327,1,327,1,327,
        1,327,5,327,6978,8,327,10,327,12,327,6981,9,327,1,327,1,327,1,327,
        1,327,1,327,3,327,6988,8,327,1,328,1,328,3,328,6992,8,328,1,329,
        1,329,1,329,3,329,6997,8,329,1,329,1,329,1,329,3,329,7002,8,329,
        1,329,1,329,1,329,1,329,3,329,7008,8,329,1,329,1,329,1,329,3,329,
        7013,8,329,1,329,1,329,3,329,7017,8,329,1,329,1,329,1,329,3,329,
        7022,8,329,1,329,1,329,1,329,3,329,7027,8,329,1,329,1,329,1,329,
        3,329,7032,8,329,1,329,1,329,1,329,1,329,1,329,1,329,5,329,7040,
        8,329,10,329,12,329,7043,9,329,3,329,7045,8,329,1,329,1,329,3,329,
        7049,8,329,1,329,1,329,3,329,7053,8,329,1,330,1,330,1,330,1,330,
        1,330,3,330,7060,8,330,1,330,1,330,3,330,7064,8,330,1,330,1,330,
        1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
        1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
        1,330,1,330,1,330,3,330,7093,8,330,1,331,1,331,1,331,1,331,1,331,
        1,331,3,331,7101,8,331,1,332,3,332,7104,8,332,1,332,3,332,7107,8,
        332,1,332,3,332,7110,8,332,1,332,3,332,7113,8,332,1,333,1,333,1,
        334,1,334,1,334,1,335,1,335,1,336,1,336,3,336,7124,8,336,1,337,1,
        337,1,337,1,337,1,337,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
        3,338,7138,8,338,1,339,1,339,1,339,1,339,1,339,5,339,7145,8,339,
        10,339,12,339,7148,9,339,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
        1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
        1,340,1,340,1,340,1,340,1,340,1,340,3,340,7174,8,340,1,341,1,341,
        1,341,1,341,1,341,1,342,1,342,1,342,1,342,3,342,7185,8,342,1,342,
        1,342,1,342,1,342,1,342,3,342,7192,8,342,5,342,7194,8,342,10,342,
        12,342,7197,9,342,1,343,1,343,1,343,1,343,3,343,7203,8,343,1,344,
        1,344,1,344,1,344,1,344,1,344,3,344,7211,8,344,1,344,1,344,1,344,
        3,344,7216,8,344,1,344,1,344,1,344,1,344,5,344,7222,8,344,10,344,
        12,344,7225,9,344,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,
        1,345,3,345,7236,8,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,
        1,345,1,345,1,345,1,345,3,345,7249,8,345,1,345,1,345,1,345,1,345,
        3,345,7255,8,345,1,345,1,345,1,345,1,345,3,345,7261,8,345,1,345,
        1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,
        1,345,1,345,3,345,7277,8,345,1,345,1,345,1,345,1,345,3,345,7283,
        8,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,5,345,7292,8,345,
        10,345,12,345,7295,9,345,1,346,1,346,1,346,1,346,1,346,1,346,1,346,
        1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,5,346,
        7314,8,346,10,346,12,346,7317,9,346,1,346,1,346,1,346,1,346,1,346,
        1,346,1,346,4,346,7326,8,346,11,346,12,346,7327,1,346,1,346,1,346,
        1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,
        1,346,3,346,7345,8,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,
        1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,
        1,346,5,346,7366,8,346,10,346,12,346,7369,9,346,1,347,1,347,1,348,
        1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,
        1,348,1,348,3,348,7387,8,348,1,349,1,349,1,349,1,349,1,349,1,349,
        1,349,3,349,7396,8,349,1,350,1,350,1,350,1,350,1,350,1,350,1,350,
        3,350,7405,8,350,1,351,1,351,1,352,1,352,1,353,1,353,1,353,1,353,
        1,353,3,353,7416,8,353,1,354,1,354,1,355,1,355,1,356,1,356,1,357,
        1,357,1,358,1,358,1,359,1,359,1,360,1,360,1,360,0,3,688,690,692,
        361,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
        220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
        252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
        284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
        316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,
        348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
        380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
        412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,
        444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,
        476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,
        508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,
        540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,
        572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,
        604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,
        636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,
        668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,
        700,702,704,706,708,710,712,714,716,718,720,0,144,2,0,39,39,150,
        150,2,0,531,531,537,537,3,0,69,69,159,159,181,181,3,0,42,42,384,
        384,454,454,4,0,42,42,419,419,529,529,611,611,2,0,514,514,1148,1148,
        2,0,78,78,141,141,2,0,15,15,334,334,3,0,44,44,85,85,184,184,2,0,
        434,434,558,558,3,0,506,506,650,650,658,658,2,0,392,392,460,460,
        2,0,352,352,474,474,2,0,42,42,1138,1139,2,0,350,350,443,443,2,0,
        459,459,673,673,3,0,80,80,84,84,125,125,3,0,42,42,402,402,431,431,
        3,0,42,42,398,398,792,792,2,0,637,637,672,672,2,0,81,81,91,91,3,
        0,436,436,548,548,613,613,2,0,69,69,159,159,1,0,356,357,1,0,1138,
        1139,2,0,1148,1148,1156,1156,2,0,81,81,388,388,2,0,545,545,1148,
        1148,2,0,546,546,1148,1148,3,0,430,430,469,469,521,521,7,0,42,42,
        370,370,372,372,402,402,431,431,573,573,1156,1156,2,0,514,514,530,
        530,1,0,1139,1140,2,0,5,5,51,51,4,0,42,42,384,384,454,454,458,458,
        2,0,26,26,30,30,2,0,12,12,175,175,2,0,192,192,677,677,2,0,21,21,
        144,144,3,0,43,43,75,75,106,106,2,0,106,106,374,374,2,0,365,365,
        427,427,2,0,101,101,601,601,2,0,43,43,106,106,2,0,6,6,49,49,2,0,
        188,188,669,669,4,0,430,430,469,469,520,520,562,562,2,0,430,430,
        520,520,2,0,13,13,45,45,3,0,66,66,78,78,186,186,2,0,34,34,83,83,
        2,0,97,97,148,148,2,0,6,6,49,50,1,0,626,627,2,0,172,172,742,742,
        2,0,439,439,609,609,2,0,226,226,477,477,5,0,107,107,482,483,485,
        485,489,497,575,575,4,0,479,480,484,484,486,487,576,576,3,0,108,
        108,478,478,488,488,2,0,462,462,628,628,2,0,622,622,624,624,2,0,
        344,344,629,629,2,0,90,90,591,591,2,0,51,51,390,390,3,0,31,31,61,
        61,179,179,3,0,131,131,172,172,437,437,3,0,12,12,19,19,187,187,2,
        0,42,42,121,121,2,0,103,103,182,182,2,0,360,360,614,614,2,0,40,40,
        671,671,2,0,115,115,474,474,2,0,422,422,568,568,4,0,206,206,208,
        208,214,214,638,638,2,0,1108,1108,1124,1124,2,0,345,345,577,577,
        2,0,68,68,80,80,6,0,131,131,172,172,177,177,415,415,437,437,671,
        671,2,0,513,513,634,634,2,0,412,412,675,675,2,0,131,131,437,437,
        3,0,81,81,92,92,452,452,3,0,439,439,474,474,609,609,2,0,634,634,
        670,670,2,0,376,376,567,567,6,0,226,226,409,409,411,411,438,438,
        574,574,615,615,2,0,45,46,62,62,3,0,422,422,550,550,885,885,2,0,
        466,466,652,652,10,0,359,359,367,367,378,380,387,387,507,507,515,
        515,639,639,646,646,836,836,1005,1005,2,0,35,35,168,168,2,0,117,
        117,996,996,11,0,359,359,367,367,378,380,387,387,507,507,515,515,
        592,592,639,639,646,646,836,836,1005,1005,2,0,1137,1137,1158,1159,
        1,0,1159,1160,2,0,375,375,787,798,3,0,1138,1140,1149,1149,1151,1151,
        2,0,63,63,178,178,2,0,116,116,1152,1152,5,0,25,25,222,224,231,231,
        233,236,518,518,2,0,25,25,222,222,2,0,25,25,222,223,1,0,196,207,
        3,0,183,183,195,195,612,612,2,0,211,216,431,431,6,0,217,217,228,
        228,230,230,232,232,239,239,348,349,4,0,218,221,226,227,229,229,
        346,346,2,0,153,153,237,237,2,0,466,466,803,811,3,0,211,211,226,
        226,518,518,6,0,200,200,206,206,209,209,217,218,220,221,466,466,
        1,0,214,215,2,0,183,183,612,612,2,0,200,200,206,206,2,0,315,316,
        322,322,3,0,150,150,313,316,331,331,1,0,325,326,3,0,17,17,95,95,
        176,176,2,0,222,222,226,226,2,0,217,218,220,220,3,0,13,13,45,45,
        994,994,3,0,286,286,298,299,309,309,3,0,287,289,305,308,310,312,
        2,0,295,295,297,297,2,0,293,293,296,296,2,0,291,292,302,304,2,0,
        133,133,601,601,2,0,433,433,559,559,2,0,535,535,551,551,2,0,114,
        114,1127,1127,3,0,63,63,178,178,662,662,2,0,137,137,149,149,3,0,
        6,6,337,337,618,618,3,0,114,114,1120,1121,1127,1128,2,0,1117,1119,
        1122,1123,1,0,1120,1121,2,0,226,226,746,786,1,0,799,802,5,0,708,
        709,725,727,733,733,739,740,742,742,1,0,689,696,3,0,217,221,234,
        234,237,237,59,0,11,11,14,14,18,18,29,29,35,35,37,37,42,42,48,48,
        55,55,57,57,59,59,73,73,79,79,94,94,117,117,121,121,124,124,130,
        130,158,158,168,168,239,239,283,290,294,294,298,299,305,312,332,
        385,387,403,405,405,407,432,434,450,452,458,460,521,523,523,527,
        544,547,558,560,589,591,592,594,606,608,636,638,672,674,675,677,
        682,684,688,697,697,699,707,710,712,717,718,720,724,728,732,734,
        734,736,738,741,741,743,745,792,792,836,836,875,875,1000,1000,1005,
        1005,1088,1088,23,0,39,39,97,97,148,148,150,150,217,219,221,221,
        251,282,290,293,295,297,300,304,324,324,459,459,673,673,689,696,
        736,736,803,803,806,835,837,874,876,999,1001,1004,1006,1087,1089,
        1107,1123,1123,8747,0,723,1,0,0,0,2,736,1,0,0,0,4,745,1,0,0,0,6,
        785,1,0,0,0,8,800,1,0,0,0,10,811,1,0,0,0,12,828,1,0,0,0,14,833,1,
        0,0,0,16,845,1,0,0,0,18,872,1,0,0,0,20,881,1,0,0,0,22,883,1,0,0,
        0,24,895,1,0,0,0,26,925,1,0,0,0,28,961,1,0,0,0,30,1012,1,0,0,0,32,
        1038,1,0,0,0,34,1074,1,0,0,0,36,1087,1,0,0,0,38,1184,1,0,0,0,40,
        1186,1,0,0,0,42,1204,1,0,0,0,44,1265,1,0,0,0,46,1287,1,0,0,0,48,
        1293,1,0,0,0,50,1315,1,0,0,0,52,1317,1,0,0,0,54,1319,1,0,0,0,56,
        1399,1,0,0,0,58,1406,1,0,0,0,60,1408,1,0,0,0,62,1413,1,0,0,0,64,
        1453,1,0,0,0,66,1459,1,0,0,0,68,1461,1,0,0,0,70,1482,1,0,0,0,72,
        1489,1,0,0,0,74,1491,1,0,0,0,76,1516,1,0,0,0,78,1519,1,0,0,0,80,
        1524,1,0,0,0,82,1550,1,0,0,0,84,1566,1,0,0,0,86,1568,1,0,0,0,88,
        1590,1,0,0,0,90,1592,1,0,0,0,92,1658,1,0,0,0,94,1729,1,0,0,0,96,
        1731,1,0,0,0,98,1759,1,0,0,0,100,1769,1,0,0,0,102,1799,1,0,0,0,104,
        1986,1,0,0,0,106,1988,1,0,0,0,108,1990,1,0,0,0,110,1993,1,0,0,0,
        112,2068,1,0,0,0,114,2091,1,0,0,0,116,2239,1,0,0,0,118,2244,1,0,
        0,0,120,2246,1,0,0,0,122,2256,1,0,0,0,124,2312,1,0,0,0,126,2332,
        1,0,0,0,128,2334,1,0,0,0,130,2369,1,0,0,0,132,2378,1,0,0,0,134,2385,
        1,0,0,0,136,2408,1,0,0,0,138,2417,1,0,0,0,140,2432,1,0,0,0,142,2457,
        1,0,0,0,144,2477,1,0,0,0,146,2860,1,0,0,0,148,2960,1,0,0,0,150,2962,
        1,0,0,0,152,2969,1,0,0,0,154,2976,1,0,0,0,156,2999,1,0,0,0,158,3007,
        1,0,0,0,160,3014,1,0,0,0,162,3021,1,0,0,0,164,3028,1,0,0,0,166,3040,
        1,0,0,0,168,3050,1,0,0,0,170,3057,1,0,0,0,172,3073,1,0,0,0,174,3119,
        1,0,0,0,176,3121,1,0,0,0,178,3131,1,0,0,0,180,3135,1,0,0,0,182,3141,
        1,0,0,0,184,3153,1,0,0,0,186,3155,1,0,0,0,188,3162,1,0,0,0,190,3164,
        1,0,0,0,192,3222,1,0,0,0,194,3296,1,0,0,0,196,3355,1,0,0,0,198,3453,
        1,0,0,0,200,3457,1,0,0,0,202,3459,1,0,0,0,204,3494,1,0,0,0,206,3496,
        1,0,0,0,208,3504,1,0,0,0,210,3512,1,0,0,0,212,3514,1,0,0,0,214,3550,
        1,0,0,0,216,3605,1,0,0,0,218,3614,1,0,0,0,220,3634,1,0,0,0,222,3646,
        1,0,0,0,224,3650,1,0,0,0,226,3683,1,0,0,0,228,3704,1,0,0,0,230,3714,
        1,0,0,0,232,3718,1,0,0,0,234,3744,1,0,0,0,236,3783,1,0,0,0,238,3785,
        1,0,0,0,240,3800,1,0,0,0,242,3849,1,0,0,0,244,3858,1,0,0,0,246,3868,
        1,0,0,0,248,3878,1,0,0,0,250,3934,1,0,0,0,252,3936,1,0,0,0,254,3963,
        1,0,0,0,256,3969,1,0,0,0,258,3977,1,0,0,0,260,3994,1,0,0,0,262,4010,
        1,0,0,0,264,4047,1,0,0,0,266,4053,1,0,0,0,268,4062,1,0,0,0,270,4075,
        1,0,0,0,272,4079,1,0,0,0,274,4117,1,0,0,0,276,4155,1,0,0,0,278,4169,
        1,0,0,0,280,4177,1,0,0,0,282,4181,1,0,0,0,284,4187,1,0,0,0,286,4201,
        1,0,0,0,288,4204,1,0,0,0,290,4222,1,0,0,0,292,4226,1,0,0,0,294,4242,
        1,0,0,0,296,4244,1,0,0,0,298,4256,1,0,0,0,300,4260,1,0,0,0,302,4277,
        1,0,0,0,304,4294,1,0,0,0,306,4297,1,0,0,0,308,4307,1,0,0,0,310,4311,
        1,0,0,0,312,4324,1,0,0,0,314,4327,1,0,0,0,316,4332,1,0,0,0,318,4352,
        1,0,0,0,320,4354,1,0,0,0,322,4371,1,0,0,0,324,4380,1,0,0,0,326,4389,
        1,0,0,0,328,4391,1,0,0,0,330,4405,1,0,0,0,332,4416,1,0,0,0,334,4425,
        1,0,0,0,336,4428,1,0,0,0,338,4436,1,0,0,0,340,4461,1,0,0,0,342,4473,
        1,0,0,0,344,4476,1,0,0,0,346,4508,1,0,0,0,348,4510,1,0,0,0,350,4512,
        1,0,0,0,352,4514,1,0,0,0,354,4516,1,0,0,0,356,4569,1,0,0,0,358,4571,
        1,0,0,0,360,4577,1,0,0,0,362,4597,1,0,0,0,364,4611,1,0,0,0,366,4622,
        1,0,0,0,368,4624,1,0,0,0,370,4630,1,0,0,0,372,4640,1,0,0,0,374,4644,
        1,0,0,0,376,4651,1,0,0,0,378,4655,1,0,0,0,380,4661,1,0,0,0,382,4668,
        1,0,0,0,384,4674,1,0,0,0,386,4680,1,0,0,0,388,4685,1,0,0,0,390,4730,
        1,0,0,0,392,4751,1,0,0,0,394,4776,1,0,0,0,396,4779,1,0,0,0,398,4785,
        1,0,0,0,400,4801,1,0,0,0,402,4816,1,0,0,0,404,4822,1,0,0,0,406,4852,
        1,0,0,0,408,4854,1,0,0,0,410,4861,1,0,0,0,412,4873,1,0,0,0,414,4879,
        1,0,0,0,416,4904,1,0,0,0,418,4908,1,0,0,0,420,4912,1,0,0,0,422,4923,
        1,0,0,0,424,5004,1,0,0,0,426,5071,1,0,0,0,428,5073,1,0,0,0,430,5179,
        1,0,0,0,432,5203,1,0,0,0,434,5205,1,0,0,0,436,5223,1,0,0,0,438,5303,
        1,0,0,0,440,5305,1,0,0,0,442,5318,1,0,0,0,444,5329,1,0,0,0,446,5357,
        1,0,0,0,448,5361,1,0,0,0,450,5382,1,0,0,0,452,5392,1,0,0,0,454,5402,
        1,0,0,0,456,5442,1,0,0,0,458,5444,1,0,0,0,460,5447,1,0,0,0,462,5547,
        1,0,0,0,464,5565,1,0,0,0,466,5567,1,0,0,0,468,5571,1,0,0,0,470,5609,
        1,0,0,0,472,5618,1,0,0,0,474,5624,1,0,0,0,476,5631,1,0,0,0,478,5653,
        1,0,0,0,480,5655,1,0,0,0,482,5669,1,0,0,0,484,5675,1,0,0,0,486,5731,
        1,0,0,0,488,5886,1,0,0,0,490,5898,1,0,0,0,492,5913,1,0,0,0,494,5919,
        1,0,0,0,496,5938,1,0,0,0,498,5948,1,0,0,0,500,5962,1,0,0,0,502,5964,
        1,0,0,0,504,5967,1,0,0,0,506,5989,1,0,0,0,508,6001,1,0,0,0,510,6007,
        1,0,0,0,512,6019,1,0,0,0,514,6023,1,0,0,0,516,6025,1,0,0,0,518,6067,
        1,0,0,0,520,6074,1,0,0,0,522,6076,1,0,0,0,524,6099,1,0,0,0,526,6105,
        1,0,0,0,528,6113,1,0,0,0,530,6116,1,0,0,0,532,6119,1,0,0,0,534,6140,
        1,0,0,0,536,6161,1,0,0,0,538,6169,1,0,0,0,540,6181,1,0,0,0,542,6189,
        1,0,0,0,544,6227,1,0,0,0,546,6239,1,0,0,0,548,6241,1,0,0,0,550,6247,
        1,0,0,0,552,6249,1,0,0,0,554,6259,1,0,0,0,556,6275,1,0,0,0,558,6288,
        1,0,0,0,560,6297,1,0,0,0,562,6299,1,0,0,0,564,6306,1,0,0,0,566,6308,
        1,0,0,0,568,6314,1,0,0,0,570,6318,1,0,0,0,572,6323,1,0,0,0,574,6325,
        1,0,0,0,576,6327,1,0,0,0,578,6345,1,0,0,0,580,6361,1,0,0,0,582,6365,
        1,0,0,0,584,6370,1,0,0,0,586,6381,1,0,0,0,588,6386,1,0,0,0,590,6388,
        1,0,0,0,592,6392,1,0,0,0,594,6417,1,0,0,0,596,6419,1,0,0,0,598,6422,
        1,0,0,0,600,6427,1,0,0,0,602,6443,1,0,0,0,604,6571,1,0,0,0,606,6573,
        1,0,0,0,608,6606,1,0,0,0,610,6611,1,0,0,0,612,6615,1,0,0,0,614,6621,
        1,0,0,0,616,6629,1,0,0,0,618,6637,1,0,0,0,620,6645,1,0,0,0,622,6653,
        1,0,0,0,624,6664,1,0,0,0,626,6672,1,0,0,0,628,6680,1,0,0,0,630,6688,
        1,0,0,0,632,6696,1,0,0,0,634,6730,1,0,0,0,636,6746,1,0,0,0,638,6750,
        1,0,0,0,640,6752,1,0,0,0,642,6755,1,0,0,0,644,6759,1,0,0,0,646,6765,
        1,0,0,0,648,6785,1,0,0,0,650,6966,1,0,0,0,652,6968,1,0,0,0,654,6987,
        1,0,0,0,656,6989,1,0,0,0,658,7052,1,0,0,0,660,7092,1,0,0,0,662,7094,
        1,0,0,0,664,7103,1,0,0,0,666,7114,1,0,0,0,668,7116,1,0,0,0,670,7119,
        1,0,0,0,672,7123,1,0,0,0,674,7125,1,0,0,0,676,7137,1,0,0,0,678,7139,
        1,0,0,0,680,7173,1,0,0,0,682,7175,1,0,0,0,684,7184,1,0,0,0,686,7202,
        1,0,0,0,688,7215,1,0,0,0,690,7226,1,0,0,0,692,7344,1,0,0,0,694,7370,
        1,0,0,0,696,7386,1,0,0,0,698,7395,1,0,0,0,700,7404,1,0,0,0,702,7406,
        1,0,0,0,704,7408,1,0,0,0,706,7415,1,0,0,0,708,7417,1,0,0,0,710,7419,
        1,0,0,0,712,7421,1,0,0,0,714,7423,1,0,0,0,716,7425,1,0,0,0,718,7427,
        1,0,0,0,720,7429,1,0,0,0,722,724,3,2,1,0,723,722,1,0,0,0,723,724,
        1,0,0,0,724,725,1,0,0,0,725,726,5,0,0,1,726,1,1,0,0,0,727,729,3,
        4,2,0,728,730,5,1136,0,0,729,728,1,0,0,0,729,730,1,0,0,0,730,737,
        1,0,0,0,731,732,3,4,2,0,732,733,5,1136,0,0,733,734,3,2,1,0,734,737,
        1,0,0,0,735,737,1,0,0,0,736,727,1,0,0,0,736,731,1,0,0,0,736,735,
        1,0,0,0,737,3,1,0,0,0,738,746,3,6,3,0,739,746,3,8,4,0,740,746,3,
        10,5,0,741,746,3,12,6,0,742,746,3,14,7,0,743,746,3,18,9,0,744,746,
        3,20,10,0,745,738,1,0,0,0,745,739,1,0,0,0,745,740,1,0,0,0,745,741,
        1,0,0,0,745,742,1,0,0,0,745,743,1,0,0,0,745,744,1,0,0,0,746,5,1,
        0,0,0,747,786,3,22,11,0,748,786,3,24,12,0,749,786,3,26,13,0,750,
        786,3,28,14,0,751,786,3,30,15,0,752,786,3,32,16,0,753,786,3,36,18,
        0,754,786,3,38,19,0,755,786,3,40,20,0,756,786,3,42,21,0,757,786,
        3,44,22,0,758,786,3,54,27,0,759,786,3,34,17,0,760,786,3,126,63,0,
        761,786,3,128,64,0,762,786,3,130,65,0,763,786,3,132,66,0,764,786,
        3,134,67,0,765,786,3,136,68,0,766,786,3,138,69,0,767,786,3,140,70,
        0,768,786,3,142,71,0,769,786,3,144,72,0,770,786,3,150,75,0,771,786,
        3,152,76,0,772,786,3,154,77,0,773,786,3,156,78,0,774,786,3,158,79,
        0,775,786,3,160,80,0,776,786,3,162,81,0,777,786,3,164,82,0,778,786,
        3,166,83,0,779,786,3,168,84,0,780,786,3,170,85,0,781,786,3,172,86,
        0,782,786,3,174,87,0,783,786,3,176,88,0,784,786,3,180,90,0,785,747,
        1,0,0,0,785,748,1,0,0,0,785,749,1,0,0,0,785,750,1,0,0,0,785,751,
        1,0,0,0,785,752,1,0,0,0,785,753,1,0,0,0,785,754,1,0,0,0,785,755,
        1,0,0,0,785,756,1,0,0,0,785,757,1,0,0,0,785,758,1,0,0,0,785,759,
        1,0,0,0,785,760,1,0,0,0,785,761,1,0,0,0,785,762,1,0,0,0,785,763,
        1,0,0,0,785,764,1,0,0,0,785,765,1,0,0,0,785,766,1,0,0,0,785,767,
        1,0,0,0,785,768,1,0,0,0,785,769,1,0,0,0,785,770,1,0,0,0,785,771,
        1,0,0,0,785,772,1,0,0,0,785,773,1,0,0,0,785,774,1,0,0,0,785,775,
        1,0,0,0,785,776,1,0,0,0,785,777,1,0,0,0,785,778,1,0,0,0,785,779,
        1,0,0,0,785,780,1,0,0,0,785,781,1,0,0,0,785,782,1,0,0,0,785,783,
        1,0,0,0,785,784,1,0,0,0,786,7,1,0,0,0,787,801,3,198,99,0,788,801,
        3,190,95,0,789,801,3,200,100,0,790,801,3,184,92,0,791,801,3,196,
        98,0,792,801,3,182,91,0,793,801,3,192,96,0,794,801,3,194,97,0,795,
        801,3,186,93,0,796,801,3,188,94,0,797,801,3,202,101,0,798,801,3,
        538,269,0,799,801,3,540,270,0,800,787,1,0,0,0,800,788,1,0,0,0,800,
        789,1,0,0,0,800,790,1,0,0,0,800,791,1,0,0,0,800,792,1,0,0,0,800,
        793,1,0,0,0,800,794,1,0,0,0,800,795,1,0,0,0,800,796,1,0,0,0,800,
        797,1,0,0,0,800,798,1,0,0,0,800,799,1,0,0,0,801,9,1,0,0,0,802,812,
        3,296,148,0,803,812,3,298,149,0,804,812,3,300,150,0,805,812,3,302,
        151,0,806,812,3,304,152,0,807,812,3,306,153,0,808,812,3,308,154,
        0,809,812,3,310,155,0,810,812,3,312,156,0,811,802,1,0,0,0,811,803,
        1,0,0,0,811,804,1,0,0,0,811,805,1,0,0,0,811,806,1,0,0,0,811,807,
        1,0,0,0,811,808,1,0,0,0,811,809,1,0,0,0,811,810,1,0,0,0,812,11,1,
        0,0,0,813,829,3,328,164,0,814,829,3,330,165,0,815,829,3,332,166,
        0,816,829,3,334,167,0,817,829,3,336,168,0,818,829,3,338,169,0,819,
        829,3,340,170,0,820,829,3,342,171,0,821,829,3,344,172,0,822,829,
        3,368,184,0,823,829,3,370,185,0,824,829,3,372,186,0,825,829,3,374,
        187,0,826,829,3,376,188,0,827,829,3,378,189,0,828,813,1,0,0,0,828,
        814,1,0,0,0,828,815,1,0,0,0,828,816,1,0,0,0,828,817,1,0,0,0,828,
        818,1,0,0,0,828,819,1,0,0,0,828,820,1,0,0,0,828,821,1,0,0,0,828,
        822,1,0,0,0,828,823,1,0,0,0,828,824,1,0,0,0,828,825,1,0,0,0,828,
        826,1,0,0,0,828,827,1,0,0,0,829,13,1,0,0,0,830,834,3,380,190,0,831,
        834,3,382,191,0,832,834,3,384,192,0,833,830,1,0,0,0,833,831,1,0,
        0,0,833,832,1,0,0,0,834,15,1,0,0,0,835,846,3,388,194,0,836,846,3,
        390,195,0,837,846,3,392,196,0,838,846,3,396,198,0,839,846,3,398,
        199,0,840,846,3,400,200,0,841,846,3,404,202,0,842,846,3,394,197,
        0,843,846,3,402,201,0,844,846,3,406,203,0,845,835,1,0,0,0,845,836,
        1,0,0,0,845,837,1,0,0,0,845,838,1,0,0,0,845,839,1,0,0,0,845,840,
        1,0,0,0,845,841,1,0,0,0,845,842,1,0,0,0,845,843,1,0,0,0,845,844,
        1,0,0,0,846,17,1,0,0,0,847,873,3,424,212,0,848,873,3,426,213,0,849,
        873,3,428,214,0,850,873,3,430,215,0,851,873,3,434,217,0,852,873,
        3,436,218,0,853,873,3,438,219,0,854,873,3,440,220,0,855,873,3,468,
        234,0,856,873,3,470,235,0,857,873,3,472,236,0,858,873,3,474,237,
        0,859,873,3,476,238,0,860,873,3,480,240,0,861,873,3,482,241,0,862,
        873,3,484,242,0,863,873,3,486,243,0,864,873,3,488,244,0,865,873,
        3,502,251,0,866,873,3,504,252,0,867,873,3,506,253,0,868,873,3,508,
        254,0,869,873,3,510,255,0,870,873,3,512,256,0,871,873,3,514,257,
        0,872,847,1,0,0,0,872,848,1,0,0,0,872,849,1,0,0,0,872,850,1,0,0,
        0,872,851,1,0,0,0,872,852,1,0,0,0,872,853,1,0,0,0,872,854,1,0,0,
        0,872,855,1,0,0,0,872,856,1,0,0,0,872,857,1,0,0,0,872,858,1,0,0,
        0,872,859,1,0,0,0,872,860,1,0,0,0,872,861,1,0,0,0,872,862,1,0,0,
        0,872,863,1,0,0,0,872,864,1,0,0,0,872,865,1,0,0,0,872,866,1,0,0,
        0,872,867,1,0,0,0,872,868,1,0,0,0,872,869,1,0,0,0,872,870,1,0,0,
        0,872,871,1,0,0,0,873,19,1,0,0,0,874,882,3,524,262,0,875,882,3,526,
        263,0,876,882,3,528,264,0,877,882,3,530,265,0,878,882,3,532,266,
        0,879,882,3,534,267,0,880,882,3,542,271,0,881,874,1,0,0,0,881,875,
        1,0,0,0,881,876,1,0,0,0,881,877,1,0,0,0,881,878,1,0,0,0,881,879,
        1,0,0,0,881,880,1,0,0,0,882,21,1,0,0,0,883,884,5,33,0,0,884,886,
        7,0,0,0,885,887,3,642,321,0,886,885,1,0,0,0,886,887,1,0,0,0,887,
        888,1,0,0,0,888,892,3,584,292,0,889,891,3,56,28,0,890,889,1,0,0,
        0,891,894,1,0,0,0,892,890,1,0,0,0,892,893,1,0,0,0,893,23,1,0,0,0,
        894,892,1,0,0,0,895,897,5,33,0,0,896,898,3,62,31,0,897,896,1,0,0,
        0,897,898,1,0,0,0,898,899,1,0,0,0,899,901,5,415,0,0,900,902,3,642,
        321,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,904,3,
        548,274,0,904,905,5,118,0,0,905,906,5,605,0,0,906,913,3,64,32,0,
        907,908,5,118,0,0,908,910,5,371,0,0,909,911,5,114,0,0,910,909,1,
        0,0,0,910,911,1,0,0,0,911,912,1,0,0,0,912,914,5,561,0,0,913,907,
        1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,917,3,72,36,0,916,915,
        1,0,0,0,916,917,1,0,0,0,917,920,1,0,0,0,918,919,5,368,0,0,919,921,
        5,1148,0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,922,1,0,0,0,922,923,
        5,399,0,0,923,924,3,386,193,0,924,25,1,0,0,0,925,927,5,33,0,0,926,
        928,7,1,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,930,1,0,0,0,929,
        931,7,2,0,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,932,
        933,5,81,0,0,933,935,3,584,292,0,934,936,3,74,37,0,935,934,1,0,0,
        0,935,936,1,0,0,0,936,937,1,0,0,0,937,938,5,118,0,0,938,939,3,550,
        275,0,939,943,3,622,311,0,940,942,3,76,38,0,941,940,1,0,0,0,942,
        945,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,958,1,0,0,0,945,
        943,1,0,0,0,946,948,5,336,0,0,947,949,5,1124,0,0,948,947,1,0,0,0,
        948,949,1,0,0,0,949,950,1,0,0,0,950,957,7,3,0,0,951,953,5,103,0,
        0,952,954,5,1124,0,0,953,952,1,0,0,0,953,954,1,0,0,0,954,955,1,0,
        0,0,955,957,7,4,0,0,956,946,1,0,0,0,956,951,1,0,0,0,957,960,1,0,
        0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,27,1,0,0,0,960,958,1,0,0,
        0,961,962,5,33,0,0,962,963,5,475,0,0,963,964,5,73,0,0,964,965,3,
        584,292,0,965,966,5,5,0,0,966,967,5,659,0,0,967,973,5,1148,0,0,968,
        970,5,453,0,0,969,971,5,1124,0,0,970,969,1,0,0,0,970,971,1,0,0,0,
        971,972,1,0,0,0,972,974,3,592,296,0,973,968,1,0,0,0,973,974,1,0,
        0,0,974,980,1,0,0,0,975,977,5,660,0,0,976,978,5,1124,0,0,977,976,
        1,0,0,0,977,978,1,0,0,0,978,979,1,0,0,0,979,981,3,592,296,0,980,
        975,1,0,0,0,980,981,1,0,0,0,981,987,1,0,0,0,982,984,5,572,0,0,983,
        985,5,1124,0,0,984,983,1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,
        988,3,592,296,0,987,982,1,0,0,0,987,988,1,0,0,0,988,994,1,0,0,0,
        989,991,5,528,0,0,990,992,5,1124,0,0,991,990,1,0,0,0,991,992,1,0,
        0,0,992,993,1,0,0,0,993,995,3,584,292,0,994,989,1,0,0,0,994,995,
        1,0,0,0,995,997,1,0,0,0,996,998,5,674,0,0,997,996,1,0,0,0,997,998,
        1,0,0,0,998,1004,1,0,0,0,999,1001,5,368,0,0,1000,1002,5,1124,0,0,
        1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,1005,
        5,1148,0,0,1004,999,1,0,0,0,1004,1005,1,0,0,0,1005,1006,1,0,0,0,
        1006,1008,5,409,0,0,1007,1009,5,1124,0,0,1008,1007,1,0,0,0,1008,
        1009,1,0,0,0,1009,1010,1,0,0,0,1010,1011,3,572,286,0,1011,29,1,0,
        0,0,1012,1014,5,33,0,0,1013,1015,3,62,31,0,1014,1013,1,0,0,0,1014,
        1015,1,0,0,0,1015,1016,1,0,0,0,1016,1017,5,131,0,0,1017,1018,3,548,
        274,0,1018,1020,5,1133,0,0,1019,1021,3,78,39,0,1020,1019,1,0,0,0,
        1020,1021,1,0,0,0,1021,1026,1,0,0,0,1022,1023,5,1135,0,0,1023,1025,
        3,78,39,0,1024,1022,1,0,0,0,1025,1028,1,0,0,0,1026,1024,1,0,0,0,
        1026,1027,1,0,0,0,1027,1029,1,0,0,0,1028,1026,1,0,0,0,1029,1033,
        5,1134,0,0,1030,1032,3,82,41,0,1031,1030,1,0,0,0,1032,1035,1,0,0,
        0,1033,1031,1,0,0,0,1033,1034,1,0,0,0,1034,1036,1,0,0,0,1035,1033,
        1,0,0,0,1036,1037,3,386,193,0,1037,31,1,0,0,0,1038,1040,5,33,0,0,
        1039,1041,3,62,31,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1043,
        1,0,0,0,1042,1044,5,335,0,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,
        1044,1045,1,0,0,0,1045,1047,5,437,0,0,1046,1048,3,642,321,0,1047,
        1046,1,0,0,0,1047,1048,1,0,0,0,1048,1049,1,0,0,0,1049,1050,3,548,
        274,0,1050,1052,5,1133,0,0,1051,1053,3,80,40,0,1052,1051,1,0,0,0,
        1052,1053,1,0,0,0,1053,1058,1,0,0,0,1054,1055,5,1135,0,0,1055,1057,
        3,80,40,0,1056,1054,1,0,0,0,1057,1060,1,0,0,0,1058,1056,1,0,0,0,
        1058,1059,1,0,0,0,1059,1061,1,0,0,0,1060,1058,1,0,0,0,1061,1062,
        5,1134,0,0,1062,1063,5,594,0,0,1063,1067,3,604,302,0,1064,1066,3,
        82,41,0,1065,1064,1,0,0,0,1066,1069,1,0,0,0,1067,1065,1,0,0,0,1067,
        1068,1,0,0,0,1068,1072,1,0,0,0,1069,1067,1,0,0,0,1070,1073,3,386,
        193,0,1071,1073,3,402,201,0,1072,1070,1,0,0,0,1072,1071,1,0,0,0,
        1073,33,1,0,0,0,1074,1075,5,33,0,0,1075,1077,5,596,0,0,1076,1078,
        3,642,321,0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,1079,1,0,0,
        0,1079,1084,3,554,277,0,1080,1081,5,1135,0,0,1081,1083,3,554,277,
        0,1082,1080,1,0,0,0,1083,1086,1,0,0,0,1084,1082,1,0,0,0,1084,1085,
        1,0,0,0,1085,35,1,0,0,0,1086,1084,1,0,0,0,1087,1088,5,33,0,0,1088,
        1089,5,608,0,0,1089,1090,3,584,292,0,1090,1091,5,67,0,0,1091,1092,
        5,388,0,0,1092,1093,5,679,0,0,1093,1094,7,5,0,0,1094,1095,5,541,
        0,0,1095,1096,5,1133,0,0,1096,1101,3,84,42,0,1097,1098,5,1135,0,
        0,1098,1100,3,84,42,0,1099,1097,1,0,0,0,1100,1103,1,0,0,0,1101,1099,
        1,0,0,0,1101,1102,1,0,0,0,1102,1104,1,0,0,0,1103,1101,1,0,0,0,1104,
        1105,5,1134,0,0,1105,37,1,0,0,0,1106,1108,5,33,0,0,1107,1109,5,649,
        0,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,1110,1,0,0,0,1110,1112,
        5,172,0,0,1111,1113,3,642,321,0,1112,1111,1,0,0,0,1112,1113,1,0,
        0,0,1113,1114,1,0,0,0,1114,1122,3,550,275,0,1115,1116,5,98,0,0,1116,
        1123,3,550,275,0,1117,1118,5,1133,0,0,1118,1119,5,98,0,0,1119,1120,
        3,550,275,0,1120,1121,5,1134,0,0,1121,1123,1,0,0,0,1122,1115,1,0,
        0,0,1122,1117,1,0,0,0,1123,1185,1,0,0,0,1124,1126,5,33,0,0,1125,
        1127,5,649,0,0,1126,1125,1,0,0,0,1126,1127,1,0,0,0,1127,1128,1,0,
        0,0,1128,1130,5,172,0,0,1129,1131,3,642,321,0,1130,1129,1,0,0,0,
        1130,1131,1,0,0,0,1131,1132,1,0,0,0,1132,1134,3,550,275,0,1133,1135,
        3,86,43,0,1134,1133,1,0,0,0,1134,1135,1,0,0,0,1135,1146,1,0,0,0,
        1136,1143,3,104,52,0,1137,1139,5,1135,0,0,1138,1137,1,0,0,0,1138,
        1139,1,0,0,0,1139,1140,1,0,0,0,1140,1142,3,104,52,0,1141,1138,1,
        0,0,0,1142,1145,1,0,0,0,1143,1141,1,0,0,0,1143,1144,1,0,0,0,1144,
        1147,1,0,0,0,1145,1143,1,0,0,0,1146,1136,1,0,0,0,1146,1147,1,0,0,
        0,1147,1149,1,0,0,0,1148,1150,3,110,55,0,1149,1148,1,0,0,0,1149,
        1150,1,0,0,0,1150,1152,1,0,0,0,1151,1153,7,6,0,0,1152,1151,1,0,0,
        0,1152,1153,1,0,0,0,1153,1155,1,0,0,0,1154,1156,5,12,0,0,1155,1154,
        1,0,0,0,1155,1156,1,0,0,0,1156,1157,1,0,0,0,1157,1158,3,198,99,0,
        1158,1185,1,0,0,0,1159,1161,5,33,0,0,1160,1162,5,649,0,0,1161,1160,
        1,0,0,0,1161,1162,1,0,0,0,1162,1163,1,0,0,0,1163,1165,5,172,0,0,
        1164,1166,3,642,321,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,1167,
        1,0,0,0,1167,1168,3,550,275,0,1168,1179,3,86,43,0,1169,1176,3,104,
        52,0,1170,1172,5,1135,0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,
        1173,1,0,0,0,1173,1175,3,104,52,0,1174,1171,1,0,0,0,1175,1178,1,
        0,0,0,1176,1174,1,0,0,0,1176,1177,1,0,0,0,1177,1180,1,0,0,0,1178,
        1176,1,0,0,0,1179,1169,1,0,0,0,1179,1180,1,0,0,0,1180,1182,1,0,0,
        0,1181,1183,3,110,55,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,
        1185,1,0,0,0,1184,1106,1,0,0,0,1184,1124,1,0,0,0,1184,1159,1,0,0,
        0,1185,39,1,0,0,0,1186,1187,5,33,0,0,1187,1188,5,647,0,0,1188,1189,
        3,584,292,0,1189,1190,5,5,0,0,1190,1191,5,389,0,0,1191,1195,5,1148,
        0,0,1192,1193,5,428,0,0,1193,1194,5,1124,0,0,1194,1196,3,592,296,
        0,1195,1192,1,0,0,0,1195,1196,1,0,0,0,1196,1202,1,0,0,0,1197,1199,
        5,409,0,0,1198,1200,5,1124,0,0,1199,1198,1,0,0,0,1199,1200,1,0,0,
        0,1200,1201,1,0,0,0,1201,1203,3,572,286,0,1202,1197,1,0,0,0,1202,
        1203,1,0,0,0,1203,41,1,0,0,0,1204,1205,5,33,0,0,1205,1206,5,647,
        0,0,1206,1207,3,584,292,0,1207,1208,5,5,0,0,1208,1209,5,389,0,0,
        1209,1210,5,1148,0,0,1210,1211,5,186,0,0,1211,1212,5,475,0,0,1212,
        1213,5,73,0,0,1213,1219,3,584,292,0,1214,1216,5,423,0,0,1215,1217,
        5,1124,0,0,1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,1218,1,0,0,0,
        1218,1220,3,592,296,0,1219,1214,1,0,0,0,1219,1220,1,0,0,0,1220,1226,
        1,0,0,0,1221,1223,5,453,0,0,1222,1224,5,1124,0,0,1223,1222,1,0,0,
        0,1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1227,3,592,296,0,1226,
        1221,1,0,0,0,1226,1227,1,0,0,0,1227,1233,1,0,0,0,1228,1230,5,341,
        0,0,1229,1231,5,1124,0,0,1230,1229,1,0,0,0,1230,1231,1,0,0,0,1231,
        1232,1,0,0,0,1232,1234,3,592,296,0,1233,1228,1,0,0,0,1233,1234,1,
        0,0,0,1234,1240,1,0,0,0,1235,1237,5,501,0,0,1236,1238,5,1124,0,0,
        1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,1239,1,0,0,0,1239,1241,
        3,592,296,0,1240,1235,1,0,0,0,1240,1241,1,0,0,0,1241,1247,1,0,0,
        0,1242,1244,5,528,0,0,1243,1245,5,1124,0,0,1244,1243,1,0,0,0,1244,
        1245,1,0,0,0,1245,1246,1,0,0,0,1246,1248,3,584,292,0,1247,1242,1,
        0,0,0,1247,1248,1,0,0,0,1248,1250,1,0,0,0,1249,1251,5,674,0,0,1250,
        1249,1,0,0,0,1250,1251,1,0,0,0,1251,1257,1,0,0,0,1252,1254,5,368,
        0,0,1253,1255,5,1124,0,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,
        1256,1,0,0,0,1256,1258,5,1148,0,0,1257,1252,1,0,0,0,1257,1258,1,
        0,0,0,1258,1259,1,0,0,0,1259,1261,5,409,0,0,1260,1262,5,1124,0,0,
        1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1264,
        3,572,286,0,1264,43,1,0,0,0,1265,1267,5,33,0,0,1266,1268,3,62,31,
        0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,1271,
        5,177,0,0,1270,1272,3,642,321,0,1271,1270,1,0,0,0,1271,1272,1,0,
        0,0,1272,1273,1,0,0,0,1273,1274,3,548,274,0,1274,1275,7,7,0,0,1275,
        1276,7,8,0,0,1276,1277,5,118,0,0,1277,1278,3,550,275,0,1278,1279,
        5,65,0,0,1279,1280,5,52,0,0,1280,1283,5,600,0,0,1281,1282,7,9,0,
        0,1282,1284,3,548,274,0,1283,1281,1,0,0,0,1283,1284,1,0,0,0,1284,
        1285,1,0,0,0,1285,1286,3,386,193,0,1286,45,1,0,0,0,1287,1289,5,192,
        0,0,1288,1290,5,571,0,0,1289,1288,1,0,0,0,1289,1290,1,0,0,0,1290,
        1291,1,0,0,0,1291,1292,3,48,24,0,1292,47,1,0,0,0,1293,1305,3,50,
        25,0,1294,1295,5,1133,0,0,1295,1300,3,52,26,0,1296,1297,5,1135,0,
        0,1297,1299,3,52,26,0,1298,1296,1,0,0,0,1299,1302,1,0,0,0,1300,1298,
        1,0,0,0,1300,1301,1,0,0,0,1301,1303,1,0,0,0,1302,1300,1,0,0,0,1303,
        1304,5,1134,0,0,1304,1306,1,0,0,0,1305,1294,1,0,0,0,1305,1306,1,
        0,0,0,1306,1307,1,0,0,0,1307,1308,5,12,0,0,1308,1309,5,1133,0,0,
        1309,1310,3,8,4,0,1310,1313,5,1134,0,0,1311,1312,5,1135,0,0,1312,
        1314,3,48,24,0,1313,1311,1,0,0,0,1313,1314,1,0,0,0,1314,49,1,0,0,
        0,1315,1316,3,584,292,0,1316,51,1,0,0,0,1317,1318,3,584,292,0,1318,
        53,1,0,0,0,1319,1321,5,33,0,0,1320,1322,3,644,322,0,1321,1320,1,
        0,0,0,1321,1322,1,0,0,0,1322,1326,1,0,0,0,1323,1324,5,336,0,0,1324,
        1325,5,1124,0,0,1325,1327,7,10,0,0,1326,1323,1,0,0,0,1326,1327,1,
        0,0,0,1327,1329,1,0,0,0,1328,1330,3,62,31,0,1329,1328,1,0,0,0,1329,
        1330,1,0,0,0,1330,1334,1,0,0,0,1331,1332,5,160,0,0,1332,1333,5,606,
        0,0,1333,1335,7,11,0,0,1334,1331,1,0,0,0,1334,1335,1,0,0,0,1335,
        1336,1,0,0,0,1336,1337,5,671,0,0,1337,1342,3,548,274,0,1338,1339,
        5,1133,0,0,1339,1340,3,616,308,0,1340,1341,5,1134,0,0,1341,1343,
        1,0,0,0,1342,1338,1,0,0,0,1342,1343,1,0,0,0,1343,1344,1,0,0,0,1344,
        1364,5,12,0,0,1345,1347,5,1133,0,0,1346,1348,3,46,23,0,1347,1346,
        1,0,0,0,1347,1348,1,0,0,0,1348,1349,1,0,0,0,1349,1350,3,198,99,0,
        1350,1351,5,1134,0,0,1351,1365,1,0,0,0,1352,1354,3,46,23,0,1353,
        1352,1,0,0,0,1353,1354,1,0,0,0,1354,1355,1,0,0,0,1355,1362,3,198,
        99,0,1356,1358,5,192,0,0,1357,1359,7,12,0,0,1358,1357,1,0,0,0,1358,
        1359,1,0,0,0,1359,1360,1,0,0,0,1360,1361,5,26,0,0,1361,1363,5,120,
        0,0,1362,1356,1,0,0,0,1362,1363,1,0,0,0,1363,1365,1,0,0,0,1364,1345,
        1,0,0,0,1364,1353,1,0,0,0,1365,55,1,0,0,0,1366,1368,5,42,0,0,1367,
        1366,1,0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,0,0,1369,1371,3,58,
        29,0,1370,1372,5,1124,0,0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,1372,
        1375,1,0,0,0,1373,1376,3,568,284,0,1374,1376,5,42,0,0,1375,1373,
        1,0,0,0,1375,1374,1,0,0,0,1376,1400,1,0,0,0,1377,1379,5,42,0,0,1378,
        1377,1,0,0,0,1378,1379,1,0,0,0,1379,1380,1,0,0,0,1380,1382,5,27,
        0,0,1381,1383,5,1124,0,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,1383,
        1384,1,0,0,0,1384,1400,3,570,285,0,1385,1387,5,42,0,0,1386,1385,
        1,0,0,0,1386,1387,1,0,0,0,1387,1388,1,0,0,0,1388,1390,5,405,0,0,
        1389,1391,5,1124,0,0,1390,1389,1,0,0,0,1390,1391,1,0,0,0,1391,1392,
        1,0,0,0,1392,1400,5,1148,0,0,1393,1394,5,134,0,0,1394,1396,5,538,
        0,0,1395,1397,5,1124,0,0,1396,1395,1,0,0,0,1396,1397,1,0,0,0,1397,
        1398,1,0,0,0,1398,1400,7,13,0,0,1399,1367,1,0,0,0,1399,1378,1,0,
        0,0,1399,1386,1,0,0,0,1399,1393,1,0,0,0,1400,57,1,0,0,0,1401,1402,
        5,25,0,0,1402,1407,5,153,0,0,1403,1407,5,841,0,0,1404,1405,5,222,
        0,0,1405,1407,5,153,0,0,1406,1401,1,0,0,0,1406,1403,1,0,0,0,1406,
        1404,1,0,0,0,1407,59,1,0,0,0,1408,1411,5,37,0,0,1409,1410,5,1133,
        0,0,1410,1412,5,1134,0,0,1411,1409,1,0,0,0,1411,1412,1,0,0,0,1412,
        61,1,0,0,0,1413,1414,5,392,0,0,1414,1417,5,1124,0,0,1415,1418,3,
        564,282,0,1416,1418,3,60,30,0,1417,1415,1,0,0,0,1417,1416,1,0,0,
        0,1418,63,1,0,0,0,1419,1420,5,338,0,0,1420,1424,3,66,33,0,1421,1423,
        3,68,34,0,1422,1421,1,0,0,0,1423,1426,1,0,0,0,1424,1422,1,0,0,0,
        1424,1425,1,0,0,0,1425,1454,1,0,0,0,1426,1424,1,0,0,0,1427,1430,
        5,417,0,0,1428,1431,3,590,295,0,1429,1431,3,688,344,0,1430,1428,
        1,0,0,0,1430,1429,1,0,0,0,1431,1432,1,0,0,0,1432,1441,3,70,35,0,
        1433,1434,5,630,0,0,1434,1438,3,66,33,0,1435,1437,3,68,34,0,1436,
        1435,1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1438,1439,1,0,0,
        0,1439,1442,1,0,0,0,1440,1438,1,0,0,0,1441,1433,1,0,0,0,1441,1442,
        1,0,0,0,1442,1451,1,0,0,0,1443,1444,5,408,0,0,1444,1448,3,66,33,
        0,1445,1447,3,68,34,0,1446,1445,1,0,0,0,1447,1450,1,0,0,0,1448,1446,
        1,0,0,0,1448,1449,1,0,0,0,1449,1452,1,0,0,0,1450,1448,1,0,0,0,1451,
        1443,1,0,0,0,1451,1452,1,0,0,0,1452,1454,1,0,0,0,1453,1419,1,0,0,
        0,1453,1427,1,0,0,0,1454,65,1,0,0,0,1455,1460,5,315,0,0,1456,1460,
        3,594,297,0,1457,1460,3,590,295,0,1458,1460,3,688,344,0,1459,1455,
        1,0,0,0,1459,1456,1,0,0,0,1459,1457,1,0,0,0,1459,1458,1,0,0,0,1460,
        67,1,0,0,0,1461,1462,5,1120,0,0,1462,1465,5,86,0,0,1463,1466,3,590,
        295,0,1464,1466,3,688,344,0,1465,1463,1,0,0,0,1465,1464,1,0,0,0,
        1466,1467,1,0,0,0,1467,1468,3,70,35,0,1468,69,1,0,0,0,1469,1483,
        3,714,357,0,1470,1483,5,221,0,0,1471,1483,5,240,0,0,1472,1483,5,
        241,0,0,1473,1483,5,242,0,0,1474,1483,5,243,0,0,1475,1483,5,244,
        0,0,1476,1483,5,245,0,0,1477,1483,5,246,0,0,1478,1483,5,247,0,0,
        1479,1483,5,248,0,0,1480,1483,5,249,0,0,1481,1483,5,250,0,0,1482,
        1469,1,0,0,0,1482,1470,1,0,0,0,1482,1471,1,0,0,0,1482,1472,1,0,0,
        0,1482,1473,1,0,0,0,1482,1474,1,0,0,0,1482,1475,1,0,0,0,1482,1476,
        1,0,0,0,1482,1477,1,0,0,0,1482,1478,1,0,0,0,1482,1479,1,0,0,0,1482,
        1480,1,0,0,0,1482,1481,1,0,0,0,1483,71,1,0,0,0,1484,1490,5,403,0,
        0,1485,1490,5,396,0,0,1486,1487,5,396,0,0,1487,1488,5,118,0,0,1488,
        1490,5,614,0,0,1489,1484,1,0,0,0,1489,1485,1,0,0,0,1489,1486,1,0,
        0,0,1490,73,1,0,0,0,1491,1492,5,187,0,0,1492,1493,7,14,0,0,1493,
        75,1,0,0,0,1494,1496,5,467,0,0,1495,1497,5,1124,0,0,1496,1495,1,
        0,0,0,1496,1497,1,0,0,0,1497,1498,1,0,0,0,1498,1517,3,592,296,0,
        1499,1517,3,74,37,0,1500,1501,5,192,0,0,1501,1502,5,547,0,0,1502,
        1517,3,584,292,0,1503,1504,5,368,0,0,1504,1517,5,1148,0,0,1505,1517,
        7,15,0,0,1506,1508,5,875,0,0,1507,1509,5,1124,0,0,1508,1507,1,0,
        0,0,1508,1509,1,0,0,0,1509,1510,1,0,0,0,1510,1517,5,1148,0,0,1511,
        1513,5,1000,0,0,1512,1514,5,1124,0,0,1513,1512,1,0,0,0,1513,1514,
        1,0,0,0,1514,1515,1,0,0,0,1515,1517,5,1148,0,0,1516,1494,1,0,0,0,
        1516,1499,1,0,0,0,1516,1500,1,0,0,0,1516,1503,1,0,0,0,1516,1505,
        1,0,0,0,1516,1506,1,0,0,0,1516,1511,1,0,0,0,1517,77,1,0,0,0,1518,
        1520,7,16,0,0,1519,1518,1,0,0,0,1519,1520,1,0,0,0,1520,1521,1,0,
        0,0,1521,1522,3,584,292,0,1522,1523,3,604,302,0,1523,79,1,0,0,0,
        1524,1525,3,584,292,0,1525,1526,3,604,302,0,1526,81,1,0,0,0,1527,
        1528,5,368,0,0,1528,1551,5,1148,0,0,1529,1530,5,468,0,0,1530,1551,
        5,160,0,0,1531,1533,5,114,0,0,1532,1531,1,0,0,0,1532,1533,1,0,0,
        0,1533,1534,1,0,0,0,1534,1551,5,47,0,0,1535,1536,5,381,0,0,1536,
        1546,5,160,0,0,1537,1538,5,521,0,0,1538,1546,5,160,0,0,1539,1540,
        5,135,0,0,1540,1541,5,160,0,0,1541,1546,5,388,0,0,1542,1543,5,112,
        0,0,1543,1544,5,160,0,0,1544,1546,5,388,0,0,1545,1535,1,0,0,0,1545,
        1537,1,0,0,0,1545,1539,1,0,0,0,1545,1542,1,0,0,0,1546,1551,1,0,0,
        0,1547,1548,5,160,0,0,1548,1549,5,606,0,0,1549,1551,7,11,0,0,1550,
        1527,1,0,0,0,1550,1529,1,0,0,0,1550,1532,1,0,0,0,1550,1545,1,0,0,
        0,1550,1547,1,0,0,0,1551,83,1,0,0,0,1552,1553,5,446,0,0,1553,1567,
        5,1148,0,0,1554,1555,5,39,0,0,1555,1567,5,1148,0,0,1556,1557,5,665,
        0,0,1557,1567,5,1148,0,0,1558,1559,5,551,0,0,1559,1567,5,1148,0,
        0,1560,1561,5,617,0,0,1561,1567,5,1148,0,0,1562,1563,5,542,0,0,1563,
        1567,5,1148,0,0,1564,1565,5,557,0,0,1565,1567,3,590,295,0,1566,1552,
        1,0,0,0,1566,1554,1,0,0,0,1566,1556,1,0,0,0,1566,1558,1,0,0,0,1566,
        1560,1,0,0,0,1566,1562,1,0,0,0,1566,1564,1,0,0,0,1567,85,1,0,0,0,
        1568,1569,5,1133,0,0,1569,1574,3,88,44,0,1570,1571,5,1135,0,0,1571,
        1573,3,88,44,0,1572,1570,1,0,0,0,1573,1576,1,0,0,0,1574,1572,1,0,
        0,0,1574,1575,1,0,0,0,1575,1577,1,0,0,0,1576,1574,1,0,0,0,1577,1578,
        5,1134,0,0,1578,87,1,0,0,0,1579,1580,3,556,278,0,1580,1581,3,90,
        45,0,1581,1591,1,0,0,0,1582,1584,3,94,47,0,1583,1585,5,114,0,0,1584,
        1583,1,0,0,0,1584,1585,1,0,0,0,1585,1587,1,0,0,0,1586,1588,5,57,
        0,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1591,1,0,0,0,1589,1591,
        3,102,51,0,1590,1579,1,0,0,0,1590,1582,1,0,0,0,1590,1589,1,0,0,0,
        1591,89,1,0,0,0,1592,1596,3,604,302,0,1593,1595,3,92,46,0,1594,1593,
        1,0,0,0,1595,1598,1,0,0,0,1596,1594,1,0,0,0,1596,1597,1,0,0,0,1597,
        1600,1,0,0,0,1598,1596,1,0,0,0,1599,1601,5,114,0,0,1600,1599,1,0,
        0,0,1600,1601,1,0,0,0,1601,1603,1,0,0,0,1602,1604,5,57,0,0,1603,
        1602,1,0,0,0,1603,1604,1,0,0,0,1604,91,1,0,0,0,1605,1659,3,600,300,
        0,1606,1607,5,42,0,0,1607,1659,3,634,317,0,1608,1659,5,673,0,0,1609,
        1659,5,459,0,0,1610,1615,5,342,0,0,1611,1612,5,118,0,0,1612,1613,
        5,184,0,0,1613,1615,3,636,318,0,1614,1610,1,0,0,0,1614,1611,1,0,
        0,0,1615,1659,1,0,0,0,1616,1618,5,130,0,0,1617,1616,1,0,0,0,1617,
        1618,1,0,0,0,1618,1619,1,0,0,0,1619,1659,5,91,0,0,1620,1622,5,181,
        0,0,1621,1623,5,91,0,0,1622,1621,1,0,0,0,1622,1623,1,0,0,0,1623,
        1659,1,0,0,0,1624,1625,5,368,0,0,1625,1659,5,1148,0,0,1626,1627,
        5,366,0,0,1627,1659,7,17,0,0,1628,1629,5,636,0,0,1629,1659,7,18,
        0,0,1630,1659,3,96,48,0,1631,1632,5,27,0,0,1632,1659,3,570,285,0,
        1633,1634,5,70,0,0,1634,1636,5,8,0,0,1635,1633,1,0,0,0,1635,1636,
        1,0,0,0,1636,1637,1,0,0,0,1637,1638,5,12,0,0,1638,1639,5,1133,0,
        0,1639,1640,3,688,344,0,1640,1642,5,1134,0,0,1641,1643,7,19,0,0,
        1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1659,1,0,0,0,1644,1645,
        5,239,0,0,1645,1646,5,42,0,0,1646,1659,5,669,0,0,1647,1649,5,30,
        0,0,1648,1650,3,584,292,0,1649,1648,1,0,0,0,1649,1650,1,0,0,0,1650,
        1652,1,0,0,0,1651,1647,1,0,0,0,1651,1652,1,0,0,0,1652,1653,1,0,0,
        0,1653,1654,5,26,0,0,1654,1655,5,1133,0,0,1655,1656,3,688,344,0,
        1656,1657,5,1134,0,0,1657,1659,1,0,0,0,1658,1605,1,0,0,0,1658,1606,
        1,0,0,0,1658,1608,1,0,0,0,1658,1609,1,0,0,0,1658,1614,1,0,0,0,1658,
        1617,1,0,0,0,1658,1620,1,0,0,0,1658,1624,1,0,0,0,1658,1626,1,0,0,
        0,1658,1628,1,0,0,0,1658,1630,1,0,0,0,1658,1631,1,0,0,0,1658,1635,
        1,0,0,0,1658,1644,1,0,0,0,1658,1651,1,0,0,0,1659,93,1,0,0,0,1660,
        1662,5,30,0,0,1661,1663,3,584,292,0,1662,1661,1,0,0,0,1662,1663,
        1,0,0,0,1663,1665,1,0,0,0,1664,1660,1,0,0,0,1664,1665,1,0,0,0,1665,
        1666,1,0,0,0,1666,1667,5,130,0,0,1667,1669,5,91,0,0,1668,1670,3,
        584,292,0,1669,1668,1,0,0,0,1669,1670,1,0,0,0,1670,1672,1,0,0,0,
        1671,1673,3,74,37,0,1672,1671,1,0,0,0,1672,1673,1,0,0,0,1673,1674,
        1,0,0,0,1674,1678,3,622,311,0,1675,1677,3,76,38,0,1676,1675,1,0,
        0,0,1677,1680,1,0,0,0,1678,1676,1,0,0,0,1678,1679,1,0,0,0,1679,1730,
        1,0,0,0,1680,1678,1,0,0,0,1681,1683,5,30,0,0,1682,1684,3,584,292,
        0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,1686,1,0,0,0,1685,1681,
        1,0,0,0,1685,1686,1,0,0,0,1686,1687,1,0,0,0,1687,1689,5,181,0,0,
        1688,1690,7,20,0,0,1689,1688,1,0,0,0,1689,1690,1,0,0,0,1690,1692,
        1,0,0,0,1691,1693,3,584,292,0,1692,1691,1,0,0,0,1692,1693,1,0,0,
        0,1693,1695,1,0,0,0,1694,1696,3,74,37,0,1695,1694,1,0,0,0,1695,1696,
        1,0,0,0,1696,1697,1,0,0,0,1697,1701,3,622,311,0,1698,1700,3,76,38,
        0,1699,1698,1,0,0,0,1700,1703,1,0,0,0,1701,1699,1,0,0,0,1701,1702,
        1,0,0,0,1702,1730,1,0,0,0,1703,1701,1,0,0,0,1704,1706,5,30,0,0,1705,
        1707,3,584,292,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,1709,1,
        0,0,0,1708,1704,1,0,0,0,1708,1709,1,0,0,0,1709,1710,1,0,0,0,1710,
        1711,5,67,0,0,1711,1713,5,91,0,0,1712,1714,3,584,292,0,1713,1712,
        1,0,0,0,1713,1714,1,0,0,0,1714,1715,1,0,0,0,1715,1716,3,622,311,
        0,1716,1717,3,96,48,0,1717,1730,1,0,0,0,1718,1720,5,30,0,0,1719,
        1721,3,584,292,0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,1723,1,
        0,0,0,1722,1718,1,0,0,0,1722,1723,1,0,0,0,1723,1724,1,0,0,0,1724,
        1725,5,26,0,0,1725,1726,5,1133,0,0,1726,1727,3,688,344,0,1727,1728,
        5,1134,0,0,1728,1730,1,0,0,0,1729,1664,1,0,0,0,1729,1685,1,0,0,0,
        1729,1708,1,0,0,0,1729,1722,1,0,0,0,1730,95,1,0,0,0,1731,1732,5,
        136,0,0,1732,1734,3,550,275,0,1733,1735,3,622,311,0,1734,1733,1,
        0,0,0,1734,1735,1,0,0,0,1735,1738,1,0,0,0,1736,1737,5,109,0,0,1737,
        1739,7,21,0,0,1738,1736,1,0,0,0,1738,1739,1,0,0,0,1739,1741,1,0,
        0,0,1740,1742,3,98,49,0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,
        97,1,0,0,0,1743,1744,5,118,0,0,1744,1745,5,44,0,0,1745,1749,3,100,
        50,0,1746,1747,5,118,0,0,1747,1748,5,184,0,0,1748,1750,3,100,50,
        0,1749,1746,1,0,0,0,1749,1750,1,0,0,0,1750,1760,1,0,0,0,1751,1752,
        5,118,0,0,1752,1753,5,184,0,0,1753,1757,3,100,50,0,1754,1755,5,118,
        0,0,1755,1756,5,44,0,0,1756,1758,3,100,50,0,1757,1754,1,0,0,0,1757,
        1758,1,0,0,0,1758,1760,1,0,0,0,1759,1743,1,0,0,0,1759,1751,1,0,0,
        0,1760,99,1,0,0,0,1761,1770,5,144,0,0,1762,1770,5,21,0,0,1763,1764,
        5,153,0,0,1764,1770,5,116,0,0,1765,1766,5,521,0,0,1766,1770,5,333,
        0,0,1767,1768,5,153,0,0,1768,1770,5,42,0,0,1769,1761,1,0,0,0,1769,
        1762,1,0,0,0,1769,1763,1,0,0,0,1769,1765,1,0,0,0,1769,1767,1,0,0,
        0,1770,101,1,0,0,0,1771,1773,7,20,0,0,1772,1774,3,584,292,0,1773,
        1772,1,0,0,0,1773,1774,1,0,0,0,1774,1776,1,0,0,0,1775,1777,3,74,
        37,0,1776,1775,1,0,0,0,1776,1777,1,0,0,0,1777,1778,1,0,0,0,1778,
        1782,3,622,311,0,1779,1781,3,76,38,0,1780,1779,1,0,0,0,1781,1784,
        1,0,0,0,1782,1780,1,0,0,0,1782,1783,1,0,0,0,1783,1800,1,0,0,0,1784,
        1782,1,0,0,0,1785,1787,7,22,0,0,1786,1788,7,20,0,0,1787,1786,1,0,
        0,0,1787,1788,1,0,0,0,1788,1790,1,0,0,0,1789,1791,3,584,292,0,1790,
        1789,1,0,0,0,1790,1791,1,0,0,0,1791,1792,1,0,0,0,1792,1796,3,622,
        311,0,1793,1795,3,76,38,0,1794,1793,1,0,0,0,1795,1798,1,0,0,0,1796,
        1794,1,0,0,0,1796,1797,1,0,0,0,1797,1800,1,0,0,0,1798,1796,1,0,0,
        0,1799,1771,1,0,0,0,1799,1785,1,0,0,0,1800,103,1,0,0,0,1801,1803,
        5,409,0,0,1802,1804,5,1124,0,0,1803,1802,1,0,0,0,1803,1804,1,0,0,
        0,1804,1806,1,0,0,0,1805,1807,3,572,286,0,1806,1805,1,0,0,0,1806,
        1807,1,0,0,0,1807,1987,1,0,0,0,1808,1810,5,875,0,0,1809,1811,5,1124,
        0,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1812,1,0,0,0,1812,1987,
        5,1148,0,0,1813,1815,5,341,0,0,1814,1816,5,1124,0,0,1815,1814,1,
        0,0,0,1815,1816,1,0,0,0,1816,1817,1,0,0,0,1817,1987,3,590,295,0,
        1818,1820,5,342,0,0,1819,1821,5,1124,0,0,1820,1819,1,0,0,0,1820,
        1821,1,0,0,0,1821,1822,1,0,0,0,1822,1987,3,590,295,0,1823,1825,5,
        343,0,0,1824,1826,5,1124,0,0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,
        1826,1827,1,0,0,0,1827,1987,3,590,295,0,1828,1830,5,42,0,0,1829,
        1828,1,0,0,0,1829,1830,1,0,0,0,1830,1831,1,0,0,0,1831,1833,3,58,
        29,0,1832,1834,5,1124,0,0,1833,1832,1,0,0,0,1833,1834,1,0,0,0,1834,
        1837,1,0,0,0,1835,1838,3,568,284,0,1836,1838,5,42,0,0,1837,1835,
        1,0,0,0,1837,1836,1,0,0,0,1838,1987,1,0,0,0,1839,1841,7,23,0,0,1840,
        1842,5,1124,0,0,1841,1840,1,0,0,0,1841,1842,1,0,0,0,1842,1843,1,
        0,0,0,1843,1987,7,24,0,0,1844,1846,5,42,0,0,1845,1844,1,0,0,0,1845,
        1846,1,0,0,0,1846,1847,1,0,0,0,1847,1849,5,27,0,0,1848,1850,5,1124,
        0,0,1849,1848,1,0,0,0,1849,1850,1,0,0,0,1850,1851,1,0,0,0,1851,1987,
        3,570,285,0,1852,1854,5,368,0,0,1853,1855,5,1124,0,0,1854,1853,1,
        0,0,0,1854,1855,1,0,0,0,1855,1856,1,0,0,0,1856,1987,5,1148,0,0,1857,
        1859,5,373,0,0,1858,1860,5,1124,0,0,1859,1858,1,0,0,0,1859,1860,
        1,0,0,0,1860,1861,1,0,0,0,1861,1987,7,25,0,0,1862,1864,5,376,0,0,
        1863,1865,5,1124,0,0,1864,1863,1,0,0,0,1864,1865,1,0,0,0,1865,1866,
        1,0,0,0,1866,1987,5,1148,0,0,1867,1868,7,26,0,0,1868,1870,5,395,
        0,0,1869,1871,5,1124,0,0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,
        1872,1,0,0,0,1872,1987,5,1148,0,0,1873,1875,5,393,0,0,1874,1876,
        5,1124,0,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1877,1,0,0,0,
        1877,1987,7,24,0,0,1878,1880,5,405,0,0,1879,1881,5,1124,0,0,1880,
        1879,1,0,0,0,1880,1881,1,0,0,0,1881,1882,1,0,0,0,1882,1987,5,1148,
        0,0,1883,1885,7,27,0,0,1884,1886,5,1124,0,0,1885,1884,1,0,0,0,1885,
        1886,1,0,0,0,1886,1887,1,0,0,0,1887,1987,7,24,0,0,1888,1890,7,28,
        0,0,1889,1891,5,1124,0,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,
        1892,1,0,0,0,1892,1987,3,590,295,0,1893,1895,5,406,0,0,1894,1896,
        5,1124,0,0,1895,1894,1,0,0,0,1895,1896,1,0,0,0,1896,1897,1,0,0,0,
        1897,1987,3,590,295,0,1898,1899,5,81,0,0,1899,1901,5,395,0,0,1900,
        1902,5,1124,0,0,1901,1900,1,0,0,0,1901,1902,1,0,0,0,1902,1903,1,
        0,0,0,1903,1987,5,1148,0,0,1904,1906,5,455,0,0,1905,1907,5,1124,
        0,0,1906,1905,1,0,0,0,1906,1907,1,0,0,0,1907,1908,1,0,0,0,1908,1987,
        7,29,0,0,1909,1911,5,467,0,0,1910,1912,5,1124,0,0,1911,1910,1,0,
        0,0,1911,1912,1,0,0,0,1912,1913,1,0,0,0,1913,1987,3,592,296,0,1914,
        1916,5,500,0,0,1915,1917,5,1124,0,0,1916,1915,1,0,0,0,1916,1917,
        1,0,0,0,1917,1918,1,0,0,0,1918,1987,3,590,295,0,1919,1921,5,510,
        0,0,1920,1922,5,1124,0,0,1921,1920,1,0,0,0,1921,1922,1,0,0,0,1922,
        1923,1,0,0,0,1923,1987,3,590,295,0,1924,1926,5,543,0,0,1925,1927,
        5,1124,0,0,1926,1925,1,0,0,0,1926,1927,1,0,0,0,1927,1928,1,0,0,0,
        1928,1987,7,13,0,0,1929,1931,5,551,0,0,1930,1932,5,1124,0,0,1931,
        1930,1,0,0,0,1931,1932,1,0,0,0,1932,1933,1,0,0,0,1933,1987,5,1148,
        0,0,1934,1936,5,602,0,0,1935,1937,5,1124,0,0,1936,1935,1,0,0,0,1936,
        1937,1,0,0,0,1937,1938,1,0,0,0,1938,1987,7,30,0,0,1939,1940,5,629,
        0,0,1940,1987,5,653,0,0,1941,1943,5,1000,0,0,1942,1944,5,1124,0,
        0,1943,1942,1,0,0,0,1943,1944,1,0,0,0,1944,1945,1,0,0,0,1945,1987,
        5,1148,0,0,1946,1948,5,631,0,0,1947,1949,5,1124,0,0,1948,1947,1,
        0,0,0,1948,1949,1,0,0,0,1949,1950,1,0,0,0,1950,1987,7,13,0,0,1951,
        1953,5,632,0,0,1952,1954,5,1124,0,0,1953,1952,1,0,0,0,1953,1954,
        1,0,0,0,1954,1955,1,0,0,0,1955,1987,7,13,0,0,1956,1958,5,633,0,0,
        1957,1959,5,1124,0,0,1958,1957,1,0,0,0,1958,1959,1,0,0,0,1959,1962,
        1,0,0,0,1960,1963,5,42,0,0,1961,1963,3,590,295,0,1962,1960,1,0,0,
        0,1962,1961,1,0,0,0,1963,1987,1,0,0,0,1964,1965,5,647,0,0,1965,1967,
        3,584,292,0,1966,1968,3,108,54,0,1967,1966,1,0,0,0,1967,1968,1,0,
        0,0,1968,1987,1,0,0,0,1969,1970,5,648,0,0,1970,1971,5,1124,0,0,1971,
        1987,3,106,53,0,1972,1987,3,108,54,0,1973,1975,5,654,0,0,1974,1976,
        5,1124,0,0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,
        1977,1987,7,24,0,0,1978,1980,5,180,0,0,1979,1981,5,1124,0,0,1980,
        1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,1982,1983,5,1133,
        0,0,1983,1984,3,620,310,0,1984,1985,5,1134,0,0,1985,1987,1,0,0,0,
        1986,1801,1,0,0,0,1986,1808,1,0,0,0,1986,1813,1,0,0,0,1986,1818,
        1,0,0,0,1986,1823,1,0,0,0,1986,1829,1,0,0,0,1986,1839,1,0,0,0,1986,
        1845,1,0,0,0,1986,1852,1,0,0,0,1986,1857,1,0,0,0,1986,1862,1,0,0,
        0,1986,1867,1,0,0,0,1986,1873,1,0,0,0,1986,1878,1,0,0,0,1986,1883,
        1,0,0,0,1986,1888,1,0,0,0,1986,1893,1,0,0,0,1986,1898,1,0,0,0,1986,
        1904,1,0,0,0,1986,1909,1,0,0,0,1986,1914,1,0,0,0,1986,1919,1,0,0,
        0,1986,1924,1,0,0,0,1986,1929,1,0,0,0,1986,1934,1,0,0,0,1986,1939,
        1,0,0,0,1986,1941,1,0,0,0,1986,1946,1,0,0,0,1986,1951,1,0,0,0,1986,
        1956,1,0,0,0,1986,1964,1,0,0,0,1986,1969,1,0,0,0,1986,1972,1,0,0,
        0,1986,1973,1,0,0,0,1986,1978,1,0,0,0,1987,105,1,0,0,0,1988,1989,
        7,31,0,0,1989,107,1,0,0,0,1990,1991,5,636,0,0,1991,1992,7,18,0,0,
        1992,109,1,0,0,0,1993,1994,5,129,0,0,1994,1995,5,19,0,0,1995,1998,
        3,112,56,0,1996,1997,5,550,0,0,1997,1999,3,590,295,0,1998,1996,1,
        0,0,0,1998,1999,1,0,0,0,1999,2007,1,0,0,0,2000,2001,5,641,0,0,2001,
        2002,5,19,0,0,2002,2005,3,114,57,0,2003,2004,5,642,0,0,2004,2006,
        3,590,295,0,2005,2003,1,0,0,0,2005,2006,1,0,0,0,2006,2008,1,0,0,
        0,2007,2000,1,0,0,0,2007,2008,1,0,0,0,2008,2020,1,0,0,0,2009,2010,
        5,1133,0,0,2010,2015,3,116,58,0,2011,2012,5,1135,0,0,2012,2014,3,
        116,58,0,2013,2011,1,0,0,0,2014,2017,1,0,0,0,2015,2013,1,0,0,0,2015,
        2016,1,0,0,0,2016,2018,1,0,0,0,2017,2015,1,0,0,0,2018,2019,5,1134,
        0,0,2019,2021,1,0,0,0,2020,2009,1,0,0,0,2020,2021,1,0,0,0,2021,111,
        1,0,0,0,2022,2024,5,100,0,0,2023,2022,1,0,0,0,2023,2024,1,0,0,0,
        2024,2025,1,0,0,0,2025,2026,5,443,0,0,2026,2027,5,1133,0,0,2027,
        2028,3,688,344,0,2028,2029,5,1134,0,0,2029,2069,1,0,0,0,2030,2032,
        5,100,0,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,0,
        2033,2037,5,91,0,0,2034,2035,5,336,0,0,2035,2036,5,1124,0,0,2036,
        2038,7,32,0,0,2037,2034,1,0,0,0,2037,2038,1,0,0,0,2038,2039,1,0,
        0,0,2039,2041,5,1133,0,0,2040,2042,3,616,308,0,2041,2040,1,0,0,0,
        2041,2042,1,0,0,0,2042,2043,1,0,0,0,2043,2069,5,1134,0,0,2044,2054,
        5,133,0,0,2045,2046,5,1133,0,0,2046,2047,3,688,344,0,2047,2048,5,
        1134,0,0,2048,2055,1,0,0,0,2049,2050,5,365,0,0,2050,2051,5,1133,
        0,0,2051,2052,3,616,308,0,2052,2053,5,1134,0,0,2053,2055,1,0,0,0,
        2054,2045,1,0,0,0,2054,2049,1,0,0,0,2055,2069,1,0,0,0,2056,2066,
        5,473,0,0,2057,2058,5,1133,0,0,2058,2059,3,688,344,0,2059,2060,5,
        1134,0,0,2060,2067,1,0,0,0,2061,2062,5,365,0,0,2062,2063,5,1133,
        0,0,2063,2064,3,616,308,0,2064,2065,5,1134,0,0,2065,2067,1,0,0,0,
        2066,2057,1,0,0,0,2066,2061,1,0,0,0,2067,2069,1,0,0,0,2068,2023,
        1,0,0,0,2068,2031,1,0,0,0,2068,2044,1,0,0,0,2068,2056,1,0,0,0,2069,
        113,1,0,0,0,2070,2072,5,100,0,0,2071,2070,1,0,0,0,2071,2072,1,0,
        0,0,2072,2073,1,0,0,0,2073,2074,5,443,0,0,2074,2075,5,1133,0,0,2075,
        2076,3,688,344,0,2076,2077,5,1134,0,0,2077,2092,1,0,0,0,2078,2080,
        5,100,0,0,2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,2081,1,0,0,0,
        2081,2085,5,91,0,0,2082,2083,5,336,0,0,2083,2084,5,1124,0,0,2084,
        2086,7,32,0,0,2085,2082,1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,
        0,0,2087,2088,5,1133,0,0,2088,2089,3,616,308,0,2089,2090,5,1134,
        0,0,2090,2092,1,0,0,0,2091,2071,1,0,0,0,2091,2079,1,0,0,0,2092,115,
        1,0,0,0,2093,2094,5,129,0,0,2094,2095,3,584,292,0,2095,2096,5,188,
        0,0,2096,2097,5,471,0,0,2097,2098,5,651,0,0,2098,2099,5,1133,0,0,
        2099,2104,3,118,59,0,2100,2101,5,1135,0,0,2101,2103,3,118,59,0,2102,
        2100,1,0,0,0,2103,2106,1,0,0,0,2104,2102,1,0,0,0,2104,2105,1,0,0,
        0,2105,2107,1,0,0,0,2106,2104,1,0,0,0,2107,2111,5,1134,0,0,2108,
        2110,3,124,62,0,2109,2108,1,0,0,0,2110,2113,1,0,0,0,2111,2109,1,
        0,0,0,2111,2112,1,0,0,0,2112,2125,1,0,0,0,2113,2111,1,0,0,0,2114,
        2115,5,1133,0,0,2115,2120,3,122,61,0,2116,2117,5,1135,0,0,2117,2119,
        3,122,61,0,2118,2116,1,0,0,0,2119,2122,1,0,0,0,2120,2118,1,0,0,0,
        2120,2121,1,0,0,0,2121,2123,1,0,0,0,2122,2120,1,0,0,0,2123,2124,
        5,1134,0,0,2124,2126,1,0,0,0,2125,2114,1,0,0,0,2125,2126,1,0,0,0,
        2126,2240,1,0,0,0,2127,2128,5,129,0,0,2128,2129,3,584,292,0,2129,
        2130,5,188,0,0,2130,2131,5,471,0,0,2131,2132,5,651,0,0,2132,2136,
        3,118,59,0,2133,2135,3,124,62,0,2134,2133,1,0,0,0,2135,2138,1,0,
        0,0,2136,2134,1,0,0,0,2136,2137,1,0,0,0,2137,2150,1,0,0,0,2138,2136,
        1,0,0,0,2139,2140,5,1133,0,0,2140,2145,3,122,61,0,2141,2142,5,1135,
        0,0,2142,2144,3,122,61,0,2143,2141,1,0,0,0,2144,2147,1,0,0,0,2145,
        2143,1,0,0,0,2145,2146,1,0,0,0,2146,2148,1,0,0,0,2147,2145,1,0,0,
        0,2148,2149,5,1134,0,0,2149,2151,1,0,0,0,2150,2139,1,0,0,0,2150,
        2151,1,0,0,0,2151,2240,1,0,0,0,2152,2153,5,129,0,0,2153,2154,3,584,
        292,0,2154,2155,5,188,0,0,2155,2156,5,80,0,0,2156,2157,5,1133,0,
        0,2157,2162,3,118,59,0,2158,2159,5,1135,0,0,2159,2161,3,118,59,0,
        2160,2158,1,0,0,0,2161,2164,1,0,0,0,2162,2160,1,0,0,0,2162,2163,
        1,0,0,0,2163,2165,1,0,0,0,2164,2162,1,0,0,0,2165,2169,5,1134,0,0,
        2166,2168,3,124,62,0,2167,2166,1,0,0,0,2168,2171,1,0,0,0,2169,2167,
        1,0,0,0,2169,2170,1,0,0,0,2170,2183,1,0,0,0,2171,2169,1,0,0,0,2172,
        2173,5,1133,0,0,2173,2178,3,122,61,0,2174,2175,5,1135,0,0,2175,2177,
        3,122,61,0,2176,2174,1,0,0,0,2177,2180,1,0,0,0,2178,2176,1,0,0,0,
        2178,2179,1,0,0,0,2179,2181,1,0,0,0,2180,2178,1,0,0,0,2181,2182,
        5,1134,0,0,2182,2184,1,0,0,0,2183,2172,1,0,0,0,2183,2184,1,0,0,0,
        2184,2240,1,0,0,0,2185,2186,5,129,0,0,2186,2187,3,584,292,0,2187,
        2188,5,188,0,0,2188,2189,5,80,0,0,2189,2190,5,1133,0,0,2190,2195,
        3,120,60,0,2191,2192,5,1135,0,0,2192,2194,3,120,60,0,2193,2191,1,
        0,0,0,2194,2197,1,0,0,0,2195,2193,1,0,0,0,2195,2196,1,0,0,0,2196,
        2198,1,0,0,0,2197,2195,1,0,0,0,2198,2202,5,1134,0,0,2199,2201,3,
        124,62,0,2200,2199,1,0,0,0,2201,2204,1,0,0,0,2202,2200,1,0,0,0,2202,
        2203,1,0,0,0,2203,2216,1,0,0,0,2204,2202,1,0,0,0,2205,2206,5,1133,
        0,0,2206,2211,3,122,61,0,2207,2208,5,1135,0,0,2208,2210,3,122,61,
        0,2209,2207,1,0,0,0,2210,2213,1,0,0,0,2211,2209,1,0,0,0,2211,2212,
        1,0,0,0,2212,2214,1,0,0,0,2213,2211,1,0,0,0,2214,2215,5,1134,0,0,
        2215,2217,1,0,0,0,2216,2205,1,0,0,0,2216,2217,1,0,0,0,2217,2240,
        1,0,0,0,2218,2219,5,129,0,0,2219,2223,3,584,292,0,2220,2222,3,124,
        62,0,2221,2220,1,0,0,0,2222,2225,1,0,0,0,2223,2221,1,0,0,0,2223,
        2224,1,0,0,0,2224,2237,1,0,0,0,2225,2223,1,0,0,0,2226,2227,5,1133,
        0,0,2227,2232,3,122,61,0,2228,2229,5,1135,0,0,2229,2231,3,122,61,
        0,2230,2228,1,0,0,0,2231,2234,1,0,0,0,2232,2230,1,0,0,0,2232,2233,
        1,0,0,0,2233,2235,1,0,0,0,2234,2232,1,0,0,0,2235,2236,5,1134,0,0,
        2236,2238,1,0,0,0,2237,2226,1,0,0,0,2237,2238,1,0,0,0,2238,2240,
        1,0,0,0,2239,2093,1,0,0,0,2239,2127,1,0,0,0,2239,2152,1,0,0,0,2239,
        2185,1,0,0,0,2239,2218,1,0,0,0,2240,117,1,0,0,0,2241,2245,3,602,
        301,0,2242,2245,3,688,344,0,2243,2245,5,110,0,0,2244,2241,1,0,0,
        0,2244,2242,1,0,0,0,2244,2243,1,0,0,0,2245,119,1,0,0,0,2246,2247,
        5,1133,0,0,2247,2250,3,118,59,0,2248,2249,5,1135,0,0,2249,2251,3,
        118,59,0,2250,2248,1,0,0,0,2251,2252,1,0,0,0,2252,2250,1,0,0,0,2252,
        2253,1,0,0,0,2253,2254,1,0,0,0,2254,2255,5,1134,0,0,2255,121,1,0,
        0,0,2256,2257,5,641,0,0,2257,2261,3,584,292,0,2258,2260,3,124,62,
        0,2259,2258,1,0,0,0,2260,2263,1,0,0,0,2261,2259,1,0,0,0,2261,2262,
        1,0,0,0,2262,123,1,0,0,0,2263,2261,1,0,0,0,2264,2266,5,42,0,0,2265,
        2264,1,0,0,0,2265,2266,1,0,0,0,2266,2268,1,0,0,0,2267,2269,5,636,
        0,0,2268,2267,1,0,0,0,2268,2269,1,0,0,0,2269,2270,1,0,0,0,2270,2272,
        5,409,0,0,2271,2273,5,1124,0,0,2272,2271,1,0,0,0,2272,2273,1,0,0,
        0,2273,2274,1,0,0,0,2274,2313,3,572,286,0,2275,2277,5,368,0,0,2276,
        2278,5,1124,0,0,2277,2276,1,0,0,0,2277,2278,1,0,0,0,2278,2279,1,
        0,0,0,2279,2313,5,1148,0,0,2280,2281,5,388,0,0,2281,2283,5,395,0,
        0,2282,2284,5,1124,0,0,2283,2282,1,0,0,0,2283,2284,1,0,0,0,2284,
        2285,1,0,0,0,2285,2313,5,1148,0,0,2286,2287,5,81,0,0,2287,2289,5,
        395,0,0,2288,2290,5,1124,0,0,2289,2288,1,0,0,0,2289,2290,1,0,0,0,
        2290,2291,1,0,0,0,2291,2313,5,1148,0,0,2292,2294,5,500,0,0,2293,
        2295,5,1124,0,0,2294,2293,1,0,0,0,2294,2295,1,0,0,0,2295,2296,1,
        0,0,0,2296,2313,3,590,295,0,2297,2299,5,510,0,0,2298,2300,5,1124,
        0,0,2299,2298,1,0,0,0,2299,2300,1,0,0,0,2300,2301,1,0,0,0,2301,2313,
        3,590,295,0,2302,2304,5,647,0,0,2303,2305,5,1124,0,0,2304,2303,1,
        0,0,0,2304,2305,1,0,0,0,2305,2306,1,0,0,0,2306,2313,3,584,292,0,
        2307,2309,5,528,0,0,2308,2310,5,1124,0,0,2309,2308,1,0,0,0,2309,
        2310,1,0,0,0,2310,2311,1,0,0,0,2311,2313,3,584,292,0,2312,2265,1,
        0,0,0,2312,2275,1,0,0,0,2312,2280,1,0,0,0,2312,2286,1,0,0,0,2312,
        2292,1,0,0,0,2312,2297,1,0,0,0,2312,2302,1,0,0,0,2312,2307,1,0,0,
        0,2313,125,1,0,0,0,2314,2315,5,7,0,0,2315,2317,7,0,0,0,2316,2318,
        3,584,292,0,2317,2316,1,0,0,0,2317,2318,1,0,0,0,2318,2320,1,0,0,
        0,2319,2321,3,56,28,0,2320,2319,1,0,0,0,2321,2322,1,0,0,0,2322,2320,
        1,0,0,0,2322,2323,1,0,0,0,2323,2333,1,0,0,0,2324,2325,5,7,0,0,2325,
        2326,7,0,0,0,2326,2327,3,584,292,0,2327,2328,5,664,0,0,2328,2329,
        5,388,0,0,2329,2330,5,395,0,0,2330,2331,5,516,0,0,2331,2333,1,0,
        0,0,2332,2314,1,0,0,0,2332,2324,1,0,0,0,2333,127,1,0,0,0,2334,2336,
        5,7,0,0,2335,2337,3,62,31,0,2336,2335,1,0,0,0,2336,2337,1,0,0,0,
        2337,2338,1,0,0,0,2338,2339,5,415,0,0,2339,2343,3,548,274,0,2340,
        2341,5,118,0,0,2341,2342,5,605,0,0,2342,2344,3,64,32,0,2343,2340,
        1,0,0,0,2343,2344,1,0,0,0,2344,2351,1,0,0,0,2345,2346,5,118,0,0,
        2346,2348,5,371,0,0,2347,2349,5,114,0,0,2348,2347,1,0,0,0,2348,2349,
        1,0,0,0,2349,2350,1,0,0,0,2350,2352,5,561,0,0,2351,2345,1,0,0,0,
        2351,2352,1,0,0,0,2352,2356,1,0,0,0,2353,2354,5,139,0,0,2354,2355,
        5,175,0,0,2355,2357,3,548,274,0,2356,2353,1,0,0,0,2356,2357,1,0,
        0,0,2357,2359,1,0,0,0,2358,2360,3,72,36,0,2359,2358,1,0,0,0,2359,
        2360,1,0,0,0,2360,2363,1,0,0,0,2361,2362,5,368,0,0,2362,2364,5,1148,
        0,0,2363,2361,1,0,0,0,2363,2364,1,0,0,0,2364,2367,1,0,0,0,2365,2366,
        5,399,0,0,2366,2368,3,386,193,0,2367,2365,1,0,0,0,2367,2368,1,0,
        0,0,2368,129,1,0,0,0,2369,2370,5,7,0,0,2370,2371,5,437,0,0,2371,
        2375,3,548,274,0,2372,2374,3,82,41,0,2373,2372,1,0,0,0,2374,2377,
        1,0,0,0,2375,2373,1,0,0,0,2375,2376,1,0,0,0,2376,131,1,0,0,0,2377,
        2375,1,0,0,0,2378,2379,5,7,0,0,2379,2380,5,457,0,0,2380,2381,5,599,
        0,0,2381,2382,5,791,0,0,2382,2383,5,477,0,0,2383,2384,5,91,0,0,2384,
        133,1,0,0,0,2385,2386,5,7,0,0,2386,2387,5,475,0,0,2387,2388,5,73,
        0,0,2388,2389,3,584,292,0,2389,2390,5,5,0,0,2390,2391,5,659,0,0,
        2391,2397,5,1148,0,0,2392,2394,5,453,0,0,2393,2395,5,1124,0,0,2394,
        2393,1,0,0,0,2394,2395,1,0,0,0,2395,2396,1,0,0,0,2396,2398,3,592,
        296,0,2397,2392,1,0,0,0,2397,2398,1,0,0,0,2398,2400,1,0,0,0,2399,
        2401,5,674,0,0,2400,2399,1,0,0,0,2400,2401,1,0,0,0,2401,2402,1,0,
        0,0,2402,2404,5,409,0,0,2403,2405,5,1124,0,0,2404,2403,1,0,0,0,2404,
        2405,1,0,0,0,2405,2406,1,0,0,0,2406,2407,3,572,286,0,2407,135,1,
        0,0,0,2408,2409,5,7,0,0,2409,2410,5,131,0,0,2410,2414,3,548,274,
        0,2411,2413,3,82,41,0,2412,2411,1,0,0,0,2413,2416,1,0,0,0,2414,2412,
        1,0,0,0,2414,2415,1,0,0,0,2415,137,1,0,0,0,2416,2414,1,0,0,0,2417,
        2418,5,7,0,0,2418,2419,5,608,0,0,2419,2420,3,584,292,0,2420,2421,
        5,541,0,0,2421,2422,5,1133,0,0,2422,2427,3,84,42,0,2423,2424,5,1135,
        0,0,2424,2426,3,84,42,0,2425,2423,1,0,0,0,2426,2429,1,0,0,0,2427,
        2425,1,0,0,0,2427,2428,1,0,0,0,2428,2430,1,0,0,0,2429,2427,1,0,0,
        0,2430,2431,5,1134,0,0,2431,139,1,0,0,0,2432,2434,5,7,0,0,2433,2435,
        7,1,0,0,2434,2433,1,0,0,0,2434,2435,1,0,0,0,2435,2437,1,0,0,0,2436,
        2438,5,78,0,0,2437,2436,1,0,0,0,2437,2438,1,0,0,0,2438,2439,1,0,
        0,0,2439,2440,5,172,0,0,2440,2442,3,550,275,0,2441,2443,3,646,323,
        0,2442,2441,1,0,0,0,2442,2443,1,0,0,0,2443,2452,1,0,0,0,2444,2449,
        3,146,73,0,2445,2446,5,1135,0,0,2446,2448,3,146,73,0,2447,2445,1,
        0,0,0,2448,2451,1,0,0,0,2449,2447,1,0,0,0,2449,2450,1,0,0,0,2450,
        2453,1,0,0,0,2451,2449,1,0,0,0,2452,2444,1,0,0,0,2452,2453,1,0,0,
        0,2453,2455,1,0,0,0,2454,2456,3,110,55,0,2455,2454,1,0,0,0,2455,
        2456,1,0,0,0,2456,141,1,0,0,0,2457,2458,5,7,0,0,2458,2459,5,647,
        0,0,2459,2460,3,584,292,0,2460,2461,7,33,0,0,2461,2462,5,389,0,0,
        2462,2466,5,1148,0,0,2463,2464,5,453,0,0,2464,2465,5,1124,0,0,2465,
        2467,3,592,296,0,2466,2463,1,0,0,0,2466,2467,1,0,0,0,2467,2469,1,
        0,0,0,2468,2470,5,674,0,0,2469,2468,1,0,0,0,2469,2470,1,0,0,0,2470,
        2471,1,0,0,0,2471,2473,5,409,0,0,2472,2474,5,1124,0,0,2473,2472,
        1,0,0,0,2473,2474,1,0,0,0,2474,2475,1,0,0,0,2475,2476,3,572,286,
        0,2476,143,1,0,0,0,2477,2481,5,7,0,0,2478,2479,5,336,0,0,2479,2480,
        5,1124,0,0,2480,2482,7,10,0,0,2481,2478,1,0,0,0,2481,2482,1,0,0,
        0,2482,2484,1,0,0,0,2483,2485,3,62,31,0,2484,2483,1,0,0,0,2484,2485,
        1,0,0,0,2485,2489,1,0,0,0,2486,2487,5,160,0,0,2487,2488,5,606,0,
        0,2488,2490,7,11,0,0,2489,2486,1,0,0,0,2489,2490,1,0,0,0,2490,2491,
        1,0,0,0,2491,2492,5,671,0,0,2492,2497,3,548,274,0,2493,2494,5,1133,
        0,0,2494,2495,3,616,308,0,2495,2496,5,1134,0,0,2496,2498,1,0,0,0,
        2497,2493,1,0,0,0,2497,2498,1,0,0,0,2498,2499,1,0,0,0,2499,2500,
        5,12,0,0,2500,2507,3,198,99,0,2501,2503,5,192,0,0,2502,2504,7,12,
        0,0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,2505,1,0,0,0,2505,2506,
        5,26,0,0,2506,2508,5,120,0,0,2507,2501,1,0,0,0,2507,2508,1,0,0,0,
        2508,145,1,0,0,0,2509,2516,3,104,52,0,2510,2512,5,1135,0,0,2511,
        2510,1,0,0,0,2511,2512,1,0,0,0,2512,2513,1,0,0,0,2513,2515,3,104,
        52,0,2514,2511,1,0,0,0,2515,2518,1,0,0,0,2516,2514,1,0,0,0,2516,
        2517,1,0,0,0,2517,2861,1,0,0,0,2518,2516,1,0,0,0,2519,2521,5,5,0,
        0,2520,2522,5,28,0,0,2521,2520,1,0,0,0,2521,2522,1,0,0,0,2522,2523,
        1,0,0,0,2523,2524,3,584,292,0,2524,2528,3,90,45,0,2525,2529,5,430,
        0,0,2526,2527,5,334,0,0,2527,2529,3,584,292,0,2528,2525,1,0,0,0,
        2528,2526,1,0,0,0,2528,2529,1,0,0,0,2529,2861,1,0,0,0,2530,2532,
        5,5,0,0,2531,2533,5,28,0,0,2532,2531,1,0,0,0,2532,2533,1,0,0,0,2533,
        2534,1,0,0,0,2534,2535,5,1133,0,0,2535,2536,3,584,292,0,2536,2543,
        3,90,45,0,2537,2538,5,1135,0,0,2538,2539,3,584,292,0,2539,2540,3,
        90,45,0,2540,2542,1,0,0,0,2541,2537,1,0,0,0,2542,2545,1,0,0,0,2543,
        2541,1,0,0,0,2543,2544,1,0,0,0,2544,2546,1,0,0,0,2545,2543,1,0,0,
        0,2546,2547,5,1134,0,0,2547,2861,1,0,0,0,2548,2549,5,5,0,0,2549,
        2551,7,20,0,0,2550,2552,3,584,292,0,2551,2550,1,0,0,0,2551,2552,
        1,0,0,0,2552,2554,1,0,0,0,2553,2555,3,74,37,0,2554,2553,1,0,0,0,
        2554,2555,1,0,0,0,2555,2556,1,0,0,0,2556,2560,3,622,311,0,2557,2559,
        3,76,38,0,2558,2557,1,0,0,0,2559,2562,1,0,0,0,2560,2558,1,0,0,0,
        2560,2561,1,0,0,0,2561,2861,1,0,0,0,2562,2560,1,0,0,0,2563,2568,
        5,5,0,0,2564,2566,5,30,0,0,2565,2567,3,584,292,0,2566,2565,1,0,0,
        0,2566,2567,1,0,0,0,2567,2569,1,0,0,0,2568,2564,1,0,0,0,2568,2569,
        1,0,0,0,2569,2570,1,0,0,0,2570,2571,5,130,0,0,2571,2573,5,91,0,0,
        2572,2574,3,584,292,0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,2576,
        1,0,0,0,2575,2577,3,74,37,0,2576,2575,1,0,0,0,2576,2577,1,0,0,0,
        2577,2578,1,0,0,0,2578,2582,3,622,311,0,2579,2581,3,76,38,0,2580,
        2579,1,0,0,0,2581,2584,1,0,0,0,2582,2580,1,0,0,0,2582,2583,1,0,0,
        0,2583,2861,1,0,0,0,2584,2582,1,0,0,0,2585,2590,5,5,0,0,2586,2588,
        5,30,0,0,2587,2589,3,584,292,0,2588,2587,1,0,0,0,2588,2589,1,0,0,
        0,2589,2591,1,0,0,0,2590,2586,1,0,0,0,2590,2591,1,0,0,0,2591,2592,
        1,0,0,0,2592,2594,5,181,0,0,2593,2595,7,20,0,0,2594,2593,1,0,0,0,
        2594,2595,1,0,0,0,2595,2597,1,0,0,0,2596,2598,3,584,292,0,2597,2596,
        1,0,0,0,2597,2598,1,0,0,0,2598,2600,1,0,0,0,2599,2601,3,74,37,0,
        2600,2599,1,0,0,0,2600,2601,1,0,0,0,2601,2602,1,0,0,0,2602,2606,
        3,622,311,0,2603,2605,3,76,38,0,2604,2603,1,0,0,0,2605,2608,1,0,
        0,0,2606,2604,1,0,0,0,2606,2607,1,0,0,0,2607,2861,1,0,0,0,2608,2606,
        1,0,0,0,2609,2610,5,5,0,0,2610,2612,7,22,0,0,2611,2613,7,20,0,0,
        2612,2611,1,0,0,0,2612,2613,1,0,0,0,2613,2615,1,0,0,0,2614,2616,
        3,584,292,0,2615,2614,1,0,0,0,2615,2616,1,0,0,0,2616,2617,1,0,0,
        0,2617,2621,3,622,311,0,2618,2620,3,76,38,0,2619,2618,1,0,0,0,2620,
        2623,1,0,0,0,2621,2619,1,0,0,0,2621,2622,1,0,0,0,2622,2861,1,0,0,
        0,2623,2621,1,0,0,0,2624,2629,5,5,0,0,2625,2627,5,30,0,0,2626,2628,
        3,584,292,0,2627,2626,1,0,0,0,2627,2628,1,0,0,0,2628,2630,1,0,0,
        0,2629,2625,1,0,0,0,2629,2630,1,0,0,0,2630,2631,1,0,0,0,2631,2632,
        5,67,0,0,2632,2634,5,91,0,0,2633,2635,3,584,292,0,2634,2633,1,0,
        0,0,2634,2635,1,0,0,0,2635,2636,1,0,0,0,2636,2637,3,622,311,0,2637,
        2638,3,96,48,0,2638,2861,1,0,0,0,2639,2644,5,5,0,0,2640,2642,5,30,
        0,0,2641,2643,3,584,292,0,2642,2641,1,0,0,0,2642,2643,1,0,0,0,2643,
        2645,1,0,0,0,2644,2640,1,0,0,0,2644,2645,1,0,0,0,2645,2646,1,0,0,
        0,2646,2653,5,26,0,0,2647,2654,3,584,292,0,2648,2654,3,594,297,0,
        2649,2650,5,1133,0,0,2650,2651,3,688,344,0,2651,2652,5,1134,0,0,
        2652,2654,1,0,0,0,2653,2647,1,0,0,0,2653,2648,1,0,0,0,2653,2649,
        1,0,0,0,2654,2656,1,0,0,0,2655,2657,5,114,0,0,2656,2655,1,0,0,0,
        2656,2657,1,0,0,0,2657,2659,1,0,0,0,2658,2660,5,57,0,0,2659,2658,
        1,0,0,0,2659,2660,1,0,0,0,2660,2861,1,0,0,0,2661,2666,5,7,0,0,2662,
        2664,5,30,0,0,2663,2665,3,584,292,0,2664,2663,1,0,0,0,2664,2665,
        1,0,0,0,2665,2667,1,0,0,0,2666,2662,1,0,0,0,2666,2667,1,0,0,0,2667,
        2668,1,0,0,0,2668,2675,5,26,0,0,2669,2676,3,584,292,0,2670,2676,
        3,594,297,0,2671,2672,5,1133,0,0,2672,2673,3,688,344,0,2673,2674,
        5,1134,0,0,2674,2676,1,0,0,0,2675,2669,1,0,0,0,2675,2670,1,0,0,0,
        2675,2671,1,0,0,0,2676,2678,1,0,0,0,2677,2679,5,114,0,0,2678,2677,
        1,0,0,0,2678,2679,1,0,0,0,2679,2681,1,0,0,0,2680,2682,5,57,0,0,2681,
        2680,1,0,0,0,2681,2682,1,0,0,0,2682,2861,1,0,0,0,2683,2688,5,5,0,
        0,2684,2686,5,30,0,0,2685,2687,3,584,292,0,2686,2685,1,0,0,0,2686,
        2687,1,0,0,0,2687,2689,1,0,0,0,2688,2684,1,0,0,0,2688,2689,1,0,0,
        0,2689,2690,1,0,0,0,2690,2691,5,26,0,0,2691,2692,5,1133,0,0,2692,
        2693,3,688,344,0,2693,2694,5,1134,0,0,2694,2861,1,0,0,0,2695,2697,
        5,336,0,0,2696,2698,5,1124,0,0,2697,2696,1,0,0,0,2697,2698,1,0,0,
        0,2698,2699,1,0,0,0,2699,2861,7,34,0,0,2700,2702,5,7,0,0,2701,2703,
        5,28,0,0,2702,2701,1,0,0,0,2702,2703,1,0,0,0,2703,2704,1,0,0,0,2704,
        2710,3,584,292,0,2705,2706,5,153,0,0,2706,2707,5,42,0,0,2707,2711,
        3,634,317,0,2708,2709,5,51,0,0,2709,2711,5,42,0,0,2710,2705,1,0,
        0,0,2710,2708,1,0,0,0,2711,2861,1,0,0,0,2712,2714,5,24,0,0,2713,
        2715,5,28,0,0,2714,2713,1,0,0,0,2714,2715,1,0,0,0,2715,2716,1,0,
        0,0,2716,2717,3,584,292,0,2717,2718,3,584,292,0,2718,2722,3,90,45,
        0,2719,2723,5,430,0,0,2720,2721,5,334,0,0,2721,2723,3,584,292,0,
        2722,2719,1,0,0,0,2722,2720,1,0,0,0,2722,2723,1,0,0,0,2723,2861,
        1,0,0,0,2724,2725,5,139,0,0,2725,2726,5,28,0,0,2726,2727,3,584,292,
        0,2727,2728,5,175,0,0,2728,2729,3,584,292,0,2729,2861,1,0,0,0,2730,
        2732,5,103,0,0,2731,2733,5,1124,0,0,2732,2731,1,0,0,0,2732,2733,
        1,0,0,0,2733,2734,1,0,0,0,2734,2861,7,4,0,0,2735,2737,5,512,0,0,
        2736,2738,5,28,0,0,2737,2736,1,0,0,0,2737,2738,1,0,0,0,2738,2739,
        1,0,0,0,2739,2740,3,584,292,0,2740,2744,3,90,45,0,2741,2745,5,430,
        0,0,2742,2743,5,334,0,0,2743,2745,3,584,292,0,2744,2741,1,0,0,0,
        2744,2742,1,0,0,0,2744,2745,1,0,0,0,2745,2861,1,0,0,0,2746,2748,
        5,51,0,0,2747,2749,5,28,0,0,2748,2747,1,0,0,0,2748,2749,1,0,0,0,
        2749,2750,1,0,0,0,2750,2752,3,584,292,0,2751,2753,5,144,0,0,2752,
        2751,1,0,0,0,2752,2753,1,0,0,0,2753,2861,1,0,0,0,2754,2755,5,51,
        0,0,2755,2756,7,35,0,0,2756,2861,3,584,292,0,2757,2758,5,51,0,0,
        2758,2759,5,130,0,0,2759,2861,5,91,0,0,2760,2761,5,51,0,0,2761,2762,
        7,20,0,0,2762,2861,3,584,292,0,2763,2764,5,139,0,0,2764,2765,7,20,
        0,0,2765,2766,3,584,292,0,2766,2767,5,175,0,0,2767,2768,3,584,292,
        0,2768,2861,1,0,0,0,2769,2771,5,7,0,0,2770,2772,5,28,0,0,2771,2770,
        1,0,0,0,2771,2772,1,0,0,0,2772,2773,1,0,0,0,2773,2787,3,584,292,
        0,2774,2775,5,153,0,0,2775,2781,5,42,0,0,2776,2782,3,594,297,0,2777,
        2778,5,1133,0,0,2778,2779,3,688,344,0,2779,2780,5,1134,0,0,2780,
        2782,1,0,0,0,2781,2776,1,0,0,0,2781,2777,1,0,0,0,2782,2788,1,0,0,
        0,2783,2784,5,153,0,0,2784,2788,7,15,0,0,2785,2786,5,51,0,0,2786,
        2788,5,42,0,0,2787,2774,1,0,0,0,2787,2783,1,0,0,0,2787,2785,1,0,
        0,0,2788,2861,1,0,0,0,2789,2790,5,7,0,0,2790,2791,5,81,0,0,2791,
        2792,3,584,292,0,2792,2793,7,15,0,0,2793,2861,1,0,0,0,2794,2795,
        5,51,0,0,2795,2796,5,67,0,0,2796,2797,5,91,0,0,2797,2861,3,584,292,
        0,2798,2799,5,396,0,0,2799,2861,5,92,0,0,2800,2801,5,403,0,0,2801,
        2861,5,92,0,0,2802,2804,5,139,0,0,2803,2805,7,36,0,0,2804,2803,1,
        0,0,0,2804,2805,1,0,0,0,2805,2808,1,0,0,0,2806,2809,3,584,292,0,
        2807,2809,3,548,274,0,2808,2806,1,0,0,0,2808,2807,1,0,0,0,2809,2861,
        1,0,0,0,2810,2811,5,124,0,0,2811,2812,5,19,0,0,2812,2861,3,616,308,
        0,2813,2814,5,32,0,0,2814,2818,5,175,0,0,2815,2819,5,841,0,0,2816,
        2817,5,25,0,0,2817,2819,5,153,0,0,2818,2815,1,0,0,0,2818,2816,1,
        0,0,0,2819,2820,1,0,0,0,2820,2823,3,568,284,0,2821,2822,5,27,0,0,
        2822,2824,3,570,285,0,2823,2821,1,0,0,0,2823,2824,1,0,0,0,2824,2861,
        1,0,0,0,2825,2827,5,42,0,0,2826,2825,1,0,0,0,2826,2827,1,0,0,0,2827,
        2828,1,0,0,0,2828,2829,5,25,0,0,2829,2830,5,153,0,0,2830,2831,5,
        1124,0,0,2831,2835,3,568,284,0,2832,2833,5,27,0,0,2833,2834,5,1124,
        0,0,2834,2836,3,570,285,0,2835,2832,1,0,0,0,2835,2836,1,0,0,0,2836,
        2861,1,0,0,0,2837,2838,5,397,0,0,2838,2861,5,647,0,0,2839,2840,5,
        450,0,0,2840,2861,5,647,0,0,2841,2861,5,66,0,0,2842,2843,7,37,0,
        0,2843,2861,5,668,0,0,2844,2846,5,5,0,0,2845,2847,5,28,0,0,2846,
        2845,1,0,0,0,2846,2847,1,0,0,0,2847,2848,1,0,0,0,2848,2849,5,1133,
        0,0,2849,2854,3,88,44,0,2850,2851,5,1135,0,0,2851,2853,3,88,44,0,
        2852,2850,1,0,0,0,2853,2856,1,0,0,0,2854,2852,1,0,0,0,2854,2855,
        1,0,0,0,2855,2857,1,0,0,0,2856,2854,1,0,0,0,2857,2858,5,1134,0,0,
        2858,2861,1,0,0,0,2859,2861,3,148,74,0,2860,2509,1,0,0,0,2860,2519,
        1,0,0,0,2860,2530,1,0,0,0,2860,2548,1,0,0,0,2860,2563,1,0,0,0,2860,
        2585,1,0,0,0,2860,2609,1,0,0,0,2860,2624,1,0,0,0,2860,2639,1,0,0,
        0,2860,2661,1,0,0,0,2860,2683,1,0,0,0,2860,2695,1,0,0,0,2860,2700,
        1,0,0,0,2860,2712,1,0,0,0,2860,2724,1,0,0,0,2860,2730,1,0,0,0,2860,
        2735,1,0,0,0,2860,2746,1,0,0,0,2860,2754,1,0,0,0,2860,2757,1,0,0,
        0,2860,2760,1,0,0,0,2860,2763,1,0,0,0,2860,2769,1,0,0,0,2860,2789,
        1,0,0,0,2860,2794,1,0,0,0,2860,2798,1,0,0,0,2860,2800,1,0,0,0,2860,
        2802,1,0,0,0,2860,2810,1,0,0,0,2860,2813,1,0,0,0,2860,2826,1,0,0,
        0,2860,2837,1,0,0,0,2860,2839,1,0,0,0,2860,2841,1,0,0,0,2860,2842,
        1,0,0,0,2860,2844,1,0,0,0,2860,2859,1,0,0,0,2861,147,1,0,0,0,2862,
        2863,5,5,0,0,2863,2864,5,129,0,0,2864,2865,5,1133,0,0,2865,2870,
        3,116,58,0,2866,2867,5,1135,0,0,2867,2869,3,116,58,0,2868,2866,1,
        0,0,0,2869,2872,1,0,0,0,2870,2868,1,0,0,0,2870,2871,1,0,0,0,2871,
        2873,1,0,0,0,2872,2870,1,0,0,0,2873,2874,5,1134,0,0,2874,2961,1,
        0,0,0,2875,2876,5,51,0,0,2876,2877,5,129,0,0,2877,2961,3,616,308,
        0,2878,2879,5,397,0,0,2879,2882,5,129,0,0,2880,2883,3,616,308,0,
        2881,2883,5,6,0,0,2882,2880,1,0,0,0,2882,2881,1,0,0,0,2883,2884,
        1,0,0,0,2884,2961,5,647,0,0,2885,2886,5,450,0,0,2886,2889,5,129,
        0,0,2887,2890,3,616,308,0,2888,2890,5,6,0,0,2889,2887,1,0,0,0,2889,
        2888,1,0,0,0,2890,2891,1,0,0,0,2891,2961,5,647,0,0,2892,2893,5,656,
        0,0,2893,2896,5,129,0,0,2894,2897,3,616,308,0,2895,2897,5,6,0,0,
        2896,2894,1,0,0,0,2896,2895,1,0,0,0,2897,2961,1,0,0,0,2898,2899,
        5,363,0,0,2899,2900,5,129,0,0,2900,2961,3,590,295,0,2901,2902,5,
        579,0,0,2902,2903,5,129,0,0,2903,2904,3,616,308,0,2904,2905,5,87,
        0,0,2905,2906,5,1133,0,0,2906,2911,3,116,58,0,2907,2908,5,1135,0,
        0,2908,2910,3,116,58,0,2909,2907,1,0,0,0,2910,2913,1,0,0,0,2911,
        2909,1,0,0,0,2911,2912,1,0,0,0,2912,2914,1,0,0,0,2913,2911,1,0,0,
        0,2914,2915,5,1134,0,0,2915,2961,1,0,0,0,2916,2917,5,418,0,0,2917,
        2918,5,129,0,0,2918,2919,3,584,292,0,2919,2920,5,192,0,0,2920,2921,
        5,172,0,0,2921,2924,3,550,275,0,2922,2923,7,37,0,0,2923,2925,5,668,
        0,0,2924,2922,1,0,0,0,2924,2925,1,0,0,0,2925,2961,1,0,0,0,2926,2927,
        5,9,0,0,2927,2930,5,129,0,0,2928,2931,3,616,308,0,2929,2931,5,6,
        0,0,2930,2928,1,0,0,0,2930,2929,1,0,0,0,2931,2961,1,0,0,0,2932,2933,
        5,26,0,0,2933,2936,5,129,0,0,2934,2937,3,616,308,0,2935,2937,5,6,
        0,0,2936,2934,1,0,0,0,2936,2935,1,0,0,0,2937,2961,1,0,0,0,2938,2939,
        5,119,0,0,2939,2942,5,129,0,0,2940,2943,3,616,308,0,2941,2943,5,
        6,0,0,2942,2940,1,0,0,0,2942,2941,1,0,0,0,2943,2961,1,0,0,0,2944,
        2945,5,569,0,0,2945,2948,5,129,0,0,2946,2949,3,616,308,0,2947,2949,
        5,6,0,0,2948,2946,1,0,0,0,2948,2947,1,0,0,0,2949,2961,1,0,0,0,2950,
        2951,5,580,0,0,2951,2954,5,129,0,0,2952,2955,3,616,308,0,2953,2955,
        5,6,0,0,2954,2952,1,0,0,0,2954,2953,1,0,0,0,2955,2961,1,0,0,0,2956,
        2957,5,578,0,0,2957,2961,5,549,0,0,2958,2959,5,664,0,0,2959,2961,
        5,549,0,0,2960,2862,1,0,0,0,2960,2875,1,0,0,0,2960,2878,1,0,0,0,
        2960,2885,1,0,0,0,2960,2892,1,0,0,0,2960,2898,1,0,0,0,2960,2901,
        1,0,0,0,2960,2916,1,0,0,0,2960,2926,1,0,0,0,2960,2932,1,0,0,0,2960,
        2938,1,0,0,0,2960,2944,1,0,0,0,2960,2950,1,0,0,0,2960,2956,1,0,0,
        0,2960,2958,1,0,0,0,2961,149,1,0,0,0,2962,2963,5,51,0,0,2963,2965,
        7,0,0,0,2964,2966,3,640,320,0,2965,2964,1,0,0,0,2965,2966,1,0,0,
        0,2966,2967,1,0,0,0,2967,2968,3,584,292,0,2968,151,1,0,0,0,2969,
        2970,5,51,0,0,2970,2972,5,415,0,0,2971,2973,3,640,320,0,2972,2971,
        1,0,0,0,2972,2973,1,0,0,0,2973,2974,1,0,0,0,2974,2975,3,548,274,
        0,2975,153,1,0,0,0,2976,2977,5,51,0,0,2977,2979,5,81,0,0,2978,2980,
        7,1,0,0,2979,2978,1,0,0,0,2979,2980,1,0,0,0,2980,2981,1,0,0,0,2981,
        2982,3,584,292,0,2982,2983,5,118,0,0,2983,2996,3,550,275,0,2984,
        2986,5,336,0,0,2985,2987,5,1124,0,0,2986,2985,1,0,0,0,2986,2987,
        1,0,0,0,2987,2988,1,0,0,0,2988,2995,7,3,0,0,2989,2991,5,103,0,0,
        2990,2992,5,1124,0,0,2991,2990,1,0,0,0,2991,2992,1,0,0,0,2992,2993,
        1,0,0,0,2993,2995,7,4,0,0,2994,2984,1,0,0,0,2994,2989,1,0,0,0,2995,
        2998,1,0,0,0,2996,2994,1,0,0,0,2996,2997,1,0,0,0,2997,155,1,0,0,
        0,2998,2996,1,0,0,0,2999,3000,5,51,0,0,3000,3001,5,475,0,0,3001,
        3002,5,73,0,0,3002,3003,3,584,292,0,3003,3004,5,409,0,0,3004,3005,
        5,1124,0,0,3005,3006,3,572,286,0,3006,157,1,0,0,0,3007,3008,5,51,
        0,0,3008,3010,5,131,0,0,3009,3011,3,640,320,0,3010,3009,1,0,0,0,
        3010,3011,1,0,0,0,3011,3012,1,0,0,0,3012,3013,3,548,274,0,3013,159,
        1,0,0,0,3014,3015,5,51,0,0,3015,3017,5,437,0,0,3016,3018,3,640,320,
        0,3017,3016,1,0,0,0,3017,3018,1,0,0,0,3018,3019,1,0,0,0,3019,3020,
        3,548,274,0,3020,161,1,0,0,0,3021,3022,5,51,0,0,3022,3024,5,608,
        0,0,3023,3025,3,640,320,0,3024,3023,1,0,0,0,3024,3025,1,0,0,0,3025,
        3026,1,0,0,0,3026,3027,3,584,292,0,3027,163,1,0,0,0,3028,3030,5,
        51,0,0,3029,3031,5,649,0,0,3030,3029,1,0,0,0,3030,3031,1,0,0,0,3031,
        3032,1,0,0,0,3032,3034,5,172,0,0,3033,3035,3,640,320,0,3034,3033,
        1,0,0,0,3034,3035,1,0,0,0,3035,3036,1,0,0,0,3036,3038,3,620,310,
        0,3037,3039,7,38,0,0,3038,3037,1,0,0,0,3038,3039,1,0,0,0,3039,165,
        1,0,0,0,3040,3041,5,51,0,0,3041,3042,5,647,0,0,3042,3048,3,584,292,
        0,3043,3045,5,409,0,0,3044,3046,5,1124,0,0,3045,3044,1,0,0,0,3045,
        3046,1,0,0,0,3046,3047,1,0,0,0,3047,3049,3,572,286,0,3048,3043,1,
        0,0,0,3048,3049,1,0,0,0,3049,167,1,0,0,0,3050,3051,5,51,0,0,3051,
        3053,5,177,0,0,3052,3054,3,640,320,0,3053,3052,1,0,0,0,3053,3054,
        1,0,0,0,3054,3055,1,0,0,0,3055,3056,3,548,274,0,3056,169,1,0,0,0,
        3057,3058,5,51,0,0,3058,3060,5,671,0,0,3059,3061,3,640,320,0,3060,
        3059,1,0,0,0,3060,3061,1,0,0,0,3061,3062,1,0,0,0,3062,3067,3,548,
        274,0,3063,3064,5,1135,0,0,3064,3066,3,548,274,0,3065,3063,1,0,0,
        0,3066,3069,1,0,0,0,3067,3065,1,0,0,0,3067,3068,1,0,0,0,3068,3071,
        1,0,0,0,3069,3067,1,0,0,0,3070,3072,7,38,0,0,3071,3070,1,0,0,0,3071,
        3072,1,0,0,0,3072,171,1,0,0,0,3073,3074,5,51,0,0,3074,3076,5,596,
        0,0,3075,3077,3,640,320,0,3076,3075,1,0,0,0,3076,3077,1,0,0,0,3077,
        3078,1,0,0,0,3078,3083,3,554,277,0,3079,3080,5,1135,0,0,3080,3082,
        3,554,277,0,3081,3079,1,0,0,0,3082,3085,1,0,0,0,3083,3081,1,0,0,
        0,3083,3084,1,0,0,0,3084,173,1,0,0,0,3085,3083,1,0,0,0,3086,3087,
        5,153,0,0,3087,3088,5,42,0,0,3088,3099,5,596,0,0,3089,3100,5,529,
        0,0,3090,3100,5,6,0,0,3091,3096,3,554,277,0,3092,3093,5,1135,0,0,
        3093,3095,3,554,277,0,3094,3092,1,0,0,0,3095,3098,1,0,0,0,3096,3094,
        1,0,0,0,3096,3097,1,0,0,0,3097,3100,1,0,0,0,3098,3096,1,0,0,0,3099,
        3089,1,0,0,0,3099,3090,1,0,0,0,3099,3091,1,0,0,0,3100,3101,1,0,0,
        0,3101,3104,5,175,0,0,3102,3105,3,564,282,0,3103,3105,3,584,292,
        0,3104,3102,1,0,0,0,3104,3103,1,0,0,0,3105,3113,1,0,0,0,3106,3109,
        5,1135,0,0,3107,3110,3,564,282,0,3108,3110,3,584,292,0,3109,3107,
        1,0,0,0,3109,3108,1,0,0,0,3110,3112,1,0,0,0,3111,3106,1,0,0,0,3112,
        3115,1,0,0,0,3113,3111,1,0,0,0,3113,3114,1,0,0,0,3114,3120,1,0,0,
        0,3115,3113,1,0,0,0,3116,3117,5,153,0,0,3117,3118,5,596,0,0,3118,
        3120,3,432,216,0,3119,3086,1,0,0,0,3119,3116,1,0,0,0,3120,175,1,
        0,0,0,3121,3122,5,139,0,0,3122,3123,5,172,0,0,3123,3128,3,178,89,
        0,3124,3125,5,1135,0,0,3125,3127,3,178,89,0,3126,3124,1,0,0,0,3127,
        3130,1,0,0,0,3128,3126,1,0,0,0,3128,3129,1,0,0,0,3129,177,1,0,0,
        0,3130,3128,1,0,0,0,3131,3132,3,550,275,0,3132,3133,5,175,0,0,3133,
        3134,3,550,275,0,3134,179,1,0,0,0,3135,3137,5,656,0,0,3136,3138,
        5,172,0,0,3137,3136,1,0,0,0,3137,3138,1,0,0,0,3138,3139,1,0,0,0,
        3139,3140,3,550,275,0,3140,181,1,0,0,0,3141,3142,5,20,0,0,3142,3149,
        3,548,274,0,3143,3146,5,1133,0,0,3144,3147,3,628,314,0,3145,3147,
        3,624,312,0,3146,3144,1,0,0,0,3146,3145,1,0,0,0,3146,3147,1,0,0,
        0,3147,3148,1,0,0,0,3148,3150,5,1134,0,0,3149,3143,1,0,0,0,3149,
        3150,1,0,0,0,3150,183,1,0,0,0,3151,3154,3,212,106,0,3152,3154,3,
        214,107,0,3153,3151,1,0,0,0,3153,3152,1,0,0,0,3154,185,1,0,0,0,3155,
        3156,5,399,0,0,3156,3157,3,624,312,0,3157,187,1,0,0,0,3158,3163,
        3,216,108,0,3159,3163,3,218,109,0,3160,3163,3,220,110,0,3161,3163,
        3,222,111,0,3162,3158,1,0,0,0,3162,3159,1,0,0,0,3162,3160,1,0,0,
        0,3162,3161,1,0,0,0,3163,189,1,0,0,0,3164,3166,5,85,0,0,3165,3167,
        7,39,0,0,3166,3165,1,0,0,0,3166,3167,1,0,0,0,3167,3169,1,0,0,0,3168,
        3170,5,78,0,0,3169,3168,1,0,0,0,3169,3170,1,0,0,0,3170,3172,1,0,
        0,0,3171,3173,5,87,0,0,3172,3171,1,0,0,0,3172,3173,1,0,0,0,3173,
        3174,1,0,0,0,3174,3181,3,550,275,0,3175,3176,5,129,0,0,3176,3178,
        5,1133,0,0,3177,3179,3,616,308,0,3178,3177,1,0,0,0,3178,3179,1,0,
        0,0,3179,3180,1,0,0,0,3180,3182,5,1134,0,0,3181,3175,1,0,0,0,3181,
        3182,1,0,0,0,3182,3206,1,0,0,0,3183,3185,5,1133,0,0,3184,3186,3,
        618,309,0,3185,3184,1,0,0,0,3185,3186,1,0,0,0,3186,3187,1,0,0,0,
        3187,3189,5,1134,0,0,3188,3183,1,0,0,0,3188,3189,1,0,0,0,3189,3190,
        1,0,0,0,3190,3195,3,204,102,0,3191,3193,5,12,0,0,3192,3191,1,0,0,
        0,3192,3193,1,0,0,0,3193,3194,1,0,0,0,3194,3196,3,584,292,0,3195,
        3192,1,0,0,0,3195,3196,1,0,0,0,3196,3207,1,0,0,0,3197,3198,5,153,
        0,0,3198,3203,3,206,103,0,3199,3200,5,1135,0,0,3200,3202,3,206,103,
        0,3201,3199,1,0,0,0,3202,3205,1,0,0,0,3203,3201,1,0,0,0,3203,3204,
        1,0,0,0,3204,3207,1,0,0,0,3205,3203,1,0,0,0,3206,3188,1,0,0,0,3206,
        3197,1,0,0,0,3207,3220,1,0,0,0,3208,3209,5,118,0,0,3209,3210,5,401,
        0,0,3210,3211,5,91,0,0,3211,3212,5,184,0,0,3212,3217,3,206,103,0,
        3213,3214,5,1135,0,0,3214,3216,3,206,103,0,3215,3213,1,0,0,0,3216,
        3219,1,0,0,0,3217,3215,1,0,0,0,3217,3218,1,0,0,0,3218,3221,1,0,0,
        0,3219,3217,1,0,0,0,3220,3208,1,0,0,0,3220,3221,1,0,0,0,3221,191,
        1,0,0,0,3222,3223,5,102,0,0,3223,3225,5,388,0,0,3224,3226,7,40,0,
        0,3225,3224,1,0,0,0,3225,3226,1,0,0,0,3226,3228,1,0,0,0,3227,3229,
        5,474,0,0,3228,3227,1,0,0,0,3228,3229,1,0,0,0,3229,3230,1,0,0,0,
        3230,3231,5,82,0,0,3231,3233,5,1148,0,0,3232,3234,7,6,0,0,3233,3232,
        1,0,0,0,3233,3234,1,0,0,0,3234,3235,1,0,0,0,3235,3236,5,87,0,0,3236,
        3237,5,172,0,0,3237,3243,3,550,275,0,3238,3239,5,129,0,0,3239,3240,
        5,1133,0,0,3240,3241,3,616,308,0,3241,3242,5,1134,0,0,3242,3244,
        1,0,0,0,3243,3238,1,0,0,0,3243,3244,1,0,0,0,3244,3248,1,0,0,0,3245,
        3246,5,25,0,0,3246,3247,5,153,0,0,3247,3249,3,568,284,0,3248,3245,
        1,0,0,0,3248,3249,1,0,0,0,3249,3256,1,0,0,0,3250,3252,7,41,0,0,3251,
        3253,3,278,139,0,3252,3251,1,0,0,0,3253,3254,1,0,0,0,3254,3252,1,
        0,0,0,3254,3255,1,0,0,0,3255,3257,1,0,0,0,3256,3250,1,0,0,0,3256,
        3257,1,0,0,0,3257,3264,1,0,0,0,3258,3260,5,101,0,0,3259,3261,3,280,
        140,0,3260,3259,1,0,0,0,3261,3262,1,0,0,0,3262,3260,1,0,0,0,3262,
        3263,1,0,0,0,3263,3265,1,0,0,0,3264,3258,1,0,0,0,3264,3265,1,0,0,
        0,3265,3270,1,0,0,0,3266,3267,5,78,0,0,3267,3268,3,590,295,0,3268,
        3269,7,42,0,0,3269,3271,1,0,0,0,3270,3266,1,0,0,0,3270,3271,1,0,
        0,0,3271,3283,1,0,0,0,3272,3273,5,1133,0,0,3273,3278,3,208,104,0,
        3274,3275,5,1135,0,0,3275,3277,3,208,104,0,3276,3274,1,0,0,0,3277,
        3280,1,0,0,0,3278,3276,1,0,0,0,3278,3279,1,0,0,0,3279,3281,1,0,0,
        0,3280,3278,1,0,0,0,3281,3282,5,1134,0,0,3282,3284,1,0,0,0,3283,
        3272,1,0,0,0,3283,3284,1,0,0,0,3284,3294,1,0,0,0,3285,3286,5,153,
        0,0,3286,3291,3,206,103,0,3287,3288,5,1135,0,0,3288,3290,3,206,103,
        0,3289,3287,1,0,0,0,3290,3293,1,0,0,0,3291,3289,1,0,0,0,3291,3292,
        1,0,0,0,3292,3295,1,0,0,0,3293,3291,1,0,0,0,3294,3285,1,0,0,0,3294,
        3295,1,0,0,0,3295,193,1,0,0,0,3296,3297,5,102,0,0,3297,3299,5,682,
        0,0,3298,3300,7,40,0,0,3299,3298,1,0,0,0,3299,3300,1,0,0,0,3300,
        3302,1,0,0,0,3301,3303,5,474,0,0,3302,3301,1,0,0,0,3302,3303,1,0,
        0,0,3303,3304,1,0,0,0,3304,3305,5,82,0,0,3305,3307,5,1148,0,0,3306,
        3308,7,6,0,0,3307,3306,1,0,0,0,3307,3308,1,0,0,0,3308,3309,1,0,0,
        0,3309,3310,5,87,0,0,3310,3311,5,172,0,0,3311,3315,3,550,275,0,3312,
        3313,5,25,0,0,3313,3314,5,153,0,0,3314,3316,3,568,284,0,3315,3312,
        1,0,0,0,3315,3316,1,0,0,0,3316,3323,1,0,0,0,3317,3318,5,601,0,0,
        3318,3319,5,448,0,0,3319,3320,5,19,0,0,3320,3321,5,1126,0,0,3321,
        3322,5,1148,0,0,3322,3324,5,1125,0,0,3323,3317,1,0,0,0,3323,3324,
        1,0,0,0,3324,3329,1,0,0,0,3325,3326,5,78,0,0,3326,3327,3,590,295,
        0,3327,3328,7,42,0,0,3328,3330,1,0,0,0,3329,3325,1,0,0,0,3329,3330,
        1,0,0,0,3330,3342,1,0,0,0,3331,3332,5,1133,0,0,3332,3337,3,208,104,
        0,3333,3334,5,1135,0,0,3334,3336,3,208,104,0,3335,3333,1,0,0,0,3336,
        3339,1,0,0,0,3337,3335,1,0,0,0,3337,3338,1,0,0,0,3338,3340,1,0,0,
        0,3339,3337,1,0,0,0,3340,3341,5,1134,0,0,3341,3343,1,0,0,0,3342,
        3331,1,0,0,0,3342,3343,1,0,0,0,3343,3353,1,0,0,0,3344,3345,5,153,
        0,0,3345,3350,3,206,103,0,3346,3347,5,1135,0,0,3347,3349,3,206,103,
        0,3348,3346,1,0,0,0,3349,3352,1,0,0,0,3350,3348,1,0,0,0,3350,3351,
        1,0,0,0,3351,3354,1,0,0,0,3352,3350,1,0,0,0,3353,3344,1,0,0,0,3353,
        3354,1,0,0,0,3354,195,1,0,0,0,3355,3357,5,141,0,0,3356,3358,7,43,
        0,0,3357,3356,1,0,0,0,3357,3358,1,0,0,0,3358,3360,1,0,0,0,3359,3361,
        5,87,0,0,3360,3359,1,0,0,0,3360,3361,1,0,0,0,3361,3362,1,0,0,0,3362,
        3368,3,550,275,0,3363,3364,5,129,0,0,3364,3365,5,1133,0,0,3365,3366,
        3,616,308,0,3366,3367,5,1134,0,0,3367,3369,1,0,0,0,3368,3363,1,0,
        0,0,3368,3369,1,0,0,0,3369,3386,1,0,0,0,3370,3371,5,1133,0,0,3371,
        3372,3,616,308,0,3372,3373,5,1134,0,0,3373,3375,1,0,0,0,3374,3370,
        1,0,0,0,3374,3375,1,0,0,0,3375,3376,1,0,0,0,3376,3387,3,204,102,
        0,3377,3378,5,153,0,0,3378,3383,3,206,103,0,3379,3380,5,1135,0,0,
        3380,3382,3,206,103,0,3381,3379,1,0,0,0,3382,3385,1,0,0,0,3383,3381,
        1,0,0,0,3383,3384,1,0,0,0,3384,3387,1,0,0,0,3385,3383,1,0,0,0,3386,
        3374,1,0,0,0,3386,3377,1,0,0,0,3387,197,1,0,0,0,3388,3390,3,250,
        125,0,3389,3391,3,210,105,0,3390,3389,1,0,0,0,3390,3391,1,0,0,0,
        3391,3454,1,0,0,0,3392,3394,3,246,123,0,3393,3395,3,210,105,0,3394,
        3393,1,0,0,0,3394,3395,1,0,0,0,3395,3454,1,0,0,0,3396,3399,3,252,
        126,0,3397,3399,3,248,124,0,3398,3396,1,0,0,0,3398,3397,1,0,0,0,
        3399,3401,1,0,0,0,3400,3402,3,256,128,0,3401,3400,1,0,0,0,3402,3403,
        1,0,0,0,3403,3401,1,0,0,0,3403,3404,1,0,0,0,3404,3413,1,0,0,0,3405,
        3407,5,180,0,0,3406,3408,7,44,0,0,3407,3406,1,0,0,0,3407,3408,1,
        0,0,0,3408,3411,1,0,0,0,3409,3412,3,250,125,0,3410,3412,3,246,123,
        0,3411,3409,1,0,0,0,3411,3410,1,0,0,0,3412,3414,1,0,0,0,3413,3405,
        1,0,0,0,3413,3414,1,0,0,0,3414,3416,1,0,0,0,3415,3417,3,228,114,
        0,3416,3415,1,0,0,0,3416,3417,1,0,0,0,3417,3419,1,0,0,0,3418,3420,
        3,292,146,0,3419,3418,1,0,0,0,3419,3420,1,0,0,0,3420,3422,1,0,0,
        0,3421,3423,3,210,105,0,3422,3421,1,0,0,0,3422,3423,1,0,0,0,3423,
        3454,1,0,0,0,3424,3426,3,248,124,0,3425,3427,3,254,127,0,3426,3425,
        1,0,0,0,3427,3428,1,0,0,0,3428,3426,1,0,0,0,3428,3429,1,0,0,0,3429,
        3435,1,0,0,0,3430,3432,5,180,0,0,3431,3433,7,44,0,0,3432,3431,1,
        0,0,0,3432,3433,1,0,0,0,3433,3434,1,0,0,0,3434,3436,3,246,123,0,
        3435,3430,1,0,0,0,3435,3436,1,0,0,0,3436,3438,1,0,0,0,3437,3439,
        3,228,114,0,3438,3437,1,0,0,0,3438,3439,1,0,0,0,3439,3441,1,0,0,
        0,3440,3442,3,292,146,0,3441,3440,1,0,0,0,3441,3442,1,0,0,0,3442,
        3444,1,0,0,0,3443,3445,3,210,105,0,3444,3443,1,0,0,0,3444,3445,1,
        0,0,0,3445,3454,1,0,0,0,3446,3449,3,252,126,0,3447,3448,5,1135,0,
        0,3448,3450,3,258,129,0,3449,3447,1,0,0,0,3450,3451,1,0,0,0,3451,
        3449,1,0,0,0,3451,3452,1,0,0,0,3452,3454,1,0,0,0,3453,3388,1,0,0,
        0,3453,3392,1,0,0,0,3453,3398,1,0,0,0,3453,3424,1,0,0,0,3453,3446,
        1,0,0,0,3454,199,1,0,0,0,3455,3458,3,224,112,0,3456,3458,3,226,113,
        0,3457,3455,1,0,0,0,3457,3456,1,0,0,0,3458,201,1,0,0,0,3459,3460,
        5,188,0,0,3460,3462,5,1133,0,0,3461,3463,3,626,313,0,3462,3461,1,
        0,0,0,3462,3463,1,0,0,0,3463,3464,1,0,0,0,3464,3473,5,1134,0,0,3465,
        3466,5,1135,0,0,3466,3468,5,1133,0,0,3467,3469,3,626,313,0,3468,
        3467,1,0,0,0,3468,3469,1,0,0,0,3469,3470,1,0,0,0,3470,3472,5,1134,
        0,0,3471,3465,1,0,0,0,3472,3475,1,0,0,0,3473,3471,1,0,0,0,3473,3474,
        1,0,0,0,3474,203,1,0,0,0,3475,3473,1,0,0,0,3476,3495,3,198,99,0,
        3477,3478,7,45,0,0,3478,3480,5,1133,0,0,3479,3481,3,626,313,0,3480,
        3479,1,0,0,0,3480,3481,1,0,0,0,3481,3482,1,0,0,0,3482,3491,5,1134,
        0,0,3483,3484,5,1135,0,0,3484,3486,5,1133,0,0,3485,3487,3,626,313,
        0,3486,3485,1,0,0,0,3486,3487,1,0,0,0,3487,3488,1,0,0,0,3488,3490,
        5,1134,0,0,3489,3483,1,0,0,0,3490,3493,1,0,0,0,3491,3489,1,0,0,0,
        3491,3492,1,0,0,0,3492,3495,1,0,0,0,3493,3491,1,0,0,0,3494,3476,
        1,0,0,0,3494,3477,1,0,0,0,3495,205,1,0,0,0,3496,3497,3,556,278,0,
        3497,3500,5,1124,0,0,3498,3501,3,688,344,0,3499,3501,5,42,0,0,3500,
        3498,1,0,0,0,3500,3499,1,0,0,0,3501,207,1,0,0,0,3502,3505,3,584,
        292,0,3503,3505,5,1159,0,0,3504,3502,1,0,0,0,3504,3503,1,0,0,0,3505,
        209,1,0,0,0,3506,3507,5,65,0,0,3507,3513,5,184,0,0,3508,3509,5,103,
        0,0,3509,3510,5,80,0,0,3510,3511,5,610,0,0,3511,3513,5,511,0,0,3512,
        3506,1,0,0,0,3512,3508,1,0,0,0,3513,211,1,0,0,0,3514,3516,5,44,0,
        0,3515,3517,5,106,0,0,3516,3515,1,0,0,0,3516,3517,1,0,0,0,3517,3519,
        1,0,0,0,3518,3520,5,568,0,0,3519,3518,1,0,0,0,3519,3520,1,0,0,0,
        3520,3522,1,0,0,0,3521,3523,5,78,0,0,3522,3521,1,0,0,0,3522,3523,
        1,0,0,0,3523,3524,1,0,0,0,3524,3525,5,68,0,0,3525,3530,3,550,275,
        0,3526,3528,5,12,0,0,3527,3526,1,0,0,0,3527,3528,1,0,0,0,3528,3529,
        1,0,0,0,3529,3531,3,584,292,0,3530,3527,1,0,0,0,3530,3531,1,0,0,
        0,3531,3537,1,0,0,0,3532,3533,5,129,0,0,3533,3534,5,1133,0,0,3534,
        3535,3,616,308,0,3535,3536,5,1134,0,0,3536,3538,1,0,0,0,3537,3532,
        1,0,0,0,3537,3538,1,0,0,0,3538,3541,1,0,0,0,3539,3540,5,190,0,0,
        3540,3542,3,688,344,0,3541,3539,1,0,0,0,3541,3542,1,0,0,0,3542,3544,
        1,0,0,0,3543,3545,3,228,114,0,3544,3543,1,0,0,0,3544,3545,1,0,0,
        0,3545,3548,1,0,0,0,3546,3547,5,99,0,0,3547,3549,3,294,147,0,3548,
        3546,1,0,0,0,3548,3549,1,0,0,0,3549,213,1,0,0,0,3550,3552,5,44,0,
        0,3551,3553,5,106,0,0,3552,3551,1,0,0,0,3552,3553,1,0,0,0,3553,3555,
        1,0,0,0,3554,3556,5,568,0,0,3555,3554,1,0,0,0,3555,3556,1,0,0,0,
        3556,3558,1,0,0,0,3557,3559,5,78,0,0,3558,3557,1,0,0,0,3558,3559,
        1,0,0,0,3559,3599,1,0,0,0,3560,3563,3,550,275,0,3561,3562,5,1132,
        0,0,3562,3564,5,1117,0,0,3563,3561,1,0,0,0,3563,3564,1,0,0,0,3564,
        3573,1,0,0,0,3565,3566,5,1135,0,0,3566,3569,3,550,275,0,3567,3568,
        5,1132,0,0,3568,3570,5,1117,0,0,3569,3567,1,0,0,0,3569,3570,1,0,
        0,0,3570,3572,1,0,0,0,3571,3565,1,0,0,0,3572,3575,1,0,0,0,3573,3571,
        1,0,0,0,3573,3574,1,0,0,0,3574,3576,1,0,0,0,3575,3573,1,0,0,0,3576,
        3577,5,68,0,0,3577,3578,3,232,116,0,3578,3600,1,0,0,0,3579,3580,
        5,68,0,0,3580,3583,3,550,275,0,3581,3582,5,1132,0,0,3582,3584,5,
        1117,0,0,3583,3581,1,0,0,0,3583,3584,1,0,0,0,3584,3593,1,0,0,0,3585,
        3586,5,1135,0,0,3586,3589,3,550,275,0,3587,3588,5,1132,0,0,3588,
        3590,5,1117,0,0,3589,3587,1,0,0,0,3589,3590,1,0,0,0,3590,3592,1,
        0,0,0,3591,3585,1,0,0,0,3592,3595,1,0,0,0,3593,3591,1,0,0,0,3593,
        3594,1,0,0,0,3594,3596,1,0,0,0,3595,3593,1,0,0,0,3596,3597,5,187,
        0,0,3597,3598,3,232,116,0,3598,3600,1,0,0,0,3599,3560,1,0,0,0,3599,
        3579,1,0,0,0,3600,3603,1,0,0,0,3601,3602,5,190,0,0,3602,3604,3,688,
        344,0,3603,3601,1,0,0,0,3603,3604,1,0,0,0,3604,215,1,0,0,0,3605,
        3606,5,442,0,0,3606,3607,3,550,275,0,3607,3612,5,539,0,0,3608,3610,
        5,12,0,0,3609,3608,1,0,0,0,3609,3610,1,0,0,0,3610,3611,1,0,0,0,3611,
        3613,3,584,292,0,3612,3609,1,0,0,0,3612,3613,1,0,0,0,3613,217,1,
        0,0,0,3614,3615,5,442,0,0,3615,3616,3,550,275,0,3616,3617,5,134,
        0,0,3617,3624,3,584,292,0,3618,3619,3,696,348,0,3619,3620,5,1133,
        0,0,3620,3621,3,628,314,0,3621,3622,5,1134,0,0,3622,3625,1,0,0,0,
        3623,3625,7,46,0,0,3624,3618,1,0,0,0,3624,3623,1,0,0,0,3625,3628,
        1,0,0,0,3626,3627,5,190,0,0,3627,3629,3,688,344,0,3628,3626,1,0,
        0,0,3628,3629,1,0,0,0,3629,3632,1,0,0,0,3630,3631,5,99,0,0,3631,
        3633,3,294,147,0,3632,3630,1,0,0,0,3632,3633,1,0,0,0,3633,219,1,
        0,0,0,3634,3635,5,442,0,0,3635,3636,3,550,275,0,3636,3637,5,134,
        0,0,3637,3640,7,47,0,0,3638,3639,5,190,0,0,3639,3641,3,688,344,0,
        3640,3638,1,0,0,0,3640,3641,1,0,0,0,3641,3644,1,0,0,0,3642,3643,
        5,99,0,0,3643,3645,3,294,147,0,3644,3642,1,0,0,0,3644,3645,1,0,0,
        0,3645,221,1,0,0,0,3646,3647,5,442,0,0,3647,3648,3,550,275,0,3648,
        3649,5,361,0,0,3649,223,1,0,0,0,3650,3652,5,184,0,0,3651,3653,5,
        106,0,0,3652,3651,1,0,0,0,3652,3653,1,0,0,0,3653,3655,1,0,0,0,3654,
        3656,5,78,0,0,3655,3654,1,0,0,0,3655,3656,1,0,0,0,3656,3657,1,0,
        0,0,3657,3662,3,550,275,0,3658,3660,5,12,0,0,3659,3658,1,0,0,0,3659,
        3660,1,0,0,0,3660,3661,1,0,0,0,3661,3663,3,584,292,0,3662,3659,1,
        0,0,0,3662,3663,1,0,0,0,3663,3664,1,0,0,0,3664,3665,5,153,0,0,3665,
        3670,3,206,103,0,3666,3667,5,1135,0,0,3667,3669,3,206,103,0,3668,
        3666,1,0,0,0,3669,3672,1,0,0,0,3670,3668,1,0,0,0,3670,3671,1,0,0,
        0,3671,3675,1,0,0,0,3672,3670,1,0,0,0,3673,3674,5,190,0,0,3674,3676,
        3,688,344,0,3675,3673,1,0,0,0,3675,3676,1,0,0,0,3676,3678,1,0,0,
        0,3677,3679,3,228,114,0,3678,3677,1,0,0,0,3678,3679,1,0,0,0,3679,
        3681,1,0,0,0,3680,3682,3,292,146,0,3681,3680,1,0,0,0,3681,3682,1,
        0,0,0,3682,225,1,0,0,0,3683,3685,5,184,0,0,3684,3686,5,106,0,0,3685,
        3684,1,0,0,0,3685,3686,1,0,0,0,3686,3688,1,0,0,0,3687,3689,5,78,
        0,0,3688,3687,1,0,0,0,3688,3689,1,0,0,0,3689,3690,1,0,0,0,3690,3691,
        3,552,276,0,3691,3692,5,153,0,0,3692,3697,3,206,103,0,3693,3694,
        5,1135,0,0,3694,3696,3,206,103,0,3695,3693,1,0,0,0,3696,3699,1,0,
        0,0,3697,3695,1,0,0,0,3697,3698,1,0,0,0,3698,3702,1,0,0,0,3699,3697,
        1,0,0,0,3700,3701,5,190,0,0,3701,3703,3,688,344,0,3702,3700,1,0,
        0,0,3702,3703,1,0,0,0,3703,227,1,0,0,0,3704,3705,5,124,0,0,3705,
        3706,5,19,0,0,3706,3711,3,230,115,0,3707,3708,5,1135,0,0,3708,3710,
        3,230,115,0,3709,3707,1,0,0,0,3710,3713,1,0,0,0,3711,3709,1,0,0,
        0,3711,3712,1,0,0,0,3712,229,1,0,0,0,3713,3711,1,0,0,0,3714,3716,
        3,688,344,0,3715,3717,7,48,0,0,3716,3715,1,0,0,0,3716,3717,1,0,0,
        0,3717,231,1,0,0,0,3718,3723,3,234,117,0,3719,3720,5,1135,0,0,3720,
        3722,3,234,117,0,3721,3719,1,0,0,0,3722,3725,1,0,0,0,3723,3721,1,
        0,0,0,3723,3724,1,0,0,0,3724,233,1,0,0,0,3725,3723,1,0,0,0,3726,
        3730,3,236,118,0,3727,3729,3,242,121,0,3728,3727,1,0,0,0,3729,3732,
        1,0,0,0,3730,3728,1,0,0,0,3730,3731,1,0,0,0,3731,3745,1,0,0,0,3732,
        3730,1,0,0,0,3733,3734,5,1133,0,0,3734,3738,3,236,118,0,3735,3737,
        3,242,121,0,3736,3735,1,0,0,0,3737,3740,1,0,0,0,3738,3736,1,0,0,
        0,3738,3739,1,0,0,0,3739,3741,1,0,0,0,3740,3738,1,0,0,0,3741,3742,
        5,1134,0,0,3742,3745,1,0,0,0,3743,3745,3,260,130,0,3744,3726,1,0,
        0,0,3744,3733,1,0,0,0,3744,3743,1,0,0,0,3745,235,1,0,0,0,3746,3752,
        3,550,275,0,3747,3748,5,129,0,0,3748,3749,5,1133,0,0,3749,3750,3,
        616,308,0,3750,3751,5,1134,0,0,3751,3753,1,0,0,0,3752,3747,1,0,0,
        0,3752,3753,1,0,0,0,3753,3758,1,0,0,0,3754,3756,5,12,0,0,3755,3754,
        1,0,0,0,3755,3756,1,0,0,0,3756,3757,1,0,0,0,3757,3759,3,584,292,
        0,3758,3755,1,0,0,0,3758,3759,1,0,0,0,3759,3768,1,0,0,0,3760,3765,
        3,238,119,0,3761,3762,5,1135,0,0,3762,3764,3,238,119,0,3763,3761,
        1,0,0,0,3764,3767,1,0,0,0,3765,3763,1,0,0,0,3765,3766,1,0,0,0,3766,
        3769,1,0,0,0,3767,3765,1,0,0,0,3768,3760,1,0,0,0,3768,3769,1,0,0,
        0,3769,3784,1,0,0,0,3770,3771,5,1133,0,0,3771,3772,3,198,99,0,3772,
        3773,5,1134,0,0,3773,3775,1,0,0,0,3774,3776,5,12,0,0,3775,3774,1,
        0,0,0,3775,3776,1,0,0,0,3776,3777,1,0,0,0,3777,3778,3,584,292,0,
        3778,3784,1,0,0,0,3779,3780,5,1133,0,0,3780,3781,3,232,116,0,3781,
        3782,5,1134,0,0,3782,3784,1,0,0,0,3783,3746,1,0,0,0,3783,3770,1,
        0,0,0,3783,3779,1,0,0,0,3784,237,1,0,0,0,3785,3786,7,49,0,0,3786,
        3789,7,20,0,0,3787,3788,5,65,0,0,3788,3790,3,240,120,0,3789,3787,
        1,0,0,0,3789,3790,1,0,0,0,3790,3791,1,0,0,0,3791,3792,5,1133,0,0,
        3792,3793,3,616,308,0,3793,3794,5,1134,0,0,3794,239,1,0,0,0,3795,
        3801,5,90,0,0,3796,3797,5,124,0,0,3797,3801,5,19,0,0,3798,3799,5,
        73,0,0,3799,3801,5,19,0,0,3800,3795,1,0,0,0,3800,3796,1,0,0,0,3800,
        3798,1,0,0,0,3801,241,1,0,0,0,3802,3804,7,50,0,0,3803,3802,1,0,0,
        0,3803,3804,1,0,0,0,3804,3805,1,0,0,0,3805,3807,5,90,0,0,3806,3808,
        5,94,0,0,3807,3806,1,0,0,0,3807,3808,1,0,0,0,3808,3809,1,0,0,0,3809,
        3813,3,236,118,0,3810,3812,3,244,122,0,3811,3810,1,0,0,0,3812,3815,
        1,0,0,0,3813,3811,1,0,0,0,3813,3814,1,0,0,0,3814,3850,1,0,0,0,3815,
        3813,1,0,0,0,3816,3817,5,171,0,0,3817,3822,3,236,118,0,3818,3819,
        5,118,0,0,3819,3821,3,688,344,0,3820,3818,1,0,0,0,3821,3824,1,0,
        0,0,3822,3820,1,0,0,0,3822,3823,1,0,0,0,3823,3850,1,0,0,0,3824,3822,
        1,0,0,0,3825,3827,7,51,0,0,3826,3828,5,126,0,0,3827,3826,1,0,0,0,
        3827,3828,1,0,0,0,3828,3829,1,0,0,0,3829,3831,5,90,0,0,3830,3832,
        5,94,0,0,3831,3830,1,0,0,0,3831,3832,1,0,0,0,3832,3833,1,0,0,0,3833,
        3837,3,236,118,0,3834,3836,3,244,122,0,3835,3834,1,0,0,0,3836,3839,
        1,0,0,0,3837,3835,1,0,0,0,3837,3838,1,0,0,0,3838,3850,1,0,0,0,3839,
        3837,1,0,0,0,3840,3845,5,113,0,0,3841,3843,7,51,0,0,3842,3844,5,
        126,0,0,3843,3842,1,0,0,0,3843,3844,1,0,0,0,3844,3846,1,0,0,0,3845,
        3841,1,0,0,0,3845,3846,1,0,0,0,3846,3847,1,0,0,0,3847,3848,5,90,
        0,0,3848,3850,3,236,118,0,3849,3803,1,0,0,0,3849,3816,1,0,0,0,3849,
        3825,1,0,0,0,3849,3840,1,0,0,0,3850,243,1,0,0,0,3851,3852,5,118,
        0,0,3852,3859,3,688,344,0,3853,3854,5,187,0,0,3854,3855,5,1133,0,
        0,3855,3856,3,616,308,0,3856,3857,5,1134,0,0,3857,3859,1,0,0,0,3858,
        3851,1,0,0,0,3858,3853,1,0,0,0,3859,245,1,0,0,0,3860,3861,5,1133,
        0,0,3861,3862,3,250,125,0,3862,3863,5,1134,0,0,3863,3869,1,0,0,0,
        3864,3865,5,1133,0,0,3865,3866,3,246,123,0,3866,3867,5,1134,0,0,
        3867,3869,1,0,0,0,3868,3860,1,0,0,0,3868,3864,1,0,0,0,3869,247,1,
        0,0,0,3870,3871,5,1133,0,0,3871,3872,3,252,126,0,3872,3873,5,1134,
        0,0,3873,3879,1,0,0,0,3874,3875,5,1133,0,0,3875,3876,3,248,124,0,
        3876,3877,5,1134,0,0,3877,3879,1,0,0,0,3878,3870,1,0,0,0,3878,3874,
        1,0,0,0,3879,249,1,0,0,0,3880,3884,5,152,0,0,3881,3883,3,270,135,
        0,3882,3881,1,0,0,0,3883,3886,1,0,0,0,3884,3882,1,0,0,0,3884,3885,
        1,0,0,0,3885,3887,1,0,0,0,3886,3884,1,0,0,0,3887,3889,3,272,136,
        0,3888,3890,3,276,138,0,3889,3888,1,0,0,0,3889,3890,1,0,0,0,3890,
        3891,1,0,0,0,3891,3893,3,282,141,0,3892,3894,3,284,142,0,3893,3892,
        1,0,0,0,3893,3894,1,0,0,0,3894,3896,1,0,0,0,3895,3897,3,286,143,
        0,3896,3895,1,0,0,0,3896,3897,1,0,0,0,3897,3899,1,0,0,0,3898,3900,
        3,288,144,0,3899,3898,1,0,0,0,3899,3900,1,0,0,0,3900,3902,1,0,0,
        0,3901,3903,3,228,114,0,3902,3901,1,0,0,0,3902,3903,1,0,0,0,3903,
        3905,1,0,0,0,3904,3906,3,292,146,0,3905,3904,1,0,0,0,3905,3906,1,
        0,0,0,3906,3935,1,0,0,0,3907,3911,5,152,0,0,3908,3910,3,270,135,
        0,3909,3908,1,0,0,0,3910,3913,1,0,0,0,3911,3909,1,0,0,0,3911,3912,
        1,0,0,0,3912,3914,1,0,0,0,3913,3911,1,0,0,0,3914,3915,3,272,136,
        0,3915,3917,3,282,141,0,3916,3918,3,284,142,0,3917,3916,1,0,0,0,
        3917,3918,1,0,0,0,3918,3920,1,0,0,0,3919,3921,3,286,143,0,3920,3919,
        1,0,0,0,3920,3921,1,0,0,0,3921,3923,1,0,0,0,3922,3924,3,288,144,
        0,3923,3922,1,0,0,0,3923,3924,1,0,0,0,3924,3926,1,0,0,0,3925,3927,
        3,228,114,0,3926,3925,1,0,0,0,3926,3927,1,0,0,0,3927,3929,1,0,0,
        0,3928,3930,3,292,146,0,3929,3928,1,0,0,0,3929,3930,1,0,0,0,3930,
        3932,1,0,0,0,3931,3933,3,276,138,0,3932,3931,1,0,0,0,3932,3933,1,
        0,0,0,3933,3935,1,0,0,0,3934,3880,1,0,0,0,3934,3907,1,0,0,0,3935,
        251,1,0,0,0,3936,3940,5,152,0,0,3937,3939,3,270,135,0,3938,3937,
        1,0,0,0,3939,3942,1,0,0,0,3940,3938,1,0,0,0,3940,3941,1,0,0,0,3941,
        3943,1,0,0,0,3942,3940,1,0,0,0,3943,3944,3,272,136,0,3944,3946,3,
        282,141,0,3945,3947,3,284,142,0,3946,3945,1,0,0,0,3946,3947,1,0,
        0,0,3947,3949,1,0,0,0,3948,3950,3,286,143,0,3949,3948,1,0,0,0,3949,
        3950,1,0,0,0,3950,3952,1,0,0,0,3951,3953,3,288,144,0,3952,3951,1,
        0,0,0,3952,3953,1,0,0,0,3953,3955,1,0,0,0,3954,3956,3,228,114,0,
        3955,3954,1,0,0,0,3955,3956,1,0,0,0,3956,3958,1,0,0,0,3957,3959,
        3,292,146,0,3958,3957,1,0,0,0,3958,3959,1,0,0,0,3959,3961,1,0,0,
        0,3960,3962,3,256,128,0,3961,3960,1,0,0,0,3961,3962,1,0,0,0,3962,
        253,1,0,0,0,3963,3965,5,180,0,0,3964,3966,7,44,0,0,3965,3964,1,0,
        0,0,3965,3966,1,0,0,0,3966,3967,1,0,0,0,3967,3968,3,248,124,0,3968,
        255,1,0,0,0,3969,3971,5,180,0,0,3970,3972,7,44,0,0,3971,3970,1,0,
        0,0,3971,3972,1,0,0,0,3972,3975,1,0,0,0,3973,3976,3,252,126,0,3974,
        3976,3,248,124,0,3975,3973,1,0,0,0,3975,3974,1,0,0,0,3976,257,1,
        0,0,0,3977,3992,5,94,0,0,3978,3993,3,252,126,0,3979,3993,3,248,124,
        0,3980,3983,5,1133,0,0,3981,3984,3,252,126,0,3982,3984,3,248,124,
        0,3983,3981,1,0,0,0,3983,3982,1,0,0,0,3984,3985,1,0,0,0,3985,3990,
        5,1134,0,0,3986,3988,5,12,0,0,3987,3986,1,0,0,0,3987,3988,1,0,0,
        0,3988,3989,1,0,0,0,3989,3991,3,584,292,0,3990,3987,1,0,0,0,3990,
        3991,1,0,0,0,3991,3993,1,0,0,0,3992,3978,1,0,0,0,3992,3979,1,0,0,
        0,3992,3980,1,0,0,0,3993,259,1,0,0,0,3994,3995,5,278,0,0,3995,3996,
        5,1133,0,0,3996,3997,5,1148,0,0,3997,3998,5,1135,0,0,3998,3999,5,
        1148,0,0,3999,4000,5,365,0,0,4000,4001,5,1133,0,0,4001,4002,3,262,
        131,0,4002,4003,5,1134,0,0,4003,4008,5,1134,0,0,4004,4006,5,12,0,
        0,4005,4004,1,0,0,0,4005,4006,1,0,0,0,4006,4007,1,0,0,0,4007,4009,
        3,584,292,0,4008,4005,1,0,0,0,4008,4009,1,0,0,0,4009,261,1,0,0,0,
        4010,4015,3,264,132,0,4011,4012,5,1135,0,0,4012,4014,3,264,132,0,
        4013,4011,1,0,0,0,4014,4017,1,0,0,0,4015,4013,1,0,0,0,4015,4016,
        1,0,0,0,4016,263,1,0,0,0,4017,4015,1,0,0,0,4018,4035,3,556,278,0,
        4019,4020,5,65,0,0,4020,4036,5,284,0,0,4021,4033,3,604,302,0,4022,
        4023,5,285,0,0,4023,4025,5,1148,0,0,4024,4026,3,266,133,0,4025,4024,
        1,0,0,0,4025,4026,1,0,0,0,4026,4028,1,0,0,0,4027,4029,3,268,134,
        0,4028,4027,1,0,0,0,4028,4029,1,0,0,0,4029,4034,1,0,0,0,4030,4031,
        5,60,0,0,4031,4032,5,285,0,0,4032,4034,5,1148,0,0,4033,4022,1,0,
        0,0,4033,4030,1,0,0,0,4034,4036,1,0,0,0,4035,4019,1,0,0,0,4035,4021,
        1,0,0,0,4036,4048,1,0,0,0,4037,4039,5,283,0,0,4038,4040,5,285,0,
        0,4039,4038,1,0,0,0,4039,4040,1,0,0,0,4040,4041,1,0,0,0,4041,4042,
        5,1148,0,0,4042,4043,5,365,0,0,4043,4044,5,1133,0,0,4044,4045,3,
        262,131,0,4045,4046,5,1134,0,0,4046,4048,1,0,0,0,4047,4018,1,0,0,
        0,4047,4037,1,0,0,0,4048,265,1,0,0,0,4049,4054,5,116,0,0,4050,4054,
        5,411,0,0,4051,4052,5,42,0,0,4052,4054,3,634,317,0,4053,4049,1,0,
        0,0,4053,4050,1,0,0,0,4053,4051,1,0,0,0,4054,4055,1,0,0,0,4055,4056,
        5,118,0,0,4056,4057,5,55,0,0,4057,267,1,0,0,0,4058,4063,5,116,0,
        0,4059,4063,5,411,0,0,4060,4061,5,42,0,0,4061,4063,3,634,317,0,4062,
        4058,1,0,0,0,4062,4059,1,0,0,0,4062,4060,1,0,0,0,4063,4064,1,0,0,
        0,4064,4065,5,118,0,0,4065,4066,5,411,0,0,4066,269,1,0,0,0,4067,
        4076,7,52,0,0,4068,4076,5,75,0,0,4069,4076,5,171,0,0,4070,4076,5,
        166,0,0,4071,4076,5,164,0,0,4072,4076,5,625,0,0,4073,4076,7,53,0,
        0,4074,4076,5,165,0,0,4075,4067,1,0,0,0,4075,4068,1,0,0,0,4075,4069,
        1,0,0,0,4075,4070,1,0,0,0,4075,4071,1,0,0,0,4075,4072,1,0,0,0,4075,
        4073,1,0,0,0,4075,4074,1,0,0,0,4076,271,1,0,0,0,4077,4080,5,1117,
        0,0,4078,4080,3,274,137,0,4079,4077,1,0,0,0,4079,4078,1,0,0,0,4080,
        4085,1,0,0,0,4081,4082,5,1135,0,0,4082,4084,3,274,137,0,4083,4081,
        1,0,0,0,4084,4087,1,0,0,0,4085,4083,1,0,0,0,4085,4086,1,0,0,0,4086,
        273,1,0,0,0,4087,4085,1,0,0,0,4088,4089,3,548,274,0,4089,4090,5,
        1132,0,0,4090,4091,5,1117,0,0,4091,4118,1,0,0,0,4092,4097,3,556,
        278,0,4093,4095,5,12,0,0,4094,4093,1,0,0,0,4094,4095,1,0,0,0,4095,
        4096,1,0,0,0,4096,4098,3,584,292,0,4097,4094,1,0,0,0,4097,4098,1,
        0,0,0,4098,4118,1,0,0,0,4099,4104,3,648,324,0,4100,4102,5,12,0,0,
        4101,4100,1,0,0,0,4101,4102,1,0,0,0,4102,4103,1,0,0,0,4103,4105,
        3,584,292,0,4104,4101,1,0,0,0,4104,4105,1,0,0,0,4105,4118,1,0,0,
        0,4106,4107,5,1159,0,0,4107,4109,5,1108,0,0,4108,4106,1,0,0,0,4108,
        4109,1,0,0,0,4109,4110,1,0,0,0,4110,4115,3,688,344,0,4111,4113,5,
        12,0,0,4112,4111,1,0,0,0,4112,4113,1,0,0,0,4113,4114,1,0,0,0,4114,
        4116,3,584,292,0,4115,4112,1,0,0,0,4115,4116,1,0,0,0,4116,4118,1,
        0,0,0,4117,4088,1,0,0,0,4117,4092,1,0,0,0,4117,4099,1,0,0,0,4117,
        4108,1,0,0,0,4118,275,1,0,0,0,4119,4120,5,87,0,0,4120,4125,3,208,
        104,0,4121,4122,5,1135,0,0,4122,4124,3,208,104,0,4123,4121,1,0,0,
        0,4124,4127,1,0,0,0,4125,4123,1,0,0,0,4125,4126,1,0,0,0,4126,4156,
        1,0,0,0,4127,4125,1,0,0,0,4128,4129,5,87,0,0,4129,4130,5,400,0,0,
        4130,4156,5,1148,0,0,4131,4132,5,87,0,0,4132,4133,5,127,0,0,4133,
        4137,5,1148,0,0,4134,4135,5,25,0,0,4135,4136,5,153,0,0,4136,4138,
        3,568,284,0,4137,4134,1,0,0,0,4137,4138,1,0,0,0,4138,4145,1,0,0,
        0,4139,4141,7,41,0,0,4140,4142,3,278,139,0,4141,4140,1,0,0,0,4142,
        4143,1,0,0,0,4143,4141,1,0,0,0,4143,4144,1,0,0,0,4144,4146,1,0,0,
        0,4145,4139,1,0,0,0,4145,4146,1,0,0,0,4146,4153,1,0,0,0,4147,4149,
        5,101,0,0,4148,4150,3,280,140,0,4149,4148,1,0,0,0,4150,4151,1,0,
        0,0,4151,4149,1,0,0,0,4151,4152,1,0,0,0,4152,4154,1,0,0,0,4153,4147,
        1,0,0,0,4153,4154,1,0,0,0,4154,4156,1,0,0,0,4155,4119,1,0,0,0,4155,
        4128,1,0,0,0,4155,4131,1,0,0,0,4156,277,1,0,0,0,4157,4158,5,173,
        0,0,4158,4159,5,19,0,0,4159,4170,5,1148,0,0,4160,4162,5,122,0,0,
        4161,4160,1,0,0,0,4161,4162,1,0,0,0,4162,4163,1,0,0,0,4163,4164,
        5,56,0,0,4164,4165,5,19,0,0,4165,4170,5,1148,0,0,4166,4167,5,58,
        0,0,4167,4168,5,19,0,0,4168,4170,5,1148,0,0,4169,4157,1,0,0,0,4169,
        4161,1,0,0,0,4169,4166,1,0,0,0,4170,279,1,0,0,0,4171,4172,5,169,
        0,0,4172,4173,5,19,0,0,4173,4178,5,1148,0,0,4174,4175,5,173,0,0,
        4175,4176,5,19,0,0,4176,4178,5,1148,0,0,4177,4171,1,0,0,0,4177,4174,
        1,0,0,0,4178,281,1,0,0,0,4179,4180,5,68,0,0,4180,4182,3,232,116,
        0,4181,4179,1,0,0,0,4181,4182,1,0,0,0,4182,4185,1,0,0,0,4183,4184,
        5,190,0,0,4184,4186,3,688,344,0,4185,4183,1,0,0,0,4185,4186,1,0,
        0,0,4186,283,1,0,0,0,4187,4188,5,73,0,0,4188,4189,5,19,0,0,4189,
        4194,3,290,145,0,4190,4191,5,1135,0,0,4191,4193,3,290,145,0,4192,
        4190,1,0,0,0,4193,4196,1,0,0,0,4194,4192,1,0,0,0,4194,4195,1,0,0,
        0,4195,4199,1,0,0,0,4196,4194,1,0,0,0,4197,4198,5,192,0,0,4198,4200,
        5,598,0,0,4199,4197,1,0,0,0,4199,4200,1,0,0,0,4200,285,1,0,0,0,4201,
        4202,5,74,0,0,4202,4203,3,688,344,0,4203,287,1,0,0,0,4204,4205,5,
        676,0,0,4205,4206,3,666,333,0,4206,4207,5,12,0,0,4207,4208,5,1133,
        0,0,4208,4209,3,664,332,0,4209,4219,5,1134,0,0,4210,4211,5,1135,
        0,0,4211,4212,3,666,333,0,4212,4213,5,12,0,0,4213,4214,5,1133,0,
        0,4214,4215,3,664,332,0,4215,4216,5,1134,0,0,4216,4218,1,0,0,0,4217,
        4210,1,0,0,0,4218,4221,1,0,0,0,4219,4217,1,0,0,0,4219,4220,1,0,0,
        0,4220,289,1,0,0,0,4221,4219,1,0,0,0,4222,4224,3,688,344,0,4223,
        4225,7,48,0,0,4224,4223,1,0,0,0,4224,4225,1,0,0,0,4225,291,1,0,0,
        0,4226,4237,5,99,0,0,4227,4228,3,294,147,0,4228,4229,5,1135,0,0,
        4229,4231,1,0,0,0,4230,4227,1,0,0,0,4230,4231,1,0,0,0,4231,4232,
        1,0,0,0,4232,4238,3,294,147,0,4233,4234,3,294,147,0,4234,4235,5,
        532,0,0,4235,4236,3,294,147,0,4236,4238,1,0,0,0,4237,4230,1,0,0,
        0,4237,4233,1,0,0,0,4238,293,1,0,0,0,4239,4243,3,590,295,0,4240,
        4243,3,566,283,0,4241,4243,3,586,293,0,4242,4239,1,0,0,0,4242,4240,
        1,0,0,0,4242,4241,1,0,0,0,4243,295,1,0,0,0,4244,4245,5,629,0,0,4245,
        4254,5,653,0,0,4246,4251,3,318,159,0,4247,4248,5,1135,0,0,4248,4250,
        3,318,159,0,4249,4247,1,0,0,0,4250,4253,1,0,0,0,4251,4249,1,0,0,
        0,4251,4252,1,0,0,0,4252,4255,1,0,0,0,4253,4251,1,0,0,0,4254,4246,
        1,0,0,0,4254,4255,1,0,0,0,4255,297,1,0,0,0,4256,4258,5,344,0,0,4257,
        4259,5,678,0,0,4258,4257,1,0,0,0,4258,4259,1,0,0,0,4259,299,1,0,
        0,0,4260,4262,5,369,0,0,4261,4263,5,678,0,0,4262,4261,1,0,0,0,4262,
        4263,1,0,0,0,4263,4269,1,0,0,0,4264,4266,5,10,0,0,4265,4267,5,521,
        0,0,4266,4265,1,0,0,0,4266,4267,1,0,0,0,4267,4268,1,0,0,0,4268,4270,
        5,353,0,0,4269,4264,1,0,0,0,4269,4270,1,0,0,0,4270,4275,1,0,0,0,
        4271,4273,5,521,0,0,4272,4271,1,0,0,0,4272,4273,1,0,0,0,4273,4274,
        1,0,0,0,4274,4276,5,138,0,0,4275,4272,1,0,0,0,4275,4276,1,0,0,0,
        4276,301,1,0,0,0,4277,4279,5,597,0,0,4278,4280,5,678,0,0,4279,4278,
        1,0,0,0,4279,4280,1,0,0,0,4280,4286,1,0,0,0,4281,4283,5,10,0,0,4282,
        4284,5,521,0,0,4283,4282,1,0,0,0,4283,4284,1,0,0,0,4284,4285,1,0,
        0,0,4285,4287,5,353,0,0,4286,4281,1,0,0,0,4286,4287,1,0,0,0,4287,
        4292,1,0,0,0,4288,4290,5,521,0,0,4289,4288,1,0,0,0,4289,4290,1,0,
        0,0,4290,4291,1,0,0,0,4291,4293,5,138,0,0,4292,4289,1,0,0,0,4292,
        4293,1,0,0,0,4293,303,1,0,0,0,4294,4295,5,604,0,0,4295,4296,3,584,
        292,0,4296,305,1,0,0,0,4297,4299,5,597,0,0,4298,4300,5,678,0,0,4299,
        4298,1,0,0,0,4299,4300,1,0,0,0,4300,4301,1,0,0,0,4301,4303,5,175,
        0,0,4302,4304,5,604,0,0,4303,4302,1,0,0,0,4303,4304,1,0,0,0,4304,
        4305,1,0,0,0,4305,4306,3,584,292,0,4306,307,1,0,0,0,4307,4308,5,
        138,0,0,4308,4309,5,604,0,0,4309,4310,3,584,292,0,4310,309,1,0,0,
        0,4311,4312,5,103,0,0,4312,4313,7,54,0,0,4313,4318,3,320,160,0,4314,
        4315,5,1135,0,0,4315,4317,3,320,160,0,4316,4314,1,0,0,0,4317,4320,
        1,0,0,0,4318,4316,1,0,0,0,4318,4319,1,0,0,0,4319,4322,1,0,0,0,4320,
        4318,1,0,0,0,4321,4323,3,646,323,0,4322,4321,1,0,0,0,4322,4323,1,
        0,0,0,4323,311,1,0,0,0,4324,4325,5,182,0,0,4325,4326,5,742,0,0,4326,
        313,1,0,0,0,4327,4328,5,153,0,0,4328,4329,5,340,0,0,4329,4330,5,
        1124,0,0,4330,4331,7,24,0,0,4331,315,1,0,0,0,4332,4334,5,153,0,0,
        4333,4335,7,55,0,0,4334,4333,1,0,0,0,4334,4335,1,0,0,0,4335,4336,
        1,0,0,0,4336,4337,5,653,0,0,4337,4342,3,324,162,0,4338,4339,5,1135,
        0,0,4339,4341,3,324,162,0,4340,4338,1,0,0,0,4341,4344,1,0,0,0,4342,
        4340,1,0,0,0,4342,4343,1,0,0,0,4343,317,1,0,0,0,4344,4342,1,0,0,
        0,4345,4346,5,192,0,0,4346,4347,5,377,0,0,4347,4353,5,616,0,0,4348,
        4349,5,134,0,0,4349,4353,5,193,0,0,4350,4351,5,134,0,0,4351,4353,
        5,538,0,0,4352,4345,1,0,0,0,4352,4348,1,0,0,0,4352,4350,1,0,0,0,
        4353,319,1,0,0,0,4354,4359,3,550,275,0,4355,4357,5,12,0,0,4356,4355,
        1,0,0,0,4356,4357,1,0,0,0,4357,4358,1,0,0,0,4358,4360,3,584,292,
        0,4359,4356,1,0,0,0,4359,4360,1,0,0,0,4360,4361,1,0,0,0,4361,4362,
        3,322,161,0,4362,321,1,0,0,0,4363,4365,5,134,0,0,4364,4366,5,474,
        0,0,4365,4364,1,0,0,0,4365,4366,1,0,0,0,4366,4372,1,0,0,0,4367,4369,
        5,106,0,0,4368,4367,1,0,0,0,4368,4369,1,0,0,0,4369,4370,1,0,0,0,
        4370,4372,5,193,0,0,4371,4363,1,0,0,0,4371,4368,1,0,0,0,4372,323,
        1,0,0,0,4373,4374,5,464,0,0,4374,4375,5,472,0,0,4375,4381,3,326,
        163,0,4376,4377,5,134,0,0,4377,4381,5,193,0,0,4378,4379,5,134,0,
        0,4379,4381,5,538,0,0,4380,4373,1,0,0,0,4380,4376,1,0,0,0,4380,4378,
        1,0,0,0,4381,325,1,0,0,0,4382,4383,5,799,0,0,4383,4390,5,134,0,0,
        4384,4385,5,134,0,0,4385,4390,5,800,0,0,4386,4387,5,134,0,0,4387,
        4390,5,801,0,0,4388,4390,5,802,0,0,4389,4382,1,0,0,0,4389,4384,1,
        0,0,0,4389,4386,1,0,0,0,4389,4388,1,0,0,0,4390,327,1,0,0,0,4391,
        4392,5,24,0,0,4392,4393,5,477,0,0,4393,4394,5,175,0,0,4394,4399,
        3,346,173,0,4395,4396,5,1135,0,0,4396,4398,3,346,173,0,4397,4395,
        1,0,0,0,4398,4401,1,0,0,0,4399,4397,1,0,0,0,4399,4400,1,0,0,0,4400,
        4403,1,0,0,0,4401,4399,1,0,0,0,4402,4404,3,354,177,0,4403,4402,1,
        0,0,0,4403,4404,1,0,0,0,4404,329,1,0,0,0,4405,4406,5,24,0,0,4406,
        4407,5,588,0,0,4407,4408,5,429,0,0,4408,4413,3,356,178,0,4409,4410,
        5,1135,0,0,4410,4412,3,356,178,0,4411,4409,1,0,0,0,4412,4415,1,0,
        0,0,4413,4411,1,0,0,0,4413,4414,1,0,0,0,4414,331,1,0,0,0,4415,4413,
        1,0,0,0,4416,4417,5,132,0,0,4417,4418,7,56,0,0,4418,4423,5,476,0,
        0,4419,4420,5,175,0,0,4420,4424,5,1148,0,0,4421,4422,5,15,0,0,4422,
        4424,5,1148,0,0,4423,4419,1,0,0,0,4423,4421,1,0,0,0,4424,333,1,0,
        0,0,4425,4426,5,589,0,0,4426,4427,5,477,0,0,4427,335,1,0,0,0,4428,
        4429,5,589,0,0,4429,4431,5,614,0,0,4430,4432,5,6,0,0,4431,4430,1,
        0,0,0,4431,4432,1,0,0,0,4432,4434,1,0,0,0,4433,4435,3,354,177,0,
        4434,4433,1,0,0,0,4434,4435,1,0,0,0,4435,337,1,0,0,0,4436,4437,5,
        629,0,0,4437,4446,5,614,0,0,4438,4443,3,360,180,0,4439,4440,5,1135,
        0,0,4440,4442,3,360,180,0,4441,4439,1,0,0,0,4442,4445,1,0,0,0,4443,
        4441,1,0,0,0,4443,4444,1,0,0,0,4444,4447,1,0,0,0,4445,4443,1,0,0,
        0,4446,4438,1,0,0,0,4446,4447,1,0,0,0,4447,4450,1,0,0,0,4448,4449,
        5,663,0,0,4449,4451,3,362,181,0,4450,4448,1,0,0,0,4450,4451,1,0,
        0,0,4451,4455,1,0,0,0,4452,4454,3,364,182,0,4453,4452,1,0,0,0,4454,
        4457,1,0,0,0,4455,4453,1,0,0,0,4455,4456,1,0,0,0,4456,4459,1,0,0,
        0,4457,4455,1,0,0,0,4458,4460,3,354,177,0,4459,4458,1,0,0,0,4459,
        4460,1,0,0,0,4460,339,1,0,0,0,4461,4462,5,635,0,0,4462,4471,5,614,
        0,0,4463,4468,3,360,180,0,4464,4465,5,1135,0,0,4465,4467,3,360,180,
        0,4466,4464,1,0,0,0,4467,4470,1,0,0,0,4468,4466,1,0,0,0,4468,4469,
        1,0,0,0,4469,4472,1,0,0,0,4470,4468,1,0,0,0,4471,4463,1,0,0,0,4471,
        4472,1,0,0,0,4472,341,1,0,0,0,4473,4474,5,629,0,0,4474,4475,5,441,
        0,0,4475,343,1,0,0,0,4476,4477,5,635,0,0,4477,4478,5,441,0,0,4478,
        345,1,0,0,0,4479,4480,3,348,174,0,4480,4481,5,1124,0,0,4481,4482,
        5,1148,0,0,4482,4509,1,0,0,0,4483,4484,3,350,175,0,4484,4485,5,1124,
        0,0,4485,4486,3,590,295,0,4486,4509,1,0,0,0,4487,4488,3,352,176,
        0,4488,4489,5,1124,0,0,4489,4490,7,24,0,0,4490,4509,1,0,0,0,4491,
        4492,5,481,0,0,4492,4493,5,1124,0,0,4493,4509,5,1151,0,0,4494,4495,
        5,449,0,0,4495,4496,5,1124,0,0,4496,4505,5,1133,0,0,4497,4502,3,
        584,292,0,4498,4499,5,1135,0,0,4499,4501,3,584,292,0,4500,4498,1,
        0,0,0,4501,4504,1,0,0,0,4502,4500,1,0,0,0,4502,4503,1,0,0,0,4503,
        4506,1,0,0,0,4504,4502,1,0,0,0,4505,4497,1,0,0,0,4505,4506,1,0,0,
        0,4506,4507,1,0,0,0,4507,4509,5,1134,0,0,4508,4479,1,0,0,0,4508,
        4483,1,0,0,0,4508,4487,1,0,0,0,4508,4491,1,0,0,0,4508,4494,1,0,0,
        0,4509,347,1,0,0,0,4510,4511,7,57,0,0,4511,349,1,0,0,0,4512,4513,
        7,58,0,0,4513,351,1,0,0,0,4514,4515,7,59,0,0,4515,353,1,0,0,0,4516,
        4517,5,65,0,0,4517,4518,5,355,0,0,4518,4519,5,1148,0,0,4519,355,
        1,0,0,0,4520,4521,5,581,0,0,4521,4522,5,1124,0,0,4522,4523,5,1133,
        0,0,4523,4524,3,616,308,0,4524,4525,5,1134,0,0,4525,4570,1,0,0,0,
        4526,4527,5,583,0,0,4527,4528,5,1124,0,0,4528,4529,5,1133,0,0,4529,
        4530,3,616,308,0,4530,4531,5,1134,0,0,4531,4570,1,0,0,0,4532,4533,
        5,582,0,0,4533,4534,5,1124,0,0,4534,4535,5,1133,0,0,4535,4536,3,
        620,310,0,4536,4537,5,1134,0,0,4537,4570,1,0,0,0,4538,4539,5,584,
        0,0,4539,4540,5,1124,0,0,4540,4541,5,1133,0,0,4541,4542,3,620,310,
        0,4542,4543,5,1134,0,0,4543,4570,1,0,0,0,4544,4545,5,586,0,0,4545,
        4546,5,1124,0,0,4546,4547,5,1133,0,0,4547,4548,3,630,315,0,4548,
        4549,5,1134,0,0,4549,4570,1,0,0,0,4550,4551,5,587,0,0,4551,4552,
        5,1124,0,0,4552,4553,5,1133,0,0,4553,4554,3,630,315,0,4554,4555,
        5,1134,0,0,4555,4570,1,0,0,0,4556,4557,5,585,0,0,4557,4558,5,1124,
        0,0,4558,4559,5,1133,0,0,4559,4564,3,358,179,0,4560,4561,5,1135,
        0,0,4561,4563,3,358,179,0,4562,4560,1,0,0,0,4563,4566,1,0,0,0,4564,
        4562,1,0,0,0,4564,4565,1,0,0,0,4565,4567,1,0,0,0,4566,4564,1,0,0,
        0,4567,4568,5,1134,0,0,4568,4570,1,0,0,0,4569,4520,1,0,0,0,4569,
        4526,1,0,0,0,4569,4532,1,0,0,0,4569,4538,1,0,0,0,4569,4544,1,0,0,
        0,4569,4550,1,0,0,0,4569,4556,1,0,0,0,4570,357,1,0,0,0,4571,4572,
        5,1133,0,0,4572,4573,3,550,275,0,4573,4574,5,1135,0,0,4574,4575,
        3,550,275,0,4575,4576,5,1134,0,0,4576,359,1,0,0,0,4577,4578,7,60,
        0,0,4578,361,1,0,0,0,4579,4580,7,61,0,0,4580,4581,5,1124,0,0,4581,
        4598,3,366,183,0,4582,4583,5,483,0,0,4583,4584,5,1124,0,0,4584,4585,
        5,1148,0,0,4585,4586,5,1135,0,0,4586,4587,5,484,0,0,4587,4588,5,
        1124,0,0,4588,4598,3,590,295,0,4589,4590,5,575,0,0,4590,4591,5,1124,
        0,0,4591,4592,5,1148,0,0,4592,4593,5,1135,0,0,4593,4594,5,576,0,
        0,4594,4595,5,1124,0,0,4595,4598,3,590,295,0,4596,4598,5,623,0,0,
        4597,4579,1,0,0,0,4597,4582,1,0,0,0,4597,4589,1,0,0,0,4597,4596,
        1,0,0,0,4598,363,1,0,0,0,4599,4600,5,665,0,0,4600,4601,5,1124,0,
        0,4601,4612,5,1148,0,0,4602,4603,5,551,0,0,4603,4604,5,1124,0,0,
        4604,4612,5,1148,0,0,4605,4606,5,391,0,0,4606,4607,5,1124,0,0,4607,
        4612,5,1148,0,0,4608,4609,5,555,0,0,4609,4610,5,1124,0,0,4610,4612,
        5,1148,0,0,4611,4599,1,0,0,0,4611,4602,1,0,0,0,4611,4605,1,0,0,0,
        4611,4608,1,0,0,0,4612,365,1,0,0,0,4613,4618,3,576,288,0,4614,4615,
        5,1135,0,0,4615,4617,3,576,288,0,4616,4614,1,0,0,0,4617,4620,1,0,
        0,0,4618,4616,1,0,0,0,4618,4619,1,0,0,0,4619,4623,1,0,0,0,4620,4618,
        1,0,0,0,4621,4623,5,1148,0,0,4622,4613,1,0,0,0,4622,4621,1,0,0,0,
        4623,367,1,0,0,0,4624,4625,5,681,0,0,4625,4626,7,62,0,0,4626,4628,
        3,578,289,0,4627,4629,7,63,0,0,4628,4627,1,0,0,0,4628,4629,1,0,0,
        0,4629,369,1,0,0,0,4630,4631,5,681,0,0,4631,4632,5,407,0,0,4632,
        4638,3,578,289,0,4633,4636,5,643,0,0,4634,4635,5,65,0,0,4635,4637,
        5,509,0,0,4636,4634,1,0,0,0,4636,4637,1,0,0,0,4637,4639,1,0,0,0,
        4638,4633,1,0,0,0,4638,4639,1,0,0,0,4639,371,1,0,0,0,4640,4641,5,
        681,0,0,4641,4642,5,560,0,0,4642,4643,3,578,289,0,4643,373,1,0,0,
        0,4644,4645,5,681,0,0,4645,4646,5,369,0,0,4646,4649,3,578,289,0,
        4647,4648,5,536,0,0,4648,4650,5,553,0,0,4649,4647,1,0,0,0,4649,4650,
        1,0,0,0,4650,375,1,0,0,0,4651,4652,5,681,0,0,4652,4653,5,597,0,0,
        4653,4654,3,578,289,0,4654,377,1,0,0,0,4655,4656,5,681,0,0,4656,
        4659,5,570,0,0,4657,4658,5,32,0,0,4658,4660,3,578,289,0,4659,4657,
        1,0,0,0,4659,4660,1,0,0,0,4660,379,1,0,0,0,4661,4662,5,560,0,0,4662,
        4663,3,584,292,0,4663,4666,5,68,0,0,4664,4667,5,1148,0,0,4665,4667,
        5,1159,0,0,4666,4664,1,0,0,0,4666,4665,1,0,0,0,4667,381,1,0,0,0,
        4668,4669,5,708,0,0,4669,4672,3,584,292,0,4670,4671,5,187,0,0,4671,
        4673,3,632,316,0,4672,4670,1,0,0,0,4672,4673,1,0,0,0,4673,383,1,
        0,0,0,4674,4675,7,64,0,0,4675,4676,5,560,0,0,4676,4677,3,584,292,
        0,4677,385,1,0,0,0,4678,4681,3,388,194,0,4679,4681,3,4,2,0,4680,
        4678,1,0,0,0,4680,4679,1,0,0,0,4681,387,1,0,0,0,4682,4683,3,584,
        292,0,4683,4684,5,1144,0,0,4684,4686,1,0,0,0,4685,4682,1,0,0,0,4685,
        4686,1,0,0,0,4686,4687,1,0,0,0,4687,4693,5,344,0,0,4688,4689,3,408,
        204,0,4689,4690,5,1136,0,0,4690,4692,1,0,0,0,4691,4688,1,0,0,0,4692,
        4695,1,0,0,0,4693,4691,1,0,0,0,4693,4694,1,0,0,0,4694,4701,1,0,0,
        0,4695,4693,1,0,0,0,4696,4697,3,410,205,0,4697,4698,5,1136,0,0,4698,
        4700,1,0,0,0,4699,4696,1,0,0,0,4700,4703,1,0,0,0,4701,4699,1,0,0,
        0,4701,4702,1,0,0,0,4702,4709,1,0,0,0,4703,4701,1,0,0,0,4704,4705,
        3,412,206,0,4705,4706,5,1136,0,0,4706,4708,1,0,0,0,4707,4704,1,0,
        0,0,4708,4711,1,0,0,0,4709,4707,1,0,0,0,4709,4710,1,0,0,0,4710,4717,
        1,0,0,0,4711,4709,1,0,0,0,4712,4713,3,414,207,0,4713,4714,5,1136,
        0,0,4714,4716,1,0,0,0,4715,4712,1,0,0,0,4716,4719,1,0,0,0,4717,4715,
        1,0,0,0,4717,4718,1,0,0,0,4718,4723,1,0,0,0,4719,4717,1,0,0,0,4720,
        4722,3,418,209,0,4721,4720,1,0,0,0,4722,4725,1,0,0,0,4723,4721,1,
        0,0,0,4723,4724,1,0,0,0,4724,4726,1,0,0,0,4725,4723,1,0,0,0,4726,
        4728,5,407,0,0,4727,4729,3,584,292,0,4728,4727,1,0,0,0,4728,4729,
        1,0,0,0,4729,389,1,0,0,0,4730,4733,5,22,0,0,4731,4734,3,584,292,
        0,4732,4734,3,688,344,0,4733,4731,1,0,0,0,4733,4732,1,0,0,0,4733,
        4734,1,0,0,0,4734,4736,1,0,0,0,4735,4737,3,420,210,0,4736,4735,1,
        0,0,0,4737,4738,1,0,0,0,4738,4736,1,0,0,0,4738,4739,1,0,0,0,4739,
        4746,1,0,0,0,4740,4742,5,53,0,0,4741,4743,3,418,209,0,4742,4741,
        1,0,0,0,4743,4744,1,0,0,0,4744,4742,1,0,0,0,4744,4745,1,0,0,0,4745,
        4747,1,0,0,0,4746,4740,1,0,0,0,4746,4747,1,0,0,0,4747,4748,1,0,0,
        0,4748,4749,5,407,0,0,4749,4750,5,22,0,0,4750,391,1,0,0,0,4751,4752,
        5,77,0,0,4752,4753,3,688,344,0,4753,4755,5,174,0,0,4754,4756,3,418,
        209,0,4755,4754,1,0,0,0,4756,4757,1,0,0,0,4757,4755,1,0,0,0,4757,
        4758,1,0,0,0,4758,4762,1,0,0,0,4759,4761,3,422,211,0,4760,4759,1,
        0,0,0,4761,4764,1,0,0,0,4762,4760,1,0,0,0,4762,4763,1,0,0,0,4763,
        4771,1,0,0,0,4764,4762,1,0,0,0,4765,4767,5,53,0,0,4766,4768,3,418,
        209,0,4767,4766,1,0,0,0,4768,4769,1,0,0,0,4769,4767,1,0,0,0,4769,
        4770,1,0,0,0,4770,4772,1,0,0,0,4771,4765,1,0,0,0,4771,4772,1,0,0,
        0,4772,4773,1,0,0,0,4773,4774,5,407,0,0,4774,4775,5,77,0,0,4775,
        393,1,0,0,0,4776,4777,5,89,0,0,4777,4778,3,584,292,0,4778,395,1,
        0,0,0,4779,4780,5,96,0,0,4780,4781,3,584,292,0,4781,397,1,0,0,0,
        4782,4783,3,584,292,0,4783,4784,5,1144,0,0,4784,4786,1,0,0,0,4785,
        4782,1,0,0,0,4785,4786,1,0,0,0,4786,4787,1,0,0,0,4787,4789,5,105,
        0,0,4788,4790,3,418,209,0,4789,4788,1,0,0,0,4790,4791,1,0,0,0,4791,
        4789,1,0,0,0,4791,4792,1,0,0,0,4792,4793,1,0,0,0,4793,4794,5,407,
        0,0,4794,4796,5,105,0,0,4795,4797,3,584,292,0,4796,4795,1,0,0,0,
        4796,4797,1,0,0,0,4797,399,1,0,0,0,4798,4799,3,584,292,0,4799,4800,
        5,1144,0,0,4800,4802,1,0,0,0,4801,4798,1,0,0,0,4801,4802,1,0,0,0,
        4802,4803,1,0,0,0,4803,4805,5,140,0,0,4804,4806,3,418,209,0,4805,
        4804,1,0,0,0,4806,4807,1,0,0,0,4807,4805,1,0,0,0,4807,4808,1,0,0,
        0,4808,4809,1,0,0,0,4809,4810,5,663,0,0,4810,4811,3,688,344,0,4811,
        4812,5,407,0,0,4812,4814,5,140,0,0,4813,4815,3,584,292,0,4814,4813,
        1,0,0,0,4814,4815,1,0,0,0,4815,401,1,0,0,0,4816,4817,5,146,0,0,4817,
        4818,3,688,344,0,4818,403,1,0,0,0,4819,4820,3,584,292,0,4820,4821,
        5,1144,0,0,4821,4823,1,0,0,0,4822,4819,1,0,0,0,4822,4823,1,0,0,0,
        4823,4824,1,0,0,0,4824,4825,5,191,0,0,4825,4826,3,688,344,0,4826,
        4828,5,399,0,0,4827,4829,3,418,209,0,4828,4827,1,0,0,0,4829,4830,
        1,0,0,0,4830,4828,1,0,0,0,4830,4831,1,0,0,0,4831,4832,1,0,0,0,4832,
        4833,5,407,0,0,4833,4835,5,191,0,0,4834,4836,3,584,292,0,4835,4834,
        1,0,0,0,4835,4836,1,0,0,0,4836,405,1,0,0,0,4837,4838,5,361,0,0,4838,
        4853,3,584,292,0,4839,4844,5,64,0,0,4840,4842,5,520,0,0,4841,4840,
        1,0,0,0,4841,4842,1,0,0,0,4842,4843,1,0,0,0,4843,4845,5,68,0,0,4844,
        4841,1,0,0,0,4844,4845,1,0,0,0,4845,4846,1,0,0,0,4846,4847,3,584,
        292,0,4847,4848,5,87,0,0,4848,4849,3,616,308,0,4849,4853,1,0,0,0,
        4850,4851,5,539,0,0,4851,4853,3,584,292,0,4852,4837,1,0,0,0,4852,
        4839,1,0,0,0,4852,4850,1,0,0,0,4853,407,1,0,0,0,4854,4855,5,41,0,
        0,4855,4856,3,616,308,0,4856,4859,3,604,302,0,4857,4858,5,42,0,0,
        4858,4860,3,688,344,0,4859,4857,1,0,0,0,4859,4860,1,0,0,0,4860,409,
        1,0,0,0,4861,4862,5,41,0,0,4862,4863,3,584,292,0,4863,4864,5,29,
        0,0,4864,4871,5,65,0,0,4865,4872,3,590,295,0,4866,4868,5,162,0,0,
        4867,4869,5,669,0,0,4868,4867,1,0,0,0,4868,4869,1,0,0,0,4869,4870,
        1,0,0,0,4870,4872,5,1148,0,0,4871,4865,1,0,0,0,4871,4866,1,0,0,0,
        4872,411,1,0,0,0,4873,4874,5,41,0,0,4874,4875,3,584,292,0,4875,4876,
        5,38,0,0,4876,4877,5,65,0,0,4877,4878,3,198,99,0,4878,413,1,0,0,
        0,4879,4880,5,41,0,0,4880,4881,7,65,0,0,4881,4882,5,442,0,0,4882,
        4883,5,65,0,0,4883,4888,3,416,208,0,4884,4885,5,1135,0,0,4885,4887,
        3,416,208,0,4886,4884,1,0,0,0,4887,4890,1,0,0,0,4888,4886,1,0,0,
        0,4888,4889,1,0,0,0,4889,4891,1,0,0,0,4890,4888,1,0,0,0,4891,4892,
        3,386,193,0,4892,415,1,0,0,0,4893,4905,3,590,295,0,4894,4896,5,162,
        0,0,4895,4897,5,669,0,0,4896,4895,1,0,0,0,4896,4897,1,0,0,0,4897,
        4898,1,0,0,0,4898,4905,5,1148,0,0,4899,4905,3,584,292,0,4900,4905,
        5,163,0,0,4901,4902,5,114,0,0,4902,4905,5,435,0,0,4903,4905,5,161,
        0,0,4904,4893,1,0,0,0,4904,4894,1,0,0,0,4904,4899,1,0,0,0,4904,4900,
        1,0,0,0,4904,4901,1,0,0,0,4904,4903,1,0,0,0,4905,417,1,0,0,0,4906,
        4909,3,16,8,0,4907,4909,3,4,2,0,4908,4906,1,0,0,0,4908,4907,1,0,
        0,0,4909,4910,1,0,0,0,4910,4911,5,1136,0,0,4911,419,1,0,0,0,4912,
        4915,5,189,0,0,4913,4916,3,602,301,0,4914,4916,3,688,344,0,4915,
        4913,1,0,0,0,4915,4914,1,0,0,0,4916,4917,1,0,0,0,4917,4919,5,174,
        0,0,4918,4920,3,418,209,0,4919,4918,1,0,0,0,4920,4921,1,0,0,0,4921,
        4919,1,0,0,0,4921,4922,1,0,0,0,4922,421,1,0,0,0,4923,4924,5,54,0,
        0,4924,4925,3,688,344,0,4925,4927,5,174,0,0,4926,4928,3,418,209,
        0,4927,4926,1,0,0,0,4928,4929,1,0,0,0,4929,4927,1,0,0,0,4929,4930,
        1,0,0,0,4930,423,1,0,0,0,4931,4932,5,7,0,0,4932,4933,5,665,0,0,4933,
        4938,3,444,222,0,4934,4935,5,1135,0,0,4935,4937,3,444,222,0,4936,
        4934,1,0,0,0,4937,4940,1,0,0,0,4938,4936,1,0,0,0,4938,4939,1,0,0,
        0,4939,5005,1,0,0,0,4940,4938,1,0,0,0,4941,4942,5,7,0,0,4942,4944,
        5,665,0,0,4943,4945,3,640,320,0,4944,4943,1,0,0,0,4944,4945,1,0,
        0,0,4945,4946,1,0,0,0,4946,4951,3,446,223,0,4947,4948,5,1135,0,0,
        4948,4950,3,446,223,0,4949,4947,1,0,0,0,4950,4953,1,0,0,0,4951,4949,
        1,0,0,0,4951,4952,1,0,0,0,4952,4968,1,0,0,0,4953,4951,1,0,0,0,4954,
        4966,5,142,0,0,4955,4967,5,529,0,0,4956,4963,3,452,226,0,4957,4959,
        5,10,0,0,4958,4957,1,0,0,0,4958,4959,1,0,0,0,4959,4960,1,0,0,0,4960,
        4962,3,452,226,0,4961,4958,1,0,0,0,4962,4965,1,0,0,0,4963,4961,1,
        0,0,0,4963,4964,1,0,0,0,4964,4967,1,0,0,0,4965,4963,1,0,0,0,4966,
        4955,1,0,0,0,4966,4956,1,0,0,0,4967,4969,1,0,0,0,4968,4954,1,0,0,
        0,4968,4969,1,0,0,0,4969,4976,1,0,0,0,4970,4972,5,192,0,0,4971,4973,
        3,454,227,0,4972,4971,1,0,0,0,4973,4974,1,0,0,0,4974,4972,1,0,0,
        0,4974,4975,1,0,0,0,4975,4977,1,0,0,0,4976,4970,1,0,0,0,4976,4977,
        1,0,0,0,4977,4982,1,0,0,0,4978,4981,3,456,228,0,4979,4981,3,458,
        229,0,4980,4978,1,0,0,0,4980,4979,1,0,0,0,4981,4984,1,0,0,0,4982,
        4980,1,0,0,0,4982,4983,1,0,0,0,4983,4989,1,0,0,0,4984,4982,1,0,0,
        0,4985,4986,5,368,0,0,4986,4990,5,1148,0,0,4987,4988,5,14,0,0,4988,
        4990,5,1148,0,0,4989,4985,1,0,0,0,4989,4987,1,0,0,0,4989,4990,1,
        0,0,0,4990,5005,1,0,0,0,4991,4992,5,7,0,0,4992,4994,5,665,0,0,4993,
        4995,3,640,320,0,4994,4993,1,0,0,0,4994,4995,1,0,0,0,4995,4998,1,
        0,0,0,4996,4999,3,564,282,0,4997,4999,3,584,292,0,4998,4996,1,0,
        0,0,4998,4997,1,0,0,0,4999,5000,1,0,0,0,5000,5001,5,42,0,0,5001,
        5002,5,596,0,0,5002,5003,3,432,216,0,5003,5005,1,0,0,0,5004,4931,
        1,0,0,0,5004,4941,1,0,0,0,5004,4991,1,0,0,0,5005,425,1,0,0,0,5006,
        5007,5,33,0,0,5007,5008,5,665,0,0,5008,5013,3,446,223,0,5009,5010,
        5,1135,0,0,5010,5012,3,446,223,0,5011,5009,1,0,0,0,5012,5015,1,0,
        0,0,5013,5011,1,0,0,0,5013,5014,1,0,0,0,5014,5072,1,0,0,0,5015,5013,
        1,0,0,0,5016,5017,5,33,0,0,5017,5019,5,665,0,0,5018,5020,3,642,321,
        0,5019,5018,1,0,0,0,5019,5020,1,0,0,0,5020,5021,1,0,0,0,5021,5026,
        3,446,223,0,5022,5023,5,1135,0,0,5023,5025,3,446,223,0,5024,5022,
        1,0,0,0,5025,5028,1,0,0,0,5026,5024,1,0,0,0,5026,5027,1,0,0,0,5027,
        5032,1,0,0,0,5028,5026,1,0,0,0,5029,5030,5,42,0,0,5030,5031,5,596,
        0,0,5031,5033,3,432,216,0,5032,5029,1,0,0,0,5032,5033,1,0,0,0,5033,
        5048,1,0,0,0,5034,5046,5,142,0,0,5035,5047,5,529,0,0,5036,5043,3,
        452,226,0,5037,5039,5,10,0,0,5038,5037,1,0,0,0,5038,5039,1,0,0,0,
        5039,5040,1,0,0,0,5040,5042,3,452,226,0,5041,5038,1,0,0,0,5042,5045,
        1,0,0,0,5043,5041,1,0,0,0,5043,5044,1,0,0,0,5044,5047,1,0,0,0,5045,
        5043,1,0,0,0,5046,5035,1,0,0,0,5046,5036,1,0,0,0,5047,5049,1,0,0,
        0,5048,5034,1,0,0,0,5048,5049,1,0,0,0,5049,5056,1,0,0,0,5050,5052,
        5,192,0,0,5051,5053,3,454,227,0,5052,5051,1,0,0,0,5053,5054,1,0,
        0,0,5054,5052,1,0,0,0,5054,5055,1,0,0,0,5055,5057,1,0,0,0,5056,5050,
        1,0,0,0,5056,5057,1,0,0,0,5057,5062,1,0,0,0,5058,5061,3,456,228,
        0,5059,5061,3,458,229,0,5060,5058,1,0,0,0,5060,5059,1,0,0,0,5061,
        5064,1,0,0,0,5062,5060,1,0,0,0,5062,5063,1,0,0,0,5063,5069,1,0,0,
        0,5064,5062,1,0,0,0,5065,5066,5,368,0,0,5066,5070,5,1148,0,0,5067,
        5068,5,14,0,0,5068,5070,5,1148,0,0,5069,5065,1,0,0,0,5069,5067,1,
        0,0,0,5069,5070,1,0,0,0,5070,5072,1,0,0,0,5071,5006,1,0,0,0,5071,
        5016,1,0,0,0,5072,427,1,0,0,0,5073,5074,5,51,0,0,5074,5076,5,665,
        0,0,5075,5077,3,640,320,0,5076,5075,1,0,0,0,5076,5077,1,0,0,0,5077,
        5078,1,0,0,0,5078,5083,3,564,282,0,5079,5080,5,1135,0,0,5080,5082,
        3,564,282,0,5081,5079,1,0,0,0,5082,5085,1,0,0,0,5083,5081,1,0,0,
        0,5083,5084,1,0,0,0,5084,429,1,0,0,0,5085,5083,1,0,0,0,5086,5087,
        5,72,0,0,5087,5092,3,460,230,0,5088,5089,5,1135,0,0,5089,5091,3,
        460,230,0,5090,5088,1,0,0,0,5091,5094,1,0,0,0,5092,5090,1,0,0,0,
        5092,5093,1,0,0,0,5093,5095,1,0,0,0,5094,5092,1,0,0,0,5095,5097,
        5,118,0,0,5096,5098,7,66,0,0,5097,5096,1,0,0,0,5097,5098,1,0,0,0,
        5098,5099,1,0,0,0,5099,5100,3,464,232,0,5100,5101,5,175,0,0,5101,
        5106,3,446,223,0,5102,5103,5,1135,0,0,5103,5105,3,446,223,0,5104,
        5102,1,0,0,0,5105,5108,1,0,0,0,5106,5104,1,0,0,0,5106,5107,1,0,0,
        0,5107,5123,1,0,0,0,5108,5106,1,0,0,0,5109,5121,5,142,0,0,5110,5122,
        5,529,0,0,5111,5118,3,452,226,0,5112,5114,5,10,0,0,5113,5112,1,0,
        0,0,5113,5114,1,0,0,0,5114,5115,1,0,0,0,5115,5117,3,452,226,0,5116,
        5113,1,0,0,0,5117,5120,1,0,0,0,5118,5116,1,0,0,0,5118,5119,1,0,0,
        0,5119,5122,1,0,0,0,5120,5118,1,0,0,0,5121,5110,1,0,0,0,5121,5111,
        1,0,0,0,5122,5124,1,0,0,0,5123,5109,1,0,0,0,5123,5124,1,0,0,0,5124,
        5134,1,0,0,0,5125,5131,5,192,0,0,5126,5127,5,72,0,0,5127,5130,5,
        120,0,0,5128,5130,3,454,227,0,5129,5126,1,0,0,0,5129,5128,1,0,0,
        0,5130,5133,1,0,0,0,5131,5129,1,0,0,0,5131,5132,1,0,0,0,5132,5135,
        1,0,0,0,5133,5131,1,0,0,0,5134,5125,1,0,0,0,5134,5135,1,0,0,0,5135,
        5142,1,0,0,0,5136,5137,5,12,0,0,5137,5138,3,564,282,0,5138,5139,
        5,192,0,0,5139,5140,5,596,0,0,5140,5141,3,432,216,0,5141,5143,1,
        0,0,0,5142,5136,1,0,0,0,5142,5143,1,0,0,0,5143,5180,1,0,0,0,5144,
        5147,5,72,0,0,5145,5148,3,564,282,0,5146,5148,3,584,292,0,5147,5145,
        1,0,0,0,5147,5146,1,0,0,0,5148,5156,1,0,0,0,5149,5152,5,1135,0,0,
        5150,5153,3,564,282,0,5151,5153,3,584,292,0,5152,5150,1,0,0,0,5152,
        5151,1,0,0,0,5153,5155,1,0,0,0,5154,5149,1,0,0,0,5155,5158,1,0,0,
        0,5156,5154,1,0,0,0,5156,5157,1,0,0,0,5157,5159,1,0,0,0,5158,5156,
        1,0,0,0,5159,5162,5,175,0,0,5160,5163,3,564,282,0,5161,5163,3,584,
        292,0,5162,5160,1,0,0,0,5162,5161,1,0,0,0,5163,5171,1,0,0,0,5164,
        5167,5,1135,0,0,5165,5168,3,564,282,0,5166,5168,3,584,292,0,5167,
        5165,1,0,0,0,5167,5166,1,0,0,0,5168,5170,1,0,0,0,5169,5164,1,0,0,
        0,5170,5173,1,0,0,0,5171,5169,1,0,0,0,5171,5172,1,0,0,0,5172,5177,
        1,0,0,0,5173,5171,1,0,0,0,5174,5175,5,192,0,0,5175,5176,5,697,0,
        0,5176,5178,5,120,0,0,5177,5174,1,0,0,0,5177,5178,1,0,0,0,5178,5180,
        1,0,0,0,5179,5086,1,0,0,0,5179,5144,1,0,0,0,5180,431,1,0,0,0,5181,
        5204,5,42,0,0,5182,5204,5,529,0,0,5183,5193,5,6,0,0,5184,5185,5,
        59,0,0,5185,5190,3,564,282,0,5186,5187,5,1135,0,0,5187,5189,3,564,
        282,0,5188,5186,1,0,0,0,5189,5192,1,0,0,0,5190,5188,1,0,0,0,5190,
        5191,1,0,0,0,5191,5194,1,0,0,0,5192,5190,1,0,0,0,5193,5184,1,0,0,
        0,5193,5194,1,0,0,0,5194,5204,1,0,0,0,5195,5200,3,564,282,0,5196,
        5197,5,1135,0,0,5197,5199,3,564,282,0,5198,5196,1,0,0,0,5199,5202,
        1,0,0,0,5200,5198,1,0,0,0,5200,5201,1,0,0,0,5201,5204,1,0,0,0,5202,
        5200,1,0,0,0,5203,5181,1,0,0,0,5203,5182,1,0,0,0,5203,5183,1,0,0,
        0,5203,5195,1,0,0,0,5204,433,1,0,0,0,5205,5206,5,72,0,0,5206,5207,
        5,566,0,0,5207,5208,5,118,0,0,5208,5209,3,564,282,0,5209,5210,5,
        175,0,0,5210,5215,3,564,282,0,5211,5212,5,1135,0,0,5212,5214,3,564,
        282,0,5213,5211,1,0,0,0,5214,5217,1,0,0,0,5215,5213,1,0,0,0,5215,
        5216,1,0,0,0,5216,5221,1,0,0,0,5217,5215,1,0,0,0,5218,5219,5,192,
        0,0,5219,5220,5,72,0,0,5220,5222,5,120,0,0,5221,5218,1,0,0,0,5221,
        5222,1,0,0,0,5222,435,1,0,0,0,5223,5224,5,139,0,0,5224,5225,5,665,
        0,0,5225,5230,3,466,233,0,5226,5227,5,1135,0,0,5227,5229,3,466,233,
        0,5228,5226,1,0,0,0,5229,5232,1,0,0,0,5230,5228,1,0,0,0,5230,5231,
        1,0,0,0,5231,437,1,0,0,0,5232,5230,1,0,0,0,5233,5234,5,147,0,0,5234,
        5239,3,460,230,0,5235,5236,5,1135,0,0,5236,5238,3,460,230,0,5237,
        5235,1,0,0,0,5238,5241,1,0,0,0,5239,5237,1,0,0,0,5239,5240,1,0,0,
        0,5240,5242,1,0,0,0,5241,5239,1,0,0,0,5242,5244,5,118,0,0,5243,5245,
        7,66,0,0,5244,5243,1,0,0,0,5244,5245,1,0,0,0,5245,5246,1,0,0,0,5246,
        5247,3,464,232,0,5247,5248,5,68,0,0,5248,5253,3,564,282,0,5249,5250,
        5,1135,0,0,5250,5252,3,564,282,0,5251,5249,1,0,0,0,5252,5255,1,0,
        0,0,5253,5251,1,0,0,0,5253,5254,1,0,0,0,5254,5304,1,0,0,0,5255,5253,
        1,0,0,0,5256,5257,5,147,0,0,5257,5259,5,6,0,0,5258,5260,5,725,0,
        0,5259,5258,1,0,0,0,5259,5260,1,0,0,0,5260,5261,1,0,0,0,5261,5262,
        5,1135,0,0,5262,5263,5,72,0,0,5263,5264,5,120,0,0,5264,5265,5,68,
        0,0,5265,5270,3,564,282,0,5266,5267,5,1135,0,0,5267,5269,3,564,282,
        0,5268,5266,1,0,0,0,5269,5272,1,0,0,0,5270,5268,1,0,0,0,5270,5271,
        1,0,0,0,5271,5304,1,0,0,0,5272,5270,1,0,0,0,5273,5276,5,147,0,0,
        5274,5277,3,564,282,0,5275,5277,3,584,292,0,5276,5274,1,0,0,0,5276,
        5275,1,0,0,0,5277,5285,1,0,0,0,5278,5281,5,1135,0,0,5279,5282,3,
        564,282,0,5280,5282,3,584,292,0,5281,5279,1,0,0,0,5281,5280,1,0,
        0,0,5282,5284,1,0,0,0,5283,5278,1,0,0,0,5284,5287,1,0,0,0,5285,5283,
        1,0,0,0,5285,5286,1,0,0,0,5286,5288,1,0,0,0,5287,5285,1,0,0,0,5288,
        5291,5,68,0,0,5289,5292,3,564,282,0,5290,5292,3,584,292,0,5291,5289,
        1,0,0,0,5291,5290,1,0,0,0,5292,5300,1,0,0,0,5293,5296,5,1135,0,0,
        5294,5297,3,564,282,0,5295,5297,3,584,292,0,5296,5294,1,0,0,0,5296,
        5295,1,0,0,0,5297,5299,1,0,0,0,5298,5293,1,0,0,0,5299,5302,1,0,0,
        0,5300,5298,1,0,0,0,5300,5301,1,0,0,0,5301,5304,1,0,0,0,5302,5300,
        1,0,0,0,5303,5233,1,0,0,0,5303,5256,1,0,0,0,5303,5273,1,0,0,0,5304,
        439,1,0,0,0,5305,5306,5,147,0,0,5306,5307,5,566,0,0,5307,5308,5,
        118,0,0,5308,5309,3,564,282,0,5309,5310,5,68,0,0,5310,5315,3,564,
        282,0,5311,5312,5,1135,0,0,5312,5314,3,564,282,0,5313,5311,1,0,0,
        0,5314,5317,1,0,0,0,5315,5313,1,0,0,0,5315,5316,1,0,0,0,5316,441,
        1,0,0,0,5317,5315,1,0,0,0,5318,5319,5,153,0,0,5319,5322,5,551,0,
        0,5320,5321,5,65,0,0,5321,5323,3,564,282,0,5322,5320,1,0,0,0,5322,
        5323,1,0,0,0,5323,5324,1,0,0,0,5324,5327,5,1124,0,0,5325,5328,3,
        682,341,0,5326,5328,5,1148,0,0,5327,5325,1,0,0,0,5327,5326,1,0,0,
        0,5328,443,1,0,0,0,5329,5330,3,564,282,0,5330,5331,3,456,228,0,5331,
        445,1,0,0,0,5332,5333,3,564,282,0,5333,5334,5,448,0,0,5334,5335,
        5,19,0,0,5335,5336,5,551,0,0,5336,5337,5,1148,0,0,5337,5358,1,0,
        0,0,5338,5339,3,564,282,0,5339,5340,5,448,0,0,5340,5341,5,19,0,0,
        5341,5342,5,991,0,0,5342,5343,5,551,0,0,5343,5344,3,448,224,0,5344,
        5358,1,0,0,0,5345,5346,3,564,282,0,5346,5347,5,448,0,0,5347,5348,
        5,19,0,0,5348,5349,5,1148,0,0,5349,5350,3,448,224,0,5350,5358,1,
        0,0,0,5351,5352,3,564,282,0,5352,5353,5,448,0,0,5353,5354,5,192,
        0,0,5354,5355,3,450,225,0,5355,5358,1,0,0,0,5356,5358,3,564,282,
        0,5357,5332,1,0,0,0,5357,5338,1,0,0,0,5357,5345,1,0,0,0,5357,5351,
        1,0,0,0,5357,5356,1,0,0,0,5358,447,1,0,0,0,5359,5360,5,141,0,0,5360,
        5362,5,1148,0,0,5361,5359,1,0,0,0,5361,5362,1,0,0,0,5362,5366,1,
        0,0,0,5363,5364,5,145,0,0,5364,5365,5,35,0,0,5365,5367,5,551,0,0,
        5366,5363,1,0,0,0,5366,5367,1,0,0,0,5367,449,1,0,0,0,5368,5376,3,
        582,291,0,5369,5373,7,67,0,0,5370,5374,5,1148,0,0,5371,5372,5,991,
        0,0,5372,5374,5,551,0,0,5373,5370,1,0,0,0,5373,5371,1,0,0,0,5374,
        5375,1,0,0,0,5375,5377,3,448,224,0,5376,5369,1,0,0,0,5376,5377,1,
        0,0,0,5377,5383,1,0,0,0,5378,5379,3,582,291,0,5379,5380,5,187,0,
        0,5380,5381,3,682,341,0,5381,5383,1,0,0,0,5382,5368,1,0,0,0,5382,
        5378,1,0,0,0,5383,451,1,0,0,0,5384,5393,5,167,0,0,5385,5393,5,680,
        0,0,5386,5387,5,358,0,0,5387,5393,5,1148,0,0,5388,5389,5,465,0,0,
        5389,5393,5,1148,0,0,5390,5391,5,640,0,0,5391,5393,5,1148,0,0,5392,
        5384,1,0,0,0,5392,5385,1,0,0,0,5392,5386,1,0,0,0,5392,5388,1,0,0,
        0,5392,5390,1,0,0,0,5393,453,1,0,0,0,5394,5395,5,499,0,0,5395,5403,
        3,590,295,0,5396,5397,5,502,0,0,5397,5403,3,590,295,0,5398,5399,
        5,498,0,0,5399,5403,3,590,295,0,5400,5401,5,503,0,0,5401,5403,3,
        590,295,0,5402,5394,1,0,0,0,5402,5396,1,0,0,0,5402,5398,1,0,0,0,
        5402,5400,1,0,0,0,5403,455,1,0,0,0,5404,5405,5,551,0,0,5405,5412,
        5,420,0,0,5406,5413,5,42,0,0,5407,5413,5,519,0,0,5408,5409,5,86,
        0,0,5409,5410,3,590,295,0,5410,5411,5,691,0,0,5411,5413,1,0,0,0,
        5412,5406,1,0,0,0,5412,5407,1,0,0,0,5412,5408,1,0,0,0,5412,5413,
        1,0,0,0,5413,5443,1,0,0,0,5414,5415,5,551,0,0,5415,5418,5,445,0,
        0,5416,5419,5,42,0,0,5417,5419,3,590,295,0,5418,5416,1,0,0,0,5418,
        5417,1,0,0,0,5419,5443,1,0,0,0,5420,5421,5,551,0,0,5421,5422,5,595,
        0,0,5422,5427,5,86,0,0,5423,5428,5,42,0,0,5424,5425,3,590,295,0,
        5425,5426,5,691,0,0,5426,5428,1,0,0,0,5427,5423,1,0,0,0,5427,5424,
        1,0,0,0,5428,5443,1,0,0,0,5429,5430,5,551,0,0,5430,5431,5,142,0,
        0,5431,5433,5,35,0,0,5432,5434,7,68,0,0,5433,5432,1,0,0,0,5433,5434,
        1,0,0,0,5434,5443,1,0,0,0,5435,5436,5,424,0,0,5436,5443,3,590,295,
        0,5437,5440,5,552,0,0,5438,5441,3,590,295,0,5439,5441,5,657,0,0,
        5440,5438,1,0,0,0,5440,5439,1,0,0,0,5441,5443,1,0,0,0,5442,5404,
        1,0,0,0,5442,5414,1,0,0,0,5442,5420,1,0,0,0,5442,5429,1,0,0,0,5442,
        5435,1,0,0,0,5442,5437,1,0,0,0,5443,457,1,0,0,0,5444,5445,5,332,
        0,0,5445,5446,7,69,0,0,5446,459,1,0,0,0,5447,5452,3,462,231,0,5448,
        5449,5,1133,0,0,5449,5450,3,616,308,0,5450,5451,5,1134,0,0,5451,
        5453,1,0,0,0,5452,5448,1,0,0,0,5452,5453,1,0,0,0,5453,461,1,0,0,
        0,5454,5456,5,6,0,0,5455,5457,5,725,0,0,5456,5455,1,0,0,0,5456,5457,
        1,0,0,0,5457,5548,1,0,0,0,5458,5460,5,7,0,0,5459,5461,5,733,0,0,
        5460,5459,1,0,0,0,5460,5461,1,0,0,0,5461,5548,1,0,0,0,5462,5470,
        5,33,0,0,5463,5464,5,649,0,0,5464,5471,5,742,0,0,5465,5471,5,733,
        0,0,5466,5471,5,671,0,0,5467,5471,5,665,0,0,5468,5471,5,647,0,0,
        5469,5471,5,596,0,0,5470,5463,1,0,0,0,5470,5465,1,0,0,0,5470,5466,
        1,0,0,0,5470,5467,1,0,0,0,5470,5468,1,0,0,0,5470,5469,1,0,0,0,5470,
        5471,1,0,0,0,5471,5548,1,0,0,0,5472,5548,5,44,0,0,5473,5475,5,51,
        0,0,5474,5476,5,596,0,0,5475,5474,1,0,0,0,5475,5476,1,0,0,0,5476,
        5548,1,0,0,0,5477,5548,5,415,0,0,5478,5548,5,708,0,0,5479,5548,5,
        709,0,0,5480,5481,5,72,0,0,5481,5548,5,120,0,0,5482,5548,5,81,0,
        0,5483,5548,5,85,0,0,5484,5485,5,103,0,0,5485,5548,5,742,0,0,5486,
        5548,5,726,0,0,5487,5548,5,566,0,0,5488,5548,5,136,0,0,5489,5548,
        5,727,0,0,5490,5491,5,588,0,0,5491,5548,7,70,0,0,5492,5548,5,152,
        0,0,5493,5494,5,155,0,0,5494,5548,7,71,0,0,5495,5548,5,739,0,0,5496,
        5548,5,740,0,0,5497,5548,5,177,0,0,5498,5548,5,184,0,0,5499,5548,
        5,185,0,0,5500,5548,5,698,0,0,5501,5548,5,699,0,0,5502,5548,5,700,
        0,0,5503,5548,5,701,0,0,5504,5548,5,702,0,0,5505,5548,5,703,0,0,
        5506,5548,5,704,0,0,5507,5548,5,705,0,0,5508,5548,5,706,0,0,5509,
        5548,5,707,0,0,5510,5548,5,710,0,0,5511,5548,5,711,0,0,5512,5548,
        5,712,0,0,5513,5548,5,713,0,0,5514,5548,5,714,0,0,5515,5548,5,715,
        0,0,5516,5548,5,716,0,0,5517,5548,5,717,0,0,5518,5548,5,718,0,0,
        5519,5548,5,719,0,0,5520,5548,5,722,0,0,5521,5548,5,723,0,0,5522,
        5548,5,724,0,0,5523,5548,5,728,0,0,5524,5548,5,729,0,0,5525,5548,
        5,730,0,0,5526,5548,5,731,0,0,5527,5548,5,732,0,0,5528,5548,5,735,
        0,0,5529,5548,5,736,0,0,5530,5548,5,737,0,0,5531,5548,5,158,0,0,
        5532,5548,5,738,0,0,5533,5548,5,1077,0,0,5534,5548,5,741,0,0,5535,
        5548,5,743,0,0,5536,5548,5,1088,0,0,5537,5548,5,744,0,0,5538,5548,
        5,745,0,0,5539,5540,5,102,0,0,5540,5541,5,68,0,0,5541,5548,5,734,
        0,0,5542,5543,5,152,0,0,5543,5544,5,87,0,0,5544,5548,5,734,0,0,5545,
        5546,5,720,0,0,5546,5548,5,721,0,0,5547,5454,1,0,0,0,5547,5458,1,
        0,0,0,5547,5462,1,0,0,0,5547,5472,1,0,0,0,5547,5473,1,0,0,0,5547,
        5477,1,0,0,0,5547,5478,1,0,0,0,5547,5479,1,0,0,0,5547,5480,1,0,0,
        0,5547,5482,1,0,0,0,5547,5483,1,0,0,0,5547,5484,1,0,0,0,5547,5486,
        1,0,0,0,5547,5487,1,0,0,0,5547,5488,1,0,0,0,5547,5489,1,0,0,0,5547,
        5490,1,0,0,0,5547,5492,1,0,0,0,5547,5493,1,0,0,0,5547,5495,1,0,0,
        0,5547,5496,1,0,0,0,5547,5497,1,0,0,0,5547,5498,1,0,0,0,5547,5499,
        1,0,0,0,5547,5500,1,0,0,0,5547,5501,1,0,0,0,5547,5502,1,0,0,0,5547,
        5503,1,0,0,0,5547,5504,1,0,0,0,5547,5505,1,0,0,0,5547,5506,1,0,0,
        0,5547,5507,1,0,0,0,5547,5508,1,0,0,0,5547,5509,1,0,0,0,5547,5510,
        1,0,0,0,5547,5511,1,0,0,0,5547,5512,1,0,0,0,5547,5513,1,0,0,0,5547,
        5514,1,0,0,0,5547,5515,1,0,0,0,5547,5516,1,0,0,0,5547,5517,1,0,0,
        0,5547,5518,1,0,0,0,5547,5519,1,0,0,0,5547,5520,1,0,0,0,5547,5521,
        1,0,0,0,5547,5522,1,0,0,0,5547,5523,1,0,0,0,5547,5524,1,0,0,0,5547,
        5525,1,0,0,0,5547,5526,1,0,0,0,5547,5527,1,0,0,0,5547,5528,1,0,0,
        0,5547,5529,1,0,0,0,5547,5530,1,0,0,0,5547,5531,1,0,0,0,5547,5532,
        1,0,0,0,5547,5533,1,0,0,0,5547,5534,1,0,0,0,5547,5535,1,0,0,0,5547,
        5536,1,0,0,0,5547,5537,1,0,0,0,5547,5538,1,0,0,0,5547,5539,1,0,0,
        0,5547,5542,1,0,0,0,5547,5545,1,0,0,0,5548,463,1,0,0,0,5549,5566,
        5,1117,0,0,5550,5551,5,1117,0,0,5551,5552,5,1132,0,0,5552,5566,5,
        1117,0,0,5553,5554,3,584,292,0,5554,5555,5,1132,0,0,5555,5556,5,
        1117,0,0,5556,5566,1,0,0,0,5557,5558,3,584,292,0,5558,5559,5,1132,
        0,0,5559,5560,3,584,292,0,5560,5566,1,0,0,0,5561,5562,3,584,292,
        0,5562,5563,3,588,294,0,5563,5566,1,0,0,0,5564,5566,3,584,292,0,
        5565,5549,1,0,0,0,5565,5550,1,0,0,0,5565,5553,1,0,0,0,5565,5557,
        1,0,0,0,5565,5561,1,0,0,0,5565,5564,1,0,0,0,5566,465,1,0,0,0,5567,
        5568,3,564,282,0,5568,5569,5,175,0,0,5569,5570,3,564,282,0,5570,
        467,1,0,0,0,5571,5573,5,9,0,0,5572,5574,7,72,0,0,5573,5572,1,0,0,
        0,5573,5574,1,0,0,0,5574,5575,1,0,0,0,5575,5576,7,54,0,0,5576,5594,
        3,620,310,0,5577,5578,5,184,0,0,5578,5579,5,76,0,0,5579,5580,5,118,
        0,0,5580,5585,3,556,278,0,5581,5582,5,1135,0,0,5582,5584,3,556,278,
        0,5583,5581,1,0,0,0,5584,5587,1,0,0,0,5585,5583,1,0,0,0,5585,5586,
        1,0,0,0,5586,5592,1,0,0,0,5587,5585,1,0,0,0,5588,5589,5,192,0,0,
        5589,5590,3,590,295,0,5590,5591,5,18,0,0,5591,5593,1,0,0,0,5592,
        5588,1,0,0,0,5592,5593,1,0,0,0,5593,5595,1,0,0,0,5594,5577,1,0,0,
        0,5594,5595,1,0,0,0,5595,5607,1,0,0,0,5596,5597,5,51,0,0,5597,5598,
        5,76,0,0,5598,5599,5,118,0,0,5599,5604,3,556,278,0,5600,5601,5,1135,
        0,0,5601,5603,3,556,278,0,5602,5600,1,0,0,0,5603,5606,1,0,0,0,5604,
        5602,1,0,0,0,5604,5605,1,0,0,0,5605,5608,1,0,0,0,5606,5604,1,0,0,
        0,5607,5596,1,0,0,0,5607,5608,1,0,0,0,5608,469,1,0,0,0,5609,5610,
        5,26,0,0,5610,5611,5,172,0,0,5611,5615,3,620,310,0,5612,5614,3,478,
        239,0,5613,5612,1,0,0,0,5614,5617,1,0,0,0,5615,5613,1,0,0,0,5615,
        5616,1,0,0,0,5616,471,1,0,0,0,5617,5615,1,0,0,0,5618,5619,5,356,
        0,0,5619,5620,5,172,0,0,5620,5622,3,620,310,0,5621,5623,7,73,0,0,
        5622,5621,1,0,0,0,5622,5623,1,0,0,0,5623,473,1,0,0,0,5624,5626,5,
        119,0,0,5625,5627,7,72,0,0,5626,5625,1,0,0,0,5626,5627,1,0,0,0,5627,
        5628,1,0,0,0,5628,5629,7,54,0,0,5629,5630,3,620,310,0,5630,475,1,
        0,0,0,5631,5633,5,580,0,0,5632,5634,7,72,0,0,5633,5632,1,0,0,0,5633,
        5634,1,0,0,0,5634,5635,1,0,0,0,5635,5636,5,172,0,0,5636,5638,3,620,
        310,0,5637,5639,5,568,0,0,5638,5637,1,0,0,0,5638,5639,1,0,0,0,5639,
        5641,1,0,0,0,5640,5642,5,422,0,0,5641,5640,1,0,0,0,5641,5642,1,0,
        0,0,5642,5644,1,0,0,0,5643,5645,5,666,0,0,5644,5643,1,0,0,0,5644,
        5645,1,0,0,0,5645,477,1,0,0,0,5646,5647,5,65,0,0,5647,5654,5,664,
        0,0,5648,5654,5,568,0,0,5649,5654,5,425,0,0,5650,5654,5,504,0,0,
        5651,5654,5,422,0,0,5652,5654,5,354,0,0,5653,5646,1,0,0,0,5653,5648,
        1,0,0,0,5653,5649,1,0,0,0,5653,5650,1,0,0,0,5653,5651,1,0,0,0,5653,
        5652,1,0,0,0,5654,479,1,0,0,0,5655,5657,5,33,0,0,5656,5658,5,335,
        0,0,5657,5656,1,0,0,0,5657,5658,1,0,0,0,5658,5659,1,0,0,0,5659,5661,
        5,437,0,0,5660,5662,3,642,321,0,5661,5660,1,0,0,0,5661,5662,1,0,
        0,0,5662,5663,1,0,0,0,5663,5664,3,584,292,0,5664,5665,5,594,0,0,
        5665,5666,7,74,0,0,5666,5667,5,619,0,0,5667,5668,5,1148,0,0,5668,
        481,1,0,0,0,5669,5670,5,456,0,0,5670,5671,5,554,0,0,5671,5672,3,
        584,292,0,5672,5673,5,619,0,0,5673,5674,5,1148,0,0,5674,483,1,0,
        0,0,5675,5676,5,661,0,0,5676,5677,5,554,0,0,5677,5678,3,584,292,
        0,5678,485,1,0,0,0,5679,5680,5,153,0,0,5680,5681,3,490,245,0,5681,
        5684,7,75,0,0,5682,5685,3,688,344,0,5683,5685,5,118,0,0,5684,5682,
        1,0,0,0,5684,5683,1,0,0,0,5685,5695,1,0,0,0,5686,5687,5,1135,0,0,
        5687,5688,3,490,245,0,5688,5691,7,75,0,0,5689,5692,3,688,344,0,5690,
        5692,5,118,0,0,5691,5689,1,0,0,0,5691,5690,1,0,0,0,5692,5694,1,0,
        0,0,5693,5686,1,0,0,0,5694,5697,1,0,0,0,5695,5693,1,0,0,0,5695,5696,
        1,0,0,0,5696,5732,1,0,0,0,5697,5695,1,0,0,0,5698,5699,5,153,0,0,
        5699,5702,3,58,29,0,5700,5703,3,568,284,0,5701,5703,5,42,0,0,5702,
        5700,1,0,0,0,5702,5701,1,0,0,0,5703,5732,1,0,0,0,5704,5705,5,153,
        0,0,5705,5712,5,517,0,0,5706,5709,3,568,284,0,5707,5708,5,27,0,0,
        5708,5710,3,570,285,0,5709,5707,1,0,0,0,5709,5710,1,0,0,0,5710,5713,
        1,0,0,0,5711,5713,5,42,0,0,5712,5706,1,0,0,0,5712,5711,1,0,0,0,5713,
        5732,1,0,0,0,5714,5732,3,442,221,0,5715,5732,3,316,158,0,5716,5732,
        3,314,157,0,5717,5718,5,153,0,0,5718,5719,3,548,274,0,5719,5720,
        7,75,0,0,5720,5728,3,688,344,0,5721,5722,5,1135,0,0,5722,5723,3,
        548,274,0,5723,5724,7,75,0,0,5724,5725,3,688,344,0,5725,5727,1,0,
        0,0,5726,5721,1,0,0,0,5727,5730,1,0,0,0,5728,5726,1,0,0,0,5728,5729,
        1,0,0,0,5729,5732,1,0,0,0,5730,5728,1,0,0,0,5731,5679,1,0,0,0,5731,
        5698,1,0,0,0,5731,5704,1,0,0,0,5731,5714,1,0,0,0,5731,5715,1,0,0,
        0,5731,5716,1,0,0,0,5731,5717,1,0,0,0,5732,487,1,0,0,0,5733,5734,
        5,155,0,0,5734,5735,7,56,0,0,5735,5887,5,476,0,0,5736,5737,5,155,
        0,0,5737,5738,7,76,0,0,5738,5741,5,416,0,0,5739,5740,5,80,0,0,5740,
        5742,5,1148,0,0,5741,5739,1,0,0,0,5741,5742,1,0,0,0,5742,5745,1,
        0,0,0,5743,5744,5,68,0,0,5744,5746,3,590,295,0,5745,5743,1,0,0,0,
        5745,5746,1,0,0,0,5746,5754,1,0,0,0,5747,5751,5,99,0,0,5748,5749,
        3,590,295,0,5749,5750,5,1135,0,0,5750,5752,1,0,0,0,5751,5748,1,0,
        0,0,5751,5752,1,0,0,0,5752,5753,1,0,0,0,5753,5755,3,590,295,0,5754,
        5747,1,0,0,0,5754,5755,1,0,0,0,5755,5887,1,0,0,0,5756,5757,5,155,
        0,0,5757,5759,3,492,246,0,5758,5760,3,494,247,0,5759,5758,1,0,0,
        0,5759,5760,1,0,0,0,5760,5887,1,0,0,0,5761,5763,5,155,0,0,5762,5764,
        5,436,0,0,5763,5762,1,0,0,0,5763,5764,1,0,0,0,5764,5765,1,0,0,0,
        5765,5766,7,41,0,0,5766,5767,7,77,0,0,5767,5770,3,550,275,0,5768,
        5769,7,77,0,0,5769,5771,3,584,292,0,5770,5768,1,0,0,0,5770,5771,
        1,0,0,0,5771,5773,1,0,0,0,5772,5774,3,494,247,0,5773,5772,1,0,0,
        0,5773,5774,1,0,0,0,5774,5887,1,0,0,0,5775,5776,5,155,0,0,5776,5777,
        5,33,0,0,5777,5779,7,0,0,0,5778,5780,3,642,321,0,5779,5778,1,0,0,
        0,5779,5780,1,0,0,0,5780,5781,1,0,0,0,5781,5887,3,584,292,0,5782,
        5783,5,155,0,0,5783,5784,5,33,0,0,5784,5785,7,78,0,0,5785,5887,3,
        548,274,0,5786,5787,5,155,0,0,5787,5788,5,33,0,0,5788,5789,5,665,
        0,0,5789,5887,3,564,282,0,5790,5791,5,155,0,0,5791,5792,5,409,0,
        0,5792,5793,3,572,286,0,5793,5794,7,79,0,0,5794,5887,1,0,0,0,5795,
        5796,5,155,0,0,5796,5887,3,496,248,0,5797,5798,5,155,0,0,5798,5806,
        7,80,0,0,5799,5803,5,99,0,0,5800,5801,3,590,295,0,5801,5802,5,1135,
        0,0,5802,5804,1,0,0,0,5803,5800,1,0,0,0,5803,5804,1,0,0,0,5804,5805,
        1,0,0,0,5805,5807,3,590,295,0,5806,5799,1,0,0,0,5806,5807,1,0,0,
        0,5807,5887,1,0,0,0,5808,5809,5,155,0,0,5809,5810,5,290,0,0,5810,
        5811,5,1133,0,0,5811,5812,5,1117,0,0,5812,5813,5,1134,0,0,5813,5887,
        7,80,0,0,5814,5815,5,155,0,0,5815,5818,3,498,249,0,5816,5817,7,77,
        0,0,5817,5819,3,584,292,0,5818,5816,1,0,0,0,5818,5819,1,0,0,0,5819,
        5821,1,0,0,0,5820,5822,3,494,247,0,5821,5820,1,0,0,0,5821,5822,1,
        0,0,0,5822,5887,1,0,0,0,5823,5824,5,155,0,0,5824,5825,7,81,0,0,5825,
        5826,5,364,0,0,5826,5887,3,548,274,0,5827,5828,5,155,0,0,5828,5831,
        5,440,0,0,5829,5830,5,65,0,0,5830,5832,3,564,282,0,5831,5829,1,0,
        0,0,5831,5832,1,0,0,0,5832,5887,1,0,0,0,5833,5834,5,155,0,0,5834,
        5835,7,82,0,0,5835,5836,7,77,0,0,5836,5839,3,550,275,0,5837,5838,
        7,77,0,0,5838,5840,3,584,292,0,5839,5837,1,0,0,0,5839,5840,1,0,0,
        0,5840,5843,1,0,0,0,5841,5842,5,190,0,0,5842,5844,3,688,344,0,5843,
        5841,1,0,0,0,5843,5844,1,0,0,0,5844,5887,1,0,0,0,5845,5846,5,155,
        0,0,5846,5847,5,539,0,0,5847,5850,5,742,0,0,5848,5849,7,77,0,0,5849,
        5851,3,584,292,0,5850,5848,1,0,0,0,5850,5851,1,0,0,0,5851,5853,1,
        0,0,0,5852,5854,3,494,247,0,5853,5852,1,0,0,0,5853,5854,1,0,0,0,
        5854,5887,1,0,0,0,5855,5856,5,155,0,0,5856,5857,5,564,0,0,5857,5862,
        3,500,250,0,5858,5859,5,1135,0,0,5859,5861,3,500,250,0,5860,5858,
        1,0,0,0,5861,5864,1,0,0,0,5862,5860,1,0,0,0,5862,5863,1,0,0,0,5863,
        5868,1,0,0,0,5864,5862,1,0,0,0,5865,5866,5,65,0,0,5866,5867,5,567,
        0,0,5867,5869,3,590,295,0,5868,5865,1,0,0,0,5868,5869,1,0,0,0,5869,
        5870,1,0,0,0,5870,5874,5,99,0,0,5871,5872,3,590,295,0,5872,5873,
        5,1135,0,0,5873,5875,1,0,0,0,5874,5871,1,0,0,0,5874,5875,1,0,0,0,
        5875,5876,1,0,0,0,5876,5877,3,590,295,0,5877,5887,1,0,0,0,5878,5879,
        5,155,0,0,5879,5880,5,614,0,0,5880,5884,5,634,0,0,5881,5882,5,65,
        0,0,5882,5883,5,355,0,0,5883,5885,5,1148,0,0,5884,5881,1,0,0,0,5884,
        5885,1,0,0,0,5885,5887,1,0,0,0,5886,5733,1,0,0,0,5886,5736,1,0,0,
        0,5886,5756,1,0,0,0,5886,5761,1,0,0,0,5886,5775,1,0,0,0,5886,5782,
        1,0,0,0,5886,5786,1,0,0,0,5886,5790,1,0,0,0,5886,5795,1,0,0,0,5886,
        5797,1,0,0,0,5886,5808,1,0,0,0,5886,5814,1,0,0,0,5886,5823,1,0,0,
        0,5886,5827,1,0,0,0,5886,5833,1,0,0,0,5886,5845,1,0,0,0,5886,5855,
        1,0,0,0,5886,5878,1,0,0,0,5887,489,1,0,0,0,5888,5899,5,1159,0,0,
        5889,5899,5,1160,0,0,5890,5891,5,1137,0,0,5891,5893,5,1137,0,0,5892,
        5890,1,0,0,0,5892,5893,1,0,0,0,5893,5894,1,0,0,0,5894,5896,7,83,
        0,0,5895,5892,1,0,0,0,5895,5896,1,0,0,0,5896,5897,1,0,0,0,5897,5899,
        3,584,292,0,5898,5888,1,0,0,0,5898,5889,1,0,0,0,5898,5895,1,0,0,
        0,5899,491,1,0,0,0,5900,5901,5,25,0,0,5901,5914,5,153,0,0,5902,5914,
        5,844,0,0,5903,5914,5,40,0,0,5904,5914,5,151,0,0,5905,5906,5,437,
        0,0,5906,5914,5,634,0,0,5907,5908,5,131,0,0,5908,5914,5,634,0,0,
        5909,5911,7,55,0,0,5910,5909,1,0,0,0,5910,5911,1,0,0,0,5911,5912,
        1,0,0,0,5912,5914,7,84,0,0,5913,5900,1,0,0,0,5913,5902,1,0,0,0,5913,
        5903,1,0,0,0,5913,5904,1,0,0,0,5913,5905,1,0,0,0,5913,5907,1,0,0,
        0,5913,5910,1,0,0,0,5914,493,1,0,0,0,5915,5916,5,98,0,0,5916,5920,
        5,1148,0,0,5917,5918,5,190,0,0,5918,5920,3,688,344,0,5919,5915,1,
        0,0,0,5919,5917,1,0,0,0,5920,495,1,0,0,0,5921,5923,5,636,0,0,5922,
        5921,1,0,0,0,5922,5923,1,0,0,0,5923,5924,1,0,0,0,5924,5939,5,410,
        0,0,5925,5926,5,477,0,0,5926,5939,5,634,0,0,5927,5939,5,556,0,0,
        5928,5939,5,725,0,0,5929,5931,5,436,0,0,5930,5929,1,0,0,0,5930,5931,
        1,0,0,0,5931,5932,1,0,0,0,5932,5939,5,563,0,0,5933,5939,5,565,0,
        0,5934,5935,5,614,0,0,5935,5939,5,447,0,0,5936,5939,5,339,0,0,5937,
        5939,5,383,0,0,5938,5922,1,0,0,0,5938,5925,1,0,0,0,5938,5927,1,0,
        0,0,5938,5928,1,0,0,0,5938,5930,1,0,0,0,5938,5933,1,0,0,0,5938,5934,
        1,0,0,0,5938,5936,1,0,0,0,5938,5937,1,0,0,0,5939,497,1,0,0,0,5940,
        5949,5,416,0,0,5941,5942,5,172,0,0,5942,5949,5,634,0,0,5943,5945,
        5,436,0,0,5944,5943,1,0,0,0,5944,5945,1,0,0,0,5945,5946,1,0,0,0,
        5946,5949,5,742,0,0,5947,5949,5,655,0,0,5948,5940,1,0,0,0,5948,5941,
        1,0,0,0,5948,5944,1,0,0,0,5948,5947,1,0,0,0,5949,499,1,0,0,0,5950,
        5963,5,6,0,0,5951,5952,5,347,0,0,5952,5963,5,461,0,0,5953,5954,5,
        382,0,0,5954,5963,5,645,0,0,5955,5963,5,385,0,0,5956,5963,5,463,
        0,0,5957,5963,5,792,0,0,5958,5959,5,544,0,0,5959,5963,5,426,0,0,
        5960,5963,5,621,0,0,5961,5963,5,644,0,0,5962,5950,1,0,0,0,5962,5951,
        1,0,0,0,5962,5953,1,0,0,0,5962,5955,1,0,0,0,5962,5956,1,0,0,0,5962,
        5957,1,0,0,0,5962,5958,1,0,0,0,5962,5960,1,0,0,0,5962,5961,1,0,0,
        0,5963,501,1,0,0,0,5964,5965,5,345,0,0,5965,5966,5,1148,0,0,5966,
        503,1,0,0,0,5967,5968,5,351,0,0,5968,5969,5,81,0,0,5969,5974,3,516,
        258,0,5970,5971,5,1135,0,0,5971,5973,3,516,258,0,5972,5970,1,0,0,
        0,5973,5976,1,0,0,0,5974,5972,1,0,0,0,5974,5975,1,0,0,0,5975,5984,
        1,0,0,0,5976,5974,1,0,0,0,5977,5978,5,129,0,0,5978,5981,5,1133,0,
        0,5979,5982,3,616,308,0,5980,5982,5,6,0,0,5981,5979,1,0,0,0,5981,
        5980,1,0,0,0,5982,5983,1,0,0,0,5983,5985,5,1134,0,0,5984,5977,1,
        0,0,0,5984,5985,1,0,0,0,5985,5986,1,0,0,0,5986,5987,5,80,0,0,5987,
        5988,3,584,292,0,5988,505,1,0,0,0,5989,5991,5,432,0,0,5990,5992,
        7,72,0,0,5991,5990,1,0,0,0,5991,5992,1,0,0,0,5992,5993,1,0,0,0,5993,
        5998,3,518,259,0,5994,5995,5,1135,0,0,5995,5997,3,518,259,0,5996,
        5994,1,0,0,0,5997,6000,1,0,0,0,5998,5996,1,0,0,0,5998,5999,1,0,0,
        0,5999,507,1,0,0,0,6000,5998,1,0,0,0,6001,6003,5,93,0,0,6002,6004,
        7,85,0,0,6003,6002,1,0,0,0,6003,6004,1,0,0,0,6004,6005,1,0,0,0,6005,
        6006,3,688,344,0,6006,509,1,0,0,0,6007,6008,5,102,0,0,6008,6009,
        5,81,0,0,6009,6010,5,87,0,0,6010,6011,5,351,0,0,6011,6016,3,522,
        261,0,6012,6013,5,1135,0,0,6013,6015,3,522,261,0,6014,6012,1,0,0,
        0,6015,6018,1,0,0,0,6016,6014,1,0,0,0,6016,6017,1,0,0,0,6017,511,
        1,0,0,0,6018,6016,1,0,0,0,6019,6020,5,589,0,0,6020,6021,5,567,0,
        0,6021,6022,5,351,0,0,6022,513,1,0,0,0,6023,6024,5,739,0,0,6024,
        515,1,0,0,0,6025,6033,3,550,275,0,6026,6028,7,20,0,0,6027,6026,1,
        0,0,0,6027,6028,1,0,0,0,6028,6029,1,0,0,0,6029,6030,5,1133,0,0,6030,
        6031,3,616,308,0,6031,6032,5,1134,0,0,6032,6034,1,0,0,0,6033,6027,
        1,0,0,0,6033,6034,1,0,0,0,6034,517,1,0,0,0,6035,6054,5,394,0,0,6036,
        6054,5,447,0,0,6037,6039,7,86,0,0,6038,6037,1,0,0,0,6038,6039,1,
        0,0,0,6039,6040,1,0,0,0,6040,6054,5,476,0,0,6041,6054,5,540,0,0,
        6042,6054,5,725,0,0,6043,6044,5,567,0,0,6044,6054,5,351,0,0,6045,
        6054,5,634,0,0,6046,6054,5,667,0,0,6047,6051,5,742,0,0,6048,6049,
        5,192,0,0,6049,6050,5,134,0,0,6050,6052,5,103,0,0,6051,6048,1,0,
        0,0,6051,6052,1,0,0,0,6052,6054,1,0,0,0,6053,6035,1,0,0,0,6053,6036,
        1,0,0,0,6053,6038,1,0,0,0,6053,6041,1,0,0,0,6053,6042,1,0,0,0,6053,
        6043,1,0,0,0,6053,6045,1,0,0,0,6053,6046,1,0,0,0,6053,6047,1,0,0,
        0,6054,6068,1,0,0,0,6055,6056,5,574,0,0,6056,6058,5,476,0,0,6057,
        6059,3,354,177,0,6058,6057,1,0,0,0,6058,6059,1,0,0,0,6059,6068,1,
        0,0,0,6060,6062,7,54,0,0,6061,6063,3,620,310,0,6062,6061,1,0,0,0,
        6062,6063,1,0,0,0,6063,6065,1,0,0,0,6064,6066,3,520,260,0,6065,6064,
        1,0,0,0,6065,6066,1,0,0,0,6066,6068,1,0,0,0,6067,6053,1,0,0,0,6067,
        6055,1,0,0,0,6067,6060,1,0,0,0,6068,519,1,0,0,0,6069,6070,5,192,
        0,0,6070,6071,5,134,0,0,6071,6075,5,103,0,0,6072,6073,5,65,0,0,6073,
        6075,5,421,0,0,6074,6069,1,0,0,0,6074,6072,1,0,0,0,6075,521,1,0,
        0,0,6076,6084,3,550,275,0,6077,6078,5,129,0,0,6078,6081,5,1133,0,
        0,6079,6082,3,616,308,0,6080,6082,5,6,0,0,6081,6079,1,0,0,0,6081,
        6080,1,0,0,0,6082,6083,1,0,0,0,6083,6085,5,1134,0,0,6084,6077,1,
        0,0,0,6084,6085,1,0,0,0,6085,6093,1,0,0,0,6086,6088,7,20,0,0,6087,
        6086,1,0,0,0,6087,6088,1,0,0,0,6088,6089,1,0,0,0,6089,6090,5,1133,
        0,0,6090,6091,3,616,308,0,6091,6092,5,1134,0,0,6092,6094,1,0,0,0,
        6093,6087,1,0,0,0,6093,6094,1,0,0,0,6094,6097,1,0,0,0,6095,6096,
        5,78,0,0,6096,6098,5,470,0,0,6097,6095,1,0,0,0,6097,6098,1,0,0,0,
        6098,523,1,0,0,0,6099,6100,7,87,0,0,6100,6103,3,550,275,0,6101,6104,
        3,584,292,0,6102,6104,5,1148,0,0,6103,6101,1,0,0,0,6103,6102,1,0,
        0,0,6103,6104,1,0,0,0,6104,525,1,0,0,0,6105,6109,7,87,0,0,6106,6107,
        7,88,0,0,6107,6108,5,1124,0,0,6108,6110,7,89,0,0,6109,6106,1,0,0,
        0,6109,6110,1,0,0,0,6110,6111,1,0,0,0,6111,6112,3,546,273,0,6112,
        527,1,0,0,0,6113,6114,5,444,0,0,6114,6115,5,1148,0,0,6115,529,1,
        0,0,0,6116,6117,5,186,0,0,6117,6118,3,584,292,0,6118,531,1,0,0,0,
        6119,6127,5,156,0,0,6120,6122,5,162,0,0,6121,6123,5,669,0,0,6122,
        6121,1,0,0,0,6122,6123,1,0,0,0,6123,6124,1,0,0,0,6124,6128,3,594,
        297,0,6125,6128,5,1156,0,0,6126,6128,5,1157,0,0,6127,6120,1,0,0,
        0,6127,6125,1,0,0,0,6127,6126,1,0,0,0,6128,6138,1,0,0,0,6129,6130,
        5,153,0,0,6130,6135,3,536,268,0,6131,6132,5,1135,0,0,6132,6134,3,
        536,268,0,6133,6131,1,0,0,0,6134,6137,1,0,0,0,6135,6133,1,0,0,0,
        6135,6136,1,0,0,0,6136,6139,1,0,0,0,6137,6135,1,0,0,0,6138,6129,
        1,0,0,0,6138,6139,1,0,0,0,6139,533,1,0,0,0,6140,6148,5,143,0,0,6141,
        6143,5,162,0,0,6142,6144,5,669,0,0,6143,6142,1,0,0,0,6143,6144,1,
        0,0,0,6144,6145,1,0,0,0,6145,6149,3,594,297,0,6146,6149,5,1156,0,
        0,6147,6149,5,1157,0,0,6148,6141,1,0,0,0,6148,6146,1,0,0,0,6148,
        6147,1,0,0,0,6148,6149,1,0,0,0,6149,6159,1,0,0,0,6150,6151,5,153,
        0,0,6151,6156,3,536,268,0,6152,6153,5,1135,0,0,6153,6155,3,536,268,
        0,6154,6152,1,0,0,0,6155,6158,1,0,0,0,6156,6154,1,0,0,0,6156,6157,
        1,0,0,0,6157,6160,1,0,0,0,6158,6156,1,0,0,0,6159,6150,1,0,0,0,6159,
        6160,1,0,0,0,6160,535,1,0,0,0,6161,6162,7,90,0,0,6162,6167,5,1124,
        0,0,6163,6168,3,594,297,0,6164,6168,5,1149,0,0,6165,6168,3,566,283,
        0,6166,6168,3,586,293,0,6167,6163,1,0,0,0,6167,6164,1,0,0,0,6167,
        6165,1,0,0,0,6167,6166,1,0,0,0,6168,537,1,0,0,0,6169,6171,5,192,
        0,0,6170,6172,5,571,0,0,6171,6170,1,0,0,0,6171,6172,1,0,0,0,6172,
        6173,1,0,0,0,6173,6178,3,48,24,0,6174,6175,5,1135,0,0,6175,6177,
        3,48,24,0,6176,6174,1,0,0,0,6177,6180,1,0,0,0,6178,6176,1,0,0,0,
        6178,6179,1,0,0,0,6179,539,1,0,0,0,6180,6178,1,0,0,0,6181,6182,5,
        172,0,0,6182,6184,3,550,275,0,6183,6185,3,228,114,0,6184,6183,1,
        0,0,0,6184,6185,1,0,0,0,6185,6187,1,0,0,0,6186,6188,3,292,146,0,
        6187,6186,1,0,0,0,6187,6188,1,0,0,0,6188,541,1,0,0,0,6189,6191,5,
        71,0,0,6190,6192,7,91,0,0,6191,6190,1,0,0,0,6191,6192,1,0,0,0,6192,
        6193,1,0,0,0,6193,6225,5,48,0,0,6194,6195,3,490,245,0,6195,6196,
        5,1124,0,0,6196,6204,7,92,0,0,6197,6198,5,1135,0,0,6198,6199,3,490,
        245,0,6199,6200,5,1124,0,0,6200,6201,7,92,0,0,6201,6203,1,0,0,0,
        6202,6197,1,0,0,0,6203,6206,1,0,0,0,6204,6202,1,0,0,0,6204,6205,
        1,0,0,0,6205,6226,1,0,0,0,6206,6204,1,0,0,0,6207,6210,5,29,0,0,6208,
        6211,3,590,295,0,6209,6211,3,490,245,0,6210,6208,1,0,0,0,6210,6209,
        1,0,0,0,6211,6212,1,0,0,0,6212,6213,3,490,245,0,6213,6214,5,1124,
        0,0,6214,6222,3,544,272,0,6215,6216,5,1135,0,0,6216,6217,3,490,245,
        0,6217,6218,5,1124,0,0,6218,6219,3,544,272,0,6219,6221,1,0,0,0,6220,
        6215,1,0,0,0,6221,6224,1,0,0,0,6222,6220,1,0,0,0,6222,6223,1,0,0,
        0,6223,6226,1,0,0,0,6224,6222,1,0,0,0,6225,6194,1,0,0,0,6225,6207,
        1,0,0,0,6226,543,1,0,0,0,6227,6228,7,93,0,0,6228,545,1,0,0,0,6229,
        6235,3,198,99,0,6230,6235,3,184,92,0,6231,6235,3,190,95,0,6232,6235,
        3,196,98,0,6233,6235,3,200,100,0,6234,6229,1,0,0,0,6234,6230,1,0,
        0,0,6234,6231,1,0,0,0,6234,6232,1,0,0,0,6234,6233,1,0,0,0,6235,6240,
        1,0,0,0,6236,6237,5,65,0,0,6237,6238,5,376,0,0,6238,6240,3,584,292,
        0,6239,6234,1,0,0,0,6239,6236,1,0,0,0,6240,547,1,0,0,0,6241,6245,
        3,584,292,0,6242,6246,5,1155,0,0,6243,6244,5,1132,0,0,6244,6246,
        3,584,292,0,6245,6242,1,0,0,0,6245,6243,1,0,0,0,6245,6246,1,0,0,
        0,6246,549,1,0,0,0,6247,6248,3,548,274,0,6248,551,1,0,0,0,6249,6254,
        3,550,275,0,6250,6251,5,1135,0,0,6251,6253,3,550,275,0,6252,6250,
        1,0,0,0,6253,6256,1,0,0,0,6254,6252,1,0,0,0,6254,6255,1,0,0,0,6255,
        553,1,0,0,0,6256,6254,1,0,0,0,6257,6260,3,564,282,0,6258,6260,3,
        584,292,0,6259,6257,1,0,0,0,6259,6258,1,0,0,0,6260,555,1,0,0,0,6261,
        6266,3,584,292,0,6262,6264,3,588,294,0,6263,6265,3,588,294,0,6264,
        6263,1,0,0,0,6264,6265,1,0,0,0,6265,6267,1,0,0,0,6266,6262,1,0,0,
        0,6266,6267,1,0,0,0,6267,6276,1,0,0,0,6268,6270,9,0,0,0,6269,6268,
        1,0,0,0,6269,6270,1,0,0,0,6270,6271,1,0,0,0,6271,6273,3,588,294,
        0,6272,6274,3,588,294,0,6273,6272,1,0,0,0,6273,6274,1,0,0,0,6274,
        6276,1,0,0,0,6275,6261,1,0,0,0,6275,6269,1,0,0,0,6276,557,1,0,0,
        0,6277,6280,3,584,292,0,6278,6280,5,1148,0,0,6279,6277,1,0,0,0,6279,
        6278,1,0,0,0,6280,6285,1,0,0,0,6281,6282,5,1133,0,0,6282,6283,3,
        590,295,0,6283,6284,5,1134,0,0,6284,6286,1,0,0,0,6285,6281,1,0,0,
        0,6285,6286,1,0,0,0,6286,6289,1,0,0,0,6287,6289,3,688,344,0,6288,
        6279,1,0,0,0,6288,6287,1,0,0,0,6289,6291,1,0,0,0,6290,6292,7,48,
        0,0,6291,6290,1,0,0,0,6291,6292,1,0,0,0,6292,559,1,0,0,0,6293,6298,
        5,1148,0,0,6294,6298,5,1156,0,0,6295,6298,5,697,0,0,6296,6298,3,
        718,359,0,6297,6293,1,0,0,0,6297,6294,1,0,0,0,6297,6295,1,0,0,0,
        6297,6296,1,0,0,0,6298,561,1,0,0,0,6299,6300,7,94,0,0,6300,563,1,
        0,0,0,6301,6307,3,560,280,0,6302,6303,3,560,280,0,6303,6304,3,562,
        281,0,6304,6307,1,0,0,0,6305,6307,3,60,30,0,6306,6301,1,0,0,0,6306,
        6302,1,0,0,0,6306,6305,1,0,0,0,6307,565,1,0,0,0,6308,6309,7,95,0,
        0,6309,567,1,0,0,0,6310,6315,5,226,0,0,6311,6315,3,708,354,0,6312,
        6315,5,1148,0,0,6313,6315,5,1145,0,0,6314,6310,1,0,0,0,6314,6311,
        1,0,0,0,6314,6312,1,0,0,0,6314,6313,1,0,0,0,6315,569,1,0,0,0,6316,
        6319,3,584,292,0,6317,6319,5,1148,0,0,6318,6316,1,0,0,0,6318,6317,
        1,0,0,0,6319,571,1,0,0,0,6320,6324,3,574,287,0,6321,6324,5,1156,
        0,0,6322,6324,5,1148,0,0,6323,6320,1,0,0,0,6323,6321,1,0,0,0,6323,
        6322,1,0,0,0,6324,573,1,0,0,0,6325,6326,7,96,0,0,6326,575,1,0,0,
        0,6327,6328,3,590,295,0,6328,6329,5,1121,0,0,6329,6330,3,590,295,
        0,6330,6331,5,1121,0,0,6331,6332,3,590,295,0,6332,6333,5,1121,0,
        0,6333,6334,3,590,295,0,6334,6335,5,1121,0,0,6335,6341,3,590,295,
        0,6336,6337,5,1144,0,0,6337,6338,3,590,295,0,6338,6339,5,1121,0,
        0,6339,6340,3,590,295,0,6340,6342,1,0,0,0,6341,6336,1,0,0,0,6342,
        6343,1,0,0,0,6343,6341,1,0,0,0,6343,6344,1,0,0,0,6344,577,1,0,0,
        0,6345,6352,3,580,290,0,6346,6347,5,1135,0,0,6347,6350,3,580,290,
        0,6348,6349,5,1135,0,0,6349,6351,3,590,295,0,6350,6348,1,0,0,0,6350,
        6351,1,0,0,0,6351,6353,1,0,0,0,6352,6346,1,0,0,0,6352,6353,1,0,0,
        0,6353,579,1,0,0,0,6354,6362,5,1148,0,0,6355,6362,5,1153,0,0,6356,
        6358,5,1150,0,0,6357,6356,1,0,0,0,6358,6359,1,0,0,0,6359,6357,1,
        0,0,0,6359,6360,1,0,0,0,6360,6362,1,0,0,0,6361,6354,1,0,0,0,6361,
        6355,1,0,0,0,6361,6357,1,0,0,0,6362,581,1,0,0,0,6363,6366,3,584,
        292,0,6364,6366,5,1148,0,0,6365,6363,1,0,0,0,6365,6364,1,0,0,0,6366,
        583,1,0,0,0,6367,6371,3,586,293,0,6368,6371,5,1145,0,0,6369,6371,
        5,1148,0,0,6370,6367,1,0,0,0,6370,6368,1,0,0,0,6370,6369,1,0,0,0,
        6371,585,1,0,0,0,6372,6382,5,1156,0,0,6373,6382,3,708,354,0,6374,
        6382,3,710,355,0,6375,6382,3,574,287,0,6376,6382,3,712,356,0,6377,
        6382,3,714,357,0,6378,6382,3,716,358,0,6379,6382,3,718,359,0,6380,
        6382,3,680,340,0,6381,6372,1,0,0,0,6381,6373,1,0,0,0,6381,6374,1,
        0,0,0,6381,6375,1,0,0,0,6381,6376,1,0,0,0,6381,6377,1,0,0,0,6381,
        6378,1,0,0,0,6381,6379,1,0,0,0,6381,6380,1,0,0,0,6382,587,1,0,0,
        0,6383,6387,5,1155,0,0,6384,6385,5,1132,0,0,6385,6387,3,584,292,
        0,6386,6383,1,0,0,0,6386,6384,1,0,0,0,6387,589,1,0,0,0,6388,6389,
        7,97,0,0,6389,591,1,0,0,0,6390,6393,5,1146,0,0,6391,6393,3,590,295,
        0,6392,6390,1,0,0,0,6392,6391,1,0,0,0,6393,593,1,0,0,0,6394,6396,
        5,1154,0,0,6395,6394,1,0,0,0,6395,6396,1,0,0,0,6396,6397,1,0,0,0,
        6397,6400,5,1148,0,0,6398,6400,5,1147,0,0,6399,6395,1,0,0,0,6399,
        6398,1,0,0,0,6400,6402,1,0,0,0,6401,6403,5,1148,0,0,6402,6401,1,
        0,0,0,6403,6404,1,0,0,0,6404,6402,1,0,0,0,6404,6405,1,0,0,0,6405,
        6418,1,0,0,0,6406,6408,5,1154,0,0,6407,6406,1,0,0,0,6407,6408,1,
        0,0,0,6408,6409,1,0,0,0,6409,6412,5,1148,0,0,6410,6412,5,1147,0,
        0,6411,6407,1,0,0,0,6411,6410,1,0,0,0,6412,6415,1,0,0,0,6413,6414,
        5,27,0,0,6414,6416,3,570,285,0,6415,6413,1,0,0,0,6415,6416,1,0,0,
        0,6416,6418,1,0,0,0,6417,6399,1,0,0,0,6417,6411,1,0,0,0,6418,595,
        1,0,0,0,6419,6420,7,98,0,0,6420,597,1,0,0,0,6421,6423,5,1154,0,0,
        6422,6421,1,0,0,0,6422,6423,1,0,0,0,6423,6424,1,0,0,0,6424,6425,
        5,1150,0,0,6425,599,1,0,0,0,6426,6428,5,114,0,0,6427,6426,1,0,0,
        0,6427,6428,1,0,0,0,6428,6429,1,0,0,0,6429,6430,7,99,0,0,6430,601,
        1,0,0,0,6431,6444,3,594,297,0,6432,6444,3,590,295,0,6433,6434,5,
        1121,0,0,6434,6444,3,590,295,0,6435,6444,3,598,299,0,6436,6444,3,
        596,298,0,6437,6444,5,1151,0,0,6438,6444,5,1153,0,0,6439,6441,5,
        114,0,0,6440,6439,1,0,0,0,6440,6441,1,0,0,0,6441,6442,1,0,0,0,6442,
        6444,7,99,0,0,6443,6431,1,0,0,0,6443,6432,1,0,0,0,6443,6433,1,0,
        0,0,6443,6435,1,0,0,0,6443,6436,1,0,0,0,6443,6437,1,0,0,0,6443,6438,
        1,0,0,0,6443,6440,1,0,0,0,6444,603,1,0,0,0,6445,6447,7,100,0,0,6446,
        6448,5,238,0,0,6447,6446,1,0,0,0,6447,6448,1,0,0,0,6448,6450,1,0,
        0,0,6449,6451,3,610,305,0,6450,6449,1,0,0,0,6450,6451,1,0,0,0,6451,
        6453,1,0,0,0,6452,6454,5,226,0,0,6453,6452,1,0,0,0,6453,6454,1,0,
        0,0,6454,6458,1,0,0,0,6455,6456,3,58,29,0,6456,6457,3,568,284,0,
        6457,6459,1,0,0,0,6458,6455,1,0,0,0,6458,6459,1,0,0,0,6459,6463,
        1,0,0,0,6460,6461,5,27,0,0,6461,6464,3,570,285,0,6462,6464,5,226,
        0,0,6463,6460,1,0,0,0,6463,6462,1,0,0,0,6463,6464,1,0,0,0,6464,6572,
        1,0,0,0,6465,6466,5,225,0,0,6466,6467,7,101,0,0,6467,6469,5,238,
        0,0,6468,6470,3,610,305,0,6469,6468,1,0,0,0,6469,6470,1,0,0,0,6470,
        6472,1,0,0,0,6471,6473,5,226,0,0,6472,6471,1,0,0,0,6472,6473,1,0,
        0,0,6473,6572,1,0,0,0,6474,6475,5,225,0,0,6475,6477,7,102,0,0,6476,
        6478,3,610,305,0,6477,6476,1,0,0,0,6477,6478,1,0,0,0,6478,6480,1,
        0,0,0,6479,6481,5,226,0,0,6480,6479,1,0,0,0,6480,6481,1,0,0,0,6481,
        6572,1,0,0,0,6482,6483,5,518,0,0,6483,6485,5,223,0,0,6484,6486,3,
        610,305,0,6485,6484,1,0,0,0,6485,6486,1,0,0,0,6486,6488,1,0,0,0,
        6487,6489,5,226,0,0,6488,6487,1,0,0,0,6488,6489,1,0,0,0,6489,6572,
        1,0,0,0,6490,6492,7,103,0,0,6491,6493,3,610,305,0,6492,6491,1,0,
        0,0,6492,6493,1,0,0,0,6493,6497,1,0,0,0,6494,6496,7,104,0,0,6495,
        6494,1,0,0,0,6496,6499,1,0,0,0,6497,6495,1,0,0,0,6497,6498,1,0,0,
        0,6498,6572,1,0,0,0,6499,6497,1,0,0,0,6500,6502,5,208,0,0,6501,6503,
        3,612,306,0,6502,6501,1,0,0,0,6502,6503,1,0,0,0,6503,6507,1,0,0,
        0,6504,6506,7,104,0,0,6505,6504,1,0,0,0,6506,6509,1,0,0,0,6507,6505,
        1,0,0,0,6507,6508,1,0,0,0,6508,6572,1,0,0,0,6509,6507,1,0,0,0,6510,
        6512,5,209,0,0,6511,6513,5,210,0,0,6512,6511,1,0,0,0,6512,6513,1,
        0,0,0,6513,6515,1,0,0,0,6514,6516,3,612,306,0,6515,6514,1,0,0,0,
        6515,6516,1,0,0,0,6516,6520,1,0,0,0,6517,6519,7,104,0,0,6518,6517,
        1,0,0,0,6519,6522,1,0,0,0,6520,6518,1,0,0,0,6520,6521,1,0,0,0,6521,
        6572,1,0,0,0,6522,6520,1,0,0,0,6523,6525,7,105,0,0,6524,6526,3,614,
        307,0,6525,6524,1,0,0,0,6525,6526,1,0,0,0,6526,6530,1,0,0,0,6527,
        6529,7,104,0,0,6528,6527,1,0,0,0,6529,6532,1,0,0,0,6530,6528,1,0,
        0,0,6530,6531,1,0,0,0,6531,6572,1,0,0,0,6532,6530,1,0,0,0,6533,6572,
        7,106,0,0,6534,6536,7,107,0,0,6535,6537,3,610,305,0,6536,6535,1,
        0,0,0,6536,6537,1,0,0,0,6537,6572,1,0,0,0,6538,6539,7,108,0,0,6539,
        6541,3,606,303,0,6540,6542,5,226,0,0,6541,6540,1,0,0,0,6541,6542,
        1,0,0,0,6542,6546,1,0,0,0,6543,6544,3,58,29,0,6544,6545,3,568,284,
        0,6545,6547,1,0,0,0,6546,6543,1,0,0,0,6546,6547,1,0,0,0,6547,6572,
        1,0,0,0,6548,6551,7,109,0,0,6549,6550,5,1012,0,0,6550,6552,3,590,
        295,0,6551,6549,1,0,0,0,6551,6552,1,0,0,0,6552,6572,1,0,0,0,6553,
        6555,5,231,0,0,6554,6556,5,223,0,0,6555,6554,1,0,0,0,6555,6556,1,
        0,0,0,6556,6558,1,0,0,0,6557,6559,5,226,0,0,6558,6557,1,0,0,0,6558,
        6559,1,0,0,0,6559,6563,1,0,0,0,6560,6561,3,58,29,0,6561,6562,3,568,
        284,0,6562,6564,1,0,0,0,6563,6560,1,0,0,0,6563,6564,1,0,0,0,6564,
        6567,1,0,0,0,6565,6566,5,27,0,0,6566,6568,3,570,285,0,6567,6565,
        1,0,0,0,6567,6568,1,0,0,0,6568,6572,1,0,0,0,6569,6570,5,231,0,0,
        6570,6572,5,227,0,0,6571,6445,1,0,0,0,6571,6465,1,0,0,0,6571,6474,
        1,0,0,0,6571,6482,1,0,0,0,6571,6490,1,0,0,0,6571,6500,1,0,0,0,6571,
        6510,1,0,0,0,6571,6523,1,0,0,0,6571,6533,1,0,0,0,6571,6534,1,0,0,
        0,6571,6538,1,0,0,0,6571,6548,1,0,0,0,6571,6553,1,0,0,0,6571,6569,
        1,0,0,0,6572,605,1,0,0,0,6573,6574,5,1133,0,0,6574,6579,5,1148,0,
        0,6575,6576,5,1135,0,0,6576,6578,5,1148,0,0,6577,6575,1,0,0,0,6578,
        6581,1,0,0,0,6579,6577,1,0,0,0,6579,6580,1,0,0,0,6580,6582,1,0,0,
        0,6581,6579,1,0,0,0,6582,6583,5,1134,0,0,6583,607,1,0,0,0,6584,6586,
        7,110,0,0,6585,6587,3,610,305,0,6586,6585,1,0,0,0,6586,6587,1,0,
        0,0,6587,6607,1,0,0,0,6588,6590,5,222,0,0,6589,6591,3,610,305,0,
        6590,6589,1,0,0,0,6590,6591,1,0,0,0,6591,6595,1,0,0,0,6592,6593,
        3,58,29,0,6593,6594,3,568,284,0,6594,6596,1,0,0,0,6595,6592,1,0,
        0,0,6595,6596,1,0,0,0,6596,6607,1,0,0,0,6597,6607,7,111,0,0,6598,
        6600,7,112,0,0,6599,6601,3,614,307,0,6600,6599,1,0,0,0,6600,6601,
        1,0,0,0,6601,6607,1,0,0,0,6602,6604,7,113,0,0,6603,6605,7,114,0,
        0,6604,6603,1,0,0,0,6604,6605,1,0,0,0,6605,6607,1,0,0,0,6606,6584,
        1,0,0,0,6606,6588,1,0,0,0,6606,6597,1,0,0,0,6606,6598,1,0,0,0,6606,
        6602,1,0,0,0,6607,6609,1,0,0,0,6608,6610,5,11,0,0,6609,6608,1,0,
        0,0,6609,6610,1,0,0,0,6610,609,1,0,0,0,6611,6612,5,1133,0,0,6612,
        6613,3,590,295,0,6613,6614,5,1134,0,0,6614,611,1,0,0,0,6615,6616,
        5,1133,0,0,6616,6617,3,590,295,0,6617,6618,5,1135,0,0,6618,6619,
        3,590,295,0,6619,6620,5,1134,0,0,6620,613,1,0,0,0,6621,6622,5,1133,
        0,0,6622,6625,3,590,295,0,6623,6624,5,1135,0,0,6624,6626,3,590,295,
        0,6625,6623,1,0,0,0,6625,6626,1,0,0,0,6626,6627,1,0,0,0,6627,6628,
        5,1134,0,0,6628,615,1,0,0,0,6629,6634,3,584,292,0,6630,6631,5,1135,
        0,0,6631,6633,3,584,292,0,6632,6630,1,0,0,0,6633,6636,1,0,0,0,6634,
        6632,1,0,0,0,6634,6635,1,0,0,0,6635,617,1,0,0,0,6636,6634,1,0,0,
        0,6637,6642,3,556,278,0,6638,6639,5,1135,0,0,6639,6641,3,556,278,
        0,6640,6638,1,0,0,0,6641,6644,1,0,0,0,6642,6640,1,0,0,0,6642,6643,
        1,0,0,0,6643,619,1,0,0,0,6644,6642,1,0,0,0,6645,6650,3,550,275,0,
        6646,6647,5,1135,0,0,6647,6649,3,550,275,0,6648,6646,1,0,0,0,6649,
        6652,1,0,0,0,6650,6648,1,0,0,0,6650,6651,1,0,0,0,6651,621,1,0,0,
        0,6652,6650,1,0,0,0,6653,6654,5,1133,0,0,6654,6659,3,558,279,0,6655,
        6656,5,1135,0,0,6656,6658,3,558,279,0,6657,6655,1,0,0,0,6658,6661,
        1,0,0,0,6659,6657,1,0,0,0,6659,6660,1,0,0,0,6660,6662,1,0,0,0,6661,
        6659,1,0,0,0,6662,6663,5,1134,0,0,6663,623,1,0,0,0,6664,6669,3,688,
        344,0,6665,6666,5,1135,0,0,6666,6668,3,688,344,0,6667,6665,1,0,0,
        0,6668,6671,1,0,0,0,6669,6667,1,0,0,0,6669,6670,1,0,0,0,6670,625,
        1,0,0,0,6671,6669,1,0,0,0,6672,6677,3,638,319,0,6673,6674,5,1135,
        0,0,6674,6676,3,638,319,0,6675,6673,1,0,0,0,6676,6679,1,0,0,0,6677,
        6675,1,0,0,0,6677,6678,1,0,0,0,6678,627,1,0,0,0,6679,6677,1,0,0,
        0,6680,6685,3,602,301,0,6681,6682,5,1135,0,0,6682,6684,3,602,301,
        0,6683,6681,1,0,0,0,6684,6687,1,0,0,0,6685,6683,1,0,0,0,6685,6686,
        1,0,0,0,6686,629,1,0,0,0,6687,6685,1,0,0,0,6688,6693,5,1148,0,0,
        6689,6690,5,1135,0,0,6690,6692,5,1148,0,0,6691,6689,1,0,0,0,6692,
        6695,1,0,0,0,6693,6691,1,0,0,0,6693,6694,1,0,0,0,6694,631,1,0,0,
        0,6695,6693,1,0,0,0,6696,6701,5,1159,0,0,6697,6698,5,1135,0,0,6698,
        6700,5,1159,0,0,6699,6697,1,0,0,0,6700,6703,1,0,0,0,6701,6699,1,
        0,0,0,6701,6702,1,0,0,0,6702,633,1,0,0,0,6703,6701,1,0,0,0,6704,
        6731,5,116,0,0,6705,6706,5,23,0,0,6706,6707,5,1133,0,0,6707,6708,
        3,688,344,0,6708,6709,5,12,0,0,6709,6710,3,608,304,0,6710,6711,5,
        1134,0,0,6711,6731,1,0,0,0,6712,6714,3,694,347,0,6713,6712,1,0,0,
        0,6713,6714,1,0,0,0,6714,6715,1,0,0,0,6715,6731,3,602,301,0,6716,
        6720,3,636,318,0,6717,6718,5,118,0,0,6718,6719,5,184,0,0,6719,6721,
        3,636,318,0,6720,6717,1,0,0,0,6720,6721,1,0,0,0,6721,6731,1,0,0,
        0,6722,6723,5,1133,0,0,6723,6724,3,688,344,0,6724,6725,5,1134,0,
        0,6725,6731,1,0,0,0,6726,6727,5,1133,0,0,6727,6728,3,548,274,0,6728,
        6729,5,1134,0,0,6729,6731,1,0,0,0,6730,6704,1,0,0,0,6730,6705,1,
        0,0,0,6730,6713,1,0,0,0,6730,6716,1,0,0,0,6730,6722,1,0,0,0,6730,
        6726,1,0,0,0,6731,635,1,0,0,0,6732,6738,7,115,0,0,6733,6735,5,1133,
        0,0,6734,6736,3,590,295,0,6735,6734,1,0,0,0,6735,6736,1,0,0,0,6736,
        6737,1,0,0,0,6737,6739,5,1134,0,0,6738,6733,1,0,0,0,6738,6739,1,
        0,0,0,6739,6747,1,0,0,0,6740,6741,5,323,0,0,6741,6743,5,1133,0,0,
        6742,6744,3,590,295,0,6743,6742,1,0,0,0,6743,6744,1,0,0,0,6744,6745,
        1,0,0,0,6745,6747,5,1134,0,0,6746,6732,1,0,0,0,6746,6740,1,0,0,0,
        6747,637,1,0,0,0,6748,6751,3,688,344,0,6749,6751,5,42,0,0,6750,6748,
        1,0,0,0,6750,6749,1,0,0,0,6751,639,1,0,0,0,6752,6753,5,77,0,0,6753,
        6754,5,60,0,0,6754,641,1,0,0,0,6755,6756,5,77,0,0,6756,6757,5,114,
        0,0,6757,6758,5,60,0,0,6758,643,1,0,0,0,6759,6760,5,123,0,0,6760,
        6761,5,141,0,0,6761,645,1,0,0,0,6762,6763,5,674,0,0,6763,6766,3,
        590,295,0,6764,6766,5,527,0,0,6765,6762,1,0,0,0,6765,6764,1,0,0,
        0,6766,647,1,0,0,0,6767,6786,3,650,325,0,6768,6786,3,658,329,0,6769,
        6786,3,660,330,0,6770,6771,3,680,340,0,6771,6773,5,1133,0,0,6772,
        6774,3,684,342,0,6773,6772,1,0,0,0,6773,6774,1,0,0,0,6774,6775,1,
        0,0,0,6775,6776,5,1134,0,0,6776,6786,1,0,0,0,6777,6778,3,548,274,
        0,6778,6780,5,1133,0,0,6779,6781,3,684,342,0,6780,6779,1,0,0,0,6780,
        6781,1,0,0,0,6781,6782,1,0,0,0,6782,6783,5,1134,0,0,6783,6786,1,
        0,0,0,6784,6786,3,682,341,0,6785,6767,1,0,0,0,6785,6768,1,0,0,0,
        6785,6769,1,0,0,0,6785,6770,1,0,0,0,6785,6777,1,0,0,0,6785,6784,
        1,0,0,0,6786,649,1,0,0,0,6787,6790,7,116,0,0,6788,6789,5,1133,0,
        0,6789,6791,5,1134,0,0,6790,6788,1,0,0,0,6790,6791,1,0,0,0,6791,
        6967,1,0,0,0,6792,6967,3,60,30,0,6793,6794,5,32,0,0,6794,6795,5,
        1133,0,0,6795,6796,3,688,344,0,6796,6797,5,1135,0,0,6797,6798,3,
        608,304,0,6798,6799,5,1134,0,0,6799,6967,1,0,0,0,6800,6801,5,32,
        0,0,6801,6802,5,1133,0,0,6802,6803,3,688,344,0,6803,6804,5,187,0,
        0,6804,6805,3,568,284,0,6805,6806,5,1134,0,0,6806,6967,1,0,0,0,6807,
        6808,5,23,0,0,6808,6809,5,1133,0,0,6809,6810,3,688,344,0,6810,6811,
        5,12,0,0,6811,6812,3,608,304,0,6812,6813,5,1134,0,0,6813,6967,1,
        0,0,0,6814,6815,5,188,0,0,6815,6816,5,1133,0,0,6816,6817,3,556,278,
        0,6817,6818,5,1134,0,0,6818,6967,1,0,0,0,6819,6820,5,22,0,0,6820,
        6822,3,688,344,0,6821,6823,3,652,326,0,6822,6821,1,0,0,0,6823,6824,
        1,0,0,0,6824,6822,1,0,0,0,6824,6825,1,0,0,0,6825,6828,1,0,0,0,6826,
        6827,5,53,0,0,6827,6829,3,686,343,0,6828,6826,1,0,0,0,6828,6829,
        1,0,0,0,6829,6830,1,0,0,0,6830,6831,5,407,0,0,6831,6967,1,0,0,0,
        6832,6834,5,22,0,0,6833,6835,3,652,326,0,6834,6833,1,0,0,0,6835,
        6836,1,0,0,0,6836,6834,1,0,0,0,6836,6837,1,0,0,0,6837,6840,1,0,0,
        0,6838,6839,5,53,0,0,6839,6841,3,686,343,0,6840,6838,1,0,0,0,6840,
        6841,1,0,0,0,6841,6842,1,0,0,0,6842,6843,5,407,0,0,6843,6967,1,0,
        0,0,6844,6845,5,222,0,0,6845,6846,5,1133,0,0,6846,6849,3,684,342,
        0,6847,6848,5,187,0,0,6848,6850,3,568,284,0,6849,6847,1,0,0,0,6849,
        6850,1,0,0,0,6850,6851,1,0,0,0,6851,6852,5,1134,0,0,6852,6967,1,
        0,0,0,6853,6854,5,324,0,0,6854,6857,5,1133,0,0,6855,6858,3,594,297,
        0,6856,6858,3,688,344,0,6857,6855,1,0,0,0,6857,6856,1,0,0,0,6858,
        6859,1,0,0,0,6859,6862,5,80,0,0,6860,6863,3,594,297,0,6861,6863,
        3,688,344,0,6862,6860,1,0,0,0,6862,6861,1,0,0,0,6863,6864,1,0,0,
        0,6864,6865,5,1134,0,0,6865,6967,1,0,0,0,6866,6867,7,117,0,0,6867,
        6870,5,1133,0,0,6868,6871,3,594,297,0,6869,6871,3,688,344,0,6870,
        6868,1,0,0,0,6870,6869,1,0,0,0,6871,6872,1,0,0,0,6872,6875,5,68,
        0,0,6873,6876,3,590,295,0,6874,6876,3,688,344,0,6875,6873,1,0,0,
        0,6875,6874,1,0,0,0,6876,6882,1,0,0,0,6877,6880,5,65,0,0,6878,6881,
        3,590,295,0,6879,6881,3,688,344,0,6880,6878,1,0,0,0,6880,6879,1,
        0,0,0,6881,6883,1,0,0,0,6882,6877,1,0,0,0,6882,6883,1,0,0,0,6883,
        6884,1,0,0,0,6884,6885,5,1134,0,0,6885,6967,1,0,0,0,6886,6887,5,
        328,0,0,6887,6888,5,1133,0,0,6888,6891,7,118,0,0,6889,6892,3,594,
        297,0,6890,6892,3,688,344,0,6891,6889,1,0,0,0,6891,6890,1,0,0,0,
        6891,6892,1,0,0,0,6892,6893,1,0,0,0,6893,6896,5,68,0,0,6894,6897,
        3,594,297,0,6895,6897,3,688,344,0,6896,6894,1,0,0,0,6896,6895,1,
        0,0,0,6897,6898,1,0,0,0,6898,6899,5,1134,0,0,6899,6967,1,0,0,0,6900,
        6901,5,328,0,0,6901,6904,5,1133,0,0,6902,6905,3,594,297,0,6903,6905,
        3,688,344,0,6904,6902,1,0,0,0,6904,6903,1,0,0,0,6905,6906,1,0,0,
        0,6906,6909,5,68,0,0,6907,6910,3,594,297,0,6908,6910,3,688,344,0,
        6909,6907,1,0,0,0,6909,6908,1,0,0,0,6910,6911,1,0,0,0,6911,6912,
        5,1134,0,0,6912,6967,1,0,0,0,6913,6914,5,1103,0,0,6914,6917,5,1133,
        0,0,6915,6918,3,594,297,0,6916,6918,3,688,344,0,6917,6915,1,0,0,
        0,6917,6916,1,0,0,0,6918,6925,1,0,0,0,6919,6920,5,12,0,0,6920,6921,
        7,119,0,0,6921,6922,5,1133,0,0,6922,6923,3,590,295,0,6923,6924,5,
        1134,0,0,6924,6926,1,0,0,0,6925,6919,1,0,0,0,6925,6926,1,0,0,0,6926,
        6928,1,0,0,0,6927,6929,3,654,327,0,6928,6927,1,0,0,0,6928,6929,1,
        0,0,0,6929,6930,1,0,0,0,6930,6931,5,1134,0,0,6931,6967,1,0,0,0,6932,
        6933,5,321,0,0,6933,6934,5,1133,0,0,6934,6935,3,70,35,0,6935,6938,
        5,68,0,0,6936,6939,3,594,297,0,6937,6939,3,688,344,0,6938,6936,1,
        0,0,0,6938,6937,1,0,0,0,6939,6940,1,0,0,0,6940,6941,5,1134,0,0,6941,
        6967,1,0,0,0,6942,6943,5,900,0,0,6943,6944,5,1133,0,0,6944,6945,
        7,120,0,0,6945,6946,5,1135,0,0,6946,6947,3,594,297,0,6947,6948,5,
        1134,0,0,6948,6967,1,0,0,0,6949,6950,5,282,0,0,6950,6951,5,1133,
        0,0,6951,6952,3,688,344,0,6952,6953,5,1135,0,0,6953,6956,3,688,344,
        0,6954,6955,5,593,0,0,6955,6957,3,608,304,0,6956,6954,1,0,0,0,6956,
        6957,1,0,0,0,6957,6959,1,0,0,0,6958,6960,3,266,133,0,6959,6958,1,
        0,0,0,6959,6960,1,0,0,0,6960,6962,1,0,0,0,6961,6963,3,268,134,0,
        6962,6961,1,0,0,0,6962,6963,1,0,0,0,6963,6964,1,0,0,0,6964,6965,
        5,1134,0,0,6965,6967,1,0,0,0,6966,6787,1,0,0,0,6966,6792,1,0,0,0,
        6966,6793,1,0,0,0,6966,6800,1,0,0,0,6966,6807,1,0,0,0,6966,6814,
        1,0,0,0,6966,6819,1,0,0,0,6966,6832,1,0,0,0,6966,6844,1,0,0,0,6966,
        6853,1,0,0,0,6966,6866,1,0,0,0,6966,6886,1,0,0,0,6966,6900,1,0,0,
        0,6966,6913,1,0,0,0,6966,6932,1,0,0,0,6966,6942,1,0,0,0,6966,6949,
        1,0,0,0,6967,651,1,0,0,0,6968,6969,5,189,0,0,6969,6970,3,686,343,
        0,6970,6971,5,174,0,0,6971,6972,3,686,343,0,6972,653,1,0,0,0,6973,
        6974,5,472,0,0,6974,6979,3,656,328,0,6975,6976,5,1135,0,0,6976,6978,
        3,656,328,0,6977,6975,1,0,0,0,6978,6981,1,0,0,0,6979,6977,1,0,0,
        0,6979,6980,1,0,0,0,6980,6988,1,0,0,0,6981,6979,1,0,0,0,6982,6983,
        5,472,0,0,6983,6984,3,590,295,0,6984,6985,5,1121,0,0,6985,6986,3,
        590,295,0,6986,6988,1,0,0,0,6987,6973,1,0,0,0,6987,6982,1,0,0,0,
        6988,655,1,0,0,0,6989,6991,3,590,295,0,6990,6992,7,121,0,0,6991,
        6990,1,0,0,0,6991,6992,1,0,0,0,6992,657,1,0,0,0,6993,6994,7,122,
        0,0,6994,6996,5,1133,0,0,6995,6997,7,44,0,0,6996,6995,1,0,0,0,6996,
        6997,1,0,0,0,6997,6998,1,0,0,0,6998,6999,3,686,343,0,6999,7001,5,
        1134,0,0,7000,7002,3,662,331,0,7001,7000,1,0,0,0,7001,7002,1,0,0,
        0,7002,7053,1,0,0,0,7003,7004,5,290,0,0,7004,7012,5,1133,0,0,7005,
        7013,5,1117,0,0,7006,7008,5,6,0,0,7007,7006,1,0,0,0,7007,7008,1,
        0,0,0,7008,7009,1,0,0,0,7009,7013,3,686,343,0,7010,7011,5,49,0,0,
        7011,7013,3,684,342,0,7012,7005,1,0,0,0,7012,7007,1,0,0,0,7012,7010,
        1,0,0,0,7013,7014,1,0,0,0,7014,7016,5,1134,0,0,7015,7017,3,662,331,
        0,7016,7015,1,0,0,0,7016,7017,1,0,0,0,7017,7053,1,0,0,0,7018,7019,
        7,123,0,0,7019,7021,5,1133,0,0,7020,7022,5,6,0,0,7021,7020,1,0,0,
        0,7021,7022,1,0,0,0,7022,7023,1,0,0,0,7023,7024,3,686,343,0,7024,
        7026,5,1134,0,0,7025,7027,3,662,331,0,7026,7025,1,0,0,0,7026,7027,
        1,0,0,0,7027,7053,1,0,0,0,7028,7029,5,294,0,0,7029,7031,5,1133,0,
        0,7030,7032,5,49,0,0,7031,7030,1,0,0,0,7031,7032,1,0,0,0,7032,7033,
        1,0,0,0,7033,7044,3,684,342,0,7034,7035,5,124,0,0,7035,7036,5,19,
        0,0,7036,7041,3,230,115,0,7037,7038,5,1135,0,0,7038,7040,3,230,115,
        0,7039,7037,1,0,0,0,7040,7043,1,0,0,0,7041,7039,1,0,0,0,7041,7042,
        1,0,0,0,7042,7045,1,0,0,0,7043,7041,1,0,0,0,7044,7034,1,0,0,0,7044,
        7045,1,0,0,0,7045,7048,1,0,0,0,7046,7047,5,154,0,0,7047,7049,5,1148,
        0,0,7048,7046,1,0,0,0,7048,7049,1,0,0,0,7049,7050,1,0,0,0,7050,7051,
        5,1134,0,0,7051,7053,1,0,0,0,7052,6993,1,0,0,0,7052,7003,1,0,0,0,
        7052,7018,1,0,0,0,7052,7028,1,0,0,0,7053,659,1,0,0,0,7054,7055,7,
        124,0,0,7055,7056,5,1133,0,0,7056,7059,3,688,344,0,7057,7058,5,1135,
        0,0,7058,7060,3,590,295,0,7059,7057,1,0,0,0,7059,7060,1,0,0,0,7060,
        7063,1,0,0,0,7061,7062,5,1135,0,0,7062,7064,3,590,295,0,7063,7061,
        1,0,0,0,7063,7064,1,0,0,0,7064,7065,1,0,0,0,7065,7066,5,1134,0,0,
        7066,7067,3,662,331,0,7067,7093,1,0,0,0,7068,7069,7,125,0,0,7069,
        7070,5,1133,0,0,7070,7071,3,688,344,0,7071,7072,5,1134,0,0,7072,
        7073,3,662,331,0,7073,7093,1,0,0,0,7074,7075,7,126,0,0,7075,7076,
        5,1133,0,0,7076,7077,5,1134,0,0,7077,7093,3,662,331,0,7078,7079,
        5,301,0,0,7079,7080,5,1133,0,0,7080,7081,3,688,344,0,7081,7082,5,
        1135,0,0,7082,7083,3,590,295,0,7083,7084,5,1134,0,0,7084,7085,3,
        662,331,0,7085,7093,1,0,0,0,7086,7087,5,300,0,0,7087,7088,5,1133,
        0,0,7088,7089,3,590,295,0,7089,7090,5,1134,0,0,7090,7091,3,662,331,
        0,7091,7093,1,0,0,0,7092,7054,1,0,0,0,7092,7068,1,0,0,0,7092,7074,
        1,0,0,0,7092,7078,1,0,0,0,7092,7086,1,0,0,0,7093,661,1,0,0,0,7094,
        7100,5,128,0,0,7095,7096,5,1133,0,0,7096,7097,3,664,332,0,7097,7098,
        5,1134,0,0,7098,7101,1,0,0,0,7099,7101,3,666,333,0,7100,7095,1,0,
        0,0,7100,7099,1,0,0,0,7101,663,1,0,0,0,7102,7104,3,666,333,0,7103,
        7102,1,0,0,0,7103,7104,1,0,0,0,7104,7106,1,0,0,0,7105,7107,3,678,
        339,0,7106,7105,1,0,0,0,7106,7107,1,0,0,0,7107,7109,1,0,0,0,7108,
        7110,3,228,114,0,7109,7108,1,0,0,0,7109,7110,1,0,0,0,7110,7112,1,
        0,0,0,7111,7113,3,668,334,0,7112,7111,1,0,0,0,7112,7113,1,0,0,0,
        7113,665,1,0,0,0,7114,7115,3,584,292,0,7115,667,1,0,0,0,7116,7117,
        3,670,335,0,7117,7118,3,672,336,0,7118,669,1,0,0,0,7119,7120,7,127,
        0,0,7120,671,1,0,0,0,7121,7124,3,676,338,0,7122,7124,3,674,337,0,
        7123,7121,1,0,0,0,7123,7122,1,0,0,0,7124,673,1,0,0,0,7125,7126,5,
        16,0,0,7126,7127,3,676,338,0,7127,7128,5,10,0,0,7128,7129,3,676,
        338,0,7129,675,1,0,0,0,7130,7131,5,35,0,0,7131,7138,5,600,0,0,7132,
        7133,5,657,0,0,7133,7138,7,128,0,0,7134,7135,3,688,344,0,7135,7136,
        7,128,0,0,7136,7138,1,0,0,0,7137,7130,1,0,0,0,7137,7132,1,0,0,0,
        7137,7134,1,0,0,0,7138,677,1,0,0,0,7139,7140,5,129,0,0,7140,7141,
        5,19,0,0,7141,7146,3,688,344,0,7142,7143,5,1135,0,0,7143,7145,3,
        688,344,0,7144,7142,1,0,0,0,7145,7148,1,0,0,0,7146,7144,1,0,0,0,
        7146,7147,1,0,0,0,7147,679,1,0,0,0,7148,7146,1,0,0,0,7149,7174,3,
        720,360,0,7150,7174,5,747,0,0,7151,7174,5,317,0,0,7152,7174,5,313,
        0,0,7153,7174,5,314,0,0,7154,7174,5,315,0,0,7155,7174,5,318,0,0,
        7156,7174,5,319,0,0,7157,7174,5,320,0,0,7158,7174,5,77,0,0,7159,
        7174,5,85,0,0,7160,7174,5,316,0,0,7161,7174,5,322,0,0,7162,7174,
        5,508,0,0,7163,7174,5,323,0,0,7164,7174,5,140,0,0,7165,7174,5,141,
        0,0,7166,7174,5,325,0,0,7167,7174,5,326,0,0,7168,7174,5,327,0,0,
        7169,7174,5,328,0,0,7170,7174,5,329,0,0,7171,7174,5,330,0,0,7172,
        7174,5,331,0,0,7173,7149,1,0,0,0,7173,7150,1,0,0,0,7173,7151,1,0,
        0,0,7173,7152,1,0,0,0,7173,7153,1,0,0,0,7173,7154,1,0,0,0,7173,7155,
        1,0,0,0,7173,7156,1,0,0,0,7173,7157,1,0,0,0,7173,7158,1,0,0,0,7173,
        7159,1,0,0,0,7173,7160,1,0,0,0,7173,7161,1,0,0,0,7173,7162,1,0,0,
        0,7173,7163,1,0,0,0,7173,7164,1,0,0,0,7173,7165,1,0,0,0,7173,7166,
        1,0,0,0,7173,7167,1,0,0,0,7173,7168,1,0,0,0,7173,7169,1,0,0,0,7173,
        7170,1,0,0,0,7173,7171,1,0,0,0,7173,7172,1,0,0,0,7174,681,1,0,0,
        0,7175,7176,7,129,0,0,7176,7177,5,1133,0,0,7177,7178,3,686,343,0,
        7178,7179,5,1134,0,0,7179,683,1,0,0,0,7180,7185,3,602,301,0,7181,
        7185,3,556,278,0,7182,7185,3,648,324,0,7183,7185,3,688,344,0,7184,
        7180,1,0,0,0,7184,7181,1,0,0,0,7184,7182,1,0,0,0,7184,7183,1,0,0,
        0,7185,7195,1,0,0,0,7186,7191,5,1135,0,0,7187,7192,3,602,301,0,7188,
        7192,3,556,278,0,7189,7192,3,648,324,0,7190,7192,3,688,344,0,7191,
        7187,1,0,0,0,7191,7188,1,0,0,0,7191,7189,1,0,0,0,7191,7190,1,0,0,
        0,7192,7194,1,0,0,0,7193,7186,1,0,0,0,7194,7197,1,0,0,0,7195,7193,
        1,0,0,0,7195,7196,1,0,0,0,7196,685,1,0,0,0,7197,7195,1,0,0,0,7198,
        7203,3,602,301,0,7199,7203,3,556,278,0,7200,7203,3,648,324,0,7201,
        7203,3,688,344,0,7202,7198,1,0,0,0,7202,7199,1,0,0,0,7202,7200,1,
        0,0,0,7202,7201,1,0,0,0,7203,687,1,0,0,0,7204,7205,6,344,-1,0,7205,
        7206,7,130,0,0,7206,7216,3,688,344,4,7207,7208,3,690,345,0,7208,
        7210,5,88,0,0,7209,7211,5,114,0,0,7210,7209,1,0,0,0,7210,7211,1,
        0,0,0,7211,7212,1,0,0,0,7212,7213,7,131,0,0,7213,7216,1,0,0,0,7214,
        7216,3,690,345,0,7215,7204,1,0,0,0,7215,7207,1,0,0,0,7215,7214,1,
        0,0,0,7216,7223,1,0,0,0,7217,7218,10,3,0,0,7218,7219,3,698,349,0,
        7219,7220,3,688,344,4,7220,7222,1,0,0,0,7221,7217,1,0,0,0,7222,7225,
        1,0,0,0,7223,7221,1,0,0,0,7223,7224,1,0,0,0,7224,689,1,0,0,0,7225,
        7223,1,0,0,0,7226,7227,6,345,-1,0,7227,7228,3,692,346,0,7228,7293,
        1,0,0,0,7229,7230,10,8,0,0,7230,7231,3,696,348,0,7231,7232,3,690,
        345,9,7232,7292,1,0,0,0,7233,7235,10,6,0,0,7234,7236,5,114,0,0,7235,
        7234,1,0,0,0,7235,7236,1,0,0,0,7236,7237,1,0,0,0,7237,7238,5,16,
        0,0,7238,7239,3,690,345,0,7239,7240,5,10,0,0,7240,7241,3,690,345,
        7,7241,7292,1,0,0,0,7242,7243,10,5,0,0,7243,7244,5,620,0,0,7244,
        7245,5,98,0,0,7245,7292,3,690,345,6,7246,7248,10,3,0,0,7247,7249,
        5,114,0,0,7248,7247,1,0,0,0,7248,7249,1,0,0,0,7249,7250,1,0,0,0,
        7250,7251,7,132,0,0,7251,7292,3,690,345,4,7252,7254,10,10,0,0,7253,
        7255,5,114,0,0,7254,7253,1,0,0,0,7254,7255,1,0,0,0,7255,7256,1,0,
        0,0,7256,7257,5,80,0,0,7257,7260,5,1133,0,0,7258,7261,3,198,99,0,
        7259,7261,3,624,312,0,7260,7258,1,0,0,0,7260,7259,1,0,0,0,7261,7262,
        1,0,0,0,7262,7263,5,1134,0,0,7263,7292,1,0,0,0,7264,7265,10,9,0,
        0,7265,7266,5,88,0,0,7266,7292,3,600,300,0,7267,7268,10,7,0,0,7268,
        7269,3,696,348,0,7269,7270,7,133,0,0,7270,7271,5,1133,0,0,7271,7272,
        3,198,99,0,7272,7273,5,1134,0,0,7273,7292,1,0,0,0,7274,7276,10,4,
        0,0,7275,7277,5,114,0,0,7276,7275,1,0,0,0,7276,7277,1,0,0,0,7277,
        7278,1,0,0,0,7278,7279,5,98,0,0,7279,7282,3,690,345,0,7280,7281,
        5,413,0,0,7281,7283,5,1148,0,0,7282,7280,1,0,0,0,7282,7283,1,0,0,
        0,7283,7292,1,0,0,0,7284,7285,10,2,0,0,7285,7286,5,505,0,0,7286,
        7287,5,533,0,0,7287,7288,5,1133,0,0,7288,7289,3,690,345,0,7289,7290,
        5,1134,0,0,7290,7292,1,0,0,0,7291,7229,1,0,0,0,7291,7233,1,0,0,0,
        7291,7242,1,0,0,0,7291,7246,1,0,0,0,7291,7252,1,0,0,0,7291,7264,
        1,0,0,0,7291,7267,1,0,0,0,7291,7274,1,0,0,0,7291,7284,1,0,0,0,7292,
        7295,1,0,0,0,7293,7291,1,0,0,0,7293,7294,1,0,0,0,7294,691,1,0,0,
        0,7295,7293,1,0,0,0,7296,7297,6,346,-1,0,7297,7345,3,602,301,0,7298,
        7345,3,556,278,0,7299,7345,3,648,324,0,7300,7345,3,566,283,0,7301,
        7302,3,694,347,0,7302,7303,3,692,346,12,7303,7345,1,0,0,0,7304,7305,
        5,226,0,0,7305,7345,3,692,346,11,7306,7307,5,1159,0,0,7307,7308,
        5,1108,0,0,7308,7345,3,692,346,10,7309,7310,5,1133,0,0,7310,7315,
        3,688,344,0,7311,7312,5,1135,0,0,7312,7314,3,688,344,0,7313,7311,
        1,0,0,0,7314,7317,1,0,0,0,7315,7313,1,0,0,0,7315,7316,1,0,0,0,7316,
        7318,1,0,0,0,7317,7315,1,0,0,0,7318,7319,5,1134,0,0,7319,7345,1,
        0,0,0,7320,7321,5,600,0,0,7321,7322,5,1133,0,0,7322,7325,3,688,344,
        0,7323,7324,5,1135,0,0,7324,7326,3,688,344,0,7325,7323,1,0,0,0,7326,
        7327,1,0,0,0,7327,7325,1,0,0,0,7327,7328,1,0,0,0,7328,7329,1,0,0,
        0,7329,7330,5,1134,0,0,7330,7345,1,0,0,0,7331,7332,5,60,0,0,7332,
        7333,5,1133,0,0,7333,7334,3,198,99,0,7334,7335,5,1134,0,0,7335,7345,
        1,0,0,0,7336,7337,5,1133,0,0,7337,7338,3,198,99,0,7338,7339,5,1134,
        0,0,7339,7345,1,0,0,0,7340,7341,5,86,0,0,7341,7342,3,688,344,0,7342,
        7343,3,70,35,0,7343,7345,1,0,0,0,7344,7296,1,0,0,0,7344,7298,1,0,
        0,0,7344,7299,1,0,0,0,7344,7300,1,0,0,0,7344,7301,1,0,0,0,7344,7304,
        1,0,0,0,7344,7306,1,0,0,0,7344,7309,1,0,0,0,7344,7320,1,0,0,0,7344,
        7331,1,0,0,0,7344,7336,1,0,0,0,7344,7340,1,0,0,0,7345,7367,1,0,0,
        0,7346,7347,10,4,0,0,7347,7348,3,700,350,0,7348,7349,3,692,346,5,
        7349,7366,1,0,0,0,7350,7351,10,3,0,0,7351,7352,3,702,351,0,7352,
        7353,3,692,346,4,7353,7366,1,0,0,0,7354,7355,10,2,0,0,7355,7356,
        3,704,352,0,7356,7357,3,692,346,3,7357,7366,1,0,0,0,7358,7359,10,
        1,0,0,7359,7360,3,706,353,0,7360,7361,3,692,346,2,7361,7366,1,0,
        0,0,7362,7363,10,14,0,0,7363,7364,5,27,0,0,7364,7366,3,570,285,0,
        7365,7346,1,0,0,0,7365,7350,1,0,0,0,7365,7354,1,0,0,0,7365,7358,
        1,0,0,0,7365,7362,1,0,0,0,7366,7369,1,0,0,0,7367,7365,1,0,0,0,7367,
        7368,1,0,0,0,7368,693,1,0,0,0,7369,7367,1,0,0,0,7370,7371,7,134,
        0,0,7371,695,1,0,0,0,7372,7387,5,1124,0,0,7373,7387,5,1125,0,0,7374,
        7387,5,1126,0,0,7375,7376,5,1126,0,0,7376,7387,5,1124,0,0,7377,7378,
        5,1125,0,0,7378,7387,5,1124,0,0,7379,7380,5,1126,0,0,7380,7387,5,
        1125,0,0,7381,7382,5,1127,0,0,7382,7387,5,1124,0,0,7383,7384,5,1126,
        0,0,7384,7385,5,1124,0,0,7385,7387,5,1125,0,0,7386,7372,1,0,0,0,
        7386,7373,1,0,0,0,7386,7374,1,0,0,0,7386,7375,1,0,0,0,7386,7377,
        1,0,0,0,7386,7379,1,0,0,0,7386,7381,1,0,0,0,7386,7383,1,0,0,0,7387,
        697,1,0,0,0,7388,7396,5,10,0,0,7389,7390,5,1130,0,0,7390,7396,5,
        1130,0,0,7391,7396,5,194,0,0,7392,7396,5,123,0,0,7393,7394,5,1129,
        0,0,7394,7396,5,1129,0,0,7395,7388,1,0,0,0,7395,7389,1,0,0,0,7395,
        7391,1,0,0,0,7395,7392,1,0,0,0,7395,7393,1,0,0,0,7396,699,1,0,0,
        0,7397,7398,5,1126,0,0,7398,7405,5,1126,0,0,7399,7400,5,1125,0,0,
        7400,7405,5,1125,0,0,7401,7405,5,1130,0,0,7402,7405,5,1131,0,0,7403,
        7405,5,1129,0,0,7404,7397,1,0,0,0,7404,7399,1,0,0,0,7404,7401,1,
        0,0,0,7404,7402,1,0,0,0,7404,7403,1,0,0,0,7405,701,1,0,0,0,7406,
        7407,7,135,0,0,7407,703,1,0,0,0,7408,7409,7,136,0,0,7409,705,1,0,
        0,0,7410,7411,5,1121,0,0,7411,7416,5,1125,0,0,7412,7413,5,1121,0,
        0,7413,7414,5,1125,0,0,7414,7416,5,1125,0,0,7415,7410,1,0,0,0,7415,
        7412,1,0,0,0,7416,707,1,0,0,0,7417,7418,7,137,0,0,7418,709,1,0,0,
        0,7419,7420,7,138,0,0,7420,711,1,0,0,0,7421,7422,7,139,0,0,7422,
        713,1,0,0,0,7423,7424,7,140,0,0,7424,715,1,0,0,0,7425,7426,7,141,
        0,0,7426,717,1,0,0,0,7427,7428,7,142,0,0,7428,719,1,0,0,0,7429,7430,
        7,143,0,0,7430,721,1,0,0,0,1081,723,729,736,745,785,800,811,828,
        833,845,872,881,886,892,897,901,910,913,916,920,927,930,935,943,
        948,953,956,958,970,973,977,980,984,987,991,994,997,1001,1004,1008,
        1014,1020,1026,1033,1040,1043,1047,1052,1058,1067,1072,1077,1084,
        1101,1108,1112,1122,1126,1130,1134,1138,1143,1146,1149,1152,1155,
        1161,1165,1171,1176,1179,1182,1184,1195,1199,1202,1216,1219,1223,
        1226,1230,1233,1237,1240,1244,1247,1250,1254,1257,1261,1267,1271,
        1283,1289,1300,1305,1313,1321,1326,1329,1334,1342,1347,1353,1358,
        1362,1364,1367,1371,1375,1378,1382,1386,1390,1396,1399,1406,1411,
        1417,1424,1430,1438,1441,1448,1451,1453,1459,1465,1482,1489,1496,
        1508,1513,1516,1519,1532,1545,1550,1566,1574,1584,1587,1590,1596,
        1600,1603,1614,1617,1622,1635,1642,1649,1651,1658,1662,1664,1669,
        1672,1678,1683,1685,1689,1692,1695,1701,1706,1708,1713,1720,1722,
        1729,1734,1738,1741,1749,1757,1759,1769,1773,1776,1782,1787,1790,
        1796,1799,1803,1806,1810,1815,1820,1825,1829,1833,1837,1841,1845,
        1849,1854,1859,1864,1870,1875,1880,1885,1890,1895,1901,1906,1911,
        1916,1921,1926,1931,1936,1943,1948,1953,1958,1962,1967,1975,1980,
        1986,1998,2005,2007,2015,2020,2023,2031,2037,2041,2054,2066,2068,
        2071,2079,2085,2091,2104,2111,2120,2125,2136,2145,2150,2162,2169,
        2178,2183,2195,2202,2211,2216,2223,2232,2237,2239,2244,2252,2261,
        2265,2268,2272,2277,2283,2289,2294,2299,2304,2309,2312,2317,2322,
        2332,2336,2343,2348,2351,2356,2359,2363,2367,2375,2394,2397,2400,
        2404,2414,2427,2434,2437,2442,2449,2452,2455,2466,2469,2473,2481,
        2484,2489,2497,2503,2507,2511,2516,2521,2528,2532,2543,2551,2554,
        2560,2566,2568,2573,2576,2582,2588,2590,2594,2597,2600,2606,2612,
        2615,2621,2627,2629,2634,2642,2644,2653,2656,2659,2664,2666,2675,
        2678,2681,2686,2688,2697,2702,2710,2714,2722,2732,2737,2744,2748,
        2752,2771,2781,2787,2804,2808,2818,2823,2826,2835,2846,2854,2860,
        2870,2882,2889,2896,2911,2924,2930,2936,2942,2948,2954,2960,2965,
        2972,2979,2986,2991,2994,2996,3010,3017,3024,3030,3034,3038,3045,
        3048,3053,3060,3067,3071,3076,3083,3096,3099,3104,3109,3113,3119,
        3128,3137,3146,3149,3153,3162,3166,3169,3172,3178,3181,3185,3188,
        3192,3195,3203,3206,3217,3220,3225,3228,3233,3243,3248,3254,3256,
        3262,3264,3270,3278,3283,3291,3294,3299,3302,3307,3315,3323,3329,
        3337,3342,3350,3353,3357,3360,3368,3374,3383,3386,3390,3394,3398,
        3403,3407,3411,3413,3416,3419,3422,3428,3432,3435,3438,3441,3444,
        3451,3453,3457,3462,3468,3473,3480,3486,3491,3494,3500,3504,3512,
        3516,3519,3522,3527,3530,3537,3541,3544,3548,3552,3555,3558,3563,
        3569,3573,3583,3589,3593,3599,3603,3609,3612,3624,3628,3632,3640,
        3644,3652,3655,3659,3662,3670,3675,3678,3681,3685,3688,3697,3702,
        3711,3716,3723,3730,3738,3744,3752,3755,3758,3765,3768,3775,3783,
        3789,3800,3803,3807,3813,3822,3827,3831,3837,3843,3845,3849,3858,
        3868,3878,3884,3889,3893,3896,3899,3902,3905,3911,3917,3920,3923,
        3926,3929,3932,3934,3940,3946,3949,3952,3955,3958,3961,3965,3971,
        3975,3983,3987,3990,3992,4005,4008,4015,4025,4028,4033,4035,4039,
        4047,4053,4062,4075,4079,4085,4094,4097,4101,4104,4108,4112,4115,
        4117,4125,4137,4143,4145,4151,4153,4155,4161,4169,4177,4181,4185,
        4194,4199,4219,4224,4230,4237,4242,4251,4254,4258,4262,4266,4269,
        4272,4275,4279,4283,4286,4289,4292,4299,4303,4318,4322,4334,4342,
        4352,4356,4359,4365,4368,4371,4380,4389,4399,4403,4413,4423,4431,
        4434,4443,4446,4450,4455,4459,4468,4471,4502,4505,4508,4564,4569,
        4597,4611,4618,4622,4628,4636,4638,4649,4659,4666,4672,4680,4685,
        4693,4701,4709,4717,4723,4728,4733,4738,4744,4746,4757,4762,4769,
        4771,4785,4791,4796,4801,4807,4814,4822,4830,4835,4841,4844,4852,
        4859,4868,4871,4888,4896,4904,4908,4915,4921,4929,4938,4944,4951,
        4958,4963,4966,4968,4974,4976,4980,4982,4989,4994,4998,5004,5013,
        5019,5026,5032,5038,5043,5046,5048,5054,5056,5060,5062,5069,5071,
        5076,5083,5092,5097,5106,5113,5118,5121,5123,5129,5131,5134,5142,
        5147,5152,5156,5162,5167,5171,5177,5179,5190,5193,5200,5203,5215,
        5221,5230,5239,5244,5253,5259,5270,5276,5281,5285,5291,5296,5300,
        5303,5315,5322,5327,5357,5361,5366,5373,5376,5382,5392,5402,5412,
        5418,5427,5433,5440,5442,5452,5456,5460,5470,5475,5547,5565,5573,
        5585,5592,5594,5604,5607,5615,5622,5626,5633,5638,5641,5644,5653,
        5657,5661,5684,5691,5695,5702,5709,5712,5728,5731,5741,5745,5751,
        5754,5759,5763,5770,5773,5779,5803,5806,5818,5821,5831,5839,5843,
        5850,5853,5862,5868,5874,5884,5886,5892,5895,5898,5910,5913,5919,
        5922,5930,5938,5944,5948,5962,5974,5981,5984,5991,5998,6003,6016,
        6027,6033,6038,6051,6053,6058,6062,6065,6067,6074,6081,6084,6087,
        6093,6097,6103,6109,6122,6127,6135,6138,6143,6148,6156,6159,6167,
        6171,6178,6184,6187,6191,6204,6210,6222,6225,6234,6239,6245,6254,
        6259,6264,6266,6269,6273,6275,6279,6285,6288,6291,6297,6306,6314,
        6318,6323,6343,6350,6352,6359,6361,6365,6370,6381,6386,6392,6395,
        6399,6404,6407,6411,6415,6417,6422,6427,6440,6443,6447,6450,6453,
        6458,6463,6469,6472,6477,6480,6485,6488,6492,6497,6502,6507,6512,
        6515,6520,6525,6530,6536,6541,6546,6551,6555,6558,6563,6567,6571,
        6579,6586,6590,6595,6600,6604,6606,6609,6625,6634,6642,6650,6659,
        6669,6677,6685,6693,6701,6713,6720,6730,6735,6738,6743,6746,6750,
        6765,6773,6780,6785,6790,6824,6828,6836,6840,6849,6857,6862,6870,
        6875,6880,6882,6891,6896,6904,6909,6917,6925,6928,6938,6956,6959,
        6962,6966,6979,6987,6991,6996,7001,7007,7012,7016,7021,7026,7031,
        7041,7044,7048,7052,7059,7063,7092,7100,7103,7106,7109,7112,7123,
        7137,7146,7173,7184,7191,7195,7202,7210,7215,7223,7235,7248,7254,
        7260,7276,7282,7291,7293,7315,7327,7344,7365,7367,7386,7395,7404,
        7415
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!MySqlParser.__ATN) {
            MySqlParser.__ATN = new antlr.ATNDeserializer().deserialize(MySqlParser._serializedATN);
        }

        return MySqlParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(MySqlParser.literalNames, MySqlParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return MySqlParser.vocabulary;
    }

    private static readonly decisionsToDFA = MySqlParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EOF, 0)!;
    }
    public sqlStatements(): SqlStatementsContext | null {
        return this.getRuleContext(0, SqlStatementsContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_root;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoot) {
            return visitor.visitRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlStatementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sqlStatement(): SqlStatementContext | null {
        return this.getRuleContext(0, SqlStatementContext);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SEMI, 0);
    }
    public sqlStatements(): SqlStatementsContext | null {
        return this.getRuleContext(0, SqlStatementsContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_sqlStatements;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSqlStatements) {
            return visitor.visitSqlStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ddlStatement(): DdlStatementContext | null {
        return this.getRuleContext(0, DdlStatementContext);
    }
    public dmlStatement(): DmlStatementContext | null {
        return this.getRuleContext(0, DmlStatementContext);
    }
    public transactionStatement(): TransactionStatementContext | null {
        return this.getRuleContext(0, TransactionStatementContext);
    }
    public replicationStatement(): ReplicationStatementContext | null {
        return this.getRuleContext(0, ReplicationStatementContext);
    }
    public preparedStatement(): PreparedStatementContext | null {
        return this.getRuleContext(0, PreparedStatementContext);
    }
    public administrationStatement(): AdministrationStatementContext | null {
        return this.getRuleContext(0, AdministrationStatementContext);
    }
    public utilityStatement(): UtilityStatementContext | null {
        return this.getRuleContext(0, UtilityStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_sqlStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSqlStatement) {
            return visitor.visitSqlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DdlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createDatabase(): CreateDatabaseContext | null {
        return this.getRuleContext(0, CreateDatabaseContext);
    }
    public createEvent(): CreateEventContext | null {
        return this.getRuleContext(0, CreateEventContext);
    }
    public createIndex(): CreateIndexContext | null {
        return this.getRuleContext(0, CreateIndexContext);
    }
    public createLogfileGroup(): CreateLogfileGroupContext | null {
        return this.getRuleContext(0, CreateLogfileGroupContext);
    }
    public createProcedure(): CreateProcedureContext | null {
        return this.getRuleContext(0, CreateProcedureContext);
    }
    public createFunction(): CreateFunctionContext | null {
        return this.getRuleContext(0, CreateFunctionContext);
    }
    public createServer(): CreateServerContext | null {
        return this.getRuleContext(0, CreateServerContext);
    }
    public createTable(): CreateTableContext | null {
        return this.getRuleContext(0, CreateTableContext);
    }
    public createTablespaceInnodb(): CreateTablespaceInnodbContext | null {
        return this.getRuleContext(0, CreateTablespaceInnodbContext);
    }
    public createTablespaceNdb(): CreateTablespaceNdbContext | null {
        return this.getRuleContext(0, CreateTablespaceNdbContext);
    }
    public createTrigger(): CreateTriggerContext | null {
        return this.getRuleContext(0, CreateTriggerContext);
    }
    public createView(): CreateViewContext | null {
        return this.getRuleContext(0, CreateViewContext);
    }
    public createRole(): CreateRoleContext | null {
        return this.getRuleContext(0, CreateRoleContext);
    }
    public alterDatabase(): AlterDatabaseContext | null {
        return this.getRuleContext(0, AlterDatabaseContext);
    }
    public alterEvent(): AlterEventContext | null {
        return this.getRuleContext(0, AlterEventContext);
    }
    public alterFunction(): AlterFunctionContext | null {
        return this.getRuleContext(0, AlterFunctionContext);
    }
    public alterInstance(): AlterInstanceContext | null {
        return this.getRuleContext(0, AlterInstanceContext);
    }
    public alterLogfileGroup(): AlterLogfileGroupContext | null {
        return this.getRuleContext(0, AlterLogfileGroupContext);
    }
    public alterProcedure(): AlterProcedureContext | null {
        return this.getRuleContext(0, AlterProcedureContext);
    }
    public alterServer(): AlterServerContext | null {
        return this.getRuleContext(0, AlterServerContext);
    }
    public alterTable(): AlterTableContext | null {
        return this.getRuleContext(0, AlterTableContext);
    }
    public alterTablespace(): AlterTablespaceContext | null {
        return this.getRuleContext(0, AlterTablespaceContext);
    }
    public alterView(): AlterViewContext | null {
        return this.getRuleContext(0, AlterViewContext);
    }
    public dropDatabase(): DropDatabaseContext | null {
        return this.getRuleContext(0, DropDatabaseContext);
    }
    public dropEvent(): DropEventContext | null {
        return this.getRuleContext(0, DropEventContext);
    }
    public dropIndex(): DropIndexContext | null {
        return this.getRuleContext(0, DropIndexContext);
    }
    public dropLogfileGroup(): DropLogfileGroupContext | null {
        return this.getRuleContext(0, DropLogfileGroupContext);
    }
    public dropProcedure(): DropProcedureContext | null {
        return this.getRuleContext(0, DropProcedureContext);
    }
    public dropFunction(): DropFunctionContext | null {
        return this.getRuleContext(0, DropFunctionContext);
    }
    public dropServer(): DropServerContext | null {
        return this.getRuleContext(0, DropServerContext);
    }
    public dropTable(): DropTableContext | null {
        return this.getRuleContext(0, DropTableContext);
    }
    public dropTablespace(): DropTablespaceContext | null {
        return this.getRuleContext(0, DropTablespaceContext);
    }
    public dropTrigger(): DropTriggerContext | null {
        return this.getRuleContext(0, DropTriggerContext);
    }
    public dropView(): DropViewContext | null {
        return this.getRuleContext(0, DropViewContext);
    }
    public dropRole(): DropRoleContext | null {
        return this.getRuleContext(0, DropRoleContext);
    }
    public setRole(): SetRoleContext | null {
        return this.getRuleContext(0, SetRoleContext);
    }
    public renameTable(): RenameTableContext | null {
        return this.getRuleContext(0, RenameTableContext);
    }
    public truncateTable(): TruncateTableContext | null {
        return this.getRuleContext(0, TruncateTableContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_ddlStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDdlStatement) {
            return visitor.visitDdlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DmlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(0, InsertStatementContext);
    }
    public updateStatement(): UpdateStatementContext | null {
        return this.getRuleContext(0, UpdateStatementContext);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(0, DeleteStatementContext);
    }
    public replaceStatement(): ReplaceStatementContext | null {
        return this.getRuleContext(0, ReplaceStatementContext);
    }
    public callStatement(): CallStatementContext | null {
        return this.getRuleContext(0, CallStatementContext);
    }
    public loadDataStatement(): LoadDataStatementContext | null {
        return this.getRuleContext(0, LoadDataStatementContext);
    }
    public loadXmlStatement(): LoadXmlStatementContext | null {
        return this.getRuleContext(0, LoadXmlStatementContext);
    }
    public doStatement(): DoStatementContext | null {
        return this.getRuleContext(0, DoStatementContext);
    }
    public handlerStatement(): HandlerStatementContext | null {
        return this.getRuleContext(0, HandlerStatementContext);
    }
    public valuesStatement(): ValuesStatementContext | null {
        return this.getRuleContext(0, ValuesStatementContext);
    }
    public withStatement(): WithStatementContext | null {
        return this.getRuleContext(0, WithStatementContext);
    }
    public tableStatement(): TableStatementContext | null {
        return this.getRuleContext(0, TableStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dmlStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDmlStatement) {
            return visitor.visitDmlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public startTransaction(): StartTransactionContext | null {
        return this.getRuleContext(0, StartTransactionContext);
    }
    public beginWork(): BeginWorkContext | null {
        return this.getRuleContext(0, BeginWorkContext);
    }
    public commitWork(): CommitWorkContext | null {
        return this.getRuleContext(0, CommitWorkContext);
    }
    public rollbackWork(): RollbackWorkContext | null {
        return this.getRuleContext(0, RollbackWorkContext);
    }
    public savepointStatement(): SavepointStatementContext | null {
        return this.getRuleContext(0, SavepointStatementContext);
    }
    public rollbackStatement(): RollbackStatementContext | null {
        return this.getRuleContext(0, RollbackStatementContext);
    }
    public releaseStatement(): ReleaseStatementContext | null {
        return this.getRuleContext(0, ReleaseStatementContext);
    }
    public lockTables(): LockTablesContext | null {
        return this.getRuleContext(0, LockTablesContext);
    }
    public unlockTables(): UnlockTablesContext | null {
        return this.getRuleContext(0, UnlockTablesContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_transactionStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionStatement) {
            return visitor.visitTransactionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicationStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public changeMaster(): ChangeMasterContext | null {
        return this.getRuleContext(0, ChangeMasterContext);
    }
    public changeReplicationFilter(): ChangeReplicationFilterContext | null {
        return this.getRuleContext(0, ChangeReplicationFilterContext);
    }
    public purgeBinaryLogs(): PurgeBinaryLogsContext | null {
        return this.getRuleContext(0, PurgeBinaryLogsContext);
    }
    public resetMaster(): ResetMasterContext | null {
        return this.getRuleContext(0, ResetMasterContext);
    }
    public resetSlave(): ResetSlaveContext | null {
        return this.getRuleContext(0, ResetSlaveContext);
    }
    public startSlave(): StartSlaveContext | null {
        return this.getRuleContext(0, StartSlaveContext);
    }
    public stopSlave(): StopSlaveContext | null {
        return this.getRuleContext(0, StopSlaveContext);
    }
    public startGroupReplication(): StartGroupReplicationContext | null {
        return this.getRuleContext(0, StartGroupReplicationContext);
    }
    public stopGroupReplication(): StopGroupReplicationContext | null {
        return this.getRuleContext(0, StopGroupReplicationContext);
    }
    public xaStartTransaction(): XaStartTransactionContext | null {
        return this.getRuleContext(0, XaStartTransactionContext);
    }
    public xaEndTransaction(): XaEndTransactionContext | null {
        return this.getRuleContext(0, XaEndTransactionContext);
    }
    public xaPrepareStatement(): XaPrepareStatementContext | null {
        return this.getRuleContext(0, XaPrepareStatementContext);
    }
    public xaCommitWork(): XaCommitWorkContext | null {
        return this.getRuleContext(0, XaCommitWorkContext);
    }
    public xaRollbackWork(): XaRollbackWorkContext | null {
        return this.getRuleContext(0, XaRollbackWorkContext);
    }
    public xaRecoverWork(): XaRecoverWorkContext | null {
        return this.getRuleContext(0, XaRecoverWorkContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_replicationStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplicationStatement) {
            return visitor.visitReplicationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreparedStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public prepareStatement(): PrepareStatementContext | null {
        return this.getRuleContext(0, PrepareStatementContext);
    }
    public executeStatement(): ExecuteStatementContext | null {
        return this.getRuleContext(0, ExecuteStatementContext);
    }
    public deallocatePrepare(): DeallocatePrepareContext | null {
        return this.getRuleContext(0, DeallocatePrepareContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_preparedStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPreparedStatement) {
            return visitor.visitPreparedStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompoundStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public blockStatement(): BlockStatementContext | null {
        return this.getRuleContext(0, BlockStatementContext);
    }
    public caseStatement(): CaseStatementContext | null {
        return this.getRuleContext(0, CaseStatementContext);
    }
    public ifStatement(): IfStatementContext | null {
        return this.getRuleContext(0, IfStatementContext);
    }
    public leaveStatement(): LeaveStatementContext | null {
        return this.getRuleContext(0, LeaveStatementContext);
    }
    public loopStatement(): LoopStatementContext | null {
        return this.getRuleContext(0, LoopStatementContext);
    }
    public repeatStatement(): RepeatStatementContext | null {
        return this.getRuleContext(0, RepeatStatementContext);
    }
    public whileStatement(): WhileStatementContext | null {
        return this.getRuleContext(0, WhileStatementContext);
    }
    public iterateStatement(): IterateStatementContext | null {
        return this.getRuleContext(0, IterateStatementContext);
    }
    public returnStatement(): ReturnStatementContext | null {
        return this.getRuleContext(0, ReturnStatementContext);
    }
    public cursorStatement(): CursorStatementContext | null {
        return this.getRuleContext(0, CursorStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_compoundStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCompoundStatement) {
            return visitor.visitCompoundStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AdministrationStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterUser(): AlterUserContext | null {
        return this.getRuleContext(0, AlterUserContext);
    }
    public createUser(): CreateUserContext | null {
        return this.getRuleContext(0, CreateUserContext);
    }
    public dropUser(): DropUserContext | null {
        return this.getRuleContext(0, DropUserContext);
    }
    public grantStatement(): GrantStatementContext | null {
        return this.getRuleContext(0, GrantStatementContext);
    }
    public grantProxy(): GrantProxyContext | null {
        return this.getRuleContext(0, GrantProxyContext);
    }
    public renameUser(): RenameUserContext | null {
        return this.getRuleContext(0, RenameUserContext);
    }
    public revokeStatement(): RevokeStatementContext | null {
        return this.getRuleContext(0, RevokeStatementContext);
    }
    public revokeProxy(): RevokeProxyContext | null {
        return this.getRuleContext(0, RevokeProxyContext);
    }
    public analyzeTable(): AnalyzeTableContext | null {
        return this.getRuleContext(0, AnalyzeTableContext);
    }
    public checkTable(): CheckTableContext | null {
        return this.getRuleContext(0, CheckTableContext);
    }
    public checksumTable(): ChecksumTableContext | null {
        return this.getRuleContext(0, ChecksumTableContext);
    }
    public optimizeTable(): OptimizeTableContext | null {
        return this.getRuleContext(0, OptimizeTableContext);
    }
    public repairTable(): RepairTableContext | null {
        return this.getRuleContext(0, RepairTableContext);
    }
    public createUdfunction(): CreateUdfunctionContext | null {
        return this.getRuleContext(0, CreateUdfunctionContext);
    }
    public installPlugin(): InstallPluginContext | null {
        return this.getRuleContext(0, InstallPluginContext);
    }
    public uninstallPlugin(): UninstallPluginContext | null {
        return this.getRuleContext(0, UninstallPluginContext);
    }
    public setStatement(): SetStatementContext | null {
        return this.getRuleContext(0, SetStatementContext);
    }
    public showStatement(): ShowStatementContext | null {
        return this.getRuleContext(0, ShowStatementContext);
    }
    public binlogStatement(): BinlogStatementContext | null {
        return this.getRuleContext(0, BinlogStatementContext);
    }
    public cacheIndexStatement(): CacheIndexStatementContext | null {
        return this.getRuleContext(0, CacheIndexStatementContext);
    }
    public flushStatement(): FlushStatementContext | null {
        return this.getRuleContext(0, FlushStatementContext);
    }
    public killStatement(): KillStatementContext | null {
        return this.getRuleContext(0, KillStatementContext);
    }
    public loadIndexIntoCache(): LoadIndexIntoCacheContext | null {
        return this.getRuleContext(0, LoadIndexIntoCacheContext);
    }
    public resetStatement(): ResetStatementContext | null {
        return this.getRuleContext(0, ResetStatementContext);
    }
    public shutdownStatement(): ShutdownStatementContext | null {
        return this.getRuleContext(0, ShutdownStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_administrationStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAdministrationStatement) {
            return visitor.visitAdministrationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UtilityStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleDescribeStatement(): SimpleDescribeStatementContext | null {
        return this.getRuleContext(0, SimpleDescribeStatementContext);
    }
    public fullDescribeStatement(): FullDescribeStatementContext | null {
        return this.getRuleContext(0, FullDescribeStatementContext);
    }
    public helpStatement(): HelpStatementContext | null {
        return this.getRuleContext(0, HelpStatementContext);
    }
    public useStatement(): UseStatementContext | null {
        return this.getRuleContext(0, UseStatementContext);
    }
    public signalStatement(): SignalStatementContext | null {
        return this.getRuleContext(0, SignalStatementContext);
    }
    public resignalStatement(): ResignalStatementContext | null {
        return this.getRuleContext(0, ResignalStatementContext);
    }
    public diagnosticsStatement(): DiagnosticsStatementContext | null {
        return this.getRuleContext(0, DiagnosticsStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_utilityStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUtilityStatement) {
            return visitor.visitUtilityStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseContext extends antlr.ParserRuleContext {
    public _dbFormat?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATABASE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEMA, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public createDatabaseOption(): CreateDatabaseOptionContext[];
    public createDatabaseOption(i: number): CreateDatabaseOptionContext | null;
    public createDatabaseOption(i?: number): CreateDatabaseOptionContext[] | CreateDatabaseOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateDatabaseOptionContext);
        }

        return this.getRuleContext(i, CreateDatabaseOptionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createDatabase;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabase) {
            return visitor.visitCreateDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateEventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public EVENT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EVENT, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ON);
    	} else {
    		return this.getToken(MySqlParser.ON, i);
    	}
    }
    public SCHEDULE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SCHEDULE, 0)!;
    }
    public scheduleExpression(): ScheduleExpressionContext {
        return this.getRuleContext(0, ScheduleExpressionContext)!;
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DO, 0)!;
    }
    public routineBody(): RoutineBodyContext {
        return this.getRuleContext(0, RoutineBodyContext)!;
    }
    public ownerStatement(): OwnerStatementContext | null {
        return this.getRuleContext(0, OwnerStatementContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public COMPLETION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMPLETION, 0);
    }
    public PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRESERVE, 0);
    }
    public enableType(): EnableTypeContext | null {
        return this.getRuleContext(0, EnableTypeContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createEvent;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateEvent) {
            return visitor.visitCreateEvent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexContext extends antlr.ParserRuleContext {
    public _intimeAction?: Token | null;
    public _indexCategory?: Token | null;
    public _algType?: Token | null;
    public _lockType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INDEX, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public indexColumnNames(): IndexColumnNamesContext {
        return this.getRuleContext(0, IndexColumnNamesContext)!;
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(0, IndexTypeContext);
    }
    public indexOption(): IndexOptionContext[];
    public indexOption(i: number): IndexOptionContext | null;
    public indexOption(i?: number): IndexOptionContext[] | IndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }

        return this.getRuleContext(i, IndexOptionContext);
    }
    public ALGORITHM(): antlr.TerminalNode[];
    public ALGORITHM(i: number): antlr.TerminalNode | null;
    public ALGORITHM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ALGORITHM);
    	} else {
    		return this.getToken(MySqlParser.ALGORITHM, i);
    	}
    }
    public LOCK(): antlr.TerminalNode[];
    public LOCK(i: number): antlr.TerminalNode | null;
    public LOCK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LOCK);
    	} else {
    		return this.getToken(MySqlParser.LOCK, i);
    	}
    }
    public ONLINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONLINE, 0);
    }
    public OFFLINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OFFLINE, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNIQUE, 0);
    }
    public FULLTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FULLTEXT, 0);
    }
    public SPATIAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SPATIAL, 0);
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.DEFAULT);
    	} else {
    		return this.getToken(MySqlParser.DEFAULT, i);
    	}
    }
    public INPLACE(): antlr.TerminalNode[];
    public INPLACE(i: number): antlr.TerminalNode | null;
    public INPLACE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.INPLACE);
    	} else {
    		return this.getToken(MySqlParser.INPLACE, i);
    	}
    }
    public COPY(): antlr.TerminalNode[];
    public COPY(i: number): antlr.TerminalNode | null;
    public COPY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COPY);
    	} else {
    		return this.getToken(MySqlParser.COPY, i);
    	}
    }
    public NONE(): antlr.TerminalNode[];
    public NONE(i: number): antlr.TerminalNode | null;
    public NONE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.NONE);
    	} else {
    		return this.getToken(MySqlParser.NONE, i);
    	}
    }
    public SHARED(): antlr.TerminalNode[];
    public SHARED(i: number): antlr.TerminalNode | null;
    public SHARED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.SHARED);
    	} else {
    		return this.getToken(MySqlParser.SHARED, i);
    	}
    }
    public EXCLUSIVE(): antlr.TerminalNode[];
    public EXCLUSIVE(i: number): antlr.TerminalNode | null;
    public EXCLUSIVE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EXCLUSIVE);
    	} else {
    		return this.getToken(MySqlParser.EXCLUSIVE, i);
    	}
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createIndex;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndex) {
            return visitor.visitCreateIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateLogfileGroupContext extends antlr.ParserRuleContext {
    public _undoFile?: Token | null;
    public _initSize?: FileSizeLiteralContext;
    public _undoSize?: FileSizeLiteralContext;
    public _redoSize?: FileSizeLiteralContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public LOGFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOGFILE, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.GROUP, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public UNDOFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UNDOFILE, 0)!;
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENGINE, 0)!;
    }
    public engineName(): EngineNameContext {
        return this.getRuleContext(0, EngineNameContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.STRING_LITERAL);
    	} else {
    		return this.getToken(MySqlParser.STRING_LITERAL, i);
    	}
    }
    public INITIAL_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INITIAL_SIZE, 0);
    }
    public UNDO_BUFFER_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0);
    }
    public REDO_BUFFER_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REDO_BUFFER_SIZE, 0);
    }
    public NODEGROUP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NODEGROUP, 0);
    }
    public WAIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WAIT, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMENT, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public fileSizeLiteral(): FileSizeLiteralContext[];
    public fileSizeLiteral(i: number): FileSizeLiteralContext | null;
    public fileSizeLiteral(i?: number): FileSizeLiteralContext[] | FileSizeLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FileSizeLiteralContext);
        }

        return this.getRuleContext(i, FileSizeLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createLogfileGroup;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateLogfileGroup) {
            return visitor.visitCreateLogfileGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateProcedureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public PROCEDURE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PROCEDURE, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public routineBody(): RoutineBodyContext {
        return this.getRuleContext(0, RoutineBodyContext)!;
    }
    public ownerStatement(): OwnerStatementContext | null {
        return this.getRuleContext(0, OwnerStatementContext);
    }
    public procedureParameter(): ProcedureParameterContext[];
    public procedureParameter(i: number): ProcedureParameterContext | null;
    public procedureParameter(i?: number): ProcedureParameterContext[] | ProcedureParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureParameterContext);
        }

        return this.getRuleContext(i, ProcedureParameterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public routineOption(): RoutineOptionContext[];
    public routineOption(i: number): RoutineOptionContext | null;
    public routineOption(i?: number): RoutineOptionContext[] | RoutineOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineOptionContext);
        }

        return this.getRuleContext(i, RoutineOptionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createProcedure;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateProcedure) {
            return visitor.visitCreateProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FUNCTION, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public RETURNS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RETURNS, 0)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public routineBody(): RoutineBodyContext | null {
        return this.getRuleContext(0, RoutineBodyContext);
    }
    public returnStatement(): ReturnStatementContext | null {
        return this.getRuleContext(0, ReturnStatementContext);
    }
    public ownerStatement(): OwnerStatementContext | null {
        return this.getRuleContext(0, OwnerStatementContext);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AGGREGATE, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public functionParameter(): FunctionParameterContext[];
    public functionParameter(i: number): FunctionParameterContext | null;
    public functionParameter(i?: number): FunctionParameterContext[] | FunctionParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionParameterContext);
        }

        return this.getRuleContext(i, FunctionParameterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public routineOption(): RoutineOptionContext[];
    public routineOption(i: number): RoutineOptionContext | null;
    public routineOption(i?: number): RoutineOptionContext[] | RoutineOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineOptionContext);
        }

        return this.getRuleContext(i, RoutineOptionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createFunction;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ROLE, 0)!;
    }
    public roleName(): RoleNameContext[];
    public roleName(i: number): RoleNameContext | null;
    public roleName(i?: number): RoleNameContext[] | RoleNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleNameContext);
        }

        return this.getRuleContext(i, RoleNameContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createRole;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRole) {
            return visitor.visitCreateRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateServerContext extends antlr.ParserRuleContext {
    public _wrapperName?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public SERVER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SERVER, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public FOREIGN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FOREIGN, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DATA, 0)!;
    }
    public WRAPPER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.WRAPPER, 0)!;
    }
    public OPTIONS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.OPTIONS, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public serverOption(): ServerOptionContext[];
    public serverOption(i: number): ServerOptionContext | null;
    public serverOption(i?: number): ServerOptionContext[] | ServerOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ServerOptionContext);
        }

        return this.getRuleContext(i, ServerOptionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public MYSQL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MYSQL, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createServer;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateServer) {
            return visitor.visitCreateServer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createTable;
    }
    public override copyFrom(ctx: CreateTableContext): void {
        super.copyFrom(ctx);
    }
}
export class CopyCreateTableContext extends CreateTableContext {
    public _parenthesisTable?: TableNameContext;
    public constructor(ctx: CreateTableContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tableName(): TableNameContext[];
    public tableName(i: number): TableNameContext | null;
    public tableName(i?: number): TableNameContext[] | TableNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableNameContext);
        }

        return this.getRuleContext(i, TableNameContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LIKE, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopyCreateTable) {
            return visitor.visitCopyCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnCreateTableContext extends CreateTableContext {
    public constructor(ctx: CreateTableContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public createDefinitions(): CreateDefinitionsContext {
        return this.getRuleContext(0, CreateDefinitionsContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public tableOption(): TableOptionContext[];
    public tableOption(i: number): TableOptionContext | null;
    public tableOption(i?: number): TableOptionContext[] | TableOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableOptionContext);
        }

        return this.getRuleContext(i, TableOptionContext);
    }
    public partitionDefinitions(): PartitionDefinitionsContext | null {
        return this.getRuleContext(0, PartitionDefinitionsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnCreateTable) {
            return visitor.visitColumnCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QueryCreateTableContext extends CreateTableContext {
    public _keyViolate?: Token | null;
    public constructor(ctx: CreateTableContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public createDefinitions(): CreateDefinitionsContext | null {
        return this.getRuleContext(0, CreateDefinitionsContext);
    }
    public tableOption(): TableOptionContext[];
    public tableOption(i: number): TableOptionContext | null;
    public tableOption(i?: number): TableOptionContext[] | TableOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableOptionContext);
        }

        return this.getRuleContext(i, TableOptionContext);
    }
    public partitionDefinitions(): PartitionDefinitionsContext | null {
        return this.getRuleContext(0, PartitionDefinitionsContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IGNORE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLACE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryCreateTable) {
            return visitor.visitQueryCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTablespaceInnodbContext extends antlr.ParserRuleContext {
    public _datafile?: Token | null;
    public _fileBlockSize?: FileSizeLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLESPACE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public DATAFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DATAFILE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public FILE_BLOCK_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FILE_BLOCK_SIZE, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENGINE, 0);
    }
    public engineName(): EngineNameContext | null {
        return this.getRuleContext(0, EngineNameContext);
    }
    public fileSizeLiteral(): FileSizeLiteralContext | null {
        return this.getRuleContext(0, FileSizeLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createTablespaceInnodb;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTablespaceInnodb) {
            return visitor.visitCreateTablespaceInnodb(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTablespaceNdbContext extends antlr.ParserRuleContext {
    public _datafile?: Token | null;
    public _extentSize?: FileSizeLiteralContext;
    public _initialSize?: FileSizeLiteralContext;
    public _autoextendSize?: FileSizeLiteralContext;
    public _maxSize?: FileSizeLiteralContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLESPACE, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public DATAFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DATAFILE, 0)!;
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USE, 0)!;
    }
    public LOGFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOGFILE, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.GROUP, 0)!;
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENGINE, 0)!;
    }
    public engineName(): EngineNameContext {
        return this.getRuleContext(0, EngineNameContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.STRING_LITERAL);
    	} else {
    		return this.getToken(MySqlParser.STRING_LITERAL, i);
    	}
    }
    public EXTENT_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXTENT_SIZE, 0);
    }
    public INITIAL_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INITIAL_SIZE, 0);
    }
    public AUTOEXTEND_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
    }
    public MAX_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX_SIZE, 0);
    }
    public NODEGROUP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NODEGROUP, 0);
    }
    public WAIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WAIT, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMENT, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public fileSizeLiteral(): FileSizeLiteralContext[];
    public fileSizeLiteral(i: number): FileSizeLiteralContext | null;
    public fileSizeLiteral(i?: number): FileSizeLiteralContext[] | FileSizeLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FileSizeLiteralContext);
        }

        return this.getRuleContext(i, FileSizeLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createTablespaceNdb;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTablespaceNdb) {
            return visitor.visitCreateTablespaceNdb(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTriggerContext extends antlr.ParserRuleContext {
    public _thisTrigger?: FullIdContext;
    public _triggerTime?: Token | null;
    public _triggerEvent?: Token | null;
    public _triggerPlace?: Token | null;
    public _otherTrigger?: FullIdContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public TRIGGER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TRIGGER, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FOR, 0)!;
    }
    public EACH(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EACH, 0)!;
    }
    public ROW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ROW, 0)!;
    }
    public routineBody(): RoutineBodyContext {
        return this.getRuleContext(0, RoutineBodyContext)!;
    }
    public fullId(): FullIdContext[];
    public fullId(i: number): FullIdContext | null;
    public fullId(i?: number): FullIdContext[] | FullIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FullIdContext);
        }

        return this.getRuleContext(i, FullIdContext);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BEFORE, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AFTER, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INSERT, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPDATE, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DELETE, 0);
    }
    public ownerStatement(): OwnerStatementContext | null {
        return this.getRuleContext(0, OwnerStatementContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public FOLLOWS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOLLOWS, 0);
    }
    public PRECEDES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRECEDES, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createTrigger;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTrigger) {
            return visitor.visitCreateTrigger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(MySqlParser.WITH, 0)!;
    }
    public commonTableExpressions(): CommonTableExpressionsContext {
        return this.getRuleContext(0, CommonTableExpressionsContext)!;
    }
    public RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RECURSIVE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_withClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonTableExpressionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public cteName(): CteNameContext {
        return this.getRuleContext(0, CteNameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.AS, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public dmlStatement(): DmlStatementContext {
        return this.getRuleContext(0, DmlStatementContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public cteColumnName(): CteColumnNameContext[];
    public cteColumnName(i: number): CteColumnNameContext | null;
    public cteColumnName(i?: number): CteColumnNameContext[] | CteColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CteColumnNameContext);
        }

        return this.getRuleContext(i, CteColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public commonTableExpressions(): CommonTableExpressionsContext | null {
        return this.getRuleContext(0, CommonTableExpressionsContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_commonTableExpressions;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommonTableExpressions) {
            return visitor.visitCommonTableExpressions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CteNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_cteName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCteName) {
            return visitor.visitCteName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CteColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_cteColumnName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCteColumnName) {
            return visitor.visitCteColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateViewContext extends antlr.ParserRuleContext {
    public _algType?: Token | null;
    public _secContext?: Token | null;
    public _checkOption?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VIEW, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.AS, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public orReplace(): OrReplaceContext | null {
        return this.getRuleContext(0, OrReplaceContext);
    }
    public ALGORITHM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALGORITHM, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public ownerStatement(): OwnerStatementContext | null {
        return this.getRuleContext(0, OwnerStatementContext);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SECURITY, 0);
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public UNDEFINED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNDEFINED, 0);
    }
    public MERGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MERGE, 0);
    }
    public TEMPTABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TEMPTABLE, 0);
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFINER, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INVOKER, 0);
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHECK, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OPTION, 0);
    }
    public CASCADED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CASCADED, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createView;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public charSet(): CharSetContext | null {
        return this.getRuleContext(0, CharSetContext);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.DEFAULT);
    	} else {
    		return this.getToken(MySqlParser.DEFAULT, i);
    	}
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLLATE, 0);
    }
    public collationName(): CollationNameContext | null {
        return this.getRuleContext(0, CollationNameContext);
    }
    public ENCRYPTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENCRYPTION, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.READ, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONLY, 0);
    }
    public ZERO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createDatabaseOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabaseOption) {
            return visitor.visitCreateDatabaseOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARACTER, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public CHARSET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARSET, 0);
    }
    public CHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHAR, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_charSet;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCharSet) {
            return visitor.visitCharSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CurrentUserExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT_USER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CURRENT_USER, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_currentUserExpression;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentUserExpression) {
            return visitor.visitCurrentUserExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OwnerStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFINER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DEFINER, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public userName(): UserNameContext | null {
        return this.getRuleContext(0, UserNameContext);
    }
    public currentUserExpression(): CurrentUserExpressionContext | null {
        return this.getRuleContext(0, CurrentUserExpressionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_ownerStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitOwnerStatement) {
            return visitor.visitOwnerStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScheduleExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_scheduleExpression;
    }
    public override copyFrom(ctx: ScheduleExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class PreciseScheduleContext extends ScheduleExpressionContext {
    public constructor(ctx: ScheduleExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.AT, 0)!;
    }
    public timestampValue(): TimestampValueContext {
        return this.getRuleContext(0, TimestampValueContext)!;
    }
    public intervalExpr(): IntervalExprContext[];
    public intervalExpr(i: number): IntervalExprContext | null;
    public intervalExpr(i?: number): IntervalExprContext[] | IntervalExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalExprContext);
        }

        return this.getRuleContext(i, IntervalExprContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPreciseSchedule) {
            return visitor.visitPreciseSchedule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalScheduleContext extends ScheduleExpressionContext {
    public _startTimestamp?: TimestampValueContext;
    public _intervalExpr?: IntervalExprContext;
    public _startIntervals: IntervalExprContext[] = [];
    public _endTimestamp?: TimestampValueContext;
    public _endIntervals: IntervalExprContext[] = [];
    public constructor(ctx: ScheduleExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EVERY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EVERY, 0)!;
    }
    public intervalType(): IntervalTypeContext {
        return this.getRuleContext(0, IntervalTypeContext)!;
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public STARTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STARTS, 0);
    }
    public ENDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENDS, 0);
    }
    public timestampValue(): TimestampValueContext[];
    public timestampValue(i: number): TimestampValueContext | null;
    public timestampValue(i?: number): TimestampValueContext[] | TimestampValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TimestampValueContext);
        }

        return this.getRuleContext(i, TimestampValueContext);
    }
    public intervalExpr(): IntervalExprContext[];
    public intervalExpr(i: number): IntervalExprContext | null;
    public intervalExpr(i?: number): IntervalExprContext[] | IntervalExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalExprContext);
        }

        return this.getRuleContext(i, IntervalExprContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalSchedule) {
            return visitor.visitIntervalSchedule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimestampValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_timestampValue;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTimestampValue) {
            return visitor.visitTimestampValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PLUS, 0)!;
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INTERVAL, 0)!;
    }
    public intervalType(): IntervalTypeContext {
        return this.getRuleContext(0, IntervalTypeContext)!;
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_intervalExpr;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalExpr) {
            return visitor.visitIntervalExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalTypeBase(): IntervalTypeBaseContext | null {
        return this.getRuleContext(0, IntervalTypeBaseContext);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.YEAR, 0);
    }
    public YEAR_MONTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.YEAR_MONTH, 0);
    }
    public DAY_HOUR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DAY_HOUR, 0);
    }
    public DAY_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DAY_MINUTE, 0);
    }
    public DAY_SECOND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DAY_SECOND, 0);
    }
    public HOUR_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HOUR_MINUTE, 0);
    }
    public HOUR_SECOND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HOUR_SECOND, 0);
    }
    public MINUTE_SECOND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MINUTE_SECOND, 0);
    }
    public SECOND_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SECOND_MICROSECOND, 0);
    }
    public MINUTE_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MINUTE_MICROSECOND, 0);
    }
    public HOUR_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HOUR_MICROSECOND, 0);
    }
    public DAY_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DAY_MICROSECOND, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_intervalType;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalType) {
            return visitor.visitIntervalType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnableTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENABLE, 0);
    }
    public DISABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISABLE, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ON, 0);
    }
    public SLAVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SLAVE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_enableType;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitEnableType) {
            return visitor.visitEnableType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USING, 0)!;
    }
    public BTREE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BTREE, 0);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HASH, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_indexType;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexType) {
            return visitor.visitIndexType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEY_BLOCK_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
    }
    public fileSizeLiteral(): FileSizeLiteralContext | null {
        return this.getRuleContext(0, FileSizeLiteralContext);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(0, IndexTypeContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public PARSER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARSER, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public VISIBLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VISIBLE, 0);
    }
    public INVISIBLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INVISIBLE, 0);
    }
    public ENGINE_ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_indexOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexOption) {
            return visitor.visitIndexOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureParameterContext extends antlr.ParserRuleContext {
    public _direction?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IN, 0);
    }
    public OUT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OUT, 0);
    }
    public INOUT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INOUT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_procedureParameter;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedureParameter) {
            return visitor.visitProcedureParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionParameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_functionParameter;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionParameter) {
            return visitor.visitFunctionParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_routineOption;
    }
    public override copyFrom(ctx: RoutineOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class RoutineBehaviorContext extends RoutineOptionContext {
    public constructor(ctx: RoutineOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DETERMINISTIC(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DETERMINISTIC, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineBehavior) {
            return visitor.visitRoutineBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RoutineLanguageContext extends RoutineOptionContext {
    public constructor(ctx: RoutineOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LANGUAGE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LANGUAGE, 0)!;
    }
    public SQL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SQL, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineLanguage) {
            return visitor.visitRoutineLanguage(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RoutineCommentContext extends RoutineOptionContext {
    public constructor(ctx: RoutineOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMENT, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineComment) {
            return visitor.visitRoutineComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RoutineSecurityContext extends RoutineOptionContext {
    public _context?: Token | null;
    public constructor(ctx: RoutineOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SQL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SQL, 0)!;
    }
    public SECURITY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SECURITY, 0)!;
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFINER, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INVOKER, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineSecurity) {
            return visitor.visitRoutineSecurity(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RoutineDataContext extends RoutineOptionContext {
    public constructor(ctx: RoutineOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONTAINS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONTAINS, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NO, 0);
    }
    public READS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.READS, 0);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATA, 0);
    }
    public MODIFIES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MODIFIES, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineData) {
            return visitor.visitRoutineData(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HOST, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATABASE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USER, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PASSWORD, 0);
    }
    public SOCKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SOCKET, 0);
    }
    public OWNER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OWNER, 0);
    }
    public PORT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PORT, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_serverOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitServerOption) {
            return visitor.visitServerOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDefinitionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public createDefinition(): CreateDefinitionContext[];
    public createDefinition(i: number): CreateDefinitionContext | null;
    public createDefinition(i?: number): CreateDefinitionContext[] | CreateDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateDefinitionContext);
        }

        return this.getRuleContext(i, CreateDefinitionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createDefinitions;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDefinitions) {
            return visitor.visitCreateDefinitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createDefinition;
    }
    public override copyFrom(ctx: CreateDefinitionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnDeclarationContext extends CreateDefinitionContext {
    public constructor(ctx: CreateDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fullColumnName(): FullColumnNameContext {
        return this.getRuleContext(0, FullColumnNameContext)!;
    }
    public columnDefinition(): ColumnDefinitionContext {
        return this.getRuleContext(0, ColumnDefinitionContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnDeclaration) {
            return visitor.visitColumnDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConstraintDeclarationContext extends CreateDefinitionContext {
    public constructor(ctx: CreateDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableConstraint(): TableConstraintContext {
        return this.getRuleContext(0, TableConstraintContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public ENFORCED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENFORCED, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintDeclaration) {
            return visitor.visitConstraintDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IndexDeclarationContext extends CreateDefinitionContext {
    public constructor(ctx: CreateDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public indexColumnDefinition(): IndexColumnDefinitionContext {
        return this.getRuleContext(0, IndexColumnDefinitionContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexDeclaration) {
            return visitor.visitIndexDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public columnConstraint(): ColumnConstraintContext[];
    public columnConstraint(i: number): ColumnConstraintContext | null;
    public columnConstraint(i?: number): ColumnConstraintContext[] | ColumnConstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnConstraintContext);
        }

        return this.getRuleContext(i, ColumnConstraintContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public ENFORCED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENFORCED, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_columnDefinition;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnDefinition) {
            return visitor.visitColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_columnConstraint;
    }
    public override copyFrom(ctx: ColumnConstraintContext): void {
        super.copyFrom(ctx);
    }
}
export class StorageColumnConstraintContext extends ColumnConstraintContext {
    public _storageval?: Token | null;
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STORAGE, 0)!;
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISK, 0);
    }
    public MEMORY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MEMORY, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitStorageColumnConstraint) {
            return visitor.visitStorageColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class VisibilityColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public VISIBLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VISIBLE, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitVisibilityColumnConstraint) {
            return visitor.visitVisibilityColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AUTO_INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ON, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPDATE, 0);
    }
    public currentTimestamp(): CurrentTimestampContext | null {
        return this.getRuleContext(0, CurrentTimestampContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAutoIncrementColumnConstraint) {
            return visitor.visitAutoIncrementColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMENT, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentColumnConstraint) {
            return visitor.visitCommentColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNIQUE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UNIQUE, 0)!;
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUniqueKeyColumnConstraint) {
            return visitor.visitUniqueKeyColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SERIAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SERIAL, 0)!;
    }
    public DEFAULT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DEFAULT, 0)!;
    }
    public VALUE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VALUE, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSerialDefaultColumnConstraint) {
            return visitor.visitSerialDefaultColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GeneratedColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.AS, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public GENERATED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GENERATED, 0);
    }
    public ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALWAYS, 0);
    }
    public VIRTUAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VIRTUAL, 0);
    }
    public STORED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STORED, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitGeneratedColumnConstraint) {
            return visitor.visitGeneratedColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FormatColumnConstraintContext extends ColumnConstraintContext {
    public _colformat?: Token | null;
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COLUMN_FORMAT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COLUMN_FORMAT, 0)!;
    }
    public FIXED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIXED, 0);
    }
    public DYNAMIC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DYNAMIC, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFormatColumnConstraint) {
            return visitor.visitFormatColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CollateColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COLLATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COLLATE, 0)!;
    }
    public collationName(): CollationNameContext {
        return this.getRuleContext(0, CollationNameContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCollateColumnConstraint) {
            return visitor.visitCollateColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEY, 0)!;
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRIMARY, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryKeyColumnConstraint) {
            return visitor.visitPrimaryKeyColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CheckColumnConstraintContext extends ColumnConstraintContext {
    public _name?: UidContext;
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHECK, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCheckColumnConstraint) {
            return visitor.visitCheckColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public nullNotnull(): NullNotnullContext {
        return this.getRuleContext(0, NullNotnullContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitNullColumnConstraint) {
            return visitor.visitNullColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DefaultColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEFAULT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DEFAULT, 0)!;
    }
    public defaultValue(): DefaultValueContext {
        return this.getRuleContext(0, DefaultValueContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaultColumnConstraint) {
            return visitor.visitDefaultColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReferenceColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public referenceDefinition(): ReferenceDefinitionContext {
        return this.getRuleContext(0, ReferenceDefinitionContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitReferenceColumnConstraint) {
            return visitor.visitReferenceColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InvisibilityColumnConstraintContext extends ColumnConstraintContext {
    public constructor(ctx: ColumnConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INVISIBLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INVISIBLE, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitInvisibilityColumnConstraint) {
            return visitor.visitInvisibilityColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tableConstraint;
    }
    public override copyFrom(ctx: TableConstraintContext): void {
        super.copyFrom(ctx);
    }
}
export class UniqueKeyTableConstraintContext extends TableConstraintContext {
    public _name?: UidContext;
    public _indexFormat?: Token | null;
    public _index?: UidContext;
    public constructor(ctx: TableConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNIQUE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UNIQUE, 0)!;
    }
    public indexColumnNames(): IndexColumnNamesContext {
        return this.getRuleContext(0, IndexColumnNamesContext)!;
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT, 0);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(0, IndexTypeContext);
    }
    public indexOption(): IndexOptionContext[];
    public indexOption(i: number): IndexOptionContext | null;
    public indexOption(i?: number): IndexOptionContext[] | IndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }

        return this.getRuleContext(i, IndexOptionContext);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUniqueKeyTableConstraint) {
            return visitor.visitUniqueKeyTableConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CheckTableConstraintContext extends TableConstraintContext {
    public _name?: UidContext;
    public constructor(ctx: TableConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHECK, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCheckTableConstraint) {
            return visitor.visitCheckTableConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrimaryKeyTableConstraintContext extends TableConstraintContext {
    public _name?: UidContext;
    public _index?: UidContext;
    public constructor(ctx: TableConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PRIMARY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PRIMARY, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEY, 0)!;
    }
    public indexColumnNames(): IndexColumnNamesContext {
        return this.getRuleContext(0, IndexColumnNamesContext)!;
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT, 0);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(0, IndexTypeContext);
    }
    public indexOption(): IndexOptionContext[];
    public indexOption(i: number): IndexOptionContext | null;
    public indexOption(i?: number): IndexOptionContext[] | IndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }

        return this.getRuleContext(i, IndexOptionContext);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryKeyTableConstraint) {
            return visitor.visitPrimaryKeyTableConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ForeignKeyTableConstraintContext extends TableConstraintContext {
    public _name?: UidContext;
    public _index?: UidContext;
    public constructor(ctx: TableConstraintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FOREIGN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FOREIGN, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEY, 0)!;
    }
    public indexColumnNames(): IndexColumnNamesContext {
        return this.getRuleContext(0, IndexColumnNamesContext)!;
    }
    public referenceDefinition(): ReferenceDefinitionContext {
        return this.getRuleContext(0, ReferenceDefinitionContext)!;
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT, 0);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitForeignKeyTableConstraint) {
            return visitor.visitForeignKeyTableConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReferenceDefinitionContext extends antlr.ParserRuleContext {
    public _matchType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REFERENCES(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REFERENCES, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public indexColumnNames(): IndexColumnNamesContext | null {
        return this.getRuleContext(0, IndexColumnNamesContext);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MATCH, 0);
    }
    public referenceAction(): ReferenceActionContext | null {
        return this.getRuleContext(0, ReferenceActionContext);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FULL, 0);
    }
    public PARTIAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTIAL, 0);
    }
    public SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SIMPLE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_referenceDefinition;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitReferenceDefinition) {
            return visitor.visitReferenceDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReferenceActionContext extends antlr.ParserRuleContext {
    public _onDelete?: ReferenceControlTypeContext;
    public _onUpdate?: ReferenceControlTypeContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ON);
    	} else {
    		return this.getToken(MySqlParser.ON, i);
    	}
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DELETE, 0);
    }
    public referenceControlType(): ReferenceControlTypeContext[];
    public referenceControlType(i: number): ReferenceControlTypeContext | null;
    public referenceControlType(i?: number): ReferenceControlTypeContext[] | ReferenceControlTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ReferenceControlTypeContext);
        }

        return this.getRuleContext(i, ReferenceControlTypeContext);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPDATE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_referenceAction;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitReferenceAction) {
            return visitor.visitReferenceAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReferenceControlTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RESTRICT, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CASCADE, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public NULL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NULL_LITERAL, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NO, 0);
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ACTION, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_referenceControlType;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitReferenceControlType) {
            return visitor.visitReferenceControlType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_indexColumnDefinition;
    }
    public override copyFrom(ctx: IndexColumnDefinitionContext): void {
        super.copyFrom(ctx);
    }
}
export class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
    public _indexFormat?: Token | null;
    public constructor(ctx: IndexColumnDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public indexColumnNames(): IndexColumnNamesContext {
        return this.getRuleContext(0, IndexColumnNamesContext)!;
    }
    public FULLTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FULLTEXT, 0);
    }
    public SPATIAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SPATIAL, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public indexOption(): IndexOptionContext[];
    public indexOption(i: number): IndexOptionContext | null;
    public indexOption(i?: number): IndexOptionContext[] | IndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }

        return this.getRuleContext(i, IndexOptionContext);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSpecialIndexDeclaration) {
            return visitor.visitSpecialIndexDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
    public _indexFormat?: Token | null;
    public constructor(ctx: IndexColumnDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public indexColumnNames(): IndexColumnNamesContext {
        return this.getRuleContext(0, IndexColumnNamesContext)!;
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(0, IndexTypeContext);
    }
    public indexOption(): IndexOptionContext[];
    public indexOption(i: number): IndexOptionContext | null;
    public indexOption(i?: number): IndexOptionContext[] | IndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }

        return this.getRuleContext(i, IndexOptionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleIndexDeclaration) {
            return visitor.visitSimpleIndexDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tableOption;
    }
    public override copyFrom(ctx: TableOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class TableOptionEngineContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENGINE, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public engineName(): EngineNameContext | null {
        return this.getRuleContext(0, EngineNameContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionEngine) {
            return visitor.visitTableOptionEngine(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionMaxRowsContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MAX_ROWS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MAX_ROWS, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionMaxRows) {
            return visitor.visitTableOptionMaxRows(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionCollateContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COLLATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COLLATE, 0)!;
    }
    public collationName(): CollationNameContext {
        return this.getRuleContext(0, CollationNameContext)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionCollate) {
            return visitor.visitTableOptionCollate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionPersistentContext extends TableOptionContext {
    public _extBoolValue?: Token | null;
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STATS_PERSISTENT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STATS_PERSISTENT, 0)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public ZERO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionPersistent) {
            return visitor.visitTableOptionPersistent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionTablespaceContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLESPACE, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public tablespaceStorage(): TablespaceStorageContext | null {
        return this.getRuleContext(0, TablespaceStorageContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionTablespace) {
            return visitor.visitTableOptionTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionAutoextendSizeContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AUTOEXTEND_SIZE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionAutoextendSize) {
            return visitor.visitTableOptionAutoextendSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionPageCompressedContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PAGE_COMPRESSED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PAGE_COMPRESSED, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public ZERO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionPageCompressed) {
            return visitor.visitTableOptionPageCompressed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionStartTransactionContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public START(): antlr.TerminalNode {
        return this.getToken(MySqlParser.START, 0)!;
    }
    public TRANSACTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TRANSACTION, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionStartTransaction) {
            return visitor.visitTableOptionStartTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionPackKeysContext extends TableOptionContext {
    public _extBoolValue?: Token | null;
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PACK_KEYS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PACK_KEYS, 0)!;
    }
    public ZERO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionPackKeys) {
            return visitor.visitTableOptionPackKeys(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionPasswordContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PASSWORD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PASSWORD, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionPassword) {
            return visitor.visitTableOptionPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionUnionContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UNION, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public tables(): TablesContext {
        return this.getRuleContext(0, TablesContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionUnion) {
            return visitor.visitTableOptionUnion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionSamplePageContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STATS_SAMPLE_PAGES(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionSamplePage) {
            return visitor.visitTableOptionSamplePage(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionCharsetContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public charSet(): CharSetContext {
        return this.getRuleContext(0, CharSetContext)!;
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.DEFAULT);
    	} else {
    		return this.getToken(MySqlParser.DEFAULT, i);
    	}
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionCharset) {
            return visitor.visitTableOptionCharset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionIndexDirectoryContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INDEX, 0)!;
    }
    public DIRECTORY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DIRECTORY, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionIndexDirectory) {
            return visitor.visitTableOptionIndexDirectory(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionTableTypeContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE_TYPE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE_TYPE, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public tableType(): TableTypeContext {
        return this.getRuleContext(0, TableTypeContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionTableType) {
            return visitor.visitTableOptionTableType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionKeyBlockSizeContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KEY_BLOCK_SIZE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)!;
    }
    public fileSizeLiteral(): FileSizeLiteralContext {
        return this.getRuleContext(0, FileSizeLiteralContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionKeyBlockSize) {
            return visitor.visitTableOptionKeyBlockSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionEncryptionContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ENCRYPTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENCRYPTION, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionEncryption) {
            return visitor.visitTableOptionEncryption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionDataDirectoryContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DIRECTORY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DIRECTORY, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATA, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionDataDirectory) {
            return visitor.visitTableOptionDataDirectory(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionRecalculationContext extends TableOptionContext {
    public _extBoolValue?: Token | null;
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STATS_AUTO_RECALC(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public ZERO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionRecalculation) {
            return visitor.visitTableOptionRecalculation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionAutoIncrementContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AUTO_INCREMENT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.AUTO_INCREMENT, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionAutoIncrement) {
            return visitor.visitTableOptionAutoIncrement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionEncryptionKeyIdContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ENCRYPTION_KEY_ID(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENCRYPTION_KEY_ID, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionEncryptionKeyId) {
            return visitor.visitTableOptionEncryptionKeyId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionChecksumContext extends TableOptionContext {
    public _boolValue?: Token | null;
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CHECKSUM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHECKSUM, 0);
    }
    public PAGE_CHECKSUM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PAGE_CHECKSUM, 0);
    }
    public ZERO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionChecksum) {
            return visitor.visitTableOptionChecksum(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionDelayContext extends TableOptionContext {
    public _boolValue?: Token | null;
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DELAY_KEY_WRITE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0)!;
    }
    public ZERO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionDelay) {
            return visitor.visitTableOptionDelay(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionConnectionContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONNECTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CONNECTION, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionConnection) {
            return visitor.visitTableOptionConnection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionTransactionalContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRANSACTIONAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TRANSACTIONAL, 0)!;
    }
    public ZERO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionTransactional) {
            return visitor.visitTableOptionTransactional(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionPageCompressionLevelContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public PAGE_COMPRESSION_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PAGE_COMPRESSION_LEVEL, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionPageCompressionLevel) {
            return visitor.visitTableOptionPageCompressionLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionSecondaryEngineAttributeContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SECONDARY_ENGINE_ATTRIBUTE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionSecondaryEngineAttribute) {
            return visitor.visitTableOptionSecondaryEngineAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionCommentContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMENT, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionComment) {
            return visitor.visitTableOptionComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionAverageContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AVG_ROW_LENGTH(): antlr.TerminalNode {
        return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionAverage) {
            return visitor.visitTableOptionAverage(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionRowFormatContext extends TableOptionContext {
    public _rowFormat?: Token | null;
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROW_FORMAT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ROW_FORMAT, 0)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public DYNAMIC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DYNAMIC, 0);
    }
    public FIXED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIXED, 0);
    }
    public COMPRESSED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMPRESSED, 0);
    }
    public REDUNDANT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REDUNDANT, 0);
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMPACT, 0);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ID, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionRowFormat) {
            return visitor.visitTableOptionRowFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionCompressionContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMPRESSION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMPRESSION, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ID, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionCompression) {
            return visitor.visitTableOptionCompression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionInsertMethodContext extends TableOptionContext {
    public _insertMethod?: Token | null;
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INSERT_METHOD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INSERT_METHOD, 0)!;
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NO, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIRST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LAST, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionInsertMethod) {
            return visitor.visitTableOptionInsertMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionEngineAttributeContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ENGINE_ATTRIBUTE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionEngineAttribute) {
            return visitor.visitTableOptionEngineAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableOptionMinRowsContext extends TableOptionContext {
    public constructor(ctx: TableOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MIN_ROWS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MIN_ROWS, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOptionMinRows) {
            return visitor.visitTableOptionMinRows(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MYSQL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MYSQL, 0);
    }
    public ODBC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ODBC, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tableType;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableType) {
            return visitor.visitTableType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablespaceStorageContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STORAGE, 0)!;
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISK, 0);
    }
    public MEMORY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MEMORY, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tablespaceStorage;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablespaceStorage) {
            return visitor.visitTablespaceStorage(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDefinitionsContext extends antlr.ParserRuleContext {
    public _count?: DecimalLiteralContext;
    public _subCount?: DecimalLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode[];
    public BY(i: number): antlr.TerminalNode | null;
    public BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.BY);
    	} else {
    		return this.getToken(MySqlParser.BY, i);
    	}
    }
    public partitionFunctionDefinition(): PartitionFunctionDefinitionContext {
        return this.getRuleContext(0, PartitionFunctionDefinitionContext)!;
    }
    public PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTITIONS, 0);
    }
    public SUBPARTITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBPARTITION, 0);
    }
    public subpartitionFunctionDefinition(): SubpartitionFunctionDefinitionContext | null {
        return this.getRuleContext(0, SubpartitionFunctionDefinitionContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public partitionDefinition(): PartitionDefinitionContext[];
    public partitionDefinition(i: number): PartitionDefinitionContext | null;
    public partitionDefinition(i?: number): PartitionDefinitionContext[] | PartitionDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionDefinitionContext);
        }

        return this.getRuleContext(i, PartitionDefinitionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public decimalLiteral(): DecimalLiteralContext[];
    public decimalLiteral(i: number): DecimalLiteralContext | null;
    public decimalLiteral(i?: number): DecimalLiteralContext[] | DecimalLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }

        return this.getRuleContext(i, DecimalLiteralContext);
    }
    public SUBPARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBPARTITIONS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_partitionDefinitions;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionDefinitions) {
            return visitor.visitPartitionDefinitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionFunctionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_partitionFunctionDefinition;
    }
    public override copyFrom(ctx: PartitionFunctionDefinitionContext): void {
        super.copyFrom(ctx);
    }
}
export class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
    public _algType?: Token | null;
    public constructor(ctx: PartitionFunctionDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEY, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public LINEAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINEAR, 0);
    }
    public ALGORITHM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALGORITHM, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public TWO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TWO_DECIMAL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionFunctionKey) {
            return visitor.visitPartitionFunctionKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
    public constructor(ctx: PartitionFunctionDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public HASH(): antlr.TerminalNode {
        return this.getToken(MySqlParser.HASH, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public LINEAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINEAR, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionFunctionHash) {
            return visitor.visitPartitionFunctionHash(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
    public constructor(ctx: PartitionFunctionDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LIST(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LIST, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMNS, 0);
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionFunctionList) {
            return visitor.visitPartitionFunctionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
    public constructor(ctx: PartitionFunctionDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RANGE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RANGE, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMNS, 0);
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionFunctionRange) {
            return visitor.visitPartitionFunctionRange(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubpartitionFunctionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_subpartitionFunctionDefinition;
    }
    public override copyFrom(ctx: SubpartitionFunctionDefinitionContext): void {
        super.copyFrom(ctx);
    }
}
export class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
    public constructor(ctx: SubpartitionFunctionDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public HASH(): antlr.TerminalNode {
        return this.getToken(MySqlParser.HASH, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public LINEAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINEAR, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubPartitionFunctionHash) {
            return visitor.visitSubPartitionFunctionHash(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
    public _algType?: Token | null;
    public constructor(ctx: SubpartitionFunctionDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEY, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public uidList(): UidListContext {
        return this.getRuleContext(0, UidListContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public LINEAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINEAR, 0);
    }
    public ALGORITHM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALGORITHM, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public TWO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TWO_DECIMAL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubPartitionFunctionKey) {
            return visitor.visitSubPartitionFunctionKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_partitionDefinition;
    }
    public override copyFrom(ctx: PartitionDefinitionContext): void {
        super.copyFrom(ctx);
    }
}
export class PartitionComparisonContext extends PartitionDefinitionContext {
    public constructor(ctx: PartitionDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VALUES, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LESS, 0)!;
    }
    public THAN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.THAN, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public partitionDefinerAtom(): PartitionDefinerAtomContext[];
    public partitionDefinerAtom(i: number): PartitionDefinerAtomContext | null;
    public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext[] | PartitionDefinerAtomContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionDefinerAtomContext);
        }

        return this.getRuleContext(i, PartitionDefinerAtomContext);
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public partitionOption(): PartitionOptionContext[];
    public partitionOption(i: number): PartitionOptionContext | null;
    public partitionOption(i?: number): PartitionOptionContext[] | PartitionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionOptionContext);
        }

        return this.getRuleContext(i, PartitionOptionContext);
    }
    public subpartitionDefinition(): SubpartitionDefinitionContext[];
    public subpartitionDefinition(i: number): SubpartitionDefinitionContext | null;
    public subpartitionDefinition(i?: number): SubpartitionDefinitionContext[] | SubpartitionDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubpartitionDefinitionContext);
        }

        return this.getRuleContext(i, SubpartitionDefinitionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionComparison) {
            return visitor.visitPartitionComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionListAtomContext extends PartitionDefinitionContext {
    public constructor(ctx: PartitionDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VALUES, 0)!;
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IN, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public partitionDefinerAtom(): PartitionDefinerAtomContext[];
    public partitionDefinerAtom(i: number): PartitionDefinerAtomContext | null;
    public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext[] | PartitionDefinerAtomContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionDefinerAtomContext);
        }

        return this.getRuleContext(i, PartitionDefinerAtomContext);
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public partitionOption(): PartitionOptionContext[];
    public partitionOption(i: number): PartitionOptionContext | null;
    public partitionOption(i?: number): PartitionOptionContext[] | PartitionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionOptionContext);
        }

        return this.getRuleContext(i, PartitionOptionContext);
    }
    public subpartitionDefinition(): SubpartitionDefinitionContext[];
    public subpartitionDefinition(i: number): SubpartitionDefinitionContext | null;
    public subpartitionDefinition(i?: number): SubpartitionDefinitionContext[] | SubpartitionDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubpartitionDefinitionContext);
        }

        return this.getRuleContext(i, SubpartitionDefinitionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionListAtom) {
            return visitor.visitPartitionListAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionListVectorContext extends PartitionDefinitionContext {
    public constructor(ctx: PartitionDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VALUES, 0)!;
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IN, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public partitionDefinerVector(): PartitionDefinerVectorContext[];
    public partitionDefinerVector(i: number): PartitionDefinerVectorContext | null;
    public partitionDefinerVector(i?: number): PartitionDefinerVectorContext[] | PartitionDefinerVectorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionDefinerVectorContext);
        }

        return this.getRuleContext(i, PartitionDefinerVectorContext);
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public partitionOption(): PartitionOptionContext[];
    public partitionOption(i: number): PartitionOptionContext | null;
    public partitionOption(i?: number): PartitionOptionContext[] | PartitionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionOptionContext);
        }

        return this.getRuleContext(i, PartitionOptionContext);
    }
    public subpartitionDefinition(): SubpartitionDefinitionContext[];
    public subpartitionDefinition(i: number): SubpartitionDefinitionContext | null;
    public subpartitionDefinition(i?: number): SubpartitionDefinitionContext[] | SubpartitionDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubpartitionDefinitionContext);
        }

        return this.getRuleContext(i, SubpartitionDefinitionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionListVector) {
            return visitor.visitPartitionListVector(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionSimpleContext extends PartitionDefinitionContext {
    public constructor(ctx: PartitionDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public partitionOption(): PartitionOptionContext[];
    public partitionOption(i: number): PartitionOptionContext | null;
    public partitionOption(i?: number): PartitionOptionContext[] | PartitionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionOptionContext);
        }

        return this.getRuleContext(i, PartitionOptionContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public subpartitionDefinition(): SubpartitionDefinitionContext[];
    public subpartitionDefinition(i: number): SubpartitionDefinitionContext | null;
    public subpartitionDefinition(i?: number): SubpartitionDefinitionContext[] | SubpartitionDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubpartitionDefinitionContext);
        }

        return this.getRuleContext(i, SubpartitionDefinitionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSimple) {
            return visitor.visitPartitionSimple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDefinerAtomContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAXVALUE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_partitionDefinerAtom;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionDefinerAtom) {
            return visitor.visitPartitionDefinerAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDefinerVectorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public partitionDefinerAtom(): PartitionDefinerAtomContext[];
    public partitionDefinerAtom(i: number): PartitionDefinerAtomContext | null;
    public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext[] | PartitionDefinerAtomContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionDefinerAtomContext);
        }

        return this.getRuleContext(i, PartitionDefinerAtomContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_partitionDefinerVector;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionDefinerVector) {
            return visitor.visitPartitionDefinerVector(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubpartitionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBPARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SUBPARTITION, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public partitionOption(): PartitionOptionContext[];
    public partitionOption(i: number): PartitionOptionContext | null;
    public partitionOption(i?: number): PartitionOptionContext[] | PartitionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionOptionContext);
        }

        return this.getRuleContext(i, PartitionOptionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_subpartitionDefinition;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubpartitionDefinition) {
            return visitor.visitSubpartitionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_partitionOption;
    }
    public override copyFrom(ctx: PartitionOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class PartitionOptionCommentContext extends PartitionOptionContext {
    public _comment?: Token | null;
    public constructor(ctx: PartitionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMENT, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionOptionComment) {
            return visitor.visitPartitionOptionComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionOptionNodeGroupContext extends PartitionOptionContext {
    public _nodegroup?: UidContext;
    public constructor(ctx: PartitionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NODEGROUP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.NODEGROUP, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionOptionNodeGroup) {
            return visitor.visitPartitionOptionNodeGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
    public _indexDirectory?: Token | null;
    public constructor(ctx: PartitionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INDEX, 0)!;
    }
    public DIRECTORY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DIRECTORY, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionOptionIndexDirectory) {
            return visitor.visitPartitionOptionIndexDirectory(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionOptionMaxRowsContext extends PartitionOptionContext {
    public _maxRows?: DecimalLiteralContext;
    public constructor(ctx: PartitionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MAX_ROWS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MAX_ROWS, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionOptionMaxRows) {
            return visitor.visitPartitionOptionMaxRows(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionOptionTablespaceContext extends PartitionOptionContext {
    public _tablespace?: UidContext;
    public constructor(ctx: PartitionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLESPACE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionOptionTablespace) {
            return visitor.visitPartitionOptionTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionOptionEngineContext extends PartitionOptionContext {
    public constructor(ctx: PartitionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENGINE, 0)!;
    }
    public engineName(): EngineNameContext {
        return this.getRuleContext(0, EngineNameContext)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STORAGE, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionOptionEngine) {
            return visitor.visitPartitionOptionEngine(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionOptionMinRowsContext extends PartitionOptionContext {
    public _minRows?: DecimalLiteralContext;
    public constructor(ctx: PartitionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MIN_ROWS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MIN_ROWS, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionOptionMinRows) {
            return visitor.visitPartitionOptionMinRows(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
    public _dataDirectory?: Token | null;
    public constructor(ctx: PartitionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DATA, 0)!;
    }
    public DIRECTORY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DIRECTORY, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionOptionDataDirectory) {
            return visitor.visitPartitionOptionDataDirectory(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterDatabase;
    }
    public override copyFrom(ctx: AlterDatabaseContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterUpgradeNameContext extends AlterDatabaseContext {
    public _dbFormat?: Token | null;
    public constructor(ctx: AlterDatabaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public UPGRADE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UPGRADE, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DATA, 0)!;
    }
    public DIRECTORY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DIRECTORY, 0)!;
    }
    public NAME(): antlr.TerminalNode {
        return this.getToken(MySqlParser.NAME, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATABASE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEMA, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterUpgradeName) {
            return visitor.visitAlterUpgradeName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterSimpleDatabaseContext extends AlterDatabaseContext {
    public _dbFormat?: Token | null;
    public constructor(ctx: AlterDatabaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATABASE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEMA, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public createDatabaseOption(): CreateDatabaseOptionContext[];
    public createDatabaseOption(i: number): CreateDatabaseOptionContext | null;
    public createDatabaseOption(i?: number): CreateDatabaseOptionContext[] | CreateDatabaseOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateDatabaseOptionContext);
        }

        return this.getRuleContext(i, CreateDatabaseOptionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterSimpleDatabase) {
            return visitor.visitAlterSimpleDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterEventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public EVENT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EVENT, 0)!;
    }
    public fullId(): FullIdContext[];
    public fullId(i: number): FullIdContext | null;
    public fullId(i?: number): FullIdContext[] | FullIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FullIdContext);
        }

        return this.getRuleContext(i, FullIdContext);
    }
    public ownerStatement(): OwnerStatementContext | null {
        return this.getRuleContext(0, OwnerStatementContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ON);
    	} else {
    		return this.getToken(MySqlParser.ON, i);
    	}
    }
    public SCHEDULE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEDULE, 0);
    }
    public scheduleExpression(): ScheduleExpressionContext | null {
        return this.getRuleContext(0, ScheduleExpressionContext);
    }
    public COMPLETION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMPLETION, 0);
    }
    public PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRESERVE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RENAME, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TO, 0);
    }
    public enableType(): EnableTypeContext | null {
        return this.getRuleContext(0, EnableTypeContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public DO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DO, 0);
    }
    public routineBody(): RoutineBodyContext | null {
        return this.getRuleContext(0, RoutineBodyContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterEvent;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterEvent) {
            return visitor.visitAlterEvent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FUNCTION, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public routineOption(): RoutineOptionContext[];
    public routineOption(i: number): RoutineOptionContext | null;
    public routineOption(i?: number): RoutineOptionContext[] | RoutineOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineOptionContext);
        }

        return this.getRuleContext(i, RoutineOptionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterFunction;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterFunction) {
            return visitor.visitAlterFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterInstanceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public INSTANCE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INSTANCE, 0)!;
    }
    public ROTATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ROTATE, 0)!;
    }
    public INNODB(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INNODB, 0)!;
    }
    public MASTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MASTER, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEY, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterInstance;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterInstance) {
            return visitor.visitAlterInstance(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterLogfileGroupContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public LOGFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOGFILE, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.GROUP, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public UNDOFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UNDOFILE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENGINE, 0)!;
    }
    public engineName(): EngineNameContext {
        return this.getRuleContext(0, EngineNameContext)!;
    }
    public INITIAL_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INITIAL_SIZE, 0);
    }
    public fileSizeLiteral(): FileSizeLiteralContext | null {
        return this.getRuleContext(0, FileSizeLiteralContext);
    }
    public WAIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WAIT, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterLogfileGroup;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterLogfileGroup) {
            return visitor.visitAlterLogfileGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterProcedureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public PROCEDURE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PROCEDURE, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public routineOption(): RoutineOptionContext[];
    public routineOption(i: number): RoutineOptionContext | null;
    public routineOption(i?: number): RoutineOptionContext[] | RoutineOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineOptionContext);
        }

        return this.getRuleContext(i, RoutineOptionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterProcedure;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterProcedure) {
            return visitor.visitAlterProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterServerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public SERVER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SERVER, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public OPTIONS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.OPTIONS, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public serverOption(): ServerOptionContext[];
    public serverOption(i: number): ServerOptionContext | null;
    public serverOption(i?: number): ServerOptionContext[] | ServerOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ServerOptionContext);
        }

        return this.getRuleContext(i, ServerOptionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterServer;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterServer) {
            return visitor.visitAlterServer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableContext extends antlr.ParserRuleContext {
    public _intimeAction?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IGNORE, 0);
    }
    public waitNowaitClause(): WaitNowaitClauseContext | null {
        return this.getRuleContext(0, WaitNowaitClauseContext);
    }
    public alterSpecification(): AlterSpecificationContext[];
    public alterSpecification(i: number): AlterSpecificationContext | null;
    public alterSpecification(i?: number): AlterSpecificationContext[] | AlterSpecificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterSpecificationContext);
        }

        return this.getRuleContext(i, AlterSpecificationContext);
    }
    public partitionDefinitions(): PartitionDefinitionsContext | null {
        return this.getRuleContext(0, PartitionDefinitionsContext);
    }
    public ONLINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONLINE, 0);
    }
    public OFFLINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OFFLINE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterTable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTable) {
            return visitor.visitAlterTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTablespaceContext extends antlr.ParserRuleContext {
    public _objectAction?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLESPACE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public DATAFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DATAFILE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENGINE, 0)!;
    }
    public engineName(): EngineNameContext {
        return this.getRuleContext(0, EngineNameContext)!;
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ADD, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DROP, 0);
    }
    public INITIAL_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INITIAL_SIZE, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public fileSizeLiteral(): FileSizeLiteralContext | null {
        return this.getRuleContext(0, FileSizeLiteralContext);
    }
    public WAIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WAIT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterTablespace;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTablespace) {
            return visitor.visitAlterTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterViewContext extends antlr.ParserRuleContext {
    public _algType?: Token | null;
    public _secContext?: Token | null;
    public _checkOpt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VIEW, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.AS, 0)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public ALGORITHM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALGORITHM, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public ownerStatement(): OwnerStatementContext | null {
        return this.getRuleContext(0, OwnerStatementContext);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SECURITY, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHECK, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OPTION, 0);
    }
    public UNDEFINED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNDEFINED, 0);
    }
    public MERGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MERGE, 0);
    }
    public TEMPTABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TEMPTABLE, 0);
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFINER, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INVOKER, 0);
    }
    public CASCADED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CASCADED, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterView;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterView) {
            return visitor.visitAlterView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterSpecification;
    }
    public override copyFrom(ctx: AlterSpecificationContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterByAlterColumnDefaultContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DROP, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN, 0);
    }
    public VISIBLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VISIBLE, 0);
    }
    public INVISIBLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INVISIBLE, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAlterColumnDefault) {
            return visitor.visitAlterByAlterColumnDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByDisableKeysContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DISABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DISABLE, 0)!;
    }
    public KEYS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEYS, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByDisableKeys) {
            return visitor.visitAlterByDisableKeys(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByDefaultCharsetContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CHARACTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHARACTER, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SET, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(0, CharsetNameContext)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLLATE, 0);
    }
    public collationName(): CollationNameContext | null {
        return this.getRuleContext(0, CollationNameContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByDefaultCharset) {
            return visitor.visitAlterByDefaultCharset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByRenameColumnContext extends AlterSpecificationContext {
    public _oldColumn?: UidContext;
    public _newColumn?: UidContext;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RENAME, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COLUMN, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TO, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByRenameColumn) {
            return visitor.visitAlterByRenameColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByConvertCharsetContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CONVERT, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TO, 0)!;
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(0, CharsetNameContext)!;
    }
    public CHARSET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARSET, 0);
    }
    public CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARACTER, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLLATE, 0);
    }
    public collationName(): CollationNameContext | null {
        return this.getRuleContext(0, CollationNameContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByConvertCharset) {
            return visitor.visitAlterByConvertCharset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAddForeignKeyContext extends AlterSpecificationContext {
    public _name?: UidContext;
    public _indexName?: UidContext;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public FOREIGN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FOREIGN, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEY, 0)!;
    }
    public indexColumnNames(): IndexColumnNamesContext {
        return this.getRuleContext(0, IndexColumnNamesContext)!;
    }
    public referenceDefinition(): ReferenceDefinitionContext {
        return this.getRuleContext(0, ReferenceDefinitionContext)!;
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT, 0);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAddForeignKey) {
            return visitor.visitAlterByAddForeignKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByRenameIndexContext extends AlterSpecificationContext {
    public _indexFormat?: Token | null;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RENAME, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TO, 0)!;
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByRenameIndex) {
            return visitor.visitAlterByRenameIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByRenameContext extends AlterSpecificationContext {
    public _renameFormat?: Token | null;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RENAME, 0)!;
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public fullId(): FullIdContext | null {
        return this.getRuleContext(0, FullIdContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TO, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByRename) {
            return visitor.visitAlterByRename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByImportTablespaceContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IMPORT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IMPORT, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLESPACE, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByImportTablespace) {
            return visitor.visitAlterByImportTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAddDefinitionsContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public createDefinition(): CreateDefinitionContext[];
    public createDefinition(i: number): CreateDefinitionContext | null;
    public createDefinition(i?: number): CreateDefinitionContext[] | CreateDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateDefinitionContext);
        }

        return this.getRuleContext(i, CreateDefinitionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAddDefinitions) {
            return visitor.visitAlterByAddDefinitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAlterCheckTableConstraintContext extends AlterSpecificationContext {
    public _name?: UidContext;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHECK, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public ENFORCED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENFORCED, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAlterCheckTableConstraint) {
            return visitor.visitAlterByAlterCheckTableConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByDropConstraintCheckContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHECK, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByDropConstraintCheck) {
            return visitor.visitAlterByDropConstraintCheck(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAddColumnsContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public columnDefinition(): ColumnDefinitionContext[];
    public columnDefinition(i: number): ColumnDefinitionContext | null;
    public columnDefinition(i?: number): ColumnDefinitionContext[] | ColumnDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnDefinitionContext);
        }

        return this.getRuleContext(i, ColumnDefinitionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAddColumns) {
            return visitor.visitAlterByAddColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INDEX, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public VISIBLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VISIBLE, 0);
    }
    public INVISIBLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INVISIBLE, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAlterIndexVisibility) {
            return visitor.visitAlterByAlterIndexVisibility(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByDropForeignKeyContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public FOREIGN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FOREIGN, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEY, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByDropForeignKey) {
            return visitor.visitAlterByDropForeignKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
    public _name?: UidContext;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHECK, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public ENFORCED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENFORCED, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAddCheckTableConstraint) {
            return visitor.visitAlterByAddCheckTableConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterPartitionContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public alterPartitionSpecification(): AlterPartitionSpecificationContext {
        return this.getRuleContext(0, AlterPartitionSpecificationContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterPartition) {
            return visitor.visitAlterPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAddIndexContext extends AlterSpecificationContext {
    public _indexFormat?: Token | null;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public indexColumnNames(): IndexColumnNamesContext {
        return this.getRuleContext(0, IndexColumnNamesContext)!;
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(0, IndexTypeContext);
    }
    public indexOption(): IndexOptionContext[];
    public indexOption(i: number): IndexOptionContext | null;
    public indexOption(i?: number): IndexOptionContext[] | IndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }

        return this.getRuleContext(i, IndexOptionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAddIndex) {
            return visitor.visitAlterByAddIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByDropColumnContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RESTRICT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByDropColumn) {
            return visitor.visitAlterByDropColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByChangeDefaultContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public defaultValue(): DefaultValueContext | null {
        return this.getRuleContext(0, DefaultValueContext);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DROP, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByChangeDefault) {
            return visitor.visitAlterByChangeDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByForceContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FORCE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FORCE, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByForce) {
            return visitor.visitAlterByForce(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
    public _keyType?: Token | null;
    public _indexFormat?: Token | null;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public indexColumnNames(): IndexColumnNamesContext {
        return this.getRuleContext(0, IndexColumnNamesContext)!;
    }
    public FULLTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FULLTEXT, 0);
    }
    public SPATIAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SPATIAL, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public indexOption(): IndexOptionContext[];
    public indexOption(i: number): IndexOptionContext | null;
    public indexOption(i?: number): IndexOptionContext[] | IndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }

        return this.getRuleContext(i, IndexOptionContext);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAddSpecialIndex) {
            return visitor.visitAlterByAddSpecialIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByModifyColumnContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MODIFY, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public columnDefinition(): ColumnDefinitionContext {
        return this.getRuleContext(0, ColumnDefinitionContext)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIRST, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AFTER, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByModifyColumn) {
            return visitor.visitAlterByModifyColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByTableOptionContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableOption(): TableOptionContext[];
    public tableOption(i: number): TableOptionContext | null;
    public tableOption(i?: number): TableOptionContext[] | TableOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableOptionContext);
        }

        return this.getRuleContext(i, TableOptionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByTableOption) {
            return visitor.visitAlterByTableOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public PRIMARY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PRIMARY, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEY, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByDropPrimaryKey) {
            return visitor.visitAlterByDropPrimaryKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByLockContext extends AlterSpecificationContext {
    public _lockType?: Token | null;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOCK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOCK, 0)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NONE, 0);
    }
    public SHARED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHARED, 0);
    }
    public EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXCLUSIVE, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByLock) {
            return visitor.visitAlterByLock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DISCARD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DISCARD, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLESPACE, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByDiscardTablespace) {
            return visitor.visitAlterByDiscardTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByValidateContext extends AlterSpecificationContext {
    public _validationFormat?: Token | null;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public VALIDATION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VALIDATION, 0)!;
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITHOUT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByValidate) {
            return visitor.visitAlterByValidate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
    public _name?: UidContext;
    public _index?: UidContext;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public PRIMARY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PRIMARY, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEY, 0)!;
    }
    public indexColumnNames(): IndexColumnNamesContext {
        return this.getRuleContext(0, IndexColumnNamesContext)!;
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT, 0);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(0, IndexTypeContext);
    }
    public indexOption(): IndexOptionContext[];
    public indexOption(i: number): IndexOptionContext | null;
    public indexOption(i?: number): IndexOptionContext[] | IndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }

        return this.getRuleContext(i, IndexOptionContext);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAddPrimaryKey) {
            return visitor.visitAlterByAddPrimaryKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByEnableKeysContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ENABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENABLE, 0)!;
    }
    public KEYS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KEYS, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByEnableKeys) {
            return visitor.visitAlterByEnableKeys(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterBySetAlgorithmContext extends AlterSpecificationContext {
    public _algType?: Token | null;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALGORITHM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALGORITHM, 0)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public INSTANT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INSTANT, 0);
    }
    public INPLACE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INPLACE, 0);
    }
    public COPY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COPY, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterBySetAlgorithm) {
            return visitor.visitAlterBySetAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByChangeColumnContext extends AlterSpecificationContext {
    public _oldColumn?: UidContext;
    public _newColumn?: UidContext;
    public _afterColumn?: UidContext;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CHANGE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHANGE, 0)!;
    }
    public columnDefinition(): ColumnDefinitionContext {
        return this.getRuleContext(0, ColumnDefinitionContext)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIRST, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AFTER, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByChangeColumn) {
            return visitor.visitAlterByChangeColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
    public _name?: UidContext;
    public _indexFormat?: Token | null;
    public _indexName?: UidContext;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public UNIQUE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UNIQUE, 0)!;
    }
    public indexColumnNames(): IndexColumnNamesContext {
        return this.getRuleContext(0, IndexColumnNamesContext)!;
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT, 0);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(0, IndexTypeContext);
    }
    public indexOption(): IndexOptionContext[];
    public indexOption(i: number): IndexOptionContext | null;
    public indexOption(i?: number): IndexOptionContext[] | IndexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }

        return this.getRuleContext(i, IndexOptionContext);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAddUniqueKey) {
            return visitor.visitAlterByAddUniqueKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByDropIndexContext extends AlterSpecificationContext {
    public _indexFormat?: Token | null;
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByDropIndex) {
            return visitor.visitAlterByDropIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAddColumnContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public columnDefinition(): ColumnDefinitionContext {
        return this.getRuleContext(0, ColumnDefinitionContext)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIRST, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AFTER, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAddColumn) {
            return visitor.visitAlterByAddColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByOrderContext extends AlterSpecificationContext {
    public constructor(ctx: AlterSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BY, 0)!;
    }
    public uidList(): UidListContext {
        return this.getRuleContext(0, UidListContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByOrder) {
            return visitor.visitAlterByOrder(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterPartitionSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterPartitionSpecification;
    }
    public override copyFrom(ctx: AlterPartitionSpecificationContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterByImportPartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IMPORT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IMPORT, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLESPACE, 0)!;
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByImportPartition) {
            return visitor.visitAlterByImportPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByDropPartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uidList(): UidListContext {
        return this.getRuleContext(0, UidListContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByDropPartition) {
            return visitor.visitAlterByDropPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByDiscardPartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DISCARD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DISCARD, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLESPACE, 0)!;
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByDiscardPartition) {
            return visitor.visitAlterByDiscardPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAddPartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ADD, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public partitionDefinition(): PartitionDefinitionContext[];
    public partitionDefinition(i: number): PartitionDefinitionContext | null;
    public partitionDefinition(i?: number): PartitionDefinitionContext[] | PartitionDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionDefinitionContext);
        }

        return this.getRuleContext(i, PartitionDefinitionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAddPartition) {
            return visitor.visitAlterByAddPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByRemovePartitioningContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REMOVE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REMOVE, 0)!;
    }
    public PARTITIONING(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITIONING, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByRemovePartitioning) {
            return visitor.visitAlterByRemovePartitioning(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByOptimizePartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OPTIMIZE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.OPTIMIZE, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByOptimizePartition) {
            return visitor.visitAlterByOptimizePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByCheckPartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHECK, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByCheckPartition) {
            return visitor.visitAlterByCheckPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByCoalescePartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COALESCE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COALESCE, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByCoalescePartition) {
            return visitor.visitAlterByCoalescePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByReorganizePartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REORGANIZE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REORGANIZE, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uidList(): UidListContext {
        return this.getRuleContext(0, UidListContext)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INTO, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public partitionDefinition(): PartitionDefinitionContext[];
    public partitionDefinition(i: number): PartitionDefinitionContext | null;
    public partitionDefinition(i?: number): PartitionDefinitionContext[] | PartitionDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionDefinitionContext);
        }

        return this.getRuleContext(i, PartitionDefinitionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByReorganizePartition) {
            return visitor.visitAlterByReorganizePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByAnalyzePartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ANALYZE, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByAnalyzePartition) {
            return visitor.visitAlterByAnalyzePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByRebuildPartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REBUILD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REBUILD, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByRebuildPartition) {
            return visitor.visitAlterByRebuildPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByUpgradePartitioningContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UPGRADE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UPGRADE, 0)!;
    }
    public PARTITIONING(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITIONING, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByUpgradePartitioning) {
            return visitor.visitAlterByUpgradePartitioning(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByTruncatePartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRUNCATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TRUNCATE, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByTruncatePartition) {
            return visitor.visitAlterByTruncatePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByRepairPartitionContext extends AlterPartitionSpecificationContext {
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPAIR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPAIR, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByRepairPartition) {
            return visitor.visitAlterByRepairPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterByExchangePartitionContext extends AlterPartitionSpecificationContext {
    public _validationFormat?: Token | null;
    public constructor(ctx: AlterPartitionSpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXCHANGE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EXCHANGE, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.WITH);
    	} else {
    		return this.getToken(MySqlParser.WITH, i);
    	}
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public VALIDATION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VALIDATION, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITHOUT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterByExchangePartition) {
            return visitor.visitAlterByExchangePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropDatabaseContext extends antlr.ParserRuleContext {
    public _dbFormat?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATABASE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEMA, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropDatabase;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropDatabase) {
            return visitor.visitDropDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropEventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public EVENT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EVENT, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropEvent;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropEvent) {
            return visitor.visitDropEvent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropIndexContext extends antlr.ParserRuleContext {
    public _intimeAction?: Token | null;
    public _algType?: Token | null;
    public _lockType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INDEX, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ALGORITHM(): antlr.TerminalNode[];
    public ALGORITHM(i: number): antlr.TerminalNode | null;
    public ALGORITHM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ALGORITHM);
    	} else {
    		return this.getToken(MySqlParser.ALGORITHM, i);
    	}
    }
    public LOCK(): antlr.TerminalNode[];
    public LOCK(i: number): antlr.TerminalNode | null;
    public LOCK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LOCK);
    	} else {
    		return this.getToken(MySqlParser.LOCK, i);
    	}
    }
    public ONLINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONLINE, 0);
    }
    public OFFLINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OFFLINE, 0);
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.DEFAULT);
    	} else {
    		return this.getToken(MySqlParser.DEFAULT, i);
    	}
    }
    public INPLACE(): antlr.TerminalNode[];
    public INPLACE(i: number): antlr.TerminalNode | null;
    public INPLACE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.INPLACE);
    	} else {
    		return this.getToken(MySqlParser.INPLACE, i);
    	}
    }
    public COPY(): antlr.TerminalNode[];
    public COPY(i: number): antlr.TerminalNode | null;
    public COPY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COPY);
    	} else {
    		return this.getToken(MySqlParser.COPY, i);
    	}
    }
    public NONE(): antlr.TerminalNode[];
    public NONE(i: number): antlr.TerminalNode | null;
    public NONE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.NONE);
    	} else {
    		return this.getToken(MySqlParser.NONE, i);
    	}
    }
    public SHARED(): antlr.TerminalNode[];
    public SHARED(i: number): antlr.TerminalNode | null;
    public SHARED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.SHARED);
    	} else {
    		return this.getToken(MySqlParser.SHARED, i);
    	}
    }
    public EXCLUSIVE(): antlr.TerminalNode[];
    public EXCLUSIVE(i: number): antlr.TerminalNode | null;
    public EXCLUSIVE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EXCLUSIVE);
    	} else {
    		return this.getToken(MySqlParser.EXCLUSIVE, i);
    	}
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropIndex;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndex) {
            return visitor.visitDropIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropLogfileGroupContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public LOGFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOGFILE, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.GROUP, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENGINE, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public engineName(): EngineNameContext {
        return this.getRuleContext(0, EngineNameContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropLogfileGroup;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropLogfileGroup) {
            return visitor.visitDropLogfileGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropProcedureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public PROCEDURE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PROCEDURE, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropProcedure;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropProcedure) {
            return visitor.visitDropProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FUNCTION, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropFunction;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropServerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public SERVER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SERVER, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropServer;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropServer) {
            return visitor.visitDropServer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTableContext extends antlr.ParserRuleContext {
    public _dropType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tables(): TablesContext {
        return this.getRuleContext(0, TablesContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TEMPORARY, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RESTRICT, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropTable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLESPACE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENGINE, 0);
    }
    public engineName(): EngineNameContext | null {
        return this.getRuleContext(0, EngineNameContext);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropTablespace;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTablespace) {
            return visitor.visitDropTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTriggerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public TRIGGER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TRIGGER, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropTrigger;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTrigger) {
            return visitor.visitDropTrigger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropViewContext extends antlr.ParserRuleContext {
    public _dropType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VIEW, 0)!;
    }
    public fullId(): FullIdContext[];
    public fullId(i: number): FullIdContext | null;
    public fullId(i?: number): FullIdContext[] | FullIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FullIdContext);
        }

        return this.getRuleContext(i, FullIdContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RESTRICT, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropView;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ROLE, 0)!;
    }
    public roleName(): RoleNameContext[];
    public roleName(i: number): RoleNameContext | null;
    public roleName(i?: number): RoleNameContext[] | RoleNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleNameContext);
        }

        return this.getRuleContext(i, RoleNameContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropRole;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropRole) {
            return visitor.visitDropRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SET, 0)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ROLE, 0)!;
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TO, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NONE, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public roleName(): RoleNameContext[];
    public roleName(i: number): RoleNameContext | null;
    public roleName(i?: number): RoleNameContext[] | RoleNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleNameContext);
        }

        return this.getRuleContext(i, RoleNameContext);
    }
    public userName(): UserNameContext[];
    public userName(i: number): UserNameContext | null;
    public userName(i?: number): UserNameContext[] | UserNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserNameContext);
        }

        return this.getRuleContext(i, UserNameContext);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public roleOption(): RoleOptionContext | null {
        return this.getRuleContext(0, RoleOptionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_setRole;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetRole) {
            return visitor.visitSetRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RENAME, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public renameTableClause(): RenameTableClauseContext[];
    public renameTableClause(i: number): RenameTableClauseContext | null;
    public renameTableClause(i?: number): RenameTableClauseContext[] | RenameTableClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RenameTableClauseContext);
        }

        return this.getRuleContext(i, RenameTableClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_renameTable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenameTable) {
            return visitor.visitRenameTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameTableClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext[];
    public tableName(i: number): TableNameContext | null;
    public tableName(i?: number): TableNameContext[] | TableNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableNameContext);
        }

        return this.getRuleContext(i, TableNameContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TO, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_renameTableClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenameTableClause) {
            return visitor.visitRenameTableClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUNCATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TRUNCATE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_truncateTable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CALL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CALL, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public constants(): ConstantsContext | null {
        return this.getRuleContext(0, ConstantsContext);
    }
    public expressions(): ExpressionsContext | null {
        return this.getRuleContext(0, ExpressionsContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_callStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCallStatement) {
            return visitor.visitCallStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleDeleteStatement(): SingleDeleteStatementContext | null {
        return this.getRuleContext(0, SingleDeleteStatementContext);
    }
    public multipleDeleteStatement(): MultipleDeleteStatementContext | null {
        return this.getRuleContext(0, MultipleDeleteStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_deleteStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteStatement) {
            return visitor.visitDeleteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DoStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DO, 0)!;
    }
    public expressions(): ExpressionsContext {
        return this.getRuleContext(0, ExpressionsContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_doStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDoStatement) {
            return visitor.visitDoStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public handlerOpenStatement(): HandlerOpenStatementContext | null {
        return this.getRuleContext(0, HandlerOpenStatementContext);
    }
    public handlerReadIndexStatement(): HandlerReadIndexStatementContext | null {
        return this.getRuleContext(0, HandlerReadIndexStatementContext);
    }
    public handlerReadStatement(): HandlerReadStatementContext | null {
        return this.getRuleContext(0, HandlerReadStatementContext);
    }
    public handlerCloseStatement(): HandlerCloseStatementContext | null {
        return this.getRuleContext(0, HandlerCloseStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_handlerStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHandlerStatement) {
            return visitor.visitHandlerStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStatementContext extends antlr.ParserRuleContext {
    public _priority?: Token | null;
    public _partitions?: UidListContext;
    public _columns?: FullColumnNameListContext;
    public _setFirst?: UpdatedElementContext;
    public _updatedElement?: UpdatedElementContext;
    public _setElements: UpdatedElementContext[] = [];
    public _duplicatedFirst?: UpdatedElementContext;
    public _duplicatedElements: UpdatedElementContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INSERT, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public insertStatementValue(): InsertStatementValueContext | null {
        return this.getRuleContext(0, InsertStatementValueContext);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IGNORE, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INTO, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTITION, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public updatedElement(): UpdatedElementContext[];
    public updatedElement(i: number): UpdatedElementContext | null;
    public updatedElement(i?: number): UpdatedElementContext[] | UpdatedElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdatedElementContext);
        }

        return this.getRuleContext(i, UpdatedElementContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ON, 0);
    }
    public DUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DUPLICATE, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPDATE, 0);
    }
    public LOW_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOW_PRIORITY, 0);
    }
    public DELAYED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DELAYED, 0);
    }
    public HIGH_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HIGH_PRIORITY, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public fullColumnNameList(): FullColumnNameListContext | null {
        return this.getRuleContext(0, FullColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_insertStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadDataStatementContext extends antlr.ParserRuleContext {
    public _priority?: Token | null;
    public _filename?: Token | null;
    public _violation?: Token | null;
    public _charset?: CharsetNameContext;
    public _fieldsFormat?: Token | null;
    public _linesFormat?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOAD, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DATA, 0)!;
    }
    public INFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INFILE, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INTO, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTITION, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARACTER, 0);
    }
    public SET(): antlr.TerminalNode[];
    public SET(i: number): antlr.TerminalNode | null;
    public SET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.SET);
    	} else {
    		return this.getToken(MySqlParser.SET, i);
    	}
    }
    public LINES(): antlr.TerminalNode[];
    public LINES(i: number): antlr.TerminalNode | null;
    public LINES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LINES);
    	} else {
    		return this.getToken(MySqlParser.LINES, i);
    	}
    }
    public IGNORE(): antlr.TerminalNode[];
    public IGNORE(i: number): antlr.TerminalNode | null;
    public IGNORE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.IGNORE);
    	} else {
    		return this.getToken(MySqlParser.IGNORE, i);
    	}
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public assignmentField(): AssignmentFieldContext[];
    public assignmentField(i: number): AssignmentFieldContext | null;
    public assignmentField(i?: number): AssignmentFieldContext[] | AssignmentFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignmentFieldContext);
        }

        return this.getRuleContext(i, AssignmentFieldContext);
    }
    public updatedElement(): UpdatedElementContext[];
    public updatedElement(i: number): UpdatedElementContext | null;
    public updatedElement(i?: number): UpdatedElementContext[] | UpdatedElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdatedElementContext);
        }

        return this.getRuleContext(i, UpdatedElementContext);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public LOW_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOW_PRIORITY, 0);
    }
    public CONCURRENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONCURRENT, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLACE, 0);
    }
    public FIELDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIELDS, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMNS, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROWS, 0);
    }
    public selectFieldsInto(): SelectFieldsIntoContext[];
    public selectFieldsInto(i: number): SelectFieldsIntoContext | null;
    public selectFieldsInto(i?: number): SelectFieldsIntoContext[] | SelectFieldsIntoContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectFieldsIntoContext);
        }

        return this.getRuleContext(i, SelectFieldsIntoContext);
    }
    public selectLinesInto(): SelectLinesIntoContext[];
    public selectLinesInto(i: number): SelectLinesIntoContext | null;
    public selectLinesInto(i?: number): SelectLinesIntoContext[] | SelectLinesIntoContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectLinesIntoContext);
        }

        return this.getRuleContext(i, SelectLinesIntoContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_loadDataStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadDataStatement) {
            return visitor.visitLoadDataStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadXmlStatementContext extends antlr.ParserRuleContext {
    public _priority?: Token | null;
    public _filename?: Token | null;
    public _violation?: Token | null;
    public _charset?: CharsetNameContext;
    public _tag?: Token | null;
    public _linesFormat?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOAD, 0)!;
    }
    public XML(): antlr.TerminalNode {
        return this.getToken(MySqlParser.XML, 0)!;
    }
    public INFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INFILE, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INTO, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.STRING_LITERAL);
    	} else {
    		return this.getToken(MySqlParser.STRING_LITERAL, i);
    	}
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL, 0);
    }
    public CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARACTER, 0);
    }
    public SET(): antlr.TerminalNode[];
    public SET(i: number): antlr.TerminalNode | null;
    public SET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.SET);
    	} else {
    		return this.getToken(MySqlParser.SET, i);
    	}
    }
    public ROWS(): antlr.TerminalNode[];
    public ROWS(i: number): antlr.TerminalNode | null;
    public ROWS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ROWS);
    	} else {
    		return this.getToken(MySqlParser.ROWS, i);
    	}
    }
    public IDENTIFIED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IDENTIFIED, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BY, 0);
    }
    public LESS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LESS_SYMBOL, 0);
    }
    public GREATER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
    }
    public IGNORE(): antlr.TerminalNode[];
    public IGNORE(i: number): antlr.TerminalNode | null;
    public IGNORE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.IGNORE);
    	} else {
    		return this.getToken(MySqlParser.IGNORE, i);
    	}
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public assignmentField(): AssignmentFieldContext[];
    public assignmentField(i: number): AssignmentFieldContext | null;
    public assignmentField(i?: number): AssignmentFieldContext[] | AssignmentFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignmentFieldContext);
        }

        return this.getRuleContext(i, AssignmentFieldContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public updatedElement(): UpdatedElementContext[];
    public updatedElement(i: number): UpdatedElementContext | null;
    public updatedElement(i?: number): UpdatedElementContext[] | UpdatedElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdatedElementContext);
        }

        return this.getRuleContext(i, UpdatedElementContext);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public LOW_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOW_PRIORITY, 0);
    }
    public CONCURRENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONCURRENT, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLACE, 0);
    }
    public LINES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINES, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_loadXmlStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadXmlStatement) {
            return visitor.visitLoadXmlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceStatementContext extends antlr.ParserRuleContext {
    public _priority?: Token | null;
    public _partitions?: UidListContext;
    public _columns?: UidListContext;
    public _setFirst?: UpdatedElementContext;
    public _updatedElement?: UpdatedElementContext;
    public _setElements: UpdatedElementContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPLACE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public insertStatementValue(): InsertStatementValueContext | null {
        return this.getRuleContext(0, InsertStatementValueContext);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INTO, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTITION, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public updatedElement(): UpdatedElementContext[];
    public updatedElement(i: number): UpdatedElementContext | null;
    public updatedElement(i?: number): UpdatedElementContext[] | UpdatedElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdatedElementContext);
        }

        return this.getRuleContext(i, UpdatedElementContext);
    }
    public uidList(): UidListContext[];
    public uidList(i: number): UidListContext | null;
    public uidList(i?: number): UidListContext[] | UidListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidListContext);
        }

        return this.getRuleContext(i, UidListContext);
    }
    public LOW_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOW_PRIORITY, 0);
    }
    public DELAYED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DELAYED, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_replaceStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceStatement) {
            return visitor.visitReplaceStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_selectStatement;
    }
    public override copyFrom(ctx: SelectStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class UnionSelectContext extends SelectStatementContext {
    public _unionType?: Token | null;
    public constructor(ctx: SelectStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public querySpecificationNointo(): QuerySpecificationNointoContext | null {
        return this.getRuleContext(0, QuerySpecificationNointoContext);
    }
    public queryExpressionNointo(): QueryExpressionNointoContext | null {
        return this.getRuleContext(0, QueryExpressionNointoContext);
    }
    public unionStatement(): UnionStatementContext[];
    public unionStatement(i: number): UnionStatementContext | null;
    public unionStatement(i?: number): UnionStatementContext[] | UnionStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnionStatementContext);
        }

        return this.getRuleContext(i, UnionStatementContext);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNION, 0);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public lockClause(): LockClauseContext | null {
        return this.getRuleContext(0, LockClauseContext);
    }
    public querySpecification(): QuerySpecificationContext | null {
        return this.getRuleContext(0, QuerySpecificationContext);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(0, QueryExpressionContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISTINCT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnionSelect) {
            return visitor.visitUnionSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnionParenthesisSelectContext extends SelectStatementContext {
    public _unionType?: Token | null;
    public constructor(ctx: SelectStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryExpressionNointo(): QueryExpressionNointoContext {
        return this.getRuleContext(0, QueryExpressionNointoContext)!;
    }
    public unionParenthesis(): UnionParenthesisContext[];
    public unionParenthesis(i: number): UnionParenthesisContext | null;
    public unionParenthesis(i?: number): UnionParenthesisContext[] | UnionParenthesisContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnionParenthesisContext);
        }

        return this.getRuleContext(i, UnionParenthesisContext);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNION, 0);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(0, QueryExpressionContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public lockClause(): LockClauseContext | null {
        return this.getRuleContext(0, LockClauseContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISTINCT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnionParenthesisSelect) {
            return visitor.visitUnionParenthesisSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleSelectContext extends SelectStatementContext {
    public constructor(ctx: SelectStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public querySpecification(): QuerySpecificationContext {
        return this.getRuleContext(0, QuerySpecificationContext)!;
    }
    public lockClause(): LockClauseContext | null {
        return this.getRuleContext(0, LockClauseContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleSelect) {
            return visitor.visitSimpleSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesisSelectContext extends SelectStatementContext {
    public constructor(ctx: SelectStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryExpression(): QueryExpressionContext {
        return this.getRuleContext(0, QueryExpressionContext)!;
    }
    public lockClause(): LockClauseContext | null {
        return this.getRuleContext(0, LockClauseContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitParenthesisSelect) {
            return visitor.visitParenthesisSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class WithLateralStatementContext extends SelectStatementContext {
    public constructor(ctx: SelectStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public querySpecificationNointo(): QuerySpecificationNointoContext {
        return this.getRuleContext(0, QuerySpecificationNointoContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public lateralStatement(): LateralStatementContext[];
    public lateralStatement(i: number): LateralStatementContext | null;
    public lateralStatement(i?: number): LateralStatementContext[] | LateralStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralStatementContext);
        }

        return this.getRuleContext(i, LateralStatementContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitWithLateralStatement) {
            return visitor.visitWithLateralStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleUpdateStatement(): SingleUpdateStatementContext | null {
        return this.getRuleContext(0, SingleUpdateStatementContext);
    }
    public multipleUpdateStatement(): MultipleUpdateStatementContext | null {
        return this.getRuleContext(0, MultipleUpdateStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_updateStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateStatement) {
            return visitor.visitUpdateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VALUES, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public expressionsWithDefaults(): ExpressionsWithDefaultsContext[];
    public expressionsWithDefaults(i: number): ExpressionsWithDefaultsContext | null;
    public expressionsWithDefaults(i?: number): ExpressionsWithDefaultsContext[] | ExpressionsWithDefaultsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionsWithDefaultsContext);
        }

        return this.getRuleContext(i, ExpressionsWithDefaultsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_valuesStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitValuesStatement) {
            return visitor.visitValuesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStatementValueContext extends antlr.ParserRuleContext {
    public _insertFormat?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VALUES, 0);
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VALUE, 0);
    }
    public expressionsWithDefaults(): ExpressionsWithDefaultsContext[];
    public expressionsWithDefaults(i: number): ExpressionsWithDefaultsContext | null;
    public expressionsWithDefaults(i?: number): ExpressionsWithDefaultsContext[] | ExpressionsWithDefaultsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionsWithDefaultsContext);
        }

        return this.getRuleContext(i, ExpressionsWithDefaultsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_insertStatementValue;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStatementValue) {
            return visitor.visitInsertStatementValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdatedElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fullColumnName(): FullColumnNameContext {
        return this.getRuleContext(0, FullColumnNameContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_updatedElement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUpdatedElement) {
            return visitor.visitUpdatedElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public LOCAL_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL_ID, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_assignmentField;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentField) {
            return visitor.visitAssignmentField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOR, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPDATE, 0);
    }
    public LOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCK, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IN, 0);
    }
    public SHARE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHARE, 0);
    }
    public MODE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MODE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_lockClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockClause) {
            return visitor.visitLockClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleDeleteStatementContext extends antlr.ParserRuleContext {
    public _priority?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FROM, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public QUICK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUICK, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IGNORE, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTITION, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LIMIT, 0);
    }
    public limitClauseAtom(): LimitClauseAtomContext | null {
        return this.getRuleContext(0, LimitClauseAtomContext);
    }
    public LOW_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOW_PRIORITY, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_singleDeleteStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSingleDeleteStatement) {
            return visitor.visitSingleDeleteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipleDeleteStatementContext extends antlr.ParserRuleContext {
    public _priority?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DELETE, 0)!;
    }
    public tableName(): TableNameContext[];
    public tableName(i: number): TableNameContext | null;
    public tableName(i?: number): TableNameContext[] | TableNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableNameContext);
        }

        return this.getRuleContext(i, TableNameContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FROM, 0);
    }
    public tableSources(): TableSourcesContext | null {
        return this.getRuleContext(0, TableSourcesContext);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USING, 0);
    }
    public QUICK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUICK, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IGNORE, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public LOW_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOW_PRIORITY, 0);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.DOT);
    	} else {
    		return this.getToken(MySqlParser.DOT, i);
    	}
    }
    public STAR(): antlr.TerminalNode[];
    public STAR(i: number): antlr.TerminalNode | null;
    public STAR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.STAR);
    	} else {
    		return this.getToken(MySqlParser.STAR, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_multipleDeleteStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipleDeleteStatement) {
            return visitor.visitMultipleDeleteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerOpenStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HANDLER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.HANDLER, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public OPEN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.OPEN, 0)!;
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_handlerOpenStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHandlerOpenStatement) {
            return visitor.visitHandlerOpenStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerReadIndexStatementContext extends antlr.ParserRuleContext {
    public _index?: UidContext;
    public _moveOrder?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HANDLER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.HANDLER, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(MySqlParser.READ, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public comparisonOperator(): ComparisonOperatorContext | null {
        return this.getRuleContext(0, ComparisonOperatorContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public constants(): ConstantsContext | null {
        return this.getRuleContext(0, ConstantsContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LIMIT, 0);
    }
    public limitClauseAtom(): LimitClauseAtomContext | null {
        return this.getRuleContext(0, LimitClauseAtomContext);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIRST, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NEXT, 0);
    }
    public PREV(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PREV, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LAST, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_handlerReadIndexStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHandlerReadIndexStatement) {
            return visitor.visitHandlerReadIndexStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerReadStatementContext extends antlr.ParserRuleContext {
    public _moveOrder?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HANDLER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.HANDLER, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(MySqlParser.READ, 0)!;
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIRST, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NEXT, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LIMIT, 0);
    }
    public limitClauseAtom(): LimitClauseAtomContext | null {
        return this.getRuleContext(0, LimitClauseAtomContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_handlerReadStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHandlerReadStatement) {
            return visitor.visitHandlerReadStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerCloseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HANDLER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.HANDLER, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public CLOSE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CLOSE, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_handlerCloseStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHandlerCloseStatement) {
            return visitor.visitHandlerCloseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleUpdateStatementContext extends antlr.ParserRuleContext {
    public _priority?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UPDATE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SET, 0)!;
    }
    public updatedElement(): UpdatedElementContext[];
    public updatedElement(i: number): UpdatedElementContext | null;
    public updatedElement(i?: number): UpdatedElementContext[] | UpdatedElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdatedElementContext);
        }

        return this.getRuleContext(i, UpdatedElementContext);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IGNORE, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public LOW_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOW_PRIORITY, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_singleUpdateStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSingleUpdateStatement) {
            return visitor.visitSingleUpdateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipleUpdateStatementContext extends antlr.ParserRuleContext {
    public _priority?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UPDATE, 0)!;
    }
    public tableNames(): TableNamesContext {
        return this.getRuleContext(0, TableNamesContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SET, 0)!;
    }
    public updatedElement(): UpdatedElementContext[];
    public updatedElement(i: number): UpdatedElementContext | null;
    public updatedElement(i?: number): UpdatedElementContext[] | UpdatedElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdatedElementContext);
        }

        return this.getRuleContext(i, UpdatedElementContext);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IGNORE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public LOW_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOW_PRIORITY, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_multipleUpdateStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipleUpdateStatement) {
            return visitor.visitMultipleUpdateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BY, 0)!;
    }
    public orderByExpression(): OrderByExpressionContext[];
    public orderByExpression(i: number): OrderByExpressionContext | null;
    public orderByExpression(i?: number): OrderByExpressionContext[] | OrderByExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderByExpressionContext);
        }

        return this.getRuleContext(i, OrderByExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_orderByClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderByClause) {
            return visitor.visitOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByExpressionContext extends antlr.ParserRuleContext {
    public _order?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DESC, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_orderByExpression;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderByExpression) {
            return visitor.visitOrderByExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSourcesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableSource(): TableSourceContext[];
    public tableSource(i: number): TableSourceContext | null;
    public tableSource(i?: number): TableSourceContext[] | TableSourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableSourceContext);
        }

        return this.getRuleContext(i, TableSourceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tableSources;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSources) {
            return visitor.visitTableSources(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tableSource;
    }
    public override copyFrom(ctx: TableSourceContext): void {
        super.copyFrom(ctx);
    }
}
export class TableJsonContext extends TableSourceContext {
    public constructor(ctx: TableSourceContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public jsonTable(): JsonTableContext {
        return this.getRuleContext(0, JsonTableContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableJson) {
            return visitor.visitTableJson(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableSourceNestedContext extends TableSourceContext {
    public constructor(ctx: TableSourceContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public tableSourceItem(): TableSourceItemContext {
        return this.getRuleContext(0, TableSourceItemContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public joinPart(): JoinPartContext[];
    public joinPart(i: number): JoinPartContext | null;
    public joinPart(i?: number): JoinPartContext[] | JoinPartContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinPartContext);
        }

        return this.getRuleContext(i, JoinPartContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSourceNested) {
            return visitor.visitTableSourceNested(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableSourceBaseContext extends TableSourceContext {
    public constructor(ctx: TableSourceContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableSourceItem(): TableSourceItemContext {
        return this.getRuleContext(0, TableSourceItemContext)!;
    }
    public joinPart(): JoinPartContext[];
    public joinPart(i: number): JoinPartContext | null;
    public joinPart(i?: number): JoinPartContext[] | JoinPartContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinPartContext);
        }

        return this.getRuleContext(i, JoinPartContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSourceBase) {
            return visitor.visitTableSourceBase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSourceItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tableSourceItem;
    }
    public override copyFrom(ctx: TableSourceItemContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryTableItemContext extends TableSourceItemContext {
    public _parenthesisSubquery?: SelectStatementContext;
    public _alias?: UidContext;
    public constructor(ctx: TableSourceItemContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryTableItem) {
            return visitor.visitSubqueryTableItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AtomTableItemContext extends TableSourceItemContext {
    public _alias?: UidContext;
    public constructor(ctx: TableSourceItemContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTITION, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public indexHint(): IndexHintContext[];
    public indexHint(i: number): IndexHintContext | null;
    public indexHint(i?: number): IndexHintContext[] | IndexHintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexHintContext);
        }

        return this.getRuleContext(i, IndexHintContext);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtomTableItem) {
            return visitor.visitAtomTableItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableSourcesItemContext extends TableSourceItemContext {
    public constructor(ctx: TableSourceItemContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public tableSources(): TableSourcesContext {
        return this.getRuleContext(0, TableSourcesContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSourcesItem) {
            return visitor.visitTableSourcesItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexHintContext extends antlr.ParserRuleContext {
    public _indexHintAction?: Token | null;
    public _keyFormat?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public uidList(): UidListContext {
        return this.getRuleContext(0, UidListContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USE, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IGNORE, 0);
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FORCE, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOR, 0);
    }
    public indexHintType(): IndexHintTypeContext | null {
        return this.getRuleContext(0, IndexHintTypeContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_indexHint;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexHint) {
            return visitor.visitIndexHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexHintTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JOIN, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BY, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GROUP, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_indexHintType;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexHintType) {
            return visitor.visitIndexHintType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_joinPart;
    }
    public override copyFrom(ctx: JoinPartContext): void {
        super.copyFrom(ctx);
    }
}
export class InnerJoinContext extends JoinPartContext {
    public constructor(ctx: JoinPartContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.JOIN, 0)!;
    }
    public tableSourceItem(): TableSourceItemContext {
        return this.getRuleContext(0, TableSourceItemContext)!;
    }
    public LATERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LATERAL, 0);
    }
    public joinSpec(): JoinSpecContext[];
    public joinSpec(i: number): JoinSpecContext | null;
    public joinSpec(i?: number): JoinSpecContext[] | JoinSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinSpecContext);
        }

        return this.getRuleContext(i, JoinSpecContext);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INNER, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CROSS, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitInnerJoin) {
            return visitor.visitInnerJoin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NaturalJoinContext extends JoinPartContext {
    public constructor(ctx: JoinPartContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NATURAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.NATURAL, 0)!;
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.JOIN, 0)!;
    }
    public tableSourceItem(): TableSourceItemContext {
        return this.getRuleContext(0, TableSourceItemContext)!;
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RIGHT, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OUTER, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitNaturalJoin) {
            return visitor.visitNaturalJoin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OuterJoinContext extends JoinPartContext {
    public constructor(ctx: JoinPartContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.JOIN, 0)!;
    }
    public tableSourceItem(): TableSourceItemContext {
        return this.getRuleContext(0, TableSourceItemContext)!;
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RIGHT, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OUTER, 0);
    }
    public LATERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LATERAL, 0);
    }
    public joinSpec(): JoinSpecContext[];
    public joinSpec(i: number): JoinSpecContext | null;
    public joinSpec(i?: number): JoinSpecContext[] | JoinSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinSpecContext);
        }

        return this.getRuleContext(i, JoinSpecContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitOuterJoin) {
            return visitor.visitOuterJoin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StraightJoinContext extends JoinPartContext {
    public constructor(ctx: JoinPartContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STRAIGHT_JOIN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRAIGHT_JOIN, 0)!;
    }
    public tableSourceItem(): TableSourceItemContext {
        return this.getRuleContext(0, TableSourceItemContext)!;
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ON);
    	} else {
    		return this.getToken(MySqlParser.ON, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitStraightJoin) {
            return visitor.visitStraightJoin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ON, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USING, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_joinSpec;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinSpec) {
            return visitor.visitJoinSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public querySpecification(): QuerySpecificationContext | null {
        return this.getRuleContext(0, QuerySpecificationContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(0, QueryExpressionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_queryExpression;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryExpression) {
            return visitor.visitQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionNointoContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public querySpecificationNointo(): QuerySpecificationNointoContext | null {
        return this.getRuleContext(0, QuerySpecificationNointoContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public queryExpressionNointo(): QueryExpressionNointoContext | null {
        return this.getRuleContext(0, QueryExpressionNointoContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_queryExpressionNointo;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryExpressionNointo) {
            return visitor.visitQueryExpressionNointo(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SELECT, 0)!;
    }
    public selectElements(): SelectElementsContext {
        return this.getRuleContext(0, SelectElementsContext)!;
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public selectSpec(): SelectSpecContext[];
    public selectSpec(i: number): SelectSpecContext | null;
    public selectSpec(i?: number): SelectSpecContext[] | SelectSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectSpecContext);
        }

        return this.getRuleContext(i, SelectSpecContext);
    }
    public selectIntoExpression(): SelectIntoExpressionContext | null {
        return this.getRuleContext(0, SelectIntoExpressionContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_querySpecification;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationNointoContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SELECT, 0)!;
    }
    public selectElements(): SelectElementsContext {
        return this.getRuleContext(0, SelectElementsContext)!;
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public selectSpec(): SelectSpecContext[];
    public selectSpec(i: number): SelectSpecContext | null;
    public selectSpec(i?: number): SelectSpecContext[] | SelectSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectSpecContext);
        }

        return this.getRuleContext(i, SelectSpecContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public unionStatement(): UnionStatementContext | null {
        return this.getRuleContext(0, UnionStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_querySpecificationNointo;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuerySpecificationNointo) {
            return visitor.visitQuerySpecificationNointo(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnionParenthesisContext extends antlr.ParserRuleContext {
    public _unionType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UNION, 0)!;
    }
    public queryExpressionNointo(): QueryExpressionNointoContext {
        return this.getRuleContext(0, QueryExpressionNointoContext)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_unionParenthesis;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnionParenthesis) {
            return visitor.visitUnionParenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnionStatementContext extends antlr.ParserRuleContext {
    public _unionType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UNION, 0)!;
    }
    public querySpecificationNointo(): QuerySpecificationNointoContext | null {
        return this.getRuleContext(0, QuerySpecificationNointoContext);
    }
    public queryExpressionNointo(): QueryExpressionNointoContext | null {
        return this.getRuleContext(0, QueryExpressionNointoContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_unionStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnionStatement) {
            return visitor.visitUnionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LateralStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LATERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LATERAL, 0)!;
    }
    public querySpecificationNointo(): QuerySpecificationNointoContext | null {
        return this.getRuleContext(0, QuerySpecificationNointoContext);
    }
    public queryExpressionNointo(): QueryExpressionNointoContext | null {
        return this.getRuleContext(0, QueryExpressionNointoContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_lateralStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLateralStatement) {
            return visitor.visitLateralStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.JSON_TABLE, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.STRING_LITERAL);
    	} else {
    		return this.getToken(MySqlParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMA, 0)!;
    }
    public COLUMNS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COLUMNS, 0)!;
    }
    public jsonColumnList(): JsonColumnListContext {
        return this.getRuleContext(0, JsonColumnListContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_jsonTable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitJsonTable) {
            return visitor.visitJsonTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonColumnListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonColumn(): JsonColumnContext[];
    public jsonColumn(i: number): JsonColumnContext | null;
    public jsonColumn(i?: number): JsonColumnContext[] | JsonColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonColumnContext);
        }

        return this.getRuleContext(i, JsonColumnContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_jsonColumnList;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitJsonColumnList) {
            return visitor.visitJsonColumnList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fullColumnName(): FullColumnNameContext | null {
        return this.getRuleContext(0, FullColumnNameContext);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOR, 0);
    }
    public ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ORDINALITY, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PATH, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXISTS, 0);
    }
    public jsonOnEmpty(): JsonOnEmptyContext | null {
        return this.getRuleContext(0, JsonOnEmptyContext);
    }
    public jsonOnError(): JsonOnErrorContext | null {
        return this.getRuleContext(0, JsonOnErrorContext);
    }
    public NESTED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NESTED, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMNS, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public jsonColumnList(): JsonColumnListContext | null {
        return this.getRuleContext(0, JsonColumnListContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_jsonColumn;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitJsonColumn) {
            return visitor.visitJsonColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonOnEmptyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ON, 0)!;
    }
    public EMPTY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EMPTY, 0)!;
    }
    public NULL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NULL_LITERAL, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ERROR, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public defaultValue(): DefaultValueContext | null {
        return this.getRuleContext(0, DefaultValueContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_jsonOnEmpty;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitJsonOnEmpty) {
            return visitor.visitJsonOnEmpty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonOnErrorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ON, 0)!;
    }
    public ERROR(): antlr.TerminalNode[];
    public ERROR(i: number): antlr.TerminalNode | null;
    public ERROR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ERROR);
    	} else {
    		return this.getToken(MySqlParser.ERROR, i);
    	}
    }
    public NULL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NULL_LITERAL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public defaultValue(): DefaultValueContext | null {
        return this.getRuleContext(0, DefaultValueContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_jsonOnError;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitJsonOnError) {
            return visitor.visitJsonOnError(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISTINCT, 0);
    }
    public DISTINCTROW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISTINCTROW, 0);
    }
    public HIGH_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HIGH_PRIORITY, 0);
    }
    public STRAIGHT_JOIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRAIGHT_JOIN, 0);
    }
    public SQL_SMALL_RESULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_SMALL_RESULT, 0);
    }
    public SQL_BIG_RESULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_BIG_RESULT, 0);
    }
    public SQL_BUFFER_RESULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_BUFFER_RESULT, 0);
    }
    public SQL_CACHE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_CACHE, 0);
    }
    public SQL_NO_CACHE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_NO_CACHE, 0);
    }
    public SQL_CALC_FOUND_ROWS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_selectSpec;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectSpec) {
            return visitor.visitSelectSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectElementsContext extends antlr.ParserRuleContext {
    public _star?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectElement(): SelectElementContext[];
    public selectElement(i: number): SelectElementContext | null;
    public selectElement(i?: number): SelectElementContext[] | SelectElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectElementContext);
        }

        return this.getRuleContext(i, SelectElementContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STAR, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_selectElements;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectElements) {
            return visitor.visitSelectElements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_selectElement;
    }
    public override copyFrom(ctx: SelectElementContext): void {
        super.copyFrom(ctx);
    }
}
export class SelectExpressionElementContext extends SelectElementContext {
    public constructor(ctx: SelectElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public LOCAL_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL_ID, 0);
    }
    public VAR_ASSIGN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VAR_ASSIGN, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectExpressionElement) {
            return visitor.visitSelectExpressionElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectFunctionElementContext extends SelectElementContext {
    public constructor(ctx: SelectElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionCall(): FunctionCallContext {
        return this.getRuleContext(0, FunctionCallContext)!;
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectFunctionElement) {
            return visitor.visitSelectFunctionElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectStarElementContext extends SelectElementContext {
    public constructor(ctx: SelectElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DOT, 0)!;
    }
    public STAR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STAR, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStarElement) {
            return visitor.visitSelectStarElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectColumnElementContext extends SelectElementContext {
    public constructor(ctx: SelectElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fullColumnName(): FullColumnNameContext {
        return this.getRuleContext(0, FullColumnNameContext)!;
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectColumnElement) {
            return visitor.visitSelectColumnElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectIntoExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_selectIntoExpression;
    }
    public override copyFrom(ctx: SelectIntoExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class SelectIntoVariablesContext extends SelectIntoExpressionContext {
    public constructor(ctx: SelectIntoExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INTO, 0)!;
    }
    public assignmentField(): AssignmentFieldContext[];
    public assignmentField(i: number): AssignmentFieldContext | null;
    public assignmentField(i?: number): AssignmentFieldContext[] | AssignmentFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignmentFieldContext);
        }

        return this.getRuleContext(i, AssignmentFieldContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectIntoVariables) {
            return visitor.visitSelectIntoVariables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectIntoTextFileContext extends SelectIntoExpressionContext {
    public _filename?: Token | null;
    public _charset?: CharsetNameContext;
    public _fieldsFormat?: Token | null;
    public constructor(ctx: SelectIntoExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INTO, 0);
    }
    public OUTFILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OUTFILE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARACTER, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public LINES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINES, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public FIELDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIELDS, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMNS, 0);
    }
    public selectFieldsInto(): SelectFieldsIntoContext[];
    public selectFieldsInto(i: number): SelectFieldsIntoContext | null;
    public selectFieldsInto(i?: number): SelectFieldsIntoContext[] | SelectFieldsIntoContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectFieldsIntoContext);
        }

        return this.getRuleContext(i, SelectFieldsIntoContext);
    }
    public selectLinesInto(): SelectLinesIntoContext[];
    public selectLinesInto(i: number): SelectLinesIntoContext | null;
    public selectLinesInto(i?: number): SelectLinesIntoContext[] | SelectLinesIntoContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectLinesIntoContext);
        }

        return this.getRuleContext(i, SelectLinesIntoContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectIntoTextFile) {
            return visitor.visitSelectIntoTextFile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
    public constructor(ctx: SelectIntoExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INTO, 0)!;
    }
    public DUMPFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DUMPFILE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectIntoDumpFile) {
            return visitor.visitSelectIntoDumpFile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectFieldsIntoContext extends antlr.ParserRuleContext {
    public _terminationField?: Token | null;
    public _enclosion?: Token | null;
    public _escaping?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TERMINATED, 0);
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BY, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public ENCLOSED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENCLOSED, 0);
    }
    public OPTIONALLY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OPTIONALLY, 0);
    }
    public ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ESCAPED, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_selectFieldsInto;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectFieldsInto) {
            return visitor.visitSelectFieldsInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectLinesIntoContext extends antlr.ParserRuleContext {
    public _starting?: Token | null;
    public _terminationLine?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STARTING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STARTING, 0);
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BY, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TERMINATED, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_selectLinesInto;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectLinesInto) {
            return visitor.visitSelectLinesInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public _whereExpr?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FROM, 0);
    }
    public tableSources(): TableSourcesContext | null {
        return this.getRuleContext(0, TableSourcesContext);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_fromClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.GROUP, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BY, 0)!;
    }
    public groupByItem(): GroupByItemContext[];
    public groupByItem(i: number): GroupByItemContext | null;
    public groupByItem(i?: number): GroupByItemContext[] | GroupByItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupByItemContext);
        }

        return this.getRuleContext(i, GroupByItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROLLUP, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_groupByClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public _havingExpr?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HAVING(): antlr.TerminalNode {
        return this.getToken(MySqlParser.HAVING, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_havingClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.WINDOW, 0)!;
    }
    public windowName(): WindowNameContext[];
    public windowName(i: number): WindowNameContext | null;
    public windowName(i?: number): WindowNameContext[] | WindowNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowNameContext);
        }

        return this.getRuleContext(i, WindowNameContext);
    }
    public AS(): antlr.TerminalNode[];
    public AS(i: number): antlr.TerminalNode | null;
    public AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.AS);
    	} else {
    		return this.getToken(MySqlParser.AS, i);
    	}
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public windowSpec(): WindowSpecContext[];
    public windowSpec(i: number): WindowSpecContext | null;
    public windowSpec(i?: number): WindowSpecContext[] | WindowSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowSpecContext);
        }

        return this.getRuleContext(i, WindowSpecContext);
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_windowClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByItemContext extends antlr.ParserRuleContext {
    public _order?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DESC, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_groupByItem;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByItem) {
            return visitor.visitGroupByItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public _offset?: LimitClauseAtomContext;
    public _limit?: LimitClauseAtomContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LIMIT, 0)!;
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OFFSET, 0);
    }
    public limitClauseAtom(): LimitClauseAtomContext[];
    public limitClauseAtom(i: number): LimitClauseAtomContext | null;
    public limitClauseAtom(i?: number): LimitClauseAtomContext[] | LimitClauseAtomContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LimitClauseAtomContext);
        }

        return this.getRuleContext(i, LimitClauseAtomContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_limitClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseAtomContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public mysqlVariable(): MysqlVariableContext | null {
        return this.getRuleContext(0, MysqlVariableContext);
    }
    public simpleId(): SimpleIdContext | null {
        return this.getRuleContext(0, SimpleIdContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_limitClauseAtom;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClauseAtom) {
            return visitor.visitLimitClauseAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartTransactionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public START(): antlr.TerminalNode {
        return this.getToken(MySqlParser.START, 0)!;
    }
    public TRANSACTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TRANSACTION, 0)!;
    }
    public transactionMode(): TransactionModeContext[];
    public transactionMode(i: number): TransactionModeContext | null;
    public transactionMode(i?: number): TransactionModeContext[] | TransactionModeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionModeContext);
        }

        return this.getRuleContext(i, TransactionModeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_startTransaction;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitStartTransaction) {
            return visitor.visitStartTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BeginWorkContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEGIN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BEGIN, 0)!;
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WORK, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_beginWork;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitBeginWork) {
            return visitor.visitBeginWork(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommitWorkContext extends antlr.ParserRuleContext {
    public _nochain?: Token | null;
    public _norelease?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMIT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMIT, 0)!;
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WORK, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AND, 0);
    }
    public CHAIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHAIN, 0);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELEASE, 0);
    }
    public NO(): antlr.TerminalNode[];
    public NO(i: number): antlr.TerminalNode | null;
    public NO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.NO);
    	} else {
    		return this.getToken(MySqlParser.NO, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_commitWork;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommitWork) {
            return visitor.visitCommitWork(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollbackWorkContext extends antlr.ParserRuleContext {
    public _nochain?: Token | null;
    public _norelease?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLLBACK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ROLLBACK, 0)!;
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WORK, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AND, 0);
    }
    public CHAIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHAIN, 0);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELEASE, 0);
    }
    public NO(): antlr.TerminalNode[];
    public NO(i: number): antlr.TerminalNode | null;
    public NO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.NO);
    	} else {
    		return this.getToken(MySqlParser.NO, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_rollbackWork;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRollbackWork) {
            return visitor.visitRollbackWork(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SavepointStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAVEPOINT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SAVEPOINT, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_savepointStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSavepointStatement) {
            return visitor.visitSavepointStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollbackStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLLBACK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ROLLBACK, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TO, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WORK, 0);
    }
    public SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SAVEPOINT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_rollbackStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRollbackStatement) {
            return visitor.visitRollbackStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReleaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RELEASE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RELEASE, 0)!;
    }
    public SAVEPOINT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SAVEPOINT, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_releaseStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitReleaseStatement) {
            return visitor.visitReleaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockTablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOCK, 0)!;
    }
    public lockTableElement(): LockTableElementContext[];
    public lockTableElement(i: number): LockTableElementContext | null;
    public lockTableElement(i?: number): LockTableElementContext[] | LockTableElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LockTableElementContext);
        }

        return this.getRuleContext(i, LockTableElementContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLES, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public waitNowaitClause(): WaitNowaitClauseContext | null {
        return this.getRuleContext(0, WaitNowaitClauseContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_lockTables;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockTables) {
            return visitor.visitLockTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlockTablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNLOCK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UNLOCK, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLES, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_unlockTables;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnlockTables) {
            return visitor.visitUnlockTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetAutocommitStatementContext extends antlr.ParserRuleContext {
    public _autocommitValue?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SET, 0)!;
    }
    public AUTOCOMMIT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.AUTOCOMMIT, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public ZERO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_setAutocommitStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetAutocommitStatement) {
            return visitor.visitSetAutocommitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetTransactionStatementContext extends antlr.ParserRuleContext {
    public _transactionContext?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SET, 0)!;
    }
    public TRANSACTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TRANSACTION, 0)!;
    }
    public transactionOption(): TransactionOptionContext[];
    public transactionOption(i: number): TransactionOptionContext | null;
    public transactionOption(i?: number): TransactionOptionContext[] | TransactionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionOptionContext);
        }

        return this.getRuleContext(i, TransactionOptionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GLOBAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SESSION, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_setTransactionStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTransactionStatement) {
            return visitor.visitSetTransactionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public CONSISTENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSISTENT, 0);
    }
    public SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SNAPSHOT, 0);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.READ, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WRITE, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONLY, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_transactionMode;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionMode) {
            return visitor.visitTransactionMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockTableElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public lockAction(): LockActionContext {
        return this.getRuleContext(0, LockActionContext)!;
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_lockTableElement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockTableElement) {
            return visitor.visitLockTableElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.READ, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WRITE, 0);
    }
    public LOW_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOW_PRIORITY, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_lockAction;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockAction) {
            return visitor.visitLockAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ISOLATION, 0);
    }
    public LEVEL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LEVEL, 0);
    }
    public transactionLevel(): TransactionLevelContext | null {
        return this.getRuleContext(0, TransactionLevelContext);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.READ, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WRITE, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONLY, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_transactionOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionOption) {
            return visitor.visitTransactionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionLevelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPEATABLE, 0);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.READ, 0);
    }
    public COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMITTED, 0);
    }
    public UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNCOMMITTED, 0);
    }
    public SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SERIALIZABLE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_transactionLevel;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionLevel) {
            return visitor.visitTransactionLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeMasterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHANGE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHANGE, 0)!;
    }
    public MASTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MASTER, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TO, 0)!;
    }
    public masterOption(): MasterOptionContext[];
    public masterOption(i: number): MasterOptionContext | null;
    public masterOption(i?: number): MasterOptionContext[] | MasterOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MasterOptionContext);
        }

        return this.getRuleContext(i, MasterOptionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public channelOption(): ChannelOptionContext | null {
        return this.getRuleContext(0, ChannelOptionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_changeMaster;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitChangeMaster) {
            return visitor.visitChangeMaster(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationFilterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHANGE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHANGE, 0)!;
    }
    public REPLICATION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPLICATION, 0)!;
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FILTER, 0)!;
    }
    public replicationFilter(): ReplicationFilterContext[];
    public replicationFilter(i: number): ReplicationFilterContext | null;
    public replicationFilter(i?: number): ReplicationFilterContext[] | ReplicationFilterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ReplicationFilterContext);
        }

        return this.getRuleContext(i, ReplicationFilterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_changeReplicationFilter;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitChangeReplicationFilter) {
            return visitor.visitChangeReplicationFilter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PurgeBinaryLogsContext extends antlr.ParserRuleContext {
    public _purgeFormat?: Token | null;
    public _fileName?: Token | null;
    public _timeValue?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PURGE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PURGE, 0)!;
    }
    public LOGS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOGS, 0)!;
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public MASTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TO, 0);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BEFORE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_purgeBinaryLogs;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPurgeBinaryLogs) {
            return visitor.visitPurgeBinaryLogs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResetMasterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RESET, 0)!;
    }
    public MASTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MASTER, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_resetMaster;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitResetMaster) {
            return visitor.visitResetMaster(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResetSlaveContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RESET, 0)!;
    }
    public SLAVE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SLAVE, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public channelOption(): ChannelOptionContext | null {
        return this.getRuleContext(0, ChannelOptionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_resetSlave;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitResetSlave) {
            return visitor.visitResetSlave(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartSlaveContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public START(): antlr.TerminalNode {
        return this.getToken(MySqlParser.START, 0)!;
    }
    public SLAVE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SLAVE, 0)!;
    }
    public threadType(): ThreadTypeContext[];
    public threadType(i: number): ThreadTypeContext | null;
    public threadType(i?: number): ThreadTypeContext[] | ThreadTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ThreadTypeContext);
        }

        return this.getRuleContext(i, ThreadTypeContext);
    }
    public UNTIL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNTIL, 0);
    }
    public untilOption(): UntilOptionContext | null {
        return this.getRuleContext(0, UntilOptionContext);
    }
    public connectionOption(): ConnectionOptionContext[];
    public connectionOption(i: number): ConnectionOptionContext | null;
    public connectionOption(i?: number): ConnectionOptionContext[] | ConnectionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConnectionOptionContext);
        }

        return this.getRuleContext(i, ConnectionOptionContext);
    }
    public channelOption(): ChannelOptionContext | null {
        return this.getRuleContext(0, ChannelOptionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_startSlave;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitStartSlave) {
            return visitor.visitStartSlave(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StopSlaveContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STOP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STOP, 0)!;
    }
    public SLAVE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SLAVE, 0)!;
    }
    public threadType(): ThreadTypeContext[];
    public threadType(i: number): ThreadTypeContext | null;
    public threadType(i?: number): ThreadTypeContext[] | ThreadTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ThreadTypeContext);
        }

        return this.getRuleContext(i, ThreadTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_stopSlave;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitStopSlave) {
            return visitor.visitStopSlave(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartGroupReplicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public START(): antlr.TerminalNode {
        return this.getToken(MySqlParser.START, 0)!;
    }
    public GROUP_REPLICATION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.GROUP_REPLICATION, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_startGroupReplication;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitStartGroupReplication) {
            return visitor.visitStartGroupReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StopGroupReplicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STOP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STOP, 0)!;
    }
    public GROUP_REPLICATION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.GROUP_REPLICATION, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_stopGroupReplication;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitStopGroupReplication) {
            return visitor.visitStopGroupReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MasterOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_masterOption;
    }
    public override copyFrom(ctx: MasterOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class MasterStringOptionContext extends MasterOptionContext {
    public constructor(ctx: MasterOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public stringMasterOption(): StringMasterOptionContext {
        return this.getRuleContext(0, StringMasterOptionContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMasterStringOption) {
            return visitor.visitMasterStringOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MasterRealOptionContext extends MasterOptionContext {
    public constructor(ctx: MasterOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MASTER_HEARTBEAT_PERIOD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public REAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REAL_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMasterRealOption) {
            return visitor.visitMasterRealOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MasterBoolOptionContext extends MasterOptionContext {
    public _boolVal?: Token | null;
    public constructor(ctx: MasterOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolMasterOption(): BoolMasterOptionContext {
        return this.getRuleContext(0, BoolMasterOptionContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public ZERO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMasterBoolOption) {
            return visitor.visitMasterBoolOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MasterUidListOptionContext extends MasterOptionContext {
    public constructor(ctx: MasterOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IGNORE_SERVER_IDS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMasterUidListOption) {
            return visitor.visitMasterUidListOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MasterDecimalOptionContext extends MasterOptionContext {
    public constructor(ctx: MasterOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public decimalMasterOption(): DecimalMasterOptionContext {
        return this.getRuleContext(0, DecimalMasterOptionContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMasterDecimalOption) {
            return visitor.visitMasterDecimalOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringMasterOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_BIND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_BIND, 0);
    }
    public MASTER_HOST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_HOST, 0);
    }
    public MASTER_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_USER, 0);
    }
    public MASTER_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_PASSWORD, 0);
    }
    public MASTER_LOG_FILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
    }
    public RELAY_LOG_FILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
    }
    public MASTER_SSL_CA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CA, 0);
    }
    public MASTER_SSL_CAPATH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CAPATH, 0);
    }
    public MASTER_SSL_CERT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CERT, 0);
    }
    public MASTER_SSL_CRL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CRL, 0);
    }
    public MASTER_SSL_CRLPATH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0);
    }
    public MASTER_SSL_KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_KEY, 0);
    }
    public MASTER_SSL_CIPHER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CIPHER, 0);
    }
    public MASTER_TLS_VERSION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_TLS_VERSION, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_stringMasterOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitStringMasterOption) {
            return visitor.visitStringMasterOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecimalMasterOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_PORT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_PORT, 0);
    }
    public MASTER_CONNECT_RETRY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0);
    }
    public MASTER_RETRY_COUNT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_RETRY_COUNT, 0);
    }
    public MASTER_DELAY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_DELAY, 0);
    }
    public MASTER_LOG_POS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
    }
    public RELAY_LOG_POS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_decimalMasterOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecimalMasterOption) {
            return visitor.visitDecimalMasterOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BoolMasterOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_AUTO_POSITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_AUTO_POSITION, 0);
    }
    public MASTER_SSL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL, 0);
    }
    public MASTER_SSL_VERIFY_SERVER_CERT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_boolMasterOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitBoolMasterOption) {
            return visitor.visitBoolMasterOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChannelOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FOR, 0)!;
    }
    public CHANNEL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHANNEL, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_channelOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitChannelOption) {
            return visitor.visitChannelOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicationFilterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_replicationFilter;
    }
    public override copyFrom(ctx: ReplicationFilterContext): void {
        super.copyFrom(ctx);
    }
}
export class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
    public constructor(ctx: ReplicationFilterContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLICATE_WILD_IGNORE_TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public simpleStrings(): SimpleStringsContext {
        return this.getRuleContext(0, SimpleStringsContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitWildIgnoreTableReplication) {
            return visitor.visitWildIgnoreTableReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoTableReplicationContext extends ReplicationFilterContext {
    public constructor(ctx: ReplicationFilterContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLICATE_DO_TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public tables(): TablesContext {
        return this.getRuleContext(0, TablesContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDoTableReplication) {
            return visitor.visitDoTableReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IgnoreTableReplicationContext extends ReplicationFilterContext {
    public constructor(ctx: ReplicationFilterContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLICATE_IGNORE_TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public tables(): TablesContext {
        return this.getRuleContext(0, TablesContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIgnoreTableReplication) {
            return visitor.visitIgnoreTableReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RewriteDbReplicationContext extends ReplicationFilterContext {
    public constructor(ctx: ReplicationFilterContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLICATE_REWRITE_DB(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public tablePair(): TablePairContext[];
    public tablePair(i: number): TablePairContext | null;
    public tablePair(i?: number): TablePairContext[] | TablePairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePairContext);
        }

        return this.getRuleContext(i, TablePairContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRewriteDbReplication) {
            return visitor.visitRewriteDbReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoDbReplicationContext extends ReplicationFilterContext {
    public constructor(ctx: ReplicationFilterContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLICATE_DO_DB(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPLICATE_DO_DB, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public uidList(): UidListContext {
        return this.getRuleContext(0, UidListContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDoDbReplication) {
            return visitor.visitDoDbReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IgnoreDbReplicationContext extends ReplicationFilterContext {
    public constructor(ctx: ReplicationFilterContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLICATE_IGNORE_DB(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public uidList(): UidListContext {
        return this.getRuleContext(0, UidListContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIgnoreDbReplication) {
            return visitor.visitIgnoreDbReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class WildDoTableReplicationContext extends ReplicationFilterContext {
    public constructor(ctx: ReplicationFilterContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLICATE_WILD_DO_TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public simpleStrings(): SimpleStringsContext {
        return this.getRuleContext(0, SimpleStringsContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitWildDoTableReplication) {
            return visitor.visitWildDoTableReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePairContext extends antlr.ParserRuleContext {
    public _firstTable?: TableNameContext;
    public _secondTable?: TableNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMA, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public tableName(): TableNameContext[];
    public tableName(i: number): TableNameContext | null;
    public tableName(i?: number): TableNameContext[] | TableNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableNameContext);
        }

        return this.getRuleContext(i, TableNameContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tablePair;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablePair) {
            return visitor.visitTablePair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ThreadTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IO_THREAD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IO_THREAD, 0);
    }
    public SQL_THREAD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_THREAD, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_threadType;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitThreadType) {
            return visitor.visitThreadType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UntilOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_untilOption;
    }
    public override copyFrom(ctx: UntilOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class GtidsUntilOptionContext extends UntilOptionContext {
    public _gtids?: Token | null;
    public constructor(ctx: UntilOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public gtuidSet(): GtuidSetContext {
        return this.getRuleContext(0, GtuidSetContext)!;
    }
    public SQL_BEFORE_GTIDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0);
    }
    public SQL_AFTER_GTIDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_AFTER_GTIDS, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitGtidsUntilOption) {
            return visitor.visitGtidsUntilOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SqlGapsUntilOptionContext extends UntilOptionContext {
    public constructor(ctx: UntilOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SQL_AFTER_MTS_GAPS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSqlGapsUntilOption) {
            return visitor.visitSqlGapsUntilOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MasterLogUntilOptionContext extends UntilOptionContext {
    public constructor(ctx: UntilOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MASTER_LOG_FILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MASTER_LOG_FILE, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMA, 0)!;
    }
    public MASTER_LOG_POS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MASTER_LOG_POS, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMasterLogUntilOption) {
            return visitor.visitMasterLogUntilOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RelayLogUntilOptionContext extends UntilOptionContext {
    public constructor(ctx: UntilOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RELAY_LOG_FILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RELAY_LOG_FILE, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMA, 0)!;
    }
    public RELAY_LOG_POS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RELAY_LOG_POS, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelayLogUntilOption) {
            return visitor.visitRelayLogUntilOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConnectionOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_connectionOption;
    }
    public override copyFrom(ctx: ConnectionOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class PluginDirConnectionOptionContext extends ConnectionOptionContext {
    public _conOptPluginDir?: Token | null;
    public constructor(ctx: ConnectionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PLUGIN_DIR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PLUGIN_DIR, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPluginDirConnectionOption) {
            return visitor.visitPluginDirConnectionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UserConnectionOptionContext extends ConnectionOptionContext {
    public _conOptUser?: Token | null;
    public constructor(ctx: ConnectionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USER, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUserConnectionOption) {
            return visitor.visitUserConnectionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
    public _conOptDefAuth?: Token | null;
    public constructor(ctx: ConnectionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEFAULT_AUTH(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DEFAULT_AUTH, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaultAuthConnectionOption) {
            return visitor.visitDefaultAuthConnectionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PasswordConnectionOptionContext extends ConnectionOptionContext {
    public _conOptPassword?: Token | null;
    public constructor(ctx: ConnectionOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PASSWORD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PASSWORD, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPasswordConnectionOption) {
            return visitor.visitPasswordConnectionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GtuidSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uuidSet(): UuidSetContext[];
    public uuidSet(i: number): UuidSetContext | null;
    public uuidSet(i?: number): UuidSetContext[] | UuidSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UuidSetContext);
        }

        return this.getRuleContext(i, UuidSetContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_gtuidSet;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitGtuidSet) {
            return visitor.visitGtuidSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XaStartTransactionContext extends antlr.ParserRuleContext {
    public _xaStart?: Token | null;
    public _xaAction?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public XA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.XA, 0)!;
    }
    public xid(): XidContext {
        return this.getRuleContext(0, XidContext)!;
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.START, 0);
    }
    public BEGIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BEGIN, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JOIN, 0);
    }
    public RESUME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RESUME, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_xaStartTransaction;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitXaStartTransaction) {
            return visitor.visitXaStartTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XaEndTransactionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public XA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.XA, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(MySqlParser.END, 0)!;
    }
    public xid(): XidContext {
        return this.getRuleContext(0, XidContext)!;
    }
    public SUSPEND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUSPEND, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOR, 0);
    }
    public MIGRATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MIGRATE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_xaEndTransaction;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitXaEndTransaction) {
            return visitor.visitXaEndTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XaPrepareStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public XA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.XA, 0)!;
    }
    public PREPARE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PREPARE, 0)!;
    }
    public xid(): XidContext {
        return this.getRuleContext(0, XidContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_xaPrepareStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitXaPrepareStatement) {
            return visitor.visitXaPrepareStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XaCommitWorkContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public XA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.XA, 0)!;
    }
    public COMMIT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMIT, 0)!;
    }
    public xid(): XidContext {
        return this.getRuleContext(0, XidContext)!;
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE, 0);
    }
    public PHASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PHASE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_xaCommitWork;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitXaCommitWork) {
            return visitor.visitXaCommitWork(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XaRollbackWorkContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public XA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.XA, 0)!;
    }
    public ROLLBACK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ROLLBACK, 0)!;
    }
    public xid(): XidContext {
        return this.getRuleContext(0, XidContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_xaRollbackWork;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitXaRollbackWork) {
            return visitor.visitXaRollbackWork(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XaRecoverWorkContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public XA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.XA, 0)!;
    }
    public RECOVER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RECOVER, 0)!;
    }
    public CONVERT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONVERT, 0);
    }
    public xid(): XidContext | null {
        return this.getRuleContext(0, XidContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_xaRecoverWork;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitXaRecoverWork) {
            return visitor.visitXaRecoverWork(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrepareStatementContext extends antlr.ParserRuleContext {
    public _query?: Token | null;
    public _variable?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PREPARE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PREPARE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FROM, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public LOCAL_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL_ID, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_prepareStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrepareStatement) {
            return visitor.visitPrepareStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecuteStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXECUTE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EXECUTE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USING, 0);
    }
    public userVariables(): UserVariablesContext | null {
        return this.getRuleContext(0, UserVariablesContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_executeStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitExecuteStatement) {
            return visitor.visitExecuteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeallocatePrepareContext extends antlr.ParserRuleContext {
    public _dropFormat?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PREPARE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PREPARE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public DEALLOCATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEALLOCATE, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DROP, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_deallocatePrepare;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeallocatePrepare) {
            return visitor.visitDeallocatePrepare(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public blockStatement(): BlockStatementContext | null {
        return this.getRuleContext(0, BlockStatementContext);
    }
    public sqlStatement(): SqlStatementContext | null {
        return this.getRuleContext(0, SqlStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_routineBody;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineBody) {
            return visitor.visitRoutineBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BlockStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEGIN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BEGIN, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(MySqlParser.END, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public COLON_SYMB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLON_SYMB, 0);
    }
    public declareVariable(): DeclareVariableContext[];
    public declareVariable(i: number): DeclareVariableContext | null;
    public declareVariable(i?: number): DeclareVariableContext[] | DeclareVariableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DeclareVariableContext);
        }

        return this.getRuleContext(i, DeclareVariableContext);
    }
    public SEMI(): antlr.TerminalNode[];
    public SEMI(i: number): antlr.TerminalNode | null;
    public SEMI(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.SEMI);
    	} else {
    		return this.getToken(MySqlParser.SEMI, i);
    	}
    }
    public declareCondition(): DeclareConditionContext[];
    public declareCondition(i: number): DeclareConditionContext | null;
    public declareCondition(i?: number): DeclareConditionContext[] | DeclareConditionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DeclareConditionContext);
        }

        return this.getRuleContext(i, DeclareConditionContext);
    }
    public declareCursor(): DeclareCursorContext[];
    public declareCursor(i: number): DeclareCursorContext | null;
    public declareCursor(i?: number): DeclareCursorContext[] | DeclareCursorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DeclareCursorContext);
        }

        return this.getRuleContext(i, DeclareCursorContext);
    }
    public declareHandler(): DeclareHandlerContext[];
    public declareHandler(i: number): DeclareHandlerContext | null;
    public declareHandler(i?: number): DeclareHandlerContext[] | DeclareHandlerContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DeclareHandlerContext);
        }

        return this.getRuleContext(i, DeclareHandlerContext);
    }
    public procedureSqlStatement(): ProcedureSqlStatementContext[];
    public procedureSqlStatement(i: number): ProcedureSqlStatementContext | null;
    public procedureSqlStatement(i?: number): ProcedureSqlStatementContext[] | ProcedureSqlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureSqlStatementContext);
        }

        return this.getRuleContext(i, ProcedureSqlStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_blockStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitBlockStatement) {
            return visitor.visitBlockStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASE(): antlr.TerminalNode[];
    public CASE(i: number): antlr.TerminalNode | null;
    public CASE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.CASE);
    	} else {
    		return this.getToken(MySqlParser.CASE, i);
    	}
    }
    public END(): antlr.TerminalNode {
        return this.getToken(MySqlParser.END, 0)!;
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public caseAlternative(): CaseAlternativeContext[];
    public caseAlternative(i: number): CaseAlternativeContext | null;
    public caseAlternative(i?: number): CaseAlternativeContext[] | CaseAlternativeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CaseAlternativeContext);
        }

        return this.getRuleContext(i, CaseAlternativeContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ELSE, 0);
    }
    public procedureSqlStatement(): ProcedureSqlStatementContext[];
    public procedureSqlStatement(i: number): ProcedureSqlStatementContext | null;
    public procedureSqlStatement(i?: number): ProcedureSqlStatementContext[] | ProcedureSqlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureSqlStatementContext);
        }

        return this.getRuleContext(i, ProcedureSqlStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_caseStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCaseStatement) {
            return visitor.visitCaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfStatementContext extends antlr.ParserRuleContext {
    public _procedureSqlStatement?: ProcedureSqlStatementContext;
    public _thenStatements: ProcedureSqlStatementContext[] = [];
    public _elseStatements: ProcedureSqlStatementContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF(): antlr.TerminalNode[];
    public IF(i: number): antlr.TerminalNode | null;
    public IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.IF);
    	} else {
    		return this.getToken(MySqlParser.IF, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.THEN, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(MySqlParser.END, 0)!;
    }
    public elifAlternative(): ElifAlternativeContext[];
    public elifAlternative(i: number): ElifAlternativeContext | null;
    public elifAlternative(i?: number): ElifAlternativeContext[] | ElifAlternativeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ElifAlternativeContext);
        }

        return this.getRuleContext(i, ElifAlternativeContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ELSE, 0);
    }
    public procedureSqlStatement(): ProcedureSqlStatementContext[];
    public procedureSqlStatement(i: number): ProcedureSqlStatementContext | null;
    public procedureSqlStatement(i?: number): ProcedureSqlStatementContext[] | ProcedureSqlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureSqlStatementContext);
        }

        return this.getRuleContext(i, ProcedureSqlStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_ifStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfStatement) {
            return visitor.visitIfStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IterateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ITERATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ITERATE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_iterateStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIterateStatement) {
            return visitor.visitIterateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LeaveStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEAVE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LEAVE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_leaveStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLeaveStatement) {
            return visitor.visitLeaveStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoopStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOOP(): antlr.TerminalNode[];
    public LOOP(i: number): antlr.TerminalNode | null;
    public LOOP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LOOP);
    	} else {
    		return this.getToken(MySqlParser.LOOP, i);
    	}
    }
    public END(): antlr.TerminalNode {
        return this.getToken(MySqlParser.END, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public COLON_SYMB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLON_SYMB, 0);
    }
    public procedureSqlStatement(): ProcedureSqlStatementContext[];
    public procedureSqlStatement(i: number): ProcedureSqlStatementContext | null;
    public procedureSqlStatement(i?: number): ProcedureSqlStatementContext[] | ProcedureSqlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureSqlStatementContext);
        }

        return this.getRuleContext(i, ProcedureSqlStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_loopStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoopStatement) {
            return visitor.visitLoopStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RepeatStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPEAT(): antlr.TerminalNode[];
    public REPEAT(i: number): antlr.TerminalNode | null;
    public REPEAT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.REPEAT);
    	} else {
    		return this.getToken(MySqlParser.REPEAT, i);
    	}
    }
    public UNTIL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UNTIL, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(MySqlParser.END, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public COLON_SYMB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLON_SYMB, 0);
    }
    public procedureSqlStatement(): ProcedureSqlStatementContext[];
    public procedureSqlStatement(i: number): ProcedureSqlStatementContext | null;
    public procedureSqlStatement(i?: number): ProcedureSqlStatementContext[] | ProcedureSqlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureSqlStatementContext);
        }

        return this.getRuleContext(i, ProcedureSqlStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_repeatStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRepeatStatement) {
            return visitor.visitRepeatStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RETURN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_returnStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitReturnStatement) {
            return visitor.visitReturnStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhileStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHILE(): antlr.TerminalNode[];
    public WHILE(i: number): antlr.TerminalNode | null;
    public WHILE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.WHILE);
    	} else {
    		return this.getToken(MySqlParser.WHILE, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DO, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(MySqlParser.END, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public COLON_SYMB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLON_SYMB, 0);
    }
    public procedureSqlStatement(): ProcedureSqlStatementContext[];
    public procedureSqlStatement(i: number): ProcedureSqlStatementContext | null;
    public procedureSqlStatement(i?: number): ProcedureSqlStatementContext[] | ProcedureSqlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureSqlStatementContext);
        }

        return this.getRuleContext(i, ProcedureSqlStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_whileStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhileStatement) {
            return visitor.visitWhileStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CursorStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_cursorStatement;
    }
    public override copyFrom(ctx: CursorStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class CloseCursorContext extends CursorStatementContext {
    public constructor(ctx: CursorStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLOSE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CLOSE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCloseCursor) {
            return visitor.visitCloseCursor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OpenCursorContext extends CursorStatementContext {
    public constructor(ctx: CursorStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OPEN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.OPEN, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpenCursor) {
            return visitor.visitOpenCursor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FetchCursorContext extends CursorStatementContext {
    public constructor(ctx: CursorStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FETCH(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FETCH, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INTO, 0)!;
    }
    public uidList(): UidListContext {
        return this.getRuleContext(0, UidListContext)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FROM, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NEXT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFetchCursor) {
            return visitor.visitFetchCursor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeclareVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DECLARE, 0)!;
    }
    public uidList(): UidListContext {
        return this.getRuleContext(0, UidListContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_declareVariable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclareVariable) {
            return visitor.visitDeclareVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeclareConditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DECLARE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public CONDITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CONDITION, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FOR, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQLSTATE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VALUE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_declareCondition;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclareCondition) {
            return visitor.visitDeclareCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeclareCursorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DECLARE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public CURSOR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CURSOR, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FOR, 0)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_declareCursor;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclareCursor) {
            return visitor.visitDeclareCursor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeclareHandlerContext extends antlr.ParserRuleContext {
    public _handlerAction?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DECLARE, 0)!;
    }
    public HANDLER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.HANDLER, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FOR, 0)!;
    }
    public handlerConditionValue(): HandlerConditionValueContext[];
    public handlerConditionValue(i: number): HandlerConditionValueContext | null;
    public handlerConditionValue(i?: number): HandlerConditionValueContext[] | HandlerConditionValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HandlerConditionValueContext);
        }

        return this.getRuleContext(i, HandlerConditionValueContext);
    }
    public routineBody(): RoutineBodyContext {
        return this.getRuleContext(0, RoutineBodyContext)!;
    }
    public CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONTINUE, 0);
    }
    public EXIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXIT, 0);
    }
    public UNDO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNDO, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_declareHandler;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclareHandler) {
            return visitor.visitDeclareHandler(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerConditionValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_handlerConditionValue;
    }
    public override copyFrom(ctx: HandlerConditionValueContext): void {
        super.copyFrom(ctx);
    }
}
export class HandlerConditionWarningContext extends HandlerConditionValueContext {
    public constructor(ctx: HandlerConditionValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SQLWARNING(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SQLWARNING, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHandlerConditionWarning) {
            return visitor.visitHandlerConditionWarning(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class HandlerConditionCodeContext extends HandlerConditionValueContext {
    public constructor(ctx: HandlerConditionValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHandlerConditionCode) {
            return visitor.visitHandlerConditionCode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
    public constructor(ctx: HandlerConditionValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.NOT, 0)!;
    }
    public FOUND(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FOUND, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHandlerConditionNotfound) {
            return visitor.visitHandlerConditionNotfound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class HandlerConditionStateContext extends HandlerConditionValueContext {
    public constructor(ctx: HandlerConditionValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SQLSTATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SQLSTATE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VALUE, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHandlerConditionState) {
            return visitor.visitHandlerConditionState(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class HandlerConditionExceptionContext extends HandlerConditionValueContext {
    public constructor(ctx: HandlerConditionValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SQLEXCEPTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SQLEXCEPTION, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHandlerConditionException) {
            return visitor.visitHandlerConditionException(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class HandlerConditionNameContext extends HandlerConditionValueContext {
    public constructor(ctx: HandlerConditionValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHandlerConditionName) {
            return visitor.visitHandlerConditionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureSqlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SEMI, 0)!;
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(0, CompoundStatementContext);
    }
    public sqlStatement(): SqlStatementContext | null {
        return this.getRuleContext(0, SqlStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_procedureSqlStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedureSqlStatement) {
            return visitor.visitProcedureSqlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseAlternativeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.WHEN, 0)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.THEN, 0)!;
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public procedureSqlStatement(): ProcedureSqlStatementContext[];
    public procedureSqlStatement(i: number): ProcedureSqlStatementContext | null;
    public procedureSqlStatement(i?: number): ProcedureSqlStatementContext[] | ProcedureSqlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureSqlStatementContext);
        }

        return this.getRuleContext(i, ProcedureSqlStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_caseAlternative;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCaseAlternative) {
            return visitor.visitCaseAlternative(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElifAlternativeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSEIF(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ELSEIF, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.THEN, 0)!;
    }
    public procedureSqlStatement(): ProcedureSqlStatementContext[];
    public procedureSqlStatement(i: number): ProcedureSqlStatementContext | null;
    public procedureSqlStatement(i?: number): ProcedureSqlStatementContext[] | ProcedureSqlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureSqlStatementContext);
        }

        return this.getRuleContext(i, ProcedureSqlStatementContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_elifAlternative;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitElifAlternative) {
            return visitor.visitElifAlternative(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_alterUser;
    }
    public override copyFrom(ctx: AlterUserContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterUserMysqlV80Context extends AlterUserContext {
    public _tlsNone?: Token | null;
    public constructor(ctx: AlterUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USER, 0)!;
    }
    public userAuthOption(): UserAuthOptionContext[];
    public userAuthOption(i: number): UserAuthOptionContext | null;
    public userAuthOption(i?: number): UserAuthOptionContext[] | UserAuthOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserAuthOptionContext);
        }

        return this.getRuleContext(i, UserAuthOptionContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public REQUIRE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REQUIRE, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public userPasswordOption(): UserPasswordOptionContext[];
    public userPasswordOption(i: number): UserPasswordOptionContext | null;
    public userPasswordOption(i?: number): UserPasswordOptionContext[] | UserPasswordOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserPasswordOptionContext);
        }

        return this.getRuleContext(i, UserPasswordOptionContext);
    }
    public userLockOption(): UserLockOptionContext[];
    public userLockOption(i: number): UserLockOptionContext | null;
    public userLockOption(i?: number): UserLockOptionContext[] | UserLockOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserLockOptionContext);
        }

        return this.getRuleContext(i, UserLockOptionContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ATTRIBUTE, 0);
    }
    public tlsOption(): TlsOptionContext[];
    public tlsOption(i: number): TlsOptionContext | null;
    public tlsOption(i?: number): TlsOptionContext[] | TlsOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TlsOptionContext);
        }

        return this.getRuleContext(i, TlsOptionContext);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NONE, 0);
    }
    public userResourceOption(): UserResourceOptionContext[];
    public userResourceOption(i: number): UserResourceOptionContext | null;
    public userResourceOption(i?: number): UserResourceOptionContext[] | UserResourceOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserResourceOptionContext);
        }

        return this.getRuleContext(i, UserResourceOptionContext);
    }
    public AND(): antlr.TerminalNode[];
    public AND(i: number): antlr.TerminalNode | null;
    public AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.AND);
    	} else {
    		return this.getToken(MySqlParser.AND, i);
    	}
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROLE, 0);
    }
    public roleOption(): RoleOptionContext | null {
        return this.getRuleContext(0, RoleOptionContext);
    }
    public userName(): UserNameContext | null {
        return this.getRuleContext(0, UserNameContext);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterUserMysqlV80) {
            return visitor.visitAlterUserMysqlV80(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterUserMysqlV56Context extends AlterUserContext {
    public constructor(ctx: AlterUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALTER, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USER, 0)!;
    }
    public userSpecification(): UserSpecificationContext[];
    public userSpecification(i: number): UserSpecificationContext | null;
    public userSpecification(i?: number): UserSpecificationContext[] | UserSpecificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserSpecificationContext);
        }

        return this.getRuleContext(i, UserSpecificationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterUserMysqlV56) {
            return visitor.visitAlterUserMysqlV56(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createUser;
    }
    public override copyFrom(ctx: CreateUserContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateUserMysqlV56Context extends CreateUserContext {
    public constructor(ctx: CreateUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USER, 0)!;
    }
    public userAuthOption(): UserAuthOptionContext[];
    public userAuthOption(i: number): UserAuthOptionContext | null;
    public userAuthOption(i?: number): UserAuthOptionContext[] | UserAuthOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserAuthOptionContext);
        }

        return this.getRuleContext(i, UserAuthOptionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUserMysqlV56) {
            return visitor.visitCreateUserMysqlV56(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateUserMysqlV80Context extends CreateUserContext {
    public _tlsNone?: Token | null;
    public constructor(ctx: CreateUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USER, 0)!;
    }
    public userAuthOption(): UserAuthOptionContext[];
    public userAuthOption(i: number): UserAuthOptionContext | null;
    public userAuthOption(i?: number): UserAuthOptionContext[] | UserAuthOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserAuthOptionContext);
        }

        return this.getRuleContext(i, UserAuthOptionContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROLE, 0);
    }
    public roleOption(): RoleOptionContext | null {
        return this.getRuleContext(0, RoleOptionContext);
    }
    public REQUIRE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REQUIRE, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public userPasswordOption(): UserPasswordOptionContext[];
    public userPasswordOption(i: number): UserPasswordOptionContext | null;
    public userPasswordOption(i?: number): UserPasswordOptionContext[] | UserPasswordOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserPasswordOptionContext);
        }

        return this.getRuleContext(i, UserPasswordOptionContext);
    }
    public userLockOption(): UserLockOptionContext[];
    public userLockOption(i: number): UserLockOptionContext | null;
    public userLockOption(i?: number): UserLockOptionContext[] | UserLockOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserLockOptionContext);
        }

        return this.getRuleContext(i, UserLockOptionContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ATTRIBUTE, 0);
    }
    public tlsOption(): TlsOptionContext[];
    public tlsOption(i: number): TlsOptionContext | null;
    public tlsOption(i?: number): TlsOptionContext[] | TlsOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TlsOptionContext);
        }

        return this.getRuleContext(i, TlsOptionContext);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NONE, 0);
    }
    public userResourceOption(): UserResourceOptionContext[];
    public userResourceOption(i: number): UserResourceOptionContext | null;
    public userResourceOption(i?: number): UserResourceOptionContext[] | UserResourceOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserResourceOptionContext);
        }

        return this.getRuleContext(i, UserResourceOptionContext);
    }
    public AND(): antlr.TerminalNode[];
    public AND(i: number): antlr.TerminalNode | null;
    public AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.AND);
    	} else {
    		return this.getToken(MySqlParser.AND, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUserMysqlV80) {
            return visitor.visitCreateUserMysqlV80(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DROP, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USER, 0)!;
    }
    public userName(): UserNameContext[];
    public userName(i: number): UserNameContext | null;
    public userName(i?: number): UserNameContext[] | UserNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserNameContext);
        }

        return this.getRuleContext(i, UserNameContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dropUser;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropUser) {
            return visitor.visitDropUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantStatementContext extends antlr.ParserRuleContext {
    public _privilegeObject?: Token | null;
    public _tlsNone?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode[];
    public GRANT(i: number): antlr.TerminalNode | null;
    public GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.GRANT);
    	} else {
    		return this.getToken(MySqlParser.GRANT, i);
    	}
    }
    public privelegeClause(): PrivelegeClauseContext[];
    public privelegeClause(i: number): PrivelegeClauseContext | null;
    public privelegeClause(i?: number): PrivelegeClauseContext[] | PrivelegeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivelegeClauseContext);
        }

        return this.getRuleContext(i, PrivelegeClauseContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ON, 0);
    }
    public privilegeLevel(): PrivilegeLevelContext | null {
        return this.getRuleContext(0, PrivilegeLevelContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TO, 0)!;
    }
    public userAuthOption(): UserAuthOptionContext[];
    public userAuthOption(i: number): UserAuthOptionContext | null;
    public userAuthOption(i?: number): UserAuthOptionContext[] | UserAuthOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserAuthOptionContext);
        }

        return this.getRuleContext(i, UserAuthOptionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public REQUIRE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REQUIRE, 0);
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.WITH);
    	} else {
    		return this.getToken(MySqlParser.WITH, i);
    	}
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public userName(): UserNameContext[];
    public userName(i: number): UserNameContext | null;
    public userName(i?: number): UserNameContext[] | UserNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserNameContext);
        }

        return this.getRuleContext(i, UserNameContext);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROLE, 0);
    }
    public roleOption(): RoleOptionContext | null {
        return this.getRuleContext(0, RoleOptionContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FUNCTION, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROCEDURE, 0);
    }
    public tlsOption(): TlsOptionContext[];
    public tlsOption(i: number): TlsOptionContext | null;
    public tlsOption(i?: number): TlsOptionContext[] | TlsOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TlsOptionContext);
        }

        return this.getRuleContext(i, TlsOptionContext);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NONE, 0);
    }
    public OPTION(): antlr.TerminalNode[];
    public OPTION(i: number): antlr.TerminalNode | null;
    public OPTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.OPTION);
    	} else {
    		return this.getToken(MySqlParser.OPTION, i);
    	}
    }
    public userResourceOption(): UserResourceOptionContext[];
    public userResourceOption(i: number): UserResourceOptionContext | null;
    public userResourceOption(i?: number): UserResourceOptionContext[] | UserResourceOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserResourceOptionContext);
        }

        return this.getRuleContext(i, UserResourceOptionContext);
    }
    public AND(): antlr.TerminalNode[];
    public AND(i: number): antlr.TerminalNode | null;
    public AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.AND);
    	} else {
    		return this.getToken(MySqlParser.AND, i);
    	}
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ADMIN, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_grantStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantStatement) {
            return visitor.visitGrantStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NONE, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXCEPT, 0);
    }
    public userName(): UserNameContext[];
    public userName(i: number): UserNameContext | null;
    public userName(i?: number): UserNameContext[] | UserNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserNameContext);
        }

        return this.getRuleContext(i, UserNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_roleOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoleOption) {
            return visitor.visitRoleOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantProxyContext extends antlr.ParserRuleContext {
    public _fromFirst?: UserNameContext;
    public _toFirst?: UserNameContext;
    public _userName?: UserNameContext;
    public _toOther: UserNameContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode[];
    public GRANT(i: number): antlr.TerminalNode | null;
    public GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.GRANT);
    	} else {
    		return this.getToken(MySqlParser.GRANT, i);
    	}
    }
    public PROXY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PROXY, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ON, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TO, 0)!;
    }
    public userName(): UserNameContext[];
    public userName(i: number): UserNameContext | null;
    public userName(i?: number): UserNameContext[] | UserNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserNameContext);
        }

        return this.getRuleContext(i, UserNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OPTION, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_grantProxy;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantProxy) {
            return visitor.visitGrantProxy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RENAME, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USER, 0)!;
    }
    public renameUserClause(): RenameUserClauseContext[];
    public renameUserClause(i: number): RenameUserClauseContext | null;
    public renameUserClause(i?: number): RenameUserClauseContext[] | RenameUserClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RenameUserClauseContext);
        }

        return this.getRuleContext(i, RenameUserClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_renameUser;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenameUser) {
            return visitor.visitRenameUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_revokeStatement;
    }
    public override copyFrom(ctx: RevokeStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class DetailRevokeContext extends RevokeStatementContext {
    public _privilegeObject?: Token | null;
    public constructor(ctx: RevokeStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REVOKE, 0)!;
    }
    public privelegeClause(): PrivelegeClauseContext[];
    public privelegeClause(i: number): PrivelegeClauseContext | null;
    public privelegeClause(i?: number): PrivelegeClauseContext[] | PrivelegeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivelegeClauseContext);
        }

        return this.getRuleContext(i, PrivelegeClauseContext);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ON, 0)!;
    }
    public privilegeLevel(): PrivilegeLevelContext {
        return this.getRuleContext(0, PrivilegeLevelContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FROM, 0)!;
    }
    public userName(): UserNameContext[];
    public userName(i: number): UserNameContext | null;
    public userName(i?: number): UserNameContext[] | UserNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserNameContext);
        }

        return this.getRuleContext(i, UserNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FUNCTION, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROCEDURE, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDetailRevoke) {
            return visitor.visitDetailRevoke(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RoleRevokeContext extends RevokeStatementContext {
    public constructor(ctx: RevokeStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REVOKE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FROM, 0)!;
    }
    public userName(): UserNameContext[];
    public userName(i: number): UserNameContext | null;
    public userName(i?: number): UserNameContext[] | UserNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserNameContext);
        }

        return this.getRuleContext(i, UserNameContext);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoleRevoke) {
            return visitor.visitRoleRevoke(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShortRevokeContext extends RevokeStatementContext {
    public constructor(ctx: RevokeStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REVOKE, 0)!;
    }
    public ALL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ALL, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public GRANT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.GRANT, 0)!;
    }
    public OPTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.OPTION, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FROM, 0)!;
    }
    public userName(): UserNameContext[];
    public userName(i: number): UserNameContext | null;
    public userName(i?: number): UserNameContext[] | UserNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserNameContext);
        }

        return this.getRuleContext(i, UserNameContext);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRIVILEGES, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShortRevoke) {
            return visitor.visitShortRevoke(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeProxyContext extends antlr.ParserRuleContext {
    public _onUser?: UserNameContext;
    public _fromFirst?: UserNameContext;
    public _userName?: UserNameContext;
    public _fromOther: UserNameContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REVOKE, 0)!;
    }
    public PROXY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PROXY, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ON, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FROM, 0)!;
    }
    public userName(): UserNameContext[];
    public userName(i: number): UserNameContext | null;
    public userName(i?: number): UserNameContext[] | UserNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserNameContext);
        }

        return this.getRuleContext(i, UserNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_revokeProxy;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRevokeProxy) {
            return visitor.visitRevokeProxy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetPasswordStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SET, 0)!;
    }
    public PASSWORD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PASSWORD, 0)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public passwordFunctionClause(): PasswordFunctionClauseContext | null {
        return this.getRuleContext(0, PasswordFunctionClauseContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOR, 0);
    }
    public userName(): UserNameContext | null {
        return this.getRuleContext(0, UserNameContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_setPasswordStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetPasswordStatement) {
            return visitor.visitSetPasswordStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userName(): UserNameContext {
        return this.getRuleContext(0, UserNameContext)!;
    }
    public userPasswordOption(): UserPasswordOptionContext {
        return this.getRuleContext(0, UserPasswordOptionContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_userSpecification;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUserSpecification) {
            return visitor.visitUserSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserAuthOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_userAuthOption;
    }
    public override copyFrom(ctx: UserAuthOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class SimpleAuthOptionContext extends UserAuthOptionContext {
    public constructor(ctx: UserAuthOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public userName(): UserNameContext {
        return this.getRuleContext(0, UserNameContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleAuthOption) {
            return visitor.visitSimpleAuthOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModuleAuthOptionContext extends UserAuthOptionContext {
    public constructor(ctx: UserAuthOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public userName(): UserNameContext {
        return this.getRuleContext(0, UserNameContext)!;
    }
    public IDENTIFIED(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IDENTIFIED, 0)!;
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(MySqlParser.WITH, 0)!;
    }
    public authenticationRule(): AuthenticationRuleContext {
        return this.getRuleContext(0, AuthenticationRuleContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitModuleAuthOption) {
            return visitor.visitModuleAuthOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RandomAuthOptionContext extends UserAuthOptionContext {
    public constructor(ctx: UserAuthOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public userName(): UserNameContext {
        return this.getRuleContext(0, UserNameContext)!;
    }
    public IDENTIFIED(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IDENTIFIED, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BY, 0)!;
    }
    public RANDOM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RANDOM, 0)!;
    }
    public PASSWORD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PASSWORD, 0)!;
    }
    public authOptionClause(): AuthOptionClauseContext {
        return this.getRuleContext(0, AuthOptionClauseContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRandomAuthOption) {
            return visitor.visitRandomAuthOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StringAuthOptionContext extends UserAuthOptionContext {
    public constructor(ctx: UserAuthOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public userName(): UserNameContext {
        return this.getRuleContext(0, UserNameContext)!;
    }
    public IDENTIFIED(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IDENTIFIED, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BY, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public authOptionClause(): AuthOptionClauseContext {
        return this.getRuleContext(0, AuthOptionClauseContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitStringAuthOption) {
            return visitor.visitStringAuthOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class HashAuthOptionContext extends UserAuthOptionContext {
    public _hashed?: Token | null;
    public constructor(ctx: UserAuthOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public userName(): UserNameContext {
        return this.getRuleContext(0, UserNameContext)!;
    }
    public IDENTIFIED(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IDENTIFIED, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BY, 0)!;
    }
    public PASSWORD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PASSWORD, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHashAuthOption) {
            return visitor.visitHashAuthOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AuthOptionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLACE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public RETAIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RETAIN, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PASSWORD, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_authOptionClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAuthOptionClause) {
            return visitor.visitAuthOptionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AuthenticationRuleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_authenticationRule;
    }
    public override copyFrom(ctx: AuthenticationRuleContext): void {
        super.copyFrom(ctx);
    }
}
export class PasswordModuleOptionContext extends AuthenticationRuleContext {
    public constructor(ctx: AuthenticationRuleContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public authPlugin(): AuthPluginContext {
        return this.getRuleContext(0, AuthPluginContext)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USING, 0)!;
    }
    public passwordFunctionClause(): PasswordFunctionClauseContext {
        return this.getRuleContext(0, PasswordFunctionClauseContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPasswordModuleOption) {
            return visitor.visitPasswordModuleOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModuleContext extends AuthenticationRuleContext {
    public constructor(ctx: AuthenticationRuleContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public authPlugin(): AuthPluginContext {
        return this.getRuleContext(0, AuthPluginContext)!;
    }
    public authOptionClause(): AuthOptionClauseContext | null {
        return this.getRuleContext(0, AuthOptionClauseContext);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BY, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USING, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public RANDOM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RANDOM, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PASSWORD, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitModule) {
            return visitor.visitModule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TlsOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SSL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SSL, 0);
    }
    public X509(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.X509, 0);
    }
    public CIPHER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CIPHER, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public ISSUER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ISSUER, 0);
    }
    public SUBJECT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBJECT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tlsOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTlsOption) {
            return visitor.visitTlsOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserResourceOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX_QUERIES_PER_HOUR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0);
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public MAX_UPDATES_PER_HOUR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0);
    }
    public MAX_USER_CONNECTIONS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_userResourceOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUserResourceOption) {
            return visitor.visitUserResourceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserPasswordOptionContext extends antlr.ParserRuleContext {
    public _expireType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PASSWORD, 0);
    }
    public EXPIRE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXPIRE, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DAY, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public NEVER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NEVER, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INTERVAL, 0);
    }
    public HISTORY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HISTORY, 0);
    }
    public REUSE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REUSE, 0);
    }
    public REQUIRE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REQUIRE, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT, 0);
    }
    public OPTIONAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OPTIONAL, 0);
    }
    public FAILED_LOGIN_ATTEMPTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0);
    }
    public PASSWORD_LOCK_TIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PASSWORD_LOCK_TIME, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNBOUNDED, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_userPasswordOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUserPasswordOption) {
            return visitor.visitUserPasswordOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserLockOptionContext extends antlr.ParserRuleContext {
    public _lockType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCOUNT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ACCOUNT, 0)!;
    }
    public LOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCK, 0);
    }
    public UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNLOCK, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_userLockOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUserLockOption) {
            return visitor.visitUserLockOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivelegeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilege(): PrivilegeContext {
        return this.getRuleContext(0, PrivilegeContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_privelegeClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivelegeClause) {
            return visitor.visitPrivelegeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRIVILEGES, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALTER, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROUTINE, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CREATE, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TEMPORARY, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLES, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VIEW, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USER, 0);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLESPACE, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROLE, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DELETE, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DROP, 0);
    }
    public EVENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EVENT, 0);
    }
    public EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXECUTE, 0);
    }
    public FILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FILE, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OPTION, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INSERT, 0);
    }
    public LOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCK, 0);
    }
    public PROCESS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROCESS, 0);
    }
    public PROXY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROXY, 0);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REFERENCES, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELOAD, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATION, 0);
    }
    public CLIENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CLIENT, 0);
    }
    public SLAVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SLAVE, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SELECT, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHOW, 0);
    }
    public DATABASES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATABASES, 0);
    }
    public SHUTDOWN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHUTDOWN, 0);
    }
    public SUPER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUPER, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRIGGER, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPDATE, 0);
    }
    public USAGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USAGE, 0);
    }
    public APPLICATION_PASSWORD_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0);
    }
    public AUDIT_ABORT_EXEMPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUDIT_ABORT_EXEMPT, 0);
    }
    public AUDIT_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUDIT_ADMIN, 0);
    }
    public AUTHENTICATION_POLICY_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUTHENTICATION_POLICY_ADMIN, 0);
    }
    public BACKUP_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BACKUP_ADMIN, 0);
    }
    public BINLOG_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINLOG_ADMIN, 0);
    }
    public BINLOG_ENCRYPTION_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0);
    }
    public CLONE_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CLONE_ADMIN, 0);
    }
    public CONNECTION_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONNECTION_ADMIN, 0);
    }
    public ENCRYPTION_KEY_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0);
    }
    public FIREWALL_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIREWALL_ADMIN, 0);
    }
    public FIREWALL_EXEMPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIREWALL_EXEMPT, 0);
    }
    public FIREWALL_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIREWALL_USER, 0);
    }
    public FLUSH_OPTIMIZER_COSTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0);
    }
    public FLUSH_STATUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FLUSH_STATUS, 0);
    }
    public FLUSH_TABLES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FLUSH_TABLES, 0);
    }
    public FLUSH_USER_RESOURCES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FLUSH_USER_RESOURCES, 0);
    }
    public GROUP_REPLICATION_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0);
    }
    public INNODB_REDO_LOG_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0);
    }
    public INNODB_REDO_LOG_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0);
    }
    public NDB_STORED_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NDB_STORED_USER, 0);
    }
    public PASSWORDLESS_USER_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0);
    }
    public PERSIST_RO_VARIABLES_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0);
    }
    public REPLICATION_APPLIER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATION_APPLIER, 0);
    }
    public REPLICATION_SLAVE_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0);
    }
    public RESOURCE_GROUP_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0);
    }
    public RESOURCE_GROUP_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RESOURCE_GROUP_USER, 0);
    }
    public ROLE_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROLE_ADMIN, 0);
    }
    public SERVICE_CONNECTION_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0);
    }
    public SESSION_VARIABLES_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
    }
    public SET_USER_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET_USER_ID, 0);
    }
    public SKIP_QUERY_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SKIP_QUERY_REWRITE, 0);
    }
    public SHOW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHOW_ROUTINE, 0);
    }
    public SYSTEM_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SYSTEM_USER, 0);
    }
    public SYSTEM_VARIABLES_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0);
    }
    public TABLE_ENCRYPTION_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0);
    }
    public TP_CONNECTION_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TP_CONNECTION_ADMIN, 0);
    }
    public VERSION_TOKEN_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0);
    }
    public XA_RECOVER_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.XA_RECOVER_ADMIN, 0);
    }
    public LOAD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOAD, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FROM, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.S3, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INTO, 0);
    }
    public INVOKE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INVOKE, 0);
    }
    public LAMBDA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LAMBDA, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_privilege;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeLevelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_privilegeLevel;
    }
    public override copyFrom(ctx: PrivilegeLevelContext): void {
        super.copyFrom(ctx);
    }
}
export class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
    public constructor(ctx: PrivilegeLevelContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DOT, 0)!;
    }
    public STAR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STAR, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefiniteSchemaPrivLevel) {
            return visitor.visitDefiniteSchemaPrivLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
    public constructor(ctx: PrivilegeLevelContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public dottedId(): DottedIdContext {
        return this.getRuleContext(0, DottedIdContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefiniteFullTablePrivLevel2) {
            return visitor.visitDefiniteFullTablePrivLevel2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
    public constructor(ctx: PrivilegeLevelContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DOT, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefiniteFullTablePrivLevel) {
            return visitor.visitDefiniteFullTablePrivLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GlobalPrivLevelContext extends PrivilegeLevelContext {
    public constructor(ctx: PrivilegeLevelContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STAR(): antlr.TerminalNode[];
    public STAR(i: number): antlr.TerminalNode | null;
    public STAR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.STAR);
    	} else {
    		return this.getToken(MySqlParser.STAR, i);
    	}
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DOT, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitGlobalPrivLevel) {
            return visitor.visitGlobalPrivLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
    public constructor(ctx: PrivilegeLevelContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefiniteTablePrivLevel) {
            return visitor.visitDefiniteTablePrivLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
    public constructor(ctx: PrivilegeLevelContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STAR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STAR, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentSchemaPriviLevel) {
            return visitor.visitCurrentSchemaPriviLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameUserClauseContext extends antlr.ParserRuleContext {
    public _fromFirst?: UserNameContext;
    public _toFirst?: UserNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TO, 0)!;
    }
    public userName(): UserNameContext[];
    public userName(i: number): UserNameContext | null;
    public userName(i?: number): UserNameContext[] | UserNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserNameContext);
        }

        return this.getRuleContext(i, UserNameContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_renameUserClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenameUserClause) {
            return visitor.visitRenameUserClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzeTableContext extends antlr.ParserRuleContext {
    public _actionOption?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ANALYZE, 0)!;
    }
    public tables(): TablesContext {
        return this.getRuleContext(0, TablesContext)!;
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLES, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPDATE, 0);
    }
    public HISTOGRAM(): antlr.TerminalNode[];
    public HISTOGRAM(i: number): antlr.TerminalNode | null;
    public HISTOGRAM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.HISTOGRAM);
    	} else {
    		return this.getToken(MySqlParser.HISTOGRAM, i);
    	}
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ON);
    	} else {
    		return this.getToken(MySqlParser.ON, i);
    	}
    }
    public fullColumnName(): FullColumnNameContext[];
    public fullColumnName(i: number): FullColumnNameContext | null;
    public fullColumnName(i?: number): FullColumnNameContext[] | FullColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FullColumnNameContext);
        }

        return this.getRuleContext(i, FullColumnNameContext);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DROP, 0);
    }
    public NO_WRITE_TO_BINLOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BUCKETS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_analyzeTable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeTable) {
            return visitor.visitAnalyzeTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHECK, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tables(): TablesContext {
        return this.getRuleContext(0, TablesContext)!;
    }
    public checkTableOption(): CheckTableOptionContext[];
    public checkTableOption(i: number): CheckTableOptionContext | null;
    public checkTableOption(i?: number): CheckTableOptionContext[] | CheckTableOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CheckTableOptionContext);
        }

        return this.getRuleContext(i, CheckTableOptionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_checkTable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCheckTable) {
            return visitor.visitCheckTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChecksumTableContext extends antlr.ParserRuleContext {
    public _actionOption?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHECKSUM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHECKSUM, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tables(): TablesContext {
        return this.getRuleContext(0, TablesContext)!;
    }
    public QUICK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUICK, 0);
    }
    public EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXTENDED, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_checksumTable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitChecksumTable) {
            return visitor.visitChecksumTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptimizeTableContext extends antlr.ParserRuleContext {
    public _actionOption?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIMIZE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.OPTIMIZE, 0)!;
    }
    public tables(): TablesContext {
        return this.getRuleContext(0, TablesContext)!;
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLES, 0);
    }
    public NO_WRITE_TO_BINLOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_optimizeTable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptimizeTable) {
            return visitor.visitOptimizeTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RepairTableContext extends antlr.ParserRuleContext {
    public _actionOption?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPAIR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPAIR, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tables(): TablesContext {
        return this.getRuleContext(0, TablesContext)!;
    }
    public QUICK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUICK, 0);
    }
    public EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXTENDED, 0);
    }
    public USE_FRM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USE_FRM, 0);
    }
    public NO_WRITE_TO_BINLOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_repairTable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRepairTable) {
            return visitor.visitRepairTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckTableOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOR, 0);
    }
    public UPGRADE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPGRADE, 0);
    }
    public QUICK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUICK, 0);
    }
    public FAST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FAST, 0);
    }
    public MEDIUM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MEDIUM, 0);
    }
    public EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXTENDED, 0);
    }
    public CHANGED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHANGED, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_checkTableOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCheckTableOption) {
            return visitor.visitCheckTableOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUdfunctionContext extends antlr.ParserRuleContext {
    public _returnType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FUNCTION, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public RETURNS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RETURNS, 0)!;
    }
    public SONAME(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SONAME, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING, 0);
    }
    public INTEGER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INTEGER, 0);
    }
    public REAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REAL, 0);
    }
    public DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DECIMAL, 0);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AGGREGATE, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_createUdfunction;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUdfunction) {
            return visitor.visitCreateUdfunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InstallPluginContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSTALL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INSTALL, 0)!;
    }
    public PLUGIN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PLUGIN, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public SONAME(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SONAME, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_installPlugin;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitInstallPlugin) {
            return visitor.visitInstallPlugin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UninstallPluginContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNINSTALL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.UNINSTALL, 0)!;
    }
    public PLUGIN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PLUGIN, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_uninstallPlugin;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUninstallPlugin) {
            return visitor.visitUninstallPlugin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_setStatement;
    }
    public override copyFrom(ctx: SetStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class SetTransactionContext extends SetStatementContext {
    public constructor(ctx: SetStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public setTransactionStatement(): SetTransactionStatementContext {
        return this.getRuleContext(0, SetTransactionStatementContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTransaction) {
            return visitor.visitSetTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetCharsetContext extends SetStatementContext {
    public constructor(ctx: SetStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SET, 0)!;
    }
    public charSet(): CharSetContext {
        return this.getRuleContext(0, CharSetContext)!;
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetCharset) {
            return visitor.visitSetCharset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetNamesContext extends SetStatementContext {
    public constructor(ctx: SetStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SET, 0)!;
    }
    public NAMES(): antlr.TerminalNode {
        return this.getToken(MySqlParser.NAMES, 0)!;
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLLATE, 0);
    }
    public collationName(): CollationNameContext | null {
        return this.getRuleContext(0, CollationNameContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetNames) {
            return visitor.visitSetNames(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetPasswordContext extends SetStatementContext {
    public constructor(ctx: SetStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public setPasswordStatement(): SetPasswordStatementContext {
        return this.getRuleContext(0, SetPasswordStatementContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetPassword) {
            return visitor.visitSetPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetAutocommitContext extends SetStatementContext {
    public constructor(ctx: SetStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public setAutocommitStatement(): SetAutocommitStatementContext {
        return this.getRuleContext(0, SetAutocommitStatementContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetAutocommit) {
            return visitor.visitSetAutocommit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetNewValueInsideTriggerContext extends SetStatementContext {
    public constructor(ctx: SetStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SET, 0)!;
    }
    public fullId(): FullIdContext[];
    public fullId(i: number): FullIdContext | null;
    public fullId(i?: number): FullIdContext[] | FullIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FullIdContext);
        }

        return this.getRuleContext(i, FullIdContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public VAR_ASSIGN(): antlr.TerminalNode[];
    public VAR_ASSIGN(i: number): antlr.TerminalNode | null;
    public VAR_ASSIGN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.VAR_ASSIGN);
    	} else {
    		return this.getToken(MySqlParser.VAR_ASSIGN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetNewValueInsideTrigger) {
            return visitor.visitSetNewValueInsideTrigger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetVariableContext extends SetStatementContext {
    public constructor(ctx: SetStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SET, 0)!;
    }
    public variableClause(): VariableClauseContext[];
    public variableClause(i: number): VariableClauseContext | null;
    public variableClause(i?: number): VariableClauseContext[] | VariableClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableClauseContext);
        }

        return this.getRuleContext(i, VariableClauseContext);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public VAR_ASSIGN(): antlr.TerminalNode[];
    public VAR_ASSIGN(i: number): antlr.TerminalNode | null;
    public VAR_ASSIGN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.VAR_ASSIGN);
    	} else {
    		return this.getToken(MySqlParser.VAR_ASSIGN, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ON);
    	} else {
    		return this.getToken(MySqlParser.ON, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetVariable) {
            return visitor.visitSetVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_showStatement;
    }
    public override copyFrom(ctx: ShowStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowOpenTablesContext extends ShowStatementContext {
    public _schemaFormat?: Token | null;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public OPEN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.OPEN, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLES, 0)!;
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public showFilter(): ShowFilterContext | null {
        return this.getRuleContext(0, ShowFilterContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IN, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowOpenTables) {
            return visitor.visitShowOpenTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowGlobalInfoContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public showGlobalInfoClause(): ShowGlobalInfoClauseContext {
        return this.getRuleContext(0, ShowGlobalInfoClauseContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowGlobalInfo) {
            return visitor.visitShowGlobalInfo(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateFullIdObjectContext extends ShowStatementContext {
    public _namedEntity?: Token | null;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public EVENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EVENT, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FUNCTION, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROCEDURE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRIGGER, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VIEW, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateFullIdObject) {
            return visitor.visitShowCreateFullIdObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateUserContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USER, 0)!;
    }
    public userName(): UserNameContext {
        return this.getRuleContext(0, UserNameContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateUser) {
            return visitor.visitShowCreateUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowErrorsContext extends ShowStatementContext {
    public _errorFormat?: Token | null;
    public _offset?: DecimalLiteralContext;
    public _rowCount?: DecimalLiteralContext;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public ERRORS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ERRORS, 0);
    }
    public WARNINGS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WARNINGS, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LIMIT, 0);
    }
    public decimalLiteral(): DecimalLiteralContext[];
    public decimalLiteral(i: number): DecimalLiteralContext | null;
    public decimalLiteral(i?: number): DecimalLiteralContext[] | DecimalLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }

        return this.getRuleContext(i, DecimalLiteralContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMA, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowErrors) {
            return visitor.visitShowErrors(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCountErrorsContext extends ShowStatementContext {
    public _errorFormat?: Token | null;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public COUNT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COUNT, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public STAR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STAR, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public ERRORS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ERRORS, 0);
    }
    public WARNINGS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WARNINGS, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCountErrors) {
            return visitor.visitShowCountErrors(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowObjectFilterContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public showCommonEntity(): ShowCommonEntityContext {
        return this.getRuleContext(0, ShowCommonEntityContext)!;
    }
    public showFilter(): ShowFilterContext | null {
        return this.getRuleContext(0, ShowFilterContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowObjectFilter) {
            return visitor.visitShowObjectFilter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateDbContext extends ShowStatementContext {
    public _schemaFormat?: Token | null;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CREATE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATABASE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEMA, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateDb) {
            return visitor.visitShowCreateDb(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowEngineContext extends ShowStatementContext {
    public _engineOption?: Token | null;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ENGINE, 0)!;
    }
    public engineName(): EngineNameContext {
        return this.getRuleContext(0, EngineNameContext)!;
    }
    public STATUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STATUS, 0);
    }
    public MUTEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MUTEX, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowEngine) {
            return visitor.visitShowEngine(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSchemaFilterContext extends ShowStatementContext {
    public _schemaFormat?: Token | null;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public showSchemaEntity(): ShowSchemaEntityContext {
        return this.getRuleContext(0, ShowSchemaEntityContext)!;
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public showFilter(): ShowFilterContext | null {
        return this.getRuleContext(0, ShowFilterContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IN, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowSchemaFilter) {
            return visitor.visitShowSchemaFilter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowIndexesContext extends ShowStatementContext {
    public _indexFormat?: Token | null;
    public _tableFormat?: Token | null;
    public _schemaFormat?: Token | null;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEXES, 0);
    }
    public KEYS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEYS, 0);
    }
    public FROM(): antlr.TerminalNode[];
    public FROM(i: number): antlr.TerminalNode | null;
    public FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.FROM);
    	} else {
    		return this.getToken(MySqlParser.FROM, i);
    	}
    }
    public IN(): antlr.TerminalNode[];
    public IN(i: number): antlr.TerminalNode | null;
    public IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.IN);
    	} else {
    		return this.getToken(MySqlParser.IN, i);
    	}
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowIndexes) {
            return visitor.visitShowIndexes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowLogEventsContext extends ShowStatementContext {
    public _logFormat?: Token | null;
    public _filename?: Token | null;
    public _fromPosition?: DecimalLiteralContext;
    public _offset?: DecimalLiteralContext;
    public _rowCount?: DecimalLiteralContext;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public EVENTS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EVENTS, 0)!;
    }
    public BINLOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINLOG, 0);
    }
    public RELAYLOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELAYLOG, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IN, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FROM, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LIMIT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public decimalLiteral(): DecimalLiteralContext[];
    public decimalLiteral(i: number): DecimalLiteralContext | null;
    public decimalLiteral(i?: number): DecimalLiteralContext[] | DecimalLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }

        return this.getRuleContext(i, DecimalLiteralContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMA, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowLogEvents) {
            return visitor.visitShowLogEvents(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowMasterLogsContext extends ShowStatementContext {
    public _logFormat?: Token | null;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public LOGS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOGS, 0)!;
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public MASTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowMasterLogs) {
            return visitor.visitShowMasterLogs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowGrantsContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public GRANTS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.GRANTS, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOR, 0);
    }
    public userName(): UserNameContext | null {
        return this.getRuleContext(0, UserNameContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowGrants) {
            return visitor.visitShowGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSlaveStatusContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public SLAVE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SLAVE, 0)!;
    }
    public STATUS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STATUS, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOR, 0);
    }
    public CHANNEL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHANNEL, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowSlaveStatus) {
            return visitor.visitShowSlaveStatus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRoutineContext extends ShowStatementContext {
    public _routine?: Token | null;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public CODE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CODE, 0)!;
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FUNCTION, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROCEDURE, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoutine) {
            return visitor.visitShowRoutine(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowProfileContext extends ShowStatementContext {
    public _queryCount?: DecimalLiteralContext;
    public _offset?: DecimalLiteralContext;
    public _rowCount?: DecimalLiteralContext;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public PROFILE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PROFILE, 0)!;
    }
    public showProfileType(): ShowProfileTypeContext[];
    public showProfileType(i: number): ShowProfileTypeContext | null;
    public showProfileType(i?: number): ShowProfileTypeContext[] | ShowProfileTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ShowProfileTypeContext);
        }

        return this.getRuleContext(i, ShowProfileTypeContext);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LIMIT, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOR, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUERY, 0);
    }
    public decimalLiteral(): DecimalLiteralContext[];
    public decimalLiteral(i: number): DecimalLiteralContext | null;
    public decimalLiteral(i?: number): DecimalLiteralContext[] | DecimalLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }

        return this.getRuleContext(i, DecimalLiteralContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowProfile) {
            return visitor.visitShowProfile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnsContext extends ShowStatementContext {
    public _columnsFormat?: Token | null;
    public _tableFormat?: Token | null;
    public _schemaFormat?: Token | null;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHOW, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMNS, 0);
    }
    public FIELDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIELDS, 0);
    }
    public FROM(): antlr.TerminalNode[];
    public FROM(i: number): antlr.TerminalNode | null;
    public FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.FROM);
    	} else {
    		return this.getToken(MySqlParser.FROM, i);
    	}
    }
    public IN(): antlr.TerminalNode[];
    public IN(i: number): antlr.TerminalNode | null;
    public IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.IN);
    	} else {
    		return this.getToken(MySqlParser.IN, i);
    	}
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FULL, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public showFilter(): ShowFilterContext | null {
        return this.getRuleContext(0, ShowFilterContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowColumns) {
            return visitor.visitShowColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL_ID, 0);
    }
    public GLOBAL_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GLOBAL_ID, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GLOBAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SESSION, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL, 0);
    }
    public AT_SIGN(): antlr.TerminalNode[];
    public AT_SIGN(i: number): antlr.TerminalNode | null;
    public AT_SIGN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.AT_SIGN);
    	} else {
    		return this.getToken(MySqlParser.AT_SIGN, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_variableClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableClause) {
            return visitor.visitVariableClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCommonEntityContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARACTER, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public COLLATION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLLATION, 0);
    }
    public DATABASES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATABASES, 0);
    }
    public SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEMAS, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FUNCTION, 0);
    }
    public STATUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STATUS, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROCEDURE, 0);
    }
    public VARIABLES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VARIABLES, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GLOBAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SESSION, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_showCommonEntity;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCommonEntity) {
            return visitor.visitShowCommonEntity(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowFilterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LIKE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_showFilter;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowFilter) {
            return visitor.visitShowFilter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowGlobalInfoClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENGINES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENGINES, 0);
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STORAGE, 0);
    }
    public MASTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER, 0);
    }
    public STATUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STATUS, 0);
    }
    public PLUGINS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PLUGINS, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRIVILEGES, 0);
    }
    public PROCESSLIST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROCESSLIST, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FULL, 0);
    }
    public PROFILES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROFILES, 0);
    }
    public SLAVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SLAVE, 0);
    }
    public HOSTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HOSTS, 0);
    }
    public AUTHORS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUTHORS, 0);
    }
    public CONTRIBUTORS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONTRIBUTORS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_showGlobalInfoClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowGlobalInfoClause) {
            return visitor.visitShowGlobalInfoClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowSchemaEntityContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EVENTS, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE, 0);
    }
    public STATUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STATUS, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLES, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FULL, 0);
    }
    public TRIGGERS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRIGGERS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_showSchemaEntity;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowSchemaEntity) {
            return visitor.visitShowSchemaEntity(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowProfileTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public BLOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BLOCK, 0);
    }
    public IO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IO, 0);
    }
    public CONTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONTEXT, 0);
    }
    public SWITCHES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SWITCHES, 0);
    }
    public CPU(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CPU, 0);
    }
    public IPC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IPC, 0);
    }
    public MEMORY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MEMORY, 0);
    }
    public PAGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PAGE, 0);
    }
    public FAULTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FAULTS, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SOURCE, 0);
    }
    public SWAPS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SWAPS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_showProfileType;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowProfileType) {
            return visitor.visitShowProfileType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BinlogStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BINLOG(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BINLOG, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_binlogStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitBinlogStatement) {
            return visitor.visitBinlogStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CacheIndexStatementContext extends antlr.ParserRuleContext {
    public _schema?: UidContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CACHE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CACHE, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INDEX, 0)!;
    }
    public tableIndexes(): TableIndexesContext[];
    public tableIndexes(i: number): TableIndexesContext | null;
    public tableIndexes(i?: number): TableIndexesContext[] | TableIndexesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableIndexesContext);
        }

        return this.getRuleContext(i, TableIndexesContext);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IN, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTITION, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_cacheIndexStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCacheIndexStatement) {
            return visitor.visitCacheIndexStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FlushStatementContext extends antlr.ParserRuleContext {
    public _flushFormat?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLUSH(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FLUSH, 0)!;
    }
    public flushOption(): FlushOptionContext[];
    public flushOption(i: number): FlushOptionContext | null;
    public flushOption(i?: number): FlushOptionContext[] | FlushOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FlushOptionContext);
        }

        return this.getRuleContext(i, FlushOptionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public NO_WRITE_TO_BINLOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_flushStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFlushStatement) {
            return visitor.visitFlushStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KillStatementContext extends antlr.ParserRuleContext {
    public _connectionFormat?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KILL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.KILL, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONNECTION, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUERY, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_killStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitKillStatement) {
            return visitor.visitKillStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadIndexIntoCacheContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOAD, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INDEX, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INTO, 0)!;
    }
    public CACHE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CACHE, 0)!;
    }
    public loadedTableIndexes(): LoadedTableIndexesContext[];
    public loadedTableIndexes(i: number): LoadedTableIndexesContext | null;
    public loadedTableIndexes(i?: number): LoadedTableIndexesContext[] | LoadedTableIndexesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LoadedTableIndexesContext);
        }

        return this.getRuleContext(i, LoadedTableIndexesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_loadIndexIntoCache;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadIndexIntoCache) {
            return visitor.visitLoadIndexIntoCache(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RESET, 0)!;
    }
    public QUERY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.QUERY, 0)!;
    }
    public CACHE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CACHE, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_resetStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitResetStatement) {
            return visitor.visitResetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShutdownStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHUTDOWN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SHUTDOWN, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_shutdownStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitShutdownStatement) {
            return visitor.visitShutdownStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIndexesContext extends antlr.ParserRuleContext {
    public _indexFormat?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public uidList(): UidListContext | null {
        return this.getRuleContext(0, UidListContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tableIndexes;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableIndexes) {
            return visitor.visitTableIndexes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FlushOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_flushOption;
    }
    public override copyFrom(ctx: FlushOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class TableFlushOptionContext extends FlushOptionContext {
    public constructor(ctx: FlushOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLES, 0);
    }
    public tables(): TablesContext | null {
        return this.getRuleContext(0, TablesContext);
    }
    public flushTableOption(): FlushTableOptionContext | null {
        return this.getRuleContext(0, FlushTableOptionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableFlushOption) {
            return visitor.visitTableFlushOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ChannelFlushOptionContext extends FlushOptionContext {
    public constructor(ctx: FlushOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RELAY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RELAY, 0)!;
    }
    public LOGS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOGS, 0)!;
    }
    public channelOption(): ChannelOptionContext | null {
        return this.getRuleContext(0, ChannelOptionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitChannelFlushOption) {
            return visitor.visitChannelFlushOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleFlushOptionContext extends FlushOptionContext {
    public constructor(ctx: FlushOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DES_KEY_FILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DES_KEY_FILE, 0);
    }
    public HOSTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HOSTS, 0);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOGS, 0);
    }
    public OPTIMIZER_COSTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OPTIMIZER_COSTS, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRIVILEGES, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUERY, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CACHE, 0);
    }
    public STATUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STATUS, 0);
    }
    public USER_RESOURCES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USER_RESOURCES, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLES, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.READ, 0);
    }
    public LOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCK, 0);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENGINE, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ERROR, 0);
    }
    public GENERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GENERAL, 0);
    }
    public RELAY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELAY, 0);
    }
    public SLOW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SLOW, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleFlushOption) {
            return visitor.visitSimpleFlushOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FlushTableOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITH, 0);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.READ, 0);
    }
    public LOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCK, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOR, 0);
    }
    public EXPORT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXPORT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_flushTableOption;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFlushTableOption) {
            return visitor.visitFlushTableOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadedTableIndexesContext extends antlr.ParserRuleContext {
    public _partitionList?: UidListContext;
    public _indexFormat?: Token | null;
    public _indexList?: UidListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTITION, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IGNORE, 0);
    }
    public LEAVES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LEAVES, 0);
    }
    public uidList(): UidListContext[];
    public uidList(i: number): UidListContext | null;
    public uidList(i?: number): UidListContext[] | UidListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidListContext);
        }

        return this.getRuleContext(i, UidListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEX, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_loadedTableIndexes;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadedTableIndexes) {
            return visitor.visitLoadedTableIndexes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleDescribeStatementContext extends antlr.ParserRuleContext {
    public _command?: Token | null;
    public _column?: UidContext;
    public _pattern?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXPLAIN, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DESC, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_simpleDescribeStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleDescribeStatement) {
            return visitor.visitSimpleDescribeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullDescribeStatementContext extends antlr.ParserRuleContext {
    public _command?: Token | null;
    public _formatType?: Token | null;
    public _formatValue?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public describeObjectClause(): DescribeObjectClauseContext {
        return this.getRuleContext(0, DescribeObjectClauseContext)!;
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXPLAIN, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DESC, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXTENDED, 0);
    }
    public PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTITIONS, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FORMAT, 0);
    }
    public TRADITIONAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRADITIONAL, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_fullDescribeStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFullDescribeStatement) {
            return visitor.visitFullDescribeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HelpStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HELP(): antlr.TerminalNode {
        return this.getToken(MySqlParser.HELP, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_helpStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHelpStatement) {
            return visitor.visitHelpStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.USE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_useStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUseStatement) {
            return visitor.visitUseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignalStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SIGNAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SIGNAL, 0)!;
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ID, 0);
    }
    public REVERSE_QUOTE_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public signalConditionInformation(): SignalConditionInformationContext[];
    public signalConditionInformation(i: number): SignalConditionInformationContext | null;
    public signalConditionInformation(i?: number): SignalConditionInformationContext[] | SignalConditionInformationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SignalConditionInformationContext);
        }

        return this.getRuleContext(i, SignalConditionInformationContext);
    }
    public SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQLSTATE, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VALUE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_signalStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSignalStatement) {
            return visitor.visitSignalStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResignalStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESIGNAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RESIGNAL, 0)!;
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ID, 0);
    }
    public REVERSE_QUOTE_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public signalConditionInformation(): SignalConditionInformationContext[];
    public signalConditionInformation(i: number): SignalConditionInformationContext | null;
    public signalConditionInformation(i?: number): SignalConditionInformationContext[] | SignalConditionInformationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SignalConditionInformationContext);
        }

        return this.getRuleContext(i, SignalConditionInformationContext);
    }
    public SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQLSTATE, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VALUE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_resignalStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitResignalStatement) {
            return visitor.visitResignalStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignalConditionInformationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0)!;
    }
    public CLASS_ORIGIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
    }
    public SUBCLASS_ORIGIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
    }
    public MESSAGE_TEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
    }
    public MYSQL_ERRNO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
    }
    public CONSTRAINT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
    }
    public CONSTRAINT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
    }
    public CONSTRAINT_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
    }
    public CATALOG_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CATALOG_NAME, 0);
    }
    public SCHEMA_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEMA_NAME, 0);
    }
    public TABLE_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE_NAME, 0);
    }
    public COLUMN_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN_NAME, 0);
    }
    public CURSOR_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURSOR_NAME, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DECIMAL_LITERAL, 0);
    }
    public mysqlVariable(): MysqlVariableContext | null {
        return this.getRuleContext(0, MysqlVariableContext);
    }
    public simpleId(): SimpleIdContext | null {
        return this.getRuleContext(0, SimpleIdContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_signalConditionInformation;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSignalConditionInformation) {
            return visitor.visitSignalConditionInformation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(MySqlParser.WITH, 0)!;
    }
    public commonTableExpressions(): CommonTableExpressionsContext[];
    public commonTableExpressions(i: number): CommonTableExpressionsContext | null;
    public commonTableExpressions(i?: number): CommonTableExpressionsContext[] | CommonTableExpressionsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommonTableExpressionsContext);
        }

        return this.getRuleContext(i, CommonTableExpressionsContext);
    }
    public RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RECURSIVE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_withStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitWithStatement) {
            return visitor.visitWithStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tableStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableStatement) {
            return visitor.visitTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DiagnosticsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.GET, 0)!;
    }
    public DIAGNOSTICS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.DIAGNOSTICS, 0)!;
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT, 0);
    }
    public STACKED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STACKED, 0);
    }
    public variableClause(): VariableClauseContext[];
    public variableClause(i: number): VariableClauseContext | null;
    public variableClause(i?: number): VariableClauseContext[] | VariableClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableClauseContext);
        }

        return this.getRuleContext(i, VariableClauseContext);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode[];
    public EQUAL_SYMBOL(i: number): antlr.TerminalNode | null;
    public EQUAL_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.EQUAL_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
    	}
    }
    public CONDITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONDITION, 0);
    }
    public diagnosticsConditionInformationName(): DiagnosticsConditionInformationNameContext[];
    public diagnosticsConditionInformationName(i: number): DiagnosticsConditionInformationNameContext | null;
    public diagnosticsConditionInformationName(i?: number): DiagnosticsConditionInformationNameContext[] | DiagnosticsConditionInformationNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DiagnosticsConditionInformationNameContext);
        }

        return this.getRuleContext(i, DiagnosticsConditionInformationNameContext);
    }
    public NUMBER(): antlr.TerminalNode[];
    public NUMBER(i: number): antlr.TerminalNode | null;
    public NUMBER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.NUMBER);
    	} else {
    		return this.getToken(MySqlParser.NUMBER, i);
    	}
    }
    public ROW_COUNT(): antlr.TerminalNode[];
    public ROW_COUNT(i: number): antlr.TerminalNode | null;
    public ROW_COUNT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ROW_COUNT);
    	} else {
    		return this.getToken(MySqlParser.ROW_COUNT, i);
    	}
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_diagnosticsStatement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDiagnosticsStatement) {
            return visitor.visitDiagnosticsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DiagnosticsConditionInformationNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLASS_ORIGIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
    }
    public SUBCLASS_ORIGIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
    }
    public RETURNED_SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RETURNED_SQLSTATE, 0);
    }
    public MESSAGE_TEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
    }
    public MYSQL_ERRNO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
    }
    public CONSTRAINT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
    }
    public CONSTRAINT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
    }
    public CONSTRAINT_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
    }
    public CATALOG_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CATALOG_NAME, 0);
    }
    public SCHEMA_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEMA_NAME, 0);
    }
    public TABLE_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE_NAME, 0);
    }
    public COLUMN_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN_NAME, 0);
    }
    public CURSOR_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURSOR_NAME, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_diagnosticsConditionInformationName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDiagnosticsConditionInformationName) {
            return visitor.visitDiagnosticsConditionInformationName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeObjectClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_describeObjectClause;
    }
    public override copyFrom(ctx: DescribeObjectClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class DescribeStatementsContext extends DescribeObjectClauseContext {
    public constructor(ctx: DescribeObjectClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(0, DeleteStatementContext);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(0, InsertStatementContext);
    }
    public replaceStatement(): ReplaceStatementContext | null {
        return this.getRuleContext(0, ReplaceStatementContext);
    }
    public updateStatement(): UpdateStatementContext | null {
        return this.getRuleContext(0, UpdateStatementContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeStatements) {
            return visitor.visitDescribeStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeConnectionContext extends DescribeObjectClauseContext {
    public constructor(ctx: DescribeObjectClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FOR, 0)!;
    }
    public CONNECTION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CONNECTION, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeConnection) {
            return visitor.visitDescribeConnection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullIdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public DOT_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DOT_ID, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_fullId;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFullId) {
            return visitor.visitFullId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tableName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNamesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext[];
    public tableName(i: number): TableNameContext | null;
    public tableName(i?: number): TableNameContext[] | TableNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableNameContext);
        }

        return this.getRuleContext(i, TableNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tableNames;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableNames) {
            return visitor.visitTableNames(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userName(): UserNameContext | null {
        return this.getRuleContext(0, UserNameContext);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_roleName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoleName) {
            return visitor.visitRoleName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public dottedId(): DottedIdContext[];
    public dottedId(i: number): DottedIdContext | null;
    public dottedId(i?: number): DottedIdContext[] | DottedIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DottedIdContext);
        }

        return this.getRuleContext(i, DottedIdContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_fullColumnName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFullColumnName) {
            return visitor.visitFullColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexColumnNameContext extends antlr.ParserRuleContext {
    public _sortType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DESC, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_indexColumnName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexColumnName) {
            return visitor.visitIndexColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleUserNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ID, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ADMIN, 0);
    }
    public keywordsCanBeId(): KeywordsCanBeIdContext | null {
        return this.getRuleContext(0, KeywordsCanBeIdContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_simpleUserName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleUserName) {
            return visitor.visitSimpleUserName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HostNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL_ID, 0);
    }
    public HOST_IP_ADDRESS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HOST_IP_ADDRESS, 0);
    }
    public AT_SIGN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AT_SIGN, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_hostName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHostName) {
            return visitor.visitHostName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleUserName(): SimpleUserNameContext | null {
        return this.getRuleContext(0, SimpleUserNameContext);
    }
    public hostName(): HostNameContext | null {
        return this.getRuleContext(0, HostNameContext);
    }
    public currentUserExpression(): CurrentUserExpressionContext | null {
        return this.getRuleContext(0, CurrentUserExpressionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_userName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUserName) {
            return visitor.visitUserName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MysqlVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL_ID, 0);
    }
    public GLOBAL_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GLOBAL_ID, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_mysqlVariable;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMysqlVariable) {
            return visitor.visitMysqlVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharsetNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public charsetNameBase(): CharsetNameBaseContext | null {
        return this.getRuleContext(0, CharsetNameBaseContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public CHARSET_REVERSE_QOUTE_STRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_charsetName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCharsetName) {
            return visitor.visitCharsetName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollationNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_collationName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCollationName) {
            return visitor.visitCollationName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public engineNameBase(): EngineNameBaseContext | null {
        return this.getRuleContext(0, EngineNameBaseContext);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ID, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_engineName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitEngineName) {
            return visitor.visitEngineName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineNameBaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ARCHIVE, 0);
    }
    public BLACKHOLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BLACKHOLE, 0);
    }
    public CONNECT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONNECT, 0);
    }
    public CSV(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CSV, 0);
    }
    public FEDERATED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FEDERATED, 0);
    }
    public INNODB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INNODB, 0);
    }
    public MEMORY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MEMORY, 0);
    }
    public MRG_MYISAM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MRG_MYISAM, 0);
    }
    public MYISAM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MYISAM, 0);
    }
    public NDB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NDB, 0);
    }
    public NDBCLUSTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NDBCLUSTER, 0);
    }
    public PERFORMANCE_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PERFORMANCE_SCHEMA, 0);
    }
    public TOKUDB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TOKUDB, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_engineNameBase;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitEngineNameBase) {
            return visitor.visitEngineNameBase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UuidSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public decimalLiteral(): DecimalLiteralContext[];
    public decimalLiteral(i: number): DecimalLiteralContext | null;
    public decimalLiteral(i?: number): DecimalLiteralContext[] | DecimalLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }

        return this.getRuleContext(i, DecimalLiteralContext);
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.MINUS);
    	} else {
    		return this.getToken(MySqlParser.MINUS, i);
    	}
    }
    public COLON_SYMB(): antlr.TerminalNode[];
    public COLON_SYMB(i: number): antlr.TerminalNode | null;
    public COLON_SYMB(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COLON_SYMB);
    	} else {
    		return this.getToken(MySqlParser.COLON_SYMB, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_uuidSet;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUuidSet) {
            return visitor.visitUuidSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XidContext extends antlr.ParserRuleContext {
    public _globalTableUid?: XuidStringIdContext;
    public _qualifier?: XuidStringIdContext;
    public _idFormat?: DecimalLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xuidStringId(): XuidStringIdContext[];
    public xuidStringId(i: number): XuidStringIdContext | null;
    public xuidStringId(i?: number): XuidStringIdContext[] | XuidStringIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(XuidStringIdContext);
        }

        return this.getRuleContext(i, XuidStringIdContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_xid;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitXid) {
            return visitor.visitXid(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XuidStringIdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public BIT_STRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_STRING, 0);
    }
    public HEXADECIMAL_LITERAL(): antlr.TerminalNode[];
    public HEXADECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public HEXADECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.HEXADECIMAL_LITERAL);
    	} else {
    		return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_xuidStringId;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitXuidStringId) {
            return visitor.visitXuidStringId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AuthPluginContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_authPlugin;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAuthPlugin) {
            return visitor.visitAuthPlugin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UidContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleId(): SimpleIdContext | null {
        return this.getRuleContext(0, SimpleIdContext);
    }
    public CHARSET_REVERSE_QOUTE_STRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_uid;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUid) {
            return visitor.visitUid(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleIdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ID, 0);
    }
    public charsetNameBase(): CharsetNameBaseContext | null {
        return this.getRuleContext(0, CharsetNameBaseContext);
    }
    public transactionLevelBase(): TransactionLevelBaseContext | null {
        return this.getRuleContext(0, TransactionLevelBaseContext);
    }
    public engineNameBase(): EngineNameBaseContext | null {
        return this.getRuleContext(0, EngineNameBaseContext);
    }
    public privilegesBase(): PrivilegesBaseContext | null {
        return this.getRuleContext(0, PrivilegesBaseContext);
    }
    public intervalTypeBase(): IntervalTypeBaseContext | null {
        return this.getRuleContext(0, IntervalTypeBaseContext);
    }
    public dataTypeBase(): DataTypeBaseContext | null {
        return this.getRuleContext(0, DataTypeBaseContext);
    }
    public keywordsCanBeId(): KeywordsCanBeIdContext | null {
        return this.getRuleContext(0, KeywordsCanBeIdContext);
    }
    public scalarFunctionName(): ScalarFunctionNameContext | null {
        return this.getRuleContext(0, ScalarFunctionNameContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_simpleId;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleId) {
            return visitor.visitSimpleId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DottedIdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DOT_ID, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DOT, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dottedId;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDottedId) {
            return visitor.visitDottedId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecimalLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DECIMAL_LITERAL, 0);
    }
    public ZERO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
    }
    public ONE_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE_DECIMAL, 0);
    }
    public TWO_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TWO_DECIMAL, 0);
    }
    public REAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_decimalLiteral;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecimalLiteral) {
            return visitor.visitDecimalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FileSizeLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILESIZE_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FILESIZE_LITERAL, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_fileSizeLiteral;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFileSizeLiteral) {
            return visitor.visitFileSizeLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.STRING_LITERAL);
    	} else {
    		return this.getToken(MySqlParser.STRING_LITERAL, i);
    	}
    }
    public START_NATIONAL_STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0);
    }
    public STRING_CHARSET_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_CHARSET_NAME, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLLATE, 0);
    }
    public collationName(): CollationNameContext | null {
        return this.getRuleContext(0, CollationNameContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_stringLiteral;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitStringLiteral) {
            return visitor.visitStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_booleanLiteral;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanLiteral) {
            return visitor.visitBooleanLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HexadecimalLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HEXADECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, 0)!;
    }
    public STRING_CHARSET_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_CHARSET_NAME, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_hexadecimalLiteral;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitHexadecimalLiteral) {
            return visitor.visitHexadecimalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullNotnullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NULL_LITERAL, 0);
    }
    public NULL_SPEC_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NULL_SPEC_LITERAL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_nullNotnull;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitNullNotnull) {
            return visitor.visitNullNotnull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantContext extends antlr.ParserRuleContext {
    public _nullLiteral?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MINUS, 0);
    }
    public hexadecimalLiteral(): HexadecimalLiteralContext | null {
        return this.getRuleContext(0, HexadecimalLiteralContext);
    }
    public booleanLiteral(): BooleanLiteralContext | null {
        return this.getRuleContext(0, BooleanLiteralContext);
    }
    public REAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REAL_LITERAL, 0);
    }
    public BIT_STRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_STRING, 0);
    }
    public NULL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NULL_LITERAL, 0);
    }
    public NULL_SPEC_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NULL_SPEC_LITERAL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_constant;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstant) {
            return visitor.visitConstant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dataType;
    }
    public override copyFrom(ctx: DataTypeContext): void {
        super.copyFrom(ctx);
    }
}
export class SpatialDataTypeContext extends DataTypeContext {
    public _typeName?: Token | null;
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GEOMETRYCOLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMETRYCOLLECTION, 0);
    }
    public GEOMCOLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMCOLLECTION, 0);
    }
    public LINESTRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINESTRING, 0);
    }
    public MULTILINESTRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTILINESTRING, 0);
    }
    public MULTIPOINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTIPOINT, 0);
    }
    public MULTIPOLYGON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTIPOLYGON, 0);
    }
    public POINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POINT, 0);
    }
    public POLYGON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POLYGON, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON, 0);
    }
    public GEOMETRY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMETRY, 0);
    }
    public SRID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SRID, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSpatialDataType) {
            return visitor.visitSpatialDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LongVarbinaryDataTypeContext extends DataTypeContext {
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LONG(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LONG, 0)!;
    }
    public VARBINARY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VARBINARY, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLongVarbinaryDataType) {
            return visitor.visitLongVarbinaryDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CollectionDataTypeContext extends DataTypeContext {
    public _typeName?: Token | null;
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public collectionOptions(): CollectionOptionsContext {
        return this.getRuleContext(0, CollectionOptionsContext)!;
    }
    public ENUM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENUM, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET, 0);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public charSet(): CharSetContext | null {
        return this.getRuleContext(0, CharSetContext);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDataType) {
            return visitor.visitCollectionDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NationalVaryingStringDataTypeContext extends DataTypeContext {
    public _typeName?: Token | null;
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NATIONAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.NATIONAL, 0)!;
    }
    public VARYING(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VARYING, 0)!;
    }
    public CHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHAR, 0);
    }
    public CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARACTER, 0);
    }
    public lengthOneDimension(): LengthOneDimensionContext | null {
        return this.getRuleContext(0, LengthOneDimensionContext);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitNationalVaryingStringDataType) {
            return visitor.visitNationalVaryingStringDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DimensionDataTypeContext extends DataTypeContext {
    public _typeName?: Token | null;
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TINYINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TINYINT, 0);
    }
    public SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SMALLINT, 0);
    }
    public MEDIUMINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MEDIUMINT, 0);
    }
    public INT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INT, 0);
    }
    public INTEGER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INTEGER, 0);
    }
    public BIGINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIGINT, 0);
    }
    public MIDDLEINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MIDDLEINT, 0);
    }
    public INT1(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INT1, 0);
    }
    public INT2(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INT2, 0);
    }
    public INT3(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INT3, 0);
    }
    public INT4(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INT4, 0);
    }
    public INT8(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INT8, 0);
    }
    public lengthOneDimension(): LengthOneDimensionContext | null {
        return this.getRuleContext(0, LengthOneDimensionContext);
    }
    public SIGNED(): antlr.TerminalNode[];
    public SIGNED(i: number): antlr.TerminalNode | null;
    public SIGNED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.SIGNED);
    	} else {
    		return this.getToken(MySqlParser.SIGNED, i);
    	}
    }
    public UNSIGNED(): antlr.TerminalNode[];
    public UNSIGNED(i: number): antlr.TerminalNode | null;
    public UNSIGNED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.UNSIGNED);
    	} else {
    		return this.getToken(MySqlParser.UNSIGNED, i);
    	}
    }
    public ZEROFILL(): antlr.TerminalNode[];
    public ZEROFILL(i: number): antlr.TerminalNode | null;
    public ZEROFILL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.ZEROFILL);
    	} else {
    		return this.getToken(MySqlParser.ZEROFILL, i);
    	}
    }
    public REAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REAL, 0);
    }
    public lengthTwoDimension(): LengthTwoDimensionContext | null {
        return this.getRuleContext(0, LengthTwoDimensionContext);
    }
    public DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DOUBLE, 0);
    }
    public PRECISION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRECISION, 0);
    }
    public DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DECIMAL, 0);
    }
    public DEC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEC, 0);
    }
    public FIXED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIXED, 0);
    }
    public NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NUMERIC, 0);
    }
    public FLOAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FLOAT, 0);
    }
    public FLOAT4(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FLOAT4, 0);
    }
    public FLOAT8(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FLOAT8, 0);
    }
    public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext | null {
        return this.getRuleContext(0, LengthTwoOptionalDimensionContext);
    }
    public BIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIME, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIMESTAMP, 0);
    }
    public DATETIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATETIME, 0);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public VARBINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VARBINARY, 0);
    }
    public BLOB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BLOB, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.YEAR, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDimensionDataType) {
            return visitor.visitDimensionDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StringDataTypeContext extends DataTypeContext {
    public _typeName?: Token | null;
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHAR, 0);
    }
    public CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARACTER, 0);
    }
    public VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VARCHAR, 0);
    }
    public TINYTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TINYTEXT, 0);
    }
    public TEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TEXT, 0);
    }
    public MEDIUMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MEDIUMTEXT, 0);
    }
    public LONGTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LONGTEXT, 0);
    }
    public NCHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NCHAR, 0);
    }
    public NVARCHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NVARCHAR, 0);
    }
    public LONG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LONG, 0);
    }
    public VARYING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VARYING, 0);
    }
    public lengthOneDimension(): LengthOneDimensionContext | null {
        return this.getRuleContext(0, LengthOneDimensionContext);
    }
    public BINARY(): antlr.TerminalNode[];
    public BINARY(i: number): antlr.TerminalNode | null;
    public BINARY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.BINARY);
    	} else {
    		return this.getToken(MySqlParser.BINARY, i);
    	}
    }
    public charSet(): CharSetContext | null {
        return this.getRuleContext(0, CharSetContext);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLLATE, 0);
    }
    public collationName(): CollationNameContext | null {
        return this.getRuleContext(0, CollationNameContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitStringDataType) {
            return visitor.visitStringDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LongVarcharDataTypeContext extends DataTypeContext {
    public _typeName?: Token | null;
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LONG(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LONG, 0)!;
    }
    public VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VARCHAR, 0);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public charSet(): CharSetContext | null {
        return this.getRuleContext(0, CharSetContext);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLLATE, 0);
    }
    public collationName(): CollationNameContext | null {
        return this.getRuleContext(0, CollationNameContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLongVarcharDataType) {
            return visitor.visitLongVarcharDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NationalStringDataTypeContext extends DataTypeContext {
    public _typeName?: Token | null;
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NATIONAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NATIONAL, 0);
    }
    public VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VARCHAR, 0);
    }
    public CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARACTER, 0);
    }
    public CHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHAR, 0);
    }
    public lengthOneDimension(): LengthOneDimensionContext | null {
        return this.getRuleContext(0, LengthOneDimensionContext);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public NCHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NCHAR, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitNationalStringDataType) {
            return visitor.visitNationalStringDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleDataTypeContext extends DataTypeContext {
    public _typeName?: Token | null;
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATE, 0);
    }
    public TINYBLOB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TINYBLOB, 0);
    }
    public MEDIUMBLOB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MEDIUMBLOB, 0);
    }
    public LONGBLOB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LONGBLOB, 0);
    }
    public BOOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BOOL, 0);
    }
    public BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BOOLEAN, 0);
    }
    public SERIAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SERIAL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleDataType) {
            return visitor.visitSimpleDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.STRING_LITERAL);
    	} else {
    		return this.getToken(MySqlParser.STRING_LITERAL, i);
    	}
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_collectionOptions;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionOptions) {
            return visitor.visitCollectionOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConvertedDataTypeContext extends antlr.ParserRuleContext {
    public _typeName?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHAR, 0);
    }
    public SIGNED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SIGNED, 0);
    }
    public UNSIGNED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNSIGNED, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ARRAY, 0);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public NCHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NCHAR, 0);
    }
    public FLOAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FLOAT, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATE, 0);
    }
    public DATETIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATETIME, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIME, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.YEAR, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON, 0);
    }
    public INT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INT, 0);
    }
    public INTEGER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INTEGER, 0);
    }
    public DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DOUBLE, 0);
    }
    public DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DECIMAL, 0);
    }
    public DEC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEC, 0);
    }
    public lengthOneDimension(): LengthOneDimensionContext | null {
        return this.getRuleContext(0, LengthOneDimensionContext);
    }
    public charSet(): CharSetContext | null {
        return this.getRuleContext(0, CharSetContext);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext | null {
        return this.getRuleContext(0, LengthTwoOptionalDimensionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_convertedDataType;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitConvertedDataType) {
            return visitor.visitConvertedDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LengthOneDimensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_lengthOneDimension;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLengthOneDimension) {
            return visitor.visitLengthOneDimension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LengthTwoDimensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext[];
    public decimalLiteral(i: number): DecimalLiteralContext | null;
    public decimalLiteral(i?: number): DecimalLiteralContext[] | DecimalLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }

        return this.getRuleContext(i, DecimalLiteralContext);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMA, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_lengthTwoDimension;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLengthTwoDimension) {
            return visitor.visitLengthTwoDimension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LengthTwoOptionalDimensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext[];
    public decimalLiteral(i: number): DecimalLiteralContext | null;
    public decimalLiteral(i?: number): DecimalLiteralContext[] | DecimalLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }

        return this.getRuleContext(i, DecimalLiteralContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_lengthTwoOptionalDimension;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLengthTwoOptionalDimension) {
            return visitor.visitLengthTwoOptionalDimension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UidListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_uidList;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUidList) {
            return visitor.visitUidList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullColumnNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fullColumnName(): FullColumnNameContext[];
    public fullColumnName(i: number): FullColumnNameContext | null;
    public fullColumnName(i?: number): FullColumnNameContext[] | FullColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FullColumnNameContext);
        }

        return this.getRuleContext(i, FullColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_fullColumnNameList;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFullColumnNameList) {
            return visitor.visitFullColumnNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext[];
    public tableName(i: number): TableNameContext | null;
    public tableName(i?: number): TableNameContext[] | TableNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableNameContext);
        }

        return this.getRuleContext(i, TableNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_tables;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTables) {
            return visitor.visitTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexColumnNamesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public indexColumnName(): IndexColumnNameContext[];
    public indexColumnName(i: number): IndexColumnNameContext | null;
    public indexColumnName(i?: number): IndexColumnNameContext[] | IndexColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexColumnNameContext);
        }

        return this.getRuleContext(i, IndexColumnNameContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_indexColumnNames;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexColumnNames) {
            return visitor.visitIndexColumnNames(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_expressions;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressions) {
            return visitor.visitExpressions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionsWithDefaultsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionOrDefault(): ExpressionOrDefaultContext[];
    public expressionOrDefault(i: number): ExpressionOrDefaultContext | null;
    public expressionOrDefault(i?: number): ExpressionOrDefaultContext[] | ExpressionOrDefaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionOrDefaultContext);
        }

        return this.getRuleContext(i, ExpressionOrDefaultContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_expressionsWithDefaults;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionsWithDefaults) {
            return visitor.visitExpressionsWithDefaults(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_constants;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstants) {
            return visitor.visitConstants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleStringsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.STRING_LITERAL);
    	} else {
    		return this.getToken(MySqlParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_simpleStrings;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleStrings) {
            return visitor.visitSimpleStrings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserVariablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL_ID(): antlr.TerminalNode[];
    public LOCAL_ID(i: number): antlr.TerminalNode | null;
    public LOCAL_ID(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LOCAL_ID);
    	} else {
    		return this.getToken(MySqlParser.LOCAL_ID, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_userVariables;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUserVariables) {
            return visitor.visitUserVariables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NULL_LITERAL, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CAST, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public convertedDataType(): ConvertedDataTypeContext | null {
        return this.getRuleContext(0, ConvertedDataTypeContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public unaryOperator(): UnaryOperatorContext | null {
        return this.getRuleContext(0, UnaryOperatorContext);
    }
    public currentTimestamp(): CurrentTimestampContext[];
    public currentTimestamp(i: number): CurrentTimestampContext | null;
    public currentTimestamp(i?: number): CurrentTimestampContext[] | CurrentTimestampContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CurrentTimestampContext);
        }

        return this.getRuleContext(i, CurrentTimestampContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ON, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPDATE, 0);
    }
    public fullId(): FullIdContext | null {
        return this.getRuleContext(0, FullIdContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_defaultValue;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaultValue) {
            return visitor.visitDefaultValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CurrentTimestampContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOW, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
    }
    public LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCALTIME, 0);
    }
    public LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCALTIMESTAMP, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_currentTimestamp;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentTimestamp) {
            return visitor.visitCurrentTimestamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionOrDefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_expressionOrDefault;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionOrDefault) {
            return visitor.visitExpressionOrDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IF, 0)!;
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_ifExists;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IF, 0)!;
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.NOT, 0)!;
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_ifNotExists;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrReplaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.OR, 0)!;
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.REPLACE, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_orReplace;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrReplace) {
            return visitor.visitOrReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WaitNowaitClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WAIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WAIT, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOWAIT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_waitNowaitClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitWaitNowaitClause) {
            return visitor.visitWaitNowaitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_functionCall;
    }
    public override copyFrom(ctx: FunctionCallContext): void {
        super.copyFrom(ctx);
    }
}
export class SpecificFunctionCallContext extends FunctionCallContext {
    public constructor(ctx: FunctionCallContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public specificFunction(): SpecificFunctionContext {
        return this.getRuleContext(0, SpecificFunctionContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSpecificFunctionCall) {
            return visitor.visitSpecificFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PasswordFunctionCallContext extends FunctionCallContext {
    public constructor(ctx: FunctionCallContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public passwordFunctionClause(): PasswordFunctionClauseContext {
        return this.getRuleContext(0, PasswordFunctionClauseContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPasswordFunctionCall) {
            return visitor.visitPasswordFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UdfFunctionCallContext extends FunctionCallContext {
    public constructor(ctx: FunctionCallContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fullId(): FullIdContext {
        return this.getRuleContext(0, FullIdContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public functionArgs(): FunctionArgsContext | null {
        return this.getRuleContext(0, FunctionArgsContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUdfFunctionCall) {
            return visitor.visitUdfFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NonAggregateFunctionCallContext extends FunctionCallContext {
    public constructor(ctx: FunctionCallContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public nonAggregateWindowedFunction(): NonAggregateWindowedFunctionContext {
        return this.getRuleContext(0, NonAggregateWindowedFunctionContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonAggregateFunctionCall) {
            return visitor.visitNonAggregateFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AggregateFunctionCallContext extends FunctionCallContext {
    public constructor(ctx: FunctionCallContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public aggregateWindowedFunction(): AggregateWindowedFunctionContext {
        return this.getRuleContext(0, AggregateWindowedFunctionContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggregateFunctionCall) {
            return visitor.visitAggregateFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ScalarFunctionCallContext extends FunctionCallContext {
    public constructor(ctx: FunctionCallContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public scalarFunctionName(): ScalarFunctionNameContext {
        return this.getRuleContext(0, ScalarFunctionNameContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public functionArgs(): FunctionArgsContext | null {
        return this.getRuleContext(0, FunctionArgsContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitScalarFunctionCall) {
            return visitor.visitScalarFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpecificFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_specificFunction;
    }
    public override copyFrom(ctx: SpecificFunctionContext): void {
        super.copyFrom(ctx);
    }
}
export class PositionFunctionCallContext extends SpecificFunctionContext {
    public _positionString?: StringLiteralContext;
    public _positionExpression?: ExpressionContext;
    public _inString?: StringLiteralContext;
    public _inExpression?: ExpressionContext;
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public POSITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.POSITION, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IN, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public stringLiteral(): StringLiteralContext[];
    public stringLiteral(i: number): StringLiteralContext | null;
    public stringLiteral(i?: number): StringLiteralContext[] | StringLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLiteralContext);
        }

        return this.getRuleContext(i, StringLiteralContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPositionFunctionCall) {
            return visitor.visitPositionFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TrimFunctionCallContext extends SpecificFunctionContext {
    public _positioinForm?: Token | null;
    public _sourceString?: StringLiteralContext;
    public _sourceExpression?: ExpressionContext;
    public _fromString?: StringLiteralContext;
    public _fromExpression?: ExpressionContext;
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRIM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.TRIM, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FROM, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BOTH, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LEADING, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRAILING, 0);
    }
    public stringLiteral(): StringLiteralContext[];
    public stringLiteral(i: number): StringLiteralContext | null;
    public stringLiteral(i?: number): StringLiteralContext[] | StringLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLiteralContext);
        }

        return this.getRuleContext(i, StringLiteralContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTrimFunctionCall) {
            return visitor.visitTrimFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonValueFunctionCallContext extends SpecificFunctionContext {
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_VALUE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.JSON_VALUE, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMA, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RETURNING, 0);
    }
    public convertedDataType(): ConvertedDataTypeContext | null {
        return this.getRuleContext(0, ConvertedDataTypeContext);
    }
    public jsonOnEmpty(): JsonOnEmptyContext | null {
        return this.getRuleContext(0, JsonOnEmptyContext);
    }
    public jsonOnError(): JsonOnErrorContext | null {
        return this.getRuleContext(0, JsonOnErrorContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitJsonValueFunctionCall) {
            return visitor.visitJsonValueFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CaseFunctionCallContext extends SpecificFunctionContext {
    public _elseArg?: FunctionArgContext;
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(MySqlParser.END, 0)!;
    }
    public caseFuncAlternative(): CaseFuncAlternativeContext[];
    public caseFuncAlternative(i: number): CaseFuncAlternativeContext | null;
    public caseFuncAlternative(i?: number): CaseFuncAlternativeContext[] | CaseFuncAlternativeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CaseFuncAlternativeContext);
        }

        return this.getRuleContext(i, CaseFuncAlternativeContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ELSE, 0);
    }
    public functionArg(): FunctionArgContext | null {
        return this.getRuleContext(0, FunctionArgContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCaseFunctionCall) {
            return visitor.visitCaseFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExtractFunctionCallContext extends SpecificFunctionContext {
    public _sourceString?: StringLiteralContext;
    public _sourceExpression?: ExpressionContext;
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXTRACT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EXTRACT, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public intervalType(): IntervalTypeContext {
        return this.getRuleContext(0, IntervalTypeContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FROM, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitExtractFunctionCall) {
            return visitor.visitExtractFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DataTypeFunctionCallContext extends SpecificFunctionContext {
    public _separator?: Token | null;
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONVERT, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public convertedDataType(): ConvertedDataTypeContext | null {
        return this.getRuleContext(0, ConvertedDataTypeContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMA, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USING, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CAST, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDataTypeFunctionCall) {
            return visitor.visitDataTypeFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ValuesFunctionCallContext extends SpecificFunctionContext {
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VALUES, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public fullColumnName(): FullColumnNameContext {
        return this.getRuleContext(0, FullColumnNameContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitValuesFunctionCall) {
            return visitor.visitValuesFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
    public _elseArg?: FunctionArgContext;
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CASE, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(MySqlParser.END, 0)!;
    }
    public caseFuncAlternative(): CaseFuncAlternativeContext[];
    public caseFuncAlternative(i: number): CaseFuncAlternativeContext | null;
    public caseFuncAlternative(i?: number): CaseFuncAlternativeContext[] | CaseFuncAlternativeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CaseFuncAlternativeContext);
        }

        return this.getRuleContext(i, CaseFuncAlternativeContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ELSE, 0);
    }
    public functionArg(): FunctionArgContext | null {
        return this.getRuleContext(0, FunctionArgContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCaseExpressionFunctionCall) {
            return visitor.visitCaseExpressionFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentUserContext extends SpecificFunctionContext {
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public currentUserExpression(): CurrentUserExpressionContext {
        return this.getRuleContext(0, CurrentUserExpressionContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentUser) {
            return visitor.visitCurrentUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleFunctionCallContext extends SpecificFunctionContext {
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT_TIME, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
    }
    public LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCALTIME, 0);
    }
    public UTC_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UTC_TIMESTAMP, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEMA, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleFunctionCall) {
            return visitor.visitSimpleFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CharFunctionCallContext extends SpecificFunctionContext {
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CHAR(): antlr.TerminalNode {
        return this.getToken(MySqlParser.CHAR, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public functionArgs(): FunctionArgsContext {
        return this.getRuleContext(0, FunctionArgsContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USING, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(0, CharsetNameContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCharFunctionCall) {
            return visitor.visitCharFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class WeightFunctionCallContext extends SpecificFunctionContext {
    public _stringFormat?: Token | null;
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WEIGHT_STRING(): antlr.TerminalNode {
        return this.getToken(MySqlParser.WEIGHT_STRING, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.LR_BRACKET, i);
    	}
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.RR_BRACKET);
    	} else {
    		return this.getToken(MySqlParser.RR_BRACKET, i);
    	}
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AS, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public levelsInWeightString(): LevelsInWeightStringContext | null {
        return this.getRuleContext(0, LevelsInWeightStringContext);
    }
    public CHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHAR, 0);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitWeightFunctionCall) {
            return visitor.visitWeightFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GetFormatFunctionCallContext extends SpecificFunctionContext {
    public _datetimeFormat?: Token | null;
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GET_FORMAT(): antlr.TerminalNode {
        return this.getToken(MySqlParser.GET_FORMAT, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COMMA, 0)!;
    }
    public stringLiteral(): StringLiteralContext {
        return this.getRuleContext(0, StringLiteralContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATE, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIME, 0);
    }
    public DATETIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATETIME, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitGetFormatFunctionCall) {
            return visitor.visitGetFormatFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubstrFunctionCallContext extends SpecificFunctionContext {
    public _sourceString?: StringLiteralContext;
    public _sourceExpression?: ExpressionContext;
    public _fromDecimal?: DecimalLiteralContext;
    public _fromExpression?: ExpressionContext;
    public _forDecimal?: DecimalLiteralContext;
    public _forExpression?: ExpressionContext;
    public constructor(ctx: SpecificFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(MySqlParser.FROM, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBSTR, 0);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBSTRING, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public decimalLiteral(): DecimalLiteralContext[];
    public decimalLiteral(i: number): DecimalLiteralContext | null;
    public decimalLiteral(i?: number): DecimalLiteralContext[] | DecimalLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }

        return this.getRuleContext(i, DecimalLiteralContext);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOR, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubstrFunctionCall) {
            return visitor.visitSubstrFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseFuncAlternativeContext extends antlr.ParserRuleContext {
    public _condition?: FunctionArgContext;
    public _consequent?: FunctionArgContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.WHEN, 0)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.THEN, 0)!;
    }
    public functionArg(): FunctionArgContext[];
    public functionArg(i: number): FunctionArgContext | null;
    public functionArg(i?: number): FunctionArgContext[] | FunctionArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionArgContext);
        }

        return this.getRuleContext(i, FunctionArgContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_caseFuncAlternative;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCaseFuncAlternative) {
            return visitor.visitCaseFuncAlternative(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LevelsInWeightStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_levelsInWeightString;
    }
    public override copyFrom(ctx: LevelsInWeightStringContext): void {
        super.copyFrom(ctx);
    }
}
export class LevelWeightRangeContext extends LevelsInWeightStringContext {
    public _firstLevel?: DecimalLiteralContext;
    public _lastLevel?: DecimalLiteralContext;
    public constructor(ctx: LevelsInWeightStringContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEVEL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LEVEL, 0)!;
    }
    public MINUS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MINUS, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext[];
    public decimalLiteral(i: number): DecimalLiteralContext | null;
    public decimalLiteral(i?: number): DecimalLiteralContext[] | DecimalLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }

        return this.getRuleContext(i, DecimalLiteralContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLevelWeightRange) {
            return visitor.visitLevelWeightRange(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LevelWeightListContext extends LevelsInWeightStringContext {
    public constructor(ctx: LevelsInWeightStringContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEVEL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LEVEL, 0)!;
    }
    public levelInWeightListElement(): LevelInWeightListElementContext[];
    public levelInWeightListElement(i: number): LevelInWeightListElementContext | null;
    public levelInWeightListElement(i?: number): LevelInWeightListElementContext[] | LevelInWeightListElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LevelInWeightListElementContext);
        }

        return this.getRuleContext(i, LevelInWeightListElementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLevelWeightList) {
            return visitor.visitLevelWeightList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LevelInWeightListElementContext extends antlr.ParserRuleContext {
    public _orderType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DESC, 0);
    }
    public REVERSE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REVERSE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_levelInWeightListElement;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLevelInWeightListElement) {
            return visitor.visitLevelInWeightListElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregateWindowedFunctionContext extends antlr.ParserRuleContext {
    public _aggregator?: Token | null;
    public _starArg?: Token | null;
    public _separator?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public functionArg(): FunctionArgContext | null {
        return this.getRuleContext(0, FunctionArgContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public AVG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AVG, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MIN, 0);
    }
    public SUM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUM, 0);
    }
    public overClause(): OverClauseContext | null {
        return this.getRuleContext(0, OverClauseContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISTINCT, 0);
    }
    public COUNT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COUNT, 0);
    }
    public functionArgs(): FunctionArgsContext | null {
        return this.getRuleContext(0, FunctionArgsContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STAR, 0);
    }
    public BIT_AND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_AND, 0);
    }
    public BIT_OR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_OR, 0);
    }
    public BIT_XOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_XOR, 0);
    }
    public STD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STD, 0);
    }
    public STDDEV(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STDDEV, 0);
    }
    public STDDEV_POP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STDDEV_POP, 0);
    }
    public STDDEV_SAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STDDEV_SAMP, 0);
    }
    public VAR_POP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VAR_POP, 0);
    }
    public VAR_SAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VAR_SAMP, 0);
    }
    public VARIANCE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VARIANCE, 0);
    }
    public GROUP_CONCAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GROUP_CONCAT, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BY, 0);
    }
    public orderByExpression(): OrderByExpressionContext[];
    public orderByExpression(i: number): OrderByExpressionContext | null;
    public orderByExpression(i?: number): OrderByExpressionContext[] | OrderByExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderByExpressionContext);
        }

        return this.getRuleContext(i, OrderByExpressionContext);
    }
    public SEPARATOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SEPARATOR, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_aggregateWindowedFunction;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggregateWindowedFunction) {
            return visitor.visitAggregateWindowedFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonAggregateWindowedFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public overClause(): OverClauseContext {
        return this.getRuleContext(0, OverClauseContext)!;
    }
    public LAG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LAG, 0);
    }
    public LEAD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LEAD, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public decimalLiteral(): DecimalLiteralContext[];
    public decimalLiteral(i: number): DecimalLiteralContext | null;
    public decimalLiteral(i?: number): DecimalLiteralContext[] | DecimalLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }

        return this.getRuleContext(i, DecimalLiteralContext);
    }
    public FIRST_VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIRST_VALUE, 0);
    }
    public LAST_VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LAST_VALUE, 0);
    }
    public CUME_DIST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CUME_DIST, 0);
    }
    public DENSE_RANK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DENSE_RANK, 0);
    }
    public PERCENT_RANK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PERCENT_RANK, 0);
    }
    public RANK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RANK, 0);
    }
    public ROW_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROW_NUMBER, 0);
    }
    public NTH_VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NTH_VALUE, 0);
    }
    public NTILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NTILE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_nonAggregateWindowedFunction;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonAggregateWindowedFunction) {
            return visitor.visitNonAggregateWindowedFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OverClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.OVER, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LR_BRACKET, 0);
    }
    public windowSpec(): WindowSpecContext | null {
        return this.getRuleContext(0, WindowSpecContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RR_BRACKET, 0);
    }
    public windowName(): WindowNameContext | null {
        return this.getRuleContext(0, WindowNameContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_overClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitOverClause) {
            return visitor.visitOverClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowName(): WindowNameContext | null {
        return this.getRuleContext(0, WindowNameContext);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public frameClause(): FrameClauseContext | null {
        return this.getRuleContext(0, FrameClauseContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_windowSpec;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowSpec) {
            return visitor.visitWindowSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_windowName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowName) {
            return visitor.visitWindowName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public frameUnits(): FrameUnitsContext {
        return this.getRuleContext(0, FrameUnitsContext)!;
    }
    public frameExtent(): FrameExtentContext {
        return this.getRuleContext(0, FrameExtentContext)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_frameClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrameClause) {
            return visitor.visitFrameClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameUnitsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROWS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RANGE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_frameUnits;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrameUnits) {
            return visitor.visitFrameUnits(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameExtentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public frameRange(): FrameRangeContext | null {
        return this.getRuleContext(0, FrameRangeContext);
    }
    public frameBetween(): FrameBetweenContext | null {
        return this.getRuleContext(0, FrameBetweenContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_frameExtent;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrameExtent) {
            return visitor.visitFrameExtent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBetweenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BETWEEN, 0)!;
    }
    public frameRange(): FrameRangeContext[];
    public frameRange(i: number): FrameRangeContext | null;
    public frameRange(i?: number): FrameRangeContext[] | FrameRangeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameRangeContext);
        }

        return this.getRuleContext(i, FrameRangeContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(MySqlParser.AND, 0)!;
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_frameBetween;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrameBetween) {
            return visitor.visitFrameBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameRangeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROW, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNBOUNDED, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOLLOWING, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_frameRange;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrameRange) {
            return visitor.visitFrameRange(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(MySqlParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BY, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_partitionClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionClause) {
            return visitor.visitPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScalarFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionNameBase(): FunctionNameBaseContext | null {
        return this.getRuleContext(0, FunctionNameBaseContext);
    }
    public ASCII(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASCII, 0);
    }
    public CURDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURDATE, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT_TIME, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
    }
    public CURTIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURTIME, 0);
    }
    public DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATE_ADD, 0);
    }
    public DATE_SUB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATE_SUB, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IF, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INSERT, 0);
    }
    public LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCALTIME, 0);
    }
    public LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCALTIMESTAMP, 0);
    }
    public MID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MID, 0);
    }
    public NOW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOW, 0);
    }
    public REPEAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPEAT, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLACE, 0);
    }
    public SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBSTR, 0);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBSTRING, 0);
    }
    public SYSDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SYSDATE, 0);
    }
    public TRIM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRIM, 0);
    }
    public UTC_DATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UTC_DATE, 0);
    }
    public UTC_TIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UTC_TIME, 0);
    }
    public UTC_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UTC_TIMESTAMP, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_scalarFunctionName;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitScalarFunctionName) {
            return visitor.visitScalarFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PasswordFunctionClauseContext extends antlr.ParserRuleContext {
    public _functionName?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public functionArg(): FunctionArgContext {
        return this.getRuleContext(0, FunctionArgContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PASSWORD, 0);
    }
    public OLD_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OLD_PASSWORD, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_passwordFunctionClause;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPasswordFunctionClause) {
            return visitor.visitPasswordFunctionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionArgsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public fullColumnName(): FullColumnNameContext[];
    public fullColumnName(i: number): FullColumnNameContext | null;
    public fullColumnName(i?: number): FullColumnNameContext[] | FullColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FullColumnNameContext);
        }

        return this.getRuleContext(i, FullColumnNameContext);
    }
    public functionCall(): FunctionCallContext[];
    public functionCall(i: number): FunctionCallContext | null;
    public functionCall(i?: number): FunctionCallContext[] | FunctionCallContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionCallContext);
        }

        return this.getRuleContext(i, FunctionCallContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_functionArgs;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionArgs) {
            return visitor.visitFunctionArgs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public fullColumnName(): FullColumnNameContext | null {
        return this.getRuleContext(0, FullColumnNameContext);
    }
    public functionCall(): FunctionCallContext | null {
        return this.getRuleContext(0, FunctionCallContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_functionArg;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionArg) {
            return visitor.visitFunctionArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_expression;
    }
    public override copyFrom(ctx: ExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class IsExpressionContext extends ExpressionContext {
    public _testValue?: Token | null;
    public constructor(ctx: ExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(0, PredicateContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IS, 0)!;
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FALSE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNKNOWN, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIsExpression) {
            return visitor.visitIsExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NotExpressionContext extends ExpressionContext {
    public _notOperator?: Token | null;
    public constructor(ctx: ExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public EXCLAMATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotExpression) {
            return visitor.visitNotExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalExpressionContext extends ExpressionContext {
    public constructor(ctx: ExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public logicalOperator(): LogicalOperatorContext {
        return this.getRuleContext(0, LogicalOperatorContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalExpression) {
            return visitor.visitLogicalExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicateExpressionContext extends ExpressionContext {
    public constructor(ctx: ExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(0, PredicateContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicateExpression) {
            return visitor.visitPredicateExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_predicate;
    }
    public override copyFrom(ctx: PredicateContext): void {
        super.copyFrom(ctx);
    }
}
export class SoundsLikePredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext[];
    public predicate(i: number): PredicateContext | null;
    public predicate(i?: number): PredicateContext[] | PredicateContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PredicateContext);
        }

        return this.getRuleContext(i, PredicateContext);
    }
    public SOUNDS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.SOUNDS, 0)!;
    }
    public LIKE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LIKE, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSoundsLikePredicate) {
            return visitor.visitSoundsLikePredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExpressionAtomPredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expressionAtom(): ExpressionAtomContext {
        return this.getRuleContext(0, ExpressionAtomContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionAtomPredicate) {
            return visitor.visitExpressionAtomPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubqueryComparisonPredicateContext extends PredicateContext {
    public _quantifier?: Token | null;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(0, PredicateContext)!;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ANY, 0);
    }
    public SOME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SOME, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryComparisonPredicate) {
            return visitor.visitSubqueryComparisonPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonMemberOfPredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext[];
    public predicate(i: number): PredicateContext | null;
    public predicate(i?: number): PredicateContext[] | PredicateContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PredicateContext);
        }

        return this.getRuleContext(i, PredicateContext);
    }
    public MEMBER(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MEMBER, 0)!;
    }
    public OF(): antlr.TerminalNode {
        return this.getToken(MySqlParser.OF, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitJsonMemberOfPredicate) {
            return visitor.visitJsonMemberOfPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BinaryComparisonPredicateContext extends PredicateContext {
    public _left?: PredicateContext;
    public _right?: PredicateContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public predicate(): PredicateContext[];
    public predicate(i: number): PredicateContext | null;
    public predicate(i?: number): PredicateContext[] | PredicateContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PredicateContext);
        }

        return this.getRuleContext(i, PredicateContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitBinaryComparisonPredicate) {
            return visitor.visitBinaryComparisonPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InPredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(0, PredicateContext)!;
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IN, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public expressions(): ExpressionsContext | null {
        return this.getRuleContext(0, ExpressionsContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitInPredicate) {
            return visitor.visitInPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BetweenPredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext[];
    public predicate(i: number): PredicateContext | null;
    public predicate(i?: number): PredicateContext[] | PredicateContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PredicateContext);
        }

        return this.getRuleContext(i, PredicateContext);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BETWEEN, 0)!;
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(MySqlParser.AND, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitBetweenPredicate) {
            return visitor.visitBetweenPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IsNullPredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(0, PredicateContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.IS, 0)!;
    }
    public nullNotnull(): NullNotnullContext {
        return this.getRuleContext(0, NullNotnullContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIsNullPredicate) {
            return visitor.visitIsNullPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LikePredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext[];
    public predicate(i: number): PredicateContext | null;
    public predicate(i?: number): PredicateContext[] | PredicateContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PredicateContext);
        }

        return this.getRuleContext(i, PredicateContext);
    }
    public LIKE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LIKE, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ESCAPE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING_LITERAL, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLikePredicate) {
            return visitor.visitLikePredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RegexpPredicateContext extends PredicateContext {
    public _regex?: Token | null;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext[];
    public predicate(i: number): PredicateContext | null;
    public predicate(i?: number): PredicateContext[] | PredicateContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PredicateContext);
        }

        return this.getRuleContext(i, PredicateContext);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REGEXP, 0);
    }
    public RLIKE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RLIKE, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitRegexpPredicate) {
            return visitor.visitRegexpPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionAtomContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_expressionAtom;
    }
    public override copyFrom(ctx: ExpressionAtomContext): void {
        super.copyFrom(ctx);
    }
}
export class UnaryExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public unaryOperator(): UnaryOperatorContext {
        return this.getRuleContext(0, UnaryOperatorContext)!;
    }
    public expressionAtom(): ExpressionAtomContext {
        return this.getRuleContext(0, ExpressionAtomContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnaryExpressionAtom) {
            return visitor.visitUnaryExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CollateExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expressionAtom(): ExpressionAtomContext {
        return this.getRuleContext(0, ExpressionAtomContext)!;
    }
    public COLLATE(): antlr.TerminalNode {
        return this.getToken(MySqlParser.COLLATE, 0)!;
    }
    public collationName(): CollationNameContext {
        return this.getRuleContext(0, CollationNameContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCollateExpressionAtom) {
            return visitor.visitCollateExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class VariableAssignExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOCAL_ID(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LOCAL_ID, 0)!;
    }
    public VAR_ASSIGN(): antlr.TerminalNode {
        return this.getToken(MySqlParser.VAR_ASSIGN, 0)!;
    }
    public expressionAtom(): ExpressionAtomContext {
        return this.getRuleContext(0, ExpressionAtomContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableAssignExpressionAtom) {
            return visitor.visitVariableAssignExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public mysqlVariable(): MysqlVariableContext {
        return this.getRuleContext(0, MysqlVariableContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMysqlVariableExpressionAtom) {
            return visitor.visitMysqlVariableExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NestedExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitNestedExpressionAtom) {
            return visitor.visitNestedExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NestedRowExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROW(): antlr.TerminalNode {
        return this.getToken(MySqlParser.ROW, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.COMMA);
    	} else {
    		return this.getToken(MySqlParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitNestedRowExpressionAtom) {
            return visitor.visitNestedRowExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MathExpressionAtomContext extends ExpressionAtomContext {
    public _left?: ExpressionAtomContext;
    public _right?: ExpressionAtomContext;
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public multOperator(): MultOperatorContext | null {
        return this.getRuleContext(0, MultOperatorContext);
    }
    public expressionAtom(): ExpressionAtomContext[];
    public expressionAtom(i: number): ExpressionAtomContext | null;
    public expressionAtom(i?: number): ExpressionAtomContext[] | ExpressionAtomContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionAtomContext);
        }

        return this.getRuleContext(i, ExpressionAtomContext);
    }
    public addOperator(): AddOperatorContext | null {
        return this.getRuleContext(0, AddOperatorContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMathExpressionAtom) {
            return visitor.visitMathExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.EXISTS, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitExistsExpressionAtom) {
            return visitor.visitExistsExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(MySqlParser.INTERVAL, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public intervalType(): IntervalTypeContext {
        return this.getRuleContext(0, IntervalTypeContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalExpressionAtom) {
            return visitor.visitIntervalExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonExpressionAtomContext extends ExpressionAtomContext {
    public _left?: ExpressionAtomContext;
    public _right?: ExpressionAtomContext;
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public jsonOperator(): JsonOperatorContext {
        return this.getRuleContext(0, JsonOperatorContext)!;
    }
    public expressionAtom(): ExpressionAtomContext[];
    public expressionAtom(i: number): ExpressionAtomContext | null;
    public expressionAtom(i?: number): ExpressionAtomContext[] | ExpressionAtomContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionAtomContext);
        }

        return this.getRuleContext(i, ExpressionAtomContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitJsonExpressionAtom) {
            return visitor.visitJsonExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubqueryExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.LR_BRACKET, 0)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(MySqlParser.RR_BRACKET, 0)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryExpressionAtom) {
            return visitor.visitSubqueryExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConstantExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public constant(): ConstantContext {
        return this.getRuleContext(0, ConstantContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstantExpressionAtom) {
            return visitor.visitConstantExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionCall(): FunctionCallContext {
        return this.getRuleContext(0, FunctionCallContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionCallExpressionAtom) {
            return visitor.visitFunctionCallExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BinaryExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BINARY(): antlr.TerminalNode {
        return this.getToken(MySqlParser.BINARY, 0)!;
    }
    public expressionAtom(): ExpressionAtomContext {
        return this.getRuleContext(0, ExpressionAtomContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitBinaryExpressionAtom) {
            return visitor.visitBinaryExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fullColumnName(): FullColumnNameContext {
        return this.getRuleContext(0, FullColumnNameContext)!;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFullColumnNameExpressionAtom) {
            return visitor.visitFullColumnNameExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BitExpressionAtomContext extends ExpressionAtomContext {
    public _left?: ExpressionAtomContext;
    public _right?: ExpressionAtomContext;
    public constructor(ctx: ExpressionAtomContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public bitOperator(): BitOperatorContext {
        return this.getRuleContext(0, BitOperatorContext)!;
    }
    public expressionAtom(): ExpressionAtomContext[];
    public expressionAtom(i: number): ExpressionAtomContext | null;
    public expressionAtom(i?: number): ExpressionAtomContext[] | ExpressionAtomContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionAtomContext);
        }

        return this.getRuleContext(i, ExpressionAtomContext);
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitBitExpressionAtom) {
            return visitor.visitBitExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnaryOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCLAMATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
    }
    public BIT_NOT_OP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_NOT_OP, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MINUS, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_unaryOperator;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnaryOperator) {
            return visitor.visitUnaryOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
    }
    public GREATER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
    }
    public LESS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LESS_SYMBOL, 0);
    }
    public EXCLAMATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_comparisonOperator;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogicalOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AND, 0);
    }
    public BIT_AND_OP(): antlr.TerminalNode[];
    public BIT_AND_OP(i: number): antlr.TerminalNode | null;
    public BIT_AND_OP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.BIT_AND_OP);
    	} else {
    		return this.getToken(MySqlParser.BIT_AND_OP, i);
    	}
    }
    public XOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.XOR, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OR, 0);
    }
    public BIT_OR_OP(): antlr.TerminalNode[];
    public BIT_OR_OP(i: number): antlr.TerminalNode | null;
    public BIT_OR_OP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.BIT_OR_OP);
    	} else {
    		return this.getToken(MySqlParser.BIT_OR_OP, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_logicalOperator;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalOperator) {
            return visitor.visitLogicalOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BitOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LESS_SYMBOL(): antlr.TerminalNode[];
    public LESS_SYMBOL(i: number): antlr.TerminalNode | null;
    public LESS_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.LESS_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.LESS_SYMBOL, i);
    	}
    }
    public GREATER_SYMBOL(): antlr.TerminalNode[];
    public GREATER_SYMBOL(i: number): antlr.TerminalNode | null;
    public GREATER_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.GREATER_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.GREATER_SYMBOL, i);
    	}
    }
    public BIT_AND_OP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_AND_OP, 0);
    }
    public BIT_XOR_OP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_XOR_OP, 0);
    }
    public BIT_OR_OP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_OR_OP, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_bitOperator;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitBitOperator) {
            return visitor.visitBitOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STAR, 0);
    }
    public DIVIDE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DIVIDE, 0);
    }
    public MODULE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MODULE, 0);
    }
    public DIV(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DIV, 0);
    }
    public MOD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MOD, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_multOperator;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultOperator) {
            return visitor.visitMultOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AddOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_addOperator;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitAddOperator) {
            return visitor.visitAddOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS(): antlr.TerminalNode {
        return this.getToken(MySqlParser.MINUS, 0)!;
    }
    public GREATER_SYMBOL(): antlr.TerminalNode[];
    public GREATER_SYMBOL(i: number): antlr.TerminalNode | null;
    public GREATER_SYMBOL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MySqlParser.GREATER_SYMBOL);
    	} else {
    		return this.getToken(MySqlParser.GREATER_SYMBOL, i);
    	}
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_jsonOperator;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitJsonOperator) {
            return visitor.visitJsonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharsetNameBaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARMSCII8(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ARMSCII8, 0);
    }
    public ASCII(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASCII, 0);
    }
    public BIG5(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIG5, 0);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINARY, 0);
    }
    public CP1250(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CP1250, 0);
    }
    public CP1251(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CP1251, 0);
    }
    public CP1256(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CP1256, 0);
    }
    public CP1257(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CP1257, 0);
    }
    public CP850(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CP850, 0);
    }
    public CP852(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CP852, 0);
    }
    public CP866(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CP866, 0);
    }
    public CP932(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CP932, 0);
    }
    public DEC8(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEC8, 0);
    }
    public EUCJPMS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EUCJPMS, 0);
    }
    public EUCKR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EUCKR, 0);
    }
    public GB18030(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GB18030, 0);
    }
    public GB2312(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GB2312, 0);
    }
    public GBK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GBK, 0);
    }
    public GEOSTD8(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOSTD8, 0);
    }
    public GREEK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GREEK, 0);
    }
    public HEBREW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HEBREW, 0);
    }
    public HP8(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HP8, 0);
    }
    public KEYBCS2(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEYBCS2, 0);
    }
    public KOI8R(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KOI8R, 0);
    }
    public KOI8U(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KOI8U, 0);
    }
    public LATIN1(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LATIN1, 0);
    }
    public LATIN2(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LATIN2, 0);
    }
    public LATIN5(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LATIN5, 0);
    }
    public LATIN7(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LATIN7, 0);
    }
    public MACCE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MACCE, 0);
    }
    public MACROMAN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MACROMAN, 0);
    }
    public SJIS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SJIS, 0);
    }
    public SWE7(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SWE7, 0);
    }
    public TIS620(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIS620, 0);
    }
    public UCS2(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UCS2, 0);
    }
    public UJIS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UJIS, 0);
    }
    public UTF16(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UTF16, 0);
    }
    public UTF16LE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UTF16LE, 0);
    }
    public UTF32(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UTF32, 0);
    }
    public UTF8(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UTF8, 0);
    }
    public UTF8MB3(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UTF8MB3, 0);
    }
    public UTF8MB4(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UTF8MB4, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_charsetNameBase;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitCharsetNameBase) {
            return visitor.visitCharsetNameBase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionLevelBaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPEATABLE, 0);
    }
    public COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMITTED, 0);
    }
    public UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNCOMMITTED, 0);
    }
    public SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SERIALIZABLE, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_transactionLevelBase;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionLevelBase) {
            return visitor.visitTransactionLevelBase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegesBaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLES, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROUTINE, 0);
    }
    public EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXECUTE, 0);
    }
    public FILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FILE, 0);
    }
    public PROCESS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROCESS, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELOAD, 0);
    }
    public SHUTDOWN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHUTDOWN, 0);
    }
    public SUPER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUPER, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRIVILEGES, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_privilegesBase;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegesBase) {
            return visitor.visitPrivilegesBase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalTypeBaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUARTER, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MONTH, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DAY, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HOUR, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MINUTE, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WEEK, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SECOND, 0);
    }
    public MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MICROSECOND, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_intervalTypeBase;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalTypeBase) {
            return visitor.visitIntervalTypeBase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeBaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATE, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIME, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIMESTAMP, 0);
    }
    public DATETIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATETIME, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.YEAR, 0);
    }
    public ENUM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENUM, 0);
    }
    public TEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TEXT, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_dataTypeBase;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitDataTypeBase) {
            return visitor.visitDataTypeBase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordsCanBeIdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCOUNT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ACCOUNT, 0);
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ACTION, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ADMIN, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AFTER, 0);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AGGREGATE, 0);
    }
    public ALGORITHM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ALGORITHM, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ANY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ARRAY, 0);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AT, 0);
    }
    public AUDIT_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUDIT_ADMIN, 0);
    }
    public AUDIT_ABORT_EXEMPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUDIT_ABORT_EXEMPT, 0);
    }
    public AUTHORS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUTHORS, 0);
    }
    public AUTOCOMMIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUTOCOMMIT, 0);
    }
    public AUTOEXTEND_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
    }
    public AUTO_INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
    }
    public AUTHENTICATION_POLICY_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AUTHENTICATION_POLICY_ADMIN, 0);
    }
    public AVG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AVG, 0);
    }
    public AVG_ROW_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0);
    }
    public ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ATTRIBUTE, 0);
    }
    public BACKUP_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BACKUP_ADMIN, 0);
    }
    public BEGIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BEGIN, 0);
    }
    public BINLOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINLOG, 0);
    }
    public BINLOG_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINLOG_ADMIN, 0);
    }
    public BINLOG_ENCRYPTION_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0);
    }
    public BIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT, 0);
    }
    public BIT_AND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_AND, 0);
    }
    public BIT_OR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_OR, 0);
    }
    public BIT_XOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_XOR, 0);
    }
    public BLOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BLOCK, 0);
    }
    public BOOL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BOOL, 0);
    }
    public BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BOOLEAN, 0);
    }
    public BTREE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BTREE, 0);
    }
    public BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BUCKETS, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CACHE, 0);
    }
    public CASCADED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CASCADED, 0);
    }
    public CHAIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHAIN, 0);
    }
    public CHANGED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHANGED, 0);
    }
    public CHANNEL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHANNEL, 0);
    }
    public CHECKSUM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHECKSUM, 0);
    }
    public PAGE_CHECKSUM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PAGE_CHECKSUM, 0);
    }
    public CATALOG_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CATALOG_NAME, 0);
    }
    public CIPHER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CIPHER, 0);
    }
    public CLASS_ORIGIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
    }
    public CLIENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CLIENT, 0);
    }
    public CLONE_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CLONE_ADMIN, 0);
    }
    public CLOSE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CLOSE, 0);
    }
    public CLUSTERING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CLUSTERING, 0);
    }
    public COALESCE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COALESCE, 0);
    }
    public CODE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CODE, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMNS, 0);
    }
    public COLUMN_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN_FORMAT, 0);
    }
    public COLUMN_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLUMN_NAME, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMENT, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMMIT, 0);
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMPACT, 0);
    }
    public COMPLETION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMPLETION, 0);
    }
    public COMPRESSED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMPRESSED, 0);
    }
    public COMPRESSION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMPRESSION, 0);
    }
    public CONCURRENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONCURRENT, 0);
    }
    public CONDITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONDITION, 0);
    }
    public CONNECT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONNECT, 0);
    }
    public CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONNECTION, 0);
    }
    public CONNECTION_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONNECTION_ADMIN, 0);
    }
    public CONSISTENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSISTENT, 0);
    }
    public CONSTRAINT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
    }
    public CONSTRAINT_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
    }
    public CONSTRAINT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
    }
    public CONTAINS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONTAINS, 0);
    }
    public CONTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONTEXT, 0);
    }
    public CONTRIBUTORS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONTRIBUTORS, 0);
    }
    public COPY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COPY, 0);
    }
    public COUNT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COUNT, 0);
    }
    public CPU(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CPU, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT, 0);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURRENT_USER, 0);
    }
    public CURSOR_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CURSOR_NAME, 0);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATA, 0);
    }
    public DATAFILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATAFILE, 0);
    }
    public DEALLOCATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEALLOCATE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT, 0);
    }
    public DEFAULT_AUTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFAULT_AUTH, 0);
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEFINER, 0);
    }
    public DELAY_KEY_WRITE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0);
    }
    public DES_KEY_FILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DES_KEY_FILE, 0);
    }
    public DIAGNOSTICS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DIAGNOSTICS, 0);
    }
    public DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DIRECTORY, 0);
    }
    public DISABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISABLE, 0);
    }
    public DISCARD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISCARD, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISK, 0);
    }
    public DO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DO, 0);
    }
    public DUMPFILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DUMPFILE, 0);
    }
    public DUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DUPLICATE, 0);
    }
    public DYNAMIC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DYNAMIC, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EMPTY, 0);
    }
    public ENABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENABLE, 0);
    }
    public ENCRYPTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENCRYPTION, 0);
    }
    public ENCRYPTION_KEY_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.END, 0);
    }
    public ENDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENDS, 0);
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENGINE, 0);
    }
    public ENGINE_ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0);
    }
    public ENGINES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENGINES, 0);
    }
    public ENFORCED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENFORCED, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ERROR, 0);
    }
    public ERRORS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ERRORS, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ESCAPE, 0);
    }
    public EUR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EUR, 0);
    }
    public EVEN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EVEN, 0);
    }
    public EVENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EVENT, 0);
    }
    public EVENTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EVENTS, 0);
    }
    public EVERY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EVERY, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXCEPT, 0);
    }
    public EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXCHANGE, 0);
    }
    public EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXCLUSIVE, 0);
    }
    public EXPIRE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXPIRE, 0);
    }
    public EXPORT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXPORT, 0);
    }
    public EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXTENDED, 0);
    }
    public EXTENT_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXTENT_SIZE, 0);
    }
    public FAILED_LOGIN_ATTEMPTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0);
    }
    public FAST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FAST, 0);
    }
    public FAULTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FAULTS, 0);
    }
    public FIELDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIELDS, 0);
    }
    public FILE_BLOCK_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FILE_BLOCK_SIZE, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FILTER, 0);
    }
    public FIREWALL_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIREWALL_ADMIN, 0);
    }
    public FIREWALL_EXEMPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIREWALL_EXEMPT, 0);
    }
    public FIREWALL_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIREWALL_USER, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIRST, 0);
    }
    public FIXED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIXED, 0);
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FLUSH, 0);
    }
    public FOLLOWS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOLLOWS, 0);
    }
    public FOUND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOUND, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FULL, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FUNCTION, 0);
    }
    public GENERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GENERAL, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GLOBAL, 0);
    }
    public GRANTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GRANTS, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GROUP, 0);
    }
    public GROUP_CONCAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GROUP_CONCAT, 0);
    }
    public GROUP_REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
    }
    public GROUP_REPLICATION_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0);
    }
    public HANDLER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HANDLER, 0);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HASH, 0);
    }
    public HELP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HELP, 0);
    }
    public HISTORY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HISTORY, 0);
    }
    public HOST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HOST, 0);
    }
    public HOSTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HOSTS, 0);
    }
    public IDENTIFIED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IDENTIFIED, 0);
    }
    public IGNORED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IGNORED, 0);
    }
    public IGNORE_SERVER_IDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0);
    }
    public IMPORT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IMPORT, 0);
    }
    public INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INDEXES, 0);
    }
    public INITIAL_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INITIAL_SIZE, 0);
    }
    public INNODB_REDO_LOG_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0);
    }
    public INPLACE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INPLACE, 0);
    }
    public INSERT_METHOD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INSERT_METHOD, 0);
    }
    public INSTALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INSTALL, 0);
    }
    public INSTANCE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INSTANCE, 0);
    }
    public INSTANT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INSTANT, 0);
    }
    public INTERNAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INTERNAL, 0);
    }
    public INVOKE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INVOKE, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INVOKER, 0);
    }
    public IO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IO, 0);
    }
    public IO_THREAD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IO_THREAD, 0);
    }
    public IPC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IPC, 0);
    }
    public ISO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ISO, 0);
    }
    public ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ISOLATION, 0);
    }
    public ISSUER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ISSUER, 0);
    }
    public JIS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JIS, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON, 0);
    }
    public KEY_BLOCK_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
    }
    public LAMBDA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LAMBDA, 0);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LANGUAGE, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LAST, 0);
    }
    public LATERAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LATERAL, 0);
    }
    public LEAVES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LEAVES, 0);
    }
    public LESS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LESS, 0);
    }
    public LEVEL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LEVEL, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LIST, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCAL, 0);
    }
    public LOGFILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOGFILE, 0);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOGS, 0);
    }
    public MASTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER, 0);
    }
    public MASTER_AUTO_POSITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_AUTO_POSITION, 0);
    }
    public MASTER_CONNECT_RETRY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0);
    }
    public MASTER_DELAY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_DELAY, 0);
    }
    public MASTER_HEARTBEAT_PERIOD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0);
    }
    public MASTER_HOST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_HOST, 0);
    }
    public MASTER_LOG_FILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
    }
    public MASTER_LOG_POS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
    }
    public MASTER_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_PASSWORD, 0);
    }
    public MASTER_PORT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_PORT, 0);
    }
    public MASTER_RETRY_COUNT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_RETRY_COUNT, 0);
    }
    public MASTER_SSL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL, 0);
    }
    public MASTER_SSL_CA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CA, 0);
    }
    public MASTER_SSL_CAPATH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CAPATH, 0);
    }
    public MASTER_SSL_CERT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CERT, 0);
    }
    public MASTER_SSL_CIPHER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CIPHER, 0);
    }
    public MASTER_SSL_CRL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CRL, 0);
    }
    public MASTER_SSL_CRLPATH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0);
    }
    public MASTER_SSL_KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_SSL_KEY, 0);
    }
    public MASTER_TLS_VERSION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_TLS_VERSION, 0);
    }
    public MASTER_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_USER, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0);
    }
    public MAX_QUERIES_PER_HOUR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX, 0);
    }
    public MAX_ROWS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX_ROWS, 0);
    }
    public MAX_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX_SIZE, 0);
    }
    public MAX_UPDATES_PER_HOUR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0);
    }
    public MAX_USER_CONNECTIONS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0);
    }
    public MEDIUM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MEDIUM, 0);
    }
    public MEMBER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MEMBER, 0);
    }
    public MEMORY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MEMORY, 0);
    }
    public MERGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MERGE, 0);
    }
    public MESSAGE_TEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
    }
    public MID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MID, 0);
    }
    public MIGRATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MIGRATE, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MIN, 0);
    }
    public MIN_ROWS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MIN_ROWS, 0);
    }
    public MODE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MODE, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MODIFY, 0);
    }
    public MUTEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MUTEX, 0);
    }
    public MYSQL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MYSQL, 0);
    }
    public MYSQL_ERRNO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
    }
    public NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NAME, 0);
    }
    public NAMES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NAMES, 0);
    }
    public NCHAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NCHAR, 0);
    }
    public NDB_STORED_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NDB_STORED_USER, 0);
    }
    public NESTED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NESTED, 0);
    }
    public NEVER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NEVER, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NEXT, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NO, 0);
    }
    public NOCOPY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOCOPY, 0);
    }
    public NODEGROUP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NODEGROUP, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NONE, 0);
    }
    public NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NOWAIT, 0);
    }
    public NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NUMBER, 0);
    }
    public ODBC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ODBC, 0);
    }
    public OFFLINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OFFLINE, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OFFSET, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OF, 0);
    }
    public OJ(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OJ, 0);
    }
    public OLD_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OLD_PASSWORD, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONE, 0);
    }
    public ONLINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONLINE, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ONLY, 0);
    }
    public OPEN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OPEN, 0);
    }
    public OPTIMIZER_COSTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OPTIMIZER_COSTS, 0);
    }
    public OPTIONAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OPTIONAL, 0);
    }
    public OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OPTIONS, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ORDER, 0);
    }
    public ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ORDINALITY, 0);
    }
    public OWNER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OWNER, 0);
    }
    public PACK_KEYS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PACK_KEYS, 0);
    }
    public PAGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PAGE, 0);
    }
    public PARSER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARSER, 0);
    }
    public PARTIAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTIAL, 0);
    }
    public PARTITIONING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTITIONING, 0);
    }
    public PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PARTITIONS, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PASSWORD, 0);
    }
    public PASSWORDLESS_USER_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0);
    }
    public PASSWORD_LOCK_TIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PASSWORD_LOCK_TIME, 0);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PATH, 0);
    }
    public PERSIST_RO_VARIABLES_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0);
    }
    public PHASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PHASE, 0);
    }
    public PLUGINS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PLUGINS, 0);
    }
    public PLUGIN_DIR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PLUGIN_DIR, 0);
    }
    public PLUGIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PLUGIN, 0);
    }
    public PORT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PORT, 0);
    }
    public PRECEDES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRECEDES, 0);
    }
    public PREPARE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PREPARE, 0);
    }
    public PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRESERVE, 0);
    }
    public PREV(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PREV, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PRIMARY, 0);
    }
    public PROCESSLIST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROCESSLIST, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROFILE, 0);
    }
    public PROFILES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROFILES, 0);
    }
    public PROXY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PROXY, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUERY, 0);
    }
    public QUICK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUICK, 0);
    }
    public REBUILD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REBUILD, 0);
    }
    public RECOVER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RECOVER, 0);
    }
    public RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RECURSIVE, 0);
    }
    public REDO_BUFFER_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REDO_BUFFER_SIZE, 0);
    }
    public REDUNDANT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REDUNDANT, 0);
    }
    public RELAY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELAY, 0);
    }
    public RELAYLOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELAYLOG, 0);
    }
    public RELAY_LOG_FILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
    }
    public RELAY_LOG_POS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REMOVE, 0);
    }
    public REORGANIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REORGANIZE, 0);
    }
    public REPAIR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPAIR, 0);
    }
    public REPLICATE_DO_DB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATE_DO_DB, 0);
    }
    public REPLICATE_DO_TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0);
    }
    public REPLICATE_IGNORE_DB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0);
    }
    public REPLICATE_IGNORE_TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0);
    }
    public REPLICATE_REWRITE_DB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0);
    }
    public REPLICATE_WILD_DO_TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0);
    }
    public REPLICATE_WILD_IGNORE_TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATION, 0);
    }
    public REPLICATION_APPLIER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATION_APPLIER, 0);
    }
    public REPLICATION_SLAVE_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RESET, 0);
    }
    public RESOURCE_GROUP_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0);
    }
    public RESOURCE_GROUP_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RESOURCE_GROUP_USER, 0);
    }
    public RESUME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RESUME, 0);
    }
    public RETURNED_SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RETURNED_SQLSTATE, 0);
    }
    public RETURNS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RETURNS, 0);
    }
    public REUSE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REUSE, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROLE, 0);
    }
    public ROLE_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROLE_ADMIN, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROLLBACK, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROLLUP, 0);
    }
    public ROTATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROTATE, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROW, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROWS, 0);
    }
    public ROW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROW_FORMAT, 0);
    }
    public RTREE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RTREE, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.S3, 0);
    }
    public SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SAVEPOINT, 0);
    }
    public SCHEDULE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEDULE, 0);
    }
    public SCHEMA_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEMA_NAME, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SECURITY, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0);
    }
    public SERIAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SERIAL, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SERVER, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SESSION, 0);
    }
    public SESSION_VARIABLES_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
    }
    public SET_USER_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SET_USER_ID, 0);
    }
    public SHARE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHARE, 0);
    }
    public SHARED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHARED, 0);
    }
    public SHOW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHOW_ROUTINE, 0);
    }
    public SIGNED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SIGNED, 0);
    }
    public SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SIMPLE, 0);
    }
    public SLAVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SLAVE, 0);
    }
    public SLOW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SLOW, 0);
    }
    public SKIP_QUERY_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SKIP_QUERY_REWRITE, 0);
    }
    public SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SNAPSHOT, 0);
    }
    public SOCKET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SOCKET, 0);
    }
    public SOME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SOME, 0);
    }
    public SONAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SONAME, 0);
    }
    public SOUNDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SOUNDS, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SOURCE, 0);
    }
    public SQL_AFTER_GTIDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_AFTER_GTIDS, 0);
    }
    public SQL_AFTER_MTS_GAPS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0);
    }
    public SQL_BEFORE_GTIDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0);
    }
    public SQL_BUFFER_RESULT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_BUFFER_RESULT, 0);
    }
    public SQL_CACHE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_CACHE, 0);
    }
    public SQL_NO_CACHE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_NO_CACHE, 0);
    }
    public SQL_THREAD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_THREAD, 0);
    }
    public STACKED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STACKED, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.START, 0);
    }
    public STARTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STARTS, 0);
    }
    public STATS_AUTO_RECALC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0);
    }
    public STATS_PERSISTENT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STATS_PERSISTENT, 0);
    }
    public STATS_SAMPLE_PAGES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0);
    }
    public STATUS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STATUS, 0);
    }
    public STD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STD, 0);
    }
    public STDDEV(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STDDEV, 0);
    }
    public STDDEV_POP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STDDEV_POP, 0);
    }
    public STDDEV_SAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STDDEV_SAMP, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STOP, 0);
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STORAGE, 0);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRING, 0);
    }
    public SUBCLASS_ORIGIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
    }
    public SUBJECT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBJECT, 0);
    }
    public SUBPARTITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBPARTITION, 0);
    }
    public SUBPARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBPARTITIONS, 0);
    }
    public SUM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUM, 0);
    }
    public SUSPEND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUSPEND, 0);
    }
    public SWAPS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SWAPS, 0);
    }
    public SWITCHES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SWITCHES, 0);
    }
    public SYSTEM_VARIABLES_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0);
    }
    public TABLE_NAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE_NAME, 0);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLESPACE, 0);
    }
    public TABLE_ENCRYPTION_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0);
    }
    public TABLE_TYPE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TABLE_TYPE, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TEMPORARY, 0);
    }
    public TEMPTABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TEMPTABLE, 0);
    }
    public THAN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.THAN, 0);
    }
    public TP_CONNECTION_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TP_CONNECTION_ADMIN, 0);
    }
    public TRADITIONAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRADITIONAL, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRANSACTION, 0);
    }
    public TRANSACTIONAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRANSACTIONAL, 0);
    }
    public TRIGGERS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRIGGERS, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TRUNCATE, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNBOUNDED, 0);
    }
    public UNDEFINED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNDEFINED, 0);
    }
    public UNDOFILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNDOFILE, 0);
    }
    public UNDO_BUFFER_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0);
    }
    public UNINSTALL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNINSTALL, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNKNOWN, 0);
    }
    public UNTIL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNTIL, 0);
    }
    public UPGRADE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPGRADE, 0);
    }
    public USA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USA, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USER, 0);
    }
    public USE_FRM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USE_FRM, 0);
    }
    public USER_RESOURCES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.USER_RESOURCES, 0);
    }
    public VALIDATION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VALIDATION, 0);
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VALUE, 0);
    }
    public VAR_POP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VAR_POP, 0);
    }
    public VAR_SAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VAR_SAMP, 0);
    }
    public VARIABLES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VARIABLES, 0);
    }
    public VARIANCE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VARIANCE, 0);
    }
    public VERSION_TOKEN_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VIEW, 0);
    }
    public VIRTUAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VIRTUAL, 0);
    }
    public WAIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WAIT, 0);
    }
    public WARNINGS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WARNINGS, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITHOUT, 0);
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WORK, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WRAPPER, 0);
    }
    public X509(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.X509, 0);
    }
    public XA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.XA, 0);
    }
    public XA_RECOVER_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.XA_RECOVER_ADMIN, 0);
    }
    public XML(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.XML, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_keywordsCanBeId;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeywordsCanBeId) {
            return visitor.visitKeywordsCanBeId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameBaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ABS, 0);
    }
    public ACOS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ACOS, 0);
    }
    public ADDDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ADDDATE, 0);
    }
    public ADDTIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ADDTIME, 0);
    }
    public AES_DECRYPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AES_DECRYPT, 0);
    }
    public AES_ENCRYPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AES_ENCRYPT, 0);
    }
    public AREA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.AREA, 0);
    }
    public ASBINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASBINARY, 0);
    }
    public ASIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASIN, 0);
    }
    public ASTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASTEXT, 0);
    }
    public ASWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASWKB, 0);
    }
    public ASWKT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASWKT, 0);
    }
    public ASYMMETRIC_DECRYPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0);
    }
    public ASYMMETRIC_DERIVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASYMMETRIC_DERIVE, 0);
    }
    public ASYMMETRIC_ENCRYPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0);
    }
    public ASYMMETRIC_SIGN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASYMMETRIC_SIGN, 0);
    }
    public ASYMMETRIC_VERIFY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ASYMMETRIC_VERIFY, 0);
    }
    public ATAN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ATAN, 0);
    }
    public ATAN2(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ATAN2, 0);
    }
    public BENCHMARK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BENCHMARK, 0);
    }
    public BIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIN, 0);
    }
    public BIT_COUNT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_COUNT, 0);
    }
    public BIT_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BIT_LENGTH, 0);
    }
    public BUFFER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.BUFFER, 0);
    }
    public CEIL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CEIL, 0);
    }
    public CEILING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CEILING, 0);
    }
    public CENTROID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CENTROID, 0);
    }
    public CHARACTER_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARACTER_LENGTH, 0);
    }
    public CHARSET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHARSET, 0);
    }
    public CHAR_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CHAR_LENGTH, 0);
    }
    public COERCIBILITY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COERCIBILITY, 0);
    }
    public COLLATION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COLLATION, 0);
    }
    public COMPRESS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COMPRESS, 0);
    }
    public CONCAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONCAT, 0);
    }
    public CONCAT_WS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONCAT_WS, 0);
    }
    public CONNECTION_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONNECTION_ID, 0);
    }
    public CONV(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONV, 0);
    }
    public CONVERT_TZ(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CONVERT_TZ, 0);
    }
    public COS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COS, 0);
    }
    public COT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COT, 0);
    }
    public COUNT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.COUNT, 0);
    }
    public CRC32(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CRC32, 0);
    }
    public CREATE_ASYMMETRIC_PRIV_KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0);
    }
    public CREATE_ASYMMETRIC_PUB_KEY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0);
    }
    public CREATE_DH_PARAMETERS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CREATE_DH_PARAMETERS, 0);
    }
    public CREATE_DIGEST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CREATE_DIGEST, 0);
    }
    public CROSSES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CROSSES, 0);
    }
    public CUME_DIST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.CUME_DIST, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATABASE, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATE, 0);
    }
    public DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATEDIFF, 0);
    }
    public DATE_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DATE_FORMAT, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DAY, 0);
    }
    public DAYNAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DAYNAME, 0);
    }
    public DAYOFMONTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DAYOFMONTH, 0);
    }
    public DAYOFWEEK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DAYOFWEEK, 0);
    }
    public DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DAYOFYEAR, 0);
    }
    public DECODE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DECODE, 0);
    }
    public DEGREES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DEGREES, 0);
    }
    public DENSE_RANK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DENSE_RANK, 0);
    }
    public DES_DECRYPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DES_DECRYPT, 0);
    }
    public DES_ENCRYPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DES_ENCRYPT, 0);
    }
    public DIMENSION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DIMENSION, 0);
    }
    public DISJOINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.DISJOINT, 0);
    }
    public ELT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ELT, 0);
    }
    public ENCODE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENCODE, 0);
    }
    public ENCRYPT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENCRYPT, 0);
    }
    public ENDPOINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENDPOINT, 0);
    }
    public ENVELOPE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ENVELOPE, 0);
    }
    public EQUALS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EQUALS, 0);
    }
    public EXP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXP, 0);
    }
    public EXPORT_SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXPORT_SET, 0);
    }
    public EXTERIORRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXTERIORRING, 0);
    }
    public EXTRACTVALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.EXTRACTVALUE, 0);
    }
    public FIELD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIELD, 0);
    }
    public FIND_IN_SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIND_IN_SET, 0);
    }
    public FIRST_VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FIRST_VALUE, 0);
    }
    public FLOOR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FLOOR, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FORMAT, 0);
    }
    public FOUND_ROWS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FOUND_ROWS, 0);
    }
    public FROM_BASE64(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FROM_BASE64, 0);
    }
    public FROM_DAYS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FROM_DAYS, 0);
    }
    public FROM_UNIXTIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.FROM_UNIXTIME, 0);
    }
    public GEOMCOLLFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMCOLLFROMTEXT, 0);
    }
    public GEOMCOLLFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMCOLLFROMWKB, 0);
    }
    public GEOMETRYCOLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMETRYCOLLECTION, 0);
    }
    public GEOMETRYCOLLECTIONFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0);
    }
    public GEOMETRYCOLLECTIONFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0);
    }
    public GEOMETRYFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMETRYFROMTEXT, 0);
    }
    public GEOMETRYFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMETRYFROMWKB, 0);
    }
    public GEOMETRYN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMETRYN, 0);
    }
    public GEOMETRYTYPE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMETRYTYPE, 0);
    }
    public GEOMFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMFROMTEXT, 0);
    }
    public GEOMFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GEOMFROMWKB, 0);
    }
    public GET_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GET_FORMAT, 0);
    }
    public GET_LOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GET_LOCK, 0);
    }
    public GLENGTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GLENGTH, 0);
    }
    public GREATEST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GREATEST, 0);
    }
    public GTID_SUBSET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GTID_SUBSET, 0);
    }
    public GTID_SUBTRACT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.GTID_SUBTRACT, 0);
    }
    public HEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HEX, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.HOUR, 0);
    }
    public IFNULL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IFNULL, 0);
    }
    public INET6_ATON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INET6_ATON, 0);
    }
    public INET6_NTOA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INET6_NTOA, 0);
    }
    public INET_ATON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INET_ATON, 0);
    }
    public INET_NTOA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INET_NTOA, 0);
    }
    public INSTR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INSTR, 0);
    }
    public INTERIORRINGN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INTERIORRINGN, 0);
    }
    public INTERSECTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INTERSECTS, 0);
    }
    public INVISIBLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.INVISIBLE, 0);
    }
    public ISCLOSED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ISCLOSED, 0);
    }
    public ISEMPTY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ISEMPTY, 0);
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ISNULL, 0);
    }
    public ISSIMPLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ISSIMPLE, 0);
    }
    public IS_FREE_LOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IS_FREE_LOCK, 0);
    }
    public IS_IPV4(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IS_IPV4, 0);
    }
    public IS_IPV4_COMPAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IS_IPV4_COMPAT, 0);
    }
    public IS_IPV4_MAPPED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IS_IPV4_MAPPED, 0);
    }
    public IS_IPV6(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IS_IPV6, 0);
    }
    public IS_USED_LOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.IS_USED_LOCK, 0);
    }
    public LAG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LAG, 0);
    }
    public LAST_INSERT_ID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LAST_INSERT_ID, 0);
    }
    public LAST_VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LAST_VALUE, 0);
    }
    public LCASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LCASE, 0);
    }
    public LEAD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LEAD, 0);
    }
    public LEAST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LEAST, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LEFT, 0);
    }
    public LENGTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LENGTH, 0);
    }
    public LINEFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINEFROMTEXT, 0);
    }
    public LINEFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINEFROMWKB, 0);
    }
    public LINESTRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINESTRING, 0);
    }
    public LINESTRINGFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINESTRINGFROMTEXT, 0);
    }
    public LINESTRINGFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LINESTRINGFROMWKB, 0);
    }
    public LN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LN, 0);
    }
    public LOAD_FILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOAD_FILE, 0);
    }
    public LOCATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOCATE, 0);
    }
    public LOG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOG, 0);
    }
    public LOG10(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOG10, 0);
    }
    public LOG2(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOG2, 0);
    }
    public LOWER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LOWER, 0);
    }
    public LPAD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LPAD, 0);
    }
    public LTRIM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.LTRIM, 0);
    }
    public MAKEDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAKEDATE, 0);
    }
    public MAKETIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAKETIME, 0);
    }
    public MAKE_SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MAKE_SET, 0);
    }
    public MASTER_POS_WAIT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MASTER_POS_WAIT, 0);
    }
    public MBRCONTAINS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MBRCONTAINS, 0);
    }
    public MBRDISJOINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MBRDISJOINT, 0);
    }
    public MBREQUAL(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MBREQUAL, 0);
    }
    public MBRINTERSECTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MBRINTERSECTS, 0);
    }
    public MBROVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MBROVERLAPS, 0);
    }
    public MBRTOUCHES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MBRTOUCHES, 0);
    }
    public MBRWITHIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MBRWITHIN, 0);
    }
    public MD5(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MD5, 0);
    }
    public MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MICROSECOND, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MINUTE, 0);
    }
    public MLINEFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MLINEFROMTEXT, 0);
    }
    public MLINEFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MLINEFROMWKB, 0);
    }
    public MOD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MOD, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MONTH, 0);
    }
    public MONTHNAME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MONTHNAME, 0);
    }
    public MPOINTFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MPOINTFROMTEXT, 0);
    }
    public MPOINTFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MPOINTFROMWKB, 0);
    }
    public MPOLYFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MPOLYFROMTEXT, 0);
    }
    public MPOLYFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MPOLYFROMWKB, 0);
    }
    public MULTILINESTRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTILINESTRING, 0);
    }
    public MULTILINESTRINGFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0);
    }
    public MULTILINESTRINGFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0);
    }
    public MULTIPOINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTIPOINT, 0);
    }
    public MULTIPOINTFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTIPOINTFROMTEXT, 0);
    }
    public MULTIPOINTFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTIPOINTFROMWKB, 0);
    }
    public MULTIPOLYGON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTIPOLYGON, 0);
    }
    public MULTIPOLYGONFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0);
    }
    public MULTIPOLYGONFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0);
    }
    public NAME_CONST(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NAME_CONST, 0);
    }
    public NTH_VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NTH_VALUE, 0);
    }
    public NTILE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NTILE, 0);
    }
    public NULLIF(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NULLIF, 0);
    }
    public NUMGEOMETRIES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NUMGEOMETRIES, 0);
    }
    public NUMINTERIORRINGS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NUMINTERIORRINGS, 0);
    }
    public NUMPOINTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.NUMPOINTS, 0);
    }
    public OCT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OCT, 0);
    }
    public OCTET_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OCTET_LENGTH, 0);
    }
    public ORD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ORD, 0);
    }
    public OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.OVERLAPS, 0);
    }
    public PERCENT_RANK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PERCENT_RANK, 0);
    }
    public PERIOD_ADD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PERIOD_ADD, 0);
    }
    public PERIOD_DIFF(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PERIOD_DIFF, 0);
    }
    public PI(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.PI, 0);
    }
    public POINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POINT, 0);
    }
    public POINTFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POINTFROMTEXT, 0);
    }
    public POINTFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POINTFROMWKB, 0);
    }
    public POINTN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POINTN, 0);
    }
    public POLYFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POLYFROMTEXT, 0);
    }
    public POLYFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POLYFROMWKB, 0);
    }
    public POLYGON(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POLYGON, 0);
    }
    public POLYGONFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POLYGONFROMTEXT, 0);
    }
    public POLYGONFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POLYGONFROMWKB, 0);
    }
    public POSITION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POSITION, 0);
    }
    public POW(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POW, 0);
    }
    public POWER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.POWER, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUARTER, 0);
    }
    public QUOTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.QUOTE, 0);
    }
    public RADIANS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RADIANS, 0);
    }
    public RAND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RAND, 0);
    }
    public RANDOM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RANDOM, 0);
    }
    public RANK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RANK, 0);
    }
    public RANDOM_BYTES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RANDOM_BYTES, 0);
    }
    public RELEASE_LOCK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RELEASE_LOCK, 0);
    }
    public REVERSE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.REVERSE, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RIGHT, 0);
    }
    public ROUND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROUND, 0);
    }
    public ROW_COUNT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROW_COUNT, 0);
    }
    public ROW_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ROW_NUMBER, 0);
    }
    public RPAD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RPAD, 0);
    }
    public RTRIM(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.RTRIM, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SCHEMA, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SECOND, 0);
    }
    public SEC_TO_TIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SEC_TO_TIME, 0);
    }
    public SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SESSION_USER, 0);
    }
    public SESSION_VARIABLES_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
    }
    public SHA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHA, 0);
    }
    public SHA1(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHA1, 0);
    }
    public SHA2(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SHA2, 0);
    }
    public SIGN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SIGN, 0);
    }
    public SIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SIN, 0);
    }
    public SLEEP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SLEEP, 0);
    }
    public SOUNDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SOUNDEX, 0);
    }
    public SQL_THREAD_WAIT_AFTER_GTIDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0);
    }
    public SQRT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SQRT, 0);
    }
    public SRID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SRID, 0);
    }
    public STARTPOINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STARTPOINT, 0);
    }
    public STRCMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STRCMP, 0);
    }
    public STR_TO_DATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.STR_TO_DATE, 0);
    }
    public ST_AREA(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_AREA, 0);
    }
    public ST_ASBINARY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_ASBINARY, 0);
    }
    public ST_ASTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_ASTEXT, 0);
    }
    public ST_ASWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_ASWKB, 0);
    }
    public ST_ASWKT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_ASWKT, 0);
    }
    public ST_BUFFER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_BUFFER, 0);
    }
    public ST_CENTROID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_CENTROID, 0);
    }
    public ST_CONTAINS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_CONTAINS, 0);
    }
    public ST_CROSSES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_CROSSES, 0);
    }
    public ST_DIFFERENCE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_DIFFERENCE, 0);
    }
    public ST_DIMENSION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_DIMENSION, 0);
    }
    public ST_DISJOINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_DISJOINT, 0);
    }
    public ST_DISTANCE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_DISTANCE, 0);
    }
    public ST_ENDPOINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_ENDPOINT, 0);
    }
    public ST_ENVELOPE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_ENVELOPE, 0);
    }
    public ST_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_EQUALS, 0);
    }
    public ST_EXTERIORRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_EXTERIORRING, 0);
    }
    public ST_GEOMCOLLFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0);
    }
    public ST_GEOMCOLLFROMTXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0);
    }
    public ST_GEOMCOLLFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0);
    }
    public ST_GEOMETRYCOLLECTIONFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0);
    }
    public ST_GEOMETRYCOLLECTIONFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0);
    }
    public ST_GEOMETRYFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0);
    }
    public ST_GEOMETRYFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0);
    }
    public ST_GEOMETRYN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_GEOMETRYN, 0);
    }
    public ST_GEOMETRYTYPE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_GEOMETRYTYPE, 0);
    }
    public ST_GEOMFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_GEOMFROMTEXT, 0);
    }
    public ST_GEOMFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_GEOMFROMWKB, 0);
    }
    public ST_INTERIORRINGN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_INTERIORRINGN, 0);
    }
    public ST_INTERSECTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_INTERSECTION, 0);
    }
    public ST_INTERSECTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_INTERSECTS, 0);
    }
    public ST_ISCLOSED(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_ISCLOSED, 0);
    }
    public ST_ISEMPTY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_ISEMPTY, 0);
    }
    public ST_ISSIMPLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_ISSIMPLE, 0);
    }
    public ST_LINEFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_LINEFROMTEXT, 0);
    }
    public ST_LINEFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_LINEFROMWKB, 0);
    }
    public ST_LINESTRINGFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0);
    }
    public ST_LINESTRINGFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0);
    }
    public ST_NUMGEOMETRIES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_NUMGEOMETRIES, 0);
    }
    public ST_NUMINTERIORRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_NUMINTERIORRING, 0);
    }
    public ST_NUMINTERIORRINGS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_NUMINTERIORRINGS, 0);
    }
    public ST_NUMPOINTS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_NUMPOINTS, 0);
    }
    public ST_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_OVERLAPS, 0);
    }
    public ST_POINTFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_POINTFROMTEXT, 0);
    }
    public ST_POINTFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_POINTFROMWKB, 0);
    }
    public ST_POINTN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_POINTN, 0);
    }
    public ST_POLYFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_POLYFROMTEXT, 0);
    }
    public ST_POLYFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_POLYFROMWKB, 0);
    }
    public ST_POLYGONFROMTEXT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_POLYGONFROMTEXT, 0);
    }
    public ST_POLYGONFROMWKB(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_POLYGONFROMWKB, 0);
    }
    public ST_SRID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_SRID, 0);
    }
    public ST_STARTPOINT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_STARTPOINT, 0);
    }
    public ST_SYMDIFFERENCE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_SYMDIFFERENCE, 0);
    }
    public ST_TOUCHES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_TOUCHES, 0);
    }
    public ST_UNION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_UNION, 0);
    }
    public ST_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_WITHIN, 0);
    }
    public ST_X(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_X, 0);
    }
    public ST_Y(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.ST_Y, 0);
    }
    public SUBDATE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBDATE, 0);
    }
    public SUBSTRING_INDEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBSTRING_INDEX, 0);
    }
    public SUBTIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SUBTIME, 0);
    }
    public SYSTEM_USER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.SYSTEM_USER, 0);
    }
    public TAN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TAN, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIME, 0);
    }
    public TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIMEDIFF, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIMESTAMP, 0);
    }
    public TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIMESTAMPADD, 0);
    }
    public TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIMESTAMPDIFF, 0);
    }
    public TIME_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIME_FORMAT, 0);
    }
    public TIME_TO_SEC(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TIME_TO_SEC, 0);
    }
    public TOUCHES(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TOUCHES, 0);
    }
    public TO_BASE64(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TO_BASE64, 0);
    }
    public TO_DAYS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TO_DAYS, 0);
    }
    public TO_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.TO_SECONDS, 0);
    }
    public UCASE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UCASE, 0);
    }
    public UNCOMPRESS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNCOMPRESS, 0);
    }
    public UNCOMPRESSED_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0);
    }
    public UNHEX(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNHEX, 0);
    }
    public UNIX_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UNIX_TIMESTAMP, 0);
    }
    public UPDATEXML(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPDATEXML, 0);
    }
    public UPPER(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UPPER, 0);
    }
    public UUID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UUID, 0);
    }
    public UUID_SHORT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.UUID_SHORT, 0);
    }
    public VALIDATE_PASSWORD_STRENGTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0);
    }
    public VERSION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VERSION, 0);
    }
    public VISIBLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.VISIBLE, 0);
    }
    public WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WEEK, 0);
    }
    public WEEKDAY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WEEKDAY, 0);
    }
    public WEEKOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WEEKOFYEAR, 0);
    }
    public WEIGHT_STRING(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WEIGHT_STRING, 0);
    }
    public WITHIN(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.WITHIN, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.YEAR, 0);
    }
    public YEARWEEK(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.YEARWEEK, 0);
    }
    public Y_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.Y_FUNCTION, 0);
    }
    public X_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.X_FUNCTION, 0);
    }
    public JSON_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_ARRAY, 0);
    }
    public JSON_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_OBJECT, 0);
    }
    public JSON_QUOTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_QUOTE, 0);
    }
    public JSON_CONTAINS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_CONTAINS, 0);
    }
    public JSON_CONTAINS_PATH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_CONTAINS_PATH, 0);
    }
    public JSON_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_EXTRACT, 0);
    }
    public JSON_KEYS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_KEYS, 0);
    }
    public JSON_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_OVERLAPS, 0);
    }
    public JSON_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_SEARCH, 0);
    }
    public JSON_VALUE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_VALUE, 0);
    }
    public JSON_ARRAY_APPEND(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_ARRAY_APPEND, 0);
    }
    public JSON_ARRAY_INSERT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_ARRAY_INSERT, 0);
    }
    public JSON_INSERT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_INSERT, 0);
    }
    public JSON_MERGE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_MERGE, 0);
    }
    public JSON_MERGE_PATCH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_MERGE_PATCH, 0);
    }
    public JSON_MERGE_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_MERGE_PRESERVE, 0);
    }
    public JSON_REMOVE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_REMOVE, 0);
    }
    public JSON_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_REPLACE, 0);
    }
    public JSON_SET(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_SET, 0);
    }
    public JSON_UNQUOTE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_UNQUOTE, 0);
    }
    public JSON_DEPTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_DEPTH, 0);
    }
    public JSON_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_LENGTH, 0);
    }
    public JSON_TYPE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_TYPE, 0);
    }
    public JSON_VALID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_VALID, 0);
    }
    public JSON_TABLE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_TABLE, 0);
    }
    public JSON_SCHEMA_VALID(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_SCHEMA_VALID, 0);
    }
    public JSON_SCHEMA_VALIDATION_REPORT(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0);
    }
    public JSON_PRETTY(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_PRETTY, 0);
    }
    public JSON_STORAGE_FREE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_STORAGE_FREE, 0);
    }
    public JSON_STORAGE_SIZE(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_STORAGE_SIZE, 0);
    }
    public JSON_ARRAYAGG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_ARRAYAGG, 0);
    }
    public JSON_OBJECTAGG(): antlr.TerminalNode | null {
        return this.getToken(MySqlParser.JSON_OBJECTAGG, 0);
    }
    public override get ruleIndex(): number {
        return MySqlParser.RULE_functionNameBase;
    }
    public override accept<Result>(visitor: MySqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameBase) {
            return visitor.visitFunctionNameBase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
