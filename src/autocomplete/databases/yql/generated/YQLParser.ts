////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/yql/grammar/YQL.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { YQLVisitor } from "./YQLVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class YQLParser extends antlr.Parser {
    public static readonly QUERY = 1;
    public static readonly EQUALS = 2;
    public static readonly EQUALS2 = 3;
    public static readonly NOT_EQUALS = 4;
    public static readonly NOT_EQUALS2 = 5;
    public static readonly LESS = 6;
    public static readonly LESS_OR_EQ = 7;
    public static readonly GREATER = 8;
    public static readonly GREATER_OR_EQ = 9;
    public static readonly SHIFT_LEFT = 10;
    public static readonly ROT_LEFT = 11;
    public static readonly AMPERSAND = 12;
    public static readonly PIPE = 13;
    public static readonly DOUBLE_PIPE = 14;
    public static readonly STRUCT_OPEN = 15;
    public static readonly STRUCT_CLOSE = 16;
    public static readonly PLUS = 17;
    public static readonly MINUS = 18;
    public static readonly TILDA = 19;
    public static readonly ASTERISK = 20;
    public static readonly SLASH = 21;
    public static readonly BACKSLASH = 22;
    public static readonly PERCENT = 23;
    public static readonly SEMICOLON = 24;
    public static readonly DOT = 25;
    public static readonly COMMA = 26;
    public static readonly LPAREN = 27;
    public static readonly RPAREN = 28;
    public static readonly QUESTION = 29;
    public static readonly COLON = 30;
    public static readonly AT = 31;
    public static readonly DOUBLE_AT = 32;
    public static readonly DOLLAR = 33;
    public static readonly QUOTE_DOUBLE = 34;
    public static readonly QUOTE_SINGLE = 35;
    public static readonly BACKTICK = 36;
    public static readonly LBRACE_CURLY = 37;
    public static readonly RBRACE_CURLY = 38;
    public static readonly CARET = 39;
    public static readonly NAMESPACE = 40;
    public static readonly ARROW = 41;
    public static readonly RBRACE_SQUARE = 42;
    public static readonly LBRACE_SQUARE = 43;
    public static readonly ABORT = 44;
    public static readonly ACTION = 45;
    public static readonly ADD = 46;
    public static readonly AFTER = 47;
    public static readonly ALL = 48;
    public static readonly ALTER = 49;
    public static readonly ANALYZE = 50;
    public static readonly AND = 51;
    public static readonly ANSI = 52;
    public static readonly ANY = 53;
    public static readonly ARRAY = 54;
    public static readonly AS = 55;
    public static readonly ASC = 56;
    public static readonly ASSUME = 57;
    public static readonly ASYMMETRIC = 58;
    public static readonly ASYNC = 59;
    public static readonly ATTACH = 60;
    public static readonly ATTRIBUTES = 61;
    public static readonly AUTOINCREMENT = 62;
    public static readonly AUTOMAP = 63;
    public static readonly BEFORE = 64;
    public static readonly BEGIN = 65;
    public static readonly BERNOULLI = 66;
    public static readonly BETWEEN = 67;
    public static readonly BITCAST = 68;
    public static readonly BY = 69;
    public static readonly CALLABLE = 70;
    public static readonly CASCADE = 71;
    public static readonly CASE = 72;
    public static readonly CAST = 73;
    public static readonly CHANGEFEED = 74;
    public static readonly CHECK = 75;
    public static readonly COLLATE = 76;
    public static readonly COLUMN = 77;
    public static readonly COLUMNS = 78;
    public static readonly COMMIT = 79;
    public static readonly COMPACT = 80;
    public static readonly CONDITIONAL = 81;
    public static readonly CONFLICT = 82;
    public static readonly CONNECT = 83;
    public static readonly CONSTRAINT = 84;
    public static readonly CONSUMER = 85;
    public static readonly COVER = 86;
    public static readonly CREATE = 87;
    public static readonly CROSS = 88;
    public static readonly CUBE = 89;
    public static readonly CURRENT = 90;
    public static readonly CURRENT_DATE = 91;
    public static readonly CURRENT_TIME = 92;
    public static readonly CURRENT_TIMESTAMP = 93;
    public static readonly DATA = 94;
    public static readonly DATABASE = 95;
    public static readonly DECIMAL = 96;
    public static readonly DECLARE = 97;
    public static readonly DEFAULT = 98;
    public static readonly DEFERRABLE = 99;
    public static readonly DEFERRED = 100;
    public static readonly DEFINE = 101;
    public static readonly DELETE = 102;
    public static readonly DESC = 103;
    public static readonly DESCRIBE = 104;
    public static readonly DETACH = 105;
    public static readonly DICT = 106;
    public static readonly DIRECTORY = 107;
    public static readonly DISABLE = 108;
    public static readonly DISCARD = 109;
    public static readonly DISTINCT = 110;
    public static readonly DO = 111;
    public static readonly DROP = 112;
    public static readonly EACH = 113;
    public static readonly ELSE = 114;
    public static readonly EMPTY = 115;
    public static readonly EMPTY_ACTION = 116;
    public static readonly ENCRYPTED = 117;
    public static readonly END = 118;
    public static readonly ENUM = 119;
    public static readonly ERASE = 120;
    public static readonly ERROR = 121;
    public static readonly ESCAPE = 122;
    public static readonly EVALUATE = 123;
    public static readonly EXCEPT = 124;
    public static readonly EXCLUDE = 125;
    public static readonly EXCLUSION = 126;
    public static readonly EXCLUSIVE = 127;
    public static readonly EXISTS = 128;
    public static readonly EXPLAIN = 129;
    public static readonly EXPORT = 130;
    public static readonly EXTERNAL = 131;
    public static readonly FAIL = 132;
    public static readonly FALSE = 133;
    public static readonly FAMILY = 134;
    public static readonly FILTER = 135;
    public static readonly FIRST = 136;
    public static readonly FLATTEN = 137;
    public static readonly FLOW = 138;
    public static readonly FOLLOWING = 139;
    public static readonly FOR = 140;
    public static readonly FOREIGN = 141;
    public static readonly FROM = 142;
    public static readonly FULL = 143;
    public static readonly FUNCTION = 144;
    public static readonly GLOB = 145;
    public static readonly GLOBAL = 146;
    public static readonly GRANT = 147;
    public static readonly GROUP = 148;
    public static readonly GROUPING = 149;
    public static readonly GROUPS = 150;
    public static readonly HASH = 151;
    public static readonly HAVING = 152;
    public static readonly HOP = 153;
    public static readonly IF = 154;
    public static readonly IGNORE = 155;
    public static readonly ILIKE = 156;
    public static readonly IMMEDIATE = 157;
    public static readonly IMPORT = 158;
    public static readonly IN = 159;
    public static readonly INDEX = 160;
    public static readonly INDEXED = 161;
    public static readonly INHERITS = 162;
    public static readonly INITIAL = 163;
    public static readonly INITIALLY = 164;
    public static readonly INNER = 165;
    public static readonly INSERT = 166;
    public static readonly INSTEAD = 167;
    public static readonly INTERSECT = 168;
    public static readonly INTO = 169;
    public static readonly IS = 170;
    public static readonly ISNULL = 171;
    public static readonly JOIN = 172;
    public static readonly JSON_EXISTS = 173;
    public static readonly JSON_QUERY = 174;
    public static readonly JSON_VALUE = 175;
    public static readonly KEY = 176;
    public static readonly LAST = 177;
    public static readonly LEFT = 178;
    public static readonly LEGACY = 179;
    public static readonly LIKE = 180;
    public static readonly LIMIT = 181;
    public static readonly LIST = 182;
    public static readonly LOCAL = 183;
    public static readonly MANAGE = 184;
    public static readonly MATCH = 185;
    public static readonly MATCHES = 186;
    public static readonly MATCH_RECOGNIZE = 187;
    public static readonly MEASURES = 188;
    public static readonly MICROSECONDS = 189;
    public static readonly MILLISECONDS = 190;
    public static readonly MODIFY = 191;
    public static readonly NANOSECONDS = 192;
    public static readonly NATURAL = 193;
    public static readonly NEXT = 194;
    public static readonly NO = 195;
    public static readonly NOT = 196;
    public static readonly NOTNULL = 197;
    public static readonly NULL = 198;
    public static readonly NULLS = 199;
    public static readonly OBJECT = 200;
    public static readonly OF = 201;
    public static readonly OFFSET = 202;
    public static readonly OMIT = 203;
    public static readonly ON = 204;
    public static readonly ONE = 205;
    public static readonly ONLY = 206;
    public static readonly OPTION = 207;
    public static readonly OPTIONAL = 208;
    public static readonly OR = 209;
    public static readonly ORDER = 210;
    public static readonly OTHERS = 211;
    public static readonly OUTER = 212;
    public static readonly OVER = 213;
    public static readonly PARALLEL = 214;
    public static readonly PARTITION = 215;
    public static readonly PASSING = 216;
    public static readonly PASSWORD = 217;
    public static readonly PAST = 218;
    public static readonly PATTERN = 219;
    public static readonly PER = 220;
    public static readonly PERMUTE = 221;
    public static readonly PLAN = 222;
    public static readonly PRAGMA = 223;
    public static readonly PRECEDING = 224;
    public static readonly PRESORT = 225;
    public static readonly PRIMARY = 226;
    public static readonly PRIVILEGES = 227;
    public static readonly PROCESS = 228;
    public static readonly QUEUE = 229;
    public static readonly RAISE = 230;
    public static readonly RANGE = 231;
    public static readonly REDUCE = 232;
    public static readonly REFERENCES = 233;
    public static readonly REGEXP = 234;
    public static readonly REINDEX = 235;
    public static readonly RELEASE = 236;
    public static readonly REMOVE = 237;
    public static readonly RENAME = 238;
    public static readonly REPEATABLE = 239;
    public static readonly REPLACE = 240;
    public static readonly REPLICATION = 241;
    public static readonly RESET = 242;
    public static readonly RESOURCE = 243;
    public static readonly RESPECT = 244;
    public static readonly RESTRICT = 245;
    public static readonly RESULT = 246;
    public static readonly RETURN = 247;
    public static readonly RETURNING = 248;
    public static readonly REVERT = 249;
    public static readonly REVOKE = 250;
    public static readonly RIGHT = 251;
    public static readonly RLIKE = 252;
    public static readonly ROLLBACK = 253;
    public static readonly ROLLUP = 254;
    public static readonly ROW = 255;
    public static readonly ROWS = 256;
    public static readonly SAMPLE = 257;
    public static readonly SAVEPOINT = 258;
    public static readonly SCHEMA = 259;
    public static readonly SECONDS = 260;
    public static readonly SEEK = 261;
    public static readonly SELECT = 262;
    public static readonly SEMI = 263;
    public static readonly SET = 264;
    public static readonly SETS = 265;
    public static readonly SHOW = 266;
    public static readonly SKIP_RULE = 267;
    public static readonly SOURCE = 268;
    public static readonly STREAM = 269;
    public static readonly STRUCT = 270;
    public static readonly SUBQUERY = 271;
    public static readonly SUBSET = 272;
    public static readonly SYMBOLS = 273;
    public static readonly SYMMETRIC = 274;
    public static readonly SYNC = 275;
    public static readonly SYSTEM = 276;
    public static readonly TABLE = 277;
    public static readonly TABLES = 278;
    public static readonly TABLESAMPLE = 279;
    public static readonly TABLESTORE = 280;
    public static readonly TAGGED = 281;
    public static readonly TEMP = 282;
    public static readonly TEMPORARY = 283;
    public static readonly THEN = 284;
    public static readonly TIES = 285;
    public static readonly TO = 286;
    public static readonly TOPIC = 287;
    public static readonly TRANSACTION = 288;
    public static readonly TRIGGER = 289;
    public static readonly TRUE = 290;
    public static readonly TUPLE = 291;
    public static readonly TYPE = 292;
    public static readonly UNBOUNDED = 293;
    public static readonly UNCONDITIONAL = 294;
    public static readonly UNION = 295;
    public static readonly UNIQUE = 296;
    public static readonly UNKNOWN = 297;
    public static readonly UNMATCHED = 298;
    public static readonly UPDATE = 299;
    public static readonly UPSERT = 300;
    public static readonly USE = 301;
    public static readonly USER = 302;
    public static readonly USING = 303;
    public static readonly VACUUM = 304;
    public static readonly VALUES = 305;
    public static readonly VARIANT = 306;
    public static readonly VIEW = 307;
    public static readonly VIRTUAL = 308;
    public static readonly WHEN = 309;
    public static readonly WHERE = 310;
    public static readonly WINDOW = 311;
    public static readonly WITH = 312;
    public static readonly WITHOUT = 313;
    public static readonly WRAPPER = 314;
    public static readonly XOR = 315;
    public static readonly STRING_VALUE = 316;
    public static readonly ID_PLAIN = 317;
    public static readonly ID_QUOTED = 318;
    public static readonly DIGITS = 319;
    public static readonly INTEGER_VALUE = 320;
    public static readonly REAL = 321;
    public static readonly BLOB = 322;
    public static readonly WS = 323;
    public static readonly COMMENT = 324;
    public static readonly RULE_sql_query = 0;
    public static readonly RULE_sql_stmt_list = 1;
    public static readonly RULE_ansi_sql_stmt_list = 2;
    public static readonly RULE_lambda_body = 3;
    public static readonly RULE_lambda_stmt = 4;
    public static readonly RULE_sql_stmt = 5;
    public static readonly RULE_sql_stmt_core = 6;
    public static readonly RULE_expr = 7;
    public static readonly RULE_or_subexpr = 8;
    public static readonly RULE_and_subexpr = 9;
    public static readonly RULE_xor_subexpr = 10;
    public static readonly RULE_distinct_from_op = 11;
    public static readonly RULE_cond_expr = 12;
    public static readonly RULE_match_op = 13;
    public static readonly RULE_eq_subexpr = 14;
    public static readonly RULE_shift_right = 15;
    public static readonly RULE_rot_right = 16;
    public static readonly RULE_double_question = 17;
    public static readonly RULE_neq_subexpr = 18;
    public static readonly RULE_bit_subexpr = 19;
    public static readonly RULE_add_subexpr = 20;
    public static readonly RULE_mul_subexpr = 21;
    public static readonly RULE_con_subexpr = 22;
    public static readonly RULE_unary_op = 23;
    public static readonly RULE_unary_subexpr_suffix = 24;
    public static readonly RULE_unary_casual_subexpr = 25;
    public static readonly RULE_in_unary_casual_subexpr = 26;
    public static readonly RULE_unary_subexpr = 27;
    public static readonly RULE_in_unary_subexpr = 28;
    public static readonly RULE_list_literal = 29;
    public static readonly RULE_expr_dict_list = 30;
    public static readonly RULE_dict_literal = 31;
    public static readonly RULE_expr_struct_list = 32;
    public static readonly RULE_struct_literal = 33;
    public static readonly RULE_atom_expr = 34;
    public static readonly RULE_in_atom_expr = 35;
    public static readonly RULE_cast_expr = 36;
    public static readonly RULE_bitcast_expr = 37;
    public static readonly RULE_exists_expr = 38;
    public static readonly RULE_case_expr = 39;
    public static readonly RULE_lambda = 40;
    public static readonly RULE_in_expr = 41;
    public static readonly RULE_json_api_expr = 42;
    public static readonly RULE_jsonpath_spec = 43;
    public static readonly RULE_json_variable_name = 44;
    public static readonly RULE_json_variable = 45;
    public static readonly RULE_json_variables = 46;
    public static readonly RULE_json_common_args = 47;
    public static readonly RULE_json_case_handler = 48;
    public static readonly RULE_json_value = 49;
    public static readonly RULE_json_exists_handler = 50;
    public static readonly RULE_json_exists = 51;
    public static readonly RULE_json_query_wrapper = 52;
    public static readonly RULE_json_query_handler = 53;
    public static readonly RULE_json_query = 54;
    public static readonly RULE_smart_parenthesis = 55;
    public static readonly RULE_expr_list = 56;
    public static readonly RULE_pure_column_list = 57;
    public static readonly RULE_pure_column_or_named = 58;
    public static readonly RULE_pure_column_or_named_list = 59;
    public static readonly RULE_column_name = 60;
    public static readonly RULE_without_column_name = 61;
    public static readonly RULE_column_list = 62;
    public static readonly RULE_without_column_list = 63;
    public static readonly RULE_named_expr = 64;
    public static readonly RULE_named_expr_list = 65;
    public static readonly RULE_invoke_expr = 66;
    public static readonly RULE_invoke_expr_tail = 67;
    public static readonly RULE_using_call_expr = 68;
    public static readonly RULE_key_expr = 69;
    public static readonly RULE_when_expr = 70;
    public static readonly RULE_literal_value = 71;
    public static readonly RULE_bind_parameter = 72;
    public static readonly RULE_opt_bind_parameter = 73;
    public static readonly RULE_bind_parameter_list = 74;
    public static readonly RULE_named_bind_parameter = 75;
    public static readonly RULE_named_bind_parameter_list = 76;
    public static readonly RULE_signed_number = 77;
    public static readonly RULE_type_name_simple = 78;
    public static readonly RULE_integer_or_bind = 79;
    public static readonly RULE_type_name_tag = 80;
    public static readonly RULE_struct_arg = 81;
    public static readonly RULE_struct_arg_positional = 82;
    public static readonly RULE_variant_arg = 83;
    public static readonly RULE_callable_arg = 84;
    public static readonly RULE_callable_arg_list = 85;
    public static readonly RULE_type_name_decimal = 86;
    public static readonly RULE_type_name_optional = 87;
    public static readonly RULE_type_name_tuple = 88;
    public static readonly RULE_type_name_struct = 89;
    public static readonly RULE_type_name_variant = 90;
    public static readonly RULE_type_name_list = 91;
    public static readonly RULE_type_name_stream = 92;
    public static readonly RULE_type_name_flow = 93;
    public static readonly RULE_type_name_dict = 94;
    public static readonly RULE_type_name_set = 95;
    public static readonly RULE_type_name_enum = 96;
    public static readonly RULE_type_name_resource = 97;
    public static readonly RULE_type_name_tagged = 98;
    public static readonly RULE_type_name_callable = 99;
    public static readonly RULE_type_name_composite = 100;
    public static readonly RULE_type_name = 101;
    public static readonly RULE_type_name_or_bind = 102;
    public static readonly RULE_value_constructor_literal = 103;
    public static readonly RULE_value_constructor = 104;
    public static readonly RULE_declare_stmt = 105;
    public static readonly RULE_module_path = 106;
    public static readonly RULE_import_stmt = 107;
    public static readonly RULE_export_stmt = 108;
    public static readonly RULE_call_action = 109;
    public static readonly RULE_inline_action = 110;
    public static readonly RULE_do_stmt = 111;
    public static readonly RULE_pragma_stmt = 112;
    public static readonly RULE_pragma_value = 113;
    public static readonly RULE_sort_specification = 114;
    public static readonly RULE_sort_specification_list = 115;
    public static readonly RULE_select_stmt = 116;
    public static readonly RULE_select_unparenthesized_stmt = 117;
    public static readonly RULE_select_kind_parenthesis = 118;
    public static readonly RULE_select_op = 119;
    public static readonly RULE_select_kind_partial = 120;
    public static readonly RULE_select_kind = 121;
    public static readonly RULE_process_core = 122;
    public static readonly RULE_external_call_param = 123;
    public static readonly RULE_external_call_settings = 124;
    public static readonly RULE_reduce_core = 125;
    public static readonly RULE_opt_set_quantifier = 126;
    public static readonly RULE_select_core = 127;
    public static readonly RULE_row_pattern_recognition_clause = 128;
    public static readonly RULE_row_pattern_rows_per_match = 129;
    public static readonly RULE_row_pattern_empty_match_handling = 130;
    public static readonly RULE_row_pattern_measures = 131;
    public static readonly RULE_row_pattern_measure_list = 132;
    public static readonly RULE_row_pattern_measure_definition = 133;
    public static readonly RULE_row_pattern_common_syntax = 134;
    public static readonly RULE_row_pattern_skip_to = 135;
    public static readonly RULE_row_pattern_skip_to_variable_name = 136;
    public static readonly RULE_row_pattern_initial_or_seek = 137;
    public static readonly RULE_row_pattern = 138;
    public static readonly RULE_row_pattern_term = 139;
    public static readonly RULE_row_pattern_factor = 140;
    public static readonly RULE_row_pattern_quantifier = 141;
    public static readonly RULE_row_pattern_primary = 142;
    public static readonly RULE_row_pattern_primary_variable_name = 143;
    public static readonly RULE_row_pattern_permute = 144;
    public static readonly RULE_row_pattern_subset_clause = 145;
    public static readonly RULE_row_pattern_subset_list = 146;
    public static readonly RULE_row_pattern_subset_item = 147;
    public static readonly RULE_row_pattern_subset_item_variable_name = 148;
    public static readonly RULE_row_pattern_subset_rhs = 149;
    public static readonly RULE_row_pattern_subset_rhs_variable_name = 150;
    public static readonly RULE_row_pattern_definition_list = 151;
    public static readonly RULE_row_pattern_definition = 152;
    public static readonly RULE_row_pattern_definition_variable_name = 153;
    public static readonly RULE_row_pattern_definition_search_condition = 154;
    public static readonly RULE_search_condition = 155;
    public static readonly RULE_row_pattern_variable_name = 156;
    public static readonly RULE_order_by_clause = 157;
    public static readonly RULE_ext_order_by_clause = 158;
    public static readonly RULE_group_by_clause = 159;
    public static readonly RULE_grouping_element_list = 160;
    public static readonly RULE_grouping_element = 161;
    public static readonly RULE_ordinary_grouping_set = 162;
    public static readonly RULE_ordinary_grouping_set_list = 163;
    public static readonly RULE_rollup_list = 164;
    public static readonly RULE_cube_list = 165;
    public static readonly RULE_grouping_sets_specification = 166;
    public static readonly RULE_hopping_window_specification = 167;
    public static readonly RULE_result_column = 168;
    public static readonly RULE_join_source = 169;
    public static readonly RULE_named_column = 170;
    public static readonly RULE_flatten_by_arg = 171;
    public static readonly RULE_flatten_source = 172;
    public static readonly RULE_named_single_source = 173;
    public static readonly RULE_single_source = 174;
    public static readonly RULE_sample_clause = 175;
    public static readonly RULE_tablesample_clause = 176;
    public static readonly RULE_sampling_mode = 177;
    public static readonly RULE_repeatable_clause = 178;
    public static readonly RULE_join_op = 179;
    public static readonly RULE_join_constraint = 180;
    public static readonly RULE_returning_columns_list = 181;
    public static readonly RULE_into_table_stmt = 182;
    public static readonly RULE_into_table_stmt_yq = 183;
    public static readonly RULE_into_values_source = 184;
    public static readonly RULE_values_stmt = 185;
    public static readonly RULE_values_source = 186;
    public static readonly RULE_values_source_row_list = 187;
    public static readonly RULE_values_source_row = 188;
    public static readonly RULE_simple_values_source = 189;
    public static readonly RULE_create_external_data_source_stmt = 190;
    public static readonly RULE_alter_external_data_source_stmt = 191;
    public static readonly RULE_alter_external_data_source_action = 192;
    public static readonly RULE_drop_external_data_source_stmt = 193;
    public static readonly RULE_create_view_stmt = 194;
    public static readonly RULE_drop_view_stmt = 195;
    public static readonly RULE_upsert_object_stmt = 196;
    public static readonly RULE_create_object_stmt = 197;
    public static readonly RULE_create_object_features = 198;
    public static readonly RULE_alter_object_stmt = 199;
    public static readonly RULE_alter_object_features = 200;
    public static readonly RULE_drop_object_stmt = 201;
    public static readonly RULE_drop_object_features = 202;
    public static readonly RULE_object_feature_value = 203;
    public static readonly RULE_object_feature_kv = 204;
    public static readonly RULE_object_feature_flag = 205;
    public static readonly RULE_object_feature = 206;
    public static readonly RULE_object_features = 207;
    public static readonly RULE_object_type_ref = 208;
    public static readonly RULE_create_table_stmt = 209;
    public static readonly RULE_create_table_entry = 210;
    public static readonly RULE_table_inherits = 211;
    public static readonly RULE_table_partition_by = 212;
    public static readonly RULE_with_table_settings = 213;
    public static readonly RULE_table_tablestore = 214;
    public static readonly RULE_table_settings_entry = 215;
    public static readonly RULE_table_as_source = 216;
    public static readonly RULE_alter_table_stmt = 217;
    public static readonly RULE_alter_table_action = 218;
    public static readonly RULE_alter_external_table_stmt = 219;
    public static readonly RULE_alter_external_table_action = 220;
    public static readonly RULE_alter_table_store_stmt = 221;
    public static readonly RULE_alter_table_store_action = 222;
    public static readonly RULE_alter_table_add_column = 223;
    public static readonly RULE_alter_table_drop_column = 224;
    public static readonly RULE_alter_table_alter_column = 225;
    public static readonly RULE_alter_table_add_column_family = 226;
    public static readonly RULE_alter_table_alter_column_family = 227;
    public static readonly RULE_alter_table_set_table_setting_uncompat = 228;
    public static readonly RULE_alter_table_set_table_setting_compat = 229;
    public static readonly RULE_alter_table_reset_table_setting = 230;
    public static readonly RULE_alter_table_add_index = 231;
    public static readonly RULE_alter_table_drop_index = 232;
    public static readonly RULE_alter_table_rename_to = 233;
    public static readonly RULE_alter_table_rename_index_to = 234;
    public static readonly RULE_alter_table_add_changefeed = 235;
    public static readonly RULE_alter_table_alter_changefeed = 236;
    public static readonly RULE_alter_table_drop_changefeed = 237;
    public static readonly RULE_column_schema = 238;
    public static readonly RULE_family_relation = 239;
    public static readonly RULE_opt_column_constraints = 240;
    public static readonly RULE_column_order_by_specification = 241;
    public static readonly RULE_table_constraint = 242;
    public static readonly RULE_table_index = 243;
    public static readonly RULE_table_index_type = 244;
    public static readonly RULE_global_index = 245;
    public static readonly RULE_local_index = 246;
    public static readonly RULE_changefeed = 247;
    public static readonly RULE_changefeed_settings = 248;
    public static readonly RULE_changefeed_settings_entry = 249;
    public static readonly RULE_changefeed_setting_value = 250;
    public static readonly RULE_changefeed_alter_settings = 251;
    public static readonly RULE_alter_table_setting_entry = 252;
    public static readonly RULE_table_setting_value = 253;
    public static readonly RULE_family_entry = 254;
    public static readonly RULE_family_settings = 255;
    public static readonly RULE_family_settings_entry = 256;
    public static readonly RULE_family_setting_value = 257;
    public static readonly RULE_split_boundaries = 258;
    public static readonly RULE_literal_value_list = 259;
    public static readonly RULE_drop_table_stmt = 260;
    public static readonly RULE_create_user_stmt = 261;
    public static readonly RULE_alter_user_stmt = 262;
    public static readonly RULE_create_group_stmt = 263;
    public static readonly RULE_alter_group_stmt = 264;
    public static readonly RULE_drop_role_stmt = 265;
    public static readonly RULE_role_name = 266;
    public static readonly RULE_create_user_option = 267;
    public static readonly RULE_grant_permissions_stmt = 268;
    public static readonly RULE_revoke_permissions_stmt = 269;
    public static readonly RULE_permission_id = 270;
    public static readonly RULE_permission_name = 271;
    public static readonly RULE_permission_name_target = 272;
    public static readonly RULE_create_replication_stmt = 273;
    public static readonly RULE_replication_target = 274;
    public static readonly RULE_replication_settings = 275;
    public static readonly RULE_replication_settings_entry = 276;
    public static readonly RULE_alter_replication_stmt = 277;
    public static readonly RULE_alter_replication_action = 278;
    public static readonly RULE_alter_replication_set_setting = 279;
    public static readonly RULE_drop_replication_stmt = 280;
    public static readonly RULE_action_or_subquery_args = 281;
    public static readonly RULE_define_action_or_subquery_stmt = 282;
    public static readonly RULE_define_action_or_subquery_body = 283;
    public static readonly RULE_if_stmt = 284;
    public static readonly RULE_for_stmt = 285;
    public static readonly RULE_table_ref = 286;
    public static readonly RULE_table_key = 287;
    public static readonly RULE_table_arg = 288;
    public static readonly RULE_table_hints = 289;
    public static readonly RULE_table_hint = 290;
    public static readonly RULE_object_ref = 291;
    public static readonly RULE_simple_table_ref_core = 292;
    public static readonly RULE_simple_table_ref = 293;
    public static readonly RULE_into_simple_table_ref = 294;
    public static readonly RULE_delete_stmt = 295;
    public static readonly RULE_update_stmt = 296;
    public static readonly RULE_set_clause_choice = 297;
    public static readonly RULE_set_clause_list = 298;
    public static readonly RULE_set_clause = 299;
    public static readonly RULE_set_target = 300;
    public static readonly RULE_multiple_column_assignment = 301;
    public static readonly RULE_set_target_list = 302;
    public static readonly RULE_create_topic_stmt = 303;
    public static readonly RULE_create_topic_entries = 304;
    public static readonly RULE_create_topic_entry = 305;
    public static readonly RULE_with_topic_settings = 306;
    public static readonly RULE_alter_topic_stmt = 307;
    public static readonly RULE_alter_topic_action = 308;
    public static readonly RULE_alter_topic_add_consumer = 309;
    public static readonly RULE_topic_create_consumer_entry = 310;
    public static readonly RULE_alter_topic_alter_consumer = 311;
    public static readonly RULE_alter_topic_alter_consumer_entry = 312;
    public static readonly RULE_alter_topic_drop_consumer = 313;
    public static readonly RULE_topic_alter_consumer_set = 314;
    public static readonly RULE_topic_alter_consumer_reset = 315;
    public static readonly RULE_alter_topic_set_settings = 316;
    public static readonly RULE_alter_topic_reset_settings = 317;
    public static readonly RULE_drop_topic_stmt = 318;
    public static readonly RULE_topic_settings = 319;
    public static readonly RULE_topic_settings_entry = 320;
    public static readonly RULE_topic_setting_value = 321;
    public static readonly RULE_topic_consumer_with_settings = 322;
    public static readonly RULE_topic_consumer_settings = 323;
    public static readonly RULE_topic_consumer_settings_entry = 324;
    public static readonly RULE_topic_consumer_setting_value = 325;
    public static readonly RULE_topic_ref = 326;
    public static readonly RULE_topic_consumer_ref = 327;
    public static readonly RULE_null_treatment = 328;
    public static readonly RULE_filter_clause = 329;
    public static readonly RULE_window_name_or_specification = 330;
    public static readonly RULE_window_name = 331;
    public static readonly RULE_window_clause = 332;
    public static readonly RULE_window_definition_list = 333;
    public static readonly RULE_window_definition = 334;
    public static readonly RULE_new_window_name = 335;
    public static readonly RULE_window_specification = 336;
    public static readonly RULE_window_specification_details = 337;
    public static readonly RULE_existing_window_name = 338;
    public static readonly RULE_window_partition_clause = 339;
    public static readonly RULE_window_order_clause = 340;
    public static readonly RULE_window_frame_clause = 341;
    public static readonly RULE_window_frame_units = 342;
    public static readonly RULE_window_frame_extent = 343;
    public static readonly RULE_window_frame_between = 344;
    public static readonly RULE_window_frame_bound = 345;
    public static readonly RULE_window_frame_exclusion = 346;
    public static readonly RULE_use_stmt = 347;
    public static readonly RULE_subselect_stmt = 348;
    public static readonly RULE_named_nodes_stmt = 349;
    public static readonly RULE_commit_stmt = 350;
    public static readonly RULE_rollback_stmt = 351;
    public static readonly RULE_identifier = 352;
    public static readonly RULE_id = 353;
    public static readonly RULE_id_schema = 354;
    public static readonly RULE_id_expr = 355;
    public static readonly RULE_id_expr_in = 356;
    public static readonly RULE_id_window = 357;
    public static readonly RULE_id_table = 358;
    public static readonly RULE_id_without = 359;
    public static readonly RULE_id_hint = 360;
    public static readonly RULE_id_as_compat = 361;
    public static readonly RULE_an_id = 362;
    public static readonly RULE_an_id_or_type = 363;
    public static readonly RULE_an_id_schema = 364;
    public static readonly RULE_an_id_expr = 365;
    public static readonly RULE_an_id_expr_in = 366;
    public static readonly RULE_an_id_window = 367;
    public static readonly RULE_an_id_table = 368;
    public static readonly RULE_an_id_without = 369;
    public static readonly RULE_an_id_hint = 370;
    public static readonly RULE_an_id_pure = 371;
    public static readonly RULE_an_id_as_compat = 372;
    public static readonly RULE_view_name = 373;
    public static readonly RULE_opt_id_prefix = 374;
    public static readonly RULE_cluster_expr = 375;
    public static readonly RULE_id_or_type = 376;
    public static readonly RULE_opt_id_prefix_or_type = 377;
    public static readonly RULE_id_or_at = 378;
    public static readonly RULE_id_table_or_type = 379;
    public static readonly RULE_id_table_or_at = 380;
    public static readonly RULE_keyword = 381;
    public static readonly RULE_keyword_expr_uncompat = 382;
    public static readonly RULE_keyword_table_uncompat = 383;
    public static readonly RULE_keyword_select_uncompat = 384;
    public static readonly RULE_keyword_alter_uncompat = 385;
    public static readonly RULE_keyword_in_uncompat = 386;
    public static readonly RULE_keyword_window_uncompat = 387;
    public static readonly RULE_keyword_hint_uncompat = 388;
    public static readonly RULE_keyword_as_compat = 389;
    public static readonly RULE_keyword_compat = 390;
    public static readonly RULE_type_id = 391;
    public static readonly RULE_bool_value = 392;
    public static readonly RULE_real = 393;
    public static readonly RULE_integer = 394;
    public static readonly RULE_sql_query_yq = 395;
    public static readonly RULE_sql_stmt_list_yq = 396;
    public static readonly RULE_sql_stmt_yq = 397;
    public static readonly RULE_sql_stmt_core_yq = 398;
    public static readonly RULE_replication_name = 399;
    public static readonly RULE_where_expr = 400;
    public static readonly RULE_from_stmt = 401;
    public static readonly RULE_alter_table_for_autocomplete = 402;

    public static readonly literalNames = [
        null, null, "'='", "'=='", "'!='", "'<>'", "'<'", "'<='", "'>'", 
        "'>='", "'<<'", "'|<<'", "'&'", "'|'", "'||'", "'<|'", "'|>'", "'+'", 
        "'-'", "'~'", "'*'", "'/'", "'\'", "'%'", "';'", "'.'", "','", 
        "'('", "')'", "'?'", "':'", "'@'", "'@@'", "'$'", "'\"'", "'''", 
        "'`'", "'{'", "'}'", "'^'", "'::'", "'->'", "']'", "'['"
    ];

    public static readonly symbolicNames = [
        null, "QUERY", "EQUALS", "EQUALS2", "NOT_EQUALS", "NOT_EQUALS2", 
        "LESS", "LESS_OR_EQ", "GREATER", "GREATER_OR_EQ", "SHIFT_LEFT", 
        "ROT_LEFT", "AMPERSAND", "PIPE", "DOUBLE_PIPE", "STRUCT_OPEN", "STRUCT_CLOSE", 
        "PLUS", "MINUS", "TILDA", "ASTERISK", "SLASH", "BACKSLASH", "PERCENT", 
        "SEMICOLON", "DOT", "COMMA", "LPAREN", "RPAREN", "QUESTION", "COLON", 
        "AT", "DOUBLE_AT", "DOLLAR", "QUOTE_DOUBLE", "QUOTE_SINGLE", "BACKTICK", 
        "LBRACE_CURLY", "RBRACE_CURLY", "CARET", "NAMESPACE", "ARROW", "RBRACE_SQUARE", 
        "LBRACE_SQUARE", "ABORT", "ACTION", "ADD", "AFTER", "ALL", "ALTER", 
        "ANALYZE", "AND", "ANSI", "ANY", "ARRAY", "AS", "ASC", "ASSUME", 
        "ASYMMETRIC", "ASYNC", "ATTACH", "ATTRIBUTES", "AUTOINCREMENT", 
        "AUTOMAP", "BEFORE", "BEGIN", "BERNOULLI", "BETWEEN", "BITCAST", 
        "BY", "CALLABLE", "CASCADE", "CASE", "CAST", "CHANGEFEED", "CHECK", 
        "COLLATE", "COLUMN", "COLUMNS", "COMMIT", "COMPACT", "CONDITIONAL", 
        "CONFLICT", "CONNECT", "CONSTRAINT", "CONSUMER", "COVER", "CREATE", 
        "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
        "DATA", "DATABASE", "DECIMAL", "DECLARE", "DEFAULT", "DEFERRABLE", 
        "DEFERRED", "DEFINE", "DELETE", "DESC", "DESCRIBE", "DETACH", "DICT", 
        "DIRECTORY", "DISABLE", "DISCARD", "DISTINCT", "DO", "DROP", "EACH", 
        "ELSE", "EMPTY", "EMPTY_ACTION", "ENCRYPTED", "END", "ENUM", "ERASE", 
        "ERROR", "ESCAPE", "EVALUATE", "EXCEPT", "EXCLUDE", "EXCLUSION", 
        "EXCLUSIVE", "EXISTS", "EXPLAIN", "EXPORT", "EXTERNAL", "FAIL", 
        "FALSE", "FAMILY", "FILTER", "FIRST", "FLATTEN", "FLOW", "FOLLOWING", 
        "FOR", "FOREIGN", "FROM", "FULL", "FUNCTION", "GLOB", "GLOBAL", 
        "GRANT", "GROUP", "GROUPING", "GROUPS", "HASH", "HAVING", "HOP", 
        "IF", "IGNORE", "ILIKE", "IMMEDIATE", "IMPORT", "IN", "INDEX", "INDEXED", 
        "INHERITS", "INITIAL", "INITIALLY", "INNER", "INSERT", "INSTEAD", 
        "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", "JSON_EXISTS", "JSON_QUERY", 
        "JSON_VALUE", "KEY", "LAST", "LEFT", "LEGACY", "LIKE", "LIMIT", 
        "LIST", "LOCAL", "MANAGE", "MATCH", "MATCHES", "MATCH_RECOGNIZE", 
        "MEASURES", "MICROSECONDS", "MILLISECONDS", "MODIFY", "NANOSECONDS", 
        "NATURAL", "NEXT", "NO", "NOT", "NOTNULL", "NULL", "NULLS", "OBJECT", 
        "OF", "OFFSET", "OMIT", "ON", "ONE", "ONLY", "OPTION", "OPTIONAL", 
        "OR", "ORDER", "OTHERS", "OUTER", "OVER", "PARALLEL", "PARTITION", 
        "PASSING", "PASSWORD", "PAST", "PATTERN", "PER", "PERMUTE", "PLAN", 
        "PRAGMA", "PRECEDING", "PRESORT", "PRIMARY", "PRIVILEGES", "PROCESS", 
        "QUEUE", "RAISE", "RANGE", "REDUCE", "REFERENCES", "REGEXP", "REINDEX", 
        "RELEASE", "REMOVE", "RENAME", "REPEATABLE", "REPLACE", "REPLICATION", 
        "RESET", "RESOURCE", "RESPECT", "RESTRICT", "RESULT", "RETURN", 
        "RETURNING", "REVERT", "REVOKE", "RIGHT", "RLIKE", "ROLLBACK", "ROLLUP", 
        "ROW", "ROWS", "SAMPLE", "SAVEPOINT", "SCHEMA", "SECONDS", "SEEK", 
        "SELECT", "SEMI", "SET", "SETS", "SHOW", "SKIP_RULE", "SOURCE", 
        "STREAM", "STRUCT", "SUBQUERY", "SUBSET", "SYMBOLS", "SYMMETRIC", 
        "SYNC", "SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", "TABLESTORE", 
        "TAGGED", "TEMP", "TEMPORARY", "THEN", "TIES", "TO", "TOPIC", "TRANSACTION", 
        "TRIGGER", "TRUE", "TUPLE", "TYPE", "UNBOUNDED", "UNCONDITIONAL", 
        "UNION", "UNIQUE", "UNKNOWN", "UNMATCHED", "UPDATE", "UPSERT", "USE", 
        "USER", "USING", "VACUUM", "VALUES", "VARIANT", "VIEW", "VIRTUAL", 
        "WHEN", "WHERE", "WINDOW", "WITH", "WITHOUT", "WRAPPER", "XOR", 
        "STRING_VALUE", "ID_PLAIN", "ID_QUOTED", "DIGITS", "INTEGER_VALUE", 
        "REAL", "BLOB", "WS", "COMMENT"
    ];
    public static readonly ruleNames = [
        "sql_query", "sql_stmt_list", "ansi_sql_stmt_list", "lambda_body", 
        "lambda_stmt", "sql_stmt", "sql_stmt_core", "expr", "or_subexpr", 
        "and_subexpr", "xor_subexpr", "distinct_from_op", "cond_expr", "match_op", 
        "eq_subexpr", "shift_right", "rot_right", "double_question", "neq_subexpr", 
        "bit_subexpr", "add_subexpr", "mul_subexpr", "con_subexpr", "unary_op", 
        "unary_subexpr_suffix", "unary_casual_subexpr", "in_unary_casual_subexpr", 
        "unary_subexpr", "in_unary_subexpr", "list_literal", "expr_dict_list", 
        "dict_literal", "expr_struct_list", "struct_literal", "atom_expr", 
        "in_atom_expr", "cast_expr", "bitcast_expr", "exists_expr", "case_expr", 
        "lambda", "in_expr", "json_api_expr", "jsonpath_spec", "json_variable_name", 
        "json_variable", "json_variables", "json_common_args", "json_case_handler", 
        "json_value", "json_exists_handler", "json_exists", "json_query_wrapper", 
        "json_query_handler", "json_query", "smart_parenthesis", "expr_list", 
        "pure_column_list", "pure_column_or_named", "pure_column_or_named_list", 
        "column_name", "without_column_name", "column_list", "without_column_list", 
        "named_expr", "named_expr_list", "invoke_expr", "invoke_expr_tail", 
        "using_call_expr", "key_expr", "when_expr", "literal_value", "bind_parameter", 
        "opt_bind_parameter", "bind_parameter_list", "named_bind_parameter", 
        "named_bind_parameter_list", "signed_number", "type_name_simple", 
        "integer_or_bind", "type_name_tag", "struct_arg", "struct_arg_positional", 
        "variant_arg", "callable_arg", "callable_arg_list", "type_name_decimal", 
        "type_name_optional", "type_name_tuple", "type_name_struct", "type_name_variant", 
        "type_name_list", "type_name_stream", "type_name_flow", "type_name_dict", 
        "type_name_set", "type_name_enum", "type_name_resource", "type_name_tagged", 
        "type_name_callable", "type_name_composite", "type_name", "type_name_or_bind", 
        "value_constructor_literal", "value_constructor", "declare_stmt", 
        "module_path", "import_stmt", "export_stmt", "call_action", "inline_action", 
        "do_stmt", "pragma_stmt", "pragma_value", "sort_specification", 
        "sort_specification_list", "select_stmt", "select_unparenthesized_stmt", 
        "select_kind_parenthesis", "select_op", "select_kind_partial", "select_kind", 
        "process_core", "external_call_param", "external_call_settings", 
        "reduce_core", "opt_set_quantifier", "select_core", "row_pattern_recognition_clause", 
        "row_pattern_rows_per_match", "row_pattern_empty_match_handling", 
        "row_pattern_measures", "row_pattern_measure_list", "row_pattern_measure_definition", 
        "row_pattern_common_syntax", "row_pattern_skip_to", "row_pattern_skip_to_variable_name", 
        "row_pattern_initial_or_seek", "row_pattern", "row_pattern_term", 
        "row_pattern_factor", "row_pattern_quantifier", "row_pattern_primary", 
        "row_pattern_primary_variable_name", "row_pattern_permute", "row_pattern_subset_clause", 
        "row_pattern_subset_list", "row_pattern_subset_item", "row_pattern_subset_item_variable_name", 
        "row_pattern_subset_rhs", "row_pattern_subset_rhs_variable_name", 
        "row_pattern_definition_list", "row_pattern_definition", "row_pattern_definition_variable_name", 
        "row_pattern_definition_search_condition", "search_condition", "row_pattern_variable_name", 
        "order_by_clause", "ext_order_by_clause", "group_by_clause", "grouping_element_list", 
        "grouping_element", "ordinary_grouping_set", "ordinary_grouping_set_list", 
        "rollup_list", "cube_list", "grouping_sets_specification", "hopping_window_specification", 
        "result_column", "join_source", "named_column", "flatten_by_arg", 
        "flatten_source", "named_single_source", "single_source", "sample_clause", 
        "tablesample_clause", "sampling_mode", "repeatable_clause", "join_op", 
        "join_constraint", "returning_columns_list", "into_table_stmt", 
        "into_table_stmt_yq", "into_values_source", "values_stmt", "values_source", 
        "values_source_row_list", "values_source_row", "simple_values_source", 
        "create_external_data_source_stmt", "alter_external_data_source_stmt", 
        "alter_external_data_source_action", "drop_external_data_source_stmt", 
        "create_view_stmt", "drop_view_stmt", "upsert_object_stmt", "create_object_stmt", 
        "create_object_features", "alter_object_stmt", "alter_object_features", 
        "drop_object_stmt", "drop_object_features", "object_feature_value", 
        "object_feature_kv", "object_feature_flag", "object_feature", "object_features", 
        "object_type_ref", "create_table_stmt", "create_table_entry", "table_inherits", 
        "table_partition_by", "with_table_settings", "table_tablestore", 
        "table_settings_entry", "table_as_source", "alter_table_stmt", "alter_table_action", 
        "alter_external_table_stmt", "alter_external_table_action", "alter_table_store_stmt", 
        "alter_table_store_action", "alter_table_add_column", "alter_table_drop_column", 
        "alter_table_alter_column", "alter_table_add_column_family", "alter_table_alter_column_family", 
        "alter_table_set_table_setting_uncompat", "alter_table_set_table_setting_compat", 
        "alter_table_reset_table_setting", "alter_table_add_index", "alter_table_drop_index", 
        "alter_table_rename_to", "alter_table_rename_index_to", "alter_table_add_changefeed", 
        "alter_table_alter_changefeed", "alter_table_drop_changefeed", "column_schema", 
        "family_relation", "opt_column_constraints", "column_order_by_specification", 
        "table_constraint", "table_index", "table_index_type", "global_index", 
        "local_index", "changefeed", "changefeed_settings", "changefeed_settings_entry", 
        "changefeed_setting_value", "changefeed_alter_settings", "alter_table_setting_entry", 
        "table_setting_value", "family_entry", "family_settings", "family_settings_entry", 
        "family_setting_value", "split_boundaries", "literal_value_list", 
        "drop_table_stmt", "create_user_stmt", "alter_user_stmt", "create_group_stmt", 
        "alter_group_stmt", "drop_role_stmt", "role_name", "create_user_option", 
        "grant_permissions_stmt", "revoke_permissions_stmt", "permission_id", 
        "permission_name", "permission_name_target", "create_replication_stmt", 
        "replication_target", "replication_settings", "replication_settings_entry", 
        "alter_replication_stmt", "alter_replication_action", "alter_replication_set_setting", 
        "drop_replication_stmt", "action_or_subquery_args", "define_action_or_subquery_stmt", 
        "define_action_or_subquery_body", "if_stmt", "for_stmt", "table_ref", 
        "table_key", "table_arg", "table_hints", "table_hint", "object_ref", 
        "simple_table_ref_core", "simple_table_ref", "into_simple_table_ref", 
        "delete_stmt", "update_stmt", "set_clause_choice", "set_clause_list", 
        "set_clause", "set_target", "multiple_column_assignment", "set_target_list", 
        "create_topic_stmt", "create_topic_entries", "create_topic_entry", 
        "with_topic_settings", "alter_topic_stmt", "alter_topic_action", 
        "alter_topic_add_consumer", "topic_create_consumer_entry", "alter_topic_alter_consumer", 
        "alter_topic_alter_consumer_entry", "alter_topic_drop_consumer", 
        "topic_alter_consumer_set", "topic_alter_consumer_reset", "alter_topic_set_settings", 
        "alter_topic_reset_settings", "drop_topic_stmt", "topic_settings", 
        "topic_settings_entry", "topic_setting_value", "topic_consumer_with_settings", 
        "topic_consumer_settings", "topic_consumer_settings_entry", "topic_consumer_setting_value", 
        "topic_ref", "topic_consumer_ref", "null_treatment", "filter_clause", 
        "window_name_or_specification", "window_name", "window_clause", 
        "window_definition_list", "window_definition", "new_window_name", 
        "window_specification", "window_specification_details", "existing_window_name", 
        "window_partition_clause", "window_order_clause", "window_frame_clause", 
        "window_frame_units", "window_frame_extent", "window_frame_between", 
        "window_frame_bound", "window_frame_exclusion", "use_stmt", "subselect_stmt", 
        "named_nodes_stmt", "commit_stmt", "rollback_stmt", "identifier", 
        "id", "id_schema", "id_expr", "id_expr_in", "id_window", "id_table", 
        "id_without", "id_hint", "id_as_compat", "an_id", "an_id_or_type", 
        "an_id_schema", "an_id_expr", "an_id_expr_in", "an_id_window", "an_id_table", 
        "an_id_without", "an_id_hint", "an_id_pure", "an_id_as_compat", 
        "view_name", "opt_id_prefix", "cluster_expr", "id_or_type", "opt_id_prefix_or_type", 
        "id_or_at", "id_table_or_type", "id_table_or_at", "keyword", "keyword_expr_uncompat", 
        "keyword_table_uncompat", "keyword_select_uncompat", "keyword_alter_uncompat", 
        "keyword_in_uncompat", "keyword_window_uncompat", "keyword_hint_uncompat", 
        "keyword_as_compat", "keyword_compat", "type_id", "bool_value", 
        "real", "integer", "sql_query_yq", "sql_stmt_list_yq", "sql_stmt_yq", 
        "sql_stmt_core_yq", "replication_name", "where_expr", "from_stmt", 
        "alter_table_for_autocomplete",
    ];

    public get grammarFileName(): string { return "YQL.g4"; }
    public get literalNames(): (string | null)[] { return YQLParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return YQLParser.symbolicNames; }
    public get ruleNames(): string[] { return YQLParser.ruleNames; }
    public get serializedATN(): number[] { return YQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, YQLParser._ATN, YQLParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public sql_query(): Sql_queryContext {
        let localContext = new Sql_queryContext(this.context, this.state);
        this.enterRule(localContext, 0, YQLParser.RULE_sql_query);
        try {
            this.state = 811;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 0, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 806;
                this.sql_stmt_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 807;
                this.match(YQLParser.PRAGMA);
                this.state = 808;
                this.match(YQLParser.ANSI);
                this.state = 809;
                this.match(YQLParser.DIGITS);
                this.state = 810;
                this.ansi_sql_stmt_list();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_list(): Sql_stmt_listContext {
        let localContext = new Sql_stmt_listContext(this.context, this.state);
        this.enterRule(localContext, 2, YQLParser.RULE_sql_stmt_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 816;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 24) {
                {
                {
                this.state = 813;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 818;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 819;
            this.sql_stmt();
            this.state = 828;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 3, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 821;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 820;
                        this.match(YQLParser.SEMICOLON);
                        }
                        }
                        this.state = 823;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 24);
                    this.state = 825;
                    this.sql_stmt();
                    }
                    }
                }
                this.state = 830;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 3, this.context);
            }
            this.state = 834;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 24) {
                {
                {
                this.state = 831;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 836;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 837;
            this.match(YQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ansi_sql_stmt_list(): Ansi_sql_stmt_listContext {
        let localContext = new Ansi_sql_stmt_listContext(this.context, this.state);
        this.enterRule(localContext, 4, YQLParser.RULE_ansi_sql_stmt_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 842;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 24) {
                {
                {
                this.state = 839;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 844;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 845;
            this.match(YQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lambda_body(): Lambda_bodyContext {
        let localContext = new Lambda_bodyContext(this.context, this.state);
        this.enterRule(localContext, 6, YQLParser.RULE_lambda_body);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 850;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 24) {
                {
                {
                this.state = 847;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 852;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 861;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 33 || _la === 158) {
                {
                {
                this.state = 853;
                this.lambda_stmt();
                this.state = 855;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 854;
                    this.match(YQLParser.SEMICOLON);
                    }
                    }
                    this.state = 857;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 24);
                }
                }
                this.state = 863;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 864;
            this.match(YQLParser.RETURN);
            this.state = 865;
            this.expr();
            this.state = 869;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 24) {
                {
                {
                this.state = 866;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 871;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lambda_stmt(): Lambda_stmtContext {
        let localContext = new Lambda_stmtContext(this.context, this.state);
        this.enterRule(localContext, 8, YQLParser.RULE_lambda_stmt);
        try {
            this.state = 874;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 872;
                this.named_nodes_stmt();
                }
                break;
            case YQLParser.IMPORT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 873;
                this.import_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt(): Sql_stmtContext {
        let localContext = new Sql_stmtContext(this.context, this.state);
        this.enterRule(localContext, 10, YQLParser.RULE_sql_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 881;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 876;
                this.match(YQLParser.EXPLAIN);
                this.state = 879;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1) {
                    {
                    this.state = 877;
                    this.match(YQLParser.QUERY);
                    this.state = 878;
                    this.match(YQLParser.PLAN);
                    }
                }

                }
            }

            this.state = 883;
            this.sql_stmt_core();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_core(): Sql_stmt_coreContext {
        let localContext = new Sql_stmt_coreContext(this.context, this.state);
        this.enterRule(localContext, 12, YQLParser.RULE_sql_stmt_core);
        try {
            this.state = 929;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 13, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 885;
                this.pragma_stmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 886;
                this.select_stmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 887;
                this.named_nodes_stmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 888;
                this.create_table_stmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 889;
                this.drop_table_stmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 890;
                this.use_stmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 891;
                this.into_table_stmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 892;
                this.commit_stmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 893;
                this.update_stmt();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 894;
                this.delete_stmt();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 895;
                this.rollback_stmt();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 896;
                this.declare_stmt();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 897;
                this.import_stmt();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 898;
                this.export_stmt();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 899;
                this.alter_table_stmt();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 900;
                this.alter_external_table_stmt();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 901;
                this.do_stmt();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 902;
                this.define_action_or_subquery_stmt();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 903;
                this.if_stmt();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 904;
                this.for_stmt();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 905;
                this.values_stmt();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 906;
                this.create_user_stmt();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 907;
                this.alter_user_stmt();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 908;
                this.create_group_stmt();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 909;
                this.alter_group_stmt();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 910;
                this.drop_role_stmt();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 911;
                this.create_object_stmt();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 912;
                this.alter_object_stmt();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 913;
                this.drop_object_stmt();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 914;
                this.create_external_data_source_stmt();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 915;
                this.alter_external_data_source_stmt();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 916;
                this.drop_external_data_source_stmt();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 917;
                this.create_replication_stmt();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 918;
                this.drop_replication_stmt();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 919;
                this.create_topic_stmt();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 920;
                this.alter_topic_stmt();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 921;
                this.drop_topic_stmt();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 922;
                this.grant_permissions_stmt();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 923;
                this.revoke_permissions_stmt();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 924;
                this.alter_table_store_stmt();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 925;
                this.upsert_object_stmt();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 926;
                this.create_view_stmt();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 927;
                this.drop_view_stmt();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 928;
                this.alter_replication_stmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr(): ExprContext {
        let localContext = new ExprContext(this.context, this.state);
        this.enterRule(localContext, 14, YQLParser.RULE_expr);
        let _la: number;
        try {
            this.state = 940;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 931;
                this.or_subexpr();
                this.state = 936;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 209) {
                    {
                    {
                    this.state = 932;
                    this.match(YQLParser.OR);
                    this.state = 933;
                    this.or_subexpr();
                    }
                    }
                    this.state = 938;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 939;
                this.type_name_composite();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public or_subexpr(): Or_subexprContext {
        let localContext = new Or_subexprContext(this.context, this.state);
        this.enterRule(localContext, 16, YQLParser.RULE_or_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 942;
            this.and_subexpr();
            this.state = 947;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 51) {
                {
                {
                this.state = 943;
                this.match(YQLParser.AND);
                this.state = 944;
                this.and_subexpr();
                }
                }
                this.state = 949;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public and_subexpr(): And_subexprContext {
        let localContext = new And_subexprContext(this.context, this.state);
        this.enterRule(localContext, 18, YQLParser.RULE_and_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 950;
            this.xor_subexpr();
            this.state = 955;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 315) {
                {
                {
                this.state = 951;
                this.match(YQLParser.XOR);
                this.state = 952;
                this.xor_subexpr();
                }
                }
                this.state = 957;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xor_subexpr(): Xor_subexprContext {
        let localContext = new Xor_subexprContext(this.context, this.state);
        this.enterRule(localContext, 20, YQLParser.RULE_xor_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 958;
            this.eq_subexpr();
            this.state = 960;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 60) !== 0) || _la === 67 || ((((_la - 145)) & ~0x1F) === 0 && ((1 << (_la - 145)) & 100681729) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 196641) !== 0) || _la === 234 || _la === 252) {
                {
                this.state = 959;
                this.cond_expr();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distinct_from_op(): Distinct_from_opContext {
        let localContext = new Distinct_from_opContext(this.context, this.state);
        this.enterRule(localContext, 22, YQLParser.RULE_distinct_from_op);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 962;
            this.match(YQLParser.IS);
            this.state = 964;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 196) {
                {
                this.state = 963;
                this.match(YQLParser.NOT);
                }
            }

            this.state = 966;
            this.match(YQLParser.DISTINCT);
            this.state = 967;
            this.match(YQLParser.FROM);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cond_expr(): Cond_exprContext {
        let localContext = new Cond_exprContext(this.context, this.state);
        this.enterRule(localContext, 24, YQLParser.RULE_cond_expr);
        let _la: number;
        try {
            this.state = 1020;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 970;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 969;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 972;
                this.match_op();
                this.state = 973;
                this.eq_subexpr();
                this.state = 976;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 974;
                    this.match(YQLParser.ESCAPE);
                    this.state = 975;
                    this.eq_subexpr();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 979;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 978;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 981;
                this.match(YQLParser.IN);
                this.state = 983;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
                case 1:
                    {
                    this.state = 982;
                    this.match(YQLParser.COMPACT);
                    }
                    break;
                }
                this.state = 985;
                this.in_expr();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 995;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
                case 1:
                    {
                    this.state = 986;
                    this.match(YQLParser.ISNULL);
                    }
                    break;
                case 2:
                    {
                    this.state = 987;
                    this.match(YQLParser.NOTNULL);
                    }
                    break;
                case 3:
                    {
                    this.state = 988;
                    this.match(YQLParser.IS);
                    this.state = 989;
                    this.match(YQLParser.NULL);
                    }
                    break;
                case 4:
                    {
                    this.state = 991;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 170) {
                        {
                        this.state = 990;
                        this.match(YQLParser.IS);
                        }
                    }

                    this.state = 993;
                    this.match(YQLParser.NOT);
                    this.state = 994;
                    this.match(YQLParser.NULL);
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 998;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 997;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 1000;
                this.match(YQLParser.BETWEEN);
                this.state = 1002;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
                case 1:
                    {
                    this.state = 1001;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 58 || _la === 274)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 1004;
                this.eq_subexpr();
                this.state = 1005;
                this.match(YQLParser.AND);
                this.state = 1006;
                this.eq_subexpr();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1016;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 1013;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case YQLParser.EQUALS:
                        {
                        this.state = 1008;
                        this.match(YQLParser.EQUALS);
                        }
                        break;
                    case YQLParser.EQUALS2:
                        {
                        this.state = 1009;
                        this.match(YQLParser.EQUALS2);
                        }
                        break;
                    case YQLParser.NOT_EQUALS:
                        {
                        this.state = 1010;
                        this.match(YQLParser.NOT_EQUALS);
                        }
                        break;
                    case YQLParser.NOT_EQUALS2:
                        {
                        this.state = 1011;
                        this.match(YQLParser.NOT_EQUALS2);
                        }
                        break;
                    case YQLParser.IS:
                        {
                        this.state = 1012;
                        this.distinct_from_op();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1015;
                    this.eq_subexpr();
                    }
                    }
                    this.state = 1018;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 60) !== 0) || _la === 170);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public match_op(): Match_opContext {
        let localContext = new Match_opContext(this.context, this.state);
        this.enterRule(localContext, 26, YQLParser.RULE_match_op);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1022;
            _la = this.tokenStream.LA(1);
            if(!(_la === 145 || _la === 156 || _la === 180 || _la === 185 || _la === 234 || _la === 252)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public eq_subexpr(): Eq_subexprContext {
        let localContext = new Eq_subexprContext(this.context, this.state);
        this.enterRule(localContext, 28, YQLParser.RULE_eq_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1024;
            this.neq_subexpr();
            this.state = 1029;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 960) !== 0)) {
                {
                {
                this.state = 1025;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 960) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1026;
                this.neq_subexpr();
                }
                }
                this.state = 1031;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public shift_right(): Shift_rightContext {
        let localContext = new Shift_rightContext(this.context, this.state);
        this.enterRule(localContext, 30, YQLParser.RULE_shift_right);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1032;
            this.match(YQLParser.GREATER);
            this.state = 1033;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rot_right(): Rot_rightContext {
        let localContext = new Rot_rightContext(this.context, this.state);
        this.enterRule(localContext, 32, YQLParser.RULE_rot_right);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1035;
            this.match(YQLParser.GREATER);
            this.state = 1036;
            this.match(YQLParser.GREATER);
            this.state = 1037;
            this.match(YQLParser.PIPE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public double_question(): Double_questionContext {
        let localContext = new Double_questionContext(this.context, this.state);
        this.enterRule(localContext, 34, YQLParser.RULE_double_question);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1039;
            this.match(YQLParser.QUESTION);
            this.state = 1040;
            this.match(YQLParser.QUESTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public neq_subexpr(): Neq_subexprContext {
        let localContext = new Neq_subexprContext(this.context, this.state);
        this.enterRule(localContext, 36, YQLParser.RULE_neq_subexpr);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1042;
            this.bit_subexpr();
            this.state = 1055;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 33, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1050;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
                    case 1:
                        {
                        this.state = 1043;
                        this.match(YQLParser.SHIFT_LEFT);
                        }
                        break;
                    case 2:
                        {
                        this.state = 1044;
                        this.shift_right();
                        }
                        break;
                    case 3:
                        {
                        this.state = 1045;
                        this.match(YQLParser.ROT_LEFT);
                        }
                        break;
                    case 4:
                        {
                        this.state = 1046;
                        this.rot_right();
                        }
                        break;
                    case 5:
                        {
                        this.state = 1047;
                        this.match(YQLParser.AMPERSAND);
                        }
                        break;
                    case 6:
                        {
                        this.state = 1048;
                        this.match(YQLParser.PIPE);
                        }
                        break;
                    case 7:
                        {
                        this.state = 1049;
                        this.match(YQLParser.CARET);
                        }
                        break;
                    }
                    this.state = 1052;
                    this.bit_subexpr();
                    }
                    }
                }
                this.state = 1057;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 33, this.context);
            }
            this.state = 1066;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
            case 1:
                {
                {
                this.state = 1058;
                this.double_question();
                this.state = 1059;
                this.neq_subexpr();
                }
                }
                break;
            case 2:
                {
                this.state = 1062;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 1061;
                    this.match(YQLParser.QUESTION);
                    }
                    }
                    this.state = 1064;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 29);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bit_subexpr(): Bit_subexprContext {
        let localContext = new Bit_subexprContext(this.context, this.state);
        this.enterRule(localContext, 38, YQLParser.RULE_bit_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1068;
            this.add_subexpr();
            this.state = 1073;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 17 || _la === 18) {
                {
                {
                this.state = 1069;
                _la = this.tokenStream.LA(1);
                if(!(_la === 17 || _la === 18)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1070;
                this.add_subexpr();
                }
                }
                this.state = 1075;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public add_subexpr(): Add_subexprContext {
        let localContext = new Add_subexprContext(this.context, this.state);
        this.enterRule(localContext, 40, YQLParser.RULE_add_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1076;
            this.mul_subexpr();
            this.state = 1081;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 11534336) !== 0)) {
                {
                {
                this.state = 1077;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 11534336) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1078;
                this.mul_subexpr();
                }
                }
                this.state = 1083;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mul_subexpr(): Mul_subexprContext {
        let localContext = new Mul_subexprContext(this.context, this.state);
        this.enterRule(localContext, 42, YQLParser.RULE_mul_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1084;
            this.con_subexpr();
            this.state = 1089;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 14) {
                {
                {
                this.state = 1085;
                this.match(YQLParser.DOUBLE_PIPE);
                this.state = 1086;
                this.con_subexpr();
                }
                }
                this.state = 1091;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public con_subexpr(): Con_subexprContext {
        let localContext = new Con_subexprContext(this.context, this.state);
        this.enterRule(localContext, 44, YQLParser.RULE_con_subexpr);
        try {
            this.state = 1096;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1092;
                this.unary_subexpr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1093;
                this.unary_op();
                this.state = 1094;
                this.unary_subexpr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_op(): Unary_opContext {
        let localContext = new Unary_opContext(this.context, this.state);
        this.enterRule(localContext, 46, YQLParser.RULE_unary_op);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1098;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 917504) !== 0) || _la === 196)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_subexpr_suffix(): Unary_subexpr_suffixContext {
        let localContext = new Unary_subexpr_suffixContext(this.context, this.state);
        this.enterRule(localContext, 48, YQLParser.RULE_unary_subexpr_suffix);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1110;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 262149) !== 0)) {
                {
                this.state = 1108;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.LBRACE_SQUARE:
                    {
                    this.state = 1100;
                    this.key_expr();
                    }
                    break;
                case YQLParser.LPAREN:
                    {
                    this.state = 1101;
                    this.invoke_expr();
                    }
                    break;
                case YQLParser.DOT:
                    {
                    {
                    this.state = 1102;
                    this.match(YQLParser.DOT);
                    this.state = 1106;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case YQLParser.DOLLAR:
                        {
                        this.state = 1103;
                        this.bind_parameter();
                        }
                        break;
                    case YQLParser.DIGITS:
                        {
                        this.state = 1104;
                        this.match(YQLParser.DIGITS);
                        }
                        break;
                    case YQLParser.ABORT:
                    case YQLParser.ACTION:
                    case YQLParser.ADD:
                    case YQLParser.AFTER:
                    case YQLParser.ALL:
                    case YQLParser.ALTER:
                    case YQLParser.ANALYZE:
                    case YQLParser.AND:
                    case YQLParser.ANSI:
                    case YQLParser.ANY:
                    case YQLParser.ARRAY:
                    case YQLParser.AS:
                    case YQLParser.ASC:
                    case YQLParser.ASSUME:
                    case YQLParser.ASYMMETRIC:
                    case YQLParser.ASYNC:
                    case YQLParser.ATTACH:
                    case YQLParser.ATTRIBUTES:
                    case YQLParser.AUTOINCREMENT:
                    case YQLParser.BEFORE:
                    case YQLParser.BEGIN:
                    case YQLParser.BERNOULLI:
                    case YQLParser.BETWEEN:
                    case YQLParser.BITCAST:
                    case YQLParser.BY:
                    case YQLParser.CALLABLE:
                    case YQLParser.CASCADE:
                    case YQLParser.CASE:
                    case YQLParser.CAST:
                    case YQLParser.CHANGEFEED:
                    case YQLParser.CHECK:
                    case YQLParser.COLLATE:
                    case YQLParser.COLUMN:
                    case YQLParser.COLUMNS:
                    case YQLParser.COMMIT:
                    case YQLParser.COMPACT:
                    case YQLParser.CONDITIONAL:
                    case YQLParser.CONFLICT:
                    case YQLParser.CONNECT:
                    case YQLParser.CONSTRAINT:
                    case YQLParser.CONSUMER:
                    case YQLParser.COVER:
                    case YQLParser.CREATE:
                    case YQLParser.CROSS:
                    case YQLParser.CUBE:
                    case YQLParser.CURRENT:
                    case YQLParser.CURRENT_DATE:
                    case YQLParser.CURRENT_TIME:
                    case YQLParser.CURRENT_TIMESTAMP:
                    case YQLParser.DATA:
                    case YQLParser.DATABASE:
                    case YQLParser.DECIMAL:
                    case YQLParser.DECLARE:
                    case YQLParser.DEFAULT:
                    case YQLParser.DEFERRABLE:
                    case YQLParser.DEFERRED:
                    case YQLParser.DEFINE:
                    case YQLParser.DELETE:
                    case YQLParser.DESC:
                    case YQLParser.DESCRIBE:
                    case YQLParser.DETACH:
                    case YQLParser.DICT:
                    case YQLParser.DIRECTORY:
                    case YQLParser.DISABLE:
                    case YQLParser.DISCARD:
                    case YQLParser.DISTINCT:
                    case YQLParser.DO:
                    case YQLParser.DROP:
                    case YQLParser.EACH:
                    case YQLParser.ELSE:
                    case YQLParser.EMPTY:
                    case YQLParser.EMPTY_ACTION:
                    case YQLParser.ENCRYPTED:
                    case YQLParser.END:
                    case YQLParser.ENUM:
                    case YQLParser.ERASE:
                    case YQLParser.ERROR:
                    case YQLParser.ESCAPE:
                    case YQLParser.EVALUATE:
                    case YQLParser.EXCEPT:
                    case YQLParser.EXCLUDE:
                    case YQLParser.EXCLUSION:
                    case YQLParser.EXCLUSIVE:
                    case YQLParser.EXISTS:
                    case YQLParser.EXPLAIN:
                    case YQLParser.EXPORT:
                    case YQLParser.EXTERNAL:
                    case YQLParser.FAIL:
                    case YQLParser.FAMILY:
                    case YQLParser.FILTER:
                    case YQLParser.FIRST:
                    case YQLParser.FLATTEN:
                    case YQLParser.FLOW:
                    case YQLParser.FOLLOWING:
                    case YQLParser.FOR:
                    case YQLParser.FOREIGN:
                    case YQLParser.FROM:
                    case YQLParser.FULL:
                    case YQLParser.FUNCTION:
                    case YQLParser.GLOB:
                    case YQLParser.GRANT:
                    case YQLParser.GROUP:
                    case YQLParser.GROUPING:
                    case YQLParser.GROUPS:
                    case YQLParser.HASH:
                    case YQLParser.HAVING:
                    case YQLParser.HOP:
                    case YQLParser.IF:
                    case YQLParser.IGNORE:
                    case YQLParser.ILIKE:
                    case YQLParser.IMMEDIATE:
                    case YQLParser.IMPORT:
                    case YQLParser.IN:
                    case YQLParser.INDEX:
                    case YQLParser.INDEXED:
                    case YQLParser.INHERITS:
                    case YQLParser.INITIAL:
                    case YQLParser.INITIALLY:
                    case YQLParser.INNER:
                    case YQLParser.INSERT:
                    case YQLParser.INSTEAD:
                    case YQLParser.INTERSECT:
                    case YQLParser.INTO:
                    case YQLParser.IS:
                    case YQLParser.ISNULL:
                    case YQLParser.JOIN:
                    case YQLParser.JSON_EXISTS:
                    case YQLParser.JSON_QUERY:
                    case YQLParser.JSON_VALUE:
                    case YQLParser.KEY:
                    case YQLParser.LAST:
                    case YQLParser.LEFT:
                    case YQLParser.LEGACY:
                    case YQLParser.LIKE:
                    case YQLParser.LIMIT:
                    case YQLParser.LIST:
                    case YQLParser.LOCAL:
                    case YQLParser.MANAGE:
                    case YQLParser.MATCH:
                    case YQLParser.MATCHES:
                    case YQLParser.MATCH_RECOGNIZE:
                    case YQLParser.MEASURES:
                    case YQLParser.MICROSECONDS:
                    case YQLParser.MILLISECONDS:
                    case YQLParser.MODIFY:
                    case YQLParser.NANOSECONDS:
                    case YQLParser.NATURAL:
                    case YQLParser.NEXT:
                    case YQLParser.NO:
                    case YQLParser.NOT:
                    case YQLParser.NOTNULL:
                    case YQLParser.NULL:
                    case YQLParser.NULLS:
                    case YQLParser.OBJECT:
                    case YQLParser.OF:
                    case YQLParser.OFFSET:
                    case YQLParser.OMIT:
                    case YQLParser.ON:
                    case YQLParser.ONE:
                    case YQLParser.ONLY:
                    case YQLParser.OPTION:
                    case YQLParser.OPTIONAL:
                    case YQLParser.OR:
                    case YQLParser.ORDER:
                    case YQLParser.OTHERS:
                    case YQLParser.OUTER:
                    case YQLParser.OVER:
                    case YQLParser.PARALLEL:
                    case YQLParser.PARTITION:
                    case YQLParser.PASSING:
                    case YQLParser.PASSWORD:
                    case YQLParser.PAST:
                    case YQLParser.PATTERN:
                    case YQLParser.PER:
                    case YQLParser.PERMUTE:
                    case YQLParser.PLAN:
                    case YQLParser.PRAGMA:
                    case YQLParser.PRECEDING:
                    case YQLParser.PRESORT:
                    case YQLParser.PRIMARY:
                    case YQLParser.PRIVILEGES:
                    case YQLParser.PROCESS:
                    case YQLParser.QUEUE:
                    case YQLParser.RAISE:
                    case YQLParser.RANGE:
                    case YQLParser.REDUCE:
                    case YQLParser.REFERENCES:
                    case YQLParser.REGEXP:
                    case YQLParser.REINDEX:
                    case YQLParser.RELEASE:
                    case YQLParser.REMOVE:
                    case YQLParser.RENAME:
                    case YQLParser.REPLACE:
                    case YQLParser.REPLICATION:
                    case YQLParser.RESET:
                    case YQLParser.RESOURCE:
                    case YQLParser.RESPECT:
                    case YQLParser.RESTRICT:
                    case YQLParser.RESULT:
                    case YQLParser.RETURN:
                    case YQLParser.RETURNING:
                    case YQLParser.REVERT:
                    case YQLParser.REVOKE:
                    case YQLParser.RIGHT:
                    case YQLParser.RLIKE:
                    case YQLParser.ROLLBACK:
                    case YQLParser.ROLLUP:
                    case YQLParser.ROW:
                    case YQLParser.ROWS:
                    case YQLParser.SAMPLE:
                    case YQLParser.SAVEPOINT:
                    case YQLParser.SCHEMA:
                    case YQLParser.SECONDS:
                    case YQLParser.SEEK:
                    case YQLParser.SELECT:
                    case YQLParser.SEMI:
                    case YQLParser.SET:
                    case YQLParser.SETS:
                    case YQLParser.SHOW:
                    case YQLParser.SKIP_RULE:
                    case YQLParser.SOURCE:
                    case YQLParser.STREAM:
                    case YQLParser.STRUCT:
                    case YQLParser.SUBQUERY:
                    case YQLParser.SUBSET:
                    case YQLParser.SYMBOLS:
                    case YQLParser.SYMMETRIC:
                    case YQLParser.SYNC:
                    case YQLParser.SYSTEM:
                    case YQLParser.TABLE:
                    case YQLParser.TABLES:
                    case YQLParser.TABLESAMPLE:
                    case YQLParser.TABLESTORE:
                    case YQLParser.TAGGED:
                    case YQLParser.TEMP:
                    case YQLParser.TEMPORARY:
                    case YQLParser.THEN:
                    case YQLParser.TIES:
                    case YQLParser.TO:
                    case YQLParser.TOPIC:
                    case YQLParser.TRANSACTION:
                    case YQLParser.TRIGGER:
                    case YQLParser.TUPLE:
                    case YQLParser.TYPE:
                    case YQLParser.UNBOUNDED:
                    case YQLParser.UNCONDITIONAL:
                    case YQLParser.UNION:
                    case YQLParser.UNIQUE:
                    case YQLParser.UNKNOWN:
                    case YQLParser.UNMATCHED:
                    case YQLParser.UPDATE:
                    case YQLParser.UPSERT:
                    case YQLParser.USE:
                    case YQLParser.USER:
                    case YQLParser.USING:
                    case YQLParser.VACUUM:
                    case YQLParser.VALUES:
                    case YQLParser.VARIANT:
                    case YQLParser.VIEW:
                    case YQLParser.VIRTUAL:
                    case YQLParser.WHEN:
                    case YQLParser.WHERE:
                    case YQLParser.WINDOW:
                    case YQLParser.WITH:
                    case YQLParser.WITHOUT:
                    case YQLParser.WRAPPER:
                    case YQLParser.XOR:
                    case YQLParser.STRING_VALUE:
                    case YQLParser.ID_PLAIN:
                    case YQLParser.ID_QUOTED:
                        {
                        this.state = 1105;
                        this.an_id_or_type();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 1112;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1115;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 76) {
                {
                this.state = 1113;
                this.match(YQLParser.COLLATE);
                this.state = 1114;
                this.an_id();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_casual_subexpr(): Unary_casual_subexprContext {
        let localContext = new Unary_casual_subexprContext(this.context, this.state);
        this.enterRule(localContext, 50, YQLParser.RULE_unary_casual_subexpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1119;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
            case 1:
                {
                this.state = 1117;
                this.id_expr();
                }
                break;
            case 2:
                {
                this.state = 1118;
                this.atom_expr();
                }
                break;
            }
            this.state = 1121;
            this.unary_subexpr_suffix();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_unary_casual_subexpr(): In_unary_casual_subexprContext {
        let localContext = new In_unary_casual_subexprContext(this.context, this.state);
        this.enterRule(localContext, 52, YQLParser.RULE_in_unary_casual_subexpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1125;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 45, this.context) ) {
            case 1:
                {
                this.state = 1123;
                this.id_expr_in();
                }
                break;
            case 2:
                {
                this.state = 1124;
                this.in_atom_expr();
                }
                break;
            }
            this.state = 1127;
            this.unary_subexpr_suffix();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_subexpr(): Unary_subexprContext {
        let localContext = new Unary_subexprContext(this.context, this.state);
        this.enterRule(localContext, 54, YQLParser.RULE_unary_subexpr);
        try {
            this.state = 1131;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 46, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1129;
                this.unary_casual_subexpr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1130;
                this.json_api_expr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_unary_subexpr(): In_unary_subexprContext {
        let localContext = new In_unary_subexprContext(this.context, this.state);
        this.enterRule(localContext, 56, YQLParser.RULE_in_unary_subexpr);
        try {
            this.state = 1135;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 47, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1133;
                this.in_unary_casual_subexpr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1134;
                this.json_api_expr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public list_literal(): List_literalContext {
        let localContext = new List_literalContext(this.context, this.state);
        this.enterRule(localContext, 58, YQLParser.RULE_list_literal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1137;
            this.match(YQLParser.LBRACE_SQUARE);
            this.state = 1139;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4030992413) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294901759) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & 4294967295) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 4294967295) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 524287) !== 0)) {
                {
                this.state = 1138;
                this.expr_list();
                }
            }

            this.state = 1142;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 1141;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1144;
            this.match(YQLParser.RBRACE_SQUARE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_dict_list(): Expr_dict_listContext {
        let localContext = new Expr_dict_listContext(this.context, this.state);
        this.enterRule(localContext, 60, YQLParser.RULE_expr_dict_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1146;
            this.expr();
            this.state = 1149;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 1147;
                this.match(YQLParser.COLON);
                this.state = 1148;
                this.expr();
                }
            }

            this.state = 1159;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 52, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1151;
                    this.match(YQLParser.COMMA);
                    this.state = 1152;
                    this.expr();
                    this.state = 1155;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 30) {
                        {
                        this.state = 1153;
                        this.match(YQLParser.COLON);
                        this.state = 1154;
                        this.expr();
                        }
                    }

                    }
                    }
                }
                this.state = 1161;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 52, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dict_literal(): Dict_literalContext {
        let localContext = new Dict_literalContext(this.context, this.state);
        this.enterRule(localContext, 62, YQLParser.RULE_dict_literal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1162;
            this.match(YQLParser.LBRACE_CURLY);
            this.state = 1164;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4030992413) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294901759) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & 4294967295) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 4294967295) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 524287) !== 0)) {
                {
                this.state = 1163;
                this.expr_dict_list();
                }
            }

            this.state = 1167;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 1166;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1169;
            this.match(YQLParser.RBRACE_CURLY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_struct_list(): Expr_struct_listContext {
        let localContext = new Expr_struct_listContext(this.context, this.state);
        this.enterRule(localContext, 64, YQLParser.RULE_expr_struct_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1171;
            this.expr();
            this.state = 1172;
            this.match(YQLParser.COLON);
            this.state = 1173;
            this.expr();
            this.state = 1181;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 55, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1174;
                    this.match(YQLParser.COMMA);
                    this.state = 1175;
                    this.expr();
                    this.state = 1176;
                    this.match(YQLParser.COLON);
                    this.state = 1177;
                    this.expr();
                    }
                    }
                }
                this.state = 1183;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 55, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public struct_literal(): Struct_literalContext {
        let localContext = new Struct_literalContext(this.context, this.state);
        this.enterRule(localContext, 66, YQLParser.RULE_struct_literal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1184;
            this.match(YQLParser.STRUCT_OPEN);
            this.state = 1186;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4030992413) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294901759) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & 4294967295) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 4294967295) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 524287) !== 0)) {
                {
                this.state = 1185;
                this.expr_struct_list();
                }
            }

            this.state = 1189;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 1188;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1191;
            this.match(YQLParser.STRUCT_CLOSE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atom_expr(): Atom_exprContext {
        let localContext = new Atom_exprContext(this.context, this.state);
        this.enterRule(localContext, 68, YQLParser.RULE_atom_expr);
        try {
            this.state = 1210;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 59, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1193;
                this.literal_value();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1194;
                this.bind_parameter();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1195;
                this.lambda();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1196;
                this.cast_expr();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1197;
                this.exists_expr();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1198;
                this.case_expr();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1199;
                this.an_id_or_type();
                this.state = 1200;
                this.match(YQLParser.NAMESPACE);
                this.state = 1203;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.ABORT:
                case YQLParser.ACTION:
                case YQLParser.ADD:
                case YQLParser.AFTER:
                case YQLParser.ALL:
                case YQLParser.ALTER:
                case YQLParser.ANALYZE:
                case YQLParser.AND:
                case YQLParser.ANSI:
                case YQLParser.ANY:
                case YQLParser.ARRAY:
                case YQLParser.AS:
                case YQLParser.ASC:
                case YQLParser.ASSUME:
                case YQLParser.ASYMMETRIC:
                case YQLParser.ASYNC:
                case YQLParser.ATTACH:
                case YQLParser.ATTRIBUTES:
                case YQLParser.AUTOINCREMENT:
                case YQLParser.BEFORE:
                case YQLParser.BEGIN:
                case YQLParser.BERNOULLI:
                case YQLParser.BETWEEN:
                case YQLParser.BITCAST:
                case YQLParser.BY:
                case YQLParser.CALLABLE:
                case YQLParser.CASCADE:
                case YQLParser.CASE:
                case YQLParser.CAST:
                case YQLParser.CHANGEFEED:
                case YQLParser.CHECK:
                case YQLParser.COLLATE:
                case YQLParser.COLUMN:
                case YQLParser.COLUMNS:
                case YQLParser.COMMIT:
                case YQLParser.COMPACT:
                case YQLParser.CONDITIONAL:
                case YQLParser.CONFLICT:
                case YQLParser.CONNECT:
                case YQLParser.CONSTRAINT:
                case YQLParser.CONSUMER:
                case YQLParser.COVER:
                case YQLParser.CREATE:
                case YQLParser.CROSS:
                case YQLParser.CUBE:
                case YQLParser.CURRENT:
                case YQLParser.CURRENT_DATE:
                case YQLParser.CURRENT_TIME:
                case YQLParser.CURRENT_TIMESTAMP:
                case YQLParser.DATA:
                case YQLParser.DATABASE:
                case YQLParser.DECIMAL:
                case YQLParser.DECLARE:
                case YQLParser.DEFAULT:
                case YQLParser.DEFERRABLE:
                case YQLParser.DEFERRED:
                case YQLParser.DEFINE:
                case YQLParser.DELETE:
                case YQLParser.DESC:
                case YQLParser.DESCRIBE:
                case YQLParser.DETACH:
                case YQLParser.DICT:
                case YQLParser.DIRECTORY:
                case YQLParser.DISABLE:
                case YQLParser.DISCARD:
                case YQLParser.DISTINCT:
                case YQLParser.DO:
                case YQLParser.DROP:
                case YQLParser.EACH:
                case YQLParser.ELSE:
                case YQLParser.EMPTY:
                case YQLParser.EMPTY_ACTION:
                case YQLParser.ENCRYPTED:
                case YQLParser.END:
                case YQLParser.ENUM:
                case YQLParser.ERASE:
                case YQLParser.ERROR:
                case YQLParser.ESCAPE:
                case YQLParser.EVALUATE:
                case YQLParser.EXCEPT:
                case YQLParser.EXCLUDE:
                case YQLParser.EXCLUSION:
                case YQLParser.EXCLUSIVE:
                case YQLParser.EXISTS:
                case YQLParser.EXPLAIN:
                case YQLParser.EXPORT:
                case YQLParser.EXTERNAL:
                case YQLParser.FAIL:
                case YQLParser.FAMILY:
                case YQLParser.FILTER:
                case YQLParser.FIRST:
                case YQLParser.FLATTEN:
                case YQLParser.FLOW:
                case YQLParser.FOLLOWING:
                case YQLParser.FOR:
                case YQLParser.FOREIGN:
                case YQLParser.FROM:
                case YQLParser.FULL:
                case YQLParser.FUNCTION:
                case YQLParser.GLOB:
                case YQLParser.GRANT:
                case YQLParser.GROUP:
                case YQLParser.GROUPING:
                case YQLParser.GROUPS:
                case YQLParser.HASH:
                case YQLParser.HAVING:
                case YQLParser.HOP:
                case YQLParser.IF:
                case YQLParser.IGNORE:
                case YQLParser.ILIKE:
                case YQLParser.IMMEDIATE:
                case YQLParser.IMPORT:
                case YQLParser.IN:
                case YQLParser.INDEX:
                case YQLParser.INDEXED:
                case YQLParser.INHERITS:
                case YQLParser.INITIAL:
                case YQLParser.INITIALLY:
                case YQLParser.INNER:
                case YQLParser.INSERT:
                case YQLParser.INSTEAD:
                case YQLParser.INTERSECT:
                case YQLParser.INTO:
                case YQLParser.IS:
                case YQLParser.ISNULL:
                case YQLParser.JOIN:
                case YQLParser.JSON_EXISTS:
                case YQLParser.JSON_QUERY:
                case YQLParser.JSON_VALUE:
                case YQLParser.KEY:
                case YQLParser.LAST:
                case YQLParser.LEFT:
                case YQLParser.LEGACY:
                case YQLParser.LIKE:
                case YQLParser.LIMIT:
                case YQLParser.LIST:
                case YQLParser.LOCAL:
                case YQLParser.MANAGE:
                case YQLParser.MATCH:
                case YQLParser.MATCHES:
                case YQLParser.MATCH_RECOGNIZE:
                case YQLParser.MEASURES:
                case YQLParser.MICROSECONDS:
                case YQLParser.MILLISECONDS:
                case YQLParser.MODIFY:
                case YQLParser.NANOSECONDS:
                case YQLParser.NATURAL:
                case YQLParser.NEXT:
                case YQLParser.NO:
                case YQLParser.NOT:
                case YQLParser.NOTNULL:
                case YQLParser.NULL:
                case YQLParser.NULLS:
                case YQLParser.OBJECT:
                case YQLParser.OF:
                case YQLParser.OFFSET:
                case YQLParser.OMIT:
                case YQLParser.ON:
                case YQLParser.ONE:
                case YQLParser.ONLY:
                case YQLParser.OPTION:
                case YQLParser.OPTIONAL:
                case YQLParser.OR:
                case YQLParser.ORDER:
                case YQLParser.OTHERS:
                case YQLParser.OUTER:
                case YQLParser.OVER:
                case YQLParser.PARALLEL:
                case YQLParser.PARTITION:
                case YQLParser.PASSING:
                case YQLParser.PASSWORD:
                case YQLParser.PAST:
                case YQLParser.PATTERN:
                case YQLParser.PER:
                case YQLParser.PERMUTE:
                case YQLParser.PLAN:
                case YQLParser.PRAGMA:
                case YQLParser.PRECEDING:
                case YQLParser.PRESORT:
                case YQLParser.PRIMARY:
                case YQLParser.PRIVILEGES:
                case YQLParser.PROCESS:
                case YQLParser.QUEUE:
                case YQLParser.RAISE:
                case YQLParser.RANGE:
                case YQLParser.REDUCE:
                case YQLParser.REFERENCES:
                case YQLParser.REGEXP:
                case YQLParser.REINDEX:
                case YQLParser.RELEASE:
                case YQLParser.REMOVE:
                case YQLParser.RENAME:
                case YQLParser.REPLACE:
                case YQLParser.REPLICATION:
                case YQLParser.RESET:
                case YQLParser.RESOURCE:
                case YQLParser.RESPECT:
                case YQLParser.RESTRICT:
                case YQLParser.RESULT:
                case YQLParser.RETURN:
                case YQLParser.RETURNING:
                case YQLParser.REVERT:
                case YQLParser.REVOKE:
                case YQLParser.RIGHT:
                case YQLParser.RLIKE:
                case YQLParser.ROLLBACK:
                case YQLParser.ROLLUP:
                case YQLParser.ROW:
                case YQLParser.ROWS:
                case YQLParser.SAMPLE:
                case YQLParser.SAVEPOINT:
                case YQLParser.SCHEMA:
                case YQLParser.SECONDS:
                case YQLParser.SEEK:
                case YQLParser.SELECT:
                case YQLParser.SEMI:
                case YQLParser.SET:
                case YQLParser.SETS:
                case YQLParser.SHOW:
                case YQLParser.SKIP_RULE:
                case YQLParser.SOURCE:
                case YQLParser.STREAM:
                case YQLParser.STRUCT:
                case YQLParser.SUBQUERY:
                case YQLParser.SUBSET:
                case YQLParser.SYMBOLS:
                case YQLParser.SYMMETRIC:
                case YQLParser.SYNC:
                case YQLParser.SYSTEM:
                case YQLParser.TABLE:
                case YQLParser.TABLES:
                case YQLParser.TABLESAMPLE:
                case YQLParser.TABLESTORE:
                case YQLParser.TAGGED:
                case YQLParser.TEMP:
                case YQLParser.TEMPORARY:
                case YQLParser.THEN:
                case YQLParser.TIES:
                case YQLParser.TO:
                case YQLParser.TOPIC:
                case YQLParser.TRANSACTION:
                case YQLParser.TRIGGER:
                case YQLParser.TUPLE:
                case YQLParser.TYPE:
                case YQLParser.UNBOUNDED:
                case YQLParser.UNCONDITIONAL:
                case YQLParser.UNION:
                case YQLParser.UNIQUE:
                case YQLParser.UNKNOWN:
                case YQLParser.UNMATCHED:
                case YQLParser.UPDATE:
                case YQLParser.UPSERT:
                case YQLParser.USE:
                case YQLParser.USER:
                case YQLParser.USING:
                case YQLParser.VACUUM:
                case YQLParser.VALUES:
                case YQLParser.VARIANT:
                case YQLParser.VIEW:
                case YQLParser.VIRTUAL:
                case YQLParser.WHEN:
                case YQLParser.WHERE:
                case YQLParser.WINDOW:
                case YQLParser.WITH:
                case YQLParser.WITHOUT:
                case YQLParser.WRAPPER:
                case YQLParser.XOR:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 1201;
                    this.id_or_type();
                    }
                    break;
                case YQLParser.STRING_VALUE:
                    {
                    this.state = 1202;
                    this.match(YQLParser.STRING_VALUE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1205;
                this.value_constructor();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1206;
                this.bitcast_expr();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1207;
                this.list_literal();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1208;
                this.dict_literal();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1209;
                this.struct_literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_atom_expr(): In_atom_exprContext {
        let localContext = new In_atom_exprContext(this.context, this.state);
        this.enterRule(localContext, 70, YQLParser.RULE_in_atom_expr);
        try {
            this.state = 1232;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 61, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1212;
                this.literal_value();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1213;
                this.bind_parameter();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1214;
                this.lambda();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1215;
                this.cast_expr();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1216;
                this.case_expr();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1217;
                this.an_id_or_type();
                this.state = 1218;
                this.match(YQLParser.NAMESPACE);
                this.state = 1221;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.ABORT:
                case YQLParser.ACTION:
                case YQLParser.ADD:
                case YQLParser.AFTER:
                case YQLParser.ALL:
                case YQLParser.ALTER:
                case YQLParser.ANALYZE:
                case YQLParser.AND:
                case YQLParser.ANSI:
                case YQLParser.ANY:
                case YQLParser.ARRAY:
                case YQLParser.AS:
                case YQLParser.ASC:
                case YQLParser.ASSUME:
                case YQLParser.ASYMMETRIC:
                case YQLParser.ASYNC:
                case YQLParser.ATTACH:
                case YQLParser.ATTRIBUTES:
                case YQLParser.AUTOINCREMENT:
                case YQLParser.BEFORE:
                case YQLParser.BEGIN:
                case YQLParser.BERNOULLI:
                case YQLParser.BETWEEN:
                case YQLParser.BITCAST:
                case YQLParser.BY:
                case YQLParser.CALLABLE:
                case YQLParser.CASCADE:
                case YQLParser.CASE:
                case YQLParser.CAST:
                case YQLParser.CHANGEFEED:
                case YQLParser.CHECK:
                case YQLParser.COLLATE:
                case YQLParser.COLUMN:
                case YQLParser.COLUMNS:
                case YQLParser.COMMIT:
                case YQLParser.COMPACT:
                case YQLParser.CONDITIONAL:
                case YQLParser.CONFLICT:
                case YQLParser.CONNECT:
                case YQLParser.CONSTRAINT:
                case YQLParser.CONSUMER:
                case YQLParser.COVER:
                case YQLParser.CREATE:
                case YQLParser.CROSS:
                case YQLParser.CUBE:
                case YQLParser.CURRENT:
                case YQLParser.CURRENT_DATE:
                case YQLParser.CURRENT_TIME:
                case YQLParser.CURRENT_TIMESTAMP:
                case YQLParser.DATA:
                case YQLParser.DATABASE:
                case YQLParser.DECIMAL:
                case YQLParser.DECLARE:
                case YQLParser.DEFAULT:
                case YQLParser.DEFERRABLE:
                case YQLParser.DEFERRED:
                case YQLParser.DEFINE:
                case YQLParser.DELETE:
                case YQLParser.DESC:
                case YQLParser.DESCRIBE:
                case YQLParser.DETACH:
                case YQLParser.DICT:
                case YQLParser.DIRECTORY:
                case YQLParser.DISABLE:
                case YQLParser.DISCARD:
                case YQLParser.DISTINCT:
                case YQLParser.DO:
                case YQLParser.DROP:
                case YQLParser.EACH:
                case YQLParser.ELSE:
                case YQLParser.EMPTY:
                case YQLParser.EMPTY_ACTION:
                case YQLParser.ENCRYPTED:
                case YQLParser.END:
                case YQLParser.ENUM:
                case YQLParser.ERASE:
                case YQLParser.ERROR:
                case YQLParser.ESCAPE:
                case YQLParser.EVALUATE:
                case YQLParser.EXCEPT:
                case YQLParser.EXCLUDE:
                case YQLParser.EXCLUSION:
                case YQLParser.EXCLUSIVE:
                case YQLParser.EXISTS:
                case YQLParser.EXPLAIN:
                case YQLParser.EXPORT:
                case YQLParser.EXTERNAL:
                case YQLParser.FAIL:
                case YQLParser.FAMILY:
                case YQLParser.FILTER:
                case YQLParser.FIRST:
                case YQLParser.FLATTEN:
                case YQLParser.FLOW:
                case YQLParser.FOLLOWING:
                case YQLParser.FOR:
                case YQLParser.FOREIGN:
                case YQLParser.FROM:
                case YQLParser.FULL:
                case YQLParser.FUNCTION:
                case YQLParser.GLOB:
                case YQLParser.GRANT:
                case YQLParser.GROUP:
                case YQLParser.GROUPING:
                case YQLParser.GROUPS:
                case YQLParser.HASH:
                case YQLParser.HAVING:
                case YQLParser.HOP:
                case YQLParser.IF:
                case YQLParser.IGNORE:
                case YQLParser.ILIKE:
                case YQLParser.IMMEDIATE:
                case YQLParser.IMPORT:
                case YQLParser.IN:
                case YQLParser.INDEX:
                case YQLParser.INDEXED:
                case YQLParser.INHERITS:
                case YQLParser.INITIAL:
                case YQLParser.INITIALLY:
                case YQLParser.INNER:
                case YQLParser.INSERT:
                case YQLParser.INSTEAD:
                case YQLParser.INTERSECT:
                case YQLParser.INTO:
                case YQLParser.IS:
                case YQLParser.ISNULL:
                case YQLParser.JOIN:
                case YQLParser.JSON_EXISTS:
                case YQLParser.JSON_QUERY:
                case YQLParser.JSON_VALUE:
                case YQLParser.KEY:
                case YQLParser.LAST:
                case YQLParser.LEFT:
                case YQLParser.LEGACY:
                case YQLParser.LIKE:
                case YQLParser.LIMIT:
                case YQLParser.LIST:
                case YQLParser.LOCAL:
                case YQLParser.MANAGE:
                case YQLParser.MATCH:
                case YQLParser.MATCHES:
                case YQLParser.MATCH_RECOGNIZE:
                case YQLParser.MEASURES:
                case YQLParser.MICROSECONDS:
                case YQLParser.MILLISECONDS:
                case YQLParser.MODIFY:
                case YQLParser.NANOSECONDS:
                case YQLParser.NATURAL:
                case YQLParser.NEXT:
                case YQLParser.NO:
                case YQLParser.NOT:
                case YQLParser.NOTNULL:
                case YQLParser.NULL:
                case YQLParser.NULLS:
                case YQLParser.OBJECT:
                case YQLParser.OF:
                case YQLParser.OFFSET:
                case YQLParser.OMIT:
                case YQLParser.ON:
                case YQLParser.ONE:
                case YQLParser.ONLY:
                case YQLParser.OPTION:
                case YQLParser.OPTIONAL:
                case YQLParser.OR:
                case YQLParser.ORDER:
                case YQLParser.OTHERS:
                case YQLParser.OUTER:
                case YQLParser.OVER:
                case YQLParser.PARALLEL:
                case YQLParser.PARTITION:
                case YQLParser.PASSING:
                case YQLParser.PASSWORD:
                case YQLParser.PAST:
                case YQLParser.PATTERN:
                case YQLParser.PER:
                case YQLParser.PERMUTE:
                case YQLParser.PLAN:
                case YQLParser.PRAGMA:
                case YQLParser.PRECEDING:
                case YQLParser.PRESORT:
                case YQLParser.PRIMARY:
                case YQLParser.PRIVILEGES:
                case YQLParser.PROCESS:
                case YQLParser.QUEUE:
                case YQLParser.RAISE:
                case YQLParser.RANGE:
                case YQLParser.REDUCE:
                case YQLParser.REFERENCES:
                case YQLParser.REGEXP:
                case YQLParser.REINDEX:
                case YQLParser.RELEASE:
                case YQLParser.REMOVE:
                case YQLParser.RENAME:
                case YQLParser.REPLACE:
                case YQLParser.REPLICATION:
                case YQLParser.RESET:
                case YQLParser.RESOURCE:
                case YQLParser.RESPECT:
                case YQLParser.RESTRICT:
                case YQLParser.RESULT:
                case YQLParser.RETURN:
                case YQLParser.RETURNING:
                case YQLParser.REVERT:
                case YQLParser.REVOKE:
                case YQLParser.RIGHT:
                case YQLParser.RLIKE:
                case YQLParser.ROLLBACK:
                case YQLParser.ROLLUP:
                case YQLParser.ROW:
                case YQLParser.ROWS:
                case YQLParser.SAMPLE:
                case YQLParser.SAVEPOINT:
                case YQLParser.SCHEMA:
                case YQLParser.SECONDS:
                case YQLParser.SEEK:
                case YQLParser.SELECT:
                case YQLParser.SEMI:
                case YQLParser.SET:
                case YQLParser.SETS:
                case YQLParser.SHOW:
                case YQLParser.SKIP_RULE:
                case YQLParser.SOURCE:
                case YQLParser.STREAM:
                case YQLParser.STRUCT:
                case YQLParser.SUBQUERY:
                case YQLParser.SUBSET:
                case YQLParser.SYMBOLS:
                case YQLParser.SYMMETRIC:
                case YQLParser.SYNC:
                case YQLParser.SYSTEM:
                case YQLParser.TABLE:
                case YQLParser.TABLES:
                case YQLParser.TABLESAMPLE:
                case YQLParser.TABLESTORE:
                case YQLParser.TAGGED:
                case YQLParser.TEMP:
                case YQLParser.TEMPORARY:
                case YQLParser.THEN:
                case YQLParser.TIES:
                case YQLParser.TO:
                case YQLParser.TOPIC:
                case YQLParser.TRANSACTION:
                case YQLParser.TRIGGER:
                case YQLParser.TUPLE:
                case YQLParser.TYPE:
                case YQLParser.UNBOUNDED:
                case YQLParser.UNCONDITIONAL:
                case YQLParser.UNION:
                case YQLParser.UNIQUE:
                case YQLParser.UNKNOWN:
                case YQLParser.UNMATCHED:
                case YQLParser.UPDATE:
                case YQLParser.UPSERT:
                case YQLParser.USE:
                case YQLParser.USER:
                case YQLParser.USING:
                case YQLParser.VACUUM:
                case YQLParser.VALUES:
                case YQLParser.VARIANT:
                case YQLParser.VIEW:
                case YQLParser.VIRTUAL:
                case YQLParser.WHEN:
                case YQLParser.WHERE:
                case YQLParser.WINDOW:
                case YQLParser.WITH:
                case YQLParser.WITHOUT:
                case YQLParser.WRAPPER:
                case YQLParser.XOR:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 1219;
                    this.id_or_type();
                    }
                    break;
                case YQLParser.STRING_VALUE:
                    {
                    this.state = 1220;
                    this.match(YQLParser.STRING_VALUE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1223;
                this.match(YQLParser.LPAREN);
                this.state = 1224;
                this.select_stmt();
                this.state = 1225;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1227;
                this.value_constructor();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1228;
                this.bitcast_expr();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1229;
                this.list_literal();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1230;
                this.dict_literal();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1231;
                this.struct_literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cast_expr(): Cast_exprContext {
        let localContext = new Cast_exprContext(this.context, this.state);
        this.enterRule(localContext, 72, YQLParser.RULE_cast_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1234;
            this.match(YQLParser.CAST);
            this.state = 1235;
            this.match(YQLParser.LPAREN);
            this.state = 1236;
            this.expr();
            this.state = 1237;
            this.match(YQLParser.AS);
            this.state = 1238;
            this.type_name_or_bind();
            this.state = 1239;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bitcast_expr(): Bitcast_exprContext {
        let localContext = new Bitcast_exprContext(this.context, this.state);
        this.enterRule(localContext, 74, YQLParser.RULE_bitcast_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1241;
            this.match(YQLParser.BITCAST);
            this.state = 1242;
            this.match(YQLParser.LPAREN);
            this.state = 1243;
            this.expr();
            this.state = 1244;
            this.match(YQLParser.AS);
            this.state = 1245;
            this.type_name_simple();
            this.state = 1246;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exists_expr(): Exists_exprContext {
        let localContext = new Exists_exprContext(this.context, this.state);
        this.enterRule(localContext, 76, YQLParser.RULE_exists_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1248;
            this.match(YQLParser.EXISTS);
            this.state = 1249;
            this.match(YQLParser.LPAREN);
            this.state = 1252;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LPAREN:
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                {
                this.state = 1250;
                this.select_stmt();
                }
                break;
            case YQLParser.VALUES:
                {
                this.state = 1251;
                this.values_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1254;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public case_expr(): Case_exprContext {
        let localContext = new Case_exprContext(this.context, this.state);
        this.enterRule(localContext, 78, YQLParser.RULE_case_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1256;
            this.match(YQLParser.CASE);
            this.state = 1258;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 63, this.context) ) {
            case 1:
                {
                this.state = 1257;
                this.expr();
                }
                break;
            }
            this.state = 1261;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1260;
                this.when_expr();
                }
                }
                this.state = 1263;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 309);
            this.state = 1267;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 114) {
                {
                this.state = 1265;
                this.match(YQLParser.ELSE);
                this.state = 1266;
                this.expr();
                }
            }

            this.state = 1269;
            this.match(YQLParser.END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lambda(): LambdaContext {
        let localContext = new LambdaContext(this.context, this.state);
        this.enterRule(localContext, 80, YQLParser.RULE_lambda);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1271;
            this.smart_parenthesis();
            this.state = 1283;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 41) {
                {
                this.state = 1272;
                this.match(YQLParser.ARROW);
                this.state = 1281;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.LPAREN:
                    {
                    {
                    this.state = 1273;
                    this.match(YQLParser.LPAREN);
                    this.state = 1274;
                    this.expr();
                    this.state = 1275;
                    this.match(YQLParser.RPAREN);
                    }
                    }
                    break;
                case YQLParser.LBRACE_CURLY:
                    {
                    {
                    this.state = 1277;
                    this.match(YQLParser.LBRACE_CURLY);
                    this.state = 1278;
                    this.lambda_body();
                    this.state = 1279;
                    this.match(YQLParser.RBRACE_CURLY);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_expr(): In_exprContext {
        let localContext = new In_exprContext(this.context, this.state);
        this.enterRule(localContext, 82, YQLParser.RULE_in_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1285;
            this.in_unary_subexpr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_api_expr(): Json_api_exprContext {
        let localContext = new Json_api_exprContext(this.context, this.state);
        this.enterRule(localContext, 84, YQLParser.RULE_json_api_expr);
        try {
            this.state = 1290;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.JSON_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1287;
                this.json_value();
                }
                break;
            case YQLParser.JSON_EXISTS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1288;
                this.json_exists();
                }
                break;
            case YQLParser.JSON_QUERY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1289;
                this.json_query();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonpath_spec(): Jsonpath_specContext {
        let localContext = new Jsonpath_specContext(this.context, this.state);
        this.enterRule(localContext, 86, YQLParser.RULE_jsonpath_spec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1292;
            this.match(YQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_variable_name(): Json_variable_nameContext {
        let localContext = new Json_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 88, YQLParser.RULE_json_variable_name);
        try {
            this.state = 1296;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1294;
                this.id_expr();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1295;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_variable(): Json_variableContext {
        let localContext = new Json_variableContext(this.context, this.state);
        this.enterRule(localContext, 90, YQLParser.RULE_json_variable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1298;
            this.expr();
            this.state = 1299;
            this.match(YQLParser.AS);
            this.state = 1300;
            this.json_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_variables(): Json_variablesContext {
        let localContext = new Json_variablesContext(this.context, this.state);
        this.enterRule(localContext, 92, YQLParser.RULE_json_variables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1302;
            this.json_variable();
            this.state = 1307;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 1303;
                this.match(YQLParser.COMMA);
                this.state = 1304;
                this.json_variable();
                }
                }
                this.state = 1309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_common_args(): Json_common_argsContext {
        let localContext = new Json_common_argsContext(this.context, this.state);
        this.enterRule(localContext, 94, YQLParser.RULE_json_common_args);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1310;
            this.expr();
            this.state = 1311;
            this.match(YQLParser.COMMA);
            this.state = 1312;
            this.jsonpath_spec();
            this.state = 1315;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 216) {
                {
                this.state = 1313;
                this.match(YQLParser.PASSING);
                this.state = 1314;
                this.json_variables();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_case_handler(): Json_case_handlerContext {
        let localContext = new Json_case_handlerContext(this.context, this.state);
        this.enterRule(localContext, 96, YQLParser.RULE_json_case_handler);
        try {
            this.state = 1321;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ERROR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1317;
                this.match(YQLParser.ERROR);
                }
                break;
            case YQLParser.NULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1318;
                this.match(YQLParser.NULL);
                }
                break;
            case YQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 1319;
                this.match(YQLParser.DEFAULT);
                this.state = 1320;
                this.expr();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_value(): Json_valueContext {
        let localContext = new Json_valueContext(this.context, this.state);
        this.enterRule(localContext, 98, YQLParser.RULE_json_value);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1323;
            this.match(YQLParser.JSON_VALUE);
            this.state = 1324;
            this.match(YQLParser.LPAREN);
            this.state = 1325;
            this.json_common_args();
            this.state = 1328;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 248) {
                {
                this.state = 1326;
                this.match(YQLParser.RETURNING);
                this.state = 1327;
                this.type_name_simple();
                }
            }

            this.state = 1336;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 98 || _la === 121 || _la === 198) {
                {
                {
                this.state = 1330;
                this.json_case_handler();
                this.state = 1331;
                this.match(YQLParser.ON);
                this.state = 1332;
                _la = this.tokenStream.LA(1);
                if(!(_la === 115 || _la === 121)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                }
                this.state = 1338;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1339;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_exists_handler(): Json_exists_handlerContext {
        let localContext = new Json_exists_handlerContext(this.context, this.state);
        this.enterRule(localContext, 100, YQLParser.RULE_json_exists_handler);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1341;
            _la = this.tokenStream.LA(1);
            if(!(_la === 121 || _la === 133 || _la === 290 || _la === 297)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1342;
            this.match(YQLParser.ON);
            this.state = 1343;
            this.match(YQLParser.ERROR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_exists(): Json_existsContext {
        let localContext = new Json_existsContext(this.context, this.state);
        this.enterRule(localContext, 102, YQLParser.RULE_json_exists);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1345;
            this.match(YQLParser.JSON_EXISTS);
            this.state = 1346;
            this.match(YQLParser.LPAREN);
            this.state = 1347;
            this.json_common_args();
            this.state = 1349;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 121 || _la === 133 || _la === 290 || _la === 297) {
                {
                this.state = 1348;
                this.json_exists_handler();
                }
            }

            this.state = 1351;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_query_wrapper(): Json_query_wrapperContext {
        let localContext = new Json_query_wrapperContext(this.context, this.state);
        this.enterRule(localContext, 104, YQLParser.RULE_json_query_wrapper);
        let _la: number;
        try {
            this.state = 1364;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 1353;
                this.match(YQLParser.WITHOUT);
                this.state = 1355;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 1354;
                    this.match(YQLParser.ARRAY);
                    }
                }

                }
                }
                break;
            case YQLParser.WITH:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 1357;
                this.match(YQLParser.WITH);
                this.state = 1359;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81 || _la === 294) {
                    {
                    this.state = 1358;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 81 || _la === 294)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1362;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 1361;
                    this.match(YQLParser.ARRAY);
                    }
                }

                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_query_handler(): Json_query_handlerContext {
        let localContext = new Json_query_handlerContext(this.context, this.state);
        this.enterRule(localContext, 106, YQLParser.RULE_json_query_handler);
        try {
            this.state = 1372;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 80, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1366;
                this.match(YQLParser.ERROR);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1367;
                this.match(YQLParser.NULL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 1368;
                this.match(YQLParser.EMPTY);
                this.state = 1369;
                this.match(YQLParser.ARRAY);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                {
                this.state = 1370;
                this.match(YQLParser.EMPTY);
                this.state = 1371;
                this.match(YQLParser.OBJECT);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_query(): Json_queryContext {
        let localContext = new Json_queryContext(this.context, this.state);
        this.enterRule(localContext, 108, YQLParser.RULE_json_query);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1374;
            this.match(YQLParser.JSON_QUERY);
            this.state = 1375;
            this.match(YQLParser.LPAREN);
            this.state = 1376;
            this.json_common_args();
            this.state = 1380;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312 || _la === 313) {
                {
                this.state = 1377;
                this.json_query_wrapper();
                this.state = 1378;
                this.match(YQLParser.WRAPPER);
                }
            }

            this.state = 1386;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 82, this.context) ) {
            case 1:
                {
                this.state = 1382;
                this.json_query_handler();
                this.state = 1383;
                this.match(YQLParser.ON);
                this.state = 1384;
                this.match(YQLParser.EMPTY);
                }
                break;
            }
            this.state = 1392;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 115 || _la === 121 || _la === 198) {
                {
                this.state = 1388;
                this.json_query_handler();
                this.state = 1389;
                this.match(YQLParser.ON);
                this.state = 1390;
                this.match(YQLParser.ERROR);
                }
            }

            this.state = 1394;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public smart_parenthesis(): Smart_parenthesisContext {
        let localContext = new Smart_parenthesisContext(this.context, this.state);
        this.enterRule(localContext, 110, YQLParser.RULE_smart_parenthesis);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1396;
            this.match(YQLParser.LPAREN);
            this.state = 1398;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4030992413) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294901759) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & 4294967295) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 4294967295) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 524287) !== 0)) {
                {
                this.state = 1397;
                this.named_expr_list();
                }
            }

            this.state = 1401;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 1400;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1403;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_list(): Expr_listContext {
        let localContext = new Expr_listContext(this.context, this.state);
        this.enterRule(localContext, 112, YQLParser.RULE_expr_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1405;
            this.expr();
            this.state = 1410;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 86, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1406;
                    this.match(YQLParser.COMMA);
                    this.state = 1407;
                    this.expr();
                    }
                    }
                }
                this.state = 1412;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 86, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pure_column_list(): Pure_column_listContext {
        let localContext = new Pure_column_listContext(this.context, this.state);
        this.enterRule(localContext, 114, YQLParser.RULE_pure_column_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1413;
            this.match(YQLParser.LPAREN);
            this.state = 1414;
            this.an_id();
            this.state = 1419;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 1415;
                this.match(YQLParser.COMMA);
                this.state = 1416;
                this.an_id();
                }
                }
                this.state = 1421;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1422;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pure_column_or_named(): Pure_column_or_namedContext {
        let localContext = new Pure_column_or_namedContext(this.context, this.state);
        this.enterRule(localContext, 116, YQLParser.RULE_pure_column_or_named);
        try {
            this.state = 1426;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1424;
                this.bind_parameter();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1425;
                this.an_id();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pure_column_or_named_list(): Pure_column_or_named_listContext {
        let localContext = new Pure_column_or_named_listContext(this.context, this.state);
        this.enterRule(localContext, 118, YQLParser.RULE_pure_column_or_named_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1428;
            this.match(YQLParser.LPAREN);
            this.state = 1429;
            this.pure_column_or_named();
            this.state = 1434;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 1430;
                this.match(YQLParser.COMMA);
                this.state = 1431;
                this.pure_column_or_named();
                }
                }
                this.state = 1436;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1437;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_name(): Column_nameContext {
        let localContext = new Column_nameContext(this.context, this.state);
        this.enterRule(localContext, 120, YQLParser.RULE_column_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1439;
            this.opt_id_prefix();
            this.state = 1440;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public without_column_name(): Without_column_nameContext {
        let localContext = new Without_column_nameContext(this.context, this.state);
        this.enterRule(localContext, 122, YQLParser.RULE_without_column_name);
        try {
            this.state = 1447;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 90, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 1442;
                this.an_id();
                this.state = 1443;
                this.match(YQLParser.DOT);
                this.state = 1444;
                this.an_id();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1446;
                this.an_id_without();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_list(): Column_listContext {
        let localContext = new Column_listContext(this.context, this.state);
        this.enterRule(localContext, 124, YQLParser.RULE_column_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1449;
            this.column_name();
            this.state = 1454;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 91, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1450;
                    this.match(YQLParser.COMMA);
                    this.state = 1451;
                    this.column_name();
                    }
                    }
                }
                this.state = 1456;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 91, this.context);
            }
            this.state = 1458;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 1457;
                this.match(YQLParser.COMMA);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public without_column_list(): Without_column_listContext {
        let localContext = new Without_column_listContext(this.context, this.state);
        this.enterRule(localContext, 126, YQLParser.RULE_without_column_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1460;
            this.without_column_name();
            this.state = 1465;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 93, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1461;
                    this.match(YQLParser.COMMA);
                    this.state = 1462;
                    this.without_column_name();
                    }
                    }
                }
                this.state = 1467;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 93, this.context);
            }
            this.state = 1469;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 1468;
                this.match(YQLParser.COMMA);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_expr(): Named_exprContext {
        let localContext = new Named_exprContext(this.context, this.state);
        this.enterRule(localContext, 128, YQLParser.RULE_named_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1471;
            this.expr();
            this.state = 1474;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 1472;
                this.match(YQLParser.AS);
                this.state = 1473;
                this.an_id_or_type();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_expr_list(): Named_expr_listContext {
        let localContext = new Named_expr_listContext(this.context, this.state);
        this.enterRule(localContext, 130, YQLParser.RULE_named_expr_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1476;
            this.named_expr();
            this.state = 1481;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 96, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1477;
                    this.match(YQLParser.COMMA);
                    this.state = 1478;
                    this.named_expr();
                    }
                    }
                }
                this.state = 1483;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 96, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public invoke_expr(): Invoke_exprContext {
        let localContext = new Invoke_exprContext(this.context, this.state);
        this.enterRule(localContext, 132, YQLParser.RULE_invoke_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1484;
            this.match(YQLParser.LPAREN);
            this.state = 1491;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.STRUCT_OPEN:
            case YQLParser.PLUS:
            case YQLParser.MINUS:
            case YQLParser.TILDA:
            case YQLParser.LPAREN:
            case YQLParser.DOLLAR:
            case YQLParser.LBRACE_CURLY:
            case YQLParser.LBRACE_SQUARE:
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FALSE:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TRUE:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
            case YQLParser.REAL:
            case YQLParser.BLOB:
                {
                this.state = 1485;
                this.opt_set_quantifier();
                this.state = 1486;
                this.named_expr_list();
                this.state = 1488;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26) {
                    {
                    this.state = 1487;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
                break;
            case YQLParser.ASTERISK:
                {
                this.state = 1490;
                this.match(YQLParser.ASTERISK);
                }
                break;
            case YQLParser.RPAREN:
                break;
            default:
                break;
            }
            this.state = 1493;
            this.match(YQLParser.RPAREN);
            this.state = 1494;
            this.invoke_expr_tail();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public invoke_expr_tail(): Invoke_expr_tailContext {
        let localContext = new Invoke_expr_tailContext(this.context, this.state);
        this.enterRule(localContext, 134, YQLParser.RULE_invoke_expr_tail);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1498;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.IGNORE:
            case YQLParser.RESPECT:
                {
                this.state = 1496;
                this.null_treatment();
                }
                break;
            case YQLParser.FILTER:
                {
                this.state = 1497;
                this.filter_clause();
                }
                break;
            case YQLParser.EOF:
            case YQLParser.EQUALS:
            case YQLParser.EQUALS2:
            case YQLParser.NOT_EQUALS:
            case YQLParser.NOT_EQUALS2:
            case YQLParser.LESS:
            case YQLParser.LESS_OR_EQ:
            case YQLParser.GREATER:
            case YQLParser.GREATER_OR_EQ:
            case YQLParser.SHIFT_LEFT:
            case YQLParser.ROT_LEFT:
            case YQLParser.AMPERSAND:
            case YQLParser.PIPE:
            case YQLParser.DOUBLE_PIPE:
            case YQLParser.STRUCT_CLOSE:
            case YQLParser.PLUS:
            case YQLParser.MINUS:
            case YQLParser.ASTERISK:
            case YQLParser.SLASH:
            case YQLParser.PERCENT:
            case YQLParser.SEMICOLON:
            case YQLParser.DOT:
            case YQLParser.COMMA:
            case YQLParser.LPAREN:
            case YQLParser.RPAREN:
            case YQLParser.QUESTION:
            case YQLParser.COLON:
            case YQLParser.RBRACE_CURLY:
            case YQLParser.CARET:
            case YQLParser.RBRACE_SQUARE:
            case YQLParser.LBRACE_SQUARE:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.AND:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ATTRIBUTES:
            case YQLParser.BETWEEN:
            case YQLParser.COLLATE:
            case YQLParser.CONNECT:
            case YQLParser.CONSUMER:
            case YQLParser.CROSS:
            case YQLParser.DATA:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DIRECTORY:
            case YQLParser.DO:
            case YQLParser.ELSE:
            case YQLParser.END:
            case YQLParser.ESCAPE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUSION:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPS:
            case YQLParser.HAVING:
            case YQLParser.ILIKE:
            case YQLParser.IN:
            case YQLParser.INITIAL:
            case YQLParser.INNER:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RANGE:
            case YQLParser.REGEXP:
            case YQLParser.REMOVE:
            case YQLParser.REPLICATION:
            case YQLParser.RETURNING:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROWS:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBSET:
            case YQLParser.TABLES:
            case YQLParser.THEN:
            case YQLParser.TOPIC:
            case YQLParser.TYPE:
            case YQLParser.UNION:
            case YQLParser.UNMATCHED:
            case YQLParser.USING:
            case YQLParser.VIEW:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                break;
            default:
                break;
            }
            this.state = 1502;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213) {
                {
                this.state = 1500;
                this.match(YQLParser.OVER);
                this.state = 1501;
                this.window_name_or_specification();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public using_call_expr(): Using_call_exprContext {
        let localContext = new Using_call_exprContext(this.context, this.state);
        this.enterRule(localContext, 136, YQLParser.RULE_using_call_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1512;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 101, this.context) ) {
            case 1:
                {
                {
                this.state = 1504;
                this.an_id_or_type();
                this.state = 1505;
                this.match(YQLParser.NAMESPACE);
                this.state = 1506;
                this.an_id_or_type();
                }
                }
                break;
            case 2:
                {
                this.state = 1508;
                this.an_id_expr();
                }
                break;
            case 3:
                {
                this.state = 1509;
                this.bind_parameter();
                }
                break;
            case 4:
                {
                {
                this.state = 1510;
                this.match(YQLParser.EXTERNAL);
                this.state = 1511;
                this.match(YQLParser.FUNCTION);
                }
                }
                break;
            }
            this.state = 1514;
            this.invoke_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_expr(): Key_exprContext {
        let localContext = new Key_exprContext(this.context, this.state);
        this.enterRule(localContext, 138, YQLParser.RULE_key_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1516;
            this.match(YQLParser.LBRACE_SQUARE);
            this.state = 1517;
            this.expr();
            this.state = 1518;
            this.match(YQLParser.RBRACE_SQUARE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public when_expr(): When_exprContext {
        let localContext = new When_exprContext(this.context, this.state);
        this.enterRule(localContext, 140, YQLParser.RULE_when_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1520;
            this.match(YQLParser.WHEN);
            this.state = 1521;
            this.expr();
            this.state = 1522;
            this.match(YQLParser.THEN);
            this.state = 1523;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literal_value(): Literal_valueContext {
        let localContext = new Literal_valueContext(this.context, this.state);
        this.enterRule(localContext, 142, YQLParser.RULE_literal_value);
        try {
            this.state = 1535;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1525;
                this.integer();
                }
                break;
            case YQLParser.REAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1526;
                this.real();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1527;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.BLOB:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1528;
                this.match(YQLParser.BLOB);
                }
                break;
            case YQLParser.NULL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1529;
                this.match(YQLParser.NULL);
                }
                break;
            case YQLParser.CURRENT_TIME:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1530;
                this.match(YQLParser.CURRENT_TIME);
                }
                break;
            case YQLParser.CURRENT_DATE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1531;
                this.match(YQLParser.CURRENT_DATE);
                }
                break;
            case YQLParser.CURRENT_TIMESTAMP:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1532;
                this.match(YQLParser.CURRENT_TIMESTAMP);
                }
                break;
            case YQLParser.FALSE:
            case YQLParser.TRUE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1533;
                this.bool_value();
                }
                break;
            case YQLParser.EMPTY_ACTION:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1534;
                this.match(YQLParser.EMPTY_ACTION);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bind_parameter(): Bind_parameterContext {
        let localContext = new Bind_parameterContext(this.context, this.state);
        this.enterRule(localContext, 144, YQLParser.RULE_bind_parameter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1537;
            this.match(YQLParser.DOLLAR);
            this.state = 1541;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 1538;
                this.an_id_or_type();
                }
                break;
            case YQLParser.TRUE:
                {
                this.state = 1539;
                this.match(YQLParser.TRUE);
                }
                break;
            case YQLParser.FALSE:
                {
                this.state = 1540;
                this.match(YQLParser.FALSE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_bind_parameter(): Opt_bind_parameterContext {
        let localContext = new Opt_bind_parameterContext(this.context, this.state);
        this.enterRule(localContext, 146, YQLParser.RULE_opt_bind_parameter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1543;
            this.bind_parameter();
            this.state = 1545;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 29) {
                {
                this.state = 1544;
                this.match(YQLParser.QUESTION);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bind_parameter_list(): Bind_parameter_listContext {
        let localContext = new Bind_parameter_listContext(this.context, this.state);
        this.enterRule(localContext, 148, YQLParser.RULE_bind_parameter_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1547;
            this.bind_parameter();
            this.state = 1552;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 1548;
                this.match(YQLParser.COMMA);
                this.state = 1549;
                this.bind_parameter();
                }
                }
                this.state = 1554;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_bind_parameter(): Named_bind_parameterContext {
        let localContext = new Named_bind_parameterContext(this.context, this.state);
        this.enterRule(localContext, 150, YQLParser.RULE_named_bind_parameter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1555;
            this.bind_parameter();
            this.state = 1558;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 1556;
                this.match(YQLParser.AS);
                this.state = 1557;
                this.bind_parameter();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_bind_parameter_list(): Named_bind_parameter_listContext {
        let localContext = new Named_bind_parameter_listContext(this.context, this.state);
        this.enterRule(localContext, 152, YQLParser.RULE_named_bind_parameter_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1560;
            this.named_bind_parameter();
            this.state = 1565;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 1561;
                this.match(YQLParser.COMMA);
                this.state = 1562;
                this.named_bind_parameter();
                }
                }
                this.state = 1567;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signed_number(): Signed_numberContext {
        let localContext = new Signed_numberContext(this.context, this.state);
        this.enterRule(localContext, 154, YQLParser.RULE_signed_number);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1569;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17 || _la === 18) {
                {
                this.state = 1568;
                _la = this.tokenStream.LA(1);
                if(!(_la === 17 || _la === 18)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1573;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                {
                this.state = 1571;
                this.integer();
                }
                break;
            case YQLParser.REAL:
                {
                this.state = 1572;
                this.real();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_simple(): Type_name_simpleContext {
        let localContext = new Type_name_simpleContext(this.context, this.state);
        this.enterRule(localContext, 156, YQLParser.RULE_type_name_simple);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1575;
            this.an_id_pure();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public integer_or_bind(): Integer_or_bindContext {
        let localContext = new Integer_or_bindContext(this.context, this.state);
        this.enterRule(localContext, 158, YQLParser.RULE_integer_or_bind);
        try {
            this.state = 1579;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1577;
                this.integer();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1578;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_tag(): Type_name_tagContext {
        let localContext = new Type_name_tagContext(this.context, this.state);
        this.enterRule(localContext, 160, YQLParser.RULE_type_name_tag);
        try {
            this.state = 1584;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1581;
                this.id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1582;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1583;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public struct_arg(): Struct_argContext {
        let localContext = new Struct_argContext(this.context, this.state);
        this.enterRule(localContext, 162, YQLParser.RULE_struct_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1586;
            this.type_name_tag();
            this.state = 1587;
            this.match(YQLParser.COLON);
            this.state = 1588;
            this.type_name_or_bind();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public struct_arg_positional(): Struct_arg_positionalContext {
        let localContext = new Struct_arg_positionalContext(this.context, this.state);
        this.enterRule(localContext, 164, YQLParser.RULE_struct_arg_positional);
        let _la: number;
        try {
            this.state = 1602;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 114, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1590;
                this.type_name_tag();
                this.state = 1591;
                this.type_name_or_bind();
                this.state = 1596;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196 || _la === 198) {
                    {
                    this.state = 1593;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 196) {
                        {
                        this.state = 1592;
                        this.match(YQLParser.NOT);
                        }
                    }

                    this.state = 1595;
                    this.match(YQLParser.NULL);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1598;
                this.type_name_or_bind();
                this.state = 1599;
                this.match(YQLParser.AS);
                this.state = 1600;
                this.type_name_tag();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variant_arg(): Variant_argContext {
        let localContext = new Variant_argContext(this.context, this.state);
        this.enterRule(localContext, 166, YQLParser.RULE_variant_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1607;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 115, this.context) ) {
            case 1:
                {
                this.state = 1604;
                this.type_name_tag();
                this.state = 1605;
                this.match(YQLParser.COLON);
                }
                break;
            }
            this.state = 1609;
            this.type_name_or_bind();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callable_arg(): Callable_argContext {
        let localContext = new Callable_argContext(this.context, this.state);
        this.enterRule(localContext, 168, YQLParser.RULE_callable_arg);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1611;
            this.variant_arg();
            this.state = 1615;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 37) {
                {
                this.state = 1612;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 1613;
                this.match(YQLParser.AUTOMAP);
                this.state = 1614;
                this.match(YQLParser.RBRACE_CURLY);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callable_arg_list(): Callable_arg_listContext {
        let localContext = new Callable_arg_listContext(this.context, this.state);
        this.enterRule(localContext, 170, YQLParser.RULE_callable_arg_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1617;
            this.callable_arg();
            this.state = 1622;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 117, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1618;
                    this.match(YQLParser.COMMA);
                    this.state = 1619;
                    this.callable_arg();
                    }
                    }
                }
                this.state = 1624;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 117, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_decimal(): Type_name_decimalContext {
        let localContext = new Type_name_decimalContext(this.context, this.state);
        this.enterRule(localContext, 172, YQLParser.RULE_type_name_decimal);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1625;
            this.match(YQLParser.DECIMAL);
            this.state = 1626;
            this.match(YQLParser.LPAREN);
            this.state = 1627;
            this.integer_or_bind();
            this.state = 1628;
            this.match(YQLParser.COMMA);
            this.state = 1629;
            this.integer_or_bind();
            this.state = 1630;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_optional(): Type_name_optionalContext {
        let localContext = new Type_name_optionalContext(this.context, this.state);
        this.enterRule(localContext, 174, YQLParser.RULE_type_name_optional);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1632;
            this.match(YQLParser.OPTIONAL);
            this.state = 1633;
            this.match(YQLParser.LESS);
            this.state = 1634;
            this.type_name_or_bind();
            this.state = 1635;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_tuple(): Type_name_tupleContext {
        let localContext = new Type_name_tupleContext(this.context, this.state);
        this.enterRule(localContext, 176, YQLParser.RULE_type_name_tuple);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1637;
            this.match(YQLParser.TUPLE);
            this.state = 1654;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LESS:
                {
                this.state = 1638;
                this.match(YQLParser.LESS);
                this.state = 1650;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33 || _la === 70 || _la === 96 || _la === 106 || _la === 119 || _la === 138 || _la === 182 || _la === 208 || ((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & 203423745) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & 33555457) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & 7) !== 0)) {
                    {
                    this.state = 1639;
                    this.type_name_or_bind();
                    this.state = 1644;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 118, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 1640;
                            this.match(YQLParser.COMMA);
                            this.state = 1641;
                            this.type_name_or_bind();
                            }
                            }
                        }
                        this.state = 1646;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 118, this.context);
                    }
                    this.state = 1648;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 26) {
                        {
                        this.state = 1647;
                        this.match(YQLParser.COMMA);
                        }
                    }

                    }
                }

                this.state = 1652;
                this.match(YQLParser.GREATER);
                }
                break;
            case YQLParser.NOT_EQUALS2:
                {
                this.state = 1653;
                this.match(YQLParser.NOT_EQUALS2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_struct(): Type_name_structContext {
        let localContext = new Type_name_structContext(this.context, this.state);
        this.enterRule(localContext, 178, YQLParser.RULE_type_name_struct);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1656;
            this.match(YQLParser.STRUCT);
            this.state = 1673;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LESS:
                {
                this.state = 1657;
                this.match(YQLParser.LESS);
                this.state = 1669;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3221223425) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967263) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4290772479) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294835695) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4292870143) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294934527) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294688767) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4278181759) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1073610745) !== 0)) {
                    {
                    this.state = 1658;
                    this.struct_arg();
                    this.state = 1663;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 122, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 1659;
                            this.match(YQLParser.COMMA);
                            this.state = 1660;
                            this.struct_arg();
                            }
                            }
                        }
                        this.state = 1665;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 122, this.context);
                    }
                    this.state = 1667;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 26) {
                        {
                        this.state = 1666;
                        this.match(YQLParser.COMMA);
                        }
                    }

                    }
                }

                this.state = 1671;
                this.match(YQLParser.GREATER);
                }
                break;
            case YQLParser.NOT_EQUALS2:
                {
                this.state = 1672;
                this.match(YQLParser.NOT_EQUALS2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_variant(): Type_name_variantContext {
        let localContext = new Type_name_variantContext(this.context, this.state);
        this.enterRule(localContext, 180, YQLParser.RULE_type_name_variant);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1675;
            this.match(YQLParser.VARIANT);
            this.state = 1676;
            this.match(YQLParser.LESS);
            this.state = 1677;
            this.variant_arg();
            this.state = 1682;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 126, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1678;
                    this.match(YQLParser.COMMA);
                    this.state = 1679;
                    this.variant_arg();
                    }
                    }
                }
                this.state = 1684;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 126, this.context);
            }
            this.state = 1686;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 1685;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1688;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_list(): Type_name_listContext {
        let localContext = new Type_name_listContext(this.context, this.state);
        this.enterRule(localContext, 182, YQLParser.RULE_type_name_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1690;
            this.match(YQLParser.LIST);
            this.state = 1691;
            this.match(YQLParser.LESS);
            this.state = 1692;
            this.type_name_or_bind();
            this.state = 1693;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_stream(): Type_name_streamContext {
        let localContext = new Type_name_streamContext(this.context, this.state);
        this.enterRule(localContext, 184, YQLParser.RULE_type_name_stream);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1695;
            this.match(YQLParser.STREAM);
            this.state = 1696;
            this.match(YQLParser.LESS);
            this.state = 1697;
            this.type_name_or_bind();
            this.state = 1698;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_flow(): Type_name_flowContext {
        let localContext = new Type_name_flowContext(this.context, this.state);
        this.enterRule(localContext, 186, YQLParser.RULE_type_name_flow);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1700;
            this.match(YQLParser.FLOW);
            this.state = 1701;
            this.match(YQLParser.LESS);
            this.state = 1702;
            this.type_name_or_bind();
            this.state = 1703;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_dict(): Type_name_dictContext {
        let localContext = new Type_name_dictContext(this.context, this.state);
        this.enterRule(localContext, 188, YQLParser.RULE_type_name_dict);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1705;
            this.match(YQLParser.DICT);
            this.state = 1706;
            this.match(YQLParser.LESS);
            this.state = 1707;
            this.type_name_or_bind();
            this.state = 1708;
            this.match(YQLParser.COMMA);
            this.state = 1709;
            this.type_name_or_bind();
            this.state = 1710;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_set(): Type_name_setContext {
        let localContext = new Type_name_setContext(this.context, this.state);
        this.enterRule(localContext, 190, YQLParser.RULE_type_name_set);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1712;
            this.match(YQLParser.SET);
            this.state = 1713;
            this.match(YQLParser.LESS);
            this.state = 1714;
            this.type_name_or_bind();
            this.state = 1715;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_enum(): Type_name_enumContext {
        let localContext = new Type_name_enumContext(this.context, this.state);
        this.enterRule(localContext, 192, YQLParser.RULE_type_name_enum);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1717;
            this.match(YQLParser.ENUM);
            this.state = 1718;
            this.match(YQLParser.LESS);
            this.state = 1719;
            this.type_name_tag();
            this.state = 1724;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 128, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1720;
                    this.match(YQLParser.COMMA);
                    this.state = 1721;
                    this.type_name_tag();
                    }
                    }
                }
                this.state = 1726;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 128, this.context);
            }
            this.state = 1728;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 1727;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1730;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_resource(): Type_name_resourceContext {
        let localContext = new Type_name_resourceContext(this.context, this.state);
        this.enterRule(localContext, 194, YQLParser.RULE_type_name_resource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1732;
            this.match(YQLParser.RESOURCE);
            this.state = 1733;
            this.match(YQLParser.LESS);
            this.state = 1734;
            this.type_name_tag();
            this.state = 1735;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_tagged(): Type_name_taggedContext {
        let localContext = new Type_name_taggedContext(this.context, this.state);
        this.enterRule(localContext, 196, YQLParser.RULE_type_name_tagged);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1737;
            this.match(YQLParser.TAGGED);
            this.state = 1738;
            this.match(YQLParser.LESS);
            this.state = 1739;
            this.type_name_or_bind();
            this.state = 1740;
            this.match(YQLParser.COMMA);
            this.state = 1741;
            this.type_name_tag();
            this.state = 1742;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_callable(): Type_name_callableContext {
        let localContext = new Type_name_callableContext(this.context, this.state);
        this.enterRule(localContext, 198, YQLParser.RULE_type_name_callable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1744;
            this.match(YQLParser.CALLABLE);
            this.state = 1745;
            this.match(YQLParser.LESS);
            this.state = 1746;
            this.match(YQLParser.LPAREN);
            this.state = 1748;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3221223425) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294836207) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294950911) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1073741821) !== 0)) {
                {
                this.state = 1747;
                this.callable_arg_list();
                }
            }

            this.state = 1751;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 1750;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1757;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43) {
                {
                this.state = 1753;
                this.match(YQLParser.LBRACE_SQUARE);
                this.state = 1754;
                this.callable_arg_list();
                this.state = 1755;
                this.match(YQLParser.RBRACE_SQUARE);
                }
            }

            this.state = 1759;
            this.match(YQLParser.RPAREN);
            this.state = 1760;
            this.match(YQLParser.ARROW);
            this.state = 1761;
            this.type_name_or_bind();
            this.state = 1762;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_composite(): Type_name_compositeContext {
        let localContext = new Type_name_compositeContext(this.context, this.state);
        this.enterRule(localContext, 200, YQLParser.RULE_type_name_composite);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1777;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.OPTIONAL:
                {
                this.state = 1764;
                this.type_name_optional();
                }
                break;
            case YQLParser.TUPLE:
                {
                this.state = 1765;
                this.type_name_tuple();
                }
                break;
            case YQLParser.STRUCT:
                {
                this.state = 1766;
                this.type_name_struct();
                }
                break;
            case YQLParser.VARIANT:
                {
                this.state = 1767;
                this.type_name_variant();
                }
                break;
            case YQLParser.LIST:
                {
                this.state = 1768;
                this.type_name_list();
                }
                break;
            case YQLParser.STREAM:
                {
                this.state = 1769;
                this.type_name_stream();
                }
                break;
            case YQLParser.FLOW:
                {
                this.state = 1770;
                this.type_name_flow();
                }
                break;
            case YQLParser.DICT:
                {
                this.state = 1771;
                this.type_name_dict();
                }
                break;
            case YQLParser.SET:
                {
                this.state = 1772;
                this.type_name_set();
                }
                break;
            case YQLParser.ENUM:
                {
                this.state = 1773;
                this.type_name_enum();
                }
                break;
            case YQLParser.RESOURCE:
                {
                this.state = 1774;
                this.type_name_resource();
                }
                break;
            case YQLParser.TAGGED:
                {
                this.state = 1775;
                this.type_name_tagged();
                }
                break;
            case YQLParser.CALLABLE:
                {
                this.state = 1776;
                this.type_name_callable();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1782;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 29) {
                {
                {
                this.state = 1779;
                this.match(YQLParser.QUESTION);
                }
                }
                this.state = 1784;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name(): Type_nameContext {
        let localContext = new Type_nameContext(this.context, this.state);
        this.enterRule(localContext, 202, YQLParser.RULE_type_name);
        let _la: number;
        try {
            this.state = 1796;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.CALLABLE:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1785;
                this.type_name_composite();
                }
                break;
            case YQLParser.DECIMAL:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1788;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.DECIMAL:
                    {
                    this.state = 1786;
                    this.type_name_decimal();
                    }
                    break;
                case YQLParser.STRING_VALUE:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 1787;
                    this.type_name_simple();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1793;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 29) {
                    {
                    {
                    this.state = 1790;
                    this.match(YQLParser.QUESTION);
                    }
                    }
                    this.state = 1795;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        let localContext = new Type_name_or_bindContext(this.context, this.state);
        this.enterRule(localContext, 204, YQLParser.RULE_type_name_or_bind);
        try {
            this.state = 1800;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.CALLABLE:
            case YQLParser.DECIMAL:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1798;
                this.type_name();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1799;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public value_constructor_literal(): Value_constructor_literalContext {
        let localContext = new Value_constructor_literalContext(this.context, this.state);
        this.enterRule(localContext, 206, YQLParser.RULE_value_constructor_literal);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1802;
            this.match(YQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public value_constructor(): Value_constructorContext {
        let localContext = new Value_constructorContext(this.context, this.state);
        this.enterRule(localContext, 208, YQLParser.RULE_value_constructor);
        try {
            this.state = 1827;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1804;
                this.match(YQLParser.VARIANT);
                this.state = 1805;
                this.match(YQLParser.LPAREN);
                this.state = 1806;
                this.expr();
                this.state = 1807;
                this.match(YQLParser.COMMA);
                this.state = 1808;
                this.expr();
                this.state = 1809;
                this.match(YQLParser.COMMA);
                this.state = 1810;
                this.expr();
                this.state = 1811;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.ENUM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1813;
                this.match(YQLParser.ENUM);
                this.state = 1814;
                this.match(YQLParser.LPAREN);
                this.state = 1815;
                this.expr();
                this.state = 1816;
                this.match(YQLParser.COMMA);
                this.state = 1817;
                this.expr();
                this.state = 1818;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.CALLABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1820;
                this.match(YQLParser.CALLABLE);
                this.state = 1821;
                this.match(YQLParser.LPAREN);
                this.state = 1822;
                this.expr();
                this.state = 1823;
                this.match(YQLParser.COMMA);
                this.state = 1824;
                this.expr();
                this.state = 1825;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declare_stmt(): Declare_stmtContext {
        let localContext = new Declare_stmtContext(this.context, this.state);
        this.enterRule(localContext, 210, YQLParser.RULE_declare_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1829;
            this.match(YQLParser.DECLARE);
            this.state = 1830;
            this.bind_parameter();
            this.state = 1831;
            this.match(YQLParser.AS);
            this.state = 1832;
            this.type_name();
            this.state = 1835;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 1833;
                this.match(YQLParser.EQUALS);
                this.state = 1834;
                this.literal_value();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public module_path(): Module_pathContext {
        let localContext = new Module_pathContext(this.context, this.state);
        this.enterRule(localContext, 212, YQLParser.RULE_module_path);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1838;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1837;
                this.match(YQLParser.DOT);
                }
            }

            this.state = 1840;
            this.an_id();
            this.state = 1845;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1841;
                this.match(YQLParser.DOT);
                this.state = 1842;
                this.an_id();
                }
                }
                this.state = 1847;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public import_stmt(): Import_stmtContext {
        let localContext = new Import_stmtContext(this.context, this.state);
        this.enterRule(localContext, 214, YQLParser.RULE_import_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1848;
            this.match(YQLParser.IMPORT);
            this.state = 1849;
            this.module_path();
            this.state = 1850;
            this.match(YQLParser.SYMBOLS);
            this.state = 1851;
            this.named_bind_parameter_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public export_stmt(): Export_stmtContext {
        let localContext = new Export_stmtContext(this.context, this.state);
        this.enterRule(localContext, 216, YQLParser.RULE_export_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1853;
            this.match(YQLParser.EXPORT);
            this.state = 1854;
            this.bind_parameter_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public call_action(): Call_actionContext {
        let localContext = new Call_actionContext(this.context, this.state);
        this.enterRule(localContext, 218, YQLParser.RULE_call_action);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1858;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
                {
                this.state = 1856;
                this.bind_parameter();
                }
                break;
            case YQLParser.EMPTY_ACTION:
                {
                this.state = 1857;
                this.match(YQLParser.EMPTY_ACTION);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1860;
            this.match(YQLParser.LPAREN);
            this.state = 1862;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4030992413) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294901759) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & 4294967295) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 4294967295) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 524287) !== 0)) {
                {
                this.state = 1861;
                this.expr_list();
                }
            }

            this.state = 1864;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inline_action(): Inline_actionContext {
        let localContext = new Inline_actionContext(this.context, this.state);
        this.enterRule(localContext, 220, YQLParser.RULE_inline_action);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1866;
            this.match(YQLParser.BEGIN);
            this.state = 1867;
            this.define_action_or_subquery_body();
            this.state = 1868;
            this.match(YQLParser.END);
            this.state = 1869;
            this.match(YQLParser.DO);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public do_stmt(): Do_stmtContext {
        let localContext = new Do_stmtContext(this.context, this.state);
        this.enterRule(localContext, 222, YQLParser.RULE_do_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1871;
            this.match(YQLParser.DO);
            this.state = 1874;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
            case YQLParser.EMPTY_ACTION:
                {
                this.state = 1872;
                this.call_action();
                }
                break;
            case YQLParser.BEGIN:
                {
                this.state = 1873;
                this.inline_action();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pragma_stmt(): Pragma_stmtContext {
        let localContext = new Pragma_stmtContext(this.context, this.state);
        this.enterRule(localContext, 224, YQLParser.RULE_pragma_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1876;
            this.match(YQLParser.PRAGMA);
            this.state = 1877;
            this.opt_id_prefix_or_type();
            this.state = 1878;
            this.an_id();
            this.state = 1892;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.EQUALS:
                {
                this.state = 1879;
                this.match(YQLParser.EQUALS);
                this.state = 1880;
                this.pragma_value();
                }
                break;
            case YQLParser.LPAREN:
                {
                this.state = 1881;
                this.match(YQLParser.LPAREN);
                this.state = 1882;
                this.pragma_value();
                this.state = 1887;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 26) {
                    {
                    {
                    this.state = 1883;
                    this.match(YQLParser.COMMA);
                    this.state = 1884;
                    this.pragma_value();
                    }
                    }
                    this.state = 1889;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1890;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.EOF:
            case YQLParser.SEMICOLON:
            case YQLParser.END:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pragma_value(): Pragma_valueContext {
        let localContext = new Pragma_valueContext(this.context, this.state);
        this.enterRule(localContext, 226, YQLParser.RULE_pragma_value);
        try {
            this.state = 1899;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.PLUS:
            case YQLParser.MINUS:
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
            case YQLParser.REAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1894;
                this.signed_number();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1895;
                this.id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1896;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.FALSE:
            case YQLParser.TRUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1897;
                this.bool_value();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1898;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sort_specification(): Sort_specificationContext {
        let localContext = new Sort_specificationContext(this.context, this.state);
        this.enterRule(localContext, 228, YQLParser.RULE_sort_specification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1901;
            this.expr();
            this.state = 1903;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56 || _la === 103) {
                {
                this.state = 1902;
                _la = this.tokenStream.LA(1);
                if(!(_la === 56 || _la === 103)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sort_specification_list(): Sort_specification_listContext {
        let localContext = new Sort_specification_listContext(this.context, this.state);
        this.enterRule(localContext, 230, YQLParser.RULE_sort_specification_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1905;
            this.sort_specification();
            this.state = 1910;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 1906;
                this.match(YQLParser.COMMA);
                this.state = 1907;
                this.sort_specification();
                }
                }
                this.state = 1912;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_stmt(): Select_stmtContext {
        let localContext = new Select_stmtContext(this.context, this.state);
        this.enterRule(localContext, 232, YQLParser.RULE_select_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1913;
            this.select_kind_parenthesis();
            this.state = 1919;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 124 || _la === 168 || _la === 295) {
                {
                {
                this.state = 1914;
                this.select_op();
                this.state = 1915;
                this.select_kind_parenthesis();
                }
                }
                this.state = 1921;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_unparenthesized_stmt(): Select_unparenthesized_stmtContext {
        let localContext = new Select_unparenthesized_stmtContext(this.context, this.state);
        this.enterRule(localContext, 234, YQLParser.RULE_select_unparenthesized_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1922;
            this.select_kind_partial();
            this.state = 1928;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 124 || _la === 168 || _la === 295) {
                {
                {
                this.state = 1923;
                this.select_op();
                this.state = 1924;
                this.select_kind_parenthesis();
                }
                }
                this.state = 1930;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_kind_parenthesis(): Select_kind_parenthesisContext {
        let localContext = new Select_kind_parenthesisContext(this.context, this.state);
        this.enterRule(localContext, 236, YQLParser.RULE_select_kind_parenthesis);
        try {
            this.state = 1936;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1931;
                this.select_kind_partial();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1932;
                this.match(YQLParser.LPAREN);
                this.state = 1933;
                this.select_kind_partial();
                this.state = 1934;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_op(): Select_opContext {
        let localContext = new Select_opContext(this.context, this.state);
        this.enterRule(localContext, 238, YQLParser.RULE_select_op);
        let _la: number;
        try {
            this.state = 1944;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.UNION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1938;
                this.match(YQLParser.UNION);
                this.state = 1940;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 48) {
                    {
                    this.state = 1939;
                    this.match(YQLParser.ALL);
                    }
                }

                }
                break;
            case YQLParser.INTERSECT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1942;
                this.match(YQLParser.INTERSECT);
                }
                break;
            case YQLParser.EXCEPT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1943;
                this.match(YQLParser.EXCEPT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_kind_partial(): Select_kind_partialContext {
        let localContext = new Select_kind_partialContext(this.context, this.state);
        this.enterRule(localContext, 240, YQLParser.RULE_select_kind_partial);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1946;
            this.select_kind();
            this.state = 1953;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 181) {
                {
                this.state = 1947;
                this.match(YQLParser.LIMIT);
                this.state = 1948;
                this.expr();
                this.state = 1951;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26 || _la === 202) {
                    {
                    this.state = 1949;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 26 || _la === 202)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1950;
                    this.expr();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_kind(): Select_kindContext {
        let localContext = new Select_kindContext(this.context, this.state);
        this.enterRule(localContext, 242, YQLParser.RULE_select_kind);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1956;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 1955;
                this.match(YQLParser.DISCARD);
                }
            }

            this.state = 1961;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.PROCESS:
                {
                this.state = 1958;
                this.process_core();
                }
                break;
            case YQLParser.REDUCE:
                {
                this.state = 1959;
                this.reduce_core();
                }
                break;
            case YQLParser.FROM:
            case YQLParser.SELECT:
                {
                this.state = 1960;
                this.select_core();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1966;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 169) {
                {
                this.state = 1963;
                this.match(YQLParser.INTO);
                this.state = 1964;
                this.match(YQLParser.RESULT);
                this.state = 1965;
                this.pure_column_or_named();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public process_core(): Process_coreContext {
        let localContext = new Process_coreContext(this.context, this.state);
        this.enterRule(localContext, 244, YQLParser.RULE_process_core);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1968;
            this.match(YQLParser.PROCESS);
            this.state = 1970;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 161, this.context) ) {
            case 1:
                {
                this.state = 1969;
                this.match(YQLParser.STREAM);
                }
                break;
            }
            this.state = 1972;
            this.named_single_source();
            this.state = 1977;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 1973;
                this.match(YQLParser.COMMA);
                this.state = 1974;
                this.named_single_source();
                }
                }
                this.state = 1979;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2001;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 303) {
                {
                this.state = 1980;
                this.match(YQLParser.USING);
                this.state = 1981;
                this.using_call_expr();
                this.state = 1984;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 55) {
                    {
                    this.state = 1982;
                    this.match(YQLParser.AS);
                    this.state = 1983;
                    this.an_id();
                    }
                }

                this.state = 1988;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 1986;
                    this.match(YQLParser.WITH);
                    this.state = 1987;
                    this.external_call_settings();
                    }
                }

                this.state = 1991;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 310) {
                    {
                    this.state = 1990;
                    this.where_expr();
                    }
                }

                this.state = 1995;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 152) {
                    {
                    this.state = 1993;
                    this.match(YQLParser.HAVING);
                    this.state = 1994;
                    this.expr();
                    }
                }

                this.state = 1999;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 57) {
                    {
                    this.state = 1997;
                    this.match(YQLParser.ASSUME);
                    this.state = 1998;
                    this.order_by_clause();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public external_call_param(): External_call_paramContext {
        let localContext = new External_call_paramContext(this.context, this.state);
        this.enterRule(localContext, 246, YQLParser.RULE_external_call_param);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2003;
            this.an_id();
            this.state = 2004;
            this.match(YQLParser.EQUALS);
            this.state = 2005;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public external_call_settings(): External_call_settingsContext {
        let localContext = new External_call_settingsContext(this.context, this.state);
        this.enterRule(localContext, 248, YQLParser.RULE_external_call_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2007;
            this.external_call_param();
            this.state = 2012;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2008;
                this.match(YQLParser.COMMA);
                this.state = 2009;
                this.external_call_param();
                }
                }
                this.state = 2014;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reduce_core(): Reduce_coreContext {
        let localContext = new Reduce_coreContext(this.context, this.state);
        this.enterRule(localContext, 250, YQLParser.RULE_reduce_core);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2015;
            this.match(YQLParser.REDUCE);
            this.state = 2016;
            this.named_single_source();
            this.state = 2021;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2017;
                this.match(YQLParser.COMMA);
                this.state = 2018;
                this.named_single_source();
                }
                }
                this.state = 2023;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2026;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 225) {
                {
                this.state = 2024;
                this.match(YQLParser.PRESORT);
                this.state = 2025;
                this.sort_specification_list();
                }
            }

            this.state = 2028;
            this.match(YQLParser.ON);
            this.state = 2029;
            this.column_list();
            this.state = 2030;
            this.match(YQLParser.USING);
            this.state = 2032;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 172, this.context) ) {
            case 1:
                {
                this.state = 2031;
                this.match(YQLParser.ALL);
                }
                break;
            }
            this.state = 2034;
            this.using_call_expr();
            this.state = 2037;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2035;
                this.match(YQLParser.AS);
                this.state = 2036;
                this.an_id();
                }
            }

            this.state = 2040;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 310) {
                {
                this.state = 2039;
                this.where_expr();
                }
            }

            this.state = 2044;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 2042;
                this.match(YQLParser.HAVING);
                this.state = 2043;
                this.expr();
                }
            }

            this.state = 2048;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 57) {
                {
                this.state = 2046;
                this.match(YQLParser.ASSUME);
                this.state = 2047;
                this.order_by_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext {
        let localContext = new Opt_set_quantifierContext(this.context, this.state);
        this.enterRule(localContext, 252, YQLParser.RULE_opt_set_quantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2051;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                {
                this.state = 2050;
                _la = this.tokenStream.LA(1);
                if(!(_la === 48 || _la === 110)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_core(): Select_coreContext {
        let localContext = new Select_coreContext(this.context, this.state);
        this.enterRule(localContext, 254, YQLParser.RULE_select_core);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2055;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 142) {
                {
                this.state = 2053;
                this.match(YQLParser.FROM);
                this.state = 2054;
                this.join_source();
                }
            }

            this.state = 2057;
            this.match(YQLParser.SELECT);
            this.state = 2059;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 179, this.context) ) {
            case 1:
                {
                this.state = 2058;
                this.match(YQLParser.STREAM);
                }
                break;
            }
            this.state = 2061;
            this.opt_set_quantifier();
            this.state = 2062;
            this.result_column();
            this.state = 2067;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 180, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2063;
                    this.match(YQLParser.COMMA);
                    this.state = 2064;
                    this.result_column();
                    }
                    }
                }
                this.state = 2069;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 180, this.context);
            }
            this.state = 2071;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 2070;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 2075;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 313) {
                {
                this.state = 2073;
                this.match(YQLParser.WITHOUT);
                this.state = 2074;
                this.without_column_list();
                }
            }

            this.state = 2079;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 142) {
                {
                this.state = 2077;
                this.match(YQLParser.FROM);
                this.state = 2078;
                this.join_source();
                }
            }

            this.state = 2082;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 310) {
                {
                this.state = 2081;
                this.where_expr();
                }
            }

            this.state = 2085;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 148) {
                {
                this.state = 2084;
                this.group_by_clause();
                }
            }

            this.state = 2089;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 2087;
                this.match(YQLParser.HAVING);
                this.state = 2088;
                this.expr();
                }
            }

            this.state = 2092;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 311) {
                {
                this.state = 2091;
                this.window_clause();
                }
            }

            this.state = 2095;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 57 || _la === 210) {
                {
                this.state = 2094;
                this.ext_order_by_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_recognition_clause(): Row_pattern_recognition_clauseContext {
        let localContext = new Row_pattern_recognition_clauseContext(this.context, this.state);
        this.enterRule(localContext, 256, YQLParser.RULE_row_pattern_recognition_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2097;
            this.match(YQLParser.MATCH_RECOGNIZE);
            this.state = 2098;
            this.match(YQLParser.LPAREN);
            this.state = 2100;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215) {
                {
                this.state = 2099;
                this.window_partition_clause();
                }
            }

            this.state = 2103;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 210) {
                {
                this.state = 2102;
                this.order_by_clause();
                }
            }

            this.state = 2106;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 188) {
                {
                this.state = 2105;
                this.row_pattern_measures();
                }
            }

            this.state = 2109;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 48 || _la === 205) {
                {
                this.state = 2108;
                this.row_pattern_rows_per_match();
                }
            }

            this.state = 2111;
            this.row_pattern_common_syntax();
            this.state = 2112;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_rows_per_match(): Row_pattern_rows_per_matchContext {
        let localContext = new Row_pattern_rows_per_matchContext(this.context, this.state);
        this.enterRule(localContext, 258, YQLParser.RULE_row_pattern_rows_per_match);
        let _la: number;
        try {
            this.state = 2125;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ONE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2114;
                this.match(YQLParser.ONE);
                this.state = 2115;
                this.match(YQLParser.ROW);
                this.state = 2116;
                this.match(YQLParser.PER);
                this.state = 2117;
                this.match(YQLParser.MATCH);
                }
                break;
            case YQLParser.ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2118;
                this.match(YQLParser.ALL);
                this.state = 2119;
                this.match(YQLParser.ROWS);
                this.state = 2120;
                this.match(YQLParser.PER);
                this.state = 2121;
                this.match(YQLParser.MATCH);
                this.state = 2123;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 203 || _la === 266 || _la === 312) {
                    {
                    this.state = 2122;
                    this.row_pattern_empty_match_handling();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_empty_match_handling(): Row_pattern_empty_match_handlingContext {
        let localContext = new Row_pattern_empty_match_handlingContext(this.context, this.state);
        this.enterRule(localContext, 260, YQLParser.RULE_row_pattern_empty_match_handling);
        try {
            this.state = 2136;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SHOW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2127;
                this.match(YQLParser.SHOW);
                this.state = 2128;
                this.match(YQLParser.EMPTY);
                this.state = 2129;
                this.match(YQLParser.MATCHES);
                }
                break;
            case YQLParser.OMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2130;
                this.match(YQLParser.OMIT);
                this.state = 2131;
                this.match(YQLParser.EMPTY);
                this.state = 2132;
                this.match(YQLParser.MATCHES);
                }
                break;
            case YQLParser.WITH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2133;
                this.match(YQLParser.WITH);
                this.state = 2134;
                this.match(YQLParser.UNMATCHED);
                this.state = 2135;
                this.match(YQLParser.ROWS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_measures(): Row_pattern_measuresContext {
        let localContext = new Row_pattern_measuresContext(this.context, this.state);
        this.enterRule(localContext, 262, YQLParser.RULE_row_pattern_measures);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2138;
            this.match(YQLParser.MEASURES);
            this.state = 2139;
            this.row_pattern_measure_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_measure_list(): Row_pattern_measure_listContext {
        let localContext = new Row_pattern_measure_listContext(this.context, this.state);
        this.enterRule(localContext, 264, YQLParser.RULE_row_pattern_measure_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2141;
            this.row_pattern_measure_definition();
            this.state = 2146;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2142;
                this.match(YQLParser.COMMA);
                this.state = 2143;
                this.row_pattern_measure_definition();
                }
                }
                this.state = 2148;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_measure_definition(): Row_pattern_measure_definitionContext {
        let localContext = new Row_pattern_measure_definitionContext(this.context, this.state);
        this.enterRule(localContext, 266, YQLParser.RULE_row_pattern_measure_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2149;
            this.expr();
            this.state = 2150;
            this.match(YQLParser.AS);
            this.state = 2151;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_common_syntax(): Row_pattern_common_syntaxContext {
        let localContext = new Row_pattern_common_syntaxContext(this.context, this.state);
        this.enterRule(localContext, 268, YQLParser.RULE_row_pattern_common_syntax);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2156;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2153;
                this.match(YQLParser.AFTER);
                this.state = 2154;
                this.match(YQLParser.MATCH);
                this.state = 2155;
                this.row_pattern_skip_to();
                }
            }

            this.state = 2159;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 163 || _la === 261) {
                {
                this.state = 2158;
                this.row_pattern_initial_or_seek();
                }
            }

            this.state = 2161;
            this.match(YQLParser.PATTERN);
            this.state = 2162;
            this.match(YQLParser.LPAREN);
            this.state = 2163;
            this.row_pattern();
            this.state = 2164;
            this.match(YQLParser.RPAREN);
            this.state = 2166;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 272) {
                {
                this.state = 2165;
                this.row_pattern_subset_clause();
                }
            }

            this.state = 2168;
            this.match(YQLParser.DEFINE);
            this.state = 2169;
            this.row_pattern_definition_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_skip_to(): Row_pattern_skip_toContext {
        let localContext = new Row_pattern_skip_toContext(this.context, this.state);
        this.enterRule(localContext, 270, YQLParser.RULE_row_pattern_skip_to);
        try {
            this.state = 2190;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 200, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2171;
                this.match(YQLParser.SKIP_RULE);
                this.state = 2172;
                this.match(YQLParser.TO);
                this.state = 2173;
                this.match(YQLParser.NEXT);
                this.state = 2174;
                this.match(YQLParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2175;
                this.match(YQLParser.SKIP_RULE);
                this.state = 2176;
                this.match(YQLParser.PAST);
                this.state = 2177;
                this.match(YQLParser.LAST);
                this.state = 2178;
                this.match(YQLParser.ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2179;
                this.match(YQLParser.SKIP_RULE);
                this.state = 2180;
                this.match(YQLParser.TO);
                this.state = 2181;
                this.match(YQLParser.FIRST);
                this.state = 2182;
                this.row_pattern_skip_to_variable_name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2183;
                this.match(YQLParser.SKIP_RULE);
                this.state = 2184;
                this.match(YQLParser.TO);
                this.state = 2185;
                this.match(YQLParser.LAST);
                this.state = 2186;
                this.row_pattern_skip_to_variable_name();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2187;
                this.match(YQLParser.SKIP_RULE);
                this.state = 2188;
                this.match(YQLParser.TO);
                this.state = 2189;
                this.row_pattern_skip_to_variable_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_skip_to_variable_name(): Row_pattern_skip_to_variable_nameContext {
        let localContext = new Row_pattern_skip_to_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 272, YQLParser.RULE_row_pattern_skip_to_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2192;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_initial_or_seek(): Row_pattern_initial_or_seekContext {
        let localContext = new Row_pattern_initial_or_seekContext(this.context, this.state);
        this.enterRule(localContext, 274, YQLParser.RULE_row_pattern_initial_or_seek);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2194;
            _la = this.tokenStream.LA(1);
            if(!(_la === 163 || _la === 261)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern(): Row_patternContext {
        let localContext = new Row_patternContext(this.context, this.state);
        this.enterRule(localContext, 276, YQLParser.RULE_row_pattern);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2196;
            this.row_pattern_term();
            this.state = 2201;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 13) {
                {
                {
                this.state = 2197;
                this.match(YQLParser.PIPE);
                this.state = 2198;
                this.row_pattern_term();
                }
                }
                this.state = 2203;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_term(): Row_pattern_termContext {
        let localContext = new Row_pattern_termContext(this.context, this.state);
        this.enterRule(localContext, 278, YQLParser.RULE_row_pattern_term);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2205;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 2204;
                this.row_pattern_factor();
                }
                }
                this.state = 2207;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 27)) & ~0x1F) === 0 && ((1 << (_la - 27)) & 5185) !== 0) || _la === 221 || _la === 317 || _la === 318);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_factor(): Row_pattern_factorContext {
        let localContext = new Row_pattern_factorContext(this.context, this.state);
        this.enterRule(localContext, 280, YQLParser.RULE_row_pattern_factor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2209;
            this.row_pattern_primary();
            this.state = 2211;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
            case 1:
                {
                this.state = 2210;
                this.row_pattern_quantifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_quantifier(): Row_pattern_quantifierContext {
        let localContext = new Row_pattern_quantifierContext(this.context, this.state);
        this.enterRule(localContext, 282, YQLParser.RULE_row_pattern_quantifier);
        let _la: number;
        try {
            this.state = 2241;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 210, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2213;
                this.match(YQLParser.ASTERISK);
                this.state = 2215;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 2214;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2217;
                this.match(YQLParser.PLUS);
                this.state = 2219;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 2218;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2221;
                this.match(YQLParser.QUESTION);
                this.state = 2223;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 2222;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2225;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 2227;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 319 || _la === 320) {
                    {
                    this.state = 2226;
                    this.integer();
                    }
                }

                this.state = 2229;
                this.match(YQLParser.COMMA);
                this.state = 2231;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 319 || _la === 320) {
                    {
                    this.state = 2230;
                    this.integer();
                    }
                }

                this.state = 2233;
                this.match(YQLParser.RBRACE_CURLY);
                this.state = 2235;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 2234;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2237;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 2238;
                this.integer();
                this.state = 2239;
                this.match(YQLParser.RBRACE_CURLY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_primary(): Row_pattern_primaryContext {
        let localContext = new Row_pattern_primaryContext(this.context, this.state);
        this.enterRule(localContext, 284, YQLParser.RULE_row_pattern_primary);
        let _la: number;
        try {
            this.state = 2258;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2243;
                this.row_pattern_primary_variable_name();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2244;
                this.match(YQLParser.DOLLAR);
                }
                break;
            case YQLParser.CARET:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2245;
                this.match(YQLParser.CARET);
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2246;
                this.match(YQLParser.LPAREN);
                this.state = 2248;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 27)) & ~0x1F) === 0 && ((1 << (_la - 27)) & 5185) !== 0) || _la === 221 || _la === 317 || _la === 318) {
                    {
                    this.state = 2247;
                    this.row_pattern();
                    }
                }

                this.state = 2250;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.LBRACE_CURLY:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2251;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 2252;
                this.match(YQLParser.MINUS);
                this.state = 2253;
                this.row_pattern();
                this.state = 2254;
                this.match(YQLParser.MINUS);
                this.state = 2255;
                this.match(YQLParser.RBRACE_CURLY);
                }
                break;
            case YQLParser.PERMUTE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2257;
                this.row_pattern_permute();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_primary_variable_name(): Row_pattern_primary_variable_nameContext {
        let localContext = new Row_pattern_primary_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 286, YQLParser.RULE_row_pattern_primary_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2260;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_permute(): Row_pattern_permuteContext {
        let localContext = new Row_pattern_permuteContext(this.context, this.state);
        this.enterRule(localContext, 288, YQLParser.RULE_row_pattern_permute);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2262;
            this.match(YQLParser.PERMUTE);
            this.state = 2263;
            this.match(YQLParser.LPAREN);
            this.state = 2264;
            this.row_pattern();
            this.state = 2269;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2265;
                this.match(YQLParser.COMMA);
                this.state = 2266;
                this.row_pattern();
                }
                }
                this.state = 2271;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2272;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_clause(): Row_pattern_subset_clauseContext {
        let localContext = new Row_pattern_subset_clauseContext(this.context, this.state);
        this.enterRule(localContext, 290, YQLParser.RULE_row_pattern_subset_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2274;
            this.match(YQLParser.SUBSET);
            this.state = 2275;
            this.row_pattern_subset_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_list(): Row_pattern_subset_listContext {
        let localContext = new Row_pattern_subset_listContext(this.context, this.state);
        this.enterRule(localContext, 292, YQLParser.RULE_row_pattern_subset_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2277;
            this.row_pattern_subset_item();
            this.state = 2282;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2278;
                this.match(YQLParser.COMMA);
                this.state = 2279;
                this.row_pattern_subset_item();
                }
                }
                this.state = 2284;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_item(): Row_pattern_subset_itemContext {
        let localContext = new Row_pattern_subset_itemContext(this.context, this.state);
        this.enterRule(localContext, 294, YQLParser.RULE_row_pattern_subset_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2285;
            this.row_pattern_subset_item_variable_name();
            this.state = 2286;
            this.match(YQLParser.EQUALS);
            this.state = 2287;
            this.match(YQLParser.LPAREN);
            this.state = 2288;
            this.row_pattern_subset_rhs();
            this.state = 2289;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_item_variable_name(): Row_pattern_subset_item_variable_nameContext {
        let localContext = new Row_pattern_subset_item_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 296, YQLParser.RULE_row_pattern_subset_item_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2291;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_rhs(): Row_pattern_subset_rhsContext {
        let localContext = new Row_pattern_subset_rhsContext(this.context, this.state);
        this.enterRule(localContext, 298, YQLParser.RULE_row_pattern_subset_rhs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2293;
            this.row_pattern_subset_rhs_variable_name();
            this.state = 2298;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2294;
                this.match(YQLParser.COMMA);
                this.state = 2295;
                this.row_pattern_subset_rhs_variable_name();
                }
                }
                this.state = 2300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_rhs_variable_name(): Row_pattern_subset_rhs_variable_nameContext {
        let localContext = new Row_pattern_subset_rhs_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 300, YQLParser.RULE_row_pattern_subset_rhs_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2301;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition_list(): Row_pattern_definition_listContext {
        let localContext = new Row_pattern_definition_listContext(this.context, this.state);
        this.enterRule(localContext, 302, YQLParser.RULE_row_pattern_definition_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2303;
            this.row_pattern_definition();
            this.state = 2308;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2304;
                this.match(YQLParser.COMMA);
                this.state = 2305;
                this.row_pattern_definition();
                }
                }
                this.state = 2310;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition(): Row_pattern_definitionContext {
        let localContext = new Row_pattern_definitionContext(this.context, this.state);
        this.enterRule(localContext, 304, YQLParser.RULE_row_pattern_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2311;
            this.row_pattern_definition_variable_name();
            this.state = 2312;
            this.match(YQLParser.AS);
            this.state = 2313;
            this.row_pattern_definition_search_condition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition_variable_name(): Row_pattern_definition_variable_nameContext {
        let localContext = new Row_pattern_definition_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 306, YQLParser.RULE_row_pattern_definition_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2315;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition_search_condition(): Row_pattern_definition_search_conditionContext {
        let localContext = new Row_pattern_definition_search_conditionContext(this.context, this.state);
        this.enterRule(localContext, 308, YQLParser.RULE_row_pattern_definition_search_condition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2317;
            this.search_condition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public search_condition(): Search_conditionContext {
        let localContext = new Search_conditionContext(this.context, this.state);
        this.enterRule(localContext, 310, YQLParser.RULE_search_condition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2319;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        let localContext = new Row_pattern_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 312, YQLParser.RULE_row_pattern_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2321;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public order_by_clause(): Order_by_clauseContext {
        let localContext = new Order_by_clauseContext(this.context, this.state);
        this.enterRule(localContext, 314, YQLParser.RULE_order_by_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2323;
            this.match(YQLParser.ORDER);
            this.state = 2324;
            this.match(YQLParser.BY);
            this.state = 2325;
            this.sort_specification_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ext_order_by_clause(): Ext_order_by_clauseContext {
        let localContext = new Ext_order_by_clauseContext(this.context, this.state);
        this.enterRule(localContext, 316, YQLParser.RULE_ext_order_by_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2328;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 57) {
                {
                this.state = 2327;
                this.match(YQLParser.ASSUME);
                }
            }

            this.state = 2330;
            this.order_by_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_by_clause(): Group_by_clauseContext {
        let localContext = new Group_by_clauseContext(this.context, this.state);
        this.enterRule(localContext, 318, YQLParser.RULE_group_by_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2332;
            this.match(YQLParser.GROUP);
            this.state = 2334;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 2333;
                this.match(YQLParser.COMPACT);
                }
            }

            this.state = 2336;
            this.match(YQLParser.BY);
            this.state = 2337;
            this.opt_set_quantifier();
            this.state = 2338;
            this.grouping_element_list();
            this.state = 2341;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 2339;
                this.match(YQLParser.WITH);
                this.state = 2340;
                this.an_id();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grouping_element_list(): Grouping_element_listContext {
        let localContext = new Grouping_element_listContext(this.context, this.state);
        this.enterRule(localContext, 320, YQLParser.RULE_grouping_element_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2343;
            this.grouping_element();
            this.state = 2348;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2344;
                this.match(YQLParser.COMMA);
                this.state = 2345;
                this.grouping_element();
                }
                }
                this.state = 2350;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grouping_element(): Grouping_elementContext {
        let localContext = new Grouping_elementContext(this.context, this.state);
        this.enterRule(localContext, 322, YQLParser.RULE_grouping_element);
        try {
            this.state = 2356;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 221, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2351;
                this.ordinary_grouping_set();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2352;
                this.rollup_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2353;
                this.cube_list();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2354;
                this.grouping_sets_specification();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2355;
                this.hopping_window_specification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ordinary_grouping_set(): Ordinary_grouping_setContext {
        let localContext = new Ordinary_grouping_setContext(this.context, this.state);
        this.enterRule(localContext, 324, YQLParser.RULE_ordinary_grouping_set);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2358;
            this.named_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ordinary_grouping_set_list(): Ordinary_grouping_set_listContext {
        let localContext = new Ordinary_grouping_set_listContext(this.context, this.state);
        this.enterRule(localContext, 326, YQLParser.RULE_ordinary_grouping_set_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2360;
            this.ordinary_grouping_set();
            this.state = 2365;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2361;
                this.match(YQLParser.COMMA);
                this.state = 2362;
                this.ordinary_grouping_set();
                }
                }
                this.state = 2367;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollup_list(): Rollup_listContext {
        let localContext = new Rollup_listContext(this.context, this.state);
        this.enterRule(localContext, 328, YQLParser.RULE_rollup_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2368;
            this.match(YQLParser.ROLLUP);
            this.state = 2369;
            this.match(YQLParser.LPAREN);
            this.state = 2370;
            this.ordinary_grouping_set_list();
            this.state = 2371;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cube_list(): Cube_listContext {
        let localContext = new Cube_listContext(this.context, this.state);
        this.enterRule(localContext, 330, YQLParser.RULE_cube_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2373;
            this.match(YQLParser.CUBE);
            this.state = 2374;
            this.match(YQLParser.LPAREN);
            this.state = 2375;
            this.ordinary_grouping_set_list();
            this.state = 2376;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grouping_sets_specification(): Grouping_sets_specificationContext {
        let localContext = new Grouping_sets_specificationContext(this.context, this.state);
        this.enterRule(localContext, 332, YQLParser.RULE_grouping_sets_specification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2378;
            this.match(YQLParser.GROUPING);
            this.state = 2379;
            this.match(YQLParser.SETS);
            this.state = 2380;
            this.match(YQLParser.LPAREN);
            this.state = 2381;
            this.grouping_element_list();
            this.state = 2382;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hopping_window_specification(): Hopping_window_specificationContext {
        let localContext = new Hopping_window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 334, YQLParser.RULE_hopping_window_specification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2384;
            this.match(YQLParser.HOP);
            this.state = 2385;
            this.match(YQLParser.LPAREN);
            this.state = 2386;
            this.expr();
            this.state = 2387;
            this.match(YQLParser.COMMA);
            this.state = 2388;
            this.expr();
            this.state = 2389;
            this.match(YQLParser.COMMA);
            this.state = 2390;
            this.expr();
            this.state = 2391;
            this.match(YQLParser.COMMA);
            this.state = 2392;
            this.expr();
            this.state = 2393;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public result_column(): Result_columnContext {
        let localContext = new Result_columnContext(this.context, this.state);
        this.enterRule(localContext, 336, YQLParser.RULE_result_column);
        try {
            this.state = 2404;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 224, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2395;
                this.opt_id_prefix();
                this.state = 2396;
                this.match(YQLParser.ASTERISK);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2398;
                this.expr();
                this.state = 2402;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.AS:
                    {
                    {
                    this.state = 2399;
                    this.match(YQLParser.AS);
                    this.state = 2400;
                    this.an_id_or_type();
                    }
                    }
                    break;
                case YQLParser.ATTRIBUTES:
                case YQLParser.CONNECT:
                case YQLParser.CONSUMER:
                case YQLParser.DATA:
                case YQLParser.DESCRIBE:
                case YQLParser.DIRECTORY:
                case YQLParser.FIRST:
                case YQLParser.GRANT:
                case YQLParser.INITIAL:
                case YQLParser.LAST:
                case YQLParser.LEGACY:
                case YQLParser.MANAGE:
                case YQLParser.MATCHES:
                case YQLParser.MATCH_RECOGNIZE:
                case YQLParser.MEASURES:
                case YQLParser.MICROSECONDS:
                case YQLParser.MILLISECONDS:
                case YQLParser.MODIFY:
                case YQLParser.NANOSECONDS:
                case YQLParser.NEXT:
                case YQLParser.OMIT:
                case YQLParser.ONE:
                case YQLParser.OPTION:
                case YQLParser.PARALLEL:
                case YQLParser.PAST:
                case YQLParser.PATTERN:
                case YQLParser.PER:
                case YQLParser.PERMUTE:
                case YQLParser.PRIVILEGES:
                case YQLParser.QUEUE:
                case YQLParser.REMOVE:
                case YQLParser.REPLICATION:
                case YQLParser.REVOKE:
                case YQLParser.SECONDS:
                case YQLParser.SEEK:
                case YQLParser.SHOW:
                case YQLParser.SKIP_RULE:
                case YQLParser.SOURCE:
                case YQLParser.SUBSET:
                case YQLParser.TABLES:
                case YQLParser.TOPIC:
                case YQLParser.TYPE:
                case YQLParser.UNMATCHED:
                case YQLParser.STRING_VALUE:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 2401;
                    this.an_id_as_compat();
                    }
                    break;
                case YQLParser.EOF:
                case YQLParser.SEMICOLON:
                case YQLParser.COMMA:
                case YQLParser.RPAREN:
                case YQLParser.ASSUME:
                case YQLParser.END:
                case YQLParser.EXCEPT:
                case YQLParser.FROM:
                case YQLParser.GROUP:
                case YQLParser.HAVING:
                case YQLParser.INTERSECT:
                case YQLParser.INTO:
                case YQLParser.LIMIT:
                case YQLParser.ORDER:
                case YQLParser.RETURNING:
                case YQLParser.UNION:
                case YQLParser.WHERE:
                case YQLParser.WINDOW:
                case YQLParser.WITHOUT:
                    break;
                default:
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_source(): Join_sourceContext {
        let localContext = new Join_sourceContext(this.context, this.state);
        this.enterRule(localContext, 338, YQLParser.RULE_join_source);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2407;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 225, this.context) ) {
            case 1:
                {
                this.state = 2406;
                this.match(YQLParser.ANY);
                }
                break;
            }
            this.state = 2409;
            this.flatten_source();
            this.state = 2420;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26 || _la === 88 || _la === 126 || _la === 143 || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 268443777) !== 0) || _la === 212 || _la === 251) {
                {
                {
                this.state = 2410;
                this.join_op();
                this.state = 2412;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 226, this.context) ) {
                case 1:
                    {
                    this.state = 2411;
                    this.match(YQLParser.ANY);
                    }
                    break;
                }
                this.state = 2414;
                this.flatten_source();
                this.state = 2416;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 204 || _la === 303) {
                    {
                    this.state = 2415;
                    this.join_constraint();
                    }
                }

                }
                }
                this.state = 2422;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_column(): Named_columnContext {
        let localContext = new Named_columnContext(this.context, this.state);
        this.enterRule(localContext, 340, YQLParser.RULE_named_column);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2423;
            this.column_name();
            this.state = 2426;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2424;
                this.match(YQLParser.AS);
                this.state = 2425;
                this.an_id();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flatten_by_arg(): Flatten_by_argContext {
        let localContext = new Flatten_by_argContext(this.context, this.state);
        this.enterRule(localContext, 342, YQLParser.RULE_flatten_by_arg);
        let _la: number;
        try {
            this.state = 2436;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2428;
                this.named_column();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2429;
                this.match(YQLParser.LPAREN);
                this.state = 2430;
                this.named_expr_list();
                this.state = 2432;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26) {
                    {
                    this.state = 2431;
                    this.match(YQLParser.COMMA);
                    }
                }

                this.state = 2434;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flatten_source(): Flatten_sourceContext {
        let localContext = new Flatten_sourceContext(this.context, this.state);
        this.enterRule(localContext, 344, YQLParser.RULE_flatten_source);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2438;
            this.named_single_source();
            this.state = 2448;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 137) {
                {
                this.state = 2439;
                this.match(YQLParser.FLATTEN);
                this.state = 2446;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.BY:
                case YQLParser.DICT:
                case YQLParser.LIST:
                case YQLParser.OPTIONAL:
                    {
                    this.state = 2441;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 106 || _la === 182 || _la === 208) {
                        {
                        this.state = 2440;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 106 || _la === 182 || _la === 208)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 2443;
                    this.match(YQLParser.BY);
                    this.state = 2444;
                    this.flatten_by_arg();
                    }
                    break;
                case YQLParser.COLUMNS:
                    {
                    this.state = 2445;
                    this.match(YQLParser.COLUMNS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_single_source(): Named_single_sourceContext {
        let localContext = new Named_single_sourceContext(this.context, this.state);
        this.enterRule(localContext, 346, YQLParser.RULE_named_single_source);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2450;
            this.single_source();
            this.state = 2452;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
            case 1:
                {
                this.state = 2451;
                this.row_pattern_recognition_clause();
                }
                break;
            }
            this.state = 2462;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 55)) & ~0x1F) === 0 && ((1 << (_la - 55)) & 1342177345) !== 0) || ((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 9217) !== 0) || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & 134219777) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & 1409482373) !== 0) || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 142647537) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & 273091585) !== 0) || ((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & 3758098465) !== 0)) {
                {
                this.state = 2457;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.AS:
                    {
                    {
                    this.state = 2454;
                    this.match(YQLParser.AS);
                    this.state = 2455;
                    this.an_id();
                    }
                    }
                    break;
                case YQLParser.ATTRIBUTES:
                case YQLParser.CONNECT:
                case YQLParser.CONSUMER:
                case YQLParser.DATA:
                case YQLParser.DESCRIBE:
                case YQLParser.DIRECTORY:
                case YQLParser.FIRST:
                case YQLParser.GRANT:
                case YQLParser.INITIAL:
                case YQLParser.LAST:
                case YQLParser.LEGACY:
                case YQLParser.MANAGE:
                case YQLParser.MATCHES:
                case YQLParser.MATCH_RECOGNIZE:
                case YQLParser.MEASURES:
                case YQLParser.MICROSECONDS:
                case YQLParser.MILLISECONDS:
                case YQLParser.MODIFY:
                case YQLParser.NANOSECONDS:
                case YQLParser.NEXT:
                case YQLParser.OMIT:
                case YQLParser.ONE:
                case YQLParser.OPTION:
                case YQLParser.PARALLEL:
                case YQLParser.PAST:
                case YQLParser.PATTERN:
                case YQLParser.PER:
                case YQLParser.PERMUTE:
                case YQLParser.PRIVILEGES:
                case YQLParser.QUEUE:
                case YQLParser.REMOVE:
                case YQLParser.REPLICATION:
                case YQLParser.REVOKE:
                case YQLParser.SECONDS:
                case YQLParser.SEEK:
                case YQLParser.SHOW:
                case YQLParser.SKIP_RULE:
                case YQLParser.SOURCE:
                case YQLParser.SUBSET:
                case YQLParser.TABLES:
                case YQLParser.TOPIC:
                case YQLParser.TYPE:
                case YQLParser.UNMATCHED:
                case YQLParser.STRING_VALUE:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 2456;
                    this.an_id_as_compat();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2460;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 2459;
                    this.pure_column_list();
                    }
                }

                }
            }

            this.state = 2466;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SAMPLE:
                {
                this.state = 2464;
                this.sample_clause();
                }
                break;
            case YQLParser.TABLESAMPLE:
                {
                this.state = 2465;
                this.tablesample_clause();
                }
                break;
            case YQLParser.EOF:
            case YQLParser.SEMICOLON:
            case YQLParser.COMMA:
            case YQLParser.RPAREN:
            case YQLParser.ASSUME:
            case YQLParser.CROSS:
            case YQLParser.END:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUSION:
            case YQLParser.FLATTEN:
            case YQLParser.FULL:
            case YQLParser.GROUP:
            case YQLParser.HAVING:
            case YQLParser.INNER:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.JOIN:
            case YQLParser.LEFT:
            case YQLParser.LIMIT:
            case YQLParser.NATURAL:
            case YQLParser.ON:
            case YQLParser.ORDER:
            case YQLParser.OUTER:
            case YQLParser.PRESORT:
            case YQLParser.RETURNING:
            case YQLParser.RIGHT:
            case YQLParser.SELECT:
            case YQLParser.UNION:
            case YQLParser.USING:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public single_source(): Single_sourceContext {
        let localContext = new Single_sourceContext(this.context, this.state);
        this.enterRule(localContext, 348, YQLParser.RULE_single_source);
        try {
            this.state = 2477;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2468;
                this.table_ref();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2469;
                this.match(YQLParser.LPAREN);
                this.state = 2470;
                this.select_stmt();
                this.state = 2471;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2473;
                this.match(YQLParser.LPAREN);
                this.state = 2474;
                this.values_stmt();
                this.state = 2475;
                this.match(YQLParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sample_clause(): Sample_clauseContext {
        let localContext = new Sample_clauseContext(this.context, this.state);
        this.enterRule(localContext, 350, YQLParser.RULE_sample_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2479;
            this.match(YQLParser.SAMPLE);
            this.state = 2480;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablesample_clause(): Tablesample_clauseContext {
        let localContext = new Tablesample_clauseContext(this.context, this.state);
        this.enterRule(localContext, 352, YQLParser.RULE_tablesample_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2482;
            this.match(YQLParser.TABLESAMPLE);
            this.state = 2483;
            this.sampling_mode();
            this.state = 2484;
            this.match(YQLParser.LPAREN);
            this.state = 2485;
            this.expr();
            this.state = 2486;
            this.match(YQLParser.RPAREN);
            this.state = 2488;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 239) {
                {
                this.state = 2487;
                this.repeatable_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampling_mode(): Sampling_modeContext {
        let localContext = new Sampling_modeContext(this.context, this.state);
        this.enterRule(localContext, 354, YQLParser.RULE_sampling_mode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2490;
            _la = this.tokenStream.LA(1);
            if(!(_la === 66 || _la === 276)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public repeatable_clause(): Repeatable_clauseContext {
        let localContext = new Repeatable_clauseContext(this.context, this.state);
        this.enterRule(localContext, 356, YQLParser.RULE_repeatable_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2492;
            this.match(YQLParser.REPEATABLE);
            this.state = 2493;
            this.match(YQLParser.LPAREN);
            this.state = 2494;
            this.expr();
            this.state = 2495;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_op(): Join_opContext {
        let localContext = new Join_opContext(this.context, this.state);
        this.enterRule(localContext, 358, YQLParser.RULE_join_op);
        let _la: number;
        try {
            this.state = 2521;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.COMMA:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2497;
                this.match(YQLParser.COMMA);
                }
                break;
            case YQLParser.CROSS:
            case YQLParser.EXCLUSION:
            case YQLParser.FULL:
            case YQLParser.INNER:
            case YQLParser.JOIN:
            case YQLParser.LEFT:
            case YQLParser.NATURAL:
            case YQLParser.OUTER:
            case YQLParser.RIGHT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2499;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 193) {
                    {
                    this.state = 2498;
                    this.match(YQLParser.NATURAL);
                    }
                }

                this.state = 2518;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.EXCLUSION:
                case YQLParser.FULL:
                case YQLParser.JOIN:
                case YQLParser.LEFT:
                case YQLParser.OUTER:
                case YQLParser.RIGHT:
                    {
                    this.state = 2511;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case YQLParser.LEFT:
                        {
                        this.state = 2501;
                        this.match(YQLParser.LEFT);
                        this.state = 2503;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 206 || _la === 263) {
                            {
                            this.state = 2502;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 206 || _la === 263)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                        }

                        }
                        break;
                    case YQLParser.RIGHT:
                        {
                        this.state = 2505;
                        this.match(YQLParser.RIGHT);
                        this.state = 2507;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 206 || _la === 263) {
                            {
                            this.state = 2506;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 206 || _la === 263)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                        }

                        }
                        break;
                    case YQLParser.EXCLUSION:
                        {
                        this.state = 2509;
                        this.match(YQLParser.EXCLUSION);
                        }
                        break;
                    case YQLParser.FULL:
                        {
                        this.state = 2510;
                        this.match(YQLParser.FULL);
                        }
                        break;
                    case YQLParser.JOIN:
                    case YQLParser.OUTER:
                        break;
                    default:
                        break;
                    }
                    this.state = 2514;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 212) {
                        {
                        this.state = 2513;
                        this.match(YQLParser.OUTER);
                        }
                    }

                    }
                    break;
                case YQLParser.INNER:
                    {
                    this.state = 2516;
                    this.match(YQLParser.INNER);
                    }
                    break;
                case YQLParser.CROSS:
                    {
                    this.state = 2517;
                    this.match(YQLParser.CROSS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2520;
                this.match(YQLParser.JOIN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_constraint(): Join_constraintContext {
        let localContext = new Join_constraintContext(this.context, this.state);
        this.enterRule(localContext, 360, YQLParser.RULE_join_constraint);
        try {
            this.state = 2527;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2523;
                this.match(YQLParser.ON);
                this.state = 2524;
                this.expr();
                }
                break;
            case YQLParser.USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2525;
                this.match(YQLParser.USING);
                this.state = 2526;
                this.pure_column_or_named_list();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returning_columns_list(): Returning_columns_listContext {
        let localContext = new Returning_columns_listContext(this.context, this.state);
        this.enterRule(localContext, 362, YQLParser.RULE_returning_columns_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2529;
            this.match(YQLParser.RETURNING);
            this.state = 2539;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ASTERISK:
                {
                this.state = 2530;
                this.match(YQLParser.ASTERISK);
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 2531;
                this.an_id();
                this.state = 2536;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 26) {
                    {
                    {
                    this.state = 2532;
                    this.match(YQLParser.COMMA);
                    this.state = 2533;
                    this.an_id();
                    }
                    }
                    this.state = 2538;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_table_stmt(): Into_table_stmtContext {
        let localContext = new Into_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 364, YQLParser.RULE_into_table_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2553;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 252, this.context) ) {
            case 1:
                {
                this.state = 2541;
                this.match(YQLParser.INSERT);
                }
                break;
            case 2:
                {
                this.state = 2542;
                this.match(YQLParser.INSERT);
                this.state = 2543;
                this.match(YQLParser.OR);
                this.state = 2544;
                this.match(YQLParser.ABORT);
                }
                break;
            case 3:
                {
                this.state = 2545;
                this.match(YQLParser.INSERT);
                this.state = 2546;
                this.match(YQLParser.OR);
                this.state = 2547;
                this.match(YQLParser.REVERT);
                }
                break;
            case 4:
                {
                this.state = 2548;
                this.match(YQLParser.INSERT);
                this.state = 2549;
                this.match(YQLParser.OR);
                this.state = 2550;
                this.match(YQLParser.IGNORE);
                }
                break;
            case 5:
                {
                this.state = 2551;
                this.match(YQLParser.UPSERT);
                }
                break;
            case 6:
                {
                this.state = 2552;
                this.match(YQLParser.REPLACE);
                }
                break;
            }
            this.state = 2555;
            this.match(YQLParser.INTO);
            this.state = 2556;
            this.into_simple_table_ref();
            this.state = 2557;
            this.into_values_source();
            this.state = 2559;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 248) {
                {
                this.state = 2558;
                this.returning_columns_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_table_stmt_yq(): Into_table_stmt_yqContext {
        let localContext = new Into_table_stmt_yqContext(this.context, this.state);
        this.enterRule(localContext, 366, YQLParser.RULE_into_table_stmt_yq);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2572;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
            case 1:
                {
                this.state = 2561;
                this.match(YQLParser.INSERT);
                }
                break;
            case 2:
                {
                this.state = 2562;
                this.match(YQLParser.INSERT);
                this.state = 2563;
                this.match(YQLParser.OR);
                this.state = 2564;
                this.match(YQLParser.ABORT);
                }
                break;
            case 3:
                {
                this.state = 2565;
                this.match(YQLParser.INSERT);
                this.state = 2566;
                this.match(YQLParser.OR);
                this.state = 2567;
                this.match(YQLParser.REVERT);
                }
                break;
            case 4:
                {
                this.state = 2568;
                this.match(YQLParser.INSERT);
                this.state = 2569;
                this.match(YQLParser.OR);
                this.state = 2570;
                this.match(YQLParser.IGNORE);
                }
                break;
            case 5:
                {
                this.state = 2571;
                this.match(YQLParser.REPLACE);
                }
                break;
            }
            this.state = 2574;
            this.match(YQLParser.INTO);
            this.state = 2575;
            this.into_simple_table_ref();
            this.state = 2576;
            this.into_values_source();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_values_source(): Into_values_sourceContext {
        let localContext = new Into_values_sourceContext(this.context, this.state);
        this.enterRule(localContext, 368, YQLParser.RULE_into_values_source);
        try {
            this.state = 2584;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LPAREN:
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
            case YQLParser.VALUES:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2579;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
                case 1:
                    {
                    this.state = 2578;
                    this.pure_column_list();
                    }
                    break;
                }
                this.state = 2581;
                this.values_source();
                }
                break;
            case YQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2582;
                this.match(YQLParser.DEFAULT);
                this.state = 2583;
                this.match(YQLParser.VALUES);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_stmt(): Values_stmtContext {
        let localContext = new Values_stmtContext(this.context, this.state);
        this.enterRule(localContext, 370, YQLParser.RULE_values_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2586;
            this.match(YQLParser.VALUES);
            this.state = 2587;
            this.values_source_row_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_source(): Values_sourceContext {
        let localContext = new Values_sourceContext(this.context, this.state);
        this.enterRule(localContext, 372, YQLParser.RULE_values_source);
        try {
            this.state = 2591;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.VALUES:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2589;
                this.values_stmt();
                }
                break;
            case YQLParser.LPAREN:
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2590;
                this.select_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_source_row_list(): Values_source_row_listContext {
        let localContext = new Values_source_row_listContext(this.context, this.state);
        this.enterRule(localContext, 374, YQLParser.RULE_values_source_row_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2593;
            this.values_source_row();
            this.state = 2598;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2594;
                this.match(YQLParser.COMMA);
                this.state = 2595;
                this.values_source_row();
                }
                }
                this.state = 2600;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_source_row(): Values_source_rowContext {
        let localContext = new Values_source_rowContext(this.context, this.state);
        this.enterRule(localContext, 376, YQLParser.RULE_values_source_row);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2601;
            this.match(YQLParser.LPAREN);
            this.state = 2602;
            this.expr_list();
            this.state = 2603;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_values_source(): Simple_values_sourceContext {
        let localContext = new Simple_values_sourceContext(this.context, this.state);
        this.enterRule(localContext, 378, YQLParser.RULE_simple_values_source);
        try {
            this.state = 2607;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2605;
                this.expr_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2606;
                this.select_stmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_external_data_source_stmt(): Create_external_data_source_stmtContext {
        let localContext = new Create_external_data_source_stmtContext(this.context, this.state);
        this.enterRule(localContext, 380, YQLParser.RULE_create_external_data_source_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2609;
            this.match(YQLParser.CREATE);
            this.state = 2612;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 209) {
                {
                this.state = 2610;
                this.match(YQLParser.OR);
                this.state = 2611;
                this.match(YQLParser.REPLACE);
                }
            }

            this.state = 2614;
            this.match(YQLParser.EXTERNAL);
            this.state = 2615;
            this.match(YQLParser.DATA);
            this.state = 2616;
            this.match(YQLParser.SOURCE);
            this.state = 2620;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 261, this.context) ) {
            case 1:
                {
                this.state = 2617;
                this.match(YQLParser.IF);
                this.state = 2618;
                this.match(YQLParser.NOT);
                this.state = 2619;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2622;
            this.object_ref();
            this.state = 2623;
            this.with_table_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_data_source_stmt(): Alter_external_data_source_stmtContext {
        let localContext = new Alter_external_data_source_stmtContext(this.context, this.state);
        this.enterRule(localContext, 382, YQLParser.RULE_alter_external_data_source_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2625;
            this.match(YQLParser.ALTER);
            this.state = 2626;
            this.match(YQLParser.EXTERNAL);
            this.state = 2627;
            this.match(YQLParser.DATA);
            this.state = 2628;
            this.match(YQLParser.SOURCE);
            this.state = 2629;
            this.object_ref();
            this.state = 2630;
            this.alter_external_data_source_action();
            this.state = 2635;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2631;
                this.match(YQLParser.COMMA);
                this.state = 2632;
                this.alter_external_data_source_action();
                }
                }
                this.state = 2637;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_data_source_action(): Alter_external_data_source_actionContext {
        let localContext = new Alter_external_data_source_actionContext(this.context, this.state);
        this.enterRule(localContext, 384, YQLParser.RULE_alter_external_data_source_action);
        try {
            this.state = 2641;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 263, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2638;
                this.alter_table_set_table_setting_uncompat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2639;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2640;
                this.alter_table_reset_table_setting();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_external_data_source_stmt(): Drop_external_data_source_stmtContext {
        let localContext = new Drop_external_data_source_stmtContext(this.context, this.state);
        this.enterRule(localContext, 386, YQLParser.RULE_drop_external_data_source_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2643;
            this.match(YQLParser.DROP);
            this.state = 2644;
            this.match(YQLParser.EXTERNAL);
            this.state = 2645;
            this.match(YQLParser.DATA);
            this.state = 2646;
            this.match(YQLParser.SOURCE);
            this.state = 2649;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 264, this.context) ) {
            case 1:
                {
                this.state = 2647;
                this.match(YQLParser.IF);
                this.state = 2648;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2651;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_view_stmt(): Create_view_stmtContext {
        let localContext = new Create_view_stmtContext(this.context, this.state);
        this.enterRule(localContext, 388, YQLParser.RULE_create_view_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2653;
            this.match(YQLParser.CREATE);
            this.state = 2654;
            this.match(YQLParser.VIEW);
            this.state = 2655;
            this.object_ref();
            this.state = 2656;
            this.with_table_settings();
            this.state = 2657;
            this.match(YQLParser.AS);
            this.state = 2658;
            this.select_stmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_view_stmt(): Drop_view_stmtContext {
        let localContext = new Drop_view_stmtContext(this.context, this.state);
        this.enterRule(localContext, 390, YQLParser.RULE_drop_view_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2660;
            this.match(YQLParser.DROP);
            this.state = 2661;
            this.match(YQLParser.VIEW);
            this.state = 2662;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public upsert_object_stmt(): Upsert_object_stmtContext {
        let localContext = new Upsert_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 392, YQLParser.RULE_upsert_object_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2664;
            this.match(YQLParser.UPSERT);
            this.state = 2665;
            this.match(YQLParser.OBJECT);
            this.state = 2666;
            this.object_ref();
            this.state = 2667;
            this.match(YQLParser.LPAREN);
            this.state = 2668;
            this.match(YQLParser.TYPE);
            this.state = 2669;
            this.object_type_ref();
            this.state = 2670;
            this.match(YQLParser.RPAREN);
            this.state = 2672;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 2671;
                this.create_object_features();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_object_stmt(): Create_object_stmtContext {
        let localContext = new Create_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 394, YQLParser.RULE_create_object_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2674;
            this.match(YQLParser.CREATE);
            this.state = 2675;
            this.match(YQLParser.OBJECT);
            this.state = 2679;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
            case 1:
                {
                this.state = 2676;
                this.match(YQLParser.IF);
                this.state = 2677;
                this.match(YQLParser.NOT);
                this.state = 2678;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2681;
            this.object_ref();
            this.state = 2682;
            this.match(YQLParser.LPAREN);
            this.state = 2683;
            this.match(YQLParser.TYPE);
            this.state = 2684;
            this.object_type_ref();
            this.state = 2685;
            this.match(YQLParser.RPAREN);
            this.state = 2687;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 2686;
                this.create_object_features();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_object_features(): Create_object_featuresContext {
        let localContext = new Create_object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 396, YQLParser.RULE_create_object_features);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2689;
            this.match(YQLParser.WITH);
            this.state = 2690;
            this.object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_object_stmt(): Alter_object_stmtContext {
        let localContext = new Alter_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 398, YQLParser.RULE_alter_object_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2692;
            this.match(YQLParser.ALTER);
            this.state = 2693;
            this.match(YQLParser.OBJECT);
            this.state = 2694;
            this.object_ref();
            this.state = 2695;
            this.match(YQLParser.LPAREN);
            this.state = 2696;
            this.match(YQLParser.TYPE);
            this.state = 2697;
            this.object_type_ref();
            this.state = 2698;
            this.match(YQLParser.RPAREN);
            this.state = 2699;
            this.alter_object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_object_features(): Alter_object_featuresContext {
        let localContext = new Alter_object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 400, YQLParser.RULE_alter_object_features);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2701;
            this.match(YQLParser.SET);
            this.state = 2702;
            this.object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_object_stmt(): Drop_object_stmtContext {
        let localContext = new Drop_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 402, YQLParser.RULE_drop_object_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2704;
            this.match(YQLParser.DROP);
            this.state = 2705;
            this.match(YQLParser.OBJECT);
            this.state = 2708;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 268, this.context) ) {
            case 1:
                {
                this.state = 2706;
                this.match(YQLParser.IF);
                this.state = 2707;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2710;
            this.object_ref();
            this.state = 2711;
            this.match(YQLParser.LPAREN);
            this.state = 2712;
            this.match(YQLParser.TYPE);
            this.state = 2713;
            this.object_type_ref();
            this.state = 2714;
            this.match(YQLParser.RPAREN);
            this.state = 2716;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 2715;
                this.drop_object_features();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_object_features(): Drop_object_featuresContext {
        let localContext = new Drop_object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 404, YQLParser.RULE_drop_object_features);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2718;
            this.match(YQLParser.WITH);
            this.state = 2719;
            this.object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature_value(): Object_feature_valueContext {
        let localContext = new Object_feature_valueContext(this.context, this.state);
        this.enterRule(localContext, 406, YQLParser.RULE_object_feature_value);
        try {
            this.state = 2724;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2721;
                this.id_or_type();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2722;
                this.bind_parameter();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2723;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature_kv(): Object_feature_kvContext {
        let localContext = new Object_feature_kvContext(this.context, this.state);
        this.enterRule(localContext, 408, YQLParser.RULE_object_feature_kv);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2726;
            this.an_id_or_type();
            this.state = 2727;
            this.match(YQLParser.EQUALS);
            this.state = 2728;
            this.object_feature_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature_flag(): Object_feature_flagContext {
        let localContext = new Object_feature_flagContext(this.context, this.state);
        this.enterRule(localContext, 410, YQLParser.RULE_object_feature_flag);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2730;
            this.an_id_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature(): Object_featureContext {
        let localContext = new Object_featureContext(this.context, this.state);
        this.enterRule(localContext, 412, YQLParser.RULE_object_feature);
        try {
            this.state = 2734;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 271, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2732;
                this.object_feature_kv();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2733;
                this.object_feature_flag();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_features(): Object_featuresContext {
        let localContext = new Object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 414, YQLParser.RULE_object_features);
        let _la: number;
        try {
            this.state = 2748;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2736;
                this.object_feature();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2737;
                this.match(YQLParser.LPAREN);
                this.state = 2738;
                this.object_feature();
                this.state = 2743;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 26) {
                    {
                    {
                    this.state = 2739;
                    this.match(YQLParser.COMMA);
                    this.state = 2740;
                    this.object_feature();
                    }
                    }
                    this.state = 2745;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2746;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_type_ref(): Object_type_refContext {
        let localContext = new Object_type_refContext(this.context, this.state);
        this.enterRule(localContext, 416, YQLParser.RULE_object_type_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2750;
            this.an_id_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_table_stmt(): Create_table_stmtContext {
        let localContext = new Create_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 418, YQLParser.RULE_create_table_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2752;
            this.match(YQLParser.CREATE);
            this.state = 2755;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 209) {
                {
                this.state = 2753;
                this.match(YQLParser.OR);
                this.state = 2754;
                this.match(YQLParser.REPLACE);
                }
            }

            this.state = 2765;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.TABLE:
                {
                this.state = 2757;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TABLESTORE:
                {
                this.state = 2758;
                this.match(YQLParser.TABLESTORE);
                }
                break;
            case YQLParser.EXTERNAL:
                {
                this.state = 2759;
                this.match(YQLParser.EXTERNAL);
                this.state = 2760;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TEMP:
                {
                this.state = 2761;
                this.match(YQLParser.TEMP);
                this.state = 2762;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TEMPORARY:
                {
                this.state = 2763;
                this.match(YQLParser.TEMPORARY);
                this.state = 2764;
                this.match(YQLParser.TABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2770;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 276, this.context) ) {
            case 1:
                {
                this.state = 2767;
                this.match(YQLParser.IF);
                this.state = 2768;
                this.match(YQLParser.NOT);
                this.state = 2769;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2772;
            this.simple_table_ref();
            this.state = 2773;
            this.match(YQLParser.LPAREN);
            this.state = 2774;
            this.create_table_entry();
            this.state = 2779;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 277, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2775;
                    this.match(YQLParser.COMMA);
                    this.state = 2776;
                    this.create_table_entry();
                    }
                    }
                }
                this.state = 2781;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 277, this.context);
            }
            this.state = 2783;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 2782;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 2785;
            this.match(YQLParser.RPAREN);
            this.state = 2787;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 162) {
                {
                this.state = 2786;
                this.table_inherits();
                }
            }

            this.state = 2790;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215) {
                {
                this.state = 2789;
                this.table_partition_by();
                }
            }

            this.state = 2793;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 2792;
                this.with_table_settings();
                }
            }

            this.state = 2796;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 280) {
                {
                this.state = 2795;
                this.table_tablestore();
                }
            }

            this.state = 2799;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2798;
                this.table_as_source();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_table_entry(): Create_table_entryContext {
        let localContext = new Create_table_entryContext(this.context, this.state);
        this.enterRule(localContext, 420, YQLParser.RULE_create_table_entry);
        try {
            this.state = 2807;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 284, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2801;
                this.column_schema();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2802;
                this.table_constraint();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2803;
                this.table_index();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2804;
                this.family_entry();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2805;
                this.changefeed();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2806;
                this.an_id_schema();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_inherits(): Table_inheritsContext {
        let localContext = new Table_inheritsContext(this.context, this.state);
        this.enterRule(localContext, 422, YQLParser.RULE_table_inherits);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2809;
            this.match(YQLParser.INHERITS);
            this.state = 2810;
            this.match(YQLParser.LPAREN);
            this.state = 2811;
            this.simple_table_ref_core();
            this.state = 2816;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2812;
                this.match(YQLParser.COMMA);
                this.state = 2813;
                this.simple_table_ref_core();
                }
                }
                this.state = 2818;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2819;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_partition_by(): Table_partition_byContext {
        let localContext = new Table_partition_byContext(this.context, this.state);
        this.enterRule(localContext, 424, YQLParser.RULE_table_partition_by);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2821;
            this.match(YQLParser.PARTITION);
            this.state = 2822;
            this.match(YQLParser.BY);
            this.state = 2823;
            this.match(YQLParser.HASH);
            this.state = 2824;
            this.pure_column_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_table_settings(): With_table_settingsContext {
        let localContext = new With_table_settingsContext(this.context, this.state);
        this.enterRule(localContext, 426, YQLParser.RULE_with_table_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2826;
            this.match(YQLParser.WITH);
            this.state = 2827;
            this.match(YQLParser.LPAREN);
            this.state = 2828;
            this.table_settings_entry();
            this.state = 2833;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2829;
                this.match(YQLParser.COMMA);
                this.state = 2830;
                this.table_settings_entry();
                }
                }
                this.state = 2835;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2836;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_tablestore(): Table_tablestoreContext {
        let localContext = new Table_tablestoreContext(this.context, this.state);
        this.enterRule(localContext, 428, YQLParser.RULE_table_tablestore);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2838;
            this.match(YQLParser.TABLESTORE);
            this.state = 2839;
            this.simple_table_ref_core();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_settings_entry(): Table_settings_entryContext {
        let localContext = new Table_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 430, YQLParser.RULE_table_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2841;
            this.an_id();
            this.state = 2842;
            this.match(YQLParser.EQUALS);
            this.state = 2843;
            this.table_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_as_source(): Table_as_sourceContext {
        let localContext = new Table_as_sourceContext(this.context, this.state);
        this.enterRule(localContext, 432, YQLParser.RULE_table_as_source);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2845;
            this.match(YQLParser.AS);
            this.state = 2846;
            this.values_source();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_stmt(): Alter_table_stmtContext {
        let localContext = new Alter_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 434, YQLParser.RULE_alter_table_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2848;
            this.match(YQLParser.ALTER);
            this.state = 2849;
            this.match(YQLParser.TABLE);
            this.state = 2850;
            this.simple_table_ref();
            this.state = 2851;
            this.alter_table_action();
            this.state = 2856;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2852;
                this.match(YQLParser.COMMA);
                this.state = 2853;
                this.alter_table_action();
                }
                }
                this.state = 2858;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_action(): Alter_table_actionContext {
        let localContext = new Alter_table_actionContext(this.context, this.state);
        this.enterRule(localContext, 436, YQLParser.RULE_alter_table_action);
        try {
            this.state = 2874;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 288, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2859;
                this.alter_table_add_column();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2860;
                this.alter_table_drop_column();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2861;
                this.alter_table_alter_column();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2862;
                this.alter_table_add_column_family();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2863;
                this.alter_table_alter_column_family();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2864;
                this.alter_table_set_table_setting_uncompat();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2865;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2866;
                this.alter_table_reset_table_setting();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2867;
                this.alter_table_add_index();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2868;
                this.alter_table_drop_index();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2869;
                this.alter_table_rename_to();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2870;
                this.alter_table_add_changefeed();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2871;
                this.alter_table_alter_changefeed();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2872;
                this.alter_table_drop_changefeed();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2873;
                this.alter_table_rename_index_to();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_table_stmt(): Alter_external_table_stmtContext {
        let localContext = new Alter_external_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 438, YQLParser.RULE_alter_external_table_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2876;
            this.match(YQLParser.ALTER);
            this.state = 2877;
            this.match(YQLParser.EXTERNAL);
            this.state = 2878;
            this.match(YQLParser.TABLE);
            this.state = 2879;
            this.simple_table_ref();
            this.state = 2880;
            this.alter_external_table_action();
            this.state = 2885;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2881;
                this.match(YQLParser.COMMA);
                this.state = 2882;
                this.alter_external_table_action();
                }
                }
                this.state = 2887;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_table_action(): Alter_external_table_actionContext {
        let localContext = new Alter_external_table_actionContext(this.context, this.state);
        this.enterRule(localContext, 440, YQLParser.RULE_alter_external_table_action);
        try {
            this.state = 2893;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2888;
                this.alter_table_add_column();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2889;
                this.alter_table_drop_column();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2890;
                this.alter_table_set_table_setting_uncompat();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2891;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2892;
                this.alter_table_reset_table_setting();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_store_stmt(): Alter_table_store_stmtContext {
        let localContext = new Alter_table_store_stmtContext(this.context, this.state);
        this.enterRule(localContext, 442, YQLParser.RULE_alter_table_store_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2895;
            this.match(YQLParser.ALTER);
            this.state = 2896;
            this.match(YQLParser.TABLESTORE);
            this.state = 2897;
            this.object_ref();
            this.state = 2898;
            this.alter_table_store_action();
            this.state = 2903;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2899;
                this.match(YQLParser.COMMA);
                this.state = 2900;
                this.alter_table_store_action();
                }
                }
                this.state = 2905;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_store_action(): Alter_table_store_actionContext {
        let localContext = new Alter_table_store_actionContext(this.context, this.state);
        this.enterRule(localContext, 444, YQLParser.RULE_alter_table_store_action);
        try {
            this.state = 2908;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ADD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2906;
                this.alter_table_add_column();
                }
                break;
            case YQLParser.DROP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2907;
                this.alter_table_drop_column();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_column(): Alter_table_add_columnContext {
        let localContext = new Alter_table_add_columnContext(this.context, this.state);
        this.enterRule(localContext, 446, YQLParser.RULE_alter_table_add_column);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2910;
            this.match(YQLParser.ADD);
            this.state = 2912;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 77) {
                {
                this.state = 2911;
                this.match(YQLParser.COLUMN);
                }
            }

            this.state = 2914;
            this.column_schema();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext {
        let localContext = new Alter_table_drop_columnContext(this.context, this.state);
        this.enterRule(localContext, 448, YQLParser.RULE_alter_table_drop_column);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2916;
            this.match(YQLParser.DROP);
            this.state = 2918;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 294, this.context) ) {
            case 1:
                {
                this.state = 2917;
                this.match(YQLParser.COLUMN);
                }
                break;
            }
            this.state = 2920;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_column(): Alter_table_alter_columnContext {
        let localContext = new Alter_table_alter_columnContext(this.context, this.state);
        this.enterRule(localContext, 450, YQLParser.RULE_alter_table_alter_column);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2922;
            this.match(YQLParser.ALTER);
            this.state = 2923;
            this.match(YQLParser.COLUMN);
            this.state = 2924;
            this.an_id();
            this.state = 2925;
            this.match(YQLParser.SET);
            this.state = 2926;
            this.family_relation();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_column_family(): Alter_table_add_column_familyContext {
        let localContext = new Alter_table_add_column_familyContext(this.context, this.state);
        this.enterRule(localContext, 452, YQLParser.RULE_alter_table_add_column_family);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2928;
            this.match(YQLParser.ADD);
            this.state = 2929;
            this.family_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_column_family(): Alter_table_alter_column_familyContext {
        let localContext = new Alter_table_alter_column_familyContext(this.context, this.state);
        this.enterRule(localContext, 454, YQLParser.RULE_alter_table_alter_column_family);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2931;
            this.match(YQLParser.ALTER);
            this.state = 2932;
            this.match(YQLParser.FAMILY);
            this.state = 2933;
            this.an_id();
            this.state = 2934;
            this.match(YQLParser.SET);
            this.state = 2935;
            this.an_id();
            this.state = 2936;
            this.family_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext {
        let localContext = new Alter_table_set_table_setting_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 456, YQLParser.RULE_alter_table_set_table_setting_uncompat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2938;
            this.match(YQLParser.SET);
            this.state = 2939;
            this.an_id();
            this.state = 2940;
            this.table_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext {
        let localContext = new Alter_table_set_table_setting_compatContext(this.context, this.state);
        this.enterRule(localContext, 458, YQLParser.RULE_alter_table_set_table_setting_compat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2942;
            this.match(YQLParser.SET);
            this.state = 2943;
            this.match(YQLParser.LPAREN);
            this.state = 2944;
            this.alter_table_setting_entry();
            this.state = 2949;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2945;
                this.match(YQLParser.COMMA);
                this.state = 2946;
                this.alter_table_setting_entry();
                }
                }
                this.state = 2951;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2952;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext {
        let localContext = new Alter_table_reset_table_settingContext(this.context, this.state);
        this.enterRule(localContext, 460, YQLParser.RULE_alter_table_reset_table_setting);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2954;
            this.match(YQLParser.RESET);
            this.state = 2955;
            this.match(YQLParser.LPAREN);
            this.state = 2956;
            this.an_id();
            this.state = 2961;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 2957;
                this.match(YQLParser.COMMA);
                this.state = 2958;
                this.an_id();
                }
                }
                this.state = 2963;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2964;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_index(): Alter_table_add_indexContext {
        let localContext = new Alter_table_add_indexContext(this.context, this.state);
        this.enterRule(localContext, 462, YQLParser.RULE_alter_table_add_index);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2966;
            this.match(YQLParser.ADD);
            this.state = 2967;
            this.table_index();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_drop_index(): Alter_table_drop_indexContext {
        let localContext = new Alter_table_drop_indexContext(this.context, this.state);
        this.enterRule(localContext, 464, YQLParser.RULE_alter_table_drop_index);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2969;
            this.match(YQLParser.DROP);
            this.state = 2970;
            this.match(YQLParser.INDEX);
            this.state = 2971;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_rename_to(): Alter_table_rename_toContext {
        let localContext = new Alter_table_rename_toContext(this.context, this.state);
        this.enterRule(localContext, 466, YQLParser.RULE_alter_table_rename_to);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2973;
            this.match(YQLParser.RENAME);
            this.state = 2974;
            this.match(YQLParser.TO);
            this.state = 2975;
            this.an_id_table();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_rename_index_to(): Alter_table_rename_index_toContext {
        let localContext = new Alter_table_rename_index_toContext(this.context, this.state);
        this.enterRule(localContext, 468, YQLParser.RULE_alter_table_rename_index_to);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2977;
            this.match(YQLParser.RENAME);
            this.state = 2978;
            this.match(YQLParser.INDEX);
            this.state = 2979;
            this.an_id();
            this.state = 2980;
            this.match(YQLParser.TO);
            this.state = 2981;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_changefeed(): Alter_table_add_changefeedContext {
        let localContext = new Alter_table_add_changefeedContext(this.context, this.state);
        this.enterRule(localContext, 470, YQLParser.RULE_alter_table_add_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2983;
            this.match(YQLParser.ADD);
            this.state = 2984;
            this.changefeed();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_changefeed(): Alter_table_alter_changefeedContext {
        let localContext = new Alter_table_alter_changefeedContext(this.context, this.state);
        this.enterRule(localContext, 472, YQLParser.RULE_alter_table_alter_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2986;
            this.match(YQLParser.ALTER);
            this.state = 2987;
            this.match(YQLParser.CHANGEFEED);
            this.state = 2988;
            this.an_id();
            this.state = 2989;
            this.changefeed_alter_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_drop_changefeed(): Alter_table_drop_changefeedContext {
        let localContext = new Alter_table_drop_changefeedContext(this.context, this.state);
        this.enterRule(localContext, 474, YQLParser.RULE_alter_table_drop_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2991;
            this.match(YQLParser.DROP);
            this.state = 2992;
            this.match(YQLParser.CHANGEFEED);
            this.state = 2993;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_schema(): Column_schemaContext {
        let localContext = new Column_schemaContext(this.context, this.state);
        this.enterRule(localContext, 476, YQLParser.RULE_column_schema);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2995;
            this.an_id_schema();
            this.state = 2996;
            this.type_name_or_bind();
            this.state = 2998;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134) {
                {
                this.state = 2997;
                this.family_relation();
                }
            }

            this.state = 3000;
            this.opt_column_constraints();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_relation(): Family_relationContext {
        let localContext = new Family_relationContext(this.context, this.state);
        this.enterRule(localContext, 478, YQLParser.RULE_family_relation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3002;
            this.match(YQLParser.FAMILY);
            this.state = 3003;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_column_constraints(): Opt_column_constraintsContext {
        let localContext = new Opt_column_constraintsContext(this.context, this.state);
        this.enterRule(localContext, 480, YQLParser.RULE_opt_column_constraints);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3009;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 196 || _la === 198) {
                {
                this.state = 3006;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 3005;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 3008;
                this.match(YQLParser.NULL);
                }
            }

            this.state = 3013;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 98) {
                {
                this.state = 3011;
                this.match(YQLParser.DEFAULT);
                this.state = 3012;
                this.expr();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_order_by_specification(): Column_order_by_specificationContext {
        let localContext = new Column_order_by_specificationContext(this.context, this.state);
        this.enterRule(localContext, 482, YQLParser.RULE_column_order_by_specification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3015;
            this.an_id();
            this.state = 3017;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56 || _la === 103) {
                {
                this.state = 3016;
                _la = this.tokenStream.LA(1);
                if(!(_la === 56 || _la === 103)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_constraint(): Table_constraintContext {
        let localContext = new Table_constraintContext(this.context, this.state);
        this.enterRule(localContext, 484, YQLParser.RULE_table_constraint);
        let _la: number;
        try {
            this.state = 3058;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.PRIMARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3019;
                this.match(YQLParser.PRIMARY);
                this.state = 3020;
                this.match(YQLParser.KEY);
                this.state = 3021;
                this.match(YQLParser.LPAREN);
                this.state = 3022;
                this.an_id();
                this.state = 3027;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 26) {
                    {
                    {
                    this.state = 3023;
                    this.match(YQLParser.COMMA);
                    this.state = 3024;
                    this.an_id();
                    }
                    }
                    this.state = 3029;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3030;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.PARTITION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3032;
                this.match(YQLParser.PARTITION);
                this.state = 3033;
                this.match(YQLParser.BY);
                this.state = 3034;
                this.match(YQLParser.LPAREN);
                this.state = 3035;
                this.an_id();
                this.state = 3040;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 26) {
                    {
                    {
                    this.state = 3036;
                    this.match(YQLParser.COMMA);
                    this.state = 3037;
                    this.an_id();
                    }
                    }
                    this.state = 3042;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3043;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.ORDER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3045;
                this.match(YQLParser.ORDER);
                this.state = 3046;
                this.match(YQLParser.BY);
                this.state = 3047;
                this.match(YQLParser.LPAREN);
                this.state = 3048;
                this.column_order_by_specification();
                this.state = 3053;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 26) {
                    {
                    {
                    this.state = 3049;
                    this.match(YQLParser.COMMA);
                    this.state = 3050;
                    this.column_order_by_specification();
                    }
                    }
                    this.state = 3055;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3056;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_index(): Table_indexContext {
        let localContext = new Table_indexContext(this.context, this.state);
        this.enterRule(localContext, 486, YQLParser.RULE_table_index);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3060;
            this.match(YQLParser.INDEX);
            this.state = 3061;
            this.an_id();
            this.state = 3062;
            this.table_index_type();
            this.state = 3083;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 3063;
                this.match(YQLParser.WITH);
                this.state = 3064;
                this.match(YQLParser.LPAREN);
                this.state = 3065;
                this.an_id();
                this.state = 3066;
                this.match(YQLParser.EQUALS);
                this.state = 3067;
                this.an_id();
                this.state = 3075;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 306, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3068;
                        this.match(YQLParser.COMMA);
                        this.state = 3069;
                        this.an_id();
                        this.state = 3070;
                        this.match(YQLParser.EQUALS);
                        this.state = 3071;
                        this.an_id();
                        }
                        }
                    }
                    this.state = 3077;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 306, this.context);
                }
                this.state = 3079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26) {
                    {
                    this.state = 3078;
                    this.match(YQLParser.COMMA);
                    }
                }

                this.state = 3081;
                this.match(YQLParser.RPAREN);
                }
            }

            this.state = 3085;
            this.match(YQLParser.ON);
            this.state = 3086;
            this.match(YQLParser.LPAREN);
            this.state = 3087;
            this.an_id_schema();
            this.state = 3092;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3088;
                this.match(YQLParser.COMMA);
                this.state = 3089;
                this.an_id_schema();
                }
                }
                this.state = 3094;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3095;
            this.match(YQLParser.RPAREN);
            this.state = 3108;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 86) {
                {
                this.state = 3096;
                this.match(YQLParser.COVER);
                this.state = 3097;
                this.match(YQLParser.LPAREN);
                this.state = 3098;
                this.an_id_schema();
                this.state = 3103;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 26) {
                    {
                    {
                    this.state = 3099;
                    this.match(YQLParser.COMMA);
                    this.state = 3100;
                    this.an_id_schema();
                    }
                    }
                    this.state = 3105;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3106;
                this.match(YQLParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_index_type(): Table_index_typeContext {
        let localContext = new Table_index_typeContext(this.context, this.state);
        this.enterRule(localContext, 488, YQLParser.RULE_table_index_type);
        try {
            this.state = 3112;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.GLOBAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3110;
                this.global_index();
                }
                break;
            case YQLParser.LOCAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3111;
                this.local_index();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public global_index(): Global_indexContext {
        let localContext = new Global_indexContext(this.context, this.state);
        this.enterRule(localContext, 490, YQLParser.RULE_global_index);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3114;
            this.match(YQLParser.GLOBAL);
            this.state = 3116;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 296) {
                {
                this.state = 3115;
                this.match(YQLParser.UNIQUE);
                }
            }

            this.state = 3119;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 59 || _la === 275) {
                {
                this.state = 3118;
                _la = this.tokenStream.LA(1);
                if(!(_la === 59 || _la === 275)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public local_index(): Local_indexContext {
        let localContext = new Local_indexContext(this.context, this.state);
        this.enterRule(localContext, 492, YQLParser.RULE_local_index);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3121;
            this.match(YQLParser.LOCAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed(): ChangefeedContext {
        let localContext = new ChangefeedContext(this.context, this.state);
        this.enterRule(localContext, 494, YQLParser.RULE_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3123;
            this.match(YQLParser.CHANGEFEED);
            this.state = 3124;
            this.an_id();
            this.state = 3125;
            this.match(YQLParser.WITH);
            this.state = 3126;
            this.match(YQLParser.LPAREN);
            this.state = 3127;
            this.changefeed_settings();
            this.state = 3128;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_settings(): Changefeed_settingsContext {
        let localContext = new Changefeed_settingsContext(this.context, this.state);
        this.enterRule(localContext, 496, YQLParser.RULE_changefeed_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3130;
            this.changefeed_settings_entry();
            this.state = 3135;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3131;
                this.match(YQLParser.COMMA);
                this.state = 3132;
                this.changefeed_settings_entry();
                }
                }
                this.state = 3137;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_settings_entry(): Changefeed_settings_entryContext {
        let localContext = new Changefeed_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 498, YQLParser.RULE_changefeed_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3138;
            this.an_id();
            this.state = 3139;
            this.match(YQLParser.EQUALS);
            this.state = 3140;
            this.changefeed_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_setting_value(): Changefeed_setting_valueContext {
        let localContext = new Changefeed_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 500, YQLParser.RULE_changefeed_setting_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3142;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_alter_settings(): Changefeed_alter_settingsContext {
        let localContext = new Changefeed_alter_settingsContext(this.context, this.state);
        this.enterRule(localContext, 502, YQLParser.RULE_changefeed_alter_settings);
        try {
            this.state = 3150;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DISABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3144;
                this.match(YQLParser.DISABLE);
                }
                break;
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3145;
                this.match(YQLParser.SET);
                this.state = 3146;
                this.match(YQLParser.LPAREN);
                this.state = 3147;
                this.changefeed_settings();
                this.state = 3148;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_setting_entry(): Alter_table_setting_entryContext {
        let localContext = new Alter_table_setting_entryContext(this.context, this.state);
        this.enterRule(localContext, 504, YQLParser.RULE_alter_table_setting_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3152;
            this.an_id();
            this.state = 3153;
            this.match(YQLParser.EQUALS);
            this.state = 3154;
            this.table_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_setting_value(): Table_setting_valueContext {
        let localContext = new Table_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 506, YQLParser.RULE_table_setting_value);
        let _la: number;
        try {
            this.state = 3168;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3156;
                this.id();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3157;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3158;
                this.integer();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3159;
                this.split_boundaries();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3160;
                this.expr();
                this.state = 3161;
                this.match(YQLParser.ON);
                this.state = 3162;
                this.an_id();
                this.state = 3165;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 55) {
                    {
                    this.state = 3163;
                    this.match(YQLParser.AS);
                    this.state = 3164;
                    _la = this.tokenStream.LA(1);
                    if(!(((((_la - 189)) & ~0x1F) === 0 && ((1 << (_la - 189)) & 11) !== 0) || _la === 260)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3167;
                this.bool_value();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_entry(): Family_entryContext {
        let localContext = new Family_entryContext(this.context, this.state);
        this.enterRule(localContext, 508, YQLParser.RULE_family_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3170;
            this.match(YQLParser.FAMILY);
            this.state = 3171;
            this.an_id();
            this.state = 3172;
            this.family_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_settings(): Family_settingsContext {
        let localContext = new Family_settingsContext(this.context, this.state);
        this.enterRule(localContext, 510, YQLParser.RULE_family_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3174;
            this.match(YQLParser.LPAREN);
            this.state = 3183;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & 4227334143) !== 0) || ((((_la - 76)) & ~0x1F) === 0 && ((1 << (_la - 76)) & 3221225471) !== 0) || ((((_la - 108)) & ~0x1F) === 0 && ((1 << (_la - 108)) & 3187668991) !== 0) || ((((_la - 140)) & ~0x1F) === 0 && ((1 << (_la - 140)) & 4294967231) !== 0) || ((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & 4294966271) !== 0) || ((((_la - 204)) & ~0x1F) === 0 && ((1 << (_la - 204)) & 4294967279) !== 0) || ((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & 4026531703) !== 0) || ((((_la - 268)) & ~0x1F) === 0 && ((1 << (_la - 268)) & 4282376187) !== 0) || ((((_la - 300)) & ~0x1F) === 0 && ((1 << (_la - 300)) & 524223) !== 0)) {
                {
                this.state = 3175;
                this.family_settings_entry();
                this.state = 3180;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 26) {
                    {
                    {
                    this.state = 3176;
                    this.match(YQLParser.COMMA);
                    this.state = 3177;
                    this.family_settings_entry();
                    }
                    }
                    this.state = 3182;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3185;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_settings_entry(): Family_settings_entryContext {
        let localContext = new Family_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 512, YQLParser.RULE_family_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3187;
            this.an_id();
            this.state = 3188;
            this.match(YQLParser.EQUALS);
            this.state = 3189;
            this.family_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_setting_value(): Family_setting_valueContext {
        let localContext = new Family_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 514, YQLParser.RULE_family_setting_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3191;
            this.match(YQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public split_boundaries(): Split_boundariesContext {
        let localContext = new Split_boundariesContext(this.context, this.state);
        this.enterRule(localContext, 516, YQLParser.RULE_split_boundaries);
        let _la: number;
        try {
            this.state = 3205;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 322, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3193;
                this.match(YQLParser.LPAREN);
                this.state = 3194;
                this.literal_value_list();
                this.state = 3199;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 26) {
                    {
                    {
                    this.state = 3195;
                    this.match(YQLParser.COMMA);
                    this.state = 3196;
                    this.literal_value_list();
                    }
                    }
                    this.state = 3201;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3202;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3204;
                this.literal_value_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literal_value_list(): Literal_value_listContext {
        let localContext = new Literal_value_listContext(this.context, this.state);
        this.enterRule(localContext, 518, YQLParser.RULE_literal_value_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3207;
            this.match(YQLParser.LPAREN);
            this.state = 3208;
            this.literal_value();
            this.state = 3213;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3209;
                this.match(YQLParser.COMMA);
                this.state = 3210;
                this.literal_value();
                }
                }
                this.state = 3215;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3216;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_table_stmt(): Drop_table_stmtContext {
        let localContext = new Drop_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 520, YQLParser.RULE_drop_table_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3218;
            this.match(YQLParser.DROP);
            this.state = 3223;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.TABLE:
                {
                this.state = 3219;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TABLESTORE:
                {
                this.state = 3220;
                this.match(YQLParser.TABLESTORE);
                }
                break;
            case YQLParser.EXTERNAL:
                {
                this.state = 3221;
                this.match(YQLParser.EXTERNAL);
                this.state = 3222;
                this.match(YQLParser.TABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3227;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 325, this.context) ) {
            case 1:
                {
                this.state = 3225;
                this.match(YQLParser.IF);
                this.state = 3226;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 3229;
            this.simple_table_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_user_stmt(): Create_user_stmtContext {
        let localContext = new Create_user_stmtContext(this.context, this.state);
        this.enterRule(localContext, 522, YQLParser.RULE_create_user_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3231;
            this.match(YQLParser.CREATE);
            this.state = 3232;
            this.match(YQLParser.USER);
            this.state = 3233;
            this.role_name();
            this.state = 3235;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 117 || _la === 217) {
                {
                this.state = 3234;
                this.create_user_option();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_user_stmt(): Alter_user_stmtContext {
        let localContext = new Alter_user_stmtContext(this.context, this.state);
        this.enterRule(localContext, 524, YQLParser.RULE_alter_user_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3237;
            this.match(YQLParser.ALTER);
            this.state = 3238;
            this.match(YQLParser.USER);
            this.state = 3239;
            this.role_name();
            this.state = 3247;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ENCRYPTED:
            case YQLParser.PASSWORD:
            case YQLParser.WITH:
                {
                this.state = 3241;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 3240;
                    this.match(YQLParser.WITH);
                    }
                }

                this.state = 3243;
                this.create_user_option();
                }
                break;
            case YQLParser.RENAME:
                {
                this.state = 3244;
                this.match(YQLParser.RENAME);
                this.state = 3245;
                this.match(YQLParser.TO);
                this.state = 3246;
                this.role_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_group_stmt(): Create_group_stmtContext {
        let localContext = new Create_group_stmtContext(this.context, this.state);
        this.enterRule(localContext, 526, YQLParser.RULE_create_group_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3249;
            this.match(YQLParser.CREATE);
            this.state = 3250;
            this.match(YQLParser.GROUP);
            this.state = 3251;
            this.role_name();
            this.state = 3265;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 3252;
                this.match(YQLParser.WITH);
                this.state = 3253;
                this.match(YQLParser.USER);
                this.state = 3254;
                this.role_name();
                this.state = 3259;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 329, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3255;
                        this.match(YQLParser.COMMA);
                        this.state = 3256;
                        this.role_name();
                        }
                        }
                    }
                    this.state = 3261;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 329, this.context);
                }
                this.state = 3263;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26) {
                    {
                    this.state = 3262;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_group_stmt(): Alter_group_stmtContext {
        let localContext = new Alter_group_stmtContext(this.context, this.state);
        this.enterRule(localContext, 528, YQLParser.RULE_alter_group_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3267;
            this.match(YQLParser.ALTER);
            this.state = 3268;
            this.match(YQLParser.GROUP);
            this.state = 3269;
            this.role_name();
            this.state = 3286;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ADD:
            case YQLParser.DROP:
                {
                this.state = 3270;
                _la = this.tokenStream.LA(1);
                if(!(_la === 46 || _la === 112)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3271;
                this.match(YQLParser.USER);
                this.state = 3272;
                this.role_name();
                this.state = 3277;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 332, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3273;
                        this.match(YQLParser.COMMA);
                        this.state = 3274;
                        this.role_name();
                        }
                        }
                    }
                    this.state = 3279;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 332, this.context);
                }
                this.state = 3281;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26) {
                    {
                    this.state = 3280;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
                break;
            case YQLParser.RENAME:
                {
                this.state = 3283;
                this.match(YQLParser.RENAME);
                this.state = 3284;
                this.match(YQLParser.TO);
                this.state = 3285;
                this.role_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_role_stmt(): Drop_role_stmtContext {
        let localContext = new Drop_role_stmtContext(this.context, this.state);
        this.enterRule(localContext, 530, YQLParser.RULE_drop_role_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3288;
            this.match(YQLParser.DROP);
            this.state = 3289;
            _la = this.tokenStream.LA(1);
            if(!(_la === 148 || _la === 302)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3292;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 335, this.context) ) {
            case 1:
                {
                this.state = 3290;
                this.match(YQLParser.IF);
                this.state = 3291;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 3294;
            this.role_name();
            this.state = 3299;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 336, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3295;
                    this.match(YQLParser.COMMA);
                    this.state = 3296;
                    this.role_name();
                    }
                    }
                }
                this.state = 3301;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 336, this.context);
            }
            this.state = 3303;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 3302;
                this.match(YQLParser.COMMA);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public role_name(): Role_nameContext {
        let localContext = new Role_nameContext(this.context, this.state);
        this.enterRule(localContext, 532, YQLParser.RULE_role_name);
        try {
            this.state = 3307;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3305;
                this.an_id_or_type();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3306;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_user_option(): Create_user_optionContext {
        let localContext = new Create_user_optionContext(this.context, this.state);
        this.enterRule(localContext, 534, YQLParser.RULE_create_user_option);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3310;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 117) {
                {
                this.state = 3309;
                this.match(YQLParser.ENCRYPTED);
                }
            }

            this.state = 3312;
            this.match(YQLParser.PASSWORD);
            this.state = 3313;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grant_permissions_stmt(): Grant_permissions_stmtContext {
        let localContext = new Grant_permissions_stmtContext(this.context, this.state);
        this.enterRule(localContext, 536, YQLParser.RULE_grant_permissions_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3315;
            this.match(YQLParser.GRANT);
            this.state = 3316;
            this.permission_name_target();
            this.state = 3317;
            this.match(YQLParser.ON);
            this.state = 3318;
            this.an_id_schema();
            this.state = 3323;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3319;
                this.match(YQLParser.COMMA);
                this.state = 3320;
                this.an_id_schema();
                }
                }
                this.state = 3325;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3326;
            this.match(YQLParser.TO);
            this.state = 3327;
            this.role_name();
            this.state = 3332;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 341, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3328;
                    this.match(YQLParser.COMMA);
                    this.state = 3329;
                    this.role_name();
                    }
                    }
                }
                this.state = 3334;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 341, this.context);
            }
            this.state = 3336;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 3335;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 3341;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 3338;
                this.match(YQLParser.WITH);
                this.state = 3339;
                this.match(YQLParser.GRANT);
                this.state = 3340;
                this.match(YQLParser.OPTION);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revoke_permissions_stmt(): Revoke_permissions_stmtContext {
        let localContext = new Revoke_permissions_stmtContext(this.context, this.state);
        this.enterRule(localContext, 538, YQLParser.RULE_revoke_permissions_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3343;
            this.match(YQLParser.REVOKE);
            this.state = 3347;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 344, this.context) ) {
            case 1:
                {
                this.state = 3344;
                this.match(YQLParser.GRANT);
                this.state = 3345;
                this.match(YQLParser.OPTION);
                this.state = 3346;
                this.match(YQLParser.FOR);
                }
                break;
            }
            this.state = 3349;
            this.permission_name_target();
            this.state = 3350;
            this.match(YQLParser.ON);
            this.state = 3351;
            this.an_id_schema();
            this.state = 3356;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3352;
                this.match(YQLParser.COMMA);
                this.state = 3353;
                this.an_id_schema();
                }
                }
                this.state = 3358;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3359;
            this.match(YQLParser.FROM);
            this.state = 3360;
            this.role_name();
            this.state = 3365;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3361;
                this.match(YQLParser.COMMA);
                this.state = 3362;
                this.role_name();
                }
                }
                this.state = 3367;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public permission_id(): Permission_idContext {
        let localContext = new Permission_idContext(this.context, this.state);
        this.enterRule(localContext, 540, YQLParser.RULE_permission_id);
        let _la: number;
        try {
            this.state = 3392;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.CONNECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3368;
                this.match(YQLParser.CONNECT);
                }
                break;
            case YQLParser.LIST:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3369;
                this.match(YQLParser.LIST);
                }
                break;
            case YQLParser.INSERT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3370;
                this.match(YQLParser.INSERT);
                }
                break;
            case YQLParser.MANAGE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3371;
                this.match(YQLParser.MANAGE);
                }
                break;
            case YQLParser.DROP:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3372;
                this.match(YQLParser.DROP);
                }
                break;
            case YQLParser.GRANT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3373;
                this.match(YQLParser.GRANT);
                }
                break;
            case YQLParser.MODIFY:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3374;
                this.match(YQLParser.MODIFY);
                this.state = 3375;
                _la = this.tokenStream.LA(1);
                if(!(_la === 61 || _la === 278)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case YQLParser.ERASE:
            case YQLParser.UPDATE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3376;
                _la = this.tokenStream.LA(1);
                if(!(_la === 120 || _la === 299)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3377;
                this.match(YQLParser.ROW);
                }
                break;
            case YQLParser.ALTER:
            case YQLParser.DESCRIBE:
            case YQLParser.REMOVE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3378;
                _la = this.tokenStream.LA(1);
                if(!(_la === 49 || _la === 104 || _la === 237)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3379;
                this.match(YQLParser.SCHEMA);
                }
                break;
            case YQLParser.SELECT:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3380;
                this.match(YQLParser.SELECT);
                this.state = 3382;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 61 || _la === 255 || _la === 278) {
                    {
                    this.state = 3381;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 61 || _la === 255 || _la === 278)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case YQLParser.FULL:
            case YQLParser.USE:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3384;
                _la = this.tokenStream.LA(1);
                if(!(_la === 143 || _la === 301)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3386;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 179) {
                    {
                    this.state = 3385;
                    this.match(YQLParser.LEGACY);
                    }
                }

                }
                break;
            case YQLParser.CREATE:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3388;
                this.match(YQLParser.CREATE);
                this.state = 3390;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 107 || _la === 229 || _la === 277) {
                    {
                    this.state = 3389;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 107 || _la === 229 || _la === 277)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public permission_name(): Permission_nameContext {
        let localContext = new Permission_nameContext(this.context, this.state);
        this.enterRule(localContext, 542, YQLParser.RULE_permission_name);
        try {
            this.state = 3396;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ALTER:
            case YQLParser.CONNECT:
            case YQLParser.CREATE:
            case YQLParser.DESCRIBE:
            case YQLParser.DROP:
            case YQLParser.ERASE:
            case YQLParser.FULL:
            case YQLParser.GRANT:
            case YQLParser.INSERT:
            case YQLParser.LIST:
            case YQLParser.MANAGE:
            case YQLParser.MODIFY:
            case YQLParser.REMOVE:
            case YQLParser.SELECT:
            case YQLParser.UPDATE:
            case YQLParser.USE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3394;
                this.permission_id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3395;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public permission_name_target(): Permission_name_targetContext {
        let localContext = new Permission_name_targetContext(this.context, this.state);
        this.enterRule(localContext, 544, YQLParser.RULE_permission_name_target);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3413;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ALTER:
            case YQLParser.CONNECT:
            case YQLParser.CREATE:
            case YQLParser.DESCRIBE:
            case YQLParser.DROP:
            case YQLParser.ERASE:
            case YQLParser.FULL:
            case YQLParser.GRANT:
            case YQLParser.INSERT:
            case YQLParser.LIST:
            case YQLParser.MANAGE:
            case YQLParser.MODIFY:
            case YQLParser.REMOVE:
            case YQLParser.SELECT:
            case YQLParser.UPDATE:
            case YQLParser.USE:
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3398;
                this.permission_name();
                this.state = 3403;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 352, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3399;
                        this.match(YQLParser.COMMA);
                        this.state = 3400;
                        this.permission_name();
                        }
                        }
                    }
                    this.state = 3405;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 352, this.context);
                }
                this.state = 3407;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26) {
                    {
                    this.state = 3406;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
                break;
            case YQLParser.ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3409;
                this.match(YQLParser.ALL);
                this.state = 3411;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 227) {
                    {
                    this.state = 3410;
                    this.match(YQLParser.PRIVILEGES);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_replication_stmt(): Create_replication_stmtContext {
        let localContext = new Create_replication_stmtContext(this.context, this.state);
        this.enterRule(localContext, 546, YQLParser.RULE_create_replication_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3415;
            this.match(YQLParser.CREATE);
            this.state = 3416;
            this.match(YQLParser.ASYNC);
            this.state = 3417;
            this.match(YQLParser.REPLICATION);
            this.state = 3418;
            this.object_ref();
            this.state = 3419;
            this.match(YQLParser.FOR);
            this.state = 3420;
            this.replication_target();
            this.state = 3425;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3421;
                this.match(YQLParser.COMMA);
                this.state = 3422;
                this.replication_target();
                }
                }
                this.state = 3427;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3428;
            this.match(YQLParser.WITH);
            this.state = 3429;
            this.match(YQLParser.LPAREN);
            this.state = 3430;
            this.replication_settings();
            this.state = 3431;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replication_target(): Replication_targetContext {
        let localContext = new Replication_targetContext(this.context, this.state);
        this.enterRule(localContext, 548, YQLParser.RULE_replication_target);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3433;
            this.object_ref();
            this.state = 3434;
            this.replication_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replication_settings(): Replication_settingsContext {
        let localContext = new Replication_settingsContext(this.context, this.state);
        this.enterRule(localContext, 550, YQLParser.RULE_replication_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3436;
            this.replication_settings_entry();
            this.state = 3441;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3437;
                this.match(YQLParser.COMMA);
                this.state = 3438;
                this.replication_settings_entry();
                }
                }
                this.state = 3443;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replication_settings_entry(): Replication_settings_entryContext {
        let localContext = new Replication_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 552, YQLParser.RULE_replication_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3444;
            this.an_id();
            this.state = 3445;
            this.match(YQLParser.EQUALS);
            this.state = 3446;
            this.match(YQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_replication_stmt(): Alter_replication_stmtContext {
        let localContext = new Alter_replication_stmtContext(this.context, this.state);
        this.enterRule(localContext, 554, YQLParser.RULE_alter_replication_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3448;
            this.match(YQLParser.ALTER);
            this.state = 3449;
            this.match(YQLParser.ASYNC);
            this.state = 3450;
            this.match(YQLParser.REPLICATION);
            this.state = 3451;
            this.object_ref();
            this.state = 3452;
            this.alter_replication_action();
            this.state = 3457;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3453;
                this.match(YQLParser.COMMA);
                this.state = 3454;
                this.alter_replication_action();
                }
                }
                this.state = 3459;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_replication_action(): Alter_replication_actionContext {
        let localContext = new Alter_replication_actionContext(this.context, this.state);
        this.enterRule(localContext, 556, YQLParser.RULE_alter_replication_action);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3460;
            this.alter_replication_set_setting();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_replication_set_setting(): Alter_replication_set_settingContext {
        let localContext = new Alter_replication_set_settingContext(this.context, this.state);
        this.enterRule(localContext, 558, YQLParser.RULE_alter_replication_set_setting);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3462;
            this.match(YQLParser.SET);
            this.state = 3463;
            this.match(YQLParser.LPAREN);
            this.state = 3464;
            this.replication_settings();
            this.state = 3465;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_replication_stmt(): Drop_replication_stmtContext {
        let localContext = new Drop_replication_stmtContext(this.context, this.state);
        this.enterRule(localContext, 560, YQLParser.RULE_drop_replication_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3467;
            this.match(YQLParser.DROP);
            this.state = 3468;
            this.match(YQLParser.ASYNC);
            this.state = 3469;
            this.match(YQLParser.REPLICATION);
            this.state = 3470;
            this.object_ref();
            this.state = 3472;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 71) {
                {
                this.state = 3471;
                this.match(YQLParser.CASCADE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public action_or_subquery_args(): Action_or_subquery_argsContext {
        let localContext = new Action_or_subquery_argsContext(this.context, this.state);
        this.enterRule(localContext, 562, YQLParser.RULE_action_or_subquery_args);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3474;
            this.opt_bind_parameter();
            this.state = 3479;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3475;
                this.match(YQLParser.COMMA);
                this.state = 3476;
                this.opt_bind_parameter();
                }
                }
                this.state = 3481;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public define_action_or_subquery_stmt(): Define_action_or_subquery_stmtContext {
        let localContext = new Define_action_or_subquery_stmtContext(this.context, this.state);
        this.enterRule(localContext, 564, YQLParser.RULE_define_action_or_subquery_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3482;
            this.match(YQLParser.DEFINE);
            this.state = 3483;
            _la = this.tokenStream.LA(1);
            if(!(_la === 45 || _la === 271)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3484;
            this.bind_parameter();
            this.state = 3485;
            this.match(YQLParser.LPAREN);
            this.state = 3487;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 33) {
                {
                this.state = 3486;
                this.action_or_subquery_args();
                }
            }

            this.state = 3489;
            this.match(YQLParser.RPAREN);
            this.state = 3490;
            this.match(YQLParser.AS);
            this.state = 3491;
            this.define_action_or_subquery_body();
            this.state = 3492;
            this.match(YQLParser.END);
            this.state = 3493;
            this.match(YQLParser.DEFINE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public define_action_or_subquery_body(): Define_action_or_subquery_bodyContext {
        let localContext = new Define_action_or_subquery_bodyContext(this.context, this.state);
        this.enterRule(localContext, 566, YQLParser.RULE_define_action_or_subquery_body);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3498;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 24) {
                {
                {
                this.state = 3495;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 3500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3519;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 27)) & ~0x1F) === 0 && ((1 << (_la - 27)) & 4194369) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 1086587137) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 2684882947) !== 0) || ((((_la - 147)) & ~0x1F) === 0 && ((1 << (_la - 147)) & 526465) !== 0) || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 67387905) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & 4105) !== 0) || ((((_la - 299)) & ~0x1F) === 0 && ((1 << (_la - 299)) & 71) !== 0)) {
                {
                this.state = 3501;
                this.sql_stmt_core();
                this.state = 3510;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 364, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3503;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        do {
                            {
                            {
                            this.state = 3502;
                            this.match(YQLParser.SEMICOLON);
                            }
                            }
                            this.state = 3505;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        } while (_la === 24);
                        this.state = 3507;
                        this.sql_stmt_core();
                        }
                        }
                    }
                    this.state = 3512;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 364, this.context);
                }
                this.state = 3516;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 24) {
                    {
                    {
                    this.state = 3513;
                    this.match(YQLParser.SEMICOLON);
                    }
                    }
                    this.state = 3518;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public if_stmt(): If_stmtContext {
        let localContext = new If_stmtContext(this.context, this.state);
        this.enterRule(localContext, 568, YQLParser.RULE_if_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3522;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123) {
                {
                this.state = 3521;
                this.match(YQLParser.EVALUATE);
                }
            }

            this.state = 3524;
            this.match(YQLParser.IF);
            this.state = 3525;
            this.expr();
            this.state = 3526;
            this.do_stmt();
            this.state = 3529;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 114) {
                {
                this.state = 3527;
                this.match(YQLParser.ELSE);
                this.state = 3528;
                this.do_stmt();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_stmt(): For_stmtContext {
        let localContext = new For_stmtContext(this.context, this.state);
        this.enterRule(localContext, 570, YQLParser.RULE_for_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3532;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123) {
                {
                this.state = 3531;
                this.match(YQLParser.EVALUATE);
                }
            }

            this.state = 3535;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 214) {
                {
                this.state = 3534;
                this.match(YQLParser.PARALLEL);
                }
            }

            this.state = 3537;
            this.match(YQLParser.FOR);
            this.state = 3538;
            this.bind_parameter();
            this.state = 3539;
            this.match(YQLParser.IN);
            this.state = 3540;
            this.expr();
            this.state = 3541;
            this.do_stmt();
            this.state = 3544;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 114) {
                {
                this.state = 3542;
                this.match(YQLParser.ELSE);
                this.state = 3543;
                this.do_stmt();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_ref(): Table_refContext {
        let localContext = new Table_refContext(this.context, this.state);
        this.enterRule(localContext, 572, YQLParser.RULE_table_ref);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3549;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 372, this.context) ) {
            case 1:
                {
                this.state = 3546;
                this.cluster_expr();
                this.state = 3547;
                this.match(YQLParser.DOT);
                }
                break;
            }
            this.state = 3552;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 31) {
                {
                this.state = 3551;
                this.match(YQLParser.AT);
                }
            }

            this.state = 3584;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
            case 1:
                {
                this.state = 3554;
                this.table_key();
                }
                break;
            case 2:
                {
                this.state = 3555;
                this.an_id_expr();
                this.state = 3556;
                this.match(YQLParser.LPAREN);
                this.state = 3568;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4031057949) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294901759) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & 4294967295) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 4294967295) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 524287) !== 0)) {
                    {
                    this.state = 3557;
                    this.table_arg();
                    this.state = 3562;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 374, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 3558;
                            this.match(YQLParser.COMMA);
                            this.state = 3559;
                            this.table_arg();
                            }
                            }
                        }
                        this.state = 3564;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 374, this.context);
                    }
                    this.state = 3566;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 26) {
                        {
                        this.state = 3565;
                        this.match(YQLParser.COMMA);
                        }
                    }

                    }
                }

                this.state = 3570;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 3:
                {
                this.state = 3572;
                this.bind_parameter();
                this.state = 3578;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 3573;
                    this.match(YQLParser.LPAREN);
                    this.state = 3575;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4030992413) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294901759) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & 4294967295) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 4294967295) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 524287) !== 0)) {
                        {
                        this.state = 3574;
                        this.expr_list();
                        }
                    }

                    this.state = 3577;
                    this.match(YQLParser.RPAREN);
                    }
                }

                this.state = 3582;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 307) {
                    {
                    this.state = 3580;
                    this.match(YQLParser.VIEW);
                    this.state = 3581;
                    this.view_name();
                    }
                }

                }
                break;
            }
            this.state = 3587;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 3586;
                this.table_hints();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_key(): Table_keyContext {
        let localContext = new Table_keyContext(this.context, this.state);
        this.enterRule(localContext, 574, YQLParser.RULE_table_key);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3589;
            this.id_table_or_type();
            this.state = 3592;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 307) {
                {
                this.state = 3590;
                this.match(YQLParser.VIEW);
                this.state = 3591;
                this.view_name();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_arg(): Table_argContext {
        let localContext = new Table_argContext(this.context, this.state);
        this.enterRule(localContext, 576, YQLParser.RULE_table_arg);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3595;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 31) {
                {
                this.state = 3594;
                this.match(YQLParser.AT);
                }
            }

            this.state = 3597;
            this.named_expr();
            this.state = 3600;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 307) {
                {
                this.state = 3598;
                this.match(YQLParser.VIEW);
                this.state = 3599;
                this.view_name();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_hints(): Table_hintsContext {
        let localContext = new Table_hintsContext(this.context, this.state);
        this.enterRule(localContext, 578, YQLParser.RULE_table_hints);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3602;
            this.match(YQLParser.WITH);
            this.state = 3615;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 3603;
                this.table_hint();
                }
                break;
            case YQLParser.LPAREN:
                {
                this.state = 3604;
                this.match(YQLParser.LPAREN);
                this.state = 3605;
                this.table_hint();
                this.state = 3610;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 26) {
                    {
                    {
                    this.state = 3606;
                    this.match(YQLParser.COMMA);
                    this.state = 3607;
                    this.table_hint();
                    }
                    }
                    this.state = 3612;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3613;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_hint(): Table_hintContext {
        let localContext = new Table_hintContext(this.context, this.state);
        this.enterRule(localContext, 580, YQLParser.RULE_table_hint);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3662;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 396, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3617;
                this.an_id_hint();
                this.state = 3636;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3618;
                    this.match(YQLParser.EQUALS);
                    this.state = 3634;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case YQLParser.DOLLAR:
                    case YQLParser.ABORT:
                    case YQLParser.ACTION:
                    case YQLParser.ADD:
                    case YQLParser.AFTER:
                    case YQLParser.ALL:
                    case YQLParser.ALTER:
                    case YQLParser.ANALYZE:
                    case YQLParser.AND:
                    case YQLParser.ANSI:
                    case YQLParser.ANY:
                    case YQLParser.ARRAY:
                    case YQLParser.AS:
                    case YQLParser.ASC:
                    case YQLParser.ASSUME:
                    case YQLParser.ASYMMETRIC:
                    case YQLParser.ASYNC:
                    case YQLParser.ATTACH:
                    case YQLParser.ATTRIBUTES:
                    case YQLParser.AUTOINCREMENT:
                    case YQLParser.BEFORE:
                    case YQLParser.BEGIN:
                    case YQLParser.BERNOULLI:
                    case YQLParser.BETWEEN:
                    case YQLParser.BITCAST:
                    case YQLParser.BY:
                    case YQLParser.CASCADE:
                    case YQLParser.CASE:
                    case YQLParser.CAST:
                    case YQLParser.CHANGEFEED:
                    case YQLParser.CHECK:
                    case YQLParser.COLLATE:
                    case YQLParser.COLUMN:
                    case YQLParser.COLUMNS:
                    case YQLParser.COMMIT:
                    case YQLParser.COMPACT:
                    case YQLParser.CONDITIONAL:
                    case YQLParser.CONFLICT:
                    case YQLParser.CONNECT:
                    case YQLParser.CONSTRAINT:
                    case YQLParser.CONSUMER:
                    case YQLParser.COVER:
                    case YQLParser.CREATE:
                    case YQLParser.CROSS:
                    case YQLParser.CUBE:
                    case YQLParser.CURRENT:
                    case YQLParser.CURRENT_DATE:
                    case YQLParser.CURRENT_TIME:
                    case YQLParser.CURRENT_TIMESTAMP:
                    case YQLParser.DATA:
                    case YQLParser.DATABASE:
                    case YQLParser.DECIMAL:
                    case YQLParser.DECLARE:
                    case YQLParser.DEFAULT:
                    case YQLParser.DEFERRABLE:
                    case YQLParser.DEFERRED:
                    case YQLParser.DEFINE:
                    case YQLParser.DELETE:
                    case YQLParser.DESC:
                    case YQLParser.DESCRIBE:
                    case YQLParser.DETACH:
                    case YQLParser.DIRECTORY:
                    case YQLParser.DISABLE:
                    case YQLParser.DISCARD:
                    case YQLParser.DISTINCT:
                    case YQLParser.DO:
                    case YQLParser.DROP:
                    case YQLParser.EACH:
                    case YQLParser.ELSE:
                    case YQLParser.EMPTY:
                    case YQLParser.EMPTY_ACTION:
                    case YQLParser.ENCRYPTED:
                    case YQLParser.END:
                    case YQLParser.ERASE:
                    case YQLParser.ERROR:
                    case YQLParser.ESCAPE:
                    case YQLParser.EVALUATE:
                    case YQLParser.EXCEPT:
                    case YQLParser.EXCLUDE:
                    case YQLParser.EXCLUSION:
                    case YQLParser.EXCLUSIVE:
                    case YQLParser.EXISTS:
                    case YQLParser.EXPLAIN:
                    case YQLParser.EXPORT:
                    case YQLParser.EXTERNAL:
                    case YQLParser.FAIL:
                    case YQLParser.FAMILY:
                    case YQLParser.FILTER:
                    case YQLParser.FIRST:
                    case YQLParser.FLATTEN:
                    case YQLParser.FOLLOWING:
                    case YQLParser.FOR:
                    case YQLParser.FOREIGN:
                    case YQLParser.FROM:
                    case YQLParser.FULL:
                    case YQLParser.FUNCTION:
                    case YQLParser.GLOB:
                    case YQLParser.GRANT:
                    case YQLParser.GROUP:
                    case YQLParser.GROUPING:
                    case YQLParser.GROUPS:
                    case YQLParser.HASH:
                    case YQLParser.HAVING:
                    case YQLParser.HOP:
                    case YQLParser.IF:
                    case YQLParser.IGNORE:
                    case YQLParser.ILIKE:
                    case YQLParser.IMMEDIATE:
                    case YQLParser.IMPORT:
                    case YQLParser.IN:
                    case YQLParser.INDEX:
                    case YQLParser.INDEXED:
                    case YQLParser.INHERITS:
                    case YQLParser.INITIAL:
                    case YQLParser.INITIALLY:
                    case YQLParser.INNER:
                    case YQLParser.INSERT:
                    case YQLParser.INSTEAD:
                    case YQLParser.INTERSECT:
                    case YQLParser.INTO:
                    case YQLParser.IS:
                    case YQLParser.ISNULL:
                    case YQLParser.JOIN:
                    case YQLParser.JSON_EXISTS:
                    case YQLParser.JSON_QUERY:
                    case YQLParser.JSON_VALUE:
                    case YQLParser.KEY:
                    case YQLParser.LAST:
                    case YQLParser.LEFT:
                    case YQLParser.LEGACY:
                    case YQLParser.LIKE:
                    case YQLParser.LIMIT:
                    case YQLParser.LOCAL:
                    case YQLParser.MANAGE:
                    case YQLParser.MATCH:
                    case YQLParser.MATCHES:
                    case YQLParser.MATCH_RECOGNIZE:
                    case YQLParser.MEASURES:
                    case YQLParser.MICROSECONDS:
                    case YQLParser.MILLISECONDS:
                    case YQLParser.MODIFY:
                    case YQLParser.NANOSECONDS:
                    case YQLParser.NATURAL:
                    case YQLParser.NEXT:
                    case YQLParser.NO:
                    case YQLParser.NOT:
                    case YQLParser.NOTNULL:
                    case YQLParser.NULL:
                    case YQLParser.NULLS:
                    case YQLParser.OBJECT:
                    case YQLParser.OF:
                    case YQLParser.OFFSET:
                    case YQLParser.OMIT:
                    case YQLParser.ON:
                    case YQLParser.ONE:
                    case YQLParser.ONLY:
                    case YQLParser.OPTION:
                    case YQLParser.OR:
                    case YQLParser.ORDER:
                    case YQLParser.OTHERS:
                    case YQLParser.OUTER:
                    case YQLParser.OVER:
                    case YQLParser.PARALLEL:
                    case YQLParser.PARTITION:
                    case YQLParser.PASSING:
                    case YQLParser.PASSWORD:
                    case YQLParser.PAST:
                    case YQLParser.PATTERN:
                    case YQLParser.PER:
                    case YQLParser.PERMUTE:
                    case YQLParser.PLAN:
                    case YQLParser.PRAGMA:
                    case YQLParser.PRECEDING:
                    case YQLParser.PRESORT:
                    case YQLParser.PRIMARY:
                    case YQLParser.PRIVILEGES:
                    case YQLParser.PROCESS:
                    case YQLParser.QUEUE:
                    case YQLParser.RAISE:
                    case YQLParser.RANGE:
                    case YQLParser.REDUCE:
                    case YQLParser.REFERENCES:
                    case YQLParser.REGEXP:
                    case YQLParser.REINDEX:
                    case YQLParser.RELEASE:
                    case YQLParser.REMOVE:
                    case YQLParser.RENAME:
                    case YQLParser.REPLACE:
                    case YQLParser.REPLICATION:
                    case YQLParser.RESET:
                    case YQLParser.RESPECT:
                    case YQLParser.RESTRICT:
                    case YQLParser.RESULT:
                    case YQLParser.RETURN:
                    case YQLParser.RETURNING:
                    case YQLParser.REVERT:
                    case YQLParser.REVOKE:
                    case YQLParser.RIGHT:
                    case YQLParser.RLIKE:
                    case YQLParser.ROLLBACK:
                    case YQLParser.ROLLUP:
                    case YQLParser.ROW:
                    case YQLParser.ROWS:
                    case YQLParser.SAMPLE:
                    case YQLParser.SAVEPOINT:
                    case YQLParser.SCHEMA:
                    case YQLParser.SECONDS:
                    case YQLParser.SEEK:
                    case YQLParser.SELECT:
                    case YQLParser.SEMI:
                    case YQLParser.SETS:
                    case YQLParser.SHOW:
                    case YQLParser.SKIP_RULE:
                    case YQLParser.SOURCE:
                    case YQLParser.STREAM:
                    case YQLParser.SUBQUERY:
                    case YQLParser.SUBSET:
                    case YQLParser.SYMBOLS:
                    case YQLParser.SYMMETRIC:
                    case YQLParser.SYNC:
                    case YQLParser.SYSTEM:
                    case YQLParser.TABLE:
                    case YQLParser.TABLES:
                    case YQLParser.TABLESAMPLE:
                    case YQLParser.TABLESTORE:
                    case YQLParser.TEMP:
                    case YQLParser.TEMPORARY:
                    case YQLParser.THEN:
                    case YQLParser.TIES:
                    case YQLParser.TO:
                    case YQLParser.TOPIC:
                    case YQLParser.TRANSACTION:
                    case YQLParser.TRIGGER:
                    case YQLParser.TYPE:
                    case YQLParser.UNBOUNDED:
                    case YQLParser.UNCONDITIONAL:
                    case YQLParser.UNION:
                    case YQLParser.UNIQUE:
                    case YQLParser.UNKNOWN:
                    case YQLParser.UNMATCHED:
                    case YQLParser.UPDATE:
                    case YQLParser.UPSERT:
                    case YQLParser.USE:
                    case YQLParser.USER:
                    case YQLParser.USING:
                    case YQLParser.VACUUM:
                    case YQLParser.VALUES:
                    case YQLParser.VIEW:
                    case YQLParser.VIRTUAL:
                    case YQLParser.WHEN:
                    case YQLParser.WHERE:
                    case YQLParser.WINDOW:
                    case YQLParser.WITH:
                    case YQLParser.WITHOUT:
                    case YQLParser.WRAPPER:
                    case YQLParser.XOR:
                    case YQLParser.STRING_VALUE:
                    case YQLParser.ID_PLAIN:
                    case YQLParser.ID_QUOTED:
                        {
                        this.state = 3619;
                        this.type_name_tag();
                        }
                        break;
                    case YQLParser.LPAREN:
                        {
                        this.state = 3620;
                        this.match(YQLParser.LPAREN);
                        this.state = 3621;
                        this.type_name_tag();
                        this.state = 3626;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 387, this.context);
                        while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                            if (alternative === 1) {
                                {
                                {
                                this.state = 3622;
                                this.match(YQLParser.COMMA);
                                this.state = 3623;
                                this.type_name_tag();
                                }
                                }
                            }
                            this.state = 3628;
                            this.errorHandler.sync(this);
                            alternative = this.interpreter.adaptivePredict(this.tokenStream, 387, this.context);
                        }
                        this.state = 3630;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 26) {
                            {
                            this.state = 3629;
                            this.match(YQLParser.COMMA);
                            }
                        }

                        this.state = 3632;
                        this.match(YQLParser.RPAREN);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3638;
                _la = this.tokenStream.LA(1);
                if(!(_la === 78 || _la === 259)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3640;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3639;
                    this.match(YQLParser.EQUALS);
                    }
                }

                this.state = 3642;
                this.type_name_or_bind();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3643;
                this.match(YQLParser.SCHEMA);
                this.state = 3645;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3644;
                    this.match(YQLParser.EQUALS);
                    }
                }

                this.state = 3647;
                this.match(YQLParser.LPAREN);
                this.state = 3656;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3221223425) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294836207) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294950911) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1073741821) !== 0)) {
                    {
                    this.state = 3648;
                    this.struct_arg_positional();
                    this.state = 3653;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 393, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 3649;
                            this.match(YQLParser.COMMA);
                            this.state = 3650;
                            this.struct_arg_positional();
                            }
                            }
                        }
                        this.state = 3655;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 393, this.context);
                    }
                    }
                }

                this.state = 3659;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26) {
                    {
                    this.state = 3658;
                    this.match(YQLParser.COMMA);
                    }
                }

                this.state = 3661;
                this.match(YQLParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_ref(): Object_refContext {
        let localContext = new Object_refContext(this.context, this.state);
        this.enterRule(localContext, 582, YQLParser.RULE_object_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3667;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 397, this.context) ) {
            case 1:
                {
                this.state = 3664;
                this.cluster_expr();
                this.state = 3665;
                this.match(YQLParser.DOT);
                }
                break;
            }
            this.state = 3669;
            this.id_or_at();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext {
        let localContext = new Simple_table_ref_coreContext(this.context, this.state);
        this.enterRule(localContext, 584, YQLParser.RULE_simple_table_ref_core);
        let _la: number;
        try {
            this.state = 3676;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3671;
                this.object_ref();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3673;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 31) {
                    {
                    this.state = 3672;
                    this.match(YQLParser.AT);
                    }
                }

                this.state = 3675;
                this.bind_parameter();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_table_ref(): Simple_table_refContext {
        let localContext = new Simple_table_refContext(this.context, this.state);
        this.enterRule(localContext, 586, YQLParser.RULE_simple_table_ref);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3678;
            this.simple_table_ref_core();
            this.state = 3680;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 3679;
                this.table_hints();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_simple_table_ref(): Into_simple_table_refContext {
        let localContext = new Into_simple_table_refContext(this.context, this.state);
        this.enterRule(localContext, 588, YQLParser.RULE_into_simple_table_ref);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3682;
            this.simple_table_ref();
            this.state = 3686;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 3683;
                this.match(YQLParser.ERASE);
                this.state = 3684;
                this.match(YQLParser.BY);
                this.state = 3685;
                this.pure_column_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public delete_stmt(): Delete_stmtContext {
        let localContext = new Delete_stmtContext(this.context, this.state);
        this.enterRule(localContext, 590, YQLParser.RULE_delete_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3688;
            this.match(YQLParser.DELETE);
            this.state = 3689;
            this.match(YQLParser.FROM);
            this.state = 3690;
            this.simple_table_ref();
            this.state = 3694;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.WHERE:
                {
                this.state = 3691;
                this.where_expr();
                }
                break;
            case YQLParser.ON:
                {
                this.state = 3692;
                this.match(YQLParser.ON);
                this.state = 3693;
                this.into_values_source();
                }
                break;
            case YQLParser.EOF:
            case YQLParser.SEMICOLON:
            case YQLParser.END:
            case YQLParser.RETURNING:
                break;
            default:
                break;
            }
            this.state = 3697;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 248) {
                {
                this.state = 3696;
                this.returning_columns_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public update_stmt(): Update_stmtContext {
        let localContext = new Update_stmtContext(this.context, this.state);
        this.enterRule(localContext, 592, YQLParser.RULE_update_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3699;
            this.match(YQLParser.UPDATE);
            this.state = 3700;
            this.simple_table_ref();
            this.state = 3708;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                {
                this.state = 3701;
                this.match(YQLParser.SET);
                this.state = 3702;
                this.set_clause_choice();
                this.state = 3704;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 310) {
                    {
                    this.state = 3703;
                    this.where_expr();
                    }
                }

                }
                break;
            case YQLParser.ON:
                {
                this.state = 3706;
                this.match(YQLParser.ON);
                this.state = 3707;
                this.into_values_source();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3711;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 248) {
                {
                this.state = 3710;
                this.returning_columns_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause_choice(): Set_clause_choiceContext {
        let localContext = new Set_clause_choiceContext(this.context, this.state);
        this.enterRule(localContext, 594, YQLParser.RULE_set_clause_choice);
        try {
            this.state = 3715;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3713;
                this.set_clause_list();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3714;
                this.multiple_column_assignment();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause_list(): Set_clause_listContext {
        let localContext = new Set_clause_listContext(this.context, this.state);
        this.enterRule(localContext, 596, YQLParser.RULE_set_clause_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3717;
            this.set_clause();
            this.state = 3722;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3718;
                this.match(YQLParser.COMMA);
                this.state = 3719;
                this.set_clause();
                }
                }
                this.state = 3724;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause(): Set_clauseContext {
        let localContext = new Set_clauseContext(this.context, this.state);
        this.enterRule(localContext, 598, YQLParser.RULE_set_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3725;
            this.set_target();
            this.state = 3726;
            this.match(YQLParser.EQUALS);
            this.state = 3727;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_target(): Set_targetContext {
        let localContext = new Set_targetContext(this.context, this.state);
        this.enterRule(localContext, 600, YQLParser.RULE_set_target);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3729;
            this.column_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiple_column_assignment(): Multiple_column_assignmentContext {
        let localContext = new Multiple_column_assignmentContext(this.context, this.state);
        this.enterRule(localContext, 602, YQLParser.RULE_multiple_column_assignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3731;
            this.set_target_list();
            this.state = 3732;
            this.match(YQLParser.EQUALS);
            this.state = 3733;
            this.match(YQLParser.LPAREN);
            this.state = 3734;
            this.simple_values_source();
            this.state = 3735;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_target_list(): Set_target_listContext {
        let localContext = new Set_target_listContext(this.context, this.state);
        this.enterRule(localContext, 604, YQLParser.RULE_set_target_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3737;
            this.match(YQLParser.LPAREN);
            this.state = 3738;
            this.set_target();
            this.state = 3743;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3739;
                this.match(YQLParser.COMMA);
                this.state = 3740;
                this.set_target();
                }
                }
                this.state = 3745;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3746;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_topic_stmt(): Create_topic_stmtContext {
        let localContext = new Create_topic_stmtContext(this.context, this.state);
        this.enterRule(localContext, 606, YQLParser.RULE_create_topic_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3748;
            this.match(YQLParser.CREATE);
            this.state = 3749;
            this.match(YQLParser.TOPIC);
            this.state = 3750;
            this.topic_ref();
            this.state = 3752;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 27) {
                {
                this.state = 3751;
                this.create_topic_entries();
                }
            }

            this.state = 3755;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 3754;
                this.with_topic_settings();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_topic_entries(): Create_topic_entriesContext {
        let localContext = new Create_topic_entriesContext(this.context, this.state);
        this.enterRule(localContext, 608, YQLParser.RULE_create_topic_entries);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3757;
            this.match(YQLParser.LPAREN);
            this.state = 3758;
            this.create_topic_entry();
            this.state = 3763;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3759;
                this.match(YQLParser.COMMA);
                this.state = 3760;
                this.create_topic_entry();
                }
                }
                this.state = 3765;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3766;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_topic_entry(): Create_topic_entryContext {
        let localContext = new Create_topic_entryContext(this.context, this.state);
        this.enterRule(localContext, 610, YQLParser.RULE_create_topic_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3768;
            this.topic_create_consumer_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_topic_settings(): With_topic_settingsContext {
        let localContext = new With_topic_settingsContext(this.context, this.state);
        this.enterRule(localContext, 612, YQLParser.RULE_with_topic_settings);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3770;
            this.match(YQLParser.WITH);
            this.state = 3771;
            this.match(YQLParser.LPAREN);
            this.state = 3772;
            this.topic_settings();
            this.state = 3773;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_stmt(): Alter_topic_stmtContext {
        let localContext = new Alter_topic_stmtContext(this.context, this.state);
        this.enterRule(localContext, 614, YQLParser.RULE_alter_topic_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3775;
            this.match(YQLParser.ALTER);
            this.state = 3776;
            this.match(YQLParser.TOPIC);
            this.state = 3777;
            this.topic_ref();
            this.state = 3778;
            this.alter_topic_action();
            this.state = 3783;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3779;
                this.match(YQLParser.COMMA);
                this.state = 3780;
                this.alter_topic_action();
                }
                }
                this.state = 3785;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_action(): Alter_topic_actionContext {
        let localContext = new Alter_topic_actionContext(this.context, this.state);
        this.enterRule(localContext, 616, YQLParser.RULE_alter_topic_action);
        try {
            this.state = 3791;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ADD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3786;
                this.alter_topic_add_consumer();
                }
                break;
            case YQLParser.ALTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3787;
                this.alter_topic_alter_consumer();
                }
                break;
            case YQLParser.DROP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3788;
                this.alter_topic_drop_consumer();
                }
                break;
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3789;
                this.alter_topic_set_settings();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3790;
                this.alter_topic_reset_settings();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_add_consumer(): Alter_topic_add_consumerContext {
        let localContext = new Alter_topic_add_consumerContext(this.context, this.state);
        this.enterRule(localContext, 618, YQLParser.RULE_alter_topic_add_consumer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3793;
            this.match(YQLParser.ADD);
            this.state = 3794;
            this.topic_create_consumer_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_create_consumer_entry(): Topic_create_consumer_entryContext {
        let localContext = new Topic_create_consumer_entryContext(this.context, this.state);
        this.enterRule(localContext, 620, YQLParser.RULE_topic_create_consumer_entry);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3796;
            this.match(YQLParser.CONSUMER);
            this.state = 3797;
            this.an_id();
            this.state = 3799;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 312) {
                {
                this.state = 3798;
                this.topic_consumer_with_settings();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_alter_consumer(): Alter_topic_alter_consumerContext {
        let localContext = new Alter_topic_alter_consumerContext(this.context, this.state);
        this.enterRule(localContext, 622, YQLParser.RULE_alter_topic_alter_consumer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3801;
            this.match(YQLParser.ALTER);
            this.state = 3802;
            this.match(YQLParser.CONSUMER);
            this.state = 3803;
            this.topic_consumer_ref();
            this.state = 3804;
            this.alter_topic_alter_consumer_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_alter_consumer_entry(): Alter_topic_alter_consumer_entryContext {
        let localContext = new Alter_topic_alter_consumer_entryContext(this.context, this.state);
        this.enterRule(localContext, 624, YQLParser.RULE_alter_topic_alter_consumer_entry);
        try {
            this.state = 3808;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3806;
                this.topic_alter_consumer_set();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3807;
                this.topic_alter_consumer_reset();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_drop_consumer(): Alter_topic_drop_consumerContext {
        let localContext = new Alter_topic_drop_consumerContext(this.context, this.state);
        this.enterRule(localContext, 626, YQLParser.RULE_alter_topic_drop_consumer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3810;
            this.match(YQLParser.DROP);
            this.state = 3811;
            this.match(YQLParser.CONSUMER);
            this.state = 3812;
            this.topic_consumer_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_alter_consumer_set(): Topic_alter_consumer_setContext {
        let localContext = new Topic_alter_consumer_setContext(this.context, this.state);
        this.enterRule(localContext, 628, YQLParser.RULE_topic_alter_consumer_set);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3814;
            this.match(YQLParser.SET);
            this.state = 3815;
            this.match(YQLParser.LPAREN);
            this.state = 3816;
            this.topic_consumer_settings();
            this.state = 3817;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_alter_consumer_reset(): Topic_alter_consumer_resetContext {
        let localContext = new Topic_alter_consumer_resetContext(this.context, this.state);
        this.enterRule(localContext, 630, YQLParser.RULE_topic_alter_consumer_reset);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3819;
            this.match(YQLParser.RESET);
            this.state = 3820;
            this.match(YQLParser.LPAREN);
            this.state = 3821;
            this.an_id();
            this.state = 3826;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3822;
                this.match(YQLParser.COMMA);
                this.state = 3823;
                this.an_id();
                }
                }
                this.state = 3828;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3829;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_set_settings(): Alter_topic_set_settingsContext {
        let localContext = new Alter_topic_set_settingsContext(this.context, this.state);
        this.enterRule(localContext, 632, YQLParser.RULE_alter_topic_set_settings);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3831;
            this.match(YQLParser.SET);
            this.state = 3832;
            this.match(YQLParser.LPAREN);
            this.state = 3833;
            this.topic_settings();
            this.state = 3834;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_reset_settings(): Alter_topic_reset_settingsContext {
        let localContext = new Alter_topic_reset_settingsContext(this.context, this.state);
        this.enterRule(localContext, 634, YQLParser.RULE_alter_topic_reset_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3836;
            this.match(YQLParser.RESET);
            this.state = 3837;
            this.match(YQLParser.LPAREN);
            this.state = 3838;
            this.an_id();
            this.state = 3843;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3839;
                this.match(YQLParser.COMMA);
                this.state = 3840;
                this.an_id_pure();
                }
                }
                this.state = 3845;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3846;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_topic_stmt(): Drop_topic_stmtContext {
        let localContext = new Drop_topic_stmtContext(this.context, this.state);
        this.enterRule(localContext, 636, YQLParser.RULE_drop_topic_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3848;
            this.match(YQLParser.DROP);
            this.state = 3849;
            this.match(YQLParser.TOPIC);
            this.state = 3850;
            this.topic_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_settings(): Topic_settingsContext {
        let localContext = new Topic_settingsContext(this.context, this.state);
        this.enterRule(localContext, 638, YQLParser.RULE_topic_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3852;
            this.topic_settings_entry();
            this.state = 3857;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3853;
                this.match(YQLParser.COMMA);
                this.state = 3854;
                this.topic_settings_entry();
                }
                }
                this.state = 3859;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_settings_entry(): Topic_settings_entryContext {
        let localContext = new Topic_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 640, YQLParser.RULE_topic_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3860;
            this.an_id();
            this.state = 3861;
            this.match(YQLParser.EQUALS);
            this.state = 3862;
            this.topic_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_setting_value(): Topic_setting_valueContext {
        let localContext = new Topic_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 642, YQLParser.RULE_topic_setting_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3864;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_with_settings(): Topic_consumer_with_settingsContext {
        let localContext = new Topic_consumer_with_settingsContext(this.context, this.state);
        this.enterRule(localContext, 644, YQLParser.RULE_topic_consumer_with_settings);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3866;
            this.match(YQLParser.WITH);
            this.state = 3867;
            this.match(YQLParser.LPAREN);
            this.state = 3868;
            this.topic_consumer_settings();
            this.state = 3869;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_settings(): Topic_consumer_settingsContext {
        let localContext = new Topic_consumer_settingsContext(this.context, this.state);
        this.enterRule(localContext, 646, YQLParser.RULE_topic_consumer_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3871;
            this.topic_consumer_settings_entry();
            this.state = 3876;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3872;
                this.match(YQLParser.COMMA);
                this.state = 3873;
                this.topic_consumer_settings_entry();
                }
                }
                this.state = 3878;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_settings_entry(): Topic_consumer_settings_entryContext {
        let localContext = new Topic_consumer_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 648, YQLParser.RULE_topic_consumer_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3879;
            this.an_id();
            this.state = 3880;
            this.match(YQLParser.EQUALS);
            this.state = 3881;
            this.topic_consumer_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_setting_value(): Topic_consumer_setting_valueContext {
        let localContext = new Topic_consumer_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 650, YQLParser.RULE_topic_consumer_setting_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3883;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_ref(): Topic_refContext {
        let localContext = new Topic_refContext(this.context, this.state);
        this.enterRule(localContext, 652, YQLParser.RULE_topic_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3888;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 421, this.context) ) {
            case 1:
                {
                this.state = 3885;
                this.cluster_expr();
                this.state = 3886;
                this.match(YQLParser.DOT);
                }
                break;
            }
            this.state = 3890;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_ref(): Topic_consumer_refContext {
        let localContext = new Topic_consumer_refContext(this.context, this.state);
        this.enterRule(localContext, 654, YQLParser.RULE_topic_consumer_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3892;
            this.an_id_pure();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public null_treatment(): Null_treatmentContext {
        let localContext = new Null_treatmentContext(this.context, this.state);
        this.enterRule(localContext, 656, YQLParser.RULE_null_treatment);
        try {
            this.state = 3898;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.RESPECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3894;
                this.match(YQLParser.RESPECT);
                this.state = 3895;
                this.match(YQLParser.NULLS);
                }
                break;
            case YQLParser.IGNORE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3896;
                this.match(YQLParser.IGNORE);
                this.state = 3897;
                this.match(YQLParser.NULLS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filter_clause(): Filter_clauseContext {
        let localContext = new Filter_clauseContext(this.context, this.state);
        this.enterRule(localContext, 658, YQLParser.RULE_filter_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3900;
            this.match(YQLParser.FILTER);
            this.state = 3901;
            this.match(YQLParser.LPAREN);
            this.state = 3902;
            this.where_expr();
            this.state = 3903;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_name_or_specification(): Window_name_or_specificationContext {
        let localContext = new Window_name_or_specificationContext(this.context, this.state);
        this.enterRule(localContext, 660, YQLParser.RULE_window_name_or_specification);
        try {
            this.state = 3907;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3905;
                this.window_name();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3906;
                this.window_specification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_name(): Window_nameContext {
        let localContext = new Window_nameContext(this.context, this.state);
        this.enterRule(localContext, 662, YQLParser.RULE_window_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3909;
            this.an_id_window();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_clause(): Window_clauseContext {
        let localContext = new Window_clauseContext(this.context, this.state);
        this.enterRule(localContext, 664, YQLParser.RULE_window_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3911;
            this.match(YQLParser.WINDOW);
            this.state = 3912;
            this.window_definition_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_definition_list(): Window_definition_listContext {
        let localContext = new Window_definition_listContext(this.context, this.state);
        this.enterRule(localContext, 666, YQLParser.RULE_window_definition_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3914;
            this.window_definition();
            this.state = 3919;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 26) {
                {
                {
                this.state = 3915;
                this.match(YQLParser.COMMA);
                this.state = 3916;
                this.window_definition();
                }
                }
                this.state = 3921;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_definition(): Window_definitionContext {
        let localContext = new Window_definitionContext(this.context, this.state);
        this.enterRule(localContext, 668, YQLParser.RULE_window_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3922;
            this.new_window_name();
            this.state = 3923;
            this.match(YQLParser.AS);
            this.state = 3924;
            this.window_specification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public new_window_name(): New_window_nameContext {
        let localContext = new New_window_nameContext(this.context, this.state);
        this.enterRule(localContext, 670, YQLParser.RULE_new_window_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3926;
            this.window_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification(): Window_specificationContext {
        let localContext = new Window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 672, YQLParser.RULE_window_specification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3928;
            this.match(YQLParser.LPAREN);
            this.state = 3929;
            this.window_specification_details();
            this.state = 3930;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification_details(): Window_specification_detailsContext {
        let localContext = new Window_specification_detailsContext(this.context, this.state);
        this.enterRule(localContext, 674, YQLParser.RULE_window_specification_details);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3933;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 425, this.context) ) {
            case 1:
                {
                this.state = 3932;
                this.existing_window_name();
                }
                break;
            }
            this.state = 3936;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215) {
                {
                this.state = 3935;
                this.window_partition_clause();
                }
            }

            this.state = 3939;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 210) {
                {
                this.state = 3938;
                this.window_order_clause();
                }
            }

            this.state = 3942;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 150 || _la === 231 || _la === 256) {
                {
                this.state = 3941;
                this.window_frame_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existing_window_name(): Existing_window_nameContext {
        let localContext = new Existing_window_nameContext(this.context, this.state);
        this.enterRule(localContext, 676, YQLParser.RULE_existing_window_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3944;
            this.window_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_partition_clause(): Window_partition_clauseContext {
        let localContext = new Window_partition_clauseContext(this.context, this.state);
        this.enterRule(localContext, 678, YQLParser.RULE_window_partition_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3946;
            this.match(YQLParser.PARTITION);
            this.state = 3948;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 3947;
                this.match(YQLParser.COMPACT);
                }
            }

            this.state = 3950;
            this.match(YQLParser.BY);
            this.state = 3951;
            this.named_expr_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_order_clause(): Window_order_clauseContext {
        let localContext = new Window_order_clauseContext(this.context, this.state);
        this.enterRule(localContext, 680, YQLParser.RULE_window_order_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3953;
            this.order_by_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_clause(): Window_frame_clauseContext {
        let localContext = new Window_frame_clauseContext(this.context, this.state);
        this.enterRule(localContext, 682, YQLParser.RULE_window_frame_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3955;
            this.window_frame_units();
            this.state = 3956;
            this.window_frame_extent();
            this.state = 3958;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 125) {
                {
                this.state = 3957;
                this.window_frame_exclusion();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_units(): Window_frame_unitsContext {
        let localContext = new Window_frame_unitsContext(this.context, this.state);
        this.enterRule(localContext, 684, YQLParser.RULE_window_frame_units);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3960;
            _la = this.tokenStream.LA(1);
            if(!(_la === 150 || _la === 231 || _la === 256)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_extent(): Window_frame_extentContext {
        let localContext = new Window_frame_extentContext(this.context, this.state);
        this.enterRule(localContext, 686, YQLParser.RULE_window_frame_extent);
        try {
            this.state = 3964;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 431, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3962;
                this.window_frame_bound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3963;
                this.window_frame_between();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_between(): Window_frame_betweenContext {
        let localContext = new Window_frame_betweenContext(this.context, this.state);
        this.enterRule(localContext, 688, YQLParser.RULE_window_frame_between);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3966;
            this.match(YQLParser.BETWEEN);
            this.state = 3967;
            this.window_frame_bound();
            this.state = 3968;
            this.match(YQLParser.AND);
            this.state = 3969;
            this.window_frame_bound();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_bound(): Window_frame_boundContext {
        let localContext = new Window_frame_boundContext(this.context, this.state);
        this.enterRule(localContext, 690, YQLParser.RULE_window_frame_bound);
        let _la: number;
        try {
            this.state = 3978;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 433, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3971;
                this.match(YQLParser.CURRENT);
                this.state = 3972;
                this.match(YQLParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3975;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 432, this.context) ) {
                case 1:
                    {
                    this.state = 3973;
                    this.expr();
                    }
                    break;
                case 2:
                    {
                    this.state = 3974;
                    this.match(YQLParser.UNBOUNDED);
                    }
                    break;
                }
                this.state = 3977;
                _la = this.tokenStream.LA(1);
                if(!(_la === 139 || _la === 224)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_exclusion(): Window_frame_exclusionContext {
        let localContext = new Window_frame_exclusionContext(this.context, this.state);
        this.enterRule(localContext, 692, YQLParser.RULE_window_frame_exclusion);
        try {
            this.state = 3990;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 434, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3980;
                this.match(YQLParser.EXCLUDE);
                this.state = 3981;
                this.match(YQLParser.CURRENT);
                this.state = 3982;
                this.match(YQLParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3983;
                this.match(YQLParser.EXCLUDE);
                this.state = 3984;
                this.match(YQLParser.GROUP);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3985;
                this.match(YQLParser.EXCLUDE);
                this.state = 3986;
                this.match(YQLParser.TIES);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3987;
                this.match(YQLParser.EXCLUDE);
                this.state = 3988;
                this.match(YQLParser.NO);
                this.state = 3989;
                this.match(YQLParser.OTHERS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public use_stmt(): Use_stmtContext {
        let localContext = new Use_stmtContext(this.context, this.state);
        this.enterRule(localContext, 694, YQLParser.RULE_use_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3992;
            this.match(YQLParser.USE);
            this.state = 3993;
            this.cluster_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subselect_stmt(): Subselect_stmtContext {
        let localContext = new Subselect_stmtContext(this.context, this.state);
        this.enterRule(localContext, 696, YQLParser.RULE_subselect_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4000;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LPAREN:
                {
                this.state = 3995;
                this.match(YQLParser.LPAREN);
                this.state = 3996;
                this.select_stmt();
                this.state = 3997;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                {
                this.state = 3999;
                this.select_unparenthesized_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_nodes_stmt(): Named_nodes_stmtContext {
        let localContext = new Named_nodes_stmtContext(this.context, this.state);
        this.enterRule(localContext, 698, YQLParser.RULE_named_nodes_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4002;
            this.bind_parameter_list();
            this.state = 4003;
            this.match(YQLParser.EQUALS);
            this.state = 4006;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 436, this.context) ) {
            case 1:
                {
                this.state = 4004;
                this.expr();
                }
                break;
            case 2:
                {
                this.state = 4005;
                this.subselect_stmt();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commit_stmt(): Commit_stmtContext {
        let localContext = new Commit_stmtContext(this.context, this.state);
        this.enterRule(localContext, 700, YQLParser.RULE_commit_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4008;
            this.match(YQLParser.COMMIT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollback_stmt(): Rollback_stmtContext {
        let localContext = new Rollback_stmtContext(this.context, this.state);
        this.enterRule(localContext, 702, YQLParser.RULE_rollback_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4010;
            this.match(YQLParser.ROLLBACK);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 704, YQLParser.RULE_identifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4012;
            _la = this.tokenStream.LA(1);
            if(!(_la === 317 || _la === 318)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id(): IdContext {
        let localContext = new IdContext(this.context, this.state);
        this.enterRule(localContext, 706, YQLParser.RULE_id);
        try {
            this.state = 4016;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4014;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4015;
                this.keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_schema(): Id_schemaContext {
        let localContext = new Id_schemaContext(this.context, this.state);
        this.enterRule(localContext, 708, YQLParser.RULE_id_schema);
        try {
            this.state = 4025;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4018;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4019;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4020;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4021;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4022;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4023;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4024;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_expr(): Id_exprContext {
        let localContext = new Id_exprContext(this.context, this.state);
        this.enterRule(localContext, 710, YQLParser.RULE_id_expr);
        try {
            this.state = 4033;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4027;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4028;
                this.keyword_compat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4029;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4030;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4031;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4032;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_expr_in(): Id_expr_inContext {
        let localContext = new Id_expr_inContext(this.context, this.state);
        this.enterRule(localContext, 712, YQLParser.RULE_id_expr_in);
        try {
            this.state = 4040;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4035;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4036;
                this.keyword_compat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4037;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4038;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4039;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_window(): Id_windowContext {
        let localContext = new Id_windowContext(this.context, this.state);
        this.enterRule(localContext, 714, YQLParser.RULE_id_window);
        try {
            this.state = 4050;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4042;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4043;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4044;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4045;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4046;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4047;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4048;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4049;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_table(): Id_tableContext {
        let localContext = new Id_tableContext(this.context, this.state);
        this.enterRule(localContext, 716, YQLParser.RULE_id_table);
        try {
            this.state = 4059;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4052;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4053;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4054;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4055;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4056;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4057;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4058;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_without(): Id_withoutContext {
        let localContext = new Id_withoutContext(this.context, this.state);
        this.enterRule(localContext, 718, YQLParser.RULE_id_without);
        try {
            this.state = 4068;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4061;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4062;
                this.keyword_compat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4063;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4064;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4065;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4066;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4067;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_hint(): Id_hintContext {
        let localContext = new Id_hintContext(this.context, this.state);
        this.enterRule(localContext, 720, YQLParser.RULE_id_hint);
        try {
            this.state = 4078;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4070;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4071;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4072;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4073;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4074;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4075;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4076;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4077;
                this.keyword_window_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_as_compat(): Id_as_compatContext {
        let localContext = new Id_as_compatContext(this.context, this.state);
        this.enterRule(localContext, 722, YQLParser.RULE_id_as_compat);
        try {
            this.state = 4082;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4080;
                this.identifier();
                }
                break;
            case YQLParser.ATTRIBUTES:
            case YQLParser.CONNECT:
            case YQLParser.CONSUMER:
            case YQLParser.DATA:
            case YQLParser.DESCRIBE:
            case YQLParser.DIRECTORY:
            case YQLParser.FIRST:
            case YQLParser.GRANT:
            case YQLParser.INITIAL:
            case YQLParser.LAST:
            case YQLParser.LEGACY:
            case YQLParser.MANAGE:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NEXT:
            case YQLParser.OMIT:
            case YQLParser.ONE:
            case YQLParser.OPTION:
            case YQLParser.PARALLEL:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.REMOVE:
            case YQLParser.REPLICATION:
            case YQLParser.REVOKE:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBSET:
            case YQLParser.TABLES:
            case YQLParser.TOPIC:
            case YQLParser.TYPE:
            case YQLParser.UNMATCHED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4081;
                this.keyword_as_compat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id(): An_idContext {
        let localContext = new An_idContext(this.context, this.state);
        this.enterRule(localContext, 724, YQLParser.RULE_an_id);
        try {
            this.state = 4086;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4084;
                this.id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4085;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_or_type(): An_id_or_typeContext {
        let localContext = new An_id_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 726, YQLParser.RULE_an_id_or_type);
        try {
            this.state = 4090;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4088;
                this.id_or_type();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4089;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_schema(): An_id_schemaContext {
        let localContext = new An_id_schemaContext(this.context, this.state);
        this.enterRule(localContext, 728, YQLParser.RULE_an_id_schema);
        try {
            this.state = 4094;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4092;
                this.id_schema();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4093;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_expr(): An_id_exprContext {
        let localContext = new An_id_exprContext(this.context, this.state);
        this.enterRule(localContext, 730, YQLParser.RULE_an_id_expr);
        try {
            this.state = 4098;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4096;
                this.id_expr();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4097;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_expr_in(): An_id_expr_inContext {
        let localContext = new An_id_expr_inContext(this.context, this.state);
        this.enterRule(localContext, 732, YQLParser.RULE_an_id_expr_in);
        try {
            this.state = 4102;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4100;
                this.id_expr_in();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4101;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_window(): An_id_windowContext {
        let localContext = new An_id_windowContext(this.context, this.state);
        this.enterRule(localContext, 734, YQLParser.RULE_an_id_window);
        try {
            this.state = 4106;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4104;
                this.id_window();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4105;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_table(): An_id_tableContext {
        let localContext = new An_id_tableContext(this.context, this.state);
        this.enterRule(localContext, 736, YQLParser.RULE_an_id_table);
        try {
            this.state = 4110;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4108;
                this.id_table();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4109;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_without(): An_id_withoutContext {
        let localContext = new An_id_withoutContext(this.context, this.state);
        this.enterRule(localContext, 738, YQLParser.RULE_an_id_without);
        try {
            this.state = 4114;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4112;
                this.id_without();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4113;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_hint(): An_id_hintContext {
        let localContext = new An_id_hintContext(this.context, this.state);
        this.enterRule(localContext, 740, YQLParser.RULE_an_id_hint);
        try {
            this.state = 4118;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4116;
                this.id_hint();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4117;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_pure(): An_id_pureContext {
        let localContext = new An_id_pureContext(this.context, this.state);
        this.enterRule(localContext, 742, YQLParser.RULE_an_id_pure);
        try {
            this.state = 4122;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4120;
                this.identifier();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4121;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_as_compat(): An_id_as_compatContext {
        let localContext = new An_id_as_compatContext(this.context, this.state);
        this.enterRule(localContext, 744, YQLParser.RULE_an_id_as_compat);
        try {
            this.state = 4126;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ATTRIBUTES:
            case YQLParser.CONNECT:
            case YQLParser.CONSUMER:
            case YQLParser.DATA:
            case YQLParser.DESCRIBE:
            case YQLParser.DIRECTORY:
            case YQLParser.FIRST:
            case YQLParser.GRANT:
            case YQLParser.INITIAL:
            case YQLParser.LAST:
            case YQLParser.LEGACY:
            case YQLParser.MANAGE:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NEXT:
            case YQLParser.OMIT:
            case YQLParser.ONE:
            case YQLParser.OPTION:
            case YQLParser.PARALLEL:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.REMOVE:
            case YQLParser.REPLICATION:
            case YQLParser.REVOKE:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBSET:
            case YQLParser.TABLES:
            case YQLParser.TOPIC:
            case YQLParser.TYPE:
            case YQLParser.UNMATCHED:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4124;
                this.id_as_compat();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4125;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public view_name(): View_nameContext {
        let localContext = new View_nameContext(this.context, this.state);
        this.enterRule(localContext, 746, YQLParser.RULE_view_name);
        try {
            this.state = 4131;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 457, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4128;
                this.an_id();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4129;
                this.match(YQLParser.PRIMARY);
                this.state = 4130;
                this.match(YQLParser.KEY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_id_prefix(): Opt_id_prefixContext {
        let localContext = new Opt_id_prefixContext(this.context, this.state);
        this.enterRule(localContext, 748, YQLParser.RULE_opt_id_prefix);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4136;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 458, this.context) ) {
            case 1:
                {
                this.state = 4133;
                this.an_id();
                this.state = 4134;
                this.match(YQLParser.DOT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cluster_expr(): Cluster_exprContext {
        let localContext = new Cluster_exprContext(this.context, this.state);
        this.enterRule(localContext, 750, YQLParser.RULE_cluster_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4141;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 459, this.context) ) {
            case 1:
                {
                this.state = 4138;
                this.an_id();
                this.state = 4139;
                this.match(YQLParser.COLON);
                }
                break;
            }
            this.state = 4145;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 4143;
                this.pure_column_or_named();
                }
                break;
            case YQLParser.ASTERISK:
                {
                this.state = 4144;
                this.match(YQLParser.ASTERISK);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_or_type(): Id_or_typeContext {
        let localContext = new Id_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 752, YQLParser.RULE_id_or_type);
        try {
            this.state = 4149;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4147;
                this.id();
                }
                break;
            case YQLParser.CALLABLE:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4148;
                this.type_id();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_id_prefix_or_type(): Opt_id_prefix_or_typeContext {
        let localContext = new Opt_id_prefix_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 754, YQLParser.RULE_opt_id_prefix_or_type);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4154;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 462, this.context) ) {
            case 1:
                {
                this.state = 4151;
                this.an_id_or_type();
                this.state = 4152;
                this.match(YQLParser.DOT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_or_at(): Id_or_atContext {
        let localContext = new Id_or_atContext(this.context, this.state);
        this.enterRule(localContext, 756, YQLParser.RULE_id_or_at);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4157;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 31) {
                {
                this.state = 4156;
                this.match(YQLParser.AT);
                }
            }

            this.state = 4159;
            this.an_id_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_table_or_type(): Id_table_or_typeContext {
        let localContext = new Id_table_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 758, YQLParser.RULE_id_table_or_type);
        try {
            this.state = 4163;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4161;
                this.an_id_table();
                }
                break;
            case YQLParser.CALLABLE:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4162;
                this.type_id();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_table_or_at(): Id_table_or_atContext {
        let localContext = new Id_table_or_atContext(this.context, this.state);
        this.enterRule(localContext, 760, YQLParser.RULE_id_table_or_at);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4166;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 31) {
                {
                this.state = 4165;
                this.match(YQLParser.AT);
                }
            }

            this.state = 4168;
            this.id_table_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword(): KeywordContext {
        let localContext = new KeywordContext(this.context, this.state);
        this.enterRule(localContext, 762, YQLParser.RULE_keyword);
        try {
            this.state = 4178;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.SKIP_RULE:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4170;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4171;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4172;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4173;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4174;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4175;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4176;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4177;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext {
        let localContext = new Keyword_expr_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 764, YQLParser.RULE_keyword_expr_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4180;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 58)) & ~0x1F) === 0 && ((1 << (_la - 58)) & 2147534337) !== 0) || ((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 33554439) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 33603585) !== 0) || ((((_la - 173)) & ~0x1F) === 0 && ((1 << (_la - 173)) & 41944071) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & 68681745) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2147487745) !== 0) || _la === 309 || _la === 310)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext {
        let localContext = new Keyword_table_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 766, YQLParser.RULE_keyword_table_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4182;
            _la = this.tokenStream.LA(1);
            if(!(_la === 53 || _la === 120 || _la === 269)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext {
        let localContext = new Keyword_select_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 768, YQLParser.RULE_keyword_select_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4184;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 48)) & ~0x1F) === 0 && ((1 << (_la - 48)) & 641) !== 0) || _la === 110 || _la === 124 || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & 536936449) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 327681) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext {
        let localContext = new Keyword_alter_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 770, YQLParser.RULE_keyword_alter_uncompat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4186;
            this.match(YQLParser.COLUMN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext {
        let localContext = new Keyword_in_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 772, YQLParser.RULE_keyword_in_uncompat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4188;
            this.match(YQLParser.COMPACT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext {
        let localContext = new Keyword_window_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 774, YQLParser.RULE_keyword_window_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4190;
            _la = this.tokenStream.LA(1);
            if(!(_la === 150 || _la === 231 || _la === 256)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext {
        let localContext = new Keyword_hint_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 776, YQLParser.RULE_keyword_hint_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4192;
            _la = this.tokenStream.LA(1);
            if(!(_la === 78 || _la === 259)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_as_compat(): Keyword_as_compatContext {
        let localContext = new Keyword_as_compatContext(this.context, this.state);
        this.enterRule(localContext, 778, YQLParser.RULE_keyword_as_compat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4194;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & 20971521) !== 0) || ((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 9217) !== 0) || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & 134219777) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & 1409482373) !== 0) || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 142647537) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & 273091585) !== 0) || ((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & 2081) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_compat(): Keyword_compatContext {
        let localContext = new Keyword_compatContext(this.context, this.state);
        this.enterRule(localContext, 780, YQLParser.RULE_keyword_compat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4196;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & 3396834799) !== 0) || ((((_la - 76)) & ~0x1F) === 0 && ((1 << (_la - 76)) & 3220987881) !== 0) || ((((_la - 108)) & ~0x1F) === 0 && ((1 << (_la - 108)) & 3186550523) !== 0) || ((((_la - 140)) & ~0x1F) === 0 && ((1 << (_la - 140)) & 4026518451) !== 0) || ((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & 4211077617) !== 0) || ((((_la - 204)) & ~0x1F) === 0 && ((1 << (_la - 204)) & 3875536879) !== 0) || ((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & 3949717367) !== 0) || ((((_la - 268)) & ~0x1F) === 0 && ((1 << (_la - 268)) & 4114603961) !== 0) || ((((_la - 300)) & ~0x1F) === 0 && ((1 << (_la - 300)) & 53695) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_id(): Type_idContext {
        let localContext = new Type_idContext(this.context, this.state);
        this.enterRule(localContext, 782, YQLParser.RULE_type_id);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4198;
            _la = this.tokenStream.LA(1);
            if(!(_la === 70 || _la === 106 || _la === 119 || _la === 138 || _la === 182 || _la === 208 || ((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & 136314881) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & 33555457) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bool_value(): Bool_valueContext {
        let localContext = new Bool_valueContext(this.context, this.state);
        this.enterRule(localContext, 784, YQLParser.RULE_bool_value);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4200;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 290)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public real(): RealContext {
        let localContext = new RealContext(this.context, this.state);
        this.enterRule(localContext, 786, YQLParser.RULE_real);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4202;
            this.match(YQLParser.REAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public integer(): IntegerContext {
        let localContext = new IntegerContext(this.context, this.state);
        this.enterRule(localContext, 788, YQLParser.RULE_integer);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4204;
            _la = this.tokenStream.LA(1);
            if(!(_la === 319 || _la === 320)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_query_yq(): Sql_query_yqContext {
        let localContext = new Sql_query_yqContext(this.context, this.state);
        this.enterRule(localContext, 790, YQLParser.RULE_sql_query_yq);
        try {
            this.state = 4211;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 467, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4206;
                this.sql_stmt_list_yq();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 4207;
                this.match(YQLParser.PRAGMA);
                this.state = 4208;
                this.match(YQLParser.ANSI);
                this.state = 4209;
                this.match(YQLParser.DIGITS);
                this.state = 4210;
                this.ansi_sql_stmt_list();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_list_yq(): Sql_stmt_list_yqContext {
        let localContext = new Sql_stmt_list_yqContext(this.context, this.state);
        this.enterRule(localContext, 792, YQLParser.RULE_sql_stmt_list_yq);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4216;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 24) {
                {
                {
                this.state = 4213;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 4218;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4219;
            this.sql_stmt_yq();
            this.state = 4228;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 470, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4221;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 4220;
                        this.match(YQLParser.SEMICOLON);
                        }
                        }
                        this.state = 4223;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 24);
                    this.state = 4225;
                    this.sql_stmt_yq();
                    }
                    }
                }
                this.state = 4230;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 470, this.context);
            }
            this.state = 4234;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 24) {
                {
                {
                this.state = 4231;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 4236;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4237;
            this.match(YQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_yq(): Sql_stmt_yqContext {
        let localContext = new Sql_stmt_yqContext(this.context, this.state);
        this.enterRule(localContext, 794, YQLParser.RULE_sql_stmt_yq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4244;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 4239;
                this.match(YQLParser.EXPLAIN);
                this.state = 4242;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1) {
                    {
                    this.state = 4240;
                    this.match(YQLParser.QUERY);
                    this.state = 4241;
                    this.match(YQLParser.PLAN);
                    }
                }

                }
            }

            this.state = 4246;
            this.sql_stmt_core_yq();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_core_yq(): Sql_stmt_core_yqContext {
        let localContext = new Sql_stmt_core_yqContext(this.context, this.state);
        this.enterRule(localContext, 796, YQLParser.RULE_sql_stmt_core_yq);
        try {
            this.state = 4261;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 474, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4248;
                this.pragma_stmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4249;
                this.select_stmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4250;
                this.named_nodes_stmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4251;
                this.use_stmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4252;
                this.into_table_stmt_yq();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4253;
                this.declare_stmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4254;
                this.import_stmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4255;
                this.export_stmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4256;
                this.do_stmt();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4257;
                this.define_action_or_subquery_stmt();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4258;
                this.if_stmt();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4259;
                this.for_stmt();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4260;
                this.values_stmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replication_name(): Replication_nameContext {
        let localContext = new Replication_nameContext(this.context, this.state);
        this.enterRule(localContext, 798, YQLParser.RULE_replication_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4263;
            this.match(YQLParser.AS);
            this.state = 4264;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public where_expr(): Where_exprContext {
        let localContext = new Where_exprContext(this.context, this.state);
        this.enterRule(localContext, 800, YQLParser.RULE_where_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4266;
            this.match(YQLParser.WHERE);
            this.state = 4267;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_stmt(): From_stmtContext {
        let localContext = new From_stmtContext(this.context, this.state);
        this.enterRule(localContext, 802, YQLParser.RULE_from_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4269;
            this.match(YQLParser.FROM);
            this.state = 4270;
            this.join_source();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_for_autocomplete(): Alter_table_for_autocompleteContext {
        let localContext = new Alter_table_for_autocompleteContext(this.context, this.state);
        this.enterRule(localContext, 804, YQLParser.RULE_alter_table_for_autocomplete);
        try {
            this.state = 4274;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 475, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4272;
                this.alter_table_stmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4273;
                this.alter_table_store_stmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public static readonly _serializedATN: number[] = [
        4,1,324,4277,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,1,0,1,0,1,0,1,0,1,0,3,0,812,8,0,1,1,5,1,
        815,8,1,10,1,12,1,818,9,1,1,1,1,1,4,1,822,8,1,11,1,12,1,823,1,1,
        5,1,827,8,1,10,1,12,1,830,9,1,1,1,5,1,833,8,1,10,1,12,1,836,9,1,
        1,1,1,1,1,2,5,2,841,8,2,10,2,12,2,844,9,2,1,2,1,2,1,3,5,3,849,8,
        3,10,3,12,3,852,9,3,1,3,1,3,4,3,856,8,3,11,3,12,3,857,5,3,860,8,
        3,10,3,12,3,863,9,3,1,3,1,3,1,3,5,3,868,8,3,10,3,12,3,871,9,3,1,
        4,1,4,3,4,875,8,4,1,5,1,5,1,5,3,5,880,8,5,3,5,882,8,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,930,8,6,1,7,1,
        7,1,7,5,7,935,8,7,10,7,12,7,938,9,7,1,7,3,7,941,8,7,1,8,1,8,1,8,
        5,8,946,8,8,10,8,12,8,949,9,8,1,9,1,9,1,9,5,9,954,8,9,10,9,12,9,
        957,9,9,1,10,1,10,3,10,961,8,10,1,11,1,11,3,11,965,8,11,1,11,1,11,
        1,11,1,12,3,12,971,8,12,1,12,1,12,1,12,1,12,3,12,977,8,12,1,12,3,
        12,980,8,12,1,12,1,12,3,12,984,8,12,1,12,1,12,1,12,1,12,1,12,1,12,
        3,12,992,8,12,1,12,1,12,3,12,996,8,12,1,12,3,12,999,8,12,1,12,1,
        12,3,12,1003,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,
        12,1014,8,12,1,12,4,12,1017,8,12,11,12,12,12,1018,3,12,1021,8,12,
        1,13,1,13,1,14,1,14,1,14,5,14,1028,8,14,10,14,12,14,1031,9,14,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,3,18,1051,8,18,1,18,5,18,1054,8,18,10,18,
        12,18,1057,9,18,1,18,1,18,1,18,1,18,4,18,1063,8,18,11,18,12,18,1064,
        3,18,1067,8,18,1,19,1,19,1,19,5,19,1072,8,19,10,19,12,19,1075,9,
        19,1,20,1,20,1,20,5,20,1080,8,20,10,20,12,20,1083,9,20,1,21,1,21,
        1,21,5,21,1088,8,21,10,21,12,21,1091,9,21,1,22,1,22,1,22,1,22,3,
        22,1097,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1107,8,
        24,5,24,1109,8,24,10,24,12,24,1112,9,24,1,24,1,24,3,24,1116,8,24,
        1,25,1,25,3,25,1120,8,25,1,25,1,25,1,26,1,26,3,26,1126,8,26,1,26,
        1,26,1,27,1,27,3,27,1132,8,27,1,28,1,28,3,28,1136,8,28,1,29,1,29,
        3,29,1140,8,29,1,29,3,29,1143,8,29,1,29,1,29,1,30,1,30,1,30,3,30,
        1150,8,30,1,30,1,30,1,30,1,30,3,30,1156,8,30,5,30,1158,8,30,10,30,
        12,30,1161,9,30,1,31,1,31,3,31,1165,8,31,1,31,3,31,1168,8,31,1,31,
        1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,1180,8,32,10,32,
        12,32,1183,9,32,1,33,1,33,3,33,1187,8,33,1,33,3,33,1190,8,33,1,33,
        1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1204,
        8,34,1,34,1,34,1,34,1,34,1,34,3,34,1211,8,34,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,3,35,1222,8,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,3,35,1233,8,35,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,
        1253,8,38,1,38,1,38,1,39,1,39,3,39,1259,8,39,1,39,4,39,1262,8,39,
        11,39,12,39,1263,1,39,1,39,3,39,1268,8,39,1,39,1,39,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1282,8,40,3,40,1284,8,
        40,1,41,1,41,1,42,1,42,1,42,3,42,1291,8,42,1,43,1,43,1,44,1,44,3,
        44,1297,8,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,5,46,1306,8,46,10,
        46,12,46,1309,9,46,1,47,1,47,1,47,1,47,1,47,3,47,1316,8,47,1,48,
        1,48,1,48,1,48,3,48,1322,8,48,1,49,1,49,1,49,1,49,1,49,3,49,1329,
        8,49,1,49,1,49,1,49,1,49,5,49,1335,8,49,10,49,12,49,1338,9,49,1,
        49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,3,51,1350,8,51,1,
        51,1,51,1,52,1,52,3,52,1356,8,52,1,52,1,52,3,52,1360,8,52,1,52,3,
        52,1363,8,52,3,52,1365,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1373,
        8,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1381,8,54,1,54,1,54,1,54,
        1,54,3,54,1387,8,54,1,54,1,54,1,54,1,54,3,54,1393,8,54,1,54,1,54,
        1,55,1,55,3,55,1399,8,55,1,55,3,55,1402,8,55,1,55,1,55,1,56,1,56,
        1,56,5,56,1409,8,56,10,56,12,56,1412,9,56,1,57,1,57,1,57,1,57,5,
        57,1418,8,57,10,57,12,57,1421,9,57,1,57,1,57,1,58,1,58,3,58,1427,
        8,58,1,59,1,59,1,59,1,59,5,59,1433,8,59,10,59,12,59,1436,9,59,1,
        59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,3,61,1448,8,61,1,
        62,1,62,1,62,5,62,1453,8,62,10,62,12,62,1456,9,62,1,62,3,62,1459,
        8,62,1,63,1,63,1,63,5,63,1464,8,63,10,63,12,63,1467,9,63,1,63,3,
        63,1470,8,63,1,64,1,64,1,64,3,64,1475,8,64,1,65,1,65,1,65,5,65,1480,
        8,65,10,65,12,65,1483,9,65,1,66,1,66,1,66,1,66,3,66,1489,8,66,1,
        66,3,66,1492,8,66,1,66,1,66,1,66,1,67,1,67,3,67,1499,8,67,1,67,1,
        67,3,67,1503,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1513,
        8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1536,8,71,1,72,
        1,72,1,72,1,72,3,72,1542,8,72,1,73,1,73,3,73,1546,8,73,1,74,1,74,
        1,74,5,74,1551,8,74,10,74,12,74,1554,9,74,1,75,1,75,1,75,3,75,1559,
        8,75,1,76,1,76,1,76,5,76,1564,8,76,10,76,12,76,1567,9,76,1,77,3,
        77,1570,8,77,1,77,1,77,3,77,1574,8,77,1,78,1,78,1,79,1,79,3,79,1580,
        8,79,1,80,1,80,1,80,3,80,1585,8,80,1,81,1,81,1,81,1,81,1,82,1,82,
        1,82,3,82,1594,8,82,1,82,3,82,1597,8,82,1,82,1,82,1,82,1,82,3,82,
        1603,8,82,1,83,1,83,1,83,3,83,1608,8,83,1,83,1,83,1,84,1,84,1,84,
        1,84,3,84,1616,8,84,1,85,1,85,1,85,5,85,1621,8,85,10,85,12,85,1624,
        9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,
        1,88,1,88,1,88,1,88,1,88,5,88,1643,8,88,10,88,12,88,1646,9,88,1,
        88,3,88,1649,8,88,3,88,1651,8,88,1,88,1,88,3,88,1655,8,88,1,89,1,
        89,1,89,1,89,1,89,5,89,1662,8,89,10,89,12,89,1665,9,89,1,89,3,89,
        1668,8,89,3,89,1670,8,89,1,89,1,89,3,89,1674,8,89,1,90,1,90,1,90,
        1,90,1,90,5,90,1681,8,90,10,90,12,90,1684,9,90,1,90,3,90,1687,8,
        90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,
        93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,
        95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,5,96,1723,8,96,10,96,
        12,96,1726,9,96,1,96,3,96,1729,8,96,1,96,1,96,1,97,1,97,1,97,1,97,
        1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,3,99,
        1749,8,99,1,99,3,99,1752,8,99,1,99,1,99,1,99,1,99,3,99,1758,8,99,
        1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
        1,100,1,100,1,100,1,100,1,100,1,100,3,100,1778,8,100,1,100,5,100,
        1781,8,100,10,100,12,100,1784,9,100,1,101,1,101,1,101,3,101,1789,
        8,101,1,101,5,101,1792,8,101,10,101,12,101,1795,9,101,3,101,1797,
        8,101,1,102,1,102,3,102,1801,8,102,1,103,1,103,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1828,
        8,104,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1836,8,105,1,106,
        3,106,1839,8,106,1,106,1,106,1,106,5,106,1844,8,106,10,106,12,106,
        1847,9,106,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,109,
        1,109,3,109,1859,8,109,1,109,1,109,3,109,1863,8,109,1,109,1,109,
        1,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,3,111,1875,8,111,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,5,112,1886,
        8,112,10,112,12,112,1889,9,112,1,112,1,112,3,112,1893,8,112,1,113,
        1,113,1,113,1,113,1,113,3,113,1900,8,113,1,114,1,114,3,114,1904,
        8,114,1,115,1,115,1,115,5,115,1909,8,115,10,115,12,115,1912,9,115,
        1,116,1,116,1,116,1,116,5,116,1918,8,116,10,116,12,116,1921,9,116,
        1,117,1,117,1,117,1,117,5,117,1927,8,117,10,117,12,117,1930,9,117,
        1,118,1,118,1,118,1,118,1,118,3,118,1937,8,118,1,119,1,119,3,119,
        1941,8,119,1,119,1,119,3,119,1945,8,119,1,120,1,120,1,120,1,120,
        1,120,3,120,1952,8,120,3,120,1954,8,120,1,121,3,121,1957,8,121,1,
        121,1,121,1,121,3,121,1962,8,121,1,121,1,121,1,121,3,121,1967,8,
        121,1,122,1,122,3,122,1971,8,122,1,122,1,122,1,122,5,122,1976,8,
        122,10,122,12,122,1979,9,122,1,122,1,122,1,122,1,122,3,122,1985,
        8,122,1,122,1,122,3,122,1989,8,122,1,122,3,122,1992,8,122,1,122,
        1,122,3,122,1996,8,122,1,122,1,122,3,122,2000,8,122,3,122,2002,8,
        122,1,123,1,123,1,123,1,123,1,124,1,124,1,124,5,124,2011,8,124,10,
        124,12,124,2014,9,124,1,125,1,125,1,125,1,125,5,125,2020,8,125,10,
        125,12,125,2023,9,125,1,125,1,125,3,125,2027,8,125,1,125,1,125,1,
        125,1,125,3,125,2033,8,125,1,125,1,125,1,125,3,125,2038,8,125,1,
        125,3,125,2041,8,125,1,125,1,125,3,125,2045,8,125,1,125,1,125,3,
        125,2049,8,125,1,126,3,126,2052,8,126,1,127,1,127,3,127,2056,8,127,
        1,127,1,127,3,127,2060,8,127,1,127,1,127,1,127,1,127,5,127,2066,
        8,127,10,127,12,127,2069,9,127,1,127,3,127,2072,8,127,1,127,1,127,
        3,127,2076,8,127,1,127,1,127,3,127,2080,8,127,1,127,3,127,2083,8,
        127,1,127,3,127,2086,8,127,1,127,1,127,3,127,2090,8,127,1,127,3,
        127,2093,8,127,1,127,3,127,2096,8,127,1,128,1,128,1,128,3,128,2101,
        8,128,1,128,3,128,2104,8,128,1,128,3,128,2107,8,128,1,128,3,128,
        2110,8,128,1,128,1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,129,
        1,129,1,129,1,129,3,129,2124,8,129,3,129,2126,8,129,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,2137,8,130,1,131,
        1,131,1,131,1,132,1,132,1,132,5,132,2145,8,132,10,132,12,132,2148,
        9,132,1,133,1,133,1,133,1,133,1,134,1,134,1,134,3,134,2157,8,134,
        1,134,3,134,2160,8,134,1,134,1,134,1,134,1,134,1,134,3,134,2167,
        8,134,1,134,1,134,1,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,3,135,2191,8,135,1,136,1,136,1,137,1,137,1,138,1,138,1,138,
        5,138,2200,8,138,10,138,12,138,2203,9,138,1,139,4,139,2206,8,139,
        11,139,12,139,2207,1,140,1,140,3,140,2212,8,140,1,141,1,141,3,141,
        2216,8,141,1,141,1,141,3,141,2220,8,141,1,141,1,141,3,141,2224,8,
        141,1,141,1,141,3,141,2228,8,141,1,141,1,141,3,141,2232,8,141,1,
        141,1,141,3,141,2236,8,141,1,141,1,141,1,141,1,141,3,141,2242,8,
        141,1,142,1,142,1,142,1,142,1,142,3,142,2249,8,142,1,142,1,142,1,
        142,1,142,1,142,1,142,1,142,1,142,3,142,2259,8,142,1,143,1,143,1,
        144,1,144,1,144,1,144,1,144,5,144,2268,8,144,10,144,12,144,2271,
        9,144,1,144,1,144,1,145,1,145,1,145,1,146,1,146,1,146,5,146,2281,
        8,146,10,146,12,146,2284,9,146,1,147,1,147,1,147,1,147,1,147,1,147,
        1,148,1,148,1,149,1,149,1,149,5,149,2297,8,149,10,149,12,149,2300,
        9,149,1,150,1,150,1,151,1,151,1,151,5,151,2307,8,151,10,151,12,151,
        2310,9,151,1,152,1,152,1,152,1,152,1,153,1,153,1,154,1,154,1,155,
        1,155,1,156,1,156,1,157,1,157,1,157,1,157,1,158,3,158,2329,8,158,
        1,158,1,158,1,159,1,159,3,159,2335,8,159,1,159,1,159,1,159,1,159,
        1,159,3,159,2342,8,159,1,160,1,160,1,160,5,160,2347,8,160,10,160,
        12,160,2350,9,160,1,161,1,161,1,161,1,161,1,161,3,161,2357,8,161,
        1,162,1,162,1,163,1,163,1,163,5,163,2364,8,163,10,163,12,163,2367,
        9,163,1,164,1,164,1,164,1,164,1,164,1,165,1,165,1,165,1,165,1,165,
        1,166,1,166,1,166,1,166,1,166,1,166,1,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,1,167,1,167,1,167,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,3,168,2403,8,168,3,168,2405,8,168,1,169,3,169,2408,8,
        169,1,169,1,169,1,169,3,169,2413,8,169,1,169,1,169,3,169,2417,8,
        169,5,169,2419,8,169,10,169,12,169,2422,9,169,1,170,1,170,1,170,
        3,170,2427,8,170,1,171,1,171,1,171,1,171,3,171,2433,8,171,1,171,
        1,171,3,171,2437,8,171,1,172,1,172,1,172,3,172,2442,8,172,1,172,
        1,172,1,172,3,172,2447,8,172,3,172,2449,8,172,1,173,1,173,3,173,
        2453,8,173,1,173,1,173,1,173,3,173,2458,8,173,1,173,3,173,2461,8,
        173,3,173,2463,8,173,1,173,1,173,3,173,2467,8,173,1,174,1,174,1,
        174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,2478,8,174,1,175,1,
        175,1,175,1,176,1,176,1,176,1,176,1,176,1,176,3,176,2489,8,176,1,
        177,1,177,1,178,1,178,1,178,1,178,1,178,1,179,1,179,3,179,2500,8,
        179,1,179,1,179,3,179,2504,8,179,1,179,1,179,3,179,2508,8,179,1,
        179,1,179,3,179,2512,8,179,1,179,3,179,2515,8,179,1,179,1,179,3,
        179,2519,8,179,1,179,3,179,2522,8,179,1,180,1,180,1,180,1,180,3,
        180,2528,8,180,1,181,1,181,1,181,1,181,1,181,5,181,2535,8,181,10,
        181,12,181,2538,9,181,3,181,2540,8,181,1,182,1,182,1,182,1,182,1,
        182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,2554,8,182,1,
        182,1,182,1,182,1,182,3,182,2560,8,182,1,183,1,183,1,183,1,183,1,
        183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,2573,8,183,1,183,1,
        183,1,183,1,183,1,184,3,184,2580,8,184,1,184,1,184,1,184,3,184,2585,
        8,184,1,185,1,185,1,185,1,186,1,186,3,186,2592,8,186,1,187,1,187,
        1,187,5,187,2597,8,187,10,187,12,187,2600,9,187,1,188,1,188,1,188,
        1,188,1,189,1,189,3,189,2608,8,189,1,190,1,190,1,190,3,190,2613,
        8,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,2621,8,190,1,190,
        1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,5,191,
        2634,8,191,10,191,12,191,2637,9,191,1,192,1,192,1,192,3,192,2642,
        8,192,1,193,1,193,1,193,1,193,1,193,1,193,3,193,2650,8,193,1,193,
        1,193,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,195,1,195,1,195,
        1,195,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,3,196,2673,
        8,196,1,197,1,197,1,197,1,197,1,197,3,197,2680,8,197,1,197,1,197,
        1,197,1,197,1,197,1,197,3,197,2688,8,197,1,198,1,198,1,198,1,199,
        1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,200,1,200,1,200,
        1,201,1,201,1,201,1,201,3,201,2709,8,201,1,201,1,201,1,201,1,201,
        1,201,1,201,3,201,2717,8,201,1,202,1,202,1,202,1,203,1,203,1,203,
        3,203,2725,8,203,1,204,1,204,1,204,1,204,1,205,1,205,1,206,1,206,
        3,206,2735,8,206,1,207,1,207,1,207,1,207,1,207,5,207,2742,8,207,
        10,207,12,207,2745,9,207,1,207,1,207,3,207,2749,8,207,1,208,1,208,
        1,209,1,209,1,209,3,209,2756,8,209,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,1,209,3,209,2766,8,209,1,209,1,209,1,209,3,209,2771,
        8,209,1,209,1,209,1,209,1,209,1,209,5,209,2778,8,209,10,209,12,209,
        2781,9,209,1,209,3,209,2784,8,209,1,209,1,209,3,209,2788,8,209,1,
        209,3,209,2791,8,209,1,209,3,209,2794,8,209,1,209,3,209,2797,8,209,
        1,209,3,209,2800,8,209,1,210,1,210,1,210,1,210,1,210,1,210,3,210,
        2808,8,210,1,211,1,211,1,211,1,211,1,211,5,211,2815,8,211,10,211,
        12,211,2818,9,211,1,211,1,211,1,212,1,212,1,212,1,212,1,212,1,213,
        1,213,1,213,1,213,1,213,5,213,2832,8,213,10,213,12,213,2835,9,213,
        1,213,1,213,1,214,1,214,1,214,1,215,1,215,1,215,1,215,1,216,1,216,
        1,216,1,217,1,217,1,217,1,217,1,217,1,217,5,217,2855,8,217,10,217,
        12,217,2858,9,217,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,
        1,218,1,218,1,218,1,218,1,218,1,218,1,218,3,218,2875,8,218,1,219,
        1,219,1,219,1,219,1,219,1,219,1,219,5,219,2884,8,219,10,219,12,219,
        2887,9,219,1,220,1,220,1,220,1,220,1,220,3,220,2894,8,220,1,221,
        1,221,1,221,1,221,1,221,1,221,5,221,2902,8,221,10,221,12,221,2905,
        9,221,1,222,1,222,3,222,2909,8,222,1,223,1,223,3,223,2913,8,223,
        1,223,1,223,1,224,1,224,3,224,2919,8,224,1,224,1,224,1,225,1,225,
        1,225,1,225,1,225,1,225,1,226,1,226,1,226,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,228,1,228,1,228,1,228,1,229,1,229,1,229,1,229,
        1,229,5,229,2948,8,229,10,229,12,229,2951,9,229,1,229,1,229,1,230,
        1,230,1,230,1,230,1,230,5,230,2960,8,230,10,230,12,230,2963,9,230,
        1,230,1,230,1,231,1,231,1,231,1,232,1,232,1,232,1,232,1,233,1,233,
        1,233,1,233,1,234,1,234,1,234,1,234,1,234,1,234,1,235,1,235,1,235,
        1,236,1,236,1,236,1,236,1,236,1,237,1,237,1,237,1,237,1,238,1,238,
        1,238,3,238,2999,8,238,1,238,1,238,1,239,1,239,1,239,1,240,3,240,
        3007,8,240,1,240,3,240,3010,8,240,1,240,1,240,3,240,3014,8,240,1,
        241,1,241,3,241,3018,8,241,1,242,1,242,1,242,1,242,1,242,1,242,5,
        242,3026,8,242,10,242,12,242,3029,9,242,1,242,1,242,1,242,1,242,
        1,242,1,242,1,242,1,242,5,242,3039,8,242,10,242,12,242,3042,9,242,
        1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,5,242,3052,8,242,
        10,242,12,242,3055,9,242,1,242,1,242,3,242,3059,8,242,1,243,1,243,
        1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,
        5,243,3074,8,243,10,243,12,243,3077,9,243,1,243,3,243,3080,8,243,
        1,243,1,243,3,243,3084,8,243,1,243,1,243,1,243,1,243,1,243,5,243,
        3091,8,243,10,243,12,243,3094,9,243,1,243,1,243,1,243,1,243,1,243,
        1,243,5,243,3102,8,243,10,243,12,243,3105,9,243,1,243,1,243,3,243,
        3109,8,243,1,244,1,244,3,244,3113,8,244,1,245,1,245,3,245,3117,8,
        245,1,245,3,245,3120,8,245,1,246,1,246,1,247,1,247,1,247,1,247,1,
        247,1,247,1,247,1,248,1,248,1,248,5,248,3134,8,248,10,248,12,248,
        3137,9,248,1,249,1,249,1,249,1,249,1,250,1,250,1,251,1,251,1,251,
        1,251,1,251,1,251,3,251,3151,8,251,1,252,1,252,1,252,1,252,1,253,
        1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,3166,8,253,
        1,253,3,253,3169,8,253,1,254,1,254,1,254,1,254,1,255,1,255,1,255,
        1,255,5,255,3179,8,255,10,255,12,255,3182,9,255,3,255,3184,8,255,
        1,255,1,255,1,256,1,256,1,256,1,256,1,257,1,257,1,258,1,258,1,258,
        1,258,5,258,3198,8,258,10,258,12,258,3201,9,258,1,258,1,258,1,258,
        3,258,3206,8,258,1,259,1,259,1,259,1,259,5,259,3212,8,259,10,259,
        12,259,3215,9,259,1,259,1,259,1,260,1,260,1,260,1,260,1,260,3,260,
        3224,8,260,1,260,1,260,3,260,3228,8,260,1,260,1,260,1,261,1,261,
        1,261,1,261,3,261,3236,8,261,1,262,1,262,1,262,1,262,3,262,3242,
        8,262,1,262,1,262,1,262,1,262,3,262,3248,8,262,1,263,1,263,1,263,
        1,263,1,263,1,263,1,263,1,263,5,263,3258,8,263,10,263,12,263,3261,
        9,263,1,263,3,263,3264,8,263,3,263,3266,8,263,1,264,1,264,1,264,
        1,264,1,264,1,264,1,264,1,264,5,264,3276,8,264,10,264,12,264,3279,
        9,264,1,264,3,264,3282,8,264,1,264,1,264,1,264,3,264,3287,8,264,
        1,265,1,265,1,265,1,265,3,265,3293,8,265,1,265,1,265,1,265,5,265,
        3298,8,265,10,265,12,265,3301,9,265,1,265,3,265,3304,8,265,1,266,
        1,266,3,266,3308,8,266,1,267,3,267,3311,8,267,1,267,1,267,1,267,
        1,268,1,268,1,268,1,268,1,268,1,268,5,268,3322,8,268,10,268,12,268,
        3325,9,268,1,268,1,268,1,268,1,268,5,268,3331,8,268,10,268,12,268,
        3334,9,268,1,268,3,268,3337,8,268,1,268,1,268,1,268,3,268,3342,8,
        268,1,269,1,269,1,269,1,269,3,269,3348,8,269,1,269,1,269,1,269,1,
        269,1,269,5,269,3355,8,269,10,269,12,269,3358,9,269,1,269,1,269,
        1,269,1,269,5,269,3364,8,269,10,269,12,269,3367,9,269,1,270,1,270,
        1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,
        1,270,3,270,3383,8,270,1,270,1,270,3,270,3387,8,270,1,270,1,270,
        3,270,3391,8,270,3,270,3393,8,270,1,271,1,271,3,271,3397,8,271,1,
        272,1,272,1,272,5,272,3402,8,272,10,272,12,272,3405,9,272,1,272,
        3,272,3408,8,272,1,272,1,272,3,272,3412,8,272,3,272,3414,8,272,1,
        273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,5,273,3424,8,273,10,
        273,12,273,3427,9,273,1,273,1,273,1,273,1,273,1,273,1,274,1,274,
        1,274,1,275,1,275,1,275,5,275,3440,8,275,10,275,12,275,3443,9,275,
        1,276,1,276,1,276,1,276,1,277,1,277,1,277,1,277,1,277,1,277,1,277,
        5,277,3456,8,277,10,277,12,277,3459,9,277,1,278,1,278,1,279,1,279,
        1,279,1,279,1,279,1,280,1,280,1,280,1,280,1,280,3,280,3473,8,280,
        1,281,1,281,1,281,5,281,3478,8,281,10,281,12,281,3481,9,281,1,282,
        1,282,1,282,1,282,1,282,3,282,3488,8,282,1,282,1,282,1,282,1,282,
        1,282,1,282,1,283,5,283,3497,8,283,10,283,12,283,3500,9,283,1,283,
        1,283,4,283,3504,8,283,11,283,12,283,3505,1,283,5,283,3509,8,283,
        10,283,12,283,3512,9,283,1,283,5,283,3515,8,283,10,283,12,283,3518,
        9,283,3,283,3520,8,283,1,284,3,284,3523,8,284,1,284,1,284,1,284,
        1,284,1,284,3,284,3530,8,284,1,285,3,285,3533,8,285,1,285,3,285,
        3536,8,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,3,285,3545,
        8,285,1,286,1,286,1,286,3,286,3550,8,286,1,286,3,286,3553,8,286,
        1,286,1,286,1,286,1,286,1,286,1,286,5,286,3561,8,286,10,286,12,286,
        3564,9,286,1,286,3,286,3567,8,286,3,286,3569,8,286,1,286,1,286,1,
        286,1,286,1,286,3,286,3576,8,286,1,286,3,286,3579,8,286,1,286,1,
        286,3,286,3583,8,286,3,286,3585,8,286,1,286,3,286,3588,8,286,1,287,
        1,287,1,287,3,287,3593,8,287,1,288,3,288,3596,8,288,1,288,1,288,
        1,288,3,288,3601,8,288,1,289,1,289,1,289,1,289,1,289,1,289,5,289,
        3609,8,289,10,289,12,289,3612,9,289,1,289,1,289,3,289,3616,8,289,
        1,290,1,290,1,290,1,290,1,290,1,290,1,290,5,290,3625,8,290,10,290,
        12,290,3628,9,290,1,290,3,290,3631,8,290,1,290,1,290,3,290,3635,
        8,290,3,290,3637,8,290,1,290,1,290,3,290,3641,8,290,1,290,1,290,
        1,290,3,290,3646,8,290,1,290,1,290,1,290,1,290,5,290,3652,8,290,
        10,290,12,290,3655,9,290,3,290,3657,8,290,1,290,3,290,3660,8,290,
        1,290,3,290,3663,8,290,1,291,1,291,1,291,3,291,3668,8,291,1,291,
        1,291,1,292,1,292,3,292,3674,8,292,1,292,3,292,3677,8,292,1,293,
        1,293,3,293,3681,8,293,1,294,1,294,1,294,1,294,3,294,3687,8,294,
        1,295,1,295,1,295,1,295,1,295,1,295,3,295,3695,8,295,1,295,3,295,
        3698,8,295,1,296,1,296,1,296,1,296,1,296,3,296,3705,8,296,1,296,
        1,296,3,296,3709,8,296,1,296,3,296,3712,8,296,1,297,1,297,3,297,
        3716,8,297,1,298,1,298,1,298,5,298,3721,8,298,10,298,12,298,3724,
        9,298,1,299,1,299,1,299,1,299,1,300,1,300,1,301,1,301,1,301,1,301,
        1,301,1,301,1,302,1,302,1,302,1,302,5,302,3742,8,302,10,302,12,302,
        3745,9,302,1,302,1,302,1,303,1,303,1,303,1,303,3,303,3753,8,303,
        1,303,3,303,3756,8,303,1,304,1,304,1,304,1,304,5,304,3762,8,304,
        10,304,12,304,3765,9,304,1,304,1,304,1,305,1,305,1,306,1,306,1,306,
        1,306,1,306,1,307,1,307,1,307,1,307,1,307,1,307,5,307,3782,8,307,
        10,307,12,307,3785,9,307,1,308,1,308,1,308,1,308,1,308,3,308,3792,
        8,308,1,309,1,309,1,309,1,310,1,310,1,310,3,310,3800,8,310,1,311,
        1,311,1,311,1,311,1,311,1,312,1,312,3,312,3809,8,312,1,313,1,313,
        1,313,1,313,1,314,1,314,1,314,1,314,1,314,1,315,1,315,1,315,1,315,
        1,315,5,315,3825,8,315,10,315,12,315,3828,9,315,1,315,1,315,1,316,
        1,316,1,316,1,316,1,316,1,317,1,317,1,317,1,317,1,317,5,317,3842,
        8,317,10,317,12,317,3845,9,317,1,317,1,317,1,318,1,318,1,318,1,318,
        1,319,1,319,1,319,5,319,3856,8,319,10,319,12,319,3859,9,319,1,320,
        1,320,1,320,1,320,1,321,1,321,1,322,1,322,1,322,1,322,1,322,1,323,
        1,323,1,323,5,323,3875,8,323,10,323,12,323,3878,9,323,1,324,1,324,
        1,324,1,324,1,325,1,325,1,326,1,326,1,326,3,326,3889,8,326,1,326,
        1,326,1,327,1,327,1,328,1,328,1,328,1,328,3,328,3899,8,328,1,329,
        1,329,1,329,1,329,1,329,1,330,1,330,3,330,3908,8,330,1,331,1,331,
        1,332,1,332,1,332,1,333,1,333,1,333,5,333,3918,8,333,10,333,12,333,
        3921,9,333,1,334,1,334,1,334,1,334,1,335,1,335,1,336,1,336,1,336,
        1,336,1,337,3,337,3934,8,337,1,337,3,337,3937,8,337,1,337,3,337,
        3940,8,337,1,337,3,337,3943,8,337,1,338,1,338,1,339,1,339,3,339,
        3949,8,339,1,339,1,339,1,339,1,340,1,340,1,341,1,341,1,341,3,341,
        3959,8,341,1,342,1,342,1,343,1,343,3,343,3965,8,343,1,344,1,344,
        1,344,1,344,1,344,1,345,1,345,1,345,1,345,3,345,3976,8,345,1,345,
        3,345,3979,8,345,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,
        1,346,1,346,3,346,3991,8,346,1,347,1,347,1,347,1,348,1,348,1,348,
        1,348,1,348,3,348,4001,8,348,1,349,1,349,1,349,1,349,3,349,4007,
        8,349,1,350,1,350,1,351,1,351,1,352,1,352,1,353,1,353,3,353,4017,
        8,353,1,354,1,354,1,354,1,354,1,354,1,354,1,354,3,354,4026,8,354,
        1,355,1,355,1,355,1,355,1,355,1,355,3,355,4034,8,355,1,356,1,356,
        1,356,1,356,1,356,3,356,4041,8,356,1,357,1,357,1,357,1,357,1,357,
        1,357,1,357,1,357,3,357,4051,8,357,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,3,358,4060,8,358,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,3,359,4069,8,359,1,360,1,360,1,360,1,360,1,360,1,360,1,360,
        1,360,3,360,4079,8,360,1,361,1,361,3,361,4083,8,361,1,362,1,362,
        3,362,4087,8,362,1,363,1,363,3,363,4091,8,363,1,364,1,364,3,364,
        4095,8,364,1,365,1,365,3,365,4099,8,365,1,366,1,366,3,366,4103,8,
        366,1,367,1,367,3,367,4107,8,367,1,368,1,368,3,368,4111,8,368,1,
        369,1,369,3,369,4115,8,369,1,370,1,370,3,370,4119,8,370,1,371,1,
        371,3,371,4123,8,371,1,372,1,372,3,372,4127,8,372,1,373,1,373,1,
        373,3,373,4132,8,373,1,374,1,374,1,374,3,374,4137,8,374,1,375,1,
        375,1,375,3,375,4142,8,375,1,375,1,375,3,375,4146,8,375,1,376,1,
        376,3,376,4150,8,376,1,377,1,377,1,377,3,377,4155,8,377,1,378,3,
        378,4158,8,378,1,378,1,378,1,379,1,379,3,379,4164,8,379,1,380,3,
        380,4167,8,380,1,380,1,380,1,381,1,381,1,381,1,381,1,381,1,381,1,
        381,1,381,3,381,4179,8,381,1,382,1,382,1,383,1,383,1,384,1,384,1,
        385,1,385,1,386,1,386,1,387,1,387,1,388,1,388,1,389,1,389,1,390,
        1,390,1,391,1,391,1,392,1,392,1,393,1,393,1,394,1,394,1,395,1,395,
        1,395,1,395,1,395,3,395,4212,8,395,1,396,5,396,4215,8,396,10,396,
        12,396,4218,9,396,1,396,1,396,4,396,4222,8,396,11,396,12,396,4223,
        1,396,5,396,4227,8,396,10,396,12,396,4230,9,396,1,396,5,396,4233,
        8,396,10,396,12,396,4236,9,396,1,396,1,396,1,397,1,397,1,397,3,397,
        4243,8,397,3,397,4245,8,397,1,397,1,397,1,398,1,398,1,398,1,398,
        1,398,1,398,1,398,1,398,1,398,1,398,1,398,1,398,1,398,3,398,4262,
        8,398,1,399,1,399,1,399,1,400,1,400,1,400,1,401,1,401,1,401,1,402,
        1,402,3,402,4275,8,402,1,402,0,0,403,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
        300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,
        332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
        364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,
        396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,
        428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,
        460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,
        492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,
        524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,
        556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,
        588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,
        620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,
        652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,
        684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,
        716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,
        748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,
        780,782,784,786,788,790,792,794,796,798,800,802,804,0,39,2,0,58,
        58,274,274,6,0,145,145,156,156,180,180,185,185,234,234,252,252,1,
        0,6,9,1,0,17,18,2,0,20,21,23,23,2,0,17,19,196,196,2,0,115,115,121,
        121,4,0,121,121,133,133,290,290,297,297,2,0,81,81,294,294,2,0,56,
        56,103,103,2,0,26,26,202,202,2,0,48,48,110,110,2,0,163,163,261,261,
        3,0,106,106,182,182,208,208,2,0,66,66,276,276,2,0,206,206,263,263,
        2,0,59,59,275,275,3,0,189,190,192,192,260,260,2,0,46,46,112,112,
        2,0,148,148,302,302,2,0,61,61,278,278,2,0,120,120,299,299,3,0,49,
        49,104,104,237,237,3,0,61,61,255,255,278,278,2,0,143,143,301,301,
        3,0,107,107,229,229,277,277,2,0,45,45,271,271,2,0,78,78,259,259,
        3,0,150,150,231,231,256,256,2,0,139,139,224,224,1,0,317,318,21,0,
        58,58,67,68,72,73,89,89,91,93,116,116,128,128,142,143,153,153,173,
        175,183,183,196,196,198,198,228,228,232,232,247,248,254,254,262,
        262,274,274,293,293,309,310,3,0,53,53,120,120,269,269,11,0,48,48,
        55,55,57,57,110,110,124,124,152,152,168,168,181,181,295,295,311,
        311,313,313,31,0,61,61,83,83,85,85,94,94,104,104,107,107,136,136,
        147,147,163,163,177,177,179,179,184,184,186,192,194,194,203,203,
        205,205,207,207,214,214,218,221,227,227,229,229,237,237,241,241,
        250,250,260,261,266,268,272,272,278,278,287,287,292,292,298,298,
        50,0,44,47,49,52,54,54,56,56,59,62,64,66,69,69,71,71,74,76,79,79,
        81,88,90,90,94,105,107,109,111,115,117,118,121,123,125,127,129,132,
        134,137,139,141,144,145,147,149,151,151,154,167,169,172,176,180,
        184,195,197,197,199,207,209,227,229,230,233,238,240,242,244,246,
        249,253,255,255,257,258,260,261,263,263,265,268,271,273,275,280,
        282,289,292,292,294,294,296,305,307,308,312,312,314,315,12,0,70,
        70,106,106,119,119,138,138,182,182,208,208,243,243,264,264,270,270,
        281,281,291,291,306,306,2,0,133,133,290,290,1,0,319,320,4591,0,811,
        1,0,0,0,2,816,1,0,0,0,4,842,1,0,0,0,6,850,1,0,0,0,8,874,1,0,0,0,
        10,881,1,0,0,0,12,929,1,0,0,0,14,940,1,0,0,0,16,942,1,0,0,0,18,950,
        1,0,0,0,20,958,1,0,0,0,22,962,1,0,0,0,24,1020,1,0,0,0,26,1022,1,
        0,0,0,28,1024,1,0,0,0,30,1032,1,0,0,0,32,1035,1,0,0,0,34,1039,1,
        0,0,0,36,1042,1,0,0,0,38,1068,1,0,0,0,40,1076,1,0,0,0,42,1084,1,
        0,0,0,44,1096,1,0,0,0,46,1098,1,0,0,0,48,1110,1,0,0,0,50,1119,1,
        0,0,0,52,1125,1,0,0,0,54,1131,1,0,0,0,56,1135,1,0,0,0,58,1137,1,
        0,0,0,60,1146,1,0,0,0,62,1162,1,0,0,0,64,1171,1,0,0,0,66,1184,1,
        0,0,0,68,1210,1,0,0,0,70,1232,1,0,0,0,72,1234,1,0,0,0,74,1241,1,
        0,0,0,76,1248,1,0,0,0,78,1256,1,0,0,0,80,1271,1,0,0,0,82,1285,1,
        0,0,0,84,1290,1,0,0,0,86,1292,1,0,0,0,88,1296,1,0,0,0,90,1298,1,
        0,0,0,92,1302,1,0,0,0,94,1310,1,0,0,0,96,1321,1,0,0,0,98,1323,1,
        0,0,0,100,1341,1,0,0,0,102,1345,1,0,0,0,104,1364,1,0,0,0,106,1372,
        1,0,0,0,108,1374,1,0,0,0,110,1396,1,0,0,0,112,1405,1,0,0,0,114,1413,
        1,0,0,0,116,1426,1,0,0,0,118,1428,1,0,0,0,120,1439,1,0,0,0,122,1447,
        1,0,0,0,124,1449,1,0,0,0,126,1460,1,0,0,0,128,1471,1,0,0,0,130,1476,
        1,0,0,0,132,1484,1,0,0,0,134,1498,1,0,0,0,136,1512,1,0,0,0,138,1516,
        1,0,0,0,140,1520,1,0,0,0,142,1535,1,0,0,0,144,1537,1,0,0,0,146,1543,
        1,0,0,0,148,1547,1,0,0,0,150,1555,1,0,0,0,152,1560,1,0,0,0,154,1569,
        1,0,0,0,156,1575,1,0,0,0,158,1579,1,0,0,0,160,1584,1,0,0,0,162,1586,
        1,0,0,0,164,1602,1,0,0,0,166,1607,1,0,0,0,168,1611,1,0,0,0,170,1617,
        1,0,0,0,172,1625,1,0,0,0,174,1632,1,0,0,0,176,1637,1,0,0,0,178,1656,
        1,0,0,0,180,1675,1,0,0,0,182,1690,1,0,0,0,184,1695,1,0,0,0,186,1700,
        1,0,0,0,188,1705,1,0,0,0,190,1712,1,0,0,0,192,1717,1,0,0,0,194,1732,
        1,0,0,0,196,1737,1,0,0,0,198,1744,1,0,0,0,200,1777,1,0,0,0,202,1796,
        1,0,0,0,204,1800,1,0,0,0,206,1802,1,0,0,0,208,1827,1,0,0,0,210,1829,
        1,0,0,0,212,1838,1,0,0,0,214,1848,1,0,0,0,216,1853,1,0,0,0,218,1858,
        1,0,0,0,220,1866,1,0,0,0,222,1871,1,0,0,0,224,1876,1,0,0,0,226,1899,
        1,0,0,0,228,1901,1,0,0,0,230,1905,1,0,0,0,232,1913,1,0,0,0,234,1922,
        1,0,0,0,236,1936,1,0,0,0,238,1944,1,0,0,0,240,1946,1,0,0,0,242,1956,
        1,0,0,0,244,1968,1,0,0,0,246,2003,1,0,0,0,248,2007,1,0,0,0,250,2015,
        1,0,0,0,252,2051,1,0,0,0,254,2055,1,0,0,0,256,2097,1,0,0,0,258,2125,
        1,0,0,0,260,2136,1,0,0,0,262,2138,1,0,0,0,264,2141,1,0,0,0,266,2149,
        1,0,0,0,268,2156,1,0,0,0,270,2190,1,0,0,0,272,2192,1,0,0,0,274,2194,
        1,0,0,0,276,2196,1,0,0,0,278,2205,1,0,0,0,280,2209,1,0,0,0,282,2241,
        1,0,0,0,284,2258,1,0,0,0,286,2260,1,0,0,0,288,2262,1,0,0,0,290,2274,
        1,0,0,0,292,2277,1,0,0,0,294,2285,1,0,0,0,296,2291,1,0,0,0,298,2293,
        1,0,0,0,300,2301,1,0,0,0,302,2303,1,0,0,0,304,2311,1,0,0,0,306,2315,
        1,0,0,0,308,2317,1,0,0,0,310,2319,1,0,0,0,312,2321,1,0,0,0,314,2323,
        1,0,0,0,316,2328,1,0,0,0,318,2332,1,0,0,0,320,2343,1,0,0,0,322,2356,
        1,0,0,0,324,2358,1,0,0,0,326,2360,1,0,0,0,328,2368,1,0,0,0,330,2373,
        1,0,0,0,332,2378,1,0,0,0,334,2384,1,0,0,0,336,2404,1,0,0,0,338,2407,
        1,0,0,0,340,2423,1,0,0,0,342,2436,1,0,0,0,344,2438,1,0,0,0,346,2450,
        1,0,0,0,348,2477,1,0,0,0,350,2479,1,0,0,0,352,2482,1,0,0,0,354,2490,
        1,0,0,0,356,2492,1,0,0,0,358,2521,1,0,0,0,360,2527,1,0,0,0,362,2529,
        1,0,0,0,364,2553,1,0,0,0,366,2572,1,0,0,0,368,2584,1,0,0,0,370,2586,
        1,0,0,0,372,2591,1,0,0,0,374,2593,1,0,0,0,376,2601,1,0,0,0,378,2607,
        1,0,0,0,380,2609,1,0,0,0,382,2625,1,0,0,0,384,2641,1,0,0,0,386,2643,
        1,0,0,0,388,2653,1,0,0,0,390,2660,1,0,0,0,392,2664,1,0,0,0,394,2674,
        1,0,0,0,396,2689,1,0,0,0,398,2692,1,0,0,0,400,2701,1,0,0,0,402,2704,
        1,0,0,0,404,2718,1,0,0,0,406,2724,1,0,0,0,408,2726,1,0,0,0,410,2730,
        1,0,0,0,412,2734,1,0,0,0,414,2748,1,0,0,0,416,2750,1,0,0,0,418,2752,
        1,0,0,0,420,2807,1,0,0,0,422,2809,1,0,0,0,424,2821,1,0,0,0,426,2826,
        1,0,0,0,428,2838,1,0,0,0,430,2841,1,0,0,0,432,2845,1,0,0,0,434,2848,
        1,0,0,0,436,2874,1,0,0,0,438,2876,1,0,0,0,440,2893,1,0,0,0,442,2895,
        1,0,0,0,444,2908,1,0,0,0,446,2910,1,0,0,0,448,2916,1,0,0,0,450,2922,
        1,0,0,0,452,2928,1,0,0,0,454,2931,1,0,0,0,456,2938,1,0,0,0,458,2942,
        1,0,0,0,460,2954,1,0,0,0,462,2966,1,0,0,0,464,2969,1,0,0,0,466,2973,
        1,0,0,0,468,2977,1,0,0,0,470,2983,1,0,0,0,472,2986,1,0,0,0,474,2991,
        1,0,0,0,476,2995,1,0,0,0,478,3002,1,0,0,0,480,3009,1,0,0,0,482,3015,
        1,0,0,0,484,3058,1,0,0,0,486,3060,1,0,0,0,488,3112,1,0,0,0,490,3114,
        1,0,0,0,492,3121,1,0,0,0,494,3123,1,0,0,0,496,3130,1,0,0,0,498,3138,
        1,0,0,0,500,3142,1,0,0,0,502,3150,1,0,0,0,504,3152,1,0,0,0,506,3168,
        1,0,0,0,508,3170,1,0,0,0,510,3174,1,0,0,0,512,3187,1,0,0,0,514,3191,
        1,0,0,0,516,3205,1,0,0,0,518,3207,1,0,0,0,520,3218,1,0,0,0,522,3231,
        1,0,0,0,524,3237,1,0,0,0,526,3249,1,0,0,0,528,3267,1,0,0,0,530,3288,
        1,0,0,0,532,3307,1,0,0,0,534,3310,1,0,0,0,536,3315,1,0,0,0,538,3343,
        1,0,0,0,540,3392,1,0,0,0,542,3396,1,0,0,0,544,3413,1,0,0,0,546,3415,
        1,0,0,0,548,3433,1,0,0,0,550,3436,1,0,0,0,552,3444,1,0,0,0,554,3448,
        1,0,0,0,556,3460,1,0,0,0,558,3462,1,0,0,0,560,3467,1,0,0,0,562,3474,
        1,0,0,0,564,3482,1,0,0,0,566,3498,1,0,0,0,568,3522,1,0,0,0,570,3532,
        1,0,0,0,572,3549,1,0,0,0,574,3589,1,0,0,0,576,3595,1,0,0,0,578,3602,
        1,0,0,0,580,3662,1,0,0,0,582,3667,1,0,0,0,584,3676,1,0,0,0,586,3678,
        1,0,0,0,588,3682,1,0,0,0,590,3688,1,0,0,0,592,3699,1,0,0,0,594,3715,
        1,0,0,0,596,3717,1,0,0,0,598,3725,1,0,0,0,600,3729,1,0,0,0,602,3731,
        1,0,0,0,604,3737,1,0,0,0,606,3748,1,0,0,0,608,3757,1,0,0,0,610,3768,
        1,0,0,0,612,3770,1,0,0,0,614,3775,1,0,0,0,616,3791,1,0,0,0,618,3793,
        1,0,0,0,620,3796,1,0,0,0,622,3801,1,0,0,0,624,3808,1,0,0,0,626,3810,
        1,0,0,0,628,3814,1,0,0,0,630,3819,1,0,0,0,632,3831,1,0,0,0,634,3836,
        1,0,0,0,636,3848,1,0,0,0,638,3852,1,0,0,0,640,3860,1,0,0,0,642,3864,
        1,0,0,0,644,3866,1,0,0,0,646,3871,1,0,0,0,648,3879,1,0,0,0,650,3883,
        1,0,0,0,652,3888,1,0,0,0,654,3892,1,0,0,0,656,3898,1,0,0,0,658,3900,
        1,0,0,0,660,3907,1,0,0,0,662,3909,1,0,0,0,664,3911,1,0,0,0,666,3914,
        1,0,0,0,668,3922,1,0,0,0,670,3926,1,0,0,0,672,3928,1,0,0,0,674,3933,
        1,0,0,0,676,3944,1,0,0,0,678,3946,1,0,0,0,680,3953,1,0,0,0,682,3955,
        1,0,0,0,684,3960,1,0,0,0,686,3964,1,0,0,0,688,3966,1,0,0,0,690,3978,
        1,0,0,0,692,3990,1,0,0,0,694,3992,1,0,0,0,696,4000,1,0,0,0,698,4002,
        1,0,0,0,700,4008,1,0,0,0,702,4010,1,0,0,0,704,4012,1,0,0,0,706,4016,
        1,0,0,0,708,4025,1,0,0,0,710,4033,1,0,0,0,712,4040,1,0,0,0,714,4050,
        1,0,0,0,716,4059,1,0,0,0,718,4068,1,0,0,0,720,4078,1,0,0,0,722,4082,
        1,0,0,0,724,4086,1,0,0,0,726,4090,1,0,0,0,728,4094,1,0,0,0,730,4098,
        1,0,0,0,732,4102,1,0,0,0,734,4106,1,0,0,0,736,4110,1,0,0,0,738,4114,
        1,0,0,0,740,4118,1,0,0,0,742,4122,1,0,0,0,744,4126,1,0,0,0,746,4131,
        1,0,0,0,748,4136,1,0,0,0,750,4141,1,0,0,0,752,4149,1,0,0,0,754,4154,
        1,0,0,0,756,4157,1,0,0,0,758,4163,1,0,0,0,760,4166,1,0,0,0,762,4178,
        1,0,0,0,764,4180,1,0,0,0,766,4182,1,0,0,0,768,4184,1,0,0,0,770,4186,
        1,0,0,0,772,4188,1,0,0,0,774,4190,1,0,0,0,776,4192,1,0,0,0,778,4194,
        1,0,0,0,780,4196,1,0,0,0,782,4198,1,0,0,0,784,4200,1,0,0,0,786,4202,
        1,0,0,0,788,4204,1,0,0,0,790,4211,1,0,0,0,792,4216,1,0,0,0,794,4244,
        1,0,0,0,796,4261,1,0,0,0,798,4263,1,0,0,0,800,4266,1,0,0,0,802,4269,
        1,0,0,0,804,4274,1,0,0,0,806,812,3,2,1,0,807,808,5,223,0,0,808,809,
        5,52,0,0,809,810,5,319,0,0,810,812,3,4,2,0,811,806,1,0,0,0,811,807,
        1,0,0,0,812,1,1,0,0,0,813,815,5,24,0,0,814,813,1,0,0,0,815,818,1,
        0,0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,819,1,0,0,0,818,816,1,
        0,0,0,819,828,3,10,5,0,820,822,5,24,0,0,821,820,1,0,0,0,822,823,
        1,0,0,0,823,821,1,0,0,0,823,824,1,0,0,0,824,825,1,0,0,0,825,827,
        3,10,5,0,826,821,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,
        1,0,0,0,829,834,1,0,0,0,830,828,1,0,0,0,831,833,5,24,0,0,832,831,
        1,0,0,0,833,836,1,0,0,0,834,832,1,0,0,0,834,835,1,0,0,0,835,837,
        1,0,0,0,836,834,1,0,0,0,837,838,5,0,0,1,838,3,1,0,0,0,839,841,5,
        24,0,0,840,839,1,0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,842,843,1,
        0,0,0,843,845,1,0,0,0,844,842,1,0,0,0,845,846,5,0,0,1,846,5,1,0,
        0,0,847,849,5,24,0,0,848,847,1,0,0,0,849,852,1,0,0,0,850,848,1,0,
        0,0,850,851,1,0,0,0,851,861,1,0,0,0,852,850,1,0,0,0,853,855,3,8,
        4,0,854,856,5,24,0,0,855,854,1,0,0,0,856,857,1,0,0,0,857,855,1,0,
        0,0,857,858,1,0,0,0,858,860,1,0,0,0,859,853,1,0,0,0,860,863,1,0,
        0,0,861,859,1,0,0,0,861,862,1,0,0,0,862,864,1,0,0,0,863,861,1,0,
        0,0,864,865,5,247,0,0,865,869,3,14,7,0,866,868,5,24,0,0,867,866,
        1,0,0,0,868,871,1,0,0,0,869,867,1,0,0,0,869,870,1,0,0,0,870,7,1,
        0,0,0,871,869,1,0,0,0,872,875,3,698,349,0,873,875,3,214,107,0,874,
        872,1,0,0,0,874,873,1,0,0,0,875,9,1,0,0,0,876,879,5,129,0,0,877,
        878,5,1,0,0,878,880,5,222,0,0,879,877,1,0,0,0,879,880,1,0,0,0,880,
        882,1,0,0,0,881,876,1,0,0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,
        884,3,12,6,0,884,11,1,0,0,0,885,930,3,224,112,0,886,930,3,232,116,
        0,887,930,3,698,349,0,888,930,3,418,209,0,889,930,3,520,260,0,890,
        930,3,694,347,0,891,930,3,364,182,0,892,930,3,700,350,0,893,930,
        3,592,296,0,894,930,3,590,295,0,895,930,3,702,351,0,896,930,3,210,
        105,0,897,930,3,214,107,0,898,930,3,216,108,0,899,930,3,434,217,
        0,900,930,3,438,219,0,901,930,3,222,111,0,902,930,3,564,282,0,903,
        930,3,568,284,0,904,930,3,570,285,0,905,930,3,370,185,0,906,930,
        3,522,261,0,907,930,3,524,262,0,908,930,3,526,263,0,909,930,3,528,
        264,0,910,930,3,530,265,0,911,930,3,394,197,0,912,930,3,398,199,
        0,913,930,3,402,201,0,914,930,3,380,190,0,915,930,3,382,191,0,916,
        930,3,386,193,0,917,930,3,546,273,0,918,930,3,560,280,0,919,930,
        3,606,303,0,920,930,3,614,307,0,921,930,3,636,318,0,922,930,3,536,
        268,0,923,930,3,538,269,0,924,930,3,442,221,0,925,930,3,392,196,
        0,926,930,3,388,194,0,927,930,3,390,195,0,928,930,3,554,277,0,929,
        885,1,0,0,0,929,886,1,0,0,0,929,887,1,0,0,0,929,888,1,0,0,0,929,
        889,1,0,0,0,929,890,1,0,0,0,929,891,1,0,0,0,929,892,1,0,0,0,929,
        893,1,0,0,0,929,894,1,0,0,0,929,895,1,0,0,0,929,896,1,0,0,0,929,
        897,1,0,0,0,929,898,1,0,0,0,929,899,1,0,0,0,929,900,1,0,0,0,929,
        901,1,0,0,0,929,902,1,0,0,0,929,903,1,0,0,0,929,904,1,0,0,0,929,
        905,1,0,0,0,929,906,1,0,0,0,929,907,1,0,0,0,929,908,1,0,0,0,929,
        909,1,0,0,0,929,910,1,0,0,0,929,911,1,0,0,0,929,912,1,0,0,0,929,
        913,1,0,0,0,929,914,1,0,0,0,929,915,1,0,0,0,929,916,1,0,0,0,929,
        917,1,0,0,0,929,918,1,0,0,0,929,919,1,0,0,0,929,920,1,0,0,0,929,
        921,1,0,0,0,929,922,1,0,0,0,929,923,1,0,0,0,929,924,1,0,0,0,929,
        925,1,0,0,0,929,926,1,0,0,0,929,927,1,0,0,0,929,928,1,0,0,0,930,
        13,1,0,0,0,931,936,3,16,8,0,932,933,5,209,0,0,933,935,3,16,8,0,934,
        932,1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,937,1,0,0,0,937,
        941,1,0,0,0,938,936,1,0,0,0,939,941,3,200,100,0,940,931,1,0,0,0,
        940,939,1,0,0,0,941,15,1,0,0,0,942,947,3,18,9,0,943,944,5,51,0,0,
        944,946,3,18,9,0,945,943,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,
        947,948,1,0,0,0,948,17,1,0,0,0,949,947,1,0,0,0,950,955,3,20,10,0,
        951,952,5,315,0,0,952,954,3,20,10,0,953,951,1,0,0,0,954,957,1,0,
        0,0,955,953,1,0,0,0,955,956,1,0,0,0,956,19,1,0,0,0,957,955,1,0,0,
        0,958,960,3,28,14,0,959,961,3,24,12,0,960,959,1,0,0,0,960,961,1,
        0,0,0,961,21,1,0,0,0,962,964,5,170,0,0,963,965,5,196,0,0,964,963,
        1,0,0,0,964,965,1,0,0,0,965,966,1,0,0,0,966,967,5,110,0,0,967,968,
        5,142,0,0,968,23,1,0,0,0,969,971,5,196,0,0,970,969,1,0,0,0,970,971,
        1,0,0,0,971,972,1,0,0,0,972,973,3,26,13,0,973,976,3,28,14,0,974,
        975,5,122,0,0,975,977,3,28,14,0,976,974,1,0,0,0,976,977,1,0,0,0,
        977,1021,1,0,0,0,978,980,5,196,0,0,979,978,1,0,0,0,979,980,1,0,0,
        0,980,981,1,0,0,0,981,983,5,159,0,0,982,984,5,80,0,0,983,982,1,0,
        0,0,983,984,1,0,0,0,984,985,1,0,0,0,985,1021,3,82,41,0,986,996,5,
        171,0,0,987,996,5,197,0,0,988,989,5,170,0,0,989,996,5,198,0,0,990,
        992,5,170,0,0,991,990,1,0,0,0,991,992,1,0,0,0,992,993,1,0,0,0,993,
        994,5,196,0,0,994,996,5,198,0,0,995,986,1,0,0,0,995,987,1,0,0,0,
        995,988,1,0,0,0,995,991,1,0,0,0,996,1021,1,0,0,0,997,999,5,196,0,
        0,998,997,1,0,0,0,998,999,1,0,0,0,999,1000,1,0,0,0,1000,1002,5,67,
        0,0,1001,1003,7,0,0,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,
        1,0,0,0,1004,1005,3,28,14,0,1005,1006,5,51,0,0,1006,1007,3,28,14,
        0,1007,1021,1,0,0,0,1008,1014,5,2,0,0,1009,1014,5,3,0,0,1010,1014,
        5,4,0,0,1011,1014,5,5,0,0,1012,1014,3,22,11,0,1013,1008,1,0,0,0,
        1013,1009,1,0,0,0,1013,1010,1,0,0,0,1013,1011,1,0,0,0,1013,1012,
        1,0,0,0,1014,1015,1,0,0,0,1015,1017,3,28,14,0,1016,1013,1,0,0,0,
        1017,1018,1,0,0,0,1018,1016,1,0,0,0,1018,1019,1,0,0,0,1019,1021,
        1,0,0,0,1020,970,1,0,0,0,1020,979,1,0,0,0,1020,995,1,0,0,0,1020,
        998,1,0,0,0,1020,1016,1,0,0,0,1021,25,1,0,0,0,1022,1023,7,1,0,0,
        1023,27,1,0,0,0,1024,1029,3,36,18,0,1025,1026,7,2,0,0,1026,1028,
        3,36,18,0,1027,1025,1,0,0,0,1028,1031,1,0,0,0,1029,1027,1,0,0,0,
        1029,1030,1,0,0,0,1030,29,1,0,0,0,1031,1029,1,0,0,0,1032,1033,5,
        8,0,0,1033,1034,5,8,0,0,1034,31,1,0,0,0,1035,1036,5,8,0,0,1036,1037,
        5,8,0,0,1037,1038,5,13,0,0,1038,33,1,0,0,0,1039,1040,5,29,0,0,1040,
        1041,5,29,0,0,1041,35,1,0,0,0,1042,1055,3,38,19,0,1043,1051,5,10,
        0,0,1044,1051,3,30,15,0,1045,1051,5,11,0,0,1046,1051,3,32,16,0,1047,
        1051,5,12,0,0,1048,1051,5,13,0,0,1049,1051,5,39,0,0,1050,1043,1,
        0,0,0,1050,1044,1,0,0,0,1050,1045,1,0,0,0,1050,1046,1,0,0,0,1050,
        1047,1,0,0,0,1050,1048,1,0,0,0,1050,1049,1,0,0,0,1051,1052,1,0,0,
        0,1052,1054,3,38,19,0,1053,1050,1,0,0,0,1054,1057,1,0,0,0,1055,1053,
        1,0,0,0,1055,1056,1,0,0,0,1056,1066,1,0,0,0,1057,1055,1,0,0,0,1058,
        1059,3,34,17,0,1059,1060,3,36,18,0,1060,1067,1,0,0,0,1061,1063,5,
        29,0,0,1062,1061,1,0,0,0,1063,1064,1,0,0,0,1064,1062,1,0,0,0,1064,
        1065,1,0,0,0,1065,1067,1,0,0,0,1066,1058,1,0,0,0,1066,1062,1,0,0,
        0,1066,1067,1,0,0,0,1067,37,1,0,0,0,1068,1073,3,40,20,0,1069,1070,
        7,3,0,0,1070,1072,3,40,20,0,1071,1069,1,0,0,0,1072,1075,1,0,0,0,
        1073,1071,1,0,0,0,1073,1074,1,0,0,0,1074,39,1,0,0,0,1075,1073,1,
        0,0,0,1076,1081,3,42,21,0,1077,1078,7,4,0,0,1078,1080,3,42,21,0,
        1079,1077,1,0,0,0,1080,1083,1,0,0,0,1081,1079,1,0,0,0,1081,1082,
        1,0,0,0,1082,41,1,0,0,0,1083,1081,1,0,0,0,1084,1089,3,44,22,0,1085,
        1086,5,14,0,0,1086,1088,3,44,22,0,1087,1085,1,0,0,0,1088,1091,1,
        0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,43,1,0,0,0,1091,1089,
        1,0,0,0,1092,1097,3,54,27,0,1093,1094,3,46,23,0,1094,1095,3,54,27,
        0,1095,1097,1,0,0,0,1096,1092,1,0,0,0,1096,1093,1,0,0,0,1097,45,
        1,0,0,0,1098,1099,7,5,0,0,1099,47,1,0,0,0,1100,1109,3,138,69,0,1101,
        1109,3,132,66,0,1102,1106,5,25,0,0,1103,1107,3,144,72,0,1104,1107,
        5,319,0,0,1105,1107,3,726,363,0,1106,1103,1,0,0,0,1106,1104,1,0,
        0,0,1106,1105,1,0,0,0,1107,1109,1,0,0,0,1108,1100,1,0,0,0,1108,1101,
        1,0,0,0,1108,1102,1,0,0,0,1109,1112,1,0,0,0,1110,1108,1,0,0,0,1110,
        1111,1,0,0,0,1111,1115,1,0,0,0,1112,1110,1,0,0,0,1113,1114,5,76,
        0,0,1114,1116,3,724,362,0,1115,1113,1,0,0,0,1115,1116,1,0,0,0,1116,
        49,1,0,0,0,1117,1120,3,710,355,0,1118,1120,3,68,34,0,1119,1117,1,
        0,0,0,1119,1118,1,0,0,0,1120,1121,1,0,0,0,1121,1122,3,48,24,0,1122,
        51,1,0,0,0,1123,1126,3,712,356,0,1124,1126,3,70,35,0,1125,1123,1,
        0,0,0,1125,1124,1,0,0,0,1126,1127,1,0,0,0,1127,1128,3,48,24,0,1128,
        53,1,0,0,0,1129,1132,3,50,25,0,1130,1132,3,84,42,0,1131,1129,1,0,
        0,0,1131,1130,1,0,0,0,1132,55,1,0,0,0,1133,1136,3,52,26,0,1134,1136,
        3,84,42,0,1135,1133,1,0,0,0,1135,1134,1,0,0,0,1136,57,1,0,0,0,1137,
        1139,5,43,0,0,1138,1140,3,112,56,0,1139,1138,1,0,0,0,1139,1140,1,
        0,0,0,1140,1142,1,0,0,0,1141,1143,5,26,0,0,1142,1141,1,0,0,0,1142,
        1143,1,0,0,0,1143,1144,1,0,0,0,1144,1145,5,42,0,0,1145,59,1,0,0,
        0,1146,1149,3,14,7,0,1147,1148,5,30,0,0,1148,1150,3,14,7,0,1149,
        1147,1,0,0,0,1149,1150,1,0,0,0,1150,1159,1,0,0,0,1151,1152,5,26,
        0,0,1152,1155,3,14,7,0,1153,1154,5,30,0,0,1154,1156,3,14,7,0,1155,
        1153,1,0,0,0,1155,1156,1,0,0,0,1156,1158,1,0,0,0,1157,1151,1,0,0,
        0,1158,1161,1,0,0,0,1159,1157,1,0,0,0,1159,1160,1,0,0,0,1160,61,
        1,0,0,0,1161,1159,1,0,0,0,1162,1164,5,37,0,0,1163,1165,3,60,30,0,
        1164,1163,1,0,0,0,1164,1165,1,0,0,0,1165,1167,1,0,0,0,1166,1168,
        5,26,0,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,1169,1,0,0,0,1169,
        1170,5,38,0,0,1170,63,1,0,0,0,1171,1172,3,14,7,0,1172,1173,5,30,
        0,0,1173,1181,3,14,7,0,1174,1175,5,26,0,0,1175,1176,3,14,7,0,1176,
        1177,5,30,0,0,1177,1178,3,14,7,0,1178,1180,1,0,0,0,1179,1174,1,0,
        0,0,1180,1183,1,0,0,0,1181,1179,1,0,0,0,1181,1182,1,0,0,0,1182,65,
        1,0,0,0,1183,1181,1,0,0,0,1184,1186,5,15,0,0,1185,1187,3,64,32,0,
        1186,1185,1,0,0,0,1186,1187,1,0,0,0,1187,1189,1,0,0,0,1188,1190,
        5,26,0,0,1189,1188,1,0,0,0,1189,1190,1,0,0,0,1190,1191,1,0,0,0,1191,
        1192,5,16,0,0,1192,67,1,0,0,0,1193,1211,3,142,71,0,1194,1211,3,144,
        72,0,1195,1211,3,80,40,0,1196,1211,3,72,36,0,1197,1211,3,76,38,0,
        1198,1211,3,78,39,0,1199,1200,3,726,363,0,1200,1203,5,40,0,0,1201,
        1204,3,752,376,0,1202,1204,5,316,0,0,1203,1201,1,0,0,0,1203,1202,
        1,0,0,0,1204,1211,1,0,0,0,1205,1211,3,208,104,0,1206,1211,3,74,37,
        0,1207,1211,3,58,29,0,1208,1211,3,62,31,0,1209,1211,3,66,33,0,1210,
        1193,1,0,0,0,1210,1194,1,0,0,0,1210,1195,1,0,0,0,1210,1196,1,0,0,
        0,1210,1197,1,0,0,0,1210,1198,1,0,0,0,1210,1199,1,0,0,0,1210,1205,
        1,0,0,0,1210,1206,1,0,0,0,1210,1207,1,0,0,0,1210,1208,1,0,0,0,1210,
        1209,1,0,0,0,1211,69,1,0,0,0,1212,1233,3,142,71,0,1213,1233,3,144,
        72,0,1214,1233,3,80,40,0,1215,1233,3,72,36,0,1216,1233,3,78,39,0,
        1217,1218,3,726,363,0,1218,1221,5,40,0,0,1219,1222,3,752,376,0,1220,
        1222,5,316,0,0,1221,1219,1,0,0,0,1221,1220,1,0,0,0,1222,1233,1,0,
        0,0,1223,1224,5,27,0,0,1224,1225,3,232,116,0,1225,1226,5,28,0,0,
        1226,1233,1,0,0,0,1227,1233,3,208,104,0,1228,1233,3,74,37,0,1229,
        1233,3,58,29,0,1230,1233,3,62,31,0,1231,1233,3,66,33,0,1232,1212,
        1,0,0,0,1232,1213,1,0,0,0,1232,1214,1,0,0,0,1232,1215,1,0,0,0,1232,
        1216,1,0,0,0,1232,1217,1,0,0,0,1232,1223,1,0,0,0,1232,1227,1,0,0,
        0,1232,1228,1,0,0,0,1232,1229,1,0,0,0,1232,1230,1,0,0,0,1232,1231,
        1,0,0,0,1233,71,1,0,0,0,1234,1235,5,73,0,0,1235,1236,5,27,0,0,1236,
        1237,3,14,7,0,1237,1238,5,55,0,0,1238,1239,3,204,102,0,1239,1240,
        5,28,0,0,1240,73,1,0,0,0,1241,1242,5,68,0,0,1242,1243,5,27,0,0,1243,
        1244,3,14,7,0,1244,1245,5,55,0,0,1245,1246,3,156,78,0,1246,1247,
        5,28,0,0,1247,75,1,0,0,0,1248,1249,5,128,0,0,1249,1252,5,27,0,0,
        1250,1253,3,232,116,0,1251,1253,3,370,185,0,1252,1250,1,0,0,0,1252,
        1251,1,0,0,0,1253,1254,1,0,0,0,1254,1255,5,28,0,0,1255,77,1,0,0,
        0,1256,1258,5,72,0,0,1257,1259,3,14,7,0,1258,1257,1,0,0,0,1258,1259,
        1,0,0,0,1259,1261,1,0,0,0,1260,1262,3,140,70,0,1261,1260,1,0,0,0,
        1262,1263,1,0,0,0,1263,1261,1,0,0,0,1263,1264,1,0,0,0,1264,1267,
        1,0,0,0,1265,1266,5,114,0,0,1266,1268,3,14,7,0,1267,1265,1,0,0,0,
        1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,1270,5,118,0,0,1270,79,
        1,0,0,0,1271,1283,3,110,55,0,1272,1281,5,41,0,0,1273,1274,5,27,0,
        0,1274,1275,3,14,7,0,1275,1276,5,28,0,0,1276,1282,1,0,0,0,1277,1278,
        5,37,0,0,1278,1279,3,6,3,0,1279,1280,5,38,0,0,1280,1282,1,0,0,0,
        1281,1273,1,0,0,0,1281,1277,1,0,0,0,1282,1284,1,0,0,0,1283,1272,
        1,0,0,0,1283,1284,1,0,0,0,1284,81,1,0,0,0,1285,1286,3,56,28,0,1286,
        83,1,0,0,0,1287,1291,3,98,49,0,1288,1291,3,102,51,0,1289,1291,3,
        108,54,0,1290,1287,1,0,0,0,1290,1288,1,0,0,0,1290,1289,1,0,0,0,1291,
        85,1,0,0,0,1292,1293,5,316,0,0,1293,87,1,0,0,0,1294,1297,3,710,355,
        0,1295,1297,5,316,0,0,1296,1294,1,0,0,0,1296,1295,1,0,0,0,1297,89,
        1,0,0,0,1298,1299,3,14,7,0,1299,1300,5,55,0,0,1300,1301,3,88,44,
        0,1301,91,1,0,0,0,1302,1307,3,90,45,0,1303,1304,5,26,0,0,1304,1306,
        3,90,45,0,1305,1303,1,0,0,0,1306,1309,1,0,0,0,1307,1305,1,0,0,0,
        1307,1308,1,0,0,0,1308,93,1,0,0,0,1309,1307,1,0,0,0,1310,1311,3,
        14,7,0,1311,1312,5,26,0,0,1312,1315,3,86,43,0,1313,1314,5,216,0,
        0,1314,1316,3,92,46,0,1315,1313,1,0,0,0,1315,1316,1,0,0,0,1316,95,
        1,0,0,0,1317,1322,5,121,0,0,1318,1322,5,198,0,0,1319,1320,5,98,0,
        0,1320,1322,3,14,7,0,1321,1317,1,0,0,0,1321,1318,1,0,0,0,1321,1319,
        1,0,0,0,1322,97,1,0,0,0,1323,1324,5,175,0,0,1324,1325,5,27,0,0,1325,
        1328,3,94,47,0,1326,1327,5,248,0,0,1327,1329,3,156,78,0,1328,1326,
        1,0,0,0,1328,1329,1,0,0,0,1329,1336,1,0,0,0,1330,1331,3,96,48,0,
        1331,1332,5,204,0,0,1332,1333,7,6,0,0,1333,1335,1,0,0,0,1334,1330,
        1,0,0,0,1335,1338,1,0,0,0,1336,1334,1,0,0,0,1336,1337,1,0,0,0,1337,
        1339,1,0,0,0,1338,1336,1,0,0,0,1339,1340,5,28,0,0,1340,99,1,0,0,
        0,1341,1342,7,7,0,0,1342,1343,5,204,0,0,1343,1344,5,121,0,0,1344,
        101,1,0,0,0,1345,1346,5,173,0,0,1346,1347,5,27,0,0,1347,1349,3,94,
        47,0,1348,1350,3,100,50,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,
        1351,1,0,0,0,1351,1352,5,28,0,0,1352,103,1,0,0,0,1353,1355,5,313,
        0,0,1354,1356,5,54,0,0,1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,
        1365,1,0,0,0,1357,1359,5,312,0,0,1358,1360,7,8,0,0,1359,1358,1,0,
        0,0,1359,1360,1,0,0,0,1360,1362,1,0,0,0,1361,1363,5,54,0,0,1362,
        1361,1,0,0,0,1362,1363,1,0,0,0,1363,1365,1,0,0,0,1364,1353,1,0,0,
        0,1364,1357,1,0,0,0,1365,105,1,0,0,0,1366,1373,5,121,0,0,1367,1373,
        5,198,0,0,1368,1369,5,115,0,0,1369,1373,5,54,0,0,1370,1371,5,115,
        0,0,1371,1373,5,200,0,0,1372,1366,1,0,0,0,1372,1367,1,0,0,0,1372,
        1368,1,0,0,0,1372,1370,1,0,0,0,1373,107,1,0,0,0,1374,1375,5,174,
        0,0,1375,1376,5,27,0,0,1376,1380,3,94,47,0,1377,1378,3,104,52,0,
        1378,1379,5,314,0,0,1379,1381,1,0,0,0,1380,1377,1,0,0,0,1380,1381,
        1,0,0,0,1381,1386,1,0,0,0,1382,1383,3,106,53,0,1383,1384,5,204,0,
        0,1384,1385,5,115,0,0,1385,1387,1,0,0,0,1386,1382,1,0,0,0,1386,1387,
        1,0,0,0,1387,1392,1,0,0,0,1388,1389,3,106,53,0,1389,1390,5,204,0,
        0,1390,1391,5,121,0,0,1391,1393,1,0,0,0,1392,1388,1,0,0,0,1392,1393,
        1,0,0,0,1393,1394,1,0,0,0,1394,1395,5,28,0,0,1395,109,1,0,0,0,1396,
        1398,5,27,0,0,1397,1399,3,130,65,0,1398,1397,1,0,0,0,1398,1399,1,
        0,0,0,1399,1401,1,0,0,0,1400,1402,5,26,0,0,1401,1400,1,0,0,0,1401,
        1402,1,0,0,0,1402,1403,1,0,0,0,1403,1404,5,28,0,0,1404,111,1,0,0,
        0,1405,1410,3,14,7,0,1406,1407,5,26,0,0,1407,1409,3,14,7,0,1408,
        1406,1,0,0,0,1409,1412,1,0,0,0,1410,1408,1,0,0,0,1410,1411,1,0,0,
        0,1411,113,1,0,0,0,1412,1410,1,0,0,0,1413,1414,5,27,0,0,1414,1419,
        3,724,362,0,1415,1416,5,26,0,0,1416,1418,3,724,362,0,1417,1415,1,
        0,0,0,1418,1421,1,0,0,0,1419,1417,1,0,0,0,1419,1420,1,0,0,0,1420,
        1422,1,0,0,0,1421,1419,1,0,0,0,1422,1423,5,28,0,0,1423,115,1,0,0,
        0,1424,1427,3,144,72,0,1425,1427,3,724,362,0,1426,1424,1,0,0,0,1426,
        1425,1,0,0,0,1427,117,1,0,0,0,1428,1429,5,27,0,0,1429,1434,3,116,
        58,0,1430,1431,5,26,0,0,1431,1433,3,116,58,0,1432,1430,1,0,0,0,1433,
        1436,1,0,0,0,1434,1432,1,0,0,0,1434,1435,1,0,0,0,1435,1437,1,0,0,
        0,1436,1434,1,0,0,0,1437,1438,5,28,0,0,1438,119,1,0,0,0,1439,1440,
        3,748,374,0,1440,1441,3,724,362,0,1441,121,1,0,0,0,1442,1443,3,724,
        362,0,1443,1444,5,25,0,0,1444,1445,3,724,362,0,1445,1448,1,0,0,0,
        1446,1448,3,738,369,0,1447,1442,1,0,0,0,1447,1446,1,0,0,0,1448,123,
        1,0,0,0,1449,1454,3,120,60,0,1450,1451,5,26,0,0,1451,1453,3,120,
        60,0,1452,1450,1,0,0,0,1453,1456,1,0,0,0,1454,1452,1,0,0,0,1454,
        1455,1,0,0,0,1455,1458,1,0,0,0,1456,1454,1,0,0,0,1457,1459,5,26,
        0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,125,1,0,0,0,1460,1465,
        3,122,61,0,1461,1462,5,26,0,0,1462,1464,3,122,61,0,1463,1461,1,0,
        0,0,1464,1467,1,0,0,0,1465,1463,1,0,0,0,1465,1466,1,0,0,0,1466,1469,
        1,0,0,0,1467,1465,1,0,0,0,1468,1470,5,26,0,0,1469,1468,1,0,0,0,1469,
        1470,1,0,0,0,1470,127,1,0,0,0,1471,1474,3,14,7,0,1472,1473,5,55,
        0,0,1473,1475,3,726,363,0,1474,1472,1,0,0,0,1474,1475,1,0,0,0,1475,
        129,1,0,0,0,1476,1481,3,128,64,0,1477,1478,5,26,0,0,1478,1480,3,
        128,64,0,1479,1477,1,0,0,0,1480,1483,1,0,0,0,1481,1479,1,0,0,0,1481,
        1482,1,0,0,0,1482,131,1,0,0,0,1483,1481,1,0,0,0,1484,1491,5,27,0,
        0,1485,1486,3,252,126,0,1486,1488,3,130,65,0,1487,1489,5,26,0,0,
        1488,1487,1,0,0,0,1488,1489,1,0,0,0,1489,1492,1,0,0,0,1490,1492,
        5,20,0,0,1491,1485,1,0,0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,
        1493,1,0,0,0,1493,1494,5,28,0,0,1494,1495,3,134,67,0,1495,133,1,
        0,0,0,1496,1499,3,656,328,0,1497,1499,3,658,329,0,1498,1496,1,0,
        0,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,1502,1,0,0,0,1500,1501,
        5,213,0,0,1501,1503,3,660,330,0,1502,1500,1,0,0,0,1502,1503,1,0,
        0,0,1503,135,1,0,0,0,1504,1505,3,726,363,0,1505,1506,5,40,0,0,1506,
        1507,3,726,363,0,1507,1513,1,0,0,0,1508,1513,3,730,365,0,1509,1513,
        3,144,72,0,1510,1511,5,131,0,0,1511,1513,5,144,0,0,1512,1504,1,0,
        0,0,1512,1508,1,0,0,0,1512,1509,1,0,0,0,1512,1510,1,0,0,0,1513,1514,
        1,0,0,0,1514,1515,3,132,66,0,1515,137,1,0,0,0,1516,1517,5,43,0,0,
        1517,1518,3,14,7,0,1518,1519,5,42,0,0,1519,139,1,0,0,0,1520,1521,
        5,309,0,0,1521,1522,3,14,7,0,1522,1523,5,284,0,0,1523,1524,3,14,
        7,0,1524,141,1,0,0,0,1525,1536,3,788,394,0,1526,1536,3,786,393,0,
        1527,1536,5,316,0,0,1528,1536,5,322,0,0,1529,1536,5,198,0,0,1530,
        1536,5,92,0,0,1531,1536,5,91,0,0,1532,1536,5,93,0,0,1533,1536,3,
        784,392,0,1534,1536,5,116,0,0,1535,1525,1,0,0,0,1535,1526,1,0,0,
        0,1535,1527,1,0,0,0,1535,1528,1,0,0,0,1535,1529,1,0,0,0,1535,1530,
        1,0,0,0,1535,1531,1,0,0,0,1535,1532,1,0,0,0,1535,1533,1,0,0,0,1535,
        1534,1,0,0,0,1536,143,1,0,0,0,1537,1541,5,33,0,0,1538,1542,3,726,
        363,0,1539,1542,5,290,0,0,1540,1542,5,133,0,0,1541,1538,1,0,0,0,
        1541,1539,1,0,0,0,1541,1540,1,0,0,0,1542,145,1,0,0,0,1543,1545,3,
        144,72,0,1544,1546,5,29,0,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,
        1546,147,1,0,0,0,1547,1552,3,144,72,0,1548,1549,5,26,0,0,1549,1551,
        3,144,72,0,1550,1548,1,0,0,0,1551,1554,1,0,0,0,1552,1550,1,0,0,0,
        1552,1553,1,0,0,0,1553,149,1,0,0,0,1554,1552,1,0,0,0,1555,1558,3,
        144,72,0,1556,1557,5,55,0,0,1557,1559,3,144,72,0,1558,1556,1,0,0,
        0,1558,1559,1,0,0,0,1559,151,1,0,0,0,1560,1565,3,150,75,0,1561,1562,
        5,26,0,0,1562,1564,3,150,75,0,1563,1561,1,0,0,0,1564,1567,1,0,0,
        0,1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,153,1,0,0,0,1567,1565,
        1,0,0,0,1568,1570,7,3,0,0,1569,1568,1,0,0,0,1569,1570,1,0,0,0,1570,
        1573,1,0,0,0,1571,1574,3,788,394,0,1572,1574,3,786,393,0,1573,1571,
        1,0,0,0,1573,1572,1,0,0,0,1574,155,1,0,0,0,1575,1576,3,742,371,0,
        1576,157,1,0,0,0,1577,1580,3,788,394,0,1578,1580,3,144,72,0,1579,
        1577,1,0,0,0,1579,1578,1,0,0,0,1580,159,1,0,0,0,1581,1585,3,706,
        353,0,1582,1585,5,316,0,0,1583,1585,3,144,72,0,1584,1581,1,0,0,0,
        1584,1582,1,0,0,0,1584,1583,1,0,0,0,1585,161,1,0,0,0,1586,1587,3,
        160,80,0,1587,1588,5,30,0,0,1588,1589,3,204,102,0,1589,163,1,0,0,
        0,1590,1591,3,160,80,0,1591,1596,3,204,102,0,1592,1594,5,196,0,0,
        1593,1592,1,0,0,0,1593,1594,1,0,0,0,1594,1595,1,0,0,0,1595,1597,
        5,198,0,0,1596,1593,1,0,0,0,1596,1597,1,0,0,0,1597,1603,1,0,0,0,
        1598,1599,3,204,102,0,1599,1600,5,55,0,0,1600,1601,3,160,80,0,1601,
        1603,1,0,0,0,1602,1590,1,0,0,0,1602,1598,1,0,0,0,1603,165,1,0,0,
        0,1604,1605,3,160,80,0,1605,1606,5,30,0,0,1606,1608,1,0,0,0,1607,
        1604,1,0,0,0,1607,1608,1,0,0,0,1608,1609,1,0,0,0,1609,1610,3,204,
        102,0,1610,167,1,0,0,0,1611,1615,3,166,83,0,1612,1613,5,37,0,0,1613,
        1614,5,63,0,0,1614,1616,5,38,0,0,1615,1612,1,0,0,0,1615,1616,1,0,
        0,0,1616,169,1,0,0,0,1617,1622,3,168,84,0,1618,1619,5,26,0,0,1619,
        1621,3,168,84,0,1620,1618,1,0,0,0,1621,1624,1,0,0,0,1622,1620,1,
        0,0,0,1622,1623,1,0,0,0,1623,171,1,0,0,0,1624,1622,1,0,0,0,1625,
        1626,5,96,0,0,1626,1627,5,27,0,0,1627,1628,3,158,79,0,1628,1629,
        5,26,0,0,1629,1630,3,158,79,0,1630,1631,5,28,0,0,1631,173,1,0,0,
        0,1632,1633,5,208,0,0,1633,1634,5,6,0,0,1634,1635,3,204,102,0,1635,
        1636,5,8,0,0,1636,175,1,0,0,0,1637,1654,5,291,0,0,1638,1650,5,6,
        0,0,1639,1644,3,204,102,0,1640,1641,5,26,0,0,1641,1643,3,204,102,
        0,1642,1640,1,0,0,0,1643,1646,1,0,0,0,1644,1642,1,0,0,0,1644,1645,
        1,0,0,0,1645,1648,1,0,0,0,1646,1644,1,0,0,0,1647,1649,5,26,0,0,1648,
        1647,1,0,0,0,1648,1649,1,0,0,0,1649,1651,1,0,0,0,1650,1639,1,0,0,
        0,1650,1651,1,0,0,0,1651,1652,1,0,0,0,1652,1655,5,8,0,0,1653,1655,
        5,5,0,0,1654,1638,1,0,0,0,1654,1653,1,0,0,0,1655,177,1,0,0,0,1656,
        1673,5,270,0,0,1657,1669,5,6,0,0,1658,1663,3,162,81,0,1659,1660,
        5,26,0,0,1660,1662,3,162,81,0,1661,1659,1,0,0,0,1662,1665,1,0,0,
        0,1663,1661,1,0,0,0,1663,1664,1,0,0,0,1664,1667,1,0,0,0,1665,1663,
        1,0,0,0,1666,1668,5,26,0,0,1667,1666,1,0,0,0,1667,1668,1,0,0,0,1668,
        1670,1,0,0,0,1669,1658,1,0,0,0,1669,1670,1,0,0,0,1670,1671,1,0,0,
        0,1671,1674,5,8,0,0,1672,1674,5,5,0,0,1673,1657,1,0,0,0,1673,1672,
        1,0,0,0,1674,179,1,0,0,0,1675,1676,5,306,0,0,1676,1677,5,6,0,0,1677,
        1682,3,166,83,0,1678,1679,5,26,0,0,1679,1681,3,166,83,0,1680,1678,
        1,0,0,0,1681,1684,1,0,0,0,1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,
        1686,1,0,0,0,1684,1682,1,0,0,0,1685,1687,5,26,0,0,1686,1685,1,0,
        0,0,1686,1687,1,0,0,0,1687,1688,1,0,0,0,1688,1689,5,8,0,0,1689,181,
        1,0,0,0,1690,1691,5,182,0,0,1691,1692,5,6,0,0,1692,1693,3,204,102,
        0,1693,1694,5,8,0,0,1694,183,1,0,0,0,1695,1696,5,269,0,0,1696,1697,
        5,6,0,0,1697,1698,3,204,102,0,1698,1699,5,8,0,0,1699,185,1,0,0,0,
        1700,1701,5,138,0,0,1701,1702,5,6,0,0,1702,1703,3,204,102,0,1703,
        1704,5,8,0,0,1704,187,1,0,0,0,1705,1706,5,106,0,0,1706,1707,5,6,
        0,0,1707,1708,3,204,102,0,1708,1709,5,26,0,0,1709,1710,3,204,102,
        0,1710,1711,5,8,0,0,1711,189,1,0,0,0,1712,1713,5,264,0,0,1713,1714,
        5,6,0,0,1714,1715,3,204,102,0,1715,1716,5,8,0,0,1716,191,1,0,0,0,
        1717,1718,5,119,0,0,1718,1719,5,6,0,0,1719,1724,3,160,80,0,1720,
        1721,5,26,0,0,1721,1723,3,160,80,0,1722,1720,1,0,0,0,1723,1726,1,
        0,0,0,1724,1722,1,0,0,0,1724,1725,1,0,0,0,1725,1728,1,0,0,0,1726,
        1724,1,0,0,0,1727,1729,5,26,0,0,1728,1727,1,0,0,0,1728,1729,1,0,
        0,0,1729,1730,1,0,0,0,1730,1731,5,8,0,0,1731,193,1,0,0,0,1732,1733,
        5,243,0,0,1733,1734,5,6,0,0,1734,1735,3,160,80,0,1735,1736,5,8,0,
        0,1736,195,1,0,0,0,1737,1738,5,281,0,0,1738,1739,5,6,0,0,1739,1740,
        3,204,102,0,1740,1741,5,26,0,0,1741,1742,3,160,80,0,1742,1743,5,
        8,0,0,1743,197,1,0,0,0,1744,1745,5,70,0,0,1745,1746,5,6,0,0,1746,
        1748,5,27,0,0,1747,1749,3,170,85,0,1748,1747,1,0,0,0,1748,1749,1,
        0,0,0,1749,1751,1,0,0,0,1750,1752,5,26,0,0,1751,1750,1,0,0,0,1751,
        1752,1,0,0,0,1752,1757,1,0,0,0,1753,1754,5,43,0,0,1754,1755,3,170,
        85,0,1755,1756,5,42,0,0,1756,1758,1,0,0,0,1757,1753,1,0,0,0,1757,
        1758,1,0,0,0,1758,1759,1,0,0,0,1759,1760,5,28,0,0,1760,1761,5,41,
        0,0,1761,1762,3,204,102,0,1762,1763,5,8,0,0,1763,199,1,0,0,0,1764,
        1778,3,174,87,0,1765,1778,3,176,88,0,1766,1778,3,178,89,0,1767,1778,
        3,180,90,0,1768,1778,3,182,91,0,1769,1778,3,184,92,0,1770,1778,3,
        186,93,0,1771,1778,3,188,94,0,1772,1778,3,190,95,0,1773,1778,3,192,
        96,0,1774,1778,3,194,97,0,1775,1778,3,196,98,0,1776,1778,3,198,99,
        0,1777,1764,1,0,0,0,1777,1765,1,0,0,0,1777,1766,1,0,0,0,1777,1767,
        1,0,0,0,1777,1768,1,0,0,0,1777,1769,1,0,0,0,1777,1770,1,0,0,0,1777,
        1771,1,0,0,0,1777,1772,1,0,0,0,1777,1773,1,0,0,0,1777,1774,1,0,0,
        0,1777,1775,1,0,0,0,1777,1776,1,0,0,0,1778,1782,1,0,0,0,1779,1781,
        5,29,0,0,1780,1779,1,0,0,0,1781,1784,1,0,0,0,1782,1780,1,0,0,0,1782,
        1783,1,0,0,0,1783,201,1,0,0,0,1784,1782,1,0,0,0,1785,1797,3,200,
        100,0,1786,1789,3,172,86,0,1787,1789,3,156,78,0,1788,1786,1,0,0,
        0,1788,1787,1,0,0,0,1789,1793,1,0,0,0,1790,1792,5,29,0,0,1791,1790,
        1,0,0,0,1792,1795,1,0,0,0,1793,1791,1,0,0,0,1793,1794,1,0,0,0,1794,
        1797,1,0,0,0,1795,1793,1,0,0,0,1796,1785,1,0,0,0,1796,1788,1,0,0,
        0,1797,203,1,0,0,0,1798,1801,3,202,101,0,1799,1801,3,144,72,0,1800,
        1798,1,0,0,0,1800,1799,1,0,0,0,1801,205,1,0,0,0,1802,1803,5,316,
        0,0,1803,207,1,0,0,0,1804,1805,5,306,0,0,1805,1806,5,27,0,0,1806,
        1807,3,14,7,0,1807,1808,5,26,0,0,1808,1809,3,14,7,0,1809,1810,5,
        26,0,0,1810,1811,3,14,7,0,1811,1812,5,28,0,0,1812,1828,1,0,0,0,1813,
        1814,5,119,0,0,1814,1815,5,27,0,0,1815,1816,3,14,7,0,1816,1817,5,
        26,0,0,1817,1818,3,14,7,0,1818,1819,5,28,0,0,1819,1828,1,0,0,0,1820,
        1821,5,70,0,0,1821,1822,5,27,0,0,1822,1823,3,14,7,0,1823,1824,5,
        26,0,0,1824,1825,3,14,7,0,1825,1826,5,28,0,0,1826,1828,1,0,0,0,1827,
        1804,1,0,0,0,1827,1813,1,0,0,0,1827,1820,1,0,0,0,1828,209,1,0,0,
        0,1829,1830,5,97,0,0,1830,1831,3,144,72,0,1831,1832,5,55,0,0,1832,
        1835,3,202,101,0,1833,1834,5,2,0,0,1834,1836,3,142,71,0,1835,1833,
        1,0,0,0,1835,1836,1,0,0,0,1836,211,1,0,0,0,1837,1839,5,25,0,0,1838,
        1837,1,0,0,0,1838,1839,1,0,0,0,1839,1840,1,0,0,0,1840,1845,3,724,
        362,0,1841,1842,5,25,0,0,1842,1844,3,724,362,0,1843,1841,1,0,0,0,
        1844,1847,1,0,0,0,1845,1843,1,0,0,0,1845,1846,1,0,0,0,1846,213,1,
        0,0,0,1847,1845,1,0,0,0,1848,1849,5,158,0,0,1849,1850,3,212,106,
        0,1850,1851,5,273,0,0,1851,1852,3,152,76,0,1852,215,1,0,0,0,1853,
        1854,5,130,0,0,1854,1855,3,148,74,0,1855,217,1,0,0,0,1856,1859,3,
        144,72,0,1857,1859,5,116,0,0,1858,1856,1,0,0,0,1858,1857,1,0,0,0,
        1859,1860,1,0,0,0,1860,1862,5,27,0,0,1861,1863,3,112,56,0,1862,1861,
        1,0,0,0,1862,1863,1,0,0,0,1863,1864,1,0,0,0,1864,1865,5,28,0,0,1865,
        219,1,0,0,0,1866,1867,5,65,0,0,1867,1868,3,566,283,0,1868,1869,5,
        118,0,0,1869,1870,5,111,0,0,1870,221,1,0,0,0,1871,1874,5,111,0,0,
        1872,1875,3,218,109,0,1873,1875,3,220,110,0,1874,1872,1,0,0,0,1874,
        1873,1,0,0,0,1875,223,1,0,0,0,1876,1877,5,223,0,0,1877,1878,3,754,
        377,0,1878,1892,3,724,362,0,1879,1880,5,2,0,0,1880,1893,3,226,113,
        0,1881,1882,5,27,0,0,1882,1887,3,226,113,0,1883,1884,5,26,0,0,1884,
        1886,3,226,113,0,1885,1883,1,0,0,0,1886,1889,1,0,0,0,1887,1885,1,
        0,0,0,1887,1888,1,0,0,0,1888,1890,1,0,0,0,1889,1887,1,0,0,0,1890,
        1891,5,28,0,0,1891,1893,1,0,0,0,1892,1879,1,0,0,0,1892,1881,1,0,
        0,0,1892,1893,1,0,0,0,1893,225,1,0,0,0,1894,1900,3,154,77,0,1895,
        1900,3,706,353,0,1896,1900,5,316,0,0,1897,1900,3,784,392,0,1898,
        1900,3,144,72,0,1899,1894,1,0,0,0,1899,1895,1,0,0,0,1899,1896,1,
        0,0,0,1899,1897,1,0,0,0,1899,1898,1,0,0,0,1900,227,1,0,0,0,1901,
        1903,3,14,7,0,1902,1904,7,9,0,0,1903,1902,1,0,0,0,1903,1904,1,0,
        0,0,1904,229,1,0,0,0,1905,1910,3,228,114,0,1906,1907,5,26,0,0,1907,
        1909,3,228,114,0,1908,1906,1,0,0,0,1909,1912,1,0,0,0,1910,1908,1,
        0,0,0,1910,1911,1,0,0,0,1911,231,1,0,0,0,1912,1910,1,0,0,0,1913,
        1919,3,236,118,0,1914,1915,3,238,119,0,1915,1916,3,236,118,0,1916,
        1918,1,0,0,0,1917,1914,1,0,0,0,1918,1921,1,0,0,0,1919,1917,1,0,0,
        0,1919,1920,1,0,0,0,1920,233,1,0,0,0,1921,1919,1,0,0,0,1922,1928,
        3,240,120,0,1923,1924,3,238,119,0,1924,1925,3,236,118,0,1925,1927,
        1,0,0,0,1926,1923,1,0,0,0,1927,1930,1,0,0,0,1928,1926,1,0,0,0,1928,
        1929,1,0,0,0,1929,235,1,0,0,0,1930,1928,1,0,0,0,1931,1937,3,240,
        120,0,1932,1933,5,27,0,0,1933,1934,3,240,120,0,1934,1935,5,28,0,
        0,1935,1937,1,0,0,0,1936,1931,1,0,0,0,1936,1932,1,0,0,0,1937,237,
        1,0,0,0,1938,1940,5,295,0,0,1939,1941,5,48,0,0,1940,1939,1,0,0,0,
        1940,1941,1,0,0,0,1941,1945,1,0,0,0,1942,1945,5,168,0,0,1943,1945,
        5,124,0,0,1944,1938,1,0,0,0,1944,1942,1,0,0,0,1944,1943,1,0,0,0,
        1945,239,1,0,0,0,1946,1953,3,242,121,0,1947,1948,5,181,0,0,1948,
        1951,3,14,7,0,1949,1950,7,10,0,0,1950,1952,3,14,7,0,1951,1949,1,
        0,0,0,1951,1952,1,0,0,0,1952,1954,1,0,0,0,1953,1947,1,0,0,0,1953,
        1954,1,0,0,0,1954,241,1,0,0,0,1955,1957,5,109,0,0,1956,1955,1,0,
        0,0,1956,1957,1,0,0,0,1957,1961,1,0,0,0,1958,1962,3,244,122,0,1959,
        1962,3,250,125,0,1960,1962,3,254,127,0,1961,1958,1,0,0,0,1961,1959,
        1,0,0,0,1961,1960,1,0,0,0,1962,1966,1,0,0,0,1963,1964,5,169,0,0,
        1964,1965,5,246,0,0,1965,1967,3,116,58,0,1966,1963,1,0,0,0,1966,
        1967,1,0,0,0,1967,243,1,0,0,0,1968,1970,5,228,0,0,1969,1971,5,269,
        0,0,1970,1969,1,0,0,0,1970,1971,1,0,0,0,1971,1972,1,0,0,0,1972,1977,
        3,346,173,0,1973,1974,5,26,0,0,1974,1976,3,346,173,0,1975,1973,1,
        0,0,0,1976,1979,1,0,0,0,1977,1975,1,0,0,0,1977,1978,1,0,0,0,1978,
        2001,1,0,0,0,1979,1977,1,0,0,0,1980,1981,5,303,0,0,1981,1984,3,136,
        68,0,1982,1983,5,55,0,0,1983,1985,3,724,362,0,1984,1982,1,0,0,0,
        1984,1985,1,0,0,0,1985,1988,1,0,0,0,1986,1987,5,312,0,0,1987,1989,
        3,248,124,0,1988,1986,1,0,0,0,1988,1989,1,0,0,0,1989,1991,1,0,0,
        0,1990,1992,3,800,400,0,1991,1990,1,0,0,0,1991,1992,1,0,0,0,1992,
        1995,1,0,0,0,1993,1994,5,152,0,0,1994,1996,3,14,7,0,1995,1993,1,
        0,0,0,1995,1996,1,0,0,0,1996,1999,1,0,0,0,1997,1998,5,57,0,0,1998,
        2000,3,314,157,0,1999,1997,1,0,0,0,1999,2000,1,0,0,0,2000,2002,1,
        0,0,0,2001,1980,1,0,0,0,2001,2002,1,0,0,0,2002,245,1,0,0,0,2003,
        2004,3,724,362,0,2004,2005,5,2,0,0,2005,2006,3,14,7,0,2006,247,1,
        0,0,0,2007,2012,3,246,123,0,2008,2009,5,26,0,0,2009,2011,3,246,123,
        0,2010,2008,1,0,0,0,2011,2014,1,0,0,0,2012,2010,1,0,0,0,2012,2013,
        1,0,0,0,2013,249,1,0,0,0,2014,2012,1,0,0,0,2015,2016,5,232,0,0,2016,
        2021,3,346,173,0,2017,2018,5,26,0,0,2018,2020,3,346,173,0,2019,2017,
        1,0,0,0,2020,2023,1,0,0,0,2021,2019,1,0,0,0,2021,2022,1,0,0,0,2022,
        2026,1,0,0,0,2023,2021,1,0,0,0,2024,2025,5,225,0,0,2025,2027,3,230,
        115,0,2026,2024,1,0,0,0,2026,2027,1,0,0,0,2027,2028,1,0,0,0,2028,
        2029,5,204,0,0,2029,2030,3,124,62,0,2030,2032,5,303,0,0,2031,2033,
        5,48,0,0,2032,2031,1,0,0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,2034,
        2037,3,136,68,0,2035,2036,5,55,0,0,2036,2038,3,724,362,0,2037,2035,
        1,0,0,0,2037,2038,1,0,0,0,2038,2040,1,0,0,0,2039,2041,3,800,400,
        0,2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,2044,1,0,0,0,2042,2043,
        5,152,0,0,2043,2045,3,14,7,0,2044,2042,1,0,0,0,2044,2045,1,0,0,0,
        2045,2048,1,0,0,0,2046,2047,5,57,0,0,2047,2049,3,314,157,0,2048,
        2046,1,0,0,0,2048,2049,1,0,0,0,2049,251,1,0,0,0,2050,2052,7,11,0,
        0,2051,2050,1,0,0,0,2051,2052,1,0,0,0,2052,253,1,0,0,0,2053,2054,
        5,142,0,0,2054,2056,3,338,169,0,2055,2053,1,0,0,0,2055,2056,1,0,
        0,0,2056,2057,1,0,0,0,2057,2059,5,262,0,0,2058,2060,5,269,0,0,2059,
        2058,1,0,0,0,2059,2060,1,0,0,0,2060,2061,1,0,0,0,2061,2062,3,252,
        126,0,2062,2067,3,336,168,0,2063,2064,5,26,0,0,2064,2066,3,336,168,
        0,2065,2063,1,0,0,0,2066,2069,1,0,0,0,2067,2065,1,0,0,0,2067,2068,
        1,0,0,0,2068,2071,1,0,0,0,2069,2067,1,0,0,0,2070,2072,5,26,0,0,2071,
        2070,1,0,0,0,2071,2072,1,0,0,0,2072,2075,1,0,0,0,2073,2074,5,313,
        0,0,2074,2076,3,126,63,0,2075,2073,1,0,0,0,2075,2076,1,0,0,0,2076,
        2079,1,0,0,0,2077,2078,5,142,0,0,2078,2080,3,338,169,0,2079,2077,
        1,0,0,0,2079,2080,1,0,0,0,2080,2082,1,0,0,0,2081,2083,3,800,400,
        0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2085,1,0,0,0,2084,2086,
        3,318,159,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2089,1,0,0,
        0,2087,2088,5,152,0,0,2088,2090,3,14,7,0,2089,2087,1,0,0,0,2089,
        2090,1,0,0,0,2090,2092,1,0,0,0,2091,2093,3,664,332,0,2092,2091,1,
        0,0,0,2092,2093,1,0,0,0,2093,2095,1,0,0,0,2094,2096,3,316,158,0,
        2095,2094,1,0,0,0,2095,2096,1,0,0,0,2096,255,1,0,0,0,2097,2098,5,
        187,0,0,2098,2100,5,27,0,0,2099,2101,3,678,339,0,2100,2099,1,0,0,
        0,2100,2101,1,0,0,0,2101,2103,1,0,0,0,2102,2104,3,314,157,0,2103,
        2102,1,0,0,0,2103,2104,1,0,0,0,2104,2106,1,0,0,0,2105,2107,3,262,
        131,0,2106,2105,1,0,0,0,2106,2107,1,0,0,0,2107,2109,1,0,0,0,2108,
        2110,3,258,129,0,2109,2108,1,0,0,0,2109,2110,1,0,0,0,2110,2111,1,
        0,0,0,2111,2112,3,268,134,0,2112,2113,5,28,0,0,2113,257,1,0,0,0,
        2114,2115,5,205,0,0,2115,2116,5,255,0,0,2116,2117,5,220,0,0,2117,
        2126,5,185,0,0,2118,2119,5,48,0,0,2119,2120,5,256,0,0,2120,2121,
        5,220,0,0,2121,2123,5,185,0,0,2122,2124,3,260,130,0,2123,2122,1,
        0,0,0,2123,2124,1,0,0,0,2124,2126,1,0,0,0,2125,2114,1,0,0,0,2125,
        2118,1,0,0,0,2126,259,1,0,0,0,2127,2128,5,266,0,0,2128,2129,5,115,
        0,0,2129,2137,5,186,0,0,2130,2131,5,203,0,0,2131,2132,5,115,0,0,
        2132,2137,5,186,0,0,2133,2134,5,312,0,0,2134,2135,5,298,0,0,2135,
        2137,5,256,0,0,2136,2127,1,0,0,0,2136,2130,1,0,0,0,2136,2133,1,0,
        0,0,2137,261,1,0,0,0,2138,2139,5,188,0,0,2139,2140,3,264,132,0,2140,
        263,1,0,0,0,2141,2146,3,266,133,0,2142,2143,5,26,0,0,2143,2145,3,
        266,133,0,2144,2142,1,0,0,0,2145,2148,1,0,0,0,2146,2144,1,0,0,0,
        2146,2147,1,0,0,0,2147,265,1,0,0,0,2148,2146,1,0,0,0,2149,2150,3,
        14,7,0,2150,2151,5,55,0,0,2151,2152,3,724,362,0,2152,267,1,0,0,0,
        2153,2154,5,47,0,0,2154,2155,5,185,0,0,2155,2157,3,270,135,0,2156,
        2153,1,0,0,0,2156,2157,1,0,0,0,2157,2159,1,0,0,0,2158,2160,3,274,
        137,0,2159,2158,1,0,0,0,2159,2160,1,0,0,0,2160,2161,1,0,0,0,2161,
        2162,5,219,0,0,2162,2163,5,27,0,0,2163,2164,3,276,138,0,2164,2166,
        5,28,0,0,2165,2167,3,290,145,0,2166,2165,1,0,0,0,2166,2167,1,0,0,
        0,2167,2168,1,0,0,0,2168,2169,5,101,0,0,2169,2170,3,302,151,0,2170,
        269,1,0,0,0,2171,2172,5,267,0,0,2172,2173,5,286,0,0,2173,2174,5,
        194,0,0,2174,2191,5,255,0,0,2175,2176,5,267,0,0,2176,2177,5,218,
        0,0,2177,2178,5,177,0,0,2178,2191,5,255,0,0,2179,2180,5,267,0,0,
        2180,2181,5,286,0,0,2181,2182,5,136,0,0,2182,2191,3,272,136,0,2183,
        2184,5,267,0,0,2184,2185,5,286,0,0,2185,2186,5,177,0,0,2186,2191,
        3,272,136,0,2187,2188,5,267,0,0,2188,2189,5,286,0,0,2189,2191,3,
        272,136,0,2190,2171,1,0,0,0,2190,2175,1,0,0,0,2190,2179,1,0,0,0,
        2190,2183,1,0,0,0,2190,2187,1,0,0,0,2191,271,1,0,0,0,2192,2193,3,
        312,156,0,2193,273,1,0,0,0,2194,2195,7,12,0,0,2195,275,1,0,0,0,2196,
        2201,3,278,139,0,2197,2198,5,13,0,0,2198,2200,3,278,139,0,2199,2197,
        1,0,0,0,2200,2203,1,0,0,0,2201,2199,1,0,0,0,2201,2202,1,0,0,0,2202,
        277,1,0,0,0,2203,2201,1,0,0,0,2204,2206,3,280,140,0,2205,2204,1,
        0,0,0,2206,2207,1,0,0,0,2207,2205,1,0,0,0,2207,2208,1,0,0,0,2208,
        279,1,0,0,0,2209,2211,3,284,142,0,2210,2212,3,282,141,0,2211,2210,
        1,0,0,0,2211,2212,1,0,0,0,2212,281,1,0,0,0,2213,2215,5,20,0,0,2214,
        2216,5,29,0,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2242,1,0,
        0,0,2217,2219,5,17,0,0,2218,2220,5,29,0,0,2219,2218,1,0,0,0,2219,
        2220,1,0,0,0,2220,2242,1,0,0,0,2221,2223,5,29,0,0,2222,2224,5,29,
        0,0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2242,1,0,0,0,2225,2227,
        5,37,0,0,2226,2228,3,788,394,0,2227,2226,1,0,0,0,2227,2228,1,0,0,
        0,2228,2229,1,0,0,0,2229,2231,5,26,0,0,2230,2232,3,788,394,0,2231,
        2230,1,0,0,0,2231,2232,1,0,0,0,2232,2233,1,0,0,0,2233,2235,5,38,
        0,0,2234,2236,5,29,0,0,2235,2234,1,0,0,0,2235,2236,1,0,0,0,2236,
        2242,1,0,0,0,2237,2238,5,37,0,0,2238,2239,3,788,394,0,2239,2240,
        5,38,0,0,2240,2242,1,0,0,0,2241,2213,1,0,0,0,2241,2217,1,0,0,0,2241,
        2221,1,0,0,0,2241,2225,1,0,0,0,2241,2237,1,0,0,0,2242,283,1,0,0,
        0,2243,2259,3,286,143,0,2244,2259,5,33,0,0,2245,2259,5,39,0,0,2246,
        2248,5,27,0,0,2247,2249,3,276,138,0,2248,2247,1,0,0,0,2248,2249,
        1,0,0,0,2249,2250,1,0,0,0,2250,2259,5,28,0,0,2251,2252,5,37,0,0,
        2252,2253,5,18,0,0,2253,2254,3,276,138,0,2254,2255,5,18,0,0,2255,
        2256,5,38,0,0,2256,2259,1,0,0,0,2257,2259,3,288,144,0,2258,2243,
        1,0,0,0,2258,2244,1,0,0,0,2258,2245,1,0,0,0,2258,2246,1,0,0,0,2258,
        2251,1,0,0,0,2258,2257,1,0,0,0,2259,285,1,0,0,0,2260,2261,3,312,
        156,0,2261,287,1,0,0,0,2262,2263,5,221,0,0,2263,2264,5,27,0,0,2264,
        2269,3,276,138,0,2265,2266,5,26,0,0,2266,2268,3,276,138,0,2267,2265,
        1,0,0,0,2268,2271,1,0,0,0,2269,2267,1,0,0,0,2269,2270,1,0,0,0,2270,
        2272,1,0,0,0,2271,2269,1,0,0,0,2272,2273,5,28,0,0,2273,289,1,0,0,
        0,2274,2275,5,272,0,0,2275,2276,3,292,146,0,2276,291,1,0,0,0,2277,
        2282,3,294,147,0,2278,2279,5,26,0,0,2279,2281,3,294,147,0,2280,2278,
        1,0,0,0,2281,2284,1,0,0,0,2282,2280,1,0,0,0,2282,2283,1,0,0,0,2283,
        293,1,0,0,0,2284,2282,1,0,0,0,2285,2286,3,296,148,0,2286,2287,5,
        2,0,0,2287,2288,5,27,0,0,2288,2289,3,298,149,0,2289,2290,5,28,0,
        0,2290,295,1,0,0,0,2291,2292,3,312,156,0,2292,297,1,0,0,0,2293,2298,
        3,300,150,0,2294,2295,5,26,0,0,2295,2297,3,300,150,0,2296,2294,1,
        0,0,0,2297,2300,1,0,0,0,2298,2296,1,0,0,0,2298,2299,1,0,0,0,2299,
        299,1,0,0,0,2300,2298,1,0,0,0,2301,2302,3,312,156,0,2302,301,1,0,
        0,0,2303,2308,3,304,152,0,2304,2305,5,26,0,0,2305,2307,3,304,152,
        0,2306,2304,1,0,0,0,2307,2310,1,0,0,0,2308,2306,1,0,0,0,2308,2309,
        1,0,0,0,2309,303,1,0,0,0,2310,2308,1,0,0,0,2311,2312,3,306,153,0,
        2312,2313,5,55,0,0,2313,2314,3,308,154,0,2314,305,1,0,0,0,2315,2316,
        3,312,156,0,2316,307,1,0,0,0,2317,2318,3,310,155,0,2318,309,1,0,
        0,0,2319,2320,3,14,7,0,2320,311,1,0,0,0,2321,2322,3,704,352,0,2322,
        313,1,0,0,0,2323,2324,5,210,0,0,2324,2325,5,69,0,0,2325,2326,3,230,
        115,0,2326,315,1,0,0,0,2327,2329,5,57,0,0,2328,2327,1,0,0,0,2328,
        2329,1,0,0,0,2329,2330,1,0,0,0,2330,2331,3,314,157,0,2331,317,1,
        0,0,0,2332,2334,5,148,0,0,2333,2335,5,80,0,0,2334,2333,1,0,0,0,2334,
        2335,1,0,0,0,2335,2336,1,0,0,0,2336,2337,5,69,0,0,2337,2338,3,252,
        126,0,2338,2341,3,320,160,0,2339,2340,5,312,0,0,2340,2342,3,724,
        362,0,2341,2339,1,0,0,0,2341,2342,1,0,0,0,2342,319,1,0,0,0,2343,
        2348,3,322,161,0,2344,2345,5,26,0,0,2345,2347,3,322,161,0,2346,2344,
        1,0,0,0,2347,2350,1,0,0,0,2348,2346,1,0,0,0,2348,2349,1,0,0,0,2349,
        321,1,0,0,0,2350,2348,1,0,0,0,2351,2357,3,324,162,0,2352,2357,3,
        328,164,0,2353,2357,3,330,165,0,2354,2357,3,332,166,0,2355,2357,
        3,334,167,0,2356,2351,1,0,0,0,2356,2352,1,0,0,0,2356,2353,1,0,0,
        0,2356,2354,1,0,0,0,2356,2355,1,0,0,0,2357,323,1,0,0,0,2358,2359,
        3,128,64,0,2359,325,1,0,0,0,2360,2365,3,324,162,0,2361,2362,5,26,
        0,0,2362,2364,3,324,162,0,2363,2361,1,0,0,0,2364,2367,1,0,0,0,2365,
        2363,1,0,0,0,2365,2366,1,0,0,0,2366,327,1,0,0,0,2367,2365,1,0,0,
        0,2368,2369,5,254,0,0,2369,2370,5,27,0,0,2370,2371,3,326,163,0,2371,
        2372,5,28,0,0,2372,329,1,0,0,0,2373,2374,5,89,0,0,2374,2375,5,27,
        0,0,2375,2376,3,326,163,0,2376,2377,5,28,0,0,2377,331,1,0,0,0,2378,
        2379,5,149,0,0,2379,2380,5,265,0,0,2380,2381,5,27,0,0,2381,2382,
        3,320,160,0,2382,2383,5,28,0,0,2383,333,1,0,0,0,2384,2385,5,153,
        0,0,2385,2386,5,27,0,0,2386,2387,3,14,7,0,2387,2388,5,26,0,0,2388,
        2389,3,14,7,0,2389,2390,5,26,0,0,2390,2391,3,14,7,0,2391,2392,5,
        26,0,0,2392,2393,3,14,7,0,2393,2394,5,28,0,0,2394,335,1,0,0,0,2395,
        2396,3,748,374,0,2396,2397,5,20,0,0,2397,2405,1,0,0,0,2398,2402,
        3,14,7,0,2399,2400,5,55,0,0,2400,2403,3,726,363,0,2401,2403,3,744,
        372,0,2402,2399,1,0,0,0,2402,2401,1,0,0,0,2402,2403,1,0,0,0,2403,
        2405,1,0,0,0,2404,2395,1,0,0,0,2404,2398,1,0,0,0,2405,337,1,0,0,
        0,2406,2408,5,53,0,0,2407,2406,1,0,0,0,2407,2408,1,0,0,0,2408,2409,
        1,0,0,0,2409,2420,3,344,172,0,2410,2412,3,358,179,0,2411,2413,5,
        53,0,0,2412,2411,1,0,0,0,2412,2413,1,0,0,0,2413,2414,1,0,0,0,2414,
        2416,3,344,172,0,2415,2417,3,360,180,0,2416,2415,1,0,0,0,2416,2417,
        1,0,0,0,2417,2419,1,0,0,0,2418,2410,1,0,0,0,2419,2422,1,0,0,0,2420,
        2418,1,0,0,0,2420,2421,1,0,0,0,2421,339,1,0,0,0,2422,2420,1,0,0,
        0,2423,2426,3,120,60,0,2424,2425,5,55,0,0,2425,2427,3,724,362,0,
        2426,2424,1,0,0,0,2426,2427,1,0,0,0,2427,341,1,0,0,0,2428,2437,3,
        340,170,0,2429,2430,5,27,0,0,2430,2432,3,130,65,0,2431,2433,5,26,
        0,0,2432,2431,1,0,0,0,2432,2433,1,0,0,0,2433,2434,1,0,0,0,2434,2435,
        5,28,0,0,2435,2437,1,0,0,0,2436,2428,1,0,0,0,2436,2429,1,0,0,0,2437,
        343,1,0,0,0,2438,2448,3,346,173,0,2439,2446,5,137,0,0,2440,2442,
        7,13,0,0,2441,2440,1,0,0,0,2441,2442,1,0,0,0,2442,2443,1,0,0,0,2443,
        2444,5,69,0,0,2444,2447,3,342,171,0,2445,2447,5,78,0,0,2446,2441,
        1,0,0,0,2446,2445,1,0,0,0,2447,2449,1,0,0,0,2448,2439,1,0,0,0,2448,
        2449,1,0,0,0,2449,345,1,0,0,0,2450,2452,3,348,174,0,2451,2453,3,
        256,128,0,2452,2451,1,0,0,0,2452,2453,1,0,0,0,2453,2462,1,0,0,0,
        2454,2455,5,55,0,0,2455,2458,3,724,362,0,2456,2458,3,744,372,0,2457,
        2454,1,0,0,0,2457,2456,1,0,0,0,2458,2460,1,0,0,0,2459,2461,3,114,
        57,0,2460,2459,1,0,0,0,2460,2461,1,0,0,0,2461,2463,1,0,0,0,2462,
        2457,1,0,0,0,2462,2463,1,0,0,0,2463,2466,1,0,0,0,2464,2467,3,350,
        175,0,2465,2467,3,352,176,0,2466,2464,1,0,0,0,2466,2465,1,0,0,0,
        2466,2467,1,0,0,0,2467,347,1,0,0,0,2468,2478,3,572,286,0,2469,2470,
        5,27,0,0,2470,2471,3,232,116,0,2471,2472,5,28,0,0,2472,2478,1,0,
        0,0,2473,2474,5,27,0,0,2474,2475,3,370,185,0,2475,2476,5,28,0,0,
        2476,2478,1,0,0,0,2477,2468,1,0,0,0,2477,2469,1,0,0,0,2477,2473,
        1,0,0,0,2478,349,1,0,0,0,2479,2480,5,257,0,0,2480,2481,3,14,7,0,
        2481,351,1,0,0,0,2482,2483,5,279,0,0,2483,2484,3,354,177,0,2484,
        2485,5,27,0,0,2485,2486,3,14,7,0,2486,2488,5,28,0,0,2487,2489,3,
        356,178,0,2488,2487,1,0,0,0,2488,2489,1,0,0,0,2489,353,1,0,0,0,2490,
        2491,7,14,0,0,2491,355,1,0,0,0,2492,2493,5,239,0,0,2493,2494,5,27,
        0,0,2494,2495,3,14,7,0,2495,2496,5,28,0,0,2496,357,1,0,0,0,2497,
        2522,5,26,0,0,2498,2500,5,193,0,0,2499,2498,1,0,0,0,2499,2500,1,
        0,0,0,2500,2518,1,0,0,0,2501,2503,5,178,0,0,2502,2504,7,15,0,0,2503,
        2502,1,0,0,0,2503,2504,1,0,0,0,2504,2512,1,0,0,0,2505,2507,5,251,
        0,0,2506,2508,7,15,0,0,2507,2506,1,0,0,0,2507,2508,1,0,0,0,2508,
        2512,1,0,0,0,2509,2512,5,126,0,0,2510,2512,5,143,0,0,2511,2501,1,
        0,0,0,2511,2505,1,0,0,0,2511,2509,1,0,0,0,2511,2510,1,0,0,0,2511,
        2512,1,0,0,0,2512,2514,1,0,0,0,2513,2515,5,212,0,0,2514,2513,1,0,
        0,0,2514,2515,1,0,0,0,2515,2519,1,0,0,0,2516,2519,5,165,0,0,2517,
        2519,5,88,0,0,2518,2511,1,0,0,0,2518,2516,1,0,0,0,2518,2517,1,0,
        0,0,2519,2520,1,0,0,0,2520,2522,5,172,0,0,2521,2497,1,0,0,0,2521,
        2499,1,0,0,0,2522,359,1,0,0,0,2523,2524,5,204,0,0,2524,2528,3,14,
        7,0,2525,2526,5,303,0,0,2526,2528,3,118,59,0,2527,2523,1,0,0,0,2527,
        2525,1,0,0,0,2528,361,1,0,0,0,2529,2539,5,248,0,0,2530,2540,5,20,
        0,0,2531,2536,3,724,362,0,2532,2533,5,26,0,0,2533,2535,3,724,362,
        0,2534,2532,1,0,0,0,2535,2538,1,0,0,0,2536,2534,1,0,0,0,2536,2537,
        1,0,0,0,2537,2540,1,0,0,0,2538,2536,1,0,0,0,2539,2530,1,0,0,0,2539,
        2531,1,0,0,0,2540,363,1,0,0,0,2541,2554,5,166,0,0,2542,2543,5,166,
        0,0,2543,2544,5,209,0,0,2544,2554,5,44,0,0,2545,2546,5,166,0,0,2546,
        2547,5,209,0,0,2547,2554,5,249,0,0,2548,2549,5,166,0,0,2549,2550,
        5,209,0,0,2550,2554,5,155,0,0,2551,2554,5,300,0,0,2552,2554,5,240,
        0,0,2553,2541,1,0,0,0,2553,2542,1,0,0,0,2553,2545,1,0,0,0,2553,2548,
        1,0,0,0,2553,2551,1,0,0,0,2553,2552,1,0,0,0,2554,2555,1,0,0,0,2555,
        2556,5,169,0,0,2556,2557,3,588,294,0,2557,2559,3,368,184,0,2558,
        2560,3,362,181,0,2559,2558,1,0,0,0,2559,2560,1,0,0,0,2560,365,1,
        0,0,0,2561,2573,5,166,0,0,2562,2563,5,166,0,0,2563,2564,5,209,0,
        0,2564,2573,5,44,0,0,2565,2566,5,166,0,0,2566,2567,5,209,0,0,2567,
        2573,5,249,0,0,2568,2569,5,166,0,0,2569,2570,5,209,0,0,2570,2573,
        5,155,0,0,2571,2573,5,240,0,0,2572,2561,1,0,0,0,2572,2562,1,0,0,
        0,2572,2565,1,0,0,0,2572,2568,1,0,0,0,2572,2571,1,0,0,0,2573,2574,
        1,0,0,0,2574,2575,5,169,0,0,2575,2576,3,588,294,0,2576,2577,3,368,
        184,0,2577,367,1,0,0,0,2578,2580,3,114,57,0,2579,2578,1,0,0,0,2579,
        2580,1,0,0,0,2580,2581,1,0,0,0,2581,2585,3,372,186,0,2582,2583,5,
        98,0,0,2583,2585,5,305,0,0,2584,2579,1,0,0,0,2584,2582,1,0,0,0,2585,
        369,1,0,0,0,2586,2587,5,305,0,0,2587,2588,3,374,187,0,2588,371,1,
        0,0,0,2589,2592,3,370,185,0,2590,2592,3,232,116,0,2591,2589,1,0,
        0,0,2591,2590,1,0,0,0,2592,373,1,0,0,0,2593,2598,3,376,188,0,2594,
        2595,5,26,0,0,2595,2597,3,376,188,0,2596,2594,1,0,0,0,2597,2600,
        1,0,0,0,2598,2596,1,0,0,0,2598,2599,1,0,0,0,2599,375,1,0,0,0,2600,
        2598,1,0,0,0,2601,2602,5,27,0,0,2602,2603,3,112,56,0,2603,2604,5,
        28,0,0,2604,377,1,0,0,0,2605,2608,3,112,56,0,2606,2608,3,232,116,
        0,2607,2605,1,0,0,0,2607,2606,1,0,0,0,2608,379,1,0,0,0,2609,2612,
        5,87,0,0,2610,2611,5,209,0,0,2611,2613,5,240,0,0,2612,2610,1,0,0,
        0,2612,2613,1,0,0,0,2613,2614,1,0,0,0,2614,2615,5,131,0,0,2615,2616,
        5,94,0,0,2616,2620,5,268,0,0,2617,2618,5,154,0,0,2618,2619,5,196,
        0,0,2619,2621,5,128,0,0,2620,2617,1,0,0,0,2620,2621,1,0,0,0,2621,
        2622,1,0,0,0,2622,2623,3,582,291,0,2623,2624,3,426,213,0,2624,381,
        1,0,0,0,2625,2626,5,49,0,0,2626,2627,5,131,0,0,2627,2628,5,94,0,
        0,2628,2629,5,268,0,0,2629,2630,3,582,291,0,2630,2635,3,384,192,
        0,2631,2632,5,26,0,0,2632,2634,3,384,192,0,2633,2631,1,0,0,0,2634,
        2637,1,0,0,0,2635,2633,1,0,0,0,2635,2636,1,0,0,0,2636,383,1,0,0,
        0,2637,2635,1,0,0,0,2638,2642,3,456,228,0,2639,2642,3,458,229,0,
        2640,2642,3,460,230,0,2641,2638,1,0,0,0,2641,2639,1,0,0,0,2641,2640,
        1,0,0,0,2642,385,1,0,0,0,2643,2644,5,112,0,0,2644,2645,5,131,0,0,
        2645,2646,5,94,0,0,2646,2649,5,268,0,0,2647,2648,5,154,0,0,2648,
        2650,5,128,0,0,2649,2647,1,0,0,0,2649,2650,1,0,0,0,2650,2651,1,0,
        0,0,2651,2652,3,582,291,0,2652,387,1,0,0,0,2653,2654,5,87,0,0,2654,
        2655,5,307,0,0,2655,2656,3,582,291,0,2656,2657,3,426,213,0,2657,
        2658,5,55,0,0,2658,2659,3,232,116,0,2659,389,1,0,0,0,2660,2661,5,
        112,0,0,2661,2662,5,307,0,0,2662,2663,3,582,291,0,2663,391,1,0,0,
        0,2664,2665,5,300,0,0,2665,2666,5,200,0,0,2666,2667,3,582,291,0,
        2667,2668,5,27,0,0,2668,2669,5,292,0,0,2669,2670,3,416,208,0,2670,
        2672,5,28,0,0,2671,2673,3,396,198,0,2672,2671,1,0,0,0,2672,2673,
        1,0,0,0,2673,393,1,0,0,0,2674,2675,5,87,0,0,2675,2679,5,200,0,0,
        2676,2677,5,154,0,0,2677,2678,5,196,0,0,2678,2680,5,128,0,0,2679,
        2676,1,0,0,0,2679,2680,1,0,0,0,2680,2681,1,0,0,0,2681,2682,3,582,
        291,0,2682,2683,5,27,0,0,2683,2684,5,292,0,0,2684,2685,3,416,208,
        0,2685,2687,5,28,0,0,2686,2688,3,396,198,0,2687,2686,1,0,0,0,2687,
        2688,1,0,0,0,2688,395,1,0,0,0,2689,2690,5,312,0,0,2690,2691,3,414,
        207,0,2691,397,1,0,0,0,2692,2693,5,49,0,0,2693,2694,5,200,0,0,2694,
        2695,3,582,291,0,2695,2696,5,27,0,0,2696,2697,5,292,0,0,2697,2698,
        3,416,208,0,2698,2699,5,28,0,0,2699,2700,3,400,200,0,2700,399,1,
        0,0,0,2701,2702,5,264,0,0,2702,2703,3,414,207,0,2703,401,1,0,0,0,
        2704,2705,5,112,0,0,2705,2708,5,200,0,0,2706,2707,5,154,0,0,2707,
        2709,5,128,0,0,2708,2706,1,0,0,0,2708,2709,1,0,0,0,2709,2710,1,0,
        0,0,2710,2711,3,582,291,0,2711,2712,5,27,0,0,2712,2713,5,292,0,0,
        2713,2714,3,416,208,0,2714,2716,5,28,0,0,2715,2717,3,404,202,0,2716,
        2715,1,0,0,0,2716,2717,1,0,0,0,2717,403,1,0,0,0,2718,2719,5,312,
        0,0,2719,2720,3,414,207,0,2720,405,1,0,0,0,2721,2725,3,752,376,0,
        2722,2725,3,144,72,0,2723,2725,5,316,0,0,2724,2721,1,0,0,0,2724,
        2722,1,0,0,0,2724,2723,1,0,0,0,2725,407,1,0,0,0,2726,2727,3,726,
        363,0,2727,2728,5,2,0,0,2728,2729,3,406,203,0,2729,409,1,0,0,0,2730,
        2731,3,726,363,0,2731,411,1,0,0,0,2732,2735,3,408,204,0,2733,2735,
        3,410,205,0,2734,2732,1,0,0,0,2734,2733,1,0,0,0,2735,413,1,0,0,0,
        2736,2749,3,412,206,0,2737,2738,5,27,0,0,2738,2743,3,412,206,0,2739,
        2740,5,26,0,0,2740,2742,3,412,206,0,2741,2739,1,0,0,0,2742,2745,
        1,0,0,0,2743,2741,1,0,0,0,2743,2744,1,0,0,0,2744,2746,1,0,0,0,2745,
        2743,1,0,0,0,2746,2747,5,28,0,0,2747,2749,1,0,0,0,2748,2736,1,0,
        0,0,2748,2737,1,0,0,0,2749,415,1,0,0,0,2750,2751,3,726,363,0,2751,
        417,1,0,0,0,2752,2755,5,87,0,0,2753,2754,5,209,0,0,2754,2756,5,240,
        0,0,2755,2753,1,0,0,0,2755,2756,1,0,0,0,2756,2765,1,0,0,0,2757,2766,
        5,277,0,0,2758,2766,5,280,0,0,2759,2760,5,131,0,0,2760,2766,5,277,
        0,0,2761,2762,5,282,0,0,2762,2766,5,277,0,0,2763,2764,5,283,0,0,
        2764,2766,5,277,0,0,2765,2757,1,0,0,0,2765,2758,1,0,0,0,2765,2759,
        1,0,0,0,2765,2761,1,0,0,0,2765,2763,1,0,0,0,2766,2770,1,0,0,0,2767,
        2768,5,154,0,0,2768,2769,5,196,0,0,2769,2771,5,128,0,0,2770,2767,
        1,0,0,0,2770,2771,1,0,0,0,2771,2772,1,0,0,0,2772,2773,3,586,293,
        0,2773,2774,5,27,0,0,2774,2779,3,420,210,0,2775,2776,5,26,0,0,2776,
        2778,3,420,210,0,2777,2775,1,0,0,0,2778,2781,1,0,0,0,2779,2777,1,
        0,0,0,2779,2780,1,0,0,0,2780,2783,1,0,0,0,2781,2779,1,0,0,0,2782,
        2784,5,26,0,0,2783,2782,1,0,0,0,2783,2784,1,0,0,0,2784,2785,1,0,
        0,0,2785,2787,5,28,0,0,2786,2788,3,422,211,0,2787,2786,1,0,0,0,2787,
        2788,1,0,0,0,2788,2790,1,0,0,0,2789,2791,3,424,212,0,2790,2789,1,
        0,0,0,2790,2791,1,0,0,0,2791,2793,1,0,0,0,2792,2794,3,426,213,0,
        2793,2792,1,0,0,0,2793,2794,1,0,0,0,2794,2796,1,0,0,0,2795,2797,
        3,428,214,0,2796,2795,1,0,0,0,2796,2797,1,0,0,0,2797,2799,1,0,0,
        0,2798,2800,3,432,216,0,2799,2798,1,0,0,0,2799,2800,1,0,0,0,2800,
        419,1,0,0,0,2801,2808,3,476,238,0,2802,2808,3,484,242,0,2803,2808,
        3,486,243,0,2804,2808,3,508,254,0,2805,2808,3,494,247,0,2806,2808,
        3,728,364,0,2807,2801,1,0,0,0,2807,2802,1,0,0,0,2807,2803,1,0,0,
        0,2807,2804,1,0,0,0,2807,2805,1,0,0,0,2807,2806,1,0,0,0,2808,421,
        1,0,0,0,2809,2810,5,162,0,0,2810,2811,5,27,0,0,2811,2816,3,584,292,
        0,2812,2813,5,26,0,0,2813,2815,3,584,292,0,2814,2812,1,0,0,0,2815,
        2818,1,0,0,0,2816,2814,1,0,0,0,2816,2817,1,0,0,0,2817,2819,1,0,0,
        0,2818,2816,1,0,0,0,2819,2820,5,28,0,0,2820,423,1,0,0,0,2821,2822,
        5,215,0,0,2822,2823,5,69,0,0,2823,2824,5,151,0,0,2824,2825,3,114,
        57,0,2825,425,1,0,0,0,2826,2827,5,312,0,0,2827,2828,5,27,0,0,2828,
        2833,3,430,215,0,2829,2830,5,26,0,0,2830,2832,3,430,215,0,2831,2829,
        1,0,0,0,2832,2835,1,0,0,0,2833,2831,1,0,0,0,2833,2834,1,0,0,0,2834,
        2836,1,0,0,0,2835,2833,1,0,0,0,2836,2837,5,28,0,0,2837,427,1,0,0,
        0,2838,2839,5,280,0,0,2839,2840,3,584,292,0,2840,429,1,0,0,0,2841,
        2842,3,724,362,0,2842,2843,5,2,0,0,2843,2844,3,506,253,0,2844,431,
        1,0,0,0,2845,2846,5,55,0,0,2846,2847,3,372,186,0,2847,433,1,0,0,
        0,2848,2849,5,49,0,0,2849,2850,5,277,0,0,2850,2851,3,586,293,0,2851,
        2856,3,436,218,0,2852,2853,5,26,0,0,2853,2855,3,436,218,0,2854,2852,
        1,0,0,0,2855,2858,1,0,0,0,2856,2854,1,0,0,0,2856,2857,1,0,0,0,2857,
        435,1,0,0,0,2858,2856,1,0,0,0,2859,2875,3,446,223,0,2860,2875,3,
        448,224,0,2861,2875,3,450,225,0,2862,2875,3,452,226,0,2863,2875,
        3,454,227,0,2864,2875,3,456,228,0,2865,2875,3,458,229,0,2866,2875,
        3,460,230,0,2867,2875,3,462,231,0,2868,2875,3,464,232,0,2869,2875,
        3,466,233,0,2870,2875,3,470,235,0,2871,2875,3,472,236,0,2872,2875,
        3,474,237,0,2873,2875,3,468,234,0,2874,2859,1,0,0,0,2874,2860,1,
        0,0,0,2874,2861,1,0,0,0,2874,2862,1,0,0,0,2874,2863,1,0,0,0,2874,
        2864,1,0,0,0,2874,2865,1,0,0,0,2874,2866,1,0,0,0,2874,2867,1,0,0,
        0,2874,2868,1,0,0,0,2874,2869,1,0,0,0,2874,2870,1,0,0,0,2874,2871,
        1,0,0,0,2874,2872,1,0,0,0,2874,2873,1,0,0,0,2875,437,1,0,0,0,2876,
        2877,5,49,0,0,2877,2878,5,131,0,0,2878,2879,5,277,0,0,2879,2880,
        3,586,293,0,2880,2885,3,440,220,0,2881,2882,5,26,0,0,2882,2884,3,
        440,220,0,2883,2881,1,0,0,0,2884,2887,1,0,0,0,2885,2883,1,0,0,0,
        2885,2886,1,0,0,0,2886,439,1,0,0,0,2887,2885,1,0,0,0,2888,2894,3,
        446,223,0,2889,2894,3,448,224,0,2890,2894,3,456,228,0,2891,2894,
        3,458,229,0,2892,2894,3,460,230,0,2893,2888,1,0,0,0,2893,2889,1,
        0,0,0,2893,2890,1,0,0,0,2893,2891,1,0,0,0,2893,2892,1,0,0,0,2894,
        441,1,0,0,0,2895,2896,5,49,0,0,2896,2897,5,280,0,0,2897,2898,3,582,
        291,0,2898,2903,3,444,222,0,2899,2900,5,26,0,0,2900,2902,3,444,222,
        0,2901,2899,1,0,0,0,2902,2905,1,0,0,0,2903,2901,1,0,0,0,2903,2904,
        1,0,0,0,2904,443,1,0,0,0,2905,2903,1,0,0,0,2906,2909,3,446,223,0,
        2907,2909,3,448,224,0,2908,2906,1,0,0,0,2908,2907,1,0,0,0,2909,445,
        1,0,0,0,2910,2912,5,46,0,0,2911,2913,5,77,0,0,2912,2911,1,0,0,0,
        2912,2913,1,0,0,0,2913,2914,1,0,0,0,2914,2915,3,476,238,0,2915,447,
        1,0,0,0,2916,2918,5,112,0,0,2917,2919,5,77,0,0,2918,2917,1,0,0,0,
        2918,2919,1,0,0,0,2919,2920,1,0,0,0,2920,2921,3,724,362,0,2921,449,
        1,0,0,0,2922,2923,5,49,0,0,2923,2924,5,77,0,0,2924,2925,3,724,362,
        0,2925,2926,5,264,0,0,2926,2927,3,478,239,0,2927,451,1,0,0,0,2928,
        2929,5,46,0,0,2929,2930,3,508,254,0,2930,453,1,0,0,0,2931,2932,5,
        49,0,0,2932,2933,5,134,0,0,2933,2934,3,724,362,0,2934,2935,5,264,
        0,0,2935,2936,3,724,362,0,2936,2937,3,514,257,0,2937,455,1,0,0,0,
        2938,2939,5,264,0,0,2939,2940,3,724,362,0,2940,2941,3,506,253,0,
        2941,457,1,0,0,0,2942,2943,5,264,0,0,2943,2944,5,27,0,0,2944,2949,
        3,504,252,0,2945,2946,5,26,0,0,2946,2948,3,504,252,0,2947,2945,1,
        0,0,0,2948,2951,1,0,0,0,2949,2947,1,0,0,0,2949,2950,1,0,0,0,2950,
        2952,1,0,0,0,2951,2949,1,0,0,0,2952,2953,5,28,0,0,2953,459,1,0,0,
        0,2954,2955,5,242,0,0,2955,2956,5,27,0,0,2956,2961,3,724,362,0,2957,
        2958,5,26,0,0,2958,2960,3,724,362,0,2959,2957,1,0,0,0,2960,2963,
        1,0,0,0,2961,2959,1,0,0,0,2961,2962,1,0,0,0,2962,2964,1,0,0,0,2963,
        2961,1,0,0,0,2964,2965,5,28,0,0,2965,461,1,0,0,0,2966,2967,5,46,
        0,0,2967,2968,3,486,243,0,2968,463,1,0,0,0,2969,2970,5,112,0,0,2970,
        2971,5,160,0,0,2971,2972,3,724,362,0,2972,465,1,0,0,0,2973,2974,
        5,238,0,0,2974,2975,5,286,0,0,2975,2976,3,736,368,0,2976,467,1,0,
        0,0,2977,2978,5,238,0,0,2978,2979,5,160,0,0,2979,2980,3,724,362,
        0,2980,2981,5,286,0,0,2981,2982,3,724,362,0,2982,469,1,0,0,0,2983,
        2984,5,46,0,0,2984,2985,3,494,247,0,2985,471,1,0,0,0,2986,2987,5,
        49,0,0,2987,2988,5,74,0,0,2988,2989,3,724,362,0,2989,2990,3,502,
        251,0,2990,473,1,0,0,0,2991,2992,5,112,0,0,2992,2993,5,74,0,0,2993,
        2994,3,724,362,0,2994,475,1,0,0,0,2995,2996,3,728,364,0,2996,2998,
        3,204,102,0,2997,2999,3,478,239,0,2998,2997,1,0,0,0,2998,2999,1,
        0,0,0,2999,3000,1,0,0,0,3000,3001,3,480,240,0,3001,477,1,0,0,0,3002,
        3003,5,134,0,0,3003,3004,3,724,362,0,3004,479,1,0,0,0,3005,3007,
        5,196,0,0,3006,3005,1,0,0,0,3006,3007,1,0,0,0,3007,3008,1,0,0,0,
        3008,3010,5,198,0,0,3009,3006,1,0,0,0,3009,3010,1,0,0,0,3010,3013,
        1,0,0,0,3011,3012,5,98,0,0,3012,3014,3,14,7,0,3013,3011,1,0,0,0,
        3013,3014,1,0,0,0,3014,481,1,0,0,0,3015,3017,3,724,362,0,3016,3018,
        7,9,0,0,3017,3016,1,0,0,0,3017,3018,1,0,0,0,3018,483,1,0,0,0,3019,
        3020,5,226,0,0,3020,3021,5,176,0,0,3021,3022,5,27,0,0,3022,3027,
        3,724,362,0,3023,3024,5,26,0,0,3024,3026,3,724,362,0,3025,3023,1,
        0,0,0,3026,3029,1,0,0,0,3027,3025,1,0,0,0,3027,3028,1,0,0,0,3028,
        3030,1,0,0,0,3029,3027,1,0,0,0,3030,3031,5,28,0,0,3031,3059,1,0,
        0,0,3032,3033,5,215,0,0,3033,3034,5,69,0,0,3034,3035,5,27,0,0,3035,
        3040,3,724,362,0,3036,3037,5,26,0,0,3037,3039,3,724,362,0,3038,3036,
        1,0,0,0,3039,3042,1,0,0,0,3040,3038,1,0,0,0,3040,3041,1,0,0,0,3041,
        3043,1,0,0,0,3042,3040,1,0,0,0,3043,3044,5,28,0,0,3044,3059,1,0,
        0,0,3045,3046,5,210,0,0,3046,3047,5,69,0,0,3047,3048,5,27,0,0,3048,
        3053,3,482,241,0,3049,3050,5,26,0,0,3050,3052,3,482,241,0,3051,3049,
        1,0,0,0,3052,3055,1,0,0,0,3053,3051,1,0,0,0,3053,3054,1,0,0,0,3054,
        3056,1,0,0,0,3055,3053,1,0,0,0,3056,3057,5,28,0,0,3057,3059,1,0,
        0,0,3058,3019,1,0,0,0,3058,3032,1,0,0,0,3058,3045,1,0,0,0,3059,485,
        1,0,0,0,3060,3061,5,160,0,0,3061,3062,3,724,362,0,3062,3083,3,488,
        244,0,3063,3064,5,312,0,0,3064,3065,5,27,0,0,3065,3066,3,724,362,
        0,3066,3067,5,2,0,0,3067,3075,3,724,362,0,3068,3069,5,26,0,0,3069,
        3070,3,724,362,0,3070,3071,5,2,0,0,3071,3072,3,724,362,0,3072,3074,
        1,0,0,0,3073,3068,1,0,0,0,3074,3077,1,0,0,0,3075,3073,1,0,0,0,3075,
        3076,1,0,0,0,3076,3079,1,0,0,0,3077,3075,1,0,0,0,3078,3080,5,26,
        0,0,3079,3078,1,0,0,0,3079,3080,1,0,0,0,3080,3081,1,0,0,0,3081,3082,
        5,28,0,0,3082,3084,1,0,0,0,3083,3063,1,0,0,0,3083,3084,1,0,0,0,3084,
        3085,1,0,0,0,3085,3086,5,204,0,0,3086,3087,5,27,0,0,3087,3092,3,
        728,364,0,3088,3089,5,26,0,0,3089,3091,3,728,364,0,3090,3088,1,0,
        0,0,3091,3094,1,0,0,0,3092,3090,1,0,0,0,3092,3093,1,0,0,0,3093,3095,
        1,0,0,0,3094,3092,1,0,0,0,3095,3108,5,28,0,0,3096,3097,5,86,0,0,
        3097,3098,5,27,0,0,3098,3103,3,728,364,0,3099,3100,5,26,0,0,3100,
        3102,3,728,364,0,3101,3099,1,0,0,0,3102,3105,1,0,0,0,3103,3101,1,
        0,0,0,3103,3104,1,0,0,0,3104,3106,1,0,0,0,3105,3103,1,0,0,0,3106,
        3107,5,28,0,0,3107,3109,1,0,0,0,3108,3096,1,0,0,0,3108,3109,1,0,
        0,0,3109,487,1,0,0,0,3110,3113,3,490,245,0,3111,3113,3,492,246,0,
        3112,3110,1,0,0,0,3112,3111,1,0,0,0,3113,489,1,0,0,0,3114,3116,5,
        146,0,0,3115,3117,5,296,0,0,3116,3115,1,0,0,0,3116,3117,1,0,0,0,
        3117,3119,1,0,0,0,3118,3120,7,16,0,0,3119,3118,1,0,0,0,3119,3120,
        1,0,0,0,3120,491,1,0,0,0,3121,3122,5,183,0,0,3122,493,1,0,0,0,3123,
        3124,5,74,0,0,3124,3125,3,724,362,0,3125,3126,5,312,0,0,3126,3127,
        5,27,0,0,3127,3128,3,496,248,0,3128,3129,5,28,0,0,3129,495,1,0,0,
        0,3130,3135,3,498,249,0,3131,3132,5,26,0,0,3132,3134,3,498,249,0,
        3133,3131,1,0,0,0,3134,3137,1,0,0,0,3135,3133,1,0,0,0,3135,3136,
        1,0,0,0,3136,497,1,0,0,0,3137,3135,1,0,0,0,3138,3139,3,724,362,0,
        3139,3140,5,2,0,0,3140,3141,3,500,250,0,3141,499,1,0,0,0,3142,3143,
        3,14,7,0,3143,501,1,0,0,0,3144,3151,5,108,0,0,3145,3146,5,264,0,
        0,3146,3147,5,27,0,0,3147,3148,3,496,248,0,3148,3149,5,28,0,0,3149,
        3151,1,0,0,0,3150,3144,1,0,0,0,3150,3145,1,0,0,0,3151,503,1,0,0,
        0,3152,3153,3,724,362,0,3153,3154,5,2,0,0,3154,3155,3,506,253,0,
        3155,505,1,0,0,0,3156,3169,3,706,353,0,3157,3169,5,316,0,0,3158,
        3169,3,788,394,0,3159,3169,3,516,258,0,3160,3161,3,14,7,0,3161,3162,
        5,204,0,0,3162,3165,3,724,362,0,3163,3164,5,55,0,0,3164,3166,7,17,
        0,0,3165,3163,1,0,0,0,3165,3166,1,0,0,0,3166,3169,1,0,0,0,3167,3169,
        3,784,392,0,3168,3156,1,0,0,0,3168,3157,1,0,0,0,3168,3158,1,0,0,
        0,3168,3159,1,0,0,0,3168,3160,1,0,0,0,3168,3167,1,0,0,0,3169,507,
        1,0,0,0,3170,3171,5,134,0,0,3171,3172,3,724,362,0,3172,3173,3,510,
        255,0,3173,509,1,0,0,0,3174,3183,5,27,0,0,3175,3180,3,512,256,0,
        3176,3177,5,26,0,0,3177,3179,3,512,256,0,3178,3176,1,0,0,0,3179,
        3182,1,0,0,0,3180,3178,1,0,0,0,3180,3181,1,0,0,0,3181,3184,1,0,0,
        0,3182,3180,1,0,0,0,3183,3175,1,0,0,0,3183,3184,1,0,0,0,3184,3185,
        1,0,0,0,3185,3186,5,28,0,0,3186,511,1,0,0,0,3187,3188,3,724,362,
        0,3188,3189,5,2,0,0,3189,3190,3,514,257,0,3190,513,1,0,0,0,3191,
        3192,5,316,0,0,3192,515,1,0,0,0,3193,3194,5,27,0,0,3194,3199,3,518,
        259,0,3195,3196,5,26,0,0,3196,3198,3,518,259,0,3197,3195,1,0,0,0,
        3198,3201,1,0,0,0,3199,3197,1,0,0,0,3199,3200,1,0,0,0,3200,3202,
        1,0,0,0,3201,3199,1,0,0,0,3202,3203,5,28,0,0,3203,3206,1,0,0,0,3204,
        3206,3,518,259,0,3205,3193,1,0,0,0,3205,3204,1,0,0,0,3206,517,1,
        0,0,0,3207,3208,5,27,0,0,3208,3213,3,142,71,0,3209,3210,5,26,0,0,
        3210,3212,3,142,71,0,3211,3209,1,0,0,0,3212,3215,1,0,0,0,3213,3211,
        1,0,0,0,3213,3214,1,0,0,0,3214,3216,1,0,0,0,3215,3213,1,0,0,0,3216,
        3217,5,28,0,0,3217,519,1,0,0,0,3218,3223,5,112,0,0,3219,3224,5,277,
        0,0,3220,3224,5,280,0,0,3221,3222,5,131,0,0,3222,3224,5,277,0,0,
        3223,3219,1,0,0,0,3223,3220,1,0,0,0,3223,3221,1,0,0,0,3224,3227,
        1,0,0,0,3225,3226,5,154,0,0,3226,3228,5,128,0,0,3227,3225,1,0,0,
        0,3227,3228,1,0,0,0,3228,3229,1,0,0,0,3229,3230,3,586,293,0,3230,
        521,1,0,0,0,3231,3232,5,87,0,0,3232,3233,5,302,0,0,3233,3235,3,532,
        266,0,3234,3236,3,534,267,0,3235,3234,1,0,0,0,3235,3236,1,0,0,0,
        3236,523,1,0,0,0,3237,3238,5,49,0,0,3238,3239,5,302,0,0,3239,3247,
        3,532,266,0,3240,3242,5,312,0,0,3241,3240,1,0,0,0,3241,3242,1,0,
        0,0,3242,3243,1,0,0,0,3243,3248,3,534,267,0,3244,3245,5,238,0,0,
        3245,3246,5,286,0,0,3246,3248,3,532,266,0,3247,3241,1,0,0,0,3247,
        3244,1,0,0,0,3248,525,1,0,0,0,3249,3250,5,87,0,0,3250,3251,5,148,
        0,0,3251,3265,3,532,266,0,3252,3253,5,312,0,0,3253,3254,5,302,0,
        0,3254,3259,3,532,266,0,3255,3256,5,26,0,0,3256,3258,3,532,266,0,
        3257,3255,1,0,0,0,3258,3261,1,0,0,0,3259,3257,1,0,0,0,3259,3260,
        1,0,0,0,3260,3263,1,0,0,0,3261,3259,1,0,0,0,3262,3264,5,26,0,0,3263,
        3262,1,0,0,0,3263,3264,1,0,0,0,3264,3266,1,0,0,0,3265,3252,1,0,0,
        0,3265,3266,1,0,0,0,3266,527,1,0,0,0,3267,3268,5,49,0,0,3268,3269,
        5,148,0,0,3269,3286,3,532,266,0,3270,3271,7,18,0,0,3271,3272,5,302,
        0,0,3272,3277,3,532,266,0,3273,3274,5,26,0,0,3274,3276,3,532,266,
        0,3275,3273,1,0,0,0,3276,3279,1,0,0,0,3277,3275,1,0,0,0,3277,3278,
        1,0,0,0,3278,3281,1,0,0,0,3279,3277,1,0,0,0,3280,3282,5,26,0,0,3281,
        3280,1,0,0,0,3281,3282,1,0,0,0,3282,3287,1,0,0,0,3283,3284,5,238,
        0,0,3284,3285,5,286,0,0,3285,3287,3,532,266,0,3286,3270,1,0,0,0,
        3286,3283,1,0,0,0,3287,529,1,0,0,0,3288,3289,5,112,0,0,3289,3292,
        7,19,0,0,3290,3291,5,154,0,0,3291,3293,5,128,0,0,3292,3290,1,0,0,
        0,3292,3293,1,0,0,0,3293,3294,1,0,0,0,3294,3299,3,532,266,0,3295,
        3296,5,26,0,0,3296,3298,3,532,266,0,3297,3295,1,0,0,0,3298,3301,
        1,0,0,0,3299,3297,1,0,0,0,3299,3300,1,0,0,0,3300,3303,1,0,0,0,3301,
        3299,1,0,0,0,3302,3304,5,26,0,0,3303,3302,1,0,0,0,3303,3304,1,0,
        0,0,3304,531,1,0,0,0,3305,3308,3,726,363,0,3306,3308,3,144,72,0,
        3307,3305,1,0,0,0,3307,3306,1,0,0,0,3308,533,1,0,0,0,3309,3311,5,
        117,0,0,3310,3309,1,0,0,0,3310,3311,1,0,0,0,3311,3312,1,0,0,0,3312,
        3313,5,217,0,0,3313,3314,3,14,7,0,3314,535,1,0,0,0,3315,3316,5,147,
        0,0,3316,3317,3,544,272,0,3317,3318,5,204,0,0,3318,3323,3,728,364,
        0,3319,3320,5,26,0,0,3320,3322,3,728,364,0,3321,3319,1,0,0,0,3322,
        3325,1,0,0,0,3323,3321,1,0,0,0,3323,3324,1,0,0,0,3324,3326,1,0,0,
        0,3325,3323,1,0,0,0,3326,3327,5,286,0,0,3327,3332,3,532,266,0,3328,
        3329,5,26,0,0,3329,3331,3,532,266,0,3330,3328,1,0,0,0,3331,3334,
        1,0,0,0,3332,3330,1,0,0,0,3332,3333,1,0,0,0,3333,3336,1,0,0,0,3334,
        3332,1,0,0,0,3335,3337,5,26,0,0,3336,3335,1,0,0,0,3336,3337,1,0,
        0,0,3337,3341,1,0,0,0,3338,3339,5,312,0,0,3339,3340,5,147,0,0,3340,
        3342,5,207,0,0,3341,3338,1,0,0,0,3341,3342,1,0,0,0,3342,537,1,0,
        0,0,3343,3347,5,250,0,0,3344,3345,5,147,0,0,3345,3346,5,207,0,0,
        3346,3348,5,140,0,0,3347,3344,1,0,0,0,3347,3348,1,0,0,0,3348,3349,
        1,0,0,0,3349,3350,3,544,272,0,3350,3351,5,204,0,0,3351,3356,3,728,
        364,0,3352,3353,5,26,0,0,3353,3355,3,728,364,0,3354,3352,1,0,0,0,
        3355,3358,1,0,0,0,3356,3354,1,0,0,0,3356,3357,1,0,0,0,3357,3359,
        1,0,0,0,3358,3356,1,0,0,0,3359,3360,5,142,0,0,3360,3365,3,532,266,
        0,3361,3362,5,26,0,0,3362,3364,3,532,266,0,3363,3361,1,0,0,0,3364,
        3367,1,0,0,0,3365,3363,1,0,0,0,3365,3366,1,0,0,0,3366,539,1,0,0,
        0,3367,3365,1,0,0,0,3368,3393,5,83,0,0,3369,3393,5,182,0,0,3370,
        3393,5,166,0,0,3371,3393,5,184,0,0,3372,3393,5,112,0,0,3373,3393,
        5,147,0,0,3374,3375,5,191,0,0,3375,3393,7,20,0,0,3376,3377,7,21,
        0,0,3377,3393,5,255,0,0,3378,3379,7,22,0,0,3379,3393,5,259,0,0,3380,
        3382,5,262,0,0,3381,3383,7,23,0,0,3382,3381,1,0,0,0,3382,3383,1,
        0,0,0,3383,3393,1,0,0,0,3384,3386,7,24,0,0,3385,3387,5,179,0,0,3386,
        3385,1,0,0,0,3386,3387,1,0,0,0,3387,3393,1,0,0,0,3388,3390,5,87,
        0,0,3389,3391,7,25,0,0,3390,3389,1,0,0,0,3390,3391,1,0,0,0,3391,
        3393,1,0,0,0,3392,3368,1,0,0,0,3392,3369,1,0,0,0,3392,3370,1,0,0,
        0,3392,3371,1,0,0,0,3392,3372,1,0,0,0,3392,3373,1,0,0,0,3392,3374,
        1,0,0,0,3392,3376,1,0,0,0,3392,3378,1,0,0,0,3392,3380,1,0,0,0,3392,
        3384,1,0,0,0,3392,3388,1,0,0,0,3393,541,1,0,0,0,3394,3397,3,540,
        270,0,3395,3397,5,316,0,0,3396,3394,1,0,0,0,3396,3395,1,0,0,0,3397,
        543,1,0,0,0,3398,3403,3,542,271,0,3399,3400,5,26,0,0,3400,3402,3,
        542,271,0,3401,3399,1,0,0,0,3402,3405,1,0,0,0,3403,3401,1,0,0,0,
        3403,3404,1,0,0,0,3404,3407,1,0,0,0,3405,3403,1,0,0,0,3406,3408,
        5,26,0,0,3407,3406,1,0,0,0,3407,3408,1,0,0,0,3408,3414,1,0,0,0,3409,
        3411,5,48,0,0,3410,3412,5,227,0,0,3411,3410,1,0,0,0,3411,3412,1,
        0,0,0,3412,3414,1,0,0,0,3413,3398,1,0,0,0,3413,3409,1,0,0,0,3414,
        545,1,0,0,0,3415,3416,5,87,0,0,3416,3417,5,59,0,0,3417,3418,5,241,
        0,0,3418,3419,3,582,291,0,3419,3420,5,140,0,0,3420,3425,3,548,274,
        0,3421,3422,5,26,0,0,3422,3424,3,548,274,0,3423,3421,1,0,0,0,3424,
        3427,1,0,0,0,3425,3423,1,0,0,0,3425,3426,1,0,0,0,3426,3428,1,0,0,
        0,3427,3425,1,0,0,0,3428,3429,5,312,0,0,3429,3430,5,27,0,0,3430,
        3431,3,550,275,0,3431,3432,5,28,0,0,3432,547,1,0,0,0,3433,3434,3,
        582,291,0,3434,3435,3,798,399,0,3435,549,1,0,0,0,3436,3441,3,552,
        276,0,3437,3438,5,26,0,0,3438,3440,3,552,276,0,3439,3437,1,0,0,0,
        3440,3443,1,0,0,0,3441,3439,1,0,0,0,3441,3442,1,0,0,0,3442,551,1,
        0,0,0,3443,3441,1,0,0,0,3444,3445,3,724,362,0,3445,3446,5,2,0,0,
        3446,3447,5,316,0,0,3447,553,1,0,0,0,3448,3449,5,49,0,0,3449,3450,
        5,59,0,0,3450,3451,5,241,0,0,3451,3452,3,582,291,0,3452,3457,3,556,
        278,0,3453,3454,5,26,0,0,3454,3456,3,556,278,0,3455,3453,1,0,0,0,
        3456,3459,1,0,0,0,3457,3455,1,0,0,0,3457,3458,1,0,0,0,3458,555,1,
        0,0,0,3459,3457,1,0,0,0,3460,3461,3,558,279,0,3461,557,1,0,0,0,3462,
        3463,5,264,0,0,3463,3464,5,27,0,0,3464,3465,3,550,275,0,3465,3466,
        5,28,0,0,3466,559,1,0,0,0,3467,3468,5,112,0,0,3468,3469,5,59,0,0,
        3469,3470,5,241,0,0,3470,3472,3,582,291,0,3471,3473,5,71,0,0,3472,
        3471,1,0,0,0,3472,3473,1,0,0,0,3473,561,1,0,0,0,3474,3479,3,146,
        73,0,3475,3476,5,26,0,0,3476,3478,3,146,73,0,3477,3475,1,0,0,0,3478,
        3481,1,0,0,0,3479,3477,1,0,0,0,3479,3480,1,0,0,0,3480,563,1,0,0,
        0,3481,3479,1,0,0,0,3482,3483,5,101,0,0,3483,3484,7,26,0,0,3484,
        3485,3,144,72,0,3485,3487,5,27,0,0,3486,3488,3,562,281,0,3487,3486,
        1,0,0,0,3487,3488,1,0,0,0,3488,3489,1,0,0,0,3489,3490,5,28,0,0,3490,
        3491,5,55,0,0,3491,3492,3,566,283,0,3492,3493,5,118,0,0,3493,3494,
        5,101,0,0,3494,565,1,0,0,0,3495,3497,5,24,0,0,3496,3495,1,0,0,0,
        3497,3500,1,0,0,0,3498,3496,1,0,0,0,3498,3499,1,0,0,0,3499,3519,
        1,0,0,0,3500,3498,1,0,0,0,3501,3510,3,12,6,0,3502,3504,5,24,0,0,
        3503,3502,1,0,0,0,3504,3505,1,0,0,0,3505,3503,1,0,0,0,3505,3506,
        1,0,0,0,3506,3507,1,0,0,0,3507,3509,3,12,6,0,3508,3503,1,0,0,0,3509,
        3512,1,0,0,0,3510,3508,1,0,0,0,3510,3511,1,0,0,0,3511,3516,1,0,0,
        0,3512,3510,1,0,0,0,3513,3515,5,24,0,0,3514,3513,1,0,0,0,3515,3518,
        1,0,0,0,3516,3514,1,0,0,0,3516,3517,1,0,0,0,3517,3520,1,0,0,0,3518,
        3516,1,0,0,0,3519,3501,1,0,0,0,3519,3520,1,0,0,0,3520,567,1,0,0,
        0,3521,3523,5,123,0,0,3522,3521,1,0,0,0,3522,3523,1,0,0,0,3523,3524,
        1,0,0,0,3524,3525,5,154,0,0,3525,3526,3,14,7,0,3526,3529,3,222,111,
        0,3527,3528,5,114,0,0,3528,3530,3,222,111,0,3529,3527,1,0,0,0,3529,
        3530,1,0,0,0,3530,569,1,0,0,0,3531,3533,5,123,0,0,3532,3531,1,0,
        0,0,3532,3533,1,0,0,0,3533,3535,1,0,0,0,3534,3536,5,214,0,0,3535,
        3534,1,0,0,0,3535,3536,1,0,0,0,3536,3537,1,0,0,0,3537,3538,5,140,
        0,0,3538,3539,3,144,72,0,3539,3540,5,159,0,0,3540,3541,3,14,7,0,
        3541,3544,3,222,111,0,3542,3543,5,114,0,0,3543,3545,3,222,111,0,
        3544,3542,1,0,0,0,3544,3545,1,0,0,0,3545,571,1,0,0,0,3546,3547,3,
        750,375,0,3547,3548,5,25,0,0,3548,3550,1,0,0,0,3549,3546,1,0,0,0,
        3549,3550,1,0,0,0,3550,3552,1,0,0,0,3551,3553,5,31,0,0,3552,3551,
        1,0,0,0,3552,3553,1,0,0,0,3553,3584,1,0,0,0,3554,3585,3,574,287,
        0,3555,3556,3,730,365,0,3556,3568,5,27,0,0,3557,3562,3,576,288,0,
        3558,3559,5,26,0,0,3559,3561,3,576,288,0,3560,3558,1,0,0,0,3561,
        3564,1,0,0,0,3562,3560,1,0,0,0,3562,3563,1,0,0,0,3563,3566,1,0,0,
        0,3564,3562,1,0,0,0,3565,3567,5,26,0,0,3566,3565,1,0,0,0,3566,3567,
        1,0,0,0,3567,3569,1,0,0,0,3568,3557,1,0,0,0,3568,3569,1,0,0,0,3569,
        3570,1,0,0,0,3570,3571,5,28,0,0,3571,3585,1,0,0,0,3572,3578,3,144,
        72,0,3573,3575,5,27,0,0,3574,3576,3,112,56,0,3575,3574,1,0,0,0,3575,
        3576,1,0,0,0,3576,3577,1,0,0,0,3577,3579,5,28,0,0,3578,3573,1,0,
        0,0,3578,3579,1,0,0,0,3579,3582,1,0,0,0,3580,3581,5,307,0,0,3581,
        3583,3,746,373,0,3582,3580,1,0,0,0,3582,3583,1,0,0,0,3583,3585,1,
        0,0,0,3584,3554,1,0,0,0,3584,3555,1,0,0,0,3584,3572,1,0,0,0,3585,
        3587,1,0,0,0,3586,3588,3,578,289,0,3587,3586,1,0,0,0,3587,3588,1,
        0,0,0,3588,573,1,0,0,0,3589,3592,3,758,379,0,3590,3591,5,307,0,0,
        3591,3593,3,746,373,0,3592,3590,1,0,0,0,3592,3593,1,0,0,0,3593,575,
        1,0,0,0,3594,3596,5,31,0,0,3595,3594,1,0,0,0,3595,3596,1,0,0,0,3596,
        3597,1,0,0,0,3597,3600,3,128,64,0,3598,3599,5,307,0,0,3599,3601,
        3,746,373,0,3600,3598,1,0,0,0,3600,3601,1,0,0,0,3601,577,1,0,0,0,
        3602,3615,5,312,0,0,3603,3616,3,580,290,0,3604,3605,5,27,0,0,3605,
        3610,3,580,290,0,3606,3607,5,26,0,0,3607,3609,3,580,290,0,3608,3606,
        1,0,0,0,3609,3612,1,0,0,0,3610,3608,1,0,0,0,3610,3611,1,0,0,0,3611,
        3613,1,0,0,0,3612,3610,1,0,0,0,3613,3614,5,28,0,0,3614,3616,1,0,
        0,0,3615,3603,1,0,0,0,3615,3604,1,0,0,0,3616,579,1,0,0,0,3617,3636,
        3,740,370,0,3618,3634,5,2,0,0,3619,3635,3,160,80,0,3620,3621,5,27,
        0,0,3621,3626,3,160,80,0,3622,3623,5,26,0,0,3623,3625,3,160,80,0,
        3624,3622,1,0,0,0,3625,3628,1,0,0,0,3626,3624,1,0,0,0,3626,3627,
        1,0,0,0,3627,3630,1,0,0,0,3628,3626,1,0,0,0,3629,3631,5,26,0,0,3630,
        3629,1,0,0,0,3630,3631,1,0,0,0,3631,3632,1,0,0,0,3632,3633,5,28,
        0,0,3633,3635,1,0,0,0,3634,3619,1,0,0,0,3634,3620,1,0,0,0,3635,3637,
        1,0,0,0,3636,3618,1,0,0,0,3636,3637,1,0,0,0,3637,3663,1,0,0,0,3638,
        3640,7,27,0,0,3639,3641,5,2,0,0,3640,3639,1,0,0,0,3640,3641,1,0,
        0,0,3641,3642,1,0,0,0,3642,3663,3,204,102,0,3643,3645,5,259,0,0,
        3644,3646,5,2,0,0,3645,3644,1,0,0,0,3645,3646,1,0,0,0,3646,3647,
        1,0,0,0,3647,3656,5,27,0,0,3648,3653,3,164,82,0,3649,3650,5,26,0,
        0,3650,3652,3,164,82,0,3651,3649,1,0,0,0,3652,3655,1,0,0,0,3653,
        3651,1,0,0,0,3653,3654,1,0,0,0,3654,3657,1,0,0,0,3655,3653,1,0,0,
        0,3656,3648,1,0,0,0,3656,3657,1,0,0,0,3657,3659,1,0,0,0,3658,3660,
        5,26,0,0,3659,3658,1,0,0,0,3659,3660,1,0,0,0,3660,3661,1,0,0,0,3661,
        3663,5,28,0,0,3662,3617,1,0,0,0,3662,3638,1,0,0,0,3662,3643,1,0,
        0,0,3663,581,1,0,0,0,3664,3665,3,750,375,0,3665,3666,5,25,0,0,3666,
        3668,1,0,0,0,3667,3664,1,0,0,0,3667,3668,1,0,0,0,3668,3669,1,0,0,
        0,3669,3670,3,756,378,0,3670,583,1,0,0,0,3671,3677,3,582,291,0,3672,
        3674,5,31,0,0,3673,3672,1,0,0,0,3673,3674,1,0,0,0,3674,3675,1,0,
        0,0,3675,3677,3,144,72,0,3676,3671,1,0,0,0,3676,3673,1,0,0,0,3677,
        585,1,0,0,0,3678,3680,3,584,292,0,3679,3681,3,578,289,0,3680,3679,
        1,0,0,0,3680,3681,1,0,0,0,3681,587,1,0,0,0,3682,3686,3,586,293,0,
        3683,3684,5,120,0,0,3684,3685,5,69,0,0,3685,3687,3,114,57,0,3686,
        3683,1,0,0,0,3686,3687,1,0,0,0,3687,589,1,0,0,0,3688,3689,5,102,
        0,0,3689,3690,5,142,0,0,3690,3694,3,586,293,0,3691,3695,3,800,400,
        0,3692,3693,5,204,0,0,3693,3695,3,368,184,0,3694,3691,1,0,0,0,3694,
        3692,1,0,0,0,3694,3695,1,0,0,0,3695,3697,1,0,0,0,3696,3698,3,362,
        181,0,3697,3696,1,0,0,0,3697,3698,1,0,0,0,3698,591,1,0,0,0,3699,
        3700,5,299,0,0,3700,3708,3,586,293,0,3701,3702,5,264,0,0,3702,3704,
        3,594,297,0,3703,3705,3,800,400,0,3704,3703,1,0,0,0,3704,3705,1,
        0,0,0,3705,3709,1,0,0,0,3706,3707,5,204,0,0,3707,3709,3,368,184,
        0,3708,3701,1,0,0,0,3708,3706,1,0,0,0,3709,3711,1,0,0,0,3710,3712,
        3,362,181,0,3711,3710,1,0,0,0,3711,3712,1,0,0,0,3712,593,1,0,0,0,
        3713,3716,3,596,298,0,3714,3716,3,602,301,0,3715,3713,1,0,0,0,3715,
        3714,1,0,0,0,3716,595,1,0,0,0,3717,3722,3,598,299,0,3718,3719,5,
        26,0,0,3719,3721,3,598,299,0,3720,3718,1,0,0,0,3721,3724,1,0,0,0,
        3722,3720,1,0,0,0,3722,3723,1,0,0,0,3723,597,1,0,0,0,3724,3722,1,
        0,0,0,3725,3726,3,600,300,0,3726,3727,5,2,0,0,3727,3728,3,14,7,0,
        3728,599,1,0,0,0,3729,3730,3,120,60,0,3730,601,1,0,0,0,3731,3732,
        3,604,302,0,3732,3733,5,2,0,0,3733,3734,5,27,0,0,3734,3735,3,378,
        189,0,3735,3736,5,28,0,0,3736,603,1,0,0,0,3737,3738,5,27,0,0,3738,
        3743,3,600,300,0,3739,3740,5,26,0,0,3740,3742,3,600,300,0,3741,3739,
        1,0,0,0,3742,3745,1,0,0,0,3743,3741,1,0,0,0,3743,3744,1,0,0,0,3744,
        3746,1,0,0,0,3745,3743,1,0,0,0,3746,3747,5,28,0,0,3747,605,1,0,0,
        0,3748,3749,5,87,0,0,3749,3750,5,287,0,0,3750,3752,3,652,326,0,3751,
        3753,3,608,304,0,3752,3751,1,0,0,0,3752,3753,1,0,0,0,3753,3755,1,
        0,0,0,3754,3756,3,612,306,0,3755,3754,1,0,0,0,3755,3756,1,0,0,0,
        3756,607,1,0,0,0,3757,3758,5,27,0,0,3758,3763,3,610,305,0,3759,3760,
        5,26,0,0,3760,3762,3,610,305,0,3761,3759,1,0,0,0,3762,3765,1,0,0,
        0,3763,3761,1,0,0,0,3763,3764,1,0,0,0,3764,3766,1,0,0,0,3765,3763,
        1,0,0,0,3766,3767,5,28,0,0,3767,609,1,0,0,0,3768,3769,3,620,310,
        0,3769,611,1,0,0,0,3770,3771,5,312,0,0,3771,3772,5,27,0,0,3772,3773,
        3,638,319,0,3773,3774,5,28,0,0,3774,613,1,0,0,0,3775,3776,5,49,0,
        0,3776,3777,5,287,0,0,3777,3778,3,652,326,0,3778,3783,3,616,308,
        0,3779,3780,5,26,0,0,3780,3782,3,616,308,0,3781,3779,1,0,0,0,3782,
        3785,1,0,0,0,3783,3781,1,0,0,0,3783,3784,1,0,0,0,3784,615,1,0,0,
        0,3785,3783,1,0,0,0,3786,3792,3,618,309,0,3787,3792,3,622,311,0,
        3788,3792,3,626,313,0,3789,3792,3,632,316,0,3790,3792,3,634,317,
        0,3791,3786,1,0,0,0,3791,3787,1,0,0,0,3791,3788,1,0,0,0,3791,3789,
        1,0,0,0,3791,3790,1,0,0,0,3792,617,1,0,0,0,3793,3794,5,46,0,0,3794,
        3795,3,620,310,0,3795,619,1,0,0,0,3796,3797,5,85,0,0,3797,3799,3,
        724,362,0,3798,3800,3,644,322,0,3799,3798,1,0,0,0,3799,3800,1,0,
        0,0,3800,621,1,0,0,0,3801,3802,5,49,0,0,3802,3803,5,85,0,0,3803,
        3804,3,654,327,0,3804,3805,3,624,312,0,3805,623,1,0,0,0,3806,3809,
        3,628,314,0,3807,3809,3,630,315,0,3808,3806,1,0,0,0,3808,3807,1,
        0,0,0,3809,625,1,0,0,0,3810,3811,5,112,0,0,3811,3812,5,85,0,0,3812,
        3813,3,654,327,0,3813,627,1,0,0,0,3814,3815,5,264,0,0,3815,3816,
        5,27,0,0,3816,3817,3,646,323,0,3817,3818,5,28,0,0,3818,629,1,0,0,
        0,3819,3820,5,242,0,0,3820,3821,5,27,0,0,3821,3826,3,724,362,0,3822,
        3823,5,26,0,0,3823,3825,3,724,362,0,3824,3822,1,0,0,0,3825,3828,
        1,0,0,0,3826,3824,1,0,0,0,3826,3827,1,0,0,0,3827,3829,1,0,0,0,3828,
        3826,1,0,0,0,3829,3830,5,28,0,0,3830,631,1,0,0,0,3831,3832,5,264,
        0,0,3832,3833,5,27,0,0,3833,3834,3,638,319,0,3834,3835,5,28,0,0,
        3835,633,1,0,0,0,3836,3837,5,242,0,0,3837,3838,5,27,0,0,3838,3843,
        3,724,362,0,3839,3840,5,26,0,0,3840,3842,3,742,371,0,3841,3839,1,
        0,0,0,3842,3845,1,0,0,0,3843,3841,1,0,0,0,3843,3844,1,0,0,0,3844,
        3846,1,0,0,0,3845,3843,1,0,0,0,3846,3847,5,28,0,0,3847,635,1,0,0,
        0,3848,3849,5,112,0,0,3849,3850,5,287,0,0,3850,3851,3,652,326,0,
        3851,637,1,0,0,0,3852,3857,3,640,320,0,3853,3854,5,26,0,0,3854,3856,
        3,640,320,0,3855,3853,1,0,0,0,3856,3859,1,0,0,0,3857,3855,1,0,0,
        0,3857,3858,1,0,0,0,3858,639,1,0,0,0,3859,3857,1,0,0,0,3860,3861,
        3,724,362,0,3861,3862,5,2,0,0,3862,3863,3,642,321,0,3863,641,1,0,
        0,0,3864,3865,3,14,7,0,3865,643,1,0,0,0,3866,3867,5,312,0,0,3867,
        3868,5,27,0,0,3868,3869,3,646,323,0,3869,3870,5,28,0,0,3870,645,
        1,0,0,0,3871,3876,3,648,324,0,3872,3873,5,26,0,0,3873,3875,3,648,
        324,0,3874,3872,1,0,0,0,3875,3878,1,0,0,0,3876,3874,1,0,0,0,3876,
        3877,1,0,0,0,3877,647,1,0,0,0,3878,3876,1,0,0,0,3879,3880,3,724,
        362,0,3880,3881,5,2,0,0,3881,3882,3,650,325,0,3882,649,1,0,0,0,3883,
        3884,3,14,7,0,3884,651,1,0,0,0,3885,3886,3,750,375,0,3886,3887,5,
        25,0,0,3887,3889,1,0,0,0,3888,3885,1,0,0,0,3888,3889,1,0,0,0,3889,
        3890,1,0,0,0,3890,3891,3,724,362,0,3891,653,1,0,0,0,3892,3893,3,
        742,371,0,3893,655,1,0,0,0,3894,3895,5,244,0,0,3895,3899,5,199,0,
        0,3896,3897,5,155,0,0,3897,3899,5,199,0,0,3898,3894,1,0,0,0,3898,
        3896,1,0,0,0,3899,657,1,0,0,0,3900,3901,5,135,0,0,3901,3902,5,27,
        0,0,3902,3903,3,800,400,0,3903,3904,5,28,0,0,3904,659,1,0,0,0,3905,
        3908,3,662,331,0,3906,3908,3,672,336,0,3907,3905,1,0,0,0,3907,3906,
        1,0,0,0,3908,661,1,0,0,0,3909,3910,3,734,367,0,3910,663,1,0,0,0,
        3911,3912,5,311,0,0,3912,3913,3,666,333,0,3913,665,1,0,0,0,3914,
        3919,3,668,334,0,3915,3916,5,26,0,0,3916,3918,3,668,334,0,3917,3915,
        1,0,0,0,3918,3921,1,0,0,0,3919,3917,1,0,0,0,3919,3920,1,0,0,0,3920,
        667,1,0,0,0,3921,3919,1,0,0,0,3922,3923,3,670,335,0,3923,3924,5,
        55,0,0,3924,3925,3,672,336,0,3925,669,1,0,0,0,3926,3927,3,662,331,
        0,3927,671,1,0,0,0,3928,3929,5,27,0,0,3929,3930,3,674,337,0,3930,
        3931,5,28,0,0,3931,673,1,0,0,0,3932,3934,3,676,338,0,3933,3932,1,
        0,0,0,3933,3934,1,0,0,0,3934,3936,1,0,0,0,3935,3937,3,678,339,0,
        3936,3935,1,0,0,0,3936,3937,1,0,0,0,3937,3939,1,0,0,0,3938,3940,
        3,680,340,0,3939,3938,1,0,0,0,3939,3940,1,0,0,0,3940,3942,1,0,0,
        0,3941,3943,3,682,341,0,3942,3941,1,0,0,0,3942,3943,1,0,0,0,3943,
        675,1,0,0,0,3944,3945,3,662,331,0,3945,677,1,0,0,0,3946,3948,5,215,
        0,0,3947,3949,5,80,0,0,3948,3947,1,0,0,0,3948,3949,1,0,0,0,3949,
        3950,1,0,0,0,3950,3951,5,69,0,0,3951,3952,3,130,65,0,3952,679,1,
        0,0,0,3953,3954,3,314,157,0,3954,681,1,0,0,0,3955,3956,3,684,342,
        0,3956,3958,3,686,343,0,3957,3959,3,692,346,0,3958,3957,1,0,0,0,
        3958,3959,1,0,0,0,3959,683,1,0,0,0,3960,3961,7,28,0,0,3961,685,1,
        0,0,0,3962,3965,3,690,345,0,3963,3965,3,688,344,0,3964,3962,1,0,
        0,0,3964,3963,1,0,0,0,3965,687,1,0,0,0,3966,3967,5,67,0,0,3967,3968,
        3,690,345,0,3968,3969,5,51,0,0,3969,3970,3,690,345,0,3970,689,1,
        0,0,0,3971,3972,5,90,0,0,3972,3979,5,255,0,0,3973,3976,3,14,7,0,
        3974,3976,5,293,0,0,3975,3973,1,0,0,0,3975,3974,1,0,0,0,3976,3977,
        1,0,0,0,3977,3979,7,29,0,0,3978,3971,1,0,0,0,3978,3975,1,0,0,0,3979,
        691,1,0,0,0,3980,3981,5,125,0,0,3981,3982,5,90,0,0,3982,3991,5,255,
        0,0,3983,3984,5,125,0,0,3984,3991,5,148,0,0,3985,3986,5,125,0,0,
        3986,3991,5,285,0,0,3987,3988,5,125,0,0,3988,3989,5,195,0,0,3989,
        3991,5,211,0,0,3990,3980,1,0,0,0,3990,3983,1,0,0,0,3990,3985,1,0,
        0,0,3990,3987,1,0,0,0,3991,693,1,0,0,0,3992,3993,5,301,0,0,3993,
        3994,3,750,375,0,3994,695,1,0,0,0,3995,3996,5,27,0,0,3996,3997,3,
        232,116,0,3997,3998,5,28,0,0,3998,4001,1,0,0,0,3999,4001,3,234,117,
        0,4000,3995,1,0,0,0,4000,3999,1,0,0,0,4001,697,1,0,0,0,4002,4003,
        3,148,74,0,4003,4006,5,2,0,0,4004,4007,3,14,7,0,4005,4007,3,696,
        348,0,4006,4004,1,0,0,0,4006,4005,1,0,0,0,4007,699,1,0,0,0,4008,
        4009,5,79,0,0,4009,701,1,0,0,0,4010,4011,5,253,0,0,4011,703,1,0,
        0,0,4012,4013,7,30,0,0,4013,705,1,0,0,0,4014,4017,3,704,352,0,4015,
        4017,3,762,381,0,4016,4014,1,0,0,0,4016,4015,1,0,0,0,4017,707,1,
        0,0,0,4018,4026,3,704,352,0,4019,4026,3,780,390,0,4020,4026,3,764,
        382,0,4021,4026,3,768,384,0,4022,4026,3,772,386,0,4023,4026,3,774,
        387,0,4024,4026,3,776,388,0,4025,4018,1,0,0,0,4025,4019,1,0,0,0,
        4025,4020,1,0,0,0,4025,4021,1,0,0,0,4025,4022,1,0,0,0,4025,4023,
        1,0,0,0,4025,4024,1,0,0,0,4026,709,1,0,0,0,4027,4034,3,704,352,0,
        4028,4034,3,780,390,0,4029,4034,3,770,385,0,4030,4034,3,772,386,
        0,4031,4034,3,774,387,0,4032,4034,3,776,388,0,4033,4027,1,0,0,0,
        4033,4028,1,0,0,0,4033,4029,1,0,0,0,4033,4030,1,0,0,0,4033,4031,
        1,0,0,0,4033,4032,1,0,0,0,4034,711,1,0,0,0,4035,4041,3,704,352,0,
        4036,4041,3,780,390,0,4037,4041,3,770,385,0,4038,4041,3,774,387,
        0,4039,4041,3,776,388,0,4040,4035,1,0,0,0,4040,4036,1,0,0,0,4040,
        4037,1,0,0,0,4040,4038,1,0,0,0,4040,4039,1,0,0,0,4041,713,1,0,0,
        0,4042,4051,3,704,352,0,4043,4051,3,780,390,0,4044,4051,3,764,382,
        0,4045,4051,3,766,383,0,4046,4051,3,768,384,0,4047,4051,3,770,385,
        0,4048,4051,3,772,386,0,4049,4051,3,776,388,0,4050,4042,1,0,0,0,
        4050,4043,1,0,0,0,4050,4044,1,0,0,0,4050,4045,1,0,0,0,4050,4046,
        1,0,0,0,4050,4047,1,0,0,0,4050,4048,1,0,0,0,4050,4049,1,0,0,0,4051,
        715,1,0,0,0,4052,4060,3,704,352,0,4053,4060,3,780,390,0,4054,4060,
        3,764,382,0,4055,4060,3,768,384,0,4056,4060,3,772,386,0,4057,4060,
        3,774,387,0,4058,4060,3,776,388,0,4059,4052,1,0,0,0,4059,4053,1,
        0,0,0,4059,4054,1,0,0,0,4059,4055,1,0,0,0,4059,4056,1,0,0,0,4059,
        4057,1,0,0,0,4059,4058,1,0,0,0,4060,717,1,0,0,0,4061,4069,3,704,
        352,0,4062,4069,3,780,390,0,4063,4069,3,766,383,0,4064,4069,3,770,
        385,0,4065,4069,3,772,386,0,4066,4069,3,774,387,0,4067,4069,3,776,
        388,0,4068,4061,1,0,0,0,4068,4062,1,0,0,0,4068,4063,1,0,0,0,4068,
        4064,1,0,0,0,4068,4065,1,0,0,0,4068,4066,1,0,0,0,4068,4067,1,0,0,
        0,4069,719,1,0,0,0,4070,4079,3,704,352,0,4071,4079,3,780,390,0,4072,
        4079,3,764,382,0,4073,4079,3,766,383,0,4074,4079,3,768,384,0,4075,
        4079,3,770,385,0,4076,4079,3,772,386,0,4077,4079,3,774,387,0,4078,
        4070,1,0,0,0,4078,4071,1,0,0,0,4078,4072,1,0,0,0,4078,4073,1,0,0,
        0,4078,4074,1,0,0,0,4078,4075,1,0,0,0,4078,4076,1,0,0,0,4078,4077,
        1,0,0,0,4079,721,1,0,0,0,4080,4083,3,704,352,0,4081,4083,3,778,389,
        0,4082,4080,1,0,0,0,4082,4081,1,0,0,0,4083,723,1,0,0,0,4084,4087,
        3,706,353,0,4085,4087,5,316,0,0,4086,4084,1,0,0,0,4086,4085,1,0,
        0,0,4087,725,1,0,0,0,4088,4091,3,752,376,0,4089,4091,5,316,0,0,4090,
        4088,1,0,0,0,4090,4089,1,0,0,0,4091,727,1,0,0,0,4092,4095,3,708,
        354,0,4093,4095,5,316,0,0,4094,4092,1,0,0,0,4094,4093,1,0,0,0,4095,
        729,1,0,0,0,4096,4099,3,710,355,0,4097,4099,5,316,0,0,4098,4096,
        1,0,0,0,4098,4097,1,0,0,0,4099,731,1,0,0,0,4100,4103,3,712,356,0,
        4101,4103,5,316,0,0,4102,4100,1,0,0,0,4102,4101,1,0,0,0,4103,733,
        1,0,0,0,4104,4107,3,714,357,0,4105,4107,5,316,0,0,4106,4104,1,0,
        0,0,4106,4105,1,0,0,0,4107,735,1,0,0,0,4108,4111,3,716,358,0,4109,
        4111,5,316,0,0,4110,4108,1,0,0,0,4110,4109,1,0,0,0,4111,737,1,0,
        0,0,4112,4115,3,718,359,0,4113,4115,5,316,0,0,4114,4112,1,0,0,0,
        4114,4113,1,0,0,0,4115,739,1,0,0,0,4116,4119,3,720,360,0,4117,4119,
        5,316,0,0,4118,4116,1,0,0,0,4118,4117,1,0,0,0,4119,741,1,0,0,0,4120,
        4123,3,704,352,0,4121,4123,5,316,0,0,4122,4120,1,0,0,0,4122,4121,
        1,0,0,0,4123,743,1,0,0,0,4124,4127,3,722,361,0,4125,4127,5,316,0,
        0,4126,4124,1,0,0,0,4126,4125,1,0,0,0,4127,745,1,0,0,0,4128,4132,
        3,724,362,0,4129,4130,5,226,0,0,4130,4132,5,176,0,0,4131,4128,1,
        0,0,0,4131,4129,1,0,0,0,4132,747,1,0,0,0,4133,4134,3,724,362,0,4134,
        4135,5,25,0,0,4135,4137,1,0,0,0,4136,4133,1,0,0,0,4136,4137,1,0,
        0,0,4137,749,1,0,0,0,4138,4139,3,724,362,0,4139,4140,5,30,0,0,4140,
        4142,1,0,0,0,4141,4138,1,0,0,0,4141,4142,1,0,0,0,4142,4145,1,0,0,
        0,4143,4146,3,116,58,0,4144,4146,5,20,0,0,4145,4143,1,0,0,0,4145,
        4144,1,0,0,0,4146,751,1,0,0,0,4147,4150,3,706,353,0,4148,4150,3,
        782,391,0,4149,4147,1,0,0,0,4149,4148,1,0,0,0,4150,753,1,0,0,0,4151,
        4152,3,726,363,0,4152,4153,5,25,0,0,4153,4155,1,0,0,0,4154,4151,
        1,0,0,0,4154,4155,1,0,0,0,4155,755,1,0,0,0,4156,4158,5,31,0,0,4157,
        4156,1,0,0,0,4157,4158,1,0,0,0,4158,4159,1,0,0,0,4159,4160,3,726,
        363,0,4160,757,1,0,0,0,4161,4164,3,736,368,0,4162,4164,3,782,391,
        0,4163,4161,1,0,0,0,4163,4162,1,0,0,0,4164,759,1,0,0,0,4165,4167,
        5,31,0,0,4166,4165,1,0,0,0,4166,4167,1,0,0,0,4167,4168,1,0,0,0,4168,
        4169,3,758,379,0,4169,761,1,0,0,0,4170,4179,3,780,390,0,4171,4179,
        3,764,382,0,4172,4179,3,766,383,0,4173,4179,3,768,384,0,4174,4179,
        3,770,385,0,4175,4179,3,772,386,0,4176,4179,3,774,387,0,4177,4179,
        3,776,388,0,4178,4170,1,0,0,0,4178,4171,1,0,0,0,4178,4172,1,0,0,
        0,4178,4173,1,0,0,0,4178,4174,1,0,0,0,4178,4175,1,0,0,0,4178,4176,
        1,0,0,0,4178,4177,1,0,0,0,4179,763,1,0,0,0,4180,4181,7,31,0,0,4181,
        765,1,0,0,0,4182,4183,7,32,0,0,4183,767,1,0,0,0,4184,4185,7,33,0,
        0,4185,769,1,0,0,0,4186,4187,5,77,0,0,4187,771,1,0,0,0,4188,4189,
        5,80,0,0,4189,773,1,0,0,0,4190,4191,7,28,0,0,4191,775,1,0,0,0,4192,
        4193,7,27,0,0,4193,777,1,0,0,0,4194,4195,7,34,0,0,4195,779,1,0,0,
        0,4196,4197,7,35,0,0,4197,781,1,0,0,0,4198,4199,7,36,0,0,4199,783,
        1,0,0,0,4200,4201,7,37,0,0,4201,785,1,0,0,0,4202,4203,5,321,0,0,
        4203,787,1,0,0,0,4204,4205,7,38,0,0,4205,789,1,0,0,0,4206,4212,3,
        792,396,0,4207,4208,5,223,0,0,4208,4209,5,52,0,0,4209,4210,5,319,
        0,0,4210,4212,3,4,2,0,4211,4206,1,0,0,0,4211,4207,1,0,0,0,4212,791,
        1,0,0,0,4213,4215,5,24,0,0,4214,4213,1,0,0,0,4215,4218,1,0,0,0,4216,
        4214,1,0,0,0,4216,4217,1,0,0,0,4217,4219,1,0,0,0,4218,4216,1,0,0,
        0,4219,4228,3,794,397,0,4220,4222,5,24,0,0,4221,4220,1,0,0,0,4222,
        4223,1,0,0,0,4223,4221,1,0,0,0,4223,4224,1,0,0,0,4224,4225,1,0,0,
        0,4225,4227,3,794,397,0,4226,4221,1,0,0,0,4227,4230,1,0,0,0,4228,
        4226,1,0,0,0,4228,4229,1,0,0,0,4229,4234,1,0,0,0,4230,4228,1,0,0,
        0,4231,4233,5,24,0,0,4232,4231,1,0,0,0,4233,4236,1,0,0,0,4234,4232,
        1,0,0,0,4234,4235,1,0,0,0,4235,4237,1,0,0,0,4236,4234,1,0,0,0,4237,
        4238,5,0,0,1,4238,793,1,0,0,0,4239,4242,5,129,0,0,4240,4241,5,1,
        0,0,4241,4243,5,222,0,0,4242,4240,1,0,0,0,4242,4243,1,0,0,0,4243,
        4245,1,0,0,0,4244,4239,1,0,0,0,4244,4245,1,0,0,0,4245,4246,1,0,0,
        0,4246,4247,3,796,398,0,4247,795,1,0,0,0,4248,4262,3,224,112,0,4249,
        4262,3,232,116,0,4250,4262,3,698,349,0,4251,4262,3,694,347,0,4252,
        4262,3,366,183,0,4253,4262,3,210,105,0,4254,4262,3,214,107,0,4255,
        4262,3,216,108,0,4256,4262,3,222,111,0,4257,4262,3,564,282,0,4258,
        4262,3,568,284,0,4259,4262,3,570,285,0,4260,4262,3,370,185,0,4261,
        4248,1,0,0,0,4261,4249,1,0,0,0,4261,4250,1,0,0,0,4261,4251,1,0,0,
        0,4261,4252,1,0,0,0,4261,4253,1,0,0,0,4261,4254,1,0,0,0,4261,4255,
        1,0,0,0,4261,4256,1,0,0,0,4261,4257,1,0,0,0,4261,4258,1,0,0,0,4261,
        4259,1,0,0,0,4261,4260,1,0,0,0,4262,797,1,0,0,0,4263,4264,5,55,0,
        0,4264,4265,3,582,291,0,4265,799,1,0,0,0,4266,4267,5,310,0,0,4267,
        4268,3,14,7,0,4268,801,1,0,0,0,4269,4270,5,142,0,0,4270,4271,3,338,
        169,0,4271,803,1,0,0,0,4272,4275,3,434,217,0,4273,4275,3,442,221,
        0,4274,4272,1,0,0,0,4274,4273,1,0,0,0,4275,805,1,0,0,0,476,811,816,
        823,828,834,842,850,857,861,869,874,879,881,929,936,940,947,955,
        960,964,970,976,979,983,991,995,998,1002,1013,1018,1020,1029,1050,
        1055,1064,1066,1073,1081,1089,1096,1106,1108,1110,1115,1119,1125,
        1131,1135,1139,1142,1149,1155,1159,1164,1167,1181,1186,1189,1203,
        1210,1221,1232,1252,1258,1263,1267,1281,1283,1290,1296,1307,1315,
        1321,1328,1336,1349,1355,1359,1362,1364,1372,1380,1386,1392,1398,
        1401,1410,1419,1426,1434,1447,1454,1458,1465,1469,1474,1481,1488,
        1491,1498,1502,1512,1535,1541,1545,1552,1558,1565,1569,1573,1579,
        1584,1593,1596,1602,1607,1615,1622,1644,1648,1650,1654,1663,1667,
        1669,1673,1682,1686,1724,1728,1748,1751,1757,1777,1782,1788,1793,
        1796,1800,1827,1835,1838,1845,1858,1862,1874,1887,1892,1899,1903,
        1910,1919,1928,1936,1940,1944,1951,1953,1956,1961,1966,1970,1977,
        1984,1988,1991,1995,1999,2001,2012,2021,2026,2032,2037,2040,2044,
        2048,2051,2055,2059,2067,2071,2075,2079,2082,2085,2089,2092,2095,
        2100,2103,2106,2109,2123,2125,2136,2146,2156,2159,2166,2190,2201,
        2207,2211,2215,2219,2223,2227,2231,2235,2241,2248,2258,2269,2282,
        2298,2308,2328,2334,2341,2348,2356,2365,2402,2404,2407,2412,2416,
        2420,2426,2432,2436,2441,2446,2448,2452,2457,2460,2462,2466,2477,
        2488,2499,2503,2507,2511,2514,2518,2521,2527,2536,2539,2553,2559,
        2572,2579,2584,2591,2598,2607,2612,2620,2635,2641,2649,2672,2679,
        2687,2708,2716,2724,2734,2743,2748,2755,2765,2770,2779,2783,2787,
        2790,2793,2796,2799,2807,2816,2833,2856,2874,2885,2893,2903,2908,
        2912,2918,2949,2961,2998,3006,3009,3013,3017,3027,3040,3053,3058,
        3075,3079,3083,3092,3103,3108,3112,3116,3119,3135,3150,3165,3168,
        3180,3183,3199,3205,3213,3223,3227,3235,3241,3247,3259,3263,3265,
        3277,3281,3286,3292,3299,3303,3307,3310,3323,3332,3336,3341,3347,
        3356,3365,3382,3386,3390,3392,3396,3403,3407,3411,3413,3425,3441,
        3457,3472,3479,3487,3498,3505,3510,3516,3519,3522,3529,3532,3535,
        3544,3549,3552,3562,3566,3568,3575,3578,3582,3584,3587,3592,3595,
        3600,3610,3615,3626,3630,3634,3636,3640,3645,3653,3656,3659,3662,
        3667,3673,3676,3680,3686,3694,3697,3704,3708,3711,3715,3722,3743,
        3752,3755,3763,3783,3791,3799,3808,3826,3843,3857,3876,3888,3898,
        3907,3919,3933,3936,3939,3942,3948,3958,3964,3975,3978,3990,4000,
        4006,4016,4025,4033,4040,4050,4059,4068,4078,4082,4086,4090,4094,
        4098,4102,4106,4110,4114,4118,4122,4126,4131,4136,4141,4145,4149,
        4154,4157,4163,4166,4178,4211,4216,4223,4228,4234,4242,4244,4261,
        4274
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!YQLParser.__ATN) {
            YQLParser.__ATN = new antlr.ATNDeserializer().deserialize(YQLParser._serializedATN);
        }

        return YQLParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(YQLParser.literalNames, YQLParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return YQLParser.vocabulary;
    }

    private static readonly decisionsToDFA = YQLParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class Sql_queryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_list(): Sql_stmt_listContext | null {
        return this.getRuleContext(0, Sql_stmt_listContext);
    }
    public PRAGMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRAGMA, 0);
    }
    public ANSI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANSI, 0);
    }
    public DIGITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIGITS, 0);
    }
    public ansi_sql_stmt_list(): Ansi_sql_stmt_listContext | null {
        return this.getRuleContext(0, Ansi_sql_stmt_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_query;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_query) {
            return visitor.visitSql_query(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt(): Sql_stmtContext[];
    public sql_stmt(i: number): Sql_stmtContext | null;
    public sql_stmt(i?: number): Sql_stmtContext[] | Sql_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_stmtContext);
        }

        return this.getRuleContext(i, Sql_stmtContext);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(YQLParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt_list) {
            return visitor.visitSql_stmt_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Ansi_sql_stmt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(YQLParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ansi_sql_stmt_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAnsi_sql_stmt_list) {
            return visitor.visitAnsi_sql_stmt_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Lambda_bodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RETURN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public lambda_stmt(): Lambda_stmtContext[];
    public lambda_stmt(i: number): Lambda_stmtContext | null;
    public lambda_stmt(i?: number): Lambda_stmtContext[] | Lambda_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Lambda_stmtContext);
        }

        return this.getRuleContext(i, Lambda_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_lambda_body;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLambda_body) {
            return visitor.visitLambda_body(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Lambda_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_nodes_stmt(): Named_nodes_stmtContext | null {
        return this.getRuleContext(0, Named_nodes_stmtContext);
    }
    public import_stmt(): Import_stmtContext | null {
        return this.getRuleContext(0, Import_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_lambda_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLambda_stmt) {
            return visitor.visitLambda_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_core(): Sql_stmt_coreContext {
        return this.getRuleContext(0, Sql_stmt_coreContext)!;
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPLAIN, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUERY, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLAN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt) {
            return visitor.visitSql_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmt_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pragma_stmt(): Pragma_stmtContext | null {
        return this.getRuleContext(0, Pragma_stmtContext);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public named_nodes_stmt(): Named_nodes_stmtContext | null {
        return this.getRuleContext(0, Named_nodes_stmtContext);
    }
    public create_table_stmt(): Create_table_stmtContext | null {
        return this.getRuleContext(0, Create_table_stmtContext);
    }
    public drop_table_stmt(): Drop_table_stmtContext | null {
        return this.getRuleContext(0, Drop_table_stmtContext);
    }
    public use_stmt(): Use_stmtContext | null {
        return this.getRuleContext(0, Use_stmtContext);
    }
    public into_table_stmt(): Into_table_stmtContext | null {
        return this.getRuleContext(0, Into_table_stmtContext);
    }
    public commit_stmt(): Commit_stmtContext | null {
        return this.getRuleContext(0, Commit_stmtContext);
    }
    public update_stmt(): Update_stmtContext | null {
        return this.getRuleContext(0, Update_stmtContext);
    }
    public delete_stmt(): Delete_stmtContext | null {
        return this.getRuleContext(0, Delete_stmtContext);
    }
    public rollback_stmt(): Rollback_stmtContext | null {
        return this.getRuleContext(0, Rollback_stmtContext);
    }
    public declare_stmt(): Declare_stmtContext | null {
        return this.getRuleContext(0, Declare_stmtContext);
    }
    public import_stmt(): Import_stmtContext | null {
        return this.getRuleContext(0, Import_stmtContext);
    }
    public export_stmt(): Export_stmtContext | null {
        return this.getRuleContext(0, Export_stmtContext);
    }
    public alter_table_stmt(): Alter_table_stmtContext | null {
        return this.getRuleContext(0, Alter_table_stmtContext);
    }
    public alter_external_table_stmt(): Alter_external_table_stmtContext | null {
        return this.getRuleContext(0, Alter_external_table_stmtContext);
    }
    public do_stmt(): Do_stmtContext | null {
        return this.getRuleContext(0, Do_stmtContext);
    }
    public define_action_or_subquery_stmt(): Define_action_or_subquery_stmtContext | null {
        return this.getRuleContext(0, Define_action_or_subquery_stmtContext);
    }
    public if_stmt(): If_stmtContext | null {
        return this.getRuleContext(0, If_stmtContext);
    }
    public for_stmt(): For_stmtContext | null {
        return this.getRuleContext(0, For_stmtContext);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public create_user_stmt(): Create_user_stmtContext | null {
        return this.getRuleContext(0, Create_user_stmtContext);
    }
    public alter_user_stmt(): Alter_user_stmtContext | null {
        return this.getRuleContext(0, Alter_user_stmtContext);
    }
    public create_group_stmt(): Create_group_stmtContext | null {
        return this.getRuleContext(0, Create_group_stmtContext);
    }
    public alter_group_stmt(): Alter_group_stmtContext | null {
        return this.getRuleContext(0, Alter_group_stmtContext);
    }
    public drop_role_stmt(): Drop_role_stmtContext | null {
        return this.getRuleContext(0, Drop_role_stmtContext);
    }
    public create_object_stmt(): Create_object_stmtContext | null {
        return this.getRuleContext(0, Create_object_stmtContext);
    }
    public alter_object_stmt(): Alter_object_stmtContext | null {
        return this.getRuleContext(0, Alter_object_stmtContext);
    }
    public drop_object_stmt(): Drop_object_stmtContext | null {
        return this.getRuleContext(0, Drop_object_stmtContext);
    }
    public create_external_data_source_stmt(): Create_external_data_source_stmtContext | null {
        return this.getRuleContext(0, Create_external_data_source_stmtContext);
    }
    public alter_external_data_source_stmt(): Alter_external_data_source_stmtContext | null {
        return this.getRuleContext(0, Alter_external_data_source_stmtContext);
    }
    public drop_external_data_source_stmt(): Drop_external_data_source_stmtContext | null {
        return this.getRuleContext(0, Drop_external_data_source_stmtContext);
    }
    public create_replication_stmt(): Create_replication_stmtContext | null {
        return this.getRuleContext(0, Create_replication_stmtContext);
    }
    public drop_replication_stmt(): Drop_replication_stmtContext | null {
        return this.getRuleContext(0, Drop_replication_stmtContext);
    }
    public create_topic_stmt(): Create_topic_stmtContext | null {
        return this.getRuleContext(0, Create_topic_stmtContext);
    }
    public alter_topic_stmt(): Alter_topic_stmtContext | null {
        return this.getRuleContext(0, Alter_topic_stmtContext);
    }
    public drop_topic_stmt(): Drop_topic_stmtContext | null {
        return this.getRuleContext(0, Drop_topic_stmtContext);
    }
    public grant_permissions_stmt(): Grant_permissions_stmtContext | null {
        return this.getRuleContext(0, Grant_permissions_stmtContext);
    }
    public revoke_permissions_stmt(): Revoke_permissions_stmtContext | null {
        return this.getRuleContext(0, Revoke_permissions_stmtContext);
    }
    public alter_table_store_stmt(): Alter_table_store_stmtContext | null {
        return this.getRuleContext(0, Alter_table_store_stmtContext);
    }
    public upsert_object_stmt(): Upsert_object_stmtContext | null {
        return this.getRuleContext(0, Upsert_object_stmtContext);
    }
    public create_view_stmt(): Create_view_stmtContext | null {
        return this.getRuleContext(0, Create_view_stmtContext);
    }
    public drop_view_stmt(): Drop_view_stmtContext | null {
        return this.getRuleContext(0, Drop_view_stmtContext);
    }
    public alter_replication_stmt(): Alter_replication_stmtContext | null {
        return this.getRuleContext(0, Alter_replication_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_core;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt_core) {
            return visitor.visitSql_stmt_core(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public or_subexpr(): Or_subexprContext[];
    public or_subexpr(i: number): Or_subexprContext | null;
    public or_subexpr(i?: number): Or_subexprContext[] | Or_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Or_subexprContext);
        }

        return this.getRuleContext(i, Or_subexprContext);
    }
    public OR(): antlr.TerminalNode[];
    public OR(i: number): antlr.TerminalNode | null;
    public OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.OR);
    	} else {
    		return this.getToken(YQLParser.OR, i);
    	}
    }
    public type_name_composite(): Type_name_compositeContext | null {
        return this.getRuleContext(0, Type_name_compositeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExpr) {
            return visitor.visitExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Or_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public and_subexpr(): And_subexprContext[];
    public and_subexpr(i: number): And_subexprContext | null;
    public and_subexpr(i?: number): And_subexprContext[] | And_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(And_subexprContext);
        }

        return this.getRuleContext(i, And_subexprContext);
    }
    public AND(): antlr.TerminalNode[];
    public AND(i: number): antlr.TerminalNode | null;
    public AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.AND);
    	} else {
    		return this.getToken(YQLParser.AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_or_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOr_subexpr) {
            return visitor.visitOr_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class And_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xor_subexpr(): Xor_subexprContext[];
    public xor_subexpr(i: number): Xor_subexprContext | null;
    public xor_subexpr(i?: number): Xor_subexprContext[] | Xor_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xor_subexprContext);
        }

        return this.getRuleContext(i, Xor_subexprContext);
    }
    public XOR(): antlr.TerminalNode[];
    public XOR(i: number): antlr.TerminalNode | null;
    public XOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.XOR);
    	} else {
    		return this.getToken(YQLParser.XOR, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_and_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAnd_subexpr) {
            return visitor.visitAnd_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xor_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public eq_subexpr(): Eq_subexprContext {
        return this.getRuleContext(0, Eq_subexprContext)!;
    }
    public cond_expr(): Cond_exprContext | null {
        return this.getRuleContext(0, Cond_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_xor_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitXor_subexpr) {
            return visitor.visitXor_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Distinct_from_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(YQLParser.IS, 0)!;
    }
    public DISTINCT(): antlr.TerminalNode {
        return this.getToken(YQLParser.DISTINCT, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(YQLParser.FROM, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_distinct_from_op;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDistinct_from_op) {
            return visitor.visitDistinct_from_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cond_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public match_op(): Match_opContext | null {
        return this.getRuleContext(0, Match_opContext);
    }
    public eq_subexpr(): Eq_subexprContext[];
    public eq_subexpr(i: number): Eq_subexprContext | null;
    public eq_subexpr(i?: number): Eq_subexprContext[] | Eq_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Eq_subexprContext);
        }

        return this.getRuleContext(i, Eq_subexprContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ESCAPE, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IN, 0);
    }
    public in_expr(): In_exprContext | null {
        return this.getRuleContext(0, In_exprContext);
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMPACT, 0);
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ISNULL, 0);
    }
    public NOTNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOTNULL, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IS, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BETWEEN, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AND, 0);
    }
    public SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYMMETRIC, 0);
    }
    public ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYMMETRIC, 0);
    }
    public EQUALS(): antlr.TerminalNode[];
    public EQUALS(i: number): antlr.TerminalNode | null;
    public EQUALS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.EQUALS);
    	} else {
    		return this.getToken(YQLParser.EQUALS, i);
    	}
    }
    public EQUALS2(): antlr.TerminalNode[];
    public EQUALS2(i: number): antlr.TerminalNode | null;
    public EQUALS2(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.EQUALS2);
    	} else {
    		return this.getToken(YQLParser.EQUALS2, i);
    	}
    }
    public NOT_EQUALS(): antlr.TerminalNode[];
    public NOT_EQUALS(i: number): antlr.TerminalNode | null;
    public NOT_EQUALS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.NOT_EQUALS);
    	} else {
    		return this.getToken(YQLParser.NOT_EQUALS, i);
    	}
    }
    public NOT_EQUALS2(): antlr.TerminalNode[];
    public NOT_EQUALS2(i: number): antlr.TerminalNode | null;
    public NOT_EQUALS2(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.NOT_EQUALS2);
    	} else {
    		return this.getToken(YQLParser.NOT_EQUALS2, i);
    	}
    }
    public distinct_from_op(): Distinct_from_opContext[];
    public distinct_from_op(i: number): Distinct_from_opContext | null;
    public distinct_from_op(i?: number): Distinct_from_opContext[] | Distinct_from_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Distinct_from_opContext);
        }

        return this.getRuleContext(i, Distinct_from_opContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cond_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCond_expr) {
            return visitor.visitCond_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Match_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIKE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ILIKE, 0);
    }
    public GLOB(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GLOB, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REGEXP, 0);
    }
    public RLIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RLIKE, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_match_op;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitMatch_op) {
            return visitor.visitMatch_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Eq_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public neq_subexpr(): Neq_subexprContext[];
    public neq_subexpr(i: number): Neq_subexprContext | null;
    public neq_subexpr(i?: number): Neq_subexprContext[] | Neq_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Neq_subexprContext);
        }

        return this.getRuleContext(i, Neq_subexprContext);
    }
    public LESS(): antlr.TerminalNode[];
    public LESS(i: number): antlr.TerminalNode | null;
    public LESS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.LESS);
    	} else {
    		return this.getToken(YQLParser.LESS, i);
    	}
    }
    public LESS_OR_EQ(): antlr.TerminalNode[];
    public LESS_OR_EQ(i: number): antlr.TerminalNode | null;
    public LESS_OR_EQ(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.LESS_OR_EQ);
    	} else {
    		return this.getToken(YQLParser.LESS_OR_EQ, i);
    	}
    }
    public GREATER(): antlr.TerminalNode[];
    public GREATER(i: number): antlr.TerminalNode | null;
    public GREATER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER);
    	} else {
    		return this.getToken(YQLParser.GREATER, i);
    	}
    }
    public GREATER_OR_EQ(): antlr.TerminalNode[];
    public GREATER_OR_EQ(i: number): antlr.TerminalNode | null;
    public GREATER_OR_EQ(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER_OR_EQ);
    	} else {
    		return this.getToken(YQLParser.GREATER_OR_EQ, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_eq_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitEq_subexpr) {
            return visitor.visitEq_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Shift_rightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GREATER(): antlr.TerminalNode[];
    public GREATER(i: number): antlr.TerminalNode | null;
    public GREATER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER);
    	} else {
    		return this.getToken(YQLParser.GREATER, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_shift_right;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitShift_right) {
            return visitor.visitShift_right(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Rot_rightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GREATER(): antlr.TerminalNode[];
    public GREATER(i: number): antlr.TerminalNode | null;
    public GREATER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER);
    	} else {
    		return this.getToken(YQLParser.GREATER, i);
    	}
    }
    public PIPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.PIPE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_rot_right;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRot_right) {
            return visitor.visitRot_right(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Double_questionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_double_question;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDouble_question) {
            return visitor.visitDouble_question(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Neq_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bit_subexpr(): Bit_subexprContext[];
    public bit_subexpr(i: number): Bit_subexprContext | null;
    public bit_subexpr(i?: number): Bit_subexprContext[] | Bit_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bit_subexprContext);
        }

        return this.getRuleContext(i, Bit_subexprContext);
    }
    public SHIFT_LEFT(): antlr.TerminalNode[];
    public SHIFT_LEFT(i: number): antlr.TerminalNode | null;
    public SHIFT_LEFT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SHIFT_LEFT);
    	} else {
    		return this.getToken(YQLParser.SHIFT_LEFT, i);
    	}
    }
    public shift_right(): Shift_rightContext[];
    public shift_right(i: number): Shift_rightContext | null;
    public shift_right(i?: number): Shift_rightContext[] | Shift_rightContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Shift_rightContext);
        }

        return this.getRuleContext(i, Shift_rightContext);
    }
    public ROT_LEFT(): antlr.TerminalNode[];
    public ROT_LEFT(i: number): antlr.TerminalNode | null;
    public ROT_LEFT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ROT_LEFT);
    	} else {
    		return this.getToken(YQLParser.ROT_LEFT, i);
    	}
    }
    public rot_right(): Rot_rightContext[];
    public rot_right(i: number): Rot_rightContext | null;
    public rot_right(i?: number): Rot_rightContext[] | Rot_rightContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Rot_rightContext);
        }

        return this.getRuleContext(i, Rot_rightContext);
    }
    public AMPERSAND(): antlr.TerminalNode[];
    public AMPERSAND(i: number): antlr.TerminalNode | null;
    public AMPERSAND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.AMPERSAND);
    	} else {
    		return this.getToken(YQLParser.AMPERSAND, i);
    	}
    }
    public PIPE(): antlr.TerminalNode[];
    public PIPE(i: number): antlr.TerminalNode | null;
    public PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PIPE);
    	} else {
    		return this.getToken(YQLParser.PIPE, i);
    	}
    }
    public CARET(): antlr.TerminalNode[];
    public CARET(i: number): antlr.TerminalNode | null;
    public CARET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.CARET);
    	} else {
    		return this.getToken(YQLParser.CARET, i);
    	}
    }
    public double_question(): Double_questionContext | null {
        return this.getRuleContext(0, Double_questionContext);
    }
    public neq_subexpr(): Neq_subexprContext | null {
        return this.getRuleContext(0, Neq_subexprContext);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_neq_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNeq_subexpr) {
            return visitor.visitNeq_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Bit_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public add_subexpr(): Add_subexprContext[];
    public add_subexpr(i: number): Add_subexprContext | null;
    public add_subexpr(i?: number): Add_subexprContext[] | Add_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Add_subexprContext);
        }

        return this.getRuleContext(i, Add_subexprContext);
    }
    public PLUS(): antlr.TerminalNode[];
    public PLUS(i: number): antlr.TerminalNode | null;
    public PLUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PLUS);
    	} else {
    		return this.getToken(YQLParser.PLUS, i);
    	}
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.MINUS);
    	} else {
    		return this.getToken(YQLParser.MINUS, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bit_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBit_subexpr) {
            return visitor.visitBit_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Add_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public mul_subexpr(): Mul_subexprContext[];
    public mul_subexpr(i: number): Mul_subexprContext | null;
    public mul_subexpr(i?: number): Mul_subexprContext[] | Mul_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Mul_subexprContext);
        }

        return this.getRuleContext(i, Mul_subexprContext);
    }
    public ASTERISK(): antlr.TerminalNode[];
    public ASTERISK(i: number): antlr.TerminalNode | null;
    public ASTERISK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ASTERISK);
    	} else {
    		return this.getToken(YQLParser.ASTERISK, i);
    	}
    }
    public SLASH(): antlr.TerminalNode[];
    public SLASH(i: number): antlr.TerminalNode | null;
    public SLASH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SLASH);
    	} else {
    		return this.getToken(YQLParser.SLASH, i);
    	}
    }
    public PERCENT(): antlr.TerminalNode[];
    public PERCENT(i: number): antlr.TerminalNode | null;
    public PERCENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PERCENT);
    	} else {
    		return this.getToken(YQLParser.PERCENT, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_add_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAdd_subexpr) {
            return visitor.visitAdd_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Mul_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public con_subexpr(): Con_subexprContext[];
    public con_subexpr(i: number): Con_subexprContext | null;
    public con_subexpr(i?: number): Con_subexprContext[] | Con_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Con_subexprContext);
        }

        return this.getRuleContext(i, Con_subexprContext);
    }
    public DOUBLE_PIPE(): antlr.TerminalNode[];
    public DOUBLE_PIPE(i: number): antlr.TerminalNode | null;
    public DOUBLE_PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DOUBLE_PIPE);
    	} else {
    		return this.getToken(YQLParser.DOUBLE_PIPE, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_mul_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitMul_subexpr) {
            return visitor.visitMul_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Con_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_subexpr(): Unary_subexprContext {
        return this.getRuleContext(0, Unary_subexprContext)!;
    }
    public unary_op(): Unary_opContext | null {
        return this.getRuleContext(0, Unary_opContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_con_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCon_subexpr) {
            return visitor.visitCon_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unary_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MINUS, 0);
    }
    public TILDA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TILDA, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_op;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUnary_op) {
            return visitor.visitUnary_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unary_subexpr_suffixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public key_expr(): Key_exprContext[];
    public key_expr(i: number): Key_exprContext | null;
    public key_expr(i?: number): Key_exprContext[] | Key_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Key_exprContext);
        }

        return this.getRuleContext(i, Key_exprContext);
    }
    public invoke_expr(): Invoke_exprContext[];
    public invoke_expr(i: number): Invoke_exprContext | null;
    public invoke_expr(i?: number): Invoke_exprContext[] | Invoke_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Invoke_exprContext);
        }

        return this.getRuleContext(i, Invoke_exprContext);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLLATE, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DOT);
    	} else {
    		return this.getToken(YQLParser.DOT, i);
    	}
    }
    public bind_parameter(): Bind_parameterContext[];
    public bind_parameter(i: number): Bind_parameterContext | null;
    public bind_parameter(i?: number): Bind_parameterContext[] | Bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bind_parameterContext);
        }

        return this.getRuleContext(i, Bind_parameterContext);
    }
    public DIGITS(): antlr.TerminalNode[];
    public DIGITS(i: number): antlr.TerminalNode | null;
    public DIGITS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DIGITS);
    	} else {
    		return this.getToken(YQLParser.DIGITS, i);
    	}
    }
    public an_id_or_type(): An_id_or_typeContext[];
    public an_id_or_type(i: number): An_id_or_typeContext | null;
    public an_id_or_type(i?: number): An_id_or_typeContext[] | An_id_or_typeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_or_typeContext);
        }

        return this.getRuleContext(i, An_id_or_typeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_subexpr_suffix;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUnary_subexpr_suffix) {
            return visitor.visitUnary_subexpr_suffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unary_casual_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_subexpr_suffix(): Unary_subexpr_suffixContext {
        return this.getRuleContext(0, Unary_subexpr_suffixContext)!;
    }
    public id_expr(): Id_exprContext | null {
        return this.getRuleContext(0, Id_exprContext);
    }
    public atom_expr(): Atom_exprContext | null {
        return this.getRuleContext(0, Atom_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_casual_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUnary_casual_subexpr) {
            return visitor.visitUnary_casual_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class In_unary_casual_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_subexpr_suffix(): Unary_subexpr_suffixContext {
        return this.getRuleContext(0, Unary_subexpr_suffixContext)!;
    }
    public id_expr_in(): Id_expr_inContext | null {
        return this.getRuleContext(0, Id_expr_inContext);
    }
    public in_atom_expr(): In_atom_exprContext | null {
        return this.getRuleContext(0, In_atom_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_unary_casual_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIn_unary_casual_subexpr) {
            return visitor.visitIn_unary_casual_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unary_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_casual_subexpr(): Unary_casual_subexprContext | null {
        return this.getRuleContext(0, Unary_casual_subexprContext);
    }
    public json_api_expr(): Json_api_exprContext | null {
        return this.getRuleContext(0, Json_api_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUnary_subexpr) {
            return visitor.visitUnary_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class In_unary_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public in_unary_casual_subexpr(): In_unary_casual_subexprContext | null {
        return this.getRuleContext(0, In_unary_casual_subexprContext);
    }
    public json_api_expr(): Json_api_exprContext | null {
        return this.getRuleContext(0, Json_api_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_unary_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIn_unary_subexpr) {
            return visitor.visitIn_unary_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class List_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.LBRACE_SQUARE, 0)!;
    }
    public RBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RBRACE_SQUARE, 0)!;
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_list_literal;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitList_literal) {
            return visitor.visitList_literal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Expr_dict_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COLON(): antlr.TerminalNode[];
    public COLON(i: number): antlr.TerminalNode | null;
    public COLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COLON);
    	} else {
    		return this.getToken(YQLParser.COLON, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr_dict_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExpr_dict_list) {
            return visitor.visitExpr_dict_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Dict_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE_CURLY(): antlr.TerminalNode {
        return this.getToken(YQLParser.LBRACE_CURLY, 0)!;
    }
    public RBRACE_CURLY(): antlr.TerminalNode {
        return this.getToken(YQLParser.RBRACE_CURLY, 0)!;
    }
    public expr_dict_list(): Expr_dict_listContext | null {
        return this.getRuleContext(0, Expr_dict_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_dict_literal;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDict_literal) {
            return visitor.visitDict_literal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Expr_struct_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COLON(): antlr.TerminalNode[];
    public COLON(i: number): antlr.TerminalNode | null;
    public COLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COLON);
    	} else {
    		return this.getToken(YQLParser.COLON, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr_struct_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExpr_struct_list) {
            return visitor.visitExpr_struct_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Struct_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRUCT_OPEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRUCT_OPEN, 0)!;
    }
    public STRUCT_CLOSE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRUCT_CLOSE, 0)!;
    }
    public expr_struct_list(): Expr_struct_listContext | null {
        return this.getRuleContext(0, Expr_struct_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_struct_literal;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitStruct_literal) {
            return visitor.visitStruct_literal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Atom_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal_value(): Literal_valueContext | null {
        return this.getRuleContext(0, Literal_valueContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public lambda(): LambdaContext | null {
        return this.getRuleContext(0, LambdaContext);
    }
    public cast_expr(): Cast_exprContext | null {
        return this.getRuleContext(0, Cast_exprContext);
    }
    public exists_expr(): Exists_exprContext | null {
        return this.getRuleContext(0, Exists_exprContext);
    }
    public case_expr(): Case_exprContext | null {
        return this.getRuleContext(0, Case_exprContext);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NAMESPACE, 0);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public value_constructor(): Value_constructorContext | null {
        return this.getRuleContext(0, Value_constructorContext);
    }
    public bitcast_expr(): Bitcast_exprContext | null {
        return this.getRuleContext(0, Bitcast_exprContext);
    }
    public list_literal(): List_literalContext | null {
        return this.getRuleContext(0, List_literalContext);
    }
    public dict_literal(): Dict_literalContext | null {
        return this.getRuleContext(0, Dict_literalContext);
    }
    public struct_literal(): Struct_literalContext | null {
        return this.getRuleContext(0, Struct_literalContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_atom_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAtom_expr) {
            return visitor.visitAtom_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class In_atom_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal_value(): Literal_valueContext | null {
        return this.getRuleContext(0, Literal_valueContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public lambda(): LambdaContext | null {
        return this.getRuleContext(0, LambdaContext);
    }
    public cast_expr(): Cast_exprContext | null {
        return this.getRuleContext(0, Cast_exprContext);
    }
    public case_expr(): Case_exprContext | null {
        return this.getRuleContext(0, Case_exprContext);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NAMESPACE, 0);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public value_constructor(): Value_constructorContext | null {
        return this.getRuleContext(0, Value_constructorContext);
    }
    public bitcast_expr(): Bitcast_exprContext | null {
        return this.getRuleContext(0, Bitcast_exprContext);
    }
    public list_literal(): List_literalContext | null {
        return this.getRuleContext(0, List_literalContext);
    }
    public dict_literal(): Dict_literalContext | null {
        return this.getRuleContext(0, Dict_literalContext);
    }
    public struct_literal(): Struct_literalContext | null {
        return this.getRuleContext(0, Struct_literalContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_atom_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIn_atom_expr) {
            return visitor.visitIn_atom_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cast_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(YQLParser.CAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cast_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCast_expr) {
            return visitor.visitCast_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Bitcast_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BITCAST(): antlr.TerminalNode {
        return this.getToken(YQLParser.BITCAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public type_name_simple(): Type_name_simpleContext {
        return this.getRuleContext(0, Type_name_simpleContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bitcast_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBitcast_expr) {
            return visitor.visitBitcast_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Exists_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXISTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_exists_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExists_expr) {
            return visitor.visitExists_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Case_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(YQLParser.END, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public when_expr(): When_exprContext[];
    public when_expr(i: number): When_exprContext | null;
    public when_expr(i?: number): When_exprContext[] | When_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(When_exprContext);
        }

        return this.getRuleContext(i, When_exprContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_case_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCase_expr) {
            return visitor.visitCase_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LambdaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public smart_parenthesis(): Smart_parenthesisContext {
        return this.getRuleContext(0, Smart_parenthesisContext)!;
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARROW, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public lambda_body(): Lambda_bodyContext | null {
        return this.getRuleContext(0, Lambda_bodyContext);
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_lambda;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLambda) {
            return visitor.visitLambda(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class In_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public in_unary_subexpr(): In_unary_subexprContext {
        return this.getRuleContext(0, In_unary_subexprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIn_expr) {
            return visitor.visitIn_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_api_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_value(): Json_valueContext | null {
        return this.getRuleContext(0, Json_valueContext);
    }
    public json_exists(): Json_existsContext | null {
        return this.getRuleContext(0, Json_existsContext);
    }
    public json_query(): Json_queryContext | null {
        return this.getRuleContext(0, Json_queryContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_api_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_api_expr) {
            return visitor.visitJson_api_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Jsonpath_specContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRING_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_jsonpath_spec;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJsonpath_spec) {
            return visitor.visitJsonpath_spec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_expr(): Id_exprContext | null {
        return this.getRuleContext(0, Id_exprContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_variable_name) {
            return visitor.visitJson_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_variableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public json_variable_name(): Json_variable_nameContext {
        return this.getRuleContext(0, Json_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_variable;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_variable) {
            return visitor.visitJson_variable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_variablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_variable(): Json_variableContext[];
    public json_variable(i: number): Json_variableContext | null;
    public json_variable(i?: number): Json_variableContext[] | Json_variableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Json_variableContext);
        }

        return this.getRuleContext(i, Json_variableContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_variables;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_variables) {
            return visitor.visitJson_variables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_common_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public jsonpath_spec(): Jsonpath_specContext {
        return this.getRuleContext(0, Jsonpath_specContext)!;
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSING, 0);
    }
    public json_variables(): Json_variablesContext | null {
        return this.getRuleContext(0, Json_variablesContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_common_args;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_common_args) {
            return visitor.visitJson_common_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_case_handlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_case_handler;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_case_handler) {
            return visitor.visitJson_case_handler(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.JSON_VALUE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public json_common_args(): Json_common_argsContext {
        return this.getRuleContext(0, Json_common_argsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RETURNING, 0);
    }
    public type_name_simple(): Type_name_simpleContext | null {
        return this.getRuleContext(0, Type_name_simpleContext);
    }
    public json_case_handler(): Json_case_handlerContext[];
    public json_case_handler(i: number): Json_case_handlerContext | null;
    public json_case_handler(i?: number): Json_case_handlerContext[] | Json_case_handlerContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Json_case_handlerContext);
        }

        return this.getRuleContext(i, Json_case_handlerContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ON);
    	} else {
    		return this.getToken(YQLParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode[];
    public EMPTY(i: number): antlr.TerminalNode | null;
    public EMPTY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.EMPTY);
    	} else {
    		return this.getToken(YQLParser.EMPTY, i);
    	}
    }
    public ERROR(): antlr.TerminalNode[];
    public ERROR(i: number): antlr.TerminalNode | null;
    public ERROR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ERROR);
    	} else {
    		return this.getToken(YQLParser.ERROR, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_value) {
            return visitor.visitJson_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_exists_handlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public ERROR(): antlr.TerminalNode[];
    public ERROR(i: number): antlr.TerminalNode | null;
    public ERROR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ERROR);
    	} else {
    		return this.getToken(YQLParser.ERROR, i);
    	}
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FALSE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNKNOWN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_exists_handler;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_exists_handler) {
            return visitor.visitJson_exists_handler(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_existsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_EXISTS(): antlr.TerminalNode {
        return this.getToken(YQLParser.JSON_EXISTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public json_common_args(): Json_common_argsContext {
        return this.getRuleContext(0, Json_common_argsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public json_exists_handler(): Json_exists_handlerContext | null {
        return this.getRuleContext(0, Json_exists_handlerContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_exists;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_exists) {
            return visitor.visitJson_exists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_query_wrapperContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITHOUT, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARRAY, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONDITIONAL, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNCONDITIONAL, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_query_wrapper;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_query_wrapper) {
            return visitor.visitJson_query_wrapper(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_query_handlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARRAY, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OBJECT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_query_handler;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_query_handler) {
            return visitor.visitJson_query_handler(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_queryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_QUERY(): antlr.TerminalNode {
        return this.getToken(YQLParser.JSON_QUERY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public json_common_args(): Json_common_argsContext {
        return this.getRuleContext(0, Json_common_argsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public json_query_wrapper(): Json_query_wrapperContext | null {
        return this.getRuleContext(0, Json_query_wrapperContext);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WRAPPER, 0);
    }
    public json_query_handler(): Json_query_handlerContext[];
    public json_query_handler(i: number): Json_query_handlerContext | null;
    public json_query_handler(i?: number): Json_query_handlerContext[] | Json_query_handlerContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Json_query_handlerContext);
        }

        return this.getRuleContext(i, Json_query_handlerContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ON);
    	} else {
    		return this.getToken(YQLParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_query;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_query) {
            return visitor.visitJson_query(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Smart_parenthesisContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public named_expr_list(): Named_expr_listContext | null {
        return this.getRuleContext(0, Named_expr_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_smart_parenthesis;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSmart_parenthesis) {
            return visitor.visitSmart_parenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExpr_list) {
            return visitor.visitExpr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pure_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pure_column_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPure_column_list) {
            return visitor.visitPure_column_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pure_column_or_namedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pure_column_or_named;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPure_column_or_named) {
            return visitor.visitPure_column_or_named(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pure_column_or_named_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public pure_column_or_named(): Pure_column_or_namedContext[];
    public pure_column_or_named(i: number): Pure_column_or_namedContext | null;
    public pure_column_or_named(i?: number): Pure_column_or_namedContext[] | Pure_column_or_namedContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Pure_column_or_namedContext);
        }

        return this.getRuleContext(i, Pure_column_or_namedContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pure_column_or_named_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPure_column_or_named_list) {
            return visitor.visitPure_column_or_named_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_id_prefix(): Opt_id_prefixContext {
        return this.getRuleContext(0, Opt_id_prefixContext)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitColumn_name) {
            return visitor.visitColumn_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Without_column_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public an_id_without(): An_id_withoutContext | null {
        return this.getRuleContext(0, An_id_withoutContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_without_column_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWithout_column_name) {
            return visitor.visitWithout_column_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext[];
    public column_name(i: number): Column_nameContext | null;
    public column_name(i?: number): Column_nameContext[] | Column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_nameContext);
        }

        return this.getRuleContext(i, Column_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitColumn_list) {
            return visitor.visitColumn_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Without_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public without_column_name(): Without_column_nameContext[];
    public without_column_name(i: number): Without_column_nameContext | null;
    public without_column_name(i?: number): Without_column_nameContext[] | Without_column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Without_column_nameContext);
        }

        return this.getRuleContext(i, Without_column_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_without_column_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWithout_column_list) {
            return visitor.visitWithout_column_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_expr) {
            return visitor.visitNamed_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_expr(): Named_exprContext[];
    public named_expr(i: number): Named_exprContext | null;
    public named_expr(i?: number): Named_exprContext[] | Named_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_exprContext);
        }

        return this.getRuleContext(i, Named_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_expr_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_expr_list) {
            return visitor.visitNamed_expr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Invoke_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public invoke_expr_tail(): Invoke_expr_tailContext {
        return this.getRuleContext(0, Invoke_expr_tailContext)!;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext | null {
        return this.getRuleContext(0, Opt_set_quantifierContext);
    }
    public named_expr_list(): Named_expr_listContext | null {
        return this.getRuleContext(0, Named_expr_listContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_invoke_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInvoke_expr) {
            return visitor.visitInvoke_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Invoke_expr_tailContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public null_treatment(): Null_treatmentContext | null {
        return this.getRuleContext(0, Null_treatmentContext);
    }
    public filter_clause(): Filter_clauseContext | null {
        return this.getRuleContext(0, Filter_clauseContext);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OVER, 0);
    }
    public window_name_or_specification(): Window_name_or_specificationContext | null {
        return this.getRuleContext(0, Window_name_or_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_invoke_expr_tail;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInvoke_expr_tail) {
            return visitor.visitInvoke_expr_tail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Using_call_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public invoke_expr(): Invoke_exprContext {
        return this.getRuleContext(0, Invoke_exprContext)!;
    }
    public an_id_expr(): An_id_exprContext | null {
        return this.getRuleContext(0, An_id_exprContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public an_id_or_type(): An_id_or_typeContext[];
    public an_id_or_type(i: number): An_id_or_typeContext | null;
    public an_id_or_type(i?: number): An_id_or_typeContext[] | An_id_or_typeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_or_typeContext);
        }

        return this.getRuleContext(i, An_id_or_typeContext);
    }
    public NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NAMESPACE, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FUNCTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_using_call_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUsing_call_expr) {
            return visitor.visitUsing_call_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.LBRACE_SQUARE, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public RBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RBRACE_SQUARE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_key_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKey_expr) {
            return visitor.visitKey_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class When_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.WHEN, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.THEN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_when_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWhen_expr) {
            return visitor.visitWhen_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Literal_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public real(): RealContext | null {
        return this.getRuleContext(0, RealContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public BLOB(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BLOB, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIME, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIMESTAMP, 0);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public EMPTY_ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY_ACTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_literal_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLiteral_value) {
            return visitor.visitLiteral_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Bind_parameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOLLAR(): antlr.TerminalNode {
        return this.getToken(YQLParser.DOLLAR, 0)!;
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bind_parameter;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBind_parameter) {
            return visitor.visitBind_parameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_bind_parameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public QUESTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUESTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_bind_parameter;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOpt_bind_parameter) {
            return visitor.visitOpt_bind_parameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Bind_parameter_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext[];
    public bind_parameter(i: number): Bind_parameterContext | null;
    public bind_parameter(i?: number): Bind_parameterContext[] | Bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bind_parameterContext);
        }

        return this.getRuleContext(i, Bind_parameterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bind_parameter_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBind_parameter_list) {
            return visitor.visitBind_parameter_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_bind_parameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext[];
    public bind_parameter(i: number): Bind_parameterContext | null;
    public bind_parameter(i?: number): Bind_parameterContext[] | Bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bind_parameterContext);
        }

        return this.getRuleContext(i, Bind_parameterContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_bind_parameter;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_bind_parameter) {
            return visitor.visitNamed_bind_parameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_bind_parameter_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_bind_parameter(): Named_bind_parameterContext[];
    public named_bind_parameter(i: number): Named_bind_parameterContext | null;
    public named_bind_parameter(i?: number): Named_bind_parameterContext[] | Named_bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_bind_parameterContext);
        }

        return this.getRuleContext(i, Named_bind_parameterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_bind_parameter_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_bind_parameter_list) {
            return visitor.visitNamed_bind_parameter_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Signed_numberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public real(): RealContext | null {
        return this.getRuleContext(0, RealContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_signed_number;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSigned_number) {
            return visitor.visitSigned_number(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_simpleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_pure(): An_id_pureContext {
        return this.getRuleContext(0, An_id_pureContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_simple;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_simple) {
            return visitor.visitType_name_simple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Integer_or_bindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_integer_or_bind;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInteger_or_bind) {
            return visitor.visitInteger_or_bind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_tagContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_tag;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_tag) {
            return visitor.visitType_name_tag(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Struct_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLON, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_struct_arg;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitStruct_arg) {
            return visitor.visitStruct_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Struct_arg_positionalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_struct_arg_positional;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitStruct_arg_positional) {
            return visitor.visitStruct_arg_positional(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Variant_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public type_name_tag(): Type_name_tagContext | null {
        return this.getRuleContext(0, Type_name_tagContext);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_variant_arg;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitVariant_arg) {
            return visitor.visitVariant_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Callable_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public variant_arg(): Variant_argContext {
        return this.getRuleContext(0, Variant_argContext)!;
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public AUTOMAP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AUTOMAP, 0);
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_callable_arg;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCallable_arg) {
            return visitor.visitCallable_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Callable_arg_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public callable_arg(): Callable_argContext[];
    public callable_arg(i: number): Callable_argContext | null;
    public callable_arg(i?: number): Callable_argContext[] | Callable_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Callable_argContext);
        }

        return this.getRuleContext(i, Callable_argContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_callable_arg_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCallable_arg_list) {
            return visitor.visitCallable_arg_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_decimalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECIMAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.DECIMAL, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public integer_or_bind(): Integer_or_bindContext[];
    public integer_or_bind(i: number): Integer_or_bindContext | null;
    public integer_or_bind(i?: number): Integer_or_bindContext[] | Integer_or_bindContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Integer_or_bindContext);
        }

        return this.getRuleContext(i, Integer_or_bindContext);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_decimal;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_decimal) {
            return visitor.visitType_name_decimal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_optionalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.OPTIONAL, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_optional;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_optional) {
            return visitor.visitType_name_optional(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_tupleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TUPLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TUPLE, 0)!;
    }
    public LESS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LESS, 0);
    }
    public GREATER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GREATER, 0);
    }
    public NOT_EQUALS2(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT_EQUALS2, 0);
    }
    public type_name_or_bind(): Type_name_or_bindContext[];
    public type_name_or_bind(i: number): Type_name_or_bindContext | null;
    public type_name_or_bind(i?: number): Type_name_or_bindContext[] | Type_name_or_bindContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_or_bindContext);
        }

        return this.getRuleContext(i, Type_name_or_bindContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_tuple;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_tuple) {
            return visitor.visitType_name_tuple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_structContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRUCT(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRUCT, 0)!;
    }
    public LESS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LESS, 0);
    }
    public GREATER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GREATER, 0);
    }
    public NOT_EQUALS2(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT_EQUALS2, 0);
    }
    public struct_arg(): Struct_argContext[];
    public struct_arg(i: number): Struct_argContext | null;
    public struct_arg(i?: number): Struct_argContext[] | Struct_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Struct_argContext);
        }

        return this.getRuleContext(i, Struct_argContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_struct;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_struct) {
            return visitor.visitType_name_struct(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_variantContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VARIANT(): antlr.TerminalNode {
        return this.getToken(YQLParser.VARIANT, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public variant_arg(): Variant_argContext[];
    public variant_arg(i: number): Variant_argContext | null;
    public variant_arg(i?: number): Variant_argContext[] | Variant_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Variant_argContext);
        }

        return this.getRuleContext(i, Variant_argContext);
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_variant;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_variant) {
            return visitor.visitType_name_variant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIST(): antlr.TerminalNode {
        return this.getToken(YQLParser.LIST, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_list) {
            return visitor.visitType_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_streamContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STREAM(): antlr.TerminalNode {
        return this.getToken(YQLParser.STREAM, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_stream;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_stream) {
            return visitor.visitType_name_stream(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_flowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLOW(): antlr.TerminalNode {
        return this.getToken(YQLParser.FLOW, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_flow;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_flow) {
            return visitor.visitType_name_flow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_dictContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DICT(): antlr.TerminalNode {
        return this.getToken(YQLParser.DICT, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext[];
    public type_name_or_bind(i: number): Type_name_or_bindContext | null;
    public type_name_or_bind(i?: number): Type_name_or_bindContext[] | Type_name_or_bindContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_or_bindContext);
        }

        return this.getRuleContext(i, Type_name_or_bindContext);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_dict;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_dict) {
            return visitor.visitType_name_dict(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_set;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_set) {
            return visitor.visitType_name_set(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_enumContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENUM(): antlr.TerminalNode {
        return this.getToken(YQLParser.ENUM, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_tag(): Type_name_tagContext[];
    public type_name_tag(i: number): Type_name_tagContext | null;
    public type_name_tag(i?: number): Type_name_tagContext[] | Type_name_tagContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_tagContext);
        }

        return this.getRuleContext(i, Type_name_tagContext);
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_enum;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_enum) {
            return visitor.visitType_name_enum(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_resourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_resource;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_resource) {
            return visitor.visitType_name_resource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_taggedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TAGGED(): antlr.TerminalNode {
        return this.getToken(YQLParser.TAGGED, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_tagged;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_tagged) {
            return visitor.visitType_name_tagged(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_callableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CALLABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CALLABLE, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public ARROW(): antlr.TerminalNode {
        return this.getToken(YQLParser.ARROW, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public callable_arg_list(): Callable_arg_listContext[];
    public callable_arg_list(i: number): Callable_arg_listContext | null;
    public callable_arg_list(i?: number): Callable_arg_listContext[] | Callable_arg_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Callable_arg_listContext);
        }

        return this.getRuleContext(i, Callable_arg_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public LBRACE_SQUARE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_SQUARE, 0);
    }
    public RBRACE_SQUARE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_SQUARE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_callable;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_callable) {
            return visitor.visitType_name_callable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_compositeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_optional(): Type_name_optionalContext | null {
        return this.getRuleContext(0, Type_name_optionalContext);
    }
    public type_name_tuple(): Type_name_tupleContext | null {
        return this.getRuleContext(0, Type_name_tupleContext);
    }
    public type_name_struct(): Type_name_structContext | null {
        return this.getRuleContext(0, Type_name_structContext);
    }
    public type_name_variant(): Type_name_variantContext | null {
        return this.getRuleContext(0, Type_name_variantContext);
    }
    public type_name_list(): Type_name_listContext | null {
        return this.getRuleContext(0, Type_name_listContext);
    }
    public type_name_stream(): Type_name_streamContext | null {
        return this.getRuleContext(0, Type_name_streamContext);
    }
    public type_name_flow(): Type_name_flowContext | null {
        return this.getRuleContext(0, Type_name_flowContext);
    }
    public type_name_dict(): Type_name_dictContext | null {
        return this.getRuleContext(0, Type_name_dictContext);
    }
    public type_name_set(): Type_name_setContext | null {
        return this.getRuleContext(0, Type_name_setContext);
    }
    public type_name_enum(): Type_name_enumContext | null {
        return this.getRuleContext(0, Type_name_enumContext);
    }
    public type_name_resource(): Type_name_resourceContext | null {
        return this.getRuleContext(0, Type_name_resourceContext);
    }
    public type_name_tagged(): Type_name_taggedContext | null {
        return this.getRuleContext(0, Type_name_taggedContext);
    }
    public type_name_callable(): Type_name_callableContext | null {
        return this.getRuleContext(0, Type_name_callableContext);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_composite;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_composite) {
            return visitor.visitType_name_composite(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_composite(): Type_name_compositeContext | null {
        return this.getRuleContext(0, Type_name_compositeContext);
    }
    public type_name_decimal(): Type_name_decimalContext | null {
        return this.getRuleContext(0, Type_name_decimalContext);
    }
    public type_name_simple(): Type_name_simpleContext | null {
        return this.getRuleContext(0, Type_name_simpleContext);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name) {
            return visitor.visitType_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_or_bindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name(): Type_nameContext | null {
        return this.getRuleContext(0, Type_nameContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_or_bind;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_or_bind) {
            return visitor.visitType_name_or_bind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Value_constructor_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRING_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_value_constructor_literal;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValue_constructor_literal) {
            return visitor.visitValue_constructor_literal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Value_constructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VARIANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VARIANT, 0);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public ENUM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENUM, 0);
    }
    public CALLABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CALLABLE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_value_constructor;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValue_constructor) {
            return visitor.visitValue_constructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Declare_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.DECLARE, 0)!;
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public type_name(): Type_nameContext {
        return this.getRuleContext(0, Type_nameContext)!;
    }
    public EQUALS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EQUALS, 0);
    }
    public literal_value(): Literal_valueContext | null {
        return this.getRuleContext(0, Literal_valueContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_declare_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDeclare_stmt) {
            return visitor.visitDeclare_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Module_pathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DOT);
    	} else {
    		return this.getToken(YQLParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_module_path;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitModule_path) {
            return visitor.visitModule_path(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Import_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IMPORT(): antlr.TerminalNode {
        return this.getToken(YQLParser.IMPORT, 0)!;
    }
    public module_path(): Module_pathContext {
        return this.getRuleContext(0, Module_pathContext)!;
    }
    public SYMBOLS(): antlr.TerminalNode {
        return this.getToken(YQLParser.SYMBOLS, 0)!;
    }
    public named_bind_parameter_list(): Named_bind_parameter_listContext {
        return this.getRuleContext(0, Named_bind_parameter_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_import_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitImport_stmt) {
            return visitor.visitImport_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Export_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPORT(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXPORT, 0)!;
    }
    public bind_parameter_list(): Bind_parameter_listContext {
        return this.getRuleContext(0, Bind_parameter_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_export_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExport_stmt) {
            return visitor.visitExport_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Call_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public EMPTY_ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY_ACTION, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_call_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCall_action) {
            return visitor.visitCall_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Inline_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEGIN(): antlr.TerminalNode {
        return this.getToken(YQLParser.BEGIN, 0)!;
    }
    public define_action_or_subquery_body(): Define_action_or_subquery_bodyContext {
        return this.getRuleContext(0, Define_action_or_subquery_bodyContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(YQLParser.END, 0)!;
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(YQLParser.DO, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_inline_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInline_action) {
            return visitor.visitInline_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Do_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(YQLParser.DO, 0)!;
    }
    public call_action(): Call_actionContext | null {
        return this.getRuleContext(0, Call_actionContext);
    }
    public inline_action(): Inline_actionContext | null {
        return this.getRuleContext(0, Inline_actionContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_do_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDo_stmt) {
            return visitor.visitDo_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pragma_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRAGMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.PRAGMA, 0)!;
    }
    public opt_id_prefix_or_type(): Opt_id_prefix_or_typeContext {
        return this.getRuleContext(0, Opt_id_prefix_or_typeContext)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EQUALS, 0);
    }
    public pragma_value(): Pragma_valueContext[];
    public pragma_value(i: number): Pragma_valueContext | null;
    public pragma_value(i?: number): Pragma_valueContext[] | Pragma_valueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Pragma_valueContext);
        }

        return this.getRuleContext(i, Pragma_valueContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pragma_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPragma_stmt) {
            return visitor.visitPragma_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pragma_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public signed_number(): Signed_numberContext | null {
        return this.getRuleContext(0, Signed_numberContext);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pragma_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPragma_value) {
            return visitor.visitPragma_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sort_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESC, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sort_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSort_specification) {
            return visitor.visitSort_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sort_specification_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sort_specification(): Sort_specificationContext[];
    public sort_specification(i: number): Sort_specificationContext | null;
    public sort_specification(i?: number): Sort_specificationContext[] | Sort_specificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sort_specificationContext);
        }

        return this.getRuleContext(i, Sort_specificationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sort_specification_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSort_specification_list) {
            return visitor.visitSort_specification_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind_parenthesis(): Select_kind_parenthesisContext[];
    public select_kind_parenthesis(i: number): Select_kind_parenthesisContext | null;
    public select_kind_parenthesis(i?: number): Select_kind_parenthesisContext[] | Select_kind_parenthesisContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_kind_parenthesisContext);
        }

        return this.getRuleContext(i, Select_kind_parenthesisContext);
    }
    public select_op(): Select_opContext[];
    public select_op(i: number): Select_opContext | null;
    public select_op(i?: number): Select_opContext[] | Select_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_opContext);
        }

        return this.getRuleContext(i, Select_opContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_stmt) {
            return visitor.visitSelect_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_unparenthesized_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind_partial(): Select_kind_partialContext {
        return this.getRuleContext(0, Select_kind_partialContext)!;
    }
    public select_op(): Select_opContext[];
    public select_op(i: number): Select_opContext | null;
    public select_op(i?: number): Select_opContext[] | Select_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_opContext);
        }

        return this.getRuleContext(i, Select_opContext);
    }
    public select_kind_parenthesis(): Select_kind_parenthesisContext[];
    public select_kind_parenthesis(i: number): Select_kind_parenthesisContext | null;
    public select_kind_parenthesis(i?: number): Select_kind_parenthesisContext[] | Select_kind_parenthesisContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_kind_parenthesisContext);
        }

        return this.getRuleContext(i, Select_kind_parenthesisContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_unparenthesized_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_unparenthesized_stmt) {
            return visitor.visitSelect_unparenthesized_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_kind_parenthesisContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind_partial(): Select_kind_partialContext {
        return this.getRuleContext(0, Select_kind_partialContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_kind_parenthesis;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_kind_parenthesis) {
            return visitor.visitSelect_kind_parenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNION, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTERSECT, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCEPT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_op;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_op) {
            return visitor.visitSelect_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_kind_partialContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind(): Select_kindContext {
        return this.getRuleContext(0, Select_kindContext)!;
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIMIT, 0);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OFFSET, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_kind_partial;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_kind_partial) {
            return visitor.visitSelect_kind_partial(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_kindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public process_core(): Process_coreContext | null {
        return this.getRuleContext(0, Process_coreContext);
    }
    public reduce_core(): Reduce_coreContext | null {
        return this.getRuleContext(0, Reduce_coreContext);
    }
    public select_core(): Select_coreContext | null {
        return this.getRuleContext(0, Select_coreContext);
    }
    public DISCARD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISCARD, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTO, 0);
    }
    public RESULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESULT, 0);
    }
    public pure_column_or_named(): Pure_column_or_namedContext | null {
        return this.getRuleContext(0, Pure_column_or_namedContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_kind;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_kind) {
            return visitor.visitSelect_kind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Process_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.PROCESS, 0)!;
    }
    public named_single_source(): Named_single_sourceContext[];
    public named_single_source(i: number): Named_single_sourceContext | null;
    public named_single_source(i?: number): Named_single_sourceContext[] | Named_single_sourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_single_sourceContext);
        }

        return this.getRuleContext(i, Named_single_sourceContext);
    }
    public STREAM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STREAM, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USING, 0);
    }
    public using_call_expr(): Using_call_exprContext | null {
        return this.getRuleContext(0, Using_call_exprContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public external_call_settings(): External_call_settingsContext | null {
        return this.getRuleContext(0, External_call_settingsContext);
    }
    public where_expr(): Where_exprContext | null {
        return this.getRuleContext(0, Where_exprContext);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public order_by_clause(): Order_by_clauseContext | null {
        return this.getRuleContext(0, Order_by_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_process_core;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitProcess_core) {
            return visitor.visitProcess_core(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class External_call_paramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_external_call_param;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExternal_call_param) {
            return visitor.visitExternal_call_param(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class External_call_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public external_call_param(): External_call_paramContext[];
    public external_call_param(i: number): External_call_paramContext | null;
    public external_call_param(i?: number): External_call_paramContext[] | External_call_paramContext | null {
        if (i === undefined) {
            return this.getRuleContexts(External_call_paramContext);
        }

        return this.getRuleContext(i, External_call_paramContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_external_call_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExternal_call_settings) {
            return visitor.visitExternal_call_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Reduce_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REDUCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.REDUCE, 0)!;
    }
    public named_single_source(): Named_single_sourceContext[];
    public named_single_source(i: number): Named_single_sourceContext | null;
    public named_single_source(i?: number): Named_single_sourceContext[] | Named_single_sourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_single_sourceContext);
        }

        return this.getRuleContext(i, Named_single_sourceContext);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public column_list(): Column_listContext {
        return this.getRuleContext(0, Column_listContext)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(YQLParser.USING, 0)!;
    }
    public using_call_expr(): Using_call_exprContext {
        return this.getRuleContext(0, Using_call_exprContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public PRESORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRESORT, 0);
    }
    public sort_specification_list(): Sort_specification_listContext | null {
        return this.getRuleContext(0, Sort_specification_listContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public where_expr(): Where_exprContext | null {
        return this.getRuleContext(0, Where_exprContext);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public order_by_clause(): Order_by_clauseContext | null {
        return this.getRuleContext(0, Order_by_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_reduce_core;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReduce_core) {
            return visitor.visitReduce_core(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_set_quantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_set_quantifier;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOpt_set_quantifier) {
            return visitor.visitOpt_set_quantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.SELECT, 0)!;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext {
        return this.getRuleContext(0, Opt_set_quantifierContext)!;
    }
    public result_column(): Result_columnContext[];
    public result_column(i: number): Result_columnContext | null;
    public result_column(i?: number): Result_columnContext[] | Result_columnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Result_columnContext);
        }

        return this.getRuleContext(i, Result_columnContext);
    }
    public FROM(): antlr.TerminalNode[];
    public FROM(i: number): antlr.TerminalNode | null;
    public FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.FROM);
    	} else {
    		return this.getToken(YQLParser.FROM, i);
    	}
    }
    public join_source(): Join_sourceContext[];
    public join_source(i: number): Join_sourceContext | null;
    public join_source(i?: number): Join_sourceContext[] | Join_sourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_sourceContext);
        }

        return this.getRuleContext(i, Join_sourceContext);
    }
    public STREAM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STREAM, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITHOUT, 0);
    }
    public without_column_list(): Without_column_listContext | null {
        return this.getRuleContext(0, Without_column_listContext);
    }
    public where_expr(): Where_exprContext | null {
        return this.getRuleContext(0, Where_exprContext);
    }
    public group_by_clause(): Group_by_clauseContext | null {
        return this.getRuleContext(0, Group_by_clauseContext);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public ext_order_by_clause(): Ext_order_by_clauseContext | null {
        return this.getRuleContext(0, Ext_order_by_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_core;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_core) {
            return visitor.visitSelect_core(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_recognition_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode {
        return this.getToken(YQLParser.MATCH_RECOGNIZE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern_common_syntax(): Row_pattern_common_syntaxContext {
        return this.getRuleContext(0, Row_pattern_common_syntaxContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public window_partition_clause(): Window_partition_clauseContext | null {
        return this.getRuleContext(0, Window_partition_clauseContext);
    }
    public order_by_clause(): Order_by_clauseContext | null {
        return this.getRuleContext(0, Order_by_clauseContext);
    }
    public row_pattern_measures(): Row_pattern_measuresContext | null {
        return this.getRuleContext(0, Row_pattern_measuresContext);
    }
    public row_pattern_rows_per_match(): Row_pattern_rows_per_matchContext | null {
        return this.getRuleContext(0, Row_pattern_rows_per_matchContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_recognition_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_recognition_clause) {
            return visitor.visitRow_pattern_recognition_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_rows_per_matchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONE, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public PER(): antlr.TerminalNode {
        return this.getToken(YQLParser.PER, 0)!;
    }
    public MATCH(): antlr.TerminalNode {
        return this.getToken(YQLParser.MATCH, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public row_pattern_empty_match_handling(): Row_pattern_empty_match_handlingContext | null {
        return this.getRuleContext(0, Row_pattern_empty_match_handlingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_rows_per_match;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_rows_per_match) {
            return visitor.visitRow_pattern_rows_per_match(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_empty_match_handlingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SHOW, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCHES, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OMIT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNMATCHED, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_empty_match_handling;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_empty_match_handling) {
            return visitor.visitRow_pattern_empty_match_handling(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_measuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MEASURES(): antlr.TerminalNode {
        return this.getToken(YQLParser.MEASURES, 0)!;
    }
    public row_pattern_measure_list(): Row_pattern_measure_listContext {
        return this.getRuleContext(0, Row_pattern_measure_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_measures;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_measures) {
            return visitor.visitRow_pattern_measures(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_measure_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_measure_definition(): Row_pattern_measure_definitionContext[];
    public row_pattern_measure_definition(i: number): Row_pattern_measure_definitionContext | null;
    public row_pattern_measure_definition(i?: number): Row_pattern_measure_definitionContext[] | Row_pattern_measure_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_measure_definitionContext);
        }

        return this.getRuleContext(i, Row_pattern_measure_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_measure_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_measure_list) {
            return visitor.visitRow_pattern_measure_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_measure_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_measure_definition;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_measure_definition) {
            return visitor.visitRow_pattern_measure_definition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_common_syntaxContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PATTERN(): antlr.TerminalNode {
        return this.getToken(YQLParser.PATTERN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern(): Row_patternContext {
        return this.getRuleContext(0, Row_patternContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public DEFINE(): antlr.TerminalNode {
        return this.getToken(YQLParser.DEFINE, 0)!;
    }
    public row_pattern_definition_list(): Row_pattern_definition_listContext {
        return this.getRuleContext(0, Row_pattern_definition_listContext)!;
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AFTER, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH, 0);
    }
    public row_pattern_skip_to(): Row_pattern_skip_toContext | null {
        return this.getRuleContext(0, Row_pattern_skip_toContext);
    }
    public row_pattern_initial_or_seek(): Row_pattern_initial_or_seekContext | null {
        return this.getRuleContext(0, Row_pattern_initial_or_seekContext);
    }
    public row_pattern_subset_clause(): Row_pattern_subset_clauseContext | null {
        return this.getRuleContext(0, Row_pattern_subset_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_common_syntax;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_common_syntax) {
            return visitor.visitRow_pattern_common_syntax(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_skip_toContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SKIP_RULE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SKIP_RULE, 0)!;
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NEXT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PAST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LAST, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FIRST, 0);
    }
    public row_pattern_skip_to_variable_name(): Row_pattern_skip_to_variable_nameContext | null {
        return this.getRuleContext(0, Row_pattern_skip_to_variable_nameContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_skip_to;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_skip_to) {
            return visitor.visitRow_pattern_skip_to(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_skip_to_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_skip_to_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_skip_to_variable_name) {
            return visitor.visitRow_pattern_skip_to_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_initial_or_seekContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIAL, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEEK, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_initial_or_seek;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_initial_or_seek) {
            return visitor.visitRow_pattern_initial_or_seek(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_patternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_term(): Row_pattern_termContext[];
    public row_pattern_term(i: number): Row_pattern_termContext | null;
    public row_pattern_term(i?: number): Row_pattern_termContext[] | Row_pattern_termContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_termContext);
        }

        return this.getRuleContext(i, Row_pattern_termContext);
    }
    public PIPE(): antlr.TerminalNode[];
    public PIPE(i: number): antlr.TerminalNode | null;
    public PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PIPE);
    	} else {
    		return this.getToken(YQLParser.PIPE, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern) {
            return visitor.visitRow_pattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_termContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_factor(): Row_pattern_factorContext[];
    public row_pattern_factor(i: number): Row_pattern_factorContext | null;
    public row_pattern_factor(i?: number): Row_pattern_factorContext[] | Row_pattern_factorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_factorContext);
        }

        return this.getRuleContext(i, Row_pattern_factorContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_term;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_term) {
            return visitor.visitRow_pattern_term(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_factorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_primary(): Row_pattern_primaryContext {
        return this.getRuleContext(0, Row_pattern_primaryContext)!;
    }
    public row_pattern_quantifier(): Row_pattern_quantifierContext | null {
        return this.getRuleContext(0, Row_pattern_quantifierContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_factor;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_factor) {
            return visitor.visitRow_pattern_factor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_quantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLUS, 0);
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public integer(): IntegerContext[];
    public integer(i: number): IntegerContext | null;
    public integer(i?: number): IntegerContext[] | IntegerContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntegerContext);
        }

        return this.getRuleContext(i, IntegerContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_quantifier;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_quantifier) {
            return visitor.visitRow_pattern_quantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_primaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_primary_variable_name(): Row_pattern_primary_variable_nameContext | null {
        return this.getRuleContext(0, Row_pattern_primary_variable_nameContext);
    }
    public DOLLAR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOLLAR, 0);
    }
    public CARET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CARET, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public row_pattern(): Row_patternContext | null {
        return this.getRuleContext(0, Row_patternContext);
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.MINUS);
    	} else {
    		return this.getToken(YQLParser.MINUS, i);
    	}
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public row_pattern_permute(): Row_pattern_permuteContext | null {
        return this.getRuleContext(0, Row_pattern_permuteContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_primary;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_primary) {
            return visitor.visitRow_pattern_primary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_primary_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_primary_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_primary_variable_name) {
            return visitor.visitRow_pattern_primary_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_permuteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PERMUTE(): antlr.TerminalNode {
        return this.getToken(YQLParser.PERMUTE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern(): Row_patternContext[];
    public row_pattern(i: number): Row_patternContext | null;
    public row_pattern(i?: number): Row_patternContext[] | Row_patternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_patternContext);
        }

        return this.getRuleContext(i, Row_patternContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_permute;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_permute) {
            return visitor.visitRow_pattern_permute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBSET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SUBSET, 0)!;
    }
    public row_pattern_subset_list(): Row_pattern_subset_listContext {
        return this.getRuleContext(0, Row_pattern_subset_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_clause) {
            return visitor.visitRow_pattern_subset_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_subset_item(): Row_pattern_subset_itemContext[];
    public row_pattern_subset_item(i: number): Row_pattern_subset_itemContext | null;
    public row_pattern_subset_item(i?: number): Row_pattern_subset_itemContext[] | Row_pattern_subset_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_subset_itemContext);
        }

        return this.getRuleContext(i, Row_pattern_subset_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_list) {
            return visitor.visitRow_pattern_subset_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_subset_item_variable_name(): Row_pattern_subset_item_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_subset_item_variable_nameContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern_subset_rhs(): Row_pattern_subset_rhsContext {
        return this.getRuleContext(0, Row_pattern_subset_rhsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_item;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_item) {
            return visitor.visitRow_pattern_subset_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_item_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_item_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_item_variable_name) {
            return visitor.visitRow_pattern_subset_item_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_rhsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_subset_rhs_variable_name(): Row_pattern_subset_rhs_variable_nameContext[];
    public row_pattern_subset_rhs_variable_name(i: number): Row_pattern_subset_rhs_variable_nameContext | null;
    public row_pattern_subset_rhs_variable_name(i?: number): Row_pattern_subset_rhs_variable_nameContext[] | Row_pattern_subset_rhs_variable_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_subset_rhs_variable_nameContext);
        }

        return this.getRuleContext(i, Row_pattern_subset_rhs_variable_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_rhs;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_rhs) {
            return visitor.visitRow_pattern_subset_rhs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_rhs_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_rhs_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_rhs_variable_name) {
            return visitor.visitRow_pattern_subset_rhs_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_definition_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_definition(): Row_pattern_definitionContext[];
    public row_pattern_definition(i: number): Row_pattern_definitionContext | null;
    public row_pattern_definition(i?: number): Row_pattern_definitionContext[] | Row_pattern_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_definitionContext);
        }

        return this.getRuleContext(i, Row_pattern_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_definition_list) {
            return visitor.visitRow_pattern_definition_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_definition_variable_name(): Row_pattern_definition_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_definition_variable_nameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public row_pattern_definition_search_condition(): Row_pattern_definition_search_conditionContext {
        return this.getRuleContext(0, Row_pattern_definition_search_conditionContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_definition) {
            return visitor.visitRow_pattern_definition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_definition_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_definition_variable_name) {
            return visitor.visitRow_pattern_definition_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_definition_search_conditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public search_condition(): Search_conditionContext {
        return this.getRuleContext(0, Search_conditionContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition_search_condition;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_definition_search_condition) {
            return visitor.visitRow_pattern_definition_search_condition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Search_conditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_search_condition;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSearch_condition) {
            return visitor.visitSearch_condition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_variable_name) {
            return visitor.visitRow_pattern_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Order_by_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public sort_specification_list(): Sort_specification_listContext {
        return this.getRuleContext(0, Sort_specification_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_order_by_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOrder_by_clause) {
            return visitor.visitOrder_by_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Ext_order_by_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public order_by_clause(): Order_by_clauseContext {
        return this.getRuleContext(0, Order_by_clauseContext)!;
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ext_order_by_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExt_order_by_clause) {
            return visitor.visitExt_order_by_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Group_by_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUP, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext {
        return this.getRuleContext(0, Opt_set_quantifierContext)!;
    }
    public grouping_element_list(): Grouping_element_listContext {
        return this.getRuleContext(0, Grouping_element_listContext)!;
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMPACT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_group_by_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGroup_by_clause) {
            return visitor.visitGroup_by_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Grouping_element_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public grouping_element(): Grouping_elementContext[];
    public grouping_element(i: number): Grouping_elementContext | null;
    public grouping_element(i?: number): Grouping_elementContext[] | Grouping_elementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Grouping_elementContext);
        }

        return this.getRuleContext(i, Grouping_elementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grouping_element_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGrouping_element_list) {
            return visitor.visitGrouping_element_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Grouping_elementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ordinary_grouping_set(): Ordinary_grouping_setContext | null {
        return this.getRuleContext(0, Ordinary_grouping_setContext);
    }
    public rollup_list(): Rollup_listContext | null {
        return this.getRuleContext(0, Rollup_listContext);
    }
    public cube_list(): Cube_listContext | null {
        return this.getRuleContext(0, Cube_listContext);
    }
    public grouping_sets_specification(): Grouping_sets_specificationContext | null {
        return this.getRuleContext(0, Grouping_sets_specificationContext);
    }
    public hopping_window_specification(): Hopping_window_specificationContext | null {
        return this.getRuleContext(0, Hopping_window_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grouping_element;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGrouping_element) {
            return visitor.visitGrouping_element(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Ordinary_grouping_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_expr(): Named_exprContext {
        return this.getRuleContext(0, Named_exprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ordinary_grouping_set;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOrdinary_grouping_set) {
            return visitor.visitOrdinary_grouping_set(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Ordinary_grouping_set_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ordinary_grouping_set(): Ordinary_grouping_setContext[];
    public ordinary_grouping_set(i: number): Ordinary_grouping_setContext | null;
    public ordinary_grouping_set(i?: number): Ordinary_grouping_setContext[] | Ordinary_grouping_setContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Ordinary_grouping_setContext);
        }

        return this.getRuleContext(i, Ordinary_grouping_setContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ordinary_grouping_set_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOrdinary_grouping_set_list) {
            return visitor.visitOrdinary_grouping_set_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Rollup_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLLUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.ROLLUP, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public ordinary_grouping_set_list(): Ordinary_grouping_set_listContext {
        return this.getRuleContext(0, Ordinary_grouping_set_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_rollup_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRollup_list) {
            return visitor.visitRollup_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cube_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CUBE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CUBE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public ordinary_grouping_set_list(): Ordinary_grouping_set_listContext {
        return this.getRuleContext(0, Ordinary_grouping_set_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cube_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCube_list) {
            return visitor.visitCube_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Grouping_sets_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUPING(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUPING, 0)!;
    }
    public SETS(): antlr.TerminalNode {
        return this.getToken(YQLParser.SETS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public grouping_element_list(): Grouping_element_listContext {
        return this.getRuleContext(0, Grouping_element_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grouping_sets_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGrouping_sets_specification) {
            return visitor.visitGrouping_sets_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Hopping_window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOP(): antlr.TerminalNode {
        return this.getToken(YQLParser.HOP, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_hopping_window_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitHopping_window_specification) {
            return visitor.visitHopping_window_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Result_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_id_prefix(): Opt_id_prefixContext | null {
        return this.getRuleContext(0, Opt_id_prefixContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public an_id_as_compat(): An_id_as_compatContext | null {
        return this.getRuleContext(0, An_id_as_compatContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_result_column;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitResult_column) {
            return visitor.visitResult_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Join_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public flatten_source(): Flatten_sourceContext[];
    public flatten_source(i: number): Flatten_sourceContext | null;
    public flatten_source(i?: number): Flatten_sourceContext[] | Flatten_sourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Flatten_sourceContext);
        }

        return this.getRuleContext(i, Flatten_sourceContext);
    }
    public ANY(): antlr.TerminalNode[];
    public ANY(i: number): antlr.TerminalNode | null;
    public ANY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ANY);
    	} else {
    		return this.getToken(YQLParser.ANY, i);
    	}
    }
    public join_op(): Join_opContext[];
    public join_op(i: number): Join_opContext | null;
    public join_op(i?: number): Join_opContext[] | Join_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_opContext);
        }

        return this.getRuleContext(i, Join_opContext);
    }
    public join_constraint(): Join_constraintContext[];
    public join_constraint(i: number): Join_constraintContext | null;
    public join_constraint(i?: number): Join_constraintContext[] | Join_constraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_constraintContext);
        }

        return this.getRuleContext(i, Join_constraintContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_join_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJoin_source) {
            return visitor.visitJoin_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_column;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_column) {
            return visitor.visitNamed_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Flatten_by_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_column(): Named_columnContext | null {
        return this.getRuleContext(0, Named_columnContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public named_expr_list(): Named_expr_listContext | null {
        return this.getRuleContext(0, Named_expr_listContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_flatten_by_arg;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFlatten_by_arg) {
            return visitor.visitFlatten_by_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Flatten_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_single_source(): Named_single_sourceContext {
        return this.getRuleContext(0, Named_single_sourceContext)!;
    }
    public FLATTEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FLATTEN, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public flatten_by_arg(): Flatten_by_argContext | null {
        return this.getRuleContext(0, Flatten_by_argContext);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMNS, 0);
    }
    public OPTIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTIONAL, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIST, 0);
    }
    public DICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DICT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_flatten_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFlatten_source) {
            return visitor.visitFlatten_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_single_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public single_source(): Single_sourceContext {
        return this.getRuleContext(0, Single_sourceContext)!;
    }
    public row_pattern_recognition_clause(): Row_pattern_recognition_clauseContext | null {
        return this.getRuleContext(0, Row_pattern_recognition_clauseContext);
    }
    public sample_clause(): Sample_clauseContext | null {
        return this.getRuleContext(0, Sample_clauseContext);
    }
    public tablesample_clause(): Tablesample_clauseContext | null {
        return this.getRuleContext(0, Tablesample_clauseContext);
    }
    public an_id_as_compat(): An_id_as_compatContext | null {
        return this.getRuleContext(0, An_id_as_compatContext);
    }
    public pure_column_list(): Pure_column_listContext | null {
        return this.getRuleContext(0, Pure_column_listContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_single_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_single_source) {
            return visitor.visitNamed_single_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Single_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_ref(): Table_refContext | null {
        return this.getRuleContext(0, Table_refContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_single_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSingle_source) {
            return visitor.visitSingle_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sample_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAMPLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SAMPLE, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sample_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSample_clause) {
            return visitor.visitSample_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Tablesample_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLESAMPLE, 0)!;
    }
    public sampling_mode(): Sampling_modeContext {
        return this.getRuleContext(0, Sampling_modeContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public repeatable_clause(): Repeatable_clauseContext | null {
        return this.getRuleContext(0, Repeatable_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_tablesample_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTablesample_clause) {
            return visitor.visitTablesample_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sampling_modeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BERNOULLI, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYSTEM, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sampling_mode;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSampling_mode) {
            return visitor.visitSampling_mode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Repeatable_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPEATABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPEATABLE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_repeatable_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRepeatable_clause) {
            return visitor.visitRepeatable_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Join_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JOIN, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INNER, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CROSS, 0);
    }
    public NATURAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NATURAL, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RIGHT, 0);
    }
    public EXCLUSION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUSION, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FULL, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OUTER, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONLY, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEMI, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_join_op;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJoin_op) {
            return visitor.visitJoin_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Join_constraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USING, 0);
    }
    public pure_column_or_named_list(): Pure_column_or_named_listContext | null {
        return this.getRuleContext(0, Pure_column_or_named_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_join_constraint;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJoin_constraint) {
            return visitor.visitJoin_constraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Returning_columns_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURNING(): antlr.TerminalNode {
        return this.getToken(YQLParser.RETURNING, 0)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_returning_columns_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReturning_columns_list) {
            return visitor.visitReturning_columns_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Into_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(YQLParser.INTO, 0)!;
    }
    public into_simple_table_ref(): Into_simple_table_refContext {
        return this.getRuleContext(0, Into_simple_table_refContext)!;
    }
    public into_values_source(): Into_values_sourceContext {
        return this.getRuleContext(0, Into_values_sourceContext)!;
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public ABORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ABORT, 0);
    }
    public REVERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVERT, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public UPSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPSERT, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public returning_columns_list(): Returning_columns_listContext | null {
        return this.getRuleContext(0, Returning_columns_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_into_table_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInto_table_stmt) {
            return visitor.visitInto_table_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Into_table_stmt_yqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(YQLParser.INTO, 0)!;
    }
    public into_simple_table_ref(): Into_simple_table_refContext {
        return this.getRuleContext(0, Into_simple_table_refContext)!;
    }
    public into_values_source(): Into_values_sourceContext {
        return this.getRuleContext(0, Into_values_sourceContext)!;
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public ABORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ABORT, 0);
    }
    public REVERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVERT, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_into_table_stmt_yq;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInto_table_stmt_yq) {
            return visitor.visitInto_table_stmt_yq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Into_values_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public values_source(): Values_sourceContext | null {
        return this.getRuleContext(0, Values_sourceContext);
    }
    public pure_column_list(): Pure_column_listContext | null {
        return this.getRuleContext(0, Pure_column_listContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VALUES, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_into_values_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInto_values_source) {
            return visitor.visitInto_values_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Values_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(YQLParser.VALUES, 0)!;
    }
    public values_source_row_list(): Values_source_row_listContext {
        return this.getRuleContext(0, Values_source_row_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValues_stmt) {
            return visitor.visitValues_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Values_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValues_source) {
            return visitor.visitValues_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Values_source_row_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public values_source_row(): Values_source_rowContext[];
    public values_source_row(i: number): Values_source_rowContext | null;
    public values_source_row(i?: number): Values_source_rowContext[] | Values_source_rowContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Values_source_rowContext);
        }

        return this.getRuleContext(i, Values_source_rowContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_source_row_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValues_source_row_list) {
            return visitor.visitValues_source_row_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Values_source_rowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_source_row;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValues_source_row) {
            return visitor.visitValues_source_row(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Simple_values_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_simple_values_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSimple_values_source) {
            return visitor.visitSimple_values_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_external_data_source_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(YQLParser.DATA, 0)!;
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SOURCE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public with_table_settings(): With_table_settingsContext {
        return this.getRuleContext(0, With_table_settingsContext)!;
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_external_data_source_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_external_data_source_stmt) {
            return visitor.visitCreate_external_data_source_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_external_data_source_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(YQLParser.DATA, 0)!;
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SOURCE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_external_data_source_action(): Alter_external_data_source_actionContext[];
    public alter_external_data_source_action(i: number): Alter_external_data_source_actionContext | null;
    public alter_external_data_source_action(i?: number): Alter_external_data_source_actionContext[] | Alter_external_data_source_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_external_data_source_actionContext);
        }

        return this.getRuleContext(i, Alter_external_data_source_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_data_source_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_external_data_source_stmt) {
            return visitor.visitAlter_external_data_source_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_external_data_source_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_uncompatContext);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_data_source_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_external_data_source_action) {
            return visitor.visitAlter_external_data_source_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_external_data_source_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(YQLParser.DATA, 0)!;
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SOURCE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_external_data_source_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_external_data_source_stmt) {
            return visitor.visitDrop_external_data_source_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_view_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(YQLParser.VIEW, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public with_table_settings(): With_table_settingsContext {
        return this.getRuleContext(0, With_table_settingsContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public select_stmt(): Select_stmtContext {
        return this.getRuleContext(0, Select_stmtContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_view_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_view_stmt) {
            return visitor.visitCreate_view_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_view_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(YQLParser.VIEW, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_view_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_view_stmt) {
            return visitor.visitDrop_view_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Upsert_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPSERT(): antlr.TerminalNode {
        return this.getToken(YQLParser.UPSERT, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public create_object_features(): Create_object_featuresContext | null {
        return this.getRuleContext(0, Create_object_featuresContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_upsert_object_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUpsert_object_stmt) {
            return visitor.visitUpsert_object_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public create_object_features(): Create_object_featuresContext | null {
        return this.getRuleContext(0, Create_object_featuresContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_object_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_object_stmt) {
            return visitor.visitCreate_object_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public object_features(): Object_featuresContext {
        return this.getRuleContext(0, Object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_object_features;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_object_features) {
            return visitor.visitCreate_object_features(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public alter_object_features(): Alter_object_featuresContext {
        return this.getRuleContext(0, Alter_object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_object_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_object_stmt) {
            return visitor.visitAlter_object_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public object_features(): Object_featuresContext {
        return this.getRuleContext(0, Object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_object_features;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_object_features) {
            return visitor.visitAlter_object_features(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public drop_object_features(): Drop_object_featuresContext | null {
        return this.getRuleContext(0, Drop_object_featuresContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_object_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_object_stmt) {
            return visitor.visitDrop_object_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public object_features(): Object_featuresContext {
        return this.getRuleContext(0, Object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_object_features;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_object_features) {
            return visitor.visitDrop_object_features(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_feature_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_feature_value) {
            return visitor.visitObject_feature_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_feature_kvContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public object_feature_value(): Object_feature_valueContext {
        return this.getRuleContext(0, Object_feature_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature_kv;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_feature_kv) {
            return visitor.visitObject_feature_kv(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_feature_flagContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature_flag;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_feature_flag) {
            return visitor.visitObject_feature_flag(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_featureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_feature_kv(): Object_feature_kvContext | null {
        return this.getRuleContext(0, Object_feature_kvContext);
    }
    public object_feature_flag(): Object_feature_flagContext | null {
        return this.getRuleContext(0, Object_feature_flagContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_feature) {
            return visitor.visitObject_feature(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_feature(): Object_featureContext[];
    public object_feature(i: number): Object_featureContext | null;
    public object_feature(i?: number): Object_featureContext[] | Object_featureContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Object_featureContext);
        }

        return this.getRuleContext(i, Object_featureContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_features;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_features) {
            return visitor.visitObject_features(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_type_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_type_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_type_ref) {
            return visitor.visitObject_type_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public create_table_entry(): Create_table_entryContext[];
    public create_table_entry(i: number): Create_table_entryContext | null;
    public create_table_entry(i?: number): Create_table_entryContext[] | Create_table_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Create_table_entryContext);
        }

        return this.getRuleContext(i, Create_table_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public TABLESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESTORE, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMP, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMPORARY, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public table_inherits(): Table_inheritsContext | null {
        return this.getRuleContext(0, Table_inheritsContext);
    }
    public table_partition_by(): Table_partition_byContext | null {
        return this.getRuleContext(0, Table_partition_byContext);
    }
    public with_table_settings(): With_table_settingsContext | null {
        return this.getRuleContext(0, With_table_settingsContext);
    }
    public table_tablestore(): Table_tablestoreContext | null {
        return this.getRuleContext(0, Table_tablestoreContext);
    }
    public table_as_source(): Table_as_sourceContext | null {
        return this.getRuleContext(0, Table_as_sourceContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_table_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_table_stmt) {
            return visitor.visitCreate_table_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_table_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_schema(): Column_schemaContext | null {
        return this.getRuleContext(0, Column_schemaContext);
    }
    public table_constraint(): Table_constraintContext | null {
        return this.getRuleContext(0, Table_constraintContext);
    }
    public table_index(): Table_indexContext | null {
        return this.getRuleContext(0, Table_indexContext);
    }
    public family_entry(): Family_entryContext | null {
        return this.getRuleContext(0, Family_entryContext);
    }
    public changefeed(): ChangefeedContext | null {
        return this.getRuleContext(0, ChangefeedContext);
    }
    public an_id_schema(): An_id_schemaContext | null {
        return this.getRuleContext(0, An_id_schemaContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_table_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_table_entry) {
            return visitor.visitCreate_table_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_inheritsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INHERITS(): antlr.TerminalNode {
        return this.getToken(YQLParser.INHERITS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext[];
    public simple_table_ref_core(i: number): Simple_table_ref_coreContext | null;
    public simple_table_ref_core(i?: number): Simple_table_ref_coreContext[] | Simple_table_ref_coreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Simple_table_ref_coreContext);
        }

        return this.getRuleContext(i, Simple_table_ref_coreContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_inherits;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_inherits) {
            return visitor.visitTable_inherits(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_partition_byContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(YQLParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public HASH(): antlr.TerminalNode {
        return this.getToken(YQLParser.HASH, 0)!;
    }
    public pure_column_list(): Pure_column_listContext {
        return this.getRuleContext(0, Pure_column_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_partition_by;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_partition_by) {
            return visitor.visitTable_partition_by(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class With_table_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public table_settings_entry(): Table_settings_entryContext[];
    public table_settings_entry(i: number): Table_settings_entryContext | null;
    public table_settings_entry(i?: number): Table_settings_entryContext[] | Table_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_settings_entryContext);
        }

        return this.getRuleContext(i, Table_settings_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_with_table_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWith_table_settings) {
            return visitor.visitWith_table_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_tablestoreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESTORE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLESTORE, 0)!;
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext {
        return this.getRuleContext(0, Simple_table_ref_coreContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_tablestore;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_tablestore) {
            return visitor.visitTable_tablestore(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public table_setting_value(): Table_setting_valueContext {
        return this.getRuleContext(0, Table_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_settings_entry) {
            return visitor.visitTable_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_as_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public values_source(): Values_sourceContext {
        return this.getRuleContext(0, Values_sourceContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_as_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_as_source) {
            return visitor.visitTable_as_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public alter_table_action(): Alter_table_actionContext[];
    public alter_table_action(i: number): Alter_table_actionContext | null;
    public alter_table_action(i?: number): Alter_table_actionContext[] | Alter_table_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_actionContext);
        }

        return this.getRuleContext(i, Alter_table_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_stmt) {
            return visitor.visitAlter_table_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_add_column(): Alter_table_add_columnContext | null {
        return this.getRuleContext(0, Alter_table_add_columnContext);
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext | null {
        return this.getRuleContext(0, Alter_table_drop_columnContext);
    }
    public alter_table_alter_column(): Alter_table_alter_columnContext | null {
        return this.getRuleContext(0, Alter_table_alter_columnContext);
    }
    public alter_table_add_column_family(): Alter_table_add_column_familyContext | null {
        return this.getRuleContext(0, Alter_table_add_column_familyContext);
    }
    public alter_table_alter_column_family(): Alter_table_alter_column_familyContext | null {
        return this.getRuleContext(0, Alter_table_alter_column_familyContext);
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_uncompatContext);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public alter_table_add_index(): Alter_table_add_indexContext | null {
        return this.getRuleContext(0, Alter_table_add_indexContext);
    }
    public alter_table_drop_index(): Alter_table_drop_indexContext | null {
        return this.getRuleContext(0, Alter_table_drop_indexContext);
    }
    public alter_table_rename_to(): Alter_table_rename_toContext | null {
        return this.getRuleContext(0, Alter_table_rename_toContext);
    }
    public alter_table_add_changefeed(): Alter_table_add_changefeedContext | null {
        return this.getRuleContext(0, Alter_table_add_changefeedContext);
    }
    public alter_table_alter_changefeed(): Alter_table_alter_changefeedContext | null {
        return this.getRuleContext(0, Alter_table_alter_changefeedContext);
    }
    public alter_table_drop_changefeed(): Alter_table_drop_changefeedContext | null {
        return this.getRuleContext(0, Alter_table_drop_changefeedContext);
    }
    public alter_table_rename_index_to(): Alter_table_rename_index_toContext | null {
        return this.getRuleContext(0, Alter_table_rename_index_toContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_action) {
            return visitor.visitAlter_table_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_external_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public alter_external_table_action(): Alter_external_table_actionContext[];
    public alter_external_table_action(i: number): Alter_external_table_actionContext | null;
    public alter_external_table_action(i?: number): Alter_external_table_actionContext[] | Alter_external_table_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_external_table_actionContext);
        }

        return this.getRuleContext(i, Alter_external_table_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_table_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_external_table_stmt) {
            return visitor.visitAlter_external_table_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_external_table_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_add_column(): Alter_table_add_columnContext | null {
        return this.getRuleContext(0, Alter_table_add_columnContext);
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext | null {
        return this.getRuleContext(0, Alter_table_drop_columnContext);
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_uncompatContext);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_table_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_external_table_action) {
            return visitor.visitAlter_external_table_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_store_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public TABLESTORE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLESTORE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_table_store_action(): Alter_table_store_actionContext[];
    public alter_table_store_action(i: number): Alter_table_store_actionContext | null;
    public alter_table_store_action(i?: number): Alter_table_store_actionContext[] | Alter_table_store_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_store_actionContext);
        }

        return this.getRuleContext(i, Alter_table_store_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_store_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_store_stmt) {
            return visitor.visitAlter_table_store_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_store_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_add_column(): Alter_table_add_columnContext | null {
        return this.getRuleContext(0, Alter_table_add_columnContext);
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext | null {
        return this.getRuleContext(0, Alter_table_drop_columnContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_store_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_store_action) {
            return visitor.visitAlter_table_store_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_add_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public column_schema(): Column_schemaContext {
        return this.getRuleContext(0, Column_schemaContext)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_column;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_add_column) {
            return visitor.visitAlter_table_add_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_drop_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_drop_column;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_drop_column) {
            return visitor.visitAlter_table_drop_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_alter_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLUMN, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public family_relation(): Family_relationContext {
        return this.getRuleContext(0, Family_relationContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_column;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_alter_column) {
            return visitor.visitAlter_table_alter_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_add_column_familyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public family_entry(): Family_entryContext {
        return this.getRuleContext(0, Family_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_column_family;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_add_column_family) {
            return visitor.visitAlter_table_add_column_family(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_alter_column_familyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(YQLParser.FAMILY, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public family_setting_value(): Family_setting_valueContext {
        return this.getRuleContext(0, Family_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_column_family;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_alter_column_family) {
            return visitor.visitAlter_table_alter_column_family(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_set_table_setting_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public table_setting_value(): Table_setting_valueContext {
        return this.getRuleContext(0, Table_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_set_table_setting_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_set_table_setting_uncompat) {
            return visitor.visitAlter_table_set_table_setting_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_set_table_setting_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public alter_table_setting_entry(): Alter_table_setting_entryContext[];
    public alter_table_setting_entry(i: number): Alter_table_setting_entryContext | null;
    public alter_table_setting_entry(i?: number): Alter_table_setting_entryContext[] | Alter_table_setting_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_setting_entryContext);
        }

        return this.getRuleContext(i, Alter_table_setting_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_set_table_setting_compat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_set_table_setting_compat) {
            return visitor.visitAlter_table_set_table_setting_compat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_reset_table_settingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_reset_table_setting;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_reset_table_setting) {
            return visitor.visitAlter_table_reset_table_setting(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_add_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public table_index(): Table_indexContext {
        return this.getRuleContext(0, Table_indexContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_index;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_add_index) {
            return visitor.visitAlter_table_add_index(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_drop_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(YQLParser.INDEX, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_drop_index;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_drop_index) {
            return visitor.visitAlter_table_drop_index(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_rename_toContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(YQLParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(YQLParser.TO, 0)!;
    }
    public an_id_table(): An_id_tableContext {
        return this.getRuleContext(0, An_id_tableContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_rename_to;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_rename_to) {
            return visitor.visitAlter_table_rename_to(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_rename_index_toContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(YQLParser.RENAME, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(YQLParser.INDEX, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(YQLParser.TO, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_rename_index_to;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_rename_index_to) {
            return visitor.visitAlter_table_rename_index_to(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_add_changefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public changefeed(): ChangefeedContext {
        return this.getRuleContext(0, ChangefeedContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_changefeed;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_add_changefeed) {
            return visitor.visitAlter_table_add_changefeed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_alter_changefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public CHANGEFEED(): antlr.TerminalNode {
        return this.getToken(YQLParser.CHANGEFEED, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public changefeed_alter_settings(): Changefeed_alter_settingsContext {
        return this.getRuleContext(0, Changefeed_alter_settingsContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_changefeed;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_alter_changefeed) {
            return visitor.visitAlter_table_alter_changefeed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_drop_changefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public CHANGEFEED(): antlr.TerminalNode {
        return this.getToken(YQLParser.CHANGEFEED, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_drop_changefeed;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_drop_changefeed) {
            return visitor.visitAlter_table_drop_changefeed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_schema(): An_id_schemaContext {
        return this.getRuleContext(0, An_id_schemaContext)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public opt_column_constraints(): Opt_column_constraintsContext {
        return this.getRuleContext(0, Opt_column_constraintsContext)!;
    }
    public family_relation(): Family_relationContext | null {
        return this.getRuleContext(0, Family_relationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_schema;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitColumn_schema) {
            return visitor.visitColumn_schema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Family_relationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(YQLParser.FAMILY, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_relation;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFamily_relation) {
            return visitor.visitFamily_relation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_column_constraintsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_column_constraints;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOpt_column_constraints) {
            return visitor.visitOpt_column_constraints(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_order_by_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESC, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_order_by_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitColumn_order_by_specification) {
            return visitor.visitColumn_order_by_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_constraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIMARY, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.KEY, 0);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARTITION, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ORDER, 0);
    }
    public column_order_by_specification(): Column_order_by_specificationContext[];
    public column_order_by_specification(i: number): Column_order_by_specificationContext | null;
    public column_order_by_specification(i?: number): Column_order_by_specificationContext[] | Column_order_by_specificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_order_by_specificationContext);
        }

        return this.getRuleContext(i, Column_order_by_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_constraint;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_constraint) {
            return visitor.visitTable_constraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(YQLParser.INDEX, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public table_index_type(): Table_index_typeContext {
        return this.getRuleContext(0, Table_index_typeContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.LPAREN);
    	} else {
    		return this.getToken(YQLParser.LPAREN, i);
    	}
    }
    public an_id_schema(): An_id_schemaContext[];
    public an_id_schema(i: number): An_id_schemaContext | null;
    public an_id_schema(i?: number): An_id_schemaContext[] | An_id_schemaContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_schemaContext);
        }

        return this.getRuleContext(i, An_id_schemaContext);
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.RPAREN);
    	} else {
    		return this.getToken(YQLParser.RPAREN, i);
    	}
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public EQUALS(): antlr.TerminalNode[];
    public EQUALS(i: number): antlr.TerminalNode | null;
    public EQUALS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.EQUALS);
    	} else {
    		return this.getToken(YQLParser.EQUALS, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public COVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COVER, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_index;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_index) {
            return visitor.visitTable_index(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_index_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public global_index(): Global_indexContext | null {
        return this.getRuleContext(0, Global_indexContext);
    }
    public local_index(): Local_indexContext | null {
        return this.getRuleContext(0, Local_indexContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_index_type;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_index_type) {
            return visitor.visitTable_index_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Global_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GLOBAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.GLOBAL, 0)!;
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNIQUE, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYNC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYNC, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_global_index;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGlobal_index) {
            return visitor.visitGlobal_index(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Local_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.LOCAL, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_local_index;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLocal_index) {
            return visitor.visitLocal_index(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHANGEFEED(): antlr.TerminalNode {
        return this.getToken(YQLParser.CHANGEFEED, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public changefeed_settings(): Changefeed_settingsContext {
        return this.getRuleContext(0, Changefeed_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitChangefeed) {
            return visitor.visitChangefeed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Changefeed_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public changefeed_settings_entry(): Changefeed_settings_entryContext[];
    public changefeed_settings_entry(i: number): Changefeed_settings_entryContext | null;
    public changefeed_settings_entry(i?: number): Changefeed_settings_entryContext[] | Changefeed_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Changefeed_settings_entryContext);
        }

        return this.getRuleContext(i, Changefeed_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitChangefeed_settings) {
            return visitor.visitChangefeed_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Changefeed_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public changefeed_setting_value(): Changefeed_setting_valueContext {
        return this.getRuleContext(0, Changefeed_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitChangefeed_settings_entry) {
            return visitor.visitChangefeed_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Changefeed_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_setting_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitChangefeed_setting_value) {
            return visitor.visitChangefeed_setting_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Changefeed_alter_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISABLE, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SET, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public changefeed_settings(): Changefeed_settingsContext | null {
        return this.getRuleContext(0, Changefeed_settingsContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_alter_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitChangefeed_alter_settings) {
            return visitor.visitChangefeed_alter_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_setting_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public table_setting_value(): Table_setting_valueContext {
        return this.getRuleContext(0, Table_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_setting_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_setting_entry) {
            return visitor.visitAlter_table_setting_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public split_boundaries(): Split_boundariesContext | null {
        return this.getRuleContext(0, Split_boundariesContext);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public SECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SECONDS, 0);
    }
    public MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MILLISECONDS, 0);
    }
    public MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MICROSECONDS, 0);
    }
    public NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NANOSECONDS, 0);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_setting_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_setting_value) {
            return visitor.visitTable_setting_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Family_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(YQLParser.FAMILY, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public family_settings(): Family_settingsContext {
        return this.getRuleContext(0, Family_settingsContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFamily_entry) {
            return visitor.visitFamily_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Family_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public family_settings_entry(): Family_settings_entryContext[];
    public family_settings_entry(i: number): Family_settings_entryContext | null;
    public family_settings_entry(i?: number): Family_settings_entryContext[] | Family_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Family_settings_entryContext);
        }

        return this.getRuleContext(i, Family_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFamily_settings) {
            return visitor.visitFamily_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Family_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public family_setting_value(): Family_setting_valueContext {
        return this.getRuleContext(0, Family_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFamily_settings_entry) {
            return visitor.visitFamily_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Family_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRING_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_setting_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFamily_setting_value) {
            return visitor.visitFamily_setting_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Split_boundariesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public literal_value_list(): Literal_value_listContext[];
    public literal_value_list(i: number): Literal_value_listContext | null;
    public literal_value_list(i?: number): Literal_value_listContext[] | Literal_value_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Literal_value_listContext);
        }

        return this.getRuleContext(i, Literal_value_listContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_split_boundaries;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSplit_boundaries) {
            return visitor.visitSplit_boundaries(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Literal_value_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public literal_value(): Literal_valueContext[];
    public literal_value(i: number): Literal_valueContext | null;
    public literal_value(i?: number): Literal_valueContext[] | Literal_valueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Literal_valueContext);
        }

        return this.getRuleContext(i, Literal_valueContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_literal_value_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLiteral_value_list) {
            return visitor.visitLiteral_value_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public TABLESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESTORE, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_table_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_table_stmt) {
            return visitor.visitDrop_table_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_user_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(YQLParser.USER, 0)!;
    }
    public role_name(): Role_nameContext {
        return this.getRuleContext(0, Role_nameContext)!;
    }
    public create_user_option(): Create_user_optionContext | null {
        return this.getRuleContext(0, Create_user_optionContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_user_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_user_stmt) {
            return visitor.visitCreate_user_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_user_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(YQLParser.USER, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public create_user_option(): Create_user_optionContext | null {
        return this.getRuleContext(0, Create_user_optionContext);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RENAME, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_user_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_user_stmt) {
            return visitor.visitAlter_user_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_group_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUP, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_group_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_group_stmt) {
            return visitor.visitCreate_group_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_group_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUP, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RENAME, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ADD, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_group_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_group_stmt) {
            return visitor.visitAlter_group_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_role_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUP, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_role_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_role_stmt) {
            return visitor.visitDrop_role_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Role_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_role_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRole_name) {
            return visitor.visitRole_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_user_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD(): antlr.TerminalNode {
        return this.getToken(YQLParser.PASSWORD, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENCRYPTED, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_user_option;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_user_option) {
            return visitor.visitCreate_user_option(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Grant_permissions_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode[];
    public GRANT(i: number): antlr.TerminalNode | null;
    public GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GRANT);
    	} else {
    		return this.getToken(YQLParser.GRANT, i);
    	}
    }
    public permission_name_target(): Permission_name_targetContext {
        return this.getRuleContext(0, Permission_name_targetContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public an_id_schema(): An_id_schemaContext[];
    public an_id_schema(i: number): An_id_schemaContext | null;
    public an_id_schema(i?: number): An_id_schemaContext[] | An_id_schemaContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_schemaContext);
        }

        return this.getRuleContext(i, An_id_schemaContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(YQLParser.TO, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grant_permissions_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGrant_permissions_stmt) {
            return visitor.visitGrant_permissions_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Revoke_permissions_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(YQLParser.REVOKE, 0)!;
    }
    public permission_name_target(): Permission_name_targetContext {
        return this.getRuleContext(0, Permission_name_targetContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public an_id_schema(): An_id_schemaContext[];
    public an_id_schema(i: number): An_id_schemaContext | null;
    public an_id_schema(i?: number): An_id_schemaContext[] | An_id_schemaContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_schemaContext);
        }

        return this.getRuleContext(i, An_id_schemaContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(YQLParser.FROM, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOR, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_revoke_permissions_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRevoke_permissions_stmt) {
            return visitor.visitRevoke_permissions_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Permission_idContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONNECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONNECT, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIST, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public MANAGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MANAGE, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MODIFY, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLES, 0);
    }
    public ATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTRIBUTES, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPDATE, 0);
    }
    public ERASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERASE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SCHEMA, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REMOVE, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESCRIBE, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALTER, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SELECT, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USE, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FULL, 0);
    }
    public LEGACY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEGACY, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CREATE, 0);
    }
    public DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIRECTORY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public QUEUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUEUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_permission_id;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPermission_id) {
            return visitor.visitPermission_id(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Permission_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public permission_id(): Permission_idContext | null {
        return this.getRuleContext(0, Permission_idContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_permission_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPermission_name) {
            return visitor.visitPermission_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Permission_name_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public permission_name(): Permission_nameContext[];
    public permission_name(i: number): Permission_nameContext | null;
    public permission_name(i?: number): Permission_nameContext[] | Permission_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Permission_nameContext);
        }

        return this.getRuleContext(i, Permission_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIVILEGES, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_permission_name_target;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPermission_name_target) {
            return visitor.visitPermission_name_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_replication_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public ASYNC(): antlr.TerminalNode {
        return this.getToken(YQLParser.ASYNC, 0)!;
    }
    public REPLICATION(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPLICATION, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(YQLParser.FOR, 0)!;
    }
    public replication_target(): Replication_targetContext[];
    public replication_target(i: number): Replication_targetContext | null;
    public replication_target(i?: number): Replication_targetContext[] | Replication_targetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Replication_targetContext);
        }

        return this.getRuleContext(i, Replication_targetContext);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public replication_settings(): Replication_settingsContext {
        return this.getRuleContext(0, Replication_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_replication_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_replication_stmt) {
            return visitor.visitCreate_replication_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Replication_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public replication_name(): Replication_nameContext {
        return this.getRuleContext(0, Replication_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_replication_target;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReplication_target) {
            return visitor.visitReplication_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Replication_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public replication_settings_entry(): Replication_settings_entryContext[];
    public replication_settings_entry(i: number): Replication_settings_entryContext | null;
    public replication_settings_entry(i?: number): Replication_settings_entryContext[] | Replication_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Replication_settings_entryContext);
        }

        return this.getRuleContext(i, Replication_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_replication_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReplication_settings) {
            return visitor.visitReplication_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Replication_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public STRING_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRING_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_replication_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReplication_settings_entry) {
            return visitor.visitReplication_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_replication_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public ASYNC(): antlr.TerminalNode {
        return this.getToken(YQLParser.ASYNC, 0)!;
    }
    public REPLICATION(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPLICATION, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_replication_action(): Alter_replication_actionContext[];
    public alter_replication_action(i: number): Alter_replication_actionContext | null;
    public alter_replication_action(i?: number): Alter_replication_actionContext[] | Alter_replication_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_replication_actionContext);
        }

        return this.getRuleContext(i, Alter_replication_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_replication_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_replication_stmt) {
            return visitor.visitAlter_replication_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_replication_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_replication_set_setting(): Alter_replication_set_settingContext {
        return this.getRuleContext(0, Alter_replication_set_settingContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_replication_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_replication_action) {
            return visitor.visitAlter_replication_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_replication_set_settingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public replication_settings(): Replication_settingsContext {
        return this.getRuleContext(0, Replication_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_replication_set_setting;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_replication_set_setting) {
            return visitor.visitAlter_replication_set_setting(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_replication_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public ASYNC(): antlr.TerminalNode {
        return this.getToken(YQLParser.ASYNC, 0)!;
    }
    public REPLICATION(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPLICATION, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_replication_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_replication_stmt) {
            return visitor.visitDrop_replication_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Action_or_subquery_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_bind_parameter(): Opt_bind_parameterContext[];
    public opt_bind_parameter(i: number): Opt_bind_parameterContext | null;
    public opt_bind_parameter(i?: number): Opt_bind_parameterContext[] | Opt_bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_bind_parameterContext);
        }

        return this.getRuleContext(i, Opt_bind_parameterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_action_or_subquery_args;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAction_or_subquery_args) {
            return visitor.visitAction_or_subquery_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Define_action_or_subquery_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFINE(): antlr.TerminalNode[];
    public DEFINE(i: number): antlr.TerminalNode | null;
    public DEFINE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DEFINE);
    	} else {
    		return this.getToken(YQLParser.DEFINE, i);
    	}
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public define_action_or_subquery_body(): Define_action_or_subquery_bodyContext {
        return this.getRuleContext(0, Define_action_or_subquery_bodyContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(YQLParser.END, 0)!;
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ACTION, 0);
    }
    public SUBQUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBQUERY, 0);
    }
    public action_or_subquery_args(): Action_or_subquery_argsContext | null {
        return this.getRuleContext(0, Action_or_subquery_argsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_define_action_or_subquery_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDefine_action_or_subquery_stmt) {
            return visitor.visitDefine_action_or_subquery_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Define_action_or_subquery_bodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public sql_stmt_core(): Sql_stmt_coreContext[];
    public sql_stmt_core(i: number): Sql_stmt_coreContext | null;
    public sql_stmt_core(i?: number): Sql_stmt_coreContext[] | Sql_stmt_coreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_stmt_coreContext);
        }

        return this.getRuleContext(i, Sql_stmt_coreContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_define_action_or_subquery_body;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDefine_action_or_subquery_body) {
            return visitor.visitDefine_action_or_subquery_body(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class If_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF(): antlr.TerminalNode {
        return this.getToken(YQLParser.IF, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public do_stmt(): Do_stmtContext[];
    public do_stmt(i: number): Do_stmtContext | null;
    public do_stmt(i?: number): Do_stmtContext[] | Do_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Do_stmtContext);
        }

        return this.getRuleContext(i, Do_stmtContext);
    }
    public EVALUATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EVALUATE, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_if_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIf_stmt) {
            return visitor.visitIf_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class For_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(YQLParser.FOR, 0)!;
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(YQLParser.IN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public do_stmt(): Do_stmtContext[];
    public do_stmt(i: number): Do_stmtContext | null;
    public do_stmt(i?: number): Do_stmtContext[] | Do_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Do_stmtContext);
        }

        return this.getRuleContext(i, Do_stmtContext);
    }
    public EVALUATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EVALUATE, 0);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARALLEL, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_for_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFor_stmt) {
            return visitor.visitFor_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_key(): Table_keyContext | null {
        return this.getRuleContext(0, Table_keyContext);
    }
    public an_id_expr(): An_id_exprContext | null {
        return this.getRuleContext(0, An_id_exprContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public cluster_expr(): Cluster_exprContext | null {
        return this.getRuleContext(0, Cluster_exprContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public table_hints(): Table_hintsContext | null {
        return this.getRuleContext(0, Table_hintsContext);
    }
    public table_arg(): Table_argContext[];
    public table_arg(i: number): Table_argContext | null;
    public table_arg(i?: number): Table_argContext[] | Table_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_argContext);
        }

        return this.getRuleContext(i, Table_argContext);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_ref) {
            return visitor.visitTable_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_keyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_table_or_type(): Id_table_or_typeContext {
        return this.getRuleContext(0, Id_table_or_typeContext)!;
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_key;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_key) {
            return visitor.visitTable_key(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_expr(): Named_exprContext {
        return this.getRuleContext(0, Named_exprContext)!;
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_arg;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_arg) {
            return visitor.visitTable_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_hintsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public table_hint(): Table_hintContext[];
    public table_hint(i: number): Table_hintContext | null;
    public table_hint(i?: number): Table_hintContext[] | Table_hintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_hintContext);
        }

        return this.getRuleContext(i, Table_hintContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_hints;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_hints) {
            return visitor.visitTable_hints(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_hintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_hint(): An_id_hintContext | null {
        return this.getRuleContext(0, An_id_hintContext);
    }
    public EQUALS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EQUALS, 0);
    }
    public type_name_tag(): Type_name_tagContext[];
    public type_name_tag(i: number): Type_name_tagContext | null;
    public type_name_tag(i?: number): Type_name_tagContext[] | Type_name_tagContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_tagContext);
        }

        return this.getRuleContext(i, Type_name_tagContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public type_name_or_bind(): Type_name_or_bindContext | null {
        return this.getRuleContext(0, Type_name_or_bindContext);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SCHEMA, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMNS, 0);
    }
    public struct_arg_positional(): Struct_arg_positionalContext[];
    public struct_arg_positional(i: number): Struct_arg_positionalContext | null;
    public struct_arg_positional(i?: number): Struct_arg_positionalContext[] | Struct_arg_positionalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Struct_arg_positionalContext);
        }

        return this.getRuleContext(i, Struct_arg_positionalContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_hint;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_hint) {
            return visitor.visitTable_hint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_or_at(): Id_or_atContext {
        return this.getRuleContext(0, Id_or_atContext)!;
    }
    public cluster_expr(): Cluster_exprContext | null {
        return this.getRuleContext(0, Cluster_exprContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_ref) {
            return visitor.visitObject_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Simple_table_ref_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_ref(): Object_refContext | null {
        return this.getRuleContext(0, Object_refContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_simple_table_ref_core;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSimple_table_ref_core) {
            return visitor.visitSimple_table_ref_core(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Simple_table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext {
        return this.getRuleContext(0, Simple_table_ref_coreContext)!;
    }
    public table_hints(): Table_hintsContext | null {
        return this.getRuleContext(0, Table_hintsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_simple_table_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSimple_table_ref) {
            return visitor.visitSimple_table_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Into_simple_table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public ERASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERASE, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public pure_column_list(): Pure_column_listContext | null {
        return this.getRuleContext(0, Pure_column_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_into_simple_table_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInto_simple_table_ref) {
            return visitor.visitInto_simple_table_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Delete_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(YQLParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(YQLParser.FROM, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public where_expr(): Where_exprContext | null {
        return this.getRuleContext(0, Where_exprContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public into_values_source(): Into_values_sourceContext | null {
        return this.getRuleContext(0, Into_values_sourceContext);
    }
    public returning_columns_list(): Returning_columns_listContext | null {
        return this.getRuleContext(0, Returning_columns_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_delete_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDelete_stmt) {
            return visitor.visitDelete_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Update_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.UPDATE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SET, 0);
    }
    public set_clause_choice(): Set_clause_choiceContext | null {
        return this.getRuleContext(0, Set_clause_choiceContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public into_values_source(): Into_values_sourceContext | null {
        return this.getRuleContext(0, Into_values_sourceContext);
    }
    public returning_columns_list(): Returning_columns_listContext | null {
        return this.getRuleContext(0, Returning_columns_listContext);
    }
    public where_expr(): Where_exprContext | null {
        return this.getRuleContext(0, Where_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_update_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUpdate_stmt) {
            return visitor.visitUpdate_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_clause_choiceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_clause_list(): Set_clause_listContext | null {
        return this.getRuleContext(0, Set_clause_listContext);
    }
    public multiple_column_assignment(): Multiple_column_assignmentContext | null {
        return this.getRuleContext(0, Multiple_column_assignmentContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_clause_choice;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSet_clause_choice) {
            return visitor.visitSet_clause_choice(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_clause_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_clause(): Set_clauseContext[];
    public set_clause(i: number): Set_clauseContext | null;
    public set_clause(i?: number): Set_clauseContext[] | Set_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_clauseContext);
        }

        return this.getRuleContext(i, Set_clauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_clause_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSet_clause_list) {
            return visitor.visitSet_clause_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_target(): Set_targetContext {
        return this.getRuleContext(0, Set_targetContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSet_clause) {
            return visitor.visitSet_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_target;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSet_target) {
            return visitor.visitSet_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Multiple_column_assignmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_target_list(): Set_target_listContext {
        return this.getRuleContext(0, Set_target_listContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public simple_values_source(): Simple_values_sourceContext {
        return this.getRuleContext(0, Simple_values_sourceContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_multiple_column_assignment;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitMultiple_column_assignment) {
            return visitor.visitMultiple_column_assignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_target_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public set_target(): Set_targetContext[];
    public set_target(i: number): Set_targetContext | null;
    public set_target(i?: number): Set_targetContext[] | Set_targetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_targetContext);
        }

        return this.getRuleContext(i, Set_targetContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_target_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSet_target_list) {
            return visitor.visitSet_target_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_topic_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public TOPIC(): antlr.TerminalNode {
        return this.getToken(YQLParser.TOPIC, 0)!;
    }
    public topic_ref(): Topic_refContext {
        return this.getRuleContext(0, Topic_refContext)!;
    }
    public create_topic_entries(): Create_topic_entriesContext | null {
        return this.getRuleContext(0, Create_topic_entriesContext);
    }
    public with_topic_settings(): With_topic_settingsContext | null {
        return this.getRuleContext(0, With_topic_settingsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_topic_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_topic_stmt) {
            return visitor.visitCreate_topic_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_topic_entriesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public create_topic_entry(): Create_topic_entryContext[];
    public create_topic_entry(i: number): Create_topic_entryContext | null;
    public create_topic_entry(i?: number): Create_topic_entryContext[] | Create_topic_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Create_topic_entryContext);
        }

        return this.getRuleContext(i, Create_topic_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_topic_entries;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_topic_entries) {
            return visitor.visitCreate_topic_entries(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_topic_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_create_consumer_entry(): Topic_create_consumer_entryContext {
        return this.getRuleContext(0, Topic_create_consumer_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_topic_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_topic_entry) {
            return visitor.visitCreate_topic_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class With_topic_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_settings(): Topic_settingsContext {
        return this.getRuleContext(0, Topic_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_with_topic_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWith_topic_settings) {
            return visitor.visitWith_topic_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public TOPIC(): antlr.TerminalNode {
        return this.getToken(YQLParser.TOPIC, 0)!;
    }
    public topic_ref(): Topic_refContext {
        return this.getRuleContext(0, Topic_refContext)!;
    }
    public alter_topic_action(): Alter_topic_actionContext[];
    public alter_topic_action(i: number): Alter_topic_actionContext | null;
    public alter_topic_action(i?: number): Alter_topic_actionContext[] | Alter_topic_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_topic_actionContext);
        }

        return this.getRuleContext(i, Alter_topic_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_stmt) {
            return visitor.visitAlter_topic_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_topic_add_consumer(): Alter_topic_add_consumerContext | null {
        return this.getRuleContext(0, Alter_topic_add_consumerContext);
    }
    public alter_topic_alter_consumer(): Alter_topic_alter_consumerContext | null {
        return this.getRuleContext(0, Alter_topic_alter_consumerContext);
    }
    public alter_topic_drop_consumer(): Alter_topic_drop_consumerContext | null {
        return this.getRuleContext(0, Alter_topic_drop_consumerContext);
    }
    public alter_topic_set_settings(): Alter_topic_set_settingsContext | null {
        return this.getRuleContext(0, Alter_topic_set_settingsContext);
    }
    public alter_topic_reset_settings(): Alter_topic_reset_settingsContext | null {
        return this.getRuleContext(0, Alter_topic_reset_settingsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_action) {
            return visitor.visitAlter_topic_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_add_consumerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public topic_create_consumer_entry(): Topic_create_consumer_entryContext {
        return this.getRuleContext(0, Topic_create_consumer_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_add_consumer;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_add_consumer) {
            return visitor.visitAlter_topic_add_consumer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_create_consumer_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONSUMER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CONSUMER, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public topic_consumer_with_settings(): Topic_consumer_with_settingsContext | null {
        return this.getRuleContext(0, Topic_consumer_with_settingsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_create_consumer_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_create_consumer_entry) {
            return visitor.visitTopic_create_consumer_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_alter_consumerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public CONSUMER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CONSUMER, 0)!;
    }
    public topic_consumer_ref(): Topic_consumer_refContext {
        return this.getRuleContext(0, Topic_consumer_refContext)!;
    }
    public alter_topic_alter_consumer_entry(): Alter_topic_alter_consumer_entryContext {
        return this.getRuleContext(0, Alter_topic_alter_consumer_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_alter_consumer;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_alter_consumer) {
            return visitor.visitAlter_topic_alter_consumer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_alter_consumer_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_alter_consumer_set(): Topic_alter_consumer_setContext | null {
        return this.getRuleContext(0, Topic_alter_consumer_setContext);
    }
    public topic_alter_consumer_reset(): Topic_alter_consumer_resetContext | null {
        return this.getRuleContext(0, Topic_alter_consumer_resetContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_alter_consumer_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_alter_consumer_entry) {
            return visitor.visitAlter_topic_alter_consumer_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_drop_consumerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public CONSUMER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CONSUMER, 0)!;
    }
    public topic_consumer_ref(): Topic_consumer_refContext {
        return this.getRuleContext(0, Topic_consumer_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_drop_consumer;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_drop_consumer) {
            return visitor.visitAlter_topic_drop_consumer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_alter_consumer_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_consumer_settings(): Topic_consumer_settingsContext {
        return this.getRuleContext(0, Topic_consumer_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_alter_consumer_set;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_alter_consumer_set) {
            return visitor.visitTopic_alter_consumer_set(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_alter_consumer_resetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_alter_consumer_reset;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_alter_consumer_reset) {
            return visitor.visitTopic_alter_consumer_reset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_set_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_settings(): Topic_settingsContext {
        return this.getRuleContext(0, Topic_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_set_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_set_settings) {
            return visitor.visitAlter_topic_set_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_reset_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public an_id_pure(): An_id_pureContext[];
    public an_id_pure(i: number): An_id_pureContext | null;
    public an_id_pure(i?: number): An_id_pureContext[] | An_id_pureContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_pureContext);
        }

        return this.getRuleContext(i, An_id_pureContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_reset_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_reset_settings) {
            return visitor.visitAlter_topic_reset_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_topic_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public TOPIC(): antlr.TerminalNode {
        return this.getToken(YQLParser.TOPIC, 0)!;
    }
    public topic_ref(): Topic_refContext {
        return this.getRuleContext(0, Topic_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_topic_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_topic_stmt) {
            return visitor.visitDrop_topic_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_settings_entry(): Topic_settings_entryContext[];
    public topic_settings_entry(i: number): Topic_settings_entryContext | null;
    public topic_settings_entry(i?: number): Topic_settings_entryContext[] | Topic_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Topic_settings_entryContext);
        }

        return this.getRuleContext(i, Topic_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_settings) {
            return visitor.visitTopic_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public topic_setting_value(): Topic_setting_valueContext {
        return this.getRuleContext(0, Topic_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_settings_entry) {
            return visitor.visitTopic_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_setting_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_setting_value) {
            return visitor.visitTopic_setting_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_consumer_with_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_consumer_settings(): Topic_consumer_settingsContext {
        return this.getRuleContext(0, Topic_consumer_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_with_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_consumer_with_settings) {
            return visitor.visitTopic_consumer_with_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_consumer_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_consumer_settings_entry(): Topic_consumer_settings_entryContext[];
    public topic_consumer_settings_entry(i: number): Topic_consumer_settings_entryContext | null;
    public topic_consumer_settings_entry(i?: number): Topic_consumer_settings_entryContext[] | Topic_consumer_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Topic_consumer_settings_entryContext);
        }

        return this.getRuleContext(i, Topic_consumer_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_consumer_settings) {
            return visitor.visitTopic_consumer_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_consumer_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public topic_consumer_setting_value(): Topic_consumer_setting_valueContext {
        return this.getRuleContext(0, Topic_consumer_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_consumer_settings_entry) {
            return visitor.visitTopic_consumer_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_consumer_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_setting_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_consumer_setting_value) {
            return visitor.visitTopic_consumer_setting_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public cluster_expr(): Cluster_exprContext | null {
        return this.getRuleContext(0, Cluster_exprContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_ref) {
            return visitor.visitTopic_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_consumer_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_pure(): An_id_pureContext {
        return this.getRuleContext(0, An_id_pureContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_consumer_ref) {
            return visitor.visitTopic_consumer_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Null_treatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESPECT, 0);
    }
    public NULLS(): antlr.TerminalNode {
        return this.getToken(YQLParser.NULLS, 0)!;
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_null_treatment;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNull_treatment) {
            return visitor.visitNull_treatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Filter_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.FILTER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public where_expr(): Where_exprContext {
        return this.getRuleContext(0, Where_exprContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_filter_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFilter_clause) {
            return visitor.visitFilter_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_name_or_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_name(): Window_nameContext | null {
        return this.getRuleContext(0, Window_nameContext);
    }
    public window_specification(): Window_specificationContext | null {
        return this.getRuleContext(0, Window_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_name_or_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_name_or_specification) {
            return visitor.visitWindow_name_or_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_window(): An_id_windowContext {
        return this.getRuleContext(0, An_id_windowContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_name) {
            return visitor.visitWindow_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW(): antlr.TerminalNode {
        return this.getToken(YQLParser.WINDOW, 0)!;
    }
    public window_definition_list(): Window_definition_listContext {
        return this.getRuleContext(0, Window_definition_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_clause) {
            return visitor.visitWindow_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_definition_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_definition(): Window_definitionContext[];
    public window_definition(i: number): Window_definitionContext | null;
    public window_definition(i?: number): Window_definitionContext[] | Window_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_definitionContext);
        }

        return this.getRuleContext(i, Window_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_definition_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_definition_list) {
            return visitor.visitWindow_definition_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public new_window_name(): New_window_nameContext {
        return this.getRuleContext(0, New_window_nameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public window_specification(): Window_specificationContext {
        return this.getRuleContext(0, Window_specificationContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_definition;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_definition) {
            return visitor.visitWindow_definition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class New_window_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_name(): Window_nameContext {
        return this.getRuleContext(0, Window_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_new_window_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNew_window_name) {
            return visitor.visitNew_window_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public window_specification_details(): Window_specification_detailsContext {
        return this.getRuleContext(0, Window_specification_detailsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_specification) {
            return visitor.visitWindow_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_specification_detailsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public existing_window_name(): Existing_window_nameContext | null {
        return this.getRuleContext(0, Existing_window_nameContext);
    }
    public window_partition_clause(): Window_partition_clauseContext | null {
        return this.getRuleContext(0, Window_partition_clauseContext);
    }
    public window_order_clause(): Window_order_clauseContext | null {
        return this.getRuleContext(0, Window_order_clauseContext);
    }
    public window_frame_clause(): Window_frame_clauseContext | null {
        return this.getRuleContext(0, Window_frame_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_specification_details;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_specification_details) {
            return visitor.visitWindow_specification_details(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Existing_window_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_name(): Window_nameContext {
        return this.getRuleContext(0, Window_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_existing_window_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExisting_window_name) {
            return visitor.visitExisting_window_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_partition_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(YQLParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public named_expr_list(): Named_expr_listContext {
        return this.getRuleContext(0, Named_expr_listContext)!;
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMPACT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_partition_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_partition_clause) {
            return visitor.visitWindow_partition_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_order_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public order_by_clause(): Order_by_clauseContext {
        return this.getRuleContext(0, Order_by_clauseContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_order_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_order_clause) {
            return visitor.visitWindow_order_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_frame_units(): Window_frame_unitsContext {
        return this.getRuleContext(0, Window_frame_unitsContext)!;
    }
    public window_frame_extent(): Window_frame_extentContext {
        return this.getRuleContext(0, Window_frame_extentContext)!;
    }
    public window_frame_exclusion(): Window_frame_exclusionContext | null {
        return this.getRuleContext(0, Window_frame_exclusionContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_clause) {
            return visitor.visitWindow_frame_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_unitsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RANGE, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUPS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_units;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_units) {
            return visitor.visitWindow_frame_units(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_extentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_frame_bound(): Window_frame_boundContext | null {
        return this.getRuleContext(0, Window_frame_boundContext);
    }
    public window_frame_between(): Window_frame_betweenContext | null {
        return this.getRuleContext(0, Window_frame_betweenContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_extent;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_extent) {
            return visitor.visitWindow_frame_extent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_betweenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.BETWEEN, 0)!;
    }
    public window_frame_bound(): Window_frame_boundContext[];
    public window_frame_bound(i: number): Window_frame_boundContext | null;
    public window_frame_bound(i?: number): Window_frame_boundContext[] | Window_frame_boundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_frame_boundContext);
        }

        return this.getRuleContext(i, Window_frame_boundContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(YQLParser.AND, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_between;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_between) {
            return visitor.visitWindow_frame_between(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_boundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOLLOWING, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNBOUNDED, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_bound;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_bound) {
            return visitor.visitWindow_frame_bound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_exclusionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCLUDE(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXCLUDE, 0)!;
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUP, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TIES, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NO, 0);
    }
    public OTHERS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OTHERS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_exclusion;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_exclusion) {
            return visitor.visitWindow_frame_exclusion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Use_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(YQLParser.USE, 0)!;
    }
    public cluster_expr(): Cluster_exprContext {
        return this.getRuleContext(0, Cluster_exprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_use_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUse_stmt) {
            return visitor.visitUse_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Subselect_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public select_unparenthesized_stmt(): Select_unparenthesized_stmtContext | null {
        return this.getRuleContext(0, Select_unparenthesized_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_subselect_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSubselect_stmt) {
            return visitor.visitSubselect_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_nodes_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter_list(): Bind_parameter_listContext {
        return this.getRuleContext(0, Bind_parameter_listContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public subselect_stmt(): Subselect_stmtContext | null {
        return this.getRuleContext(0, Subselect_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_nodes_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_nodes_stmt) {
            return visitor.visitNamed_nodes_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Commit_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMIT(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMIT, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_commit_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCommit_stmt) {
            return visitor.visitCommit_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Rollback_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLLBACK(): antlr.TerminalNode {
        return this.getToken(YQLParser.ROLLBACK, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_rollback_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRollback_stmt) {
            return visitor.visitRollback_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ID_PLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ID_PLAIN, 0);
    }
    public ID_QUOTED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ID_QUOTED, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_identifier;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword(): KeywordContext | null {
        return this.getRuleContext(0, KeywordContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId) {
            return visitor.visitId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_schema;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_schema) {
            return visitor.visitId_schema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_expr) {
            return visitor.visitId_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_expr_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_expr_in;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_expr_in) {
            return visitor.visitId_expr_in(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_windowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_window;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_window) {
            return visitor.visitId_window(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_table;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_table) {
            return visitor.visitId_table(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_withoutContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_without;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_without) {
            return visitor.visitId_without(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_hintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_hint;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_hint) {
            return visitor.visitId_hint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_as_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_as_compat(): Keyword_as_compatContext | null {
        return this.getRuleContext(0, Keyword_as_compatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_as_compat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_as_compat) {
            return visitor.visitId_as_compat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_idContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id) {
            return visitor.visitAn_id(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_or_type;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_or_type) {
            return visitor.visitAn_id_or_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_schema(): Id_schemaContext | null {
        return this.getRuleContext(0, Id_schemaContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_schema;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_schema) {
            return visitor.visitAn_id_schema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_expr(): Id_exprContext | null {
        return this.getRuleContext(0, Id_exprContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_expr) {
            return visitor.visitAn_id_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_expr_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_expr_in(): Id_expr_inContext | null {
        return this.getRuleContext(0, Id_expr_inContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_expr_in;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_expr_in) {
            return visitor.visitAn_id_expr_in(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_windowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_window(): Id_windowContext | null {
        return this.getRuleContext(0, Id_windowContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_window;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_window) {
            return visitor.visitAn_id_window(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_table(): Id_tableContext | null {
        return this.getRuleContext(0, Id_tableContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_table;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_table) {
            return visitor.visitAn_id_table(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_withoutContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_without(): Id_withoutContext | null {
        return this.getRuleContext(0, Id_withoutContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_without;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_without) {
            return visitor.visitAn_id_without(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_hintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_hint(): Id_hintContext | null {
        return this.getRuleContext(0, Id_hintContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_hint;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_hint) {
            return visitor.visitAn_id_hint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_pureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_pure;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_pure) {
            return visitor.visitAn_id_pure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_as_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_as_compat(): Id_as_compatContext | null {
        return this.getRuleContext(0, Id_as_compatContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_as_compat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_as_compat) {
            return visitor.visitAn_id_as_compat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class View_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIMARY, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_view_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitView_name) {
            return visitor.visitView_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_id_prefixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_id_prefix;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOpt_id_prefix) {
            return visitor.visitOpt_id_prefix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cluster_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pure_column_or_named(): Pure_column_or_namedContext | null {
        return this.getRuleContext(0, Pure_column_or_namedContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cluster_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCluster_expr) {
            return visitor.visitCluster_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public type_id(): Type_idContext | null {
        return this.getRuleContext(0, Type_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_or_type;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_or_type) {
            return visitor.visitId_or_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_id_prefix_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_id_prefix_or_type;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOpt_id_prefix_or_type) {
            return visitor.visitOpt_id_prefix_or_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_or_atContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_or_at;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_or_at) {
            return visitor.visitId_or_at(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_table_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_table(): An_id_tableContext | null {
        return this.getRuleContext(0, An_id_tableContext);
    }
    public type_id(): Type_idContext | null {
        return this.getRuleContext(0, Type_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_table_or_type;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_table_or_type) {
            return visitor.visitId_table_or_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_table_or_atContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_table_or_type(): Id_table_or_typeContext {
        return this.getRuleContext(0, Id_table_or_typeContext)!;
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_table_or_at;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_table_or_at) {
            return visitor.visitId_table_or_at(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword) {
            return visitor.visitKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_expr_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYMMETRIC, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BETWEEN, 0);
    }
    public BITCAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BITCAST, 0);
    }
    public CASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CASE, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CAST, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CUBE, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIME, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIMESTAMP, 0);
    }
    public EMPTY_ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY_ACTION, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FROM, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FULL, 0);
    }
    public HOP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HOP, 0);
    }
    public JSON_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JSON_EXISTS, 0);
    }
    public JSON_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JSON_VALUE, 0);
    }
    public JSON_QUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JSON_QUERY, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LOCAL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public PROCESS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PROCESS, 0);
    }
    public REDUCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REDUCE, 0);
    }
    public RETURN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RETURN, 0);
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RETURNING, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROLLUP, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SELECT, 0);
    }
    public SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYMMETRIC, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNBOUNDED, 0);
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WHEN, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WHERE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_expr_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_expr_uncompat) {
            return visitor.visitKeyword_expr_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_table_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANY, 0);
    }
    public ERASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERASE, 0);
    }
    public STREAM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STREAM, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_table_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_table_uncompat) {
            return visitor.visitKeyword_table_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_select_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISTINCT, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCEPT, 0);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTERSECT, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIMIT, 0);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNION, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WINDOW, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_select_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_select_uncompat) {
            return visitor.visitKeyword_select_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_alter_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLUMN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_alter_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_alter_uncompat) {
            return visitor.visitKeyword_alter_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_in_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMPACT(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMPACT, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_in_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_in_uncompat) {
            return visitor.visitKeyword_in_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_window_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUPS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RANGE, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_window_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_window_uncompat) {
            return visitor.visitKeyword_window_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_hint_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SCHEMA, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMNS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_hint_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_hint_uncompat) {
            return visitor.visitKeyword_hint_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_as_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTRIBUTES, 0);
    }
    public CONNECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONNECT, 0);
    }
    public CONSUMER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONSUMER, 0);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATA, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESCRIBE, 0);
    }
    public DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIRECTORY, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FIRST, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIAL, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LAST, 0);
    }
    public LEGACY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEGACY, 0);
    }
    public MANAGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MANAGE, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCHES, 0);
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MEASURES, 0);
    }
    public MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MICROSECONDS, 0);
    }
    public MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MILLISECONDS, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MODIFY, 0);
    }
    public NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NANOSECONDS, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NEXT, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OMIT, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONE, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARALLEL, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PAST, 0);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PATTERN, 0);
    }
    public PER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PER, 0);
    }
    public PERMUTE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PERMUTE, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIVILEGES, 0);
    }
    public QUEUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUEUE, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REMOVE, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLICATION, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVOKE, 0);
    }
    public SECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SECONDS, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEEK, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SHOW, 0);
    }
    public SKIP_RULE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SKIP_RULE, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SOURCE, 0);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBSET, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLES, 0);
    }
    public TOPIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TOPIC, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TYPE, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNMATCHED, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_as_compat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_as_compat) {
            return visitor.visitKeyword_as_compat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ABORT, 0);
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ACTION, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ADD, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AFTER, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALTER, 0);
    }
    public ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANALYZE, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AND, 0);
    }
    public ANSI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANSI, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARRAY, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYNC, 0);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTACH, 0);
    }
    public ATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTRIBUTES, 0);
    }
    public AUTOINCREMENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AUTOINCREMENT, 0);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BEFORE, 0);
    }
    public BEGIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BEGIN, 0);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BERNOULLI, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CASCADE, 0);
    }
    public CHANGEFEED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CHANGEFEED, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CHECK, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLLATE, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMIT, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONDITIONAL, 0);
    }
    public CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONFLICT, 0);
    }
    public CONNECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONNECT, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONSTRAINT, 0);
    }
    public CONSUMER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONSUMER, 0);
    }
    public COVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COVER, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CREATE, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CROSS, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT, 0);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATA, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATABASE, 0);
    }
    public DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DECIMAL, 0);
    }
    public DECLARE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DECLARE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFERRABLE, 0);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFERRED, 0);
    }
    public DEFINE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFINE, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DELETE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESC, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESCRIBE, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DETACH, 0);
    }
    public DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIRECTORY, 0);
    }
    public DISABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISABLE, 0);
    }
    public DISCARD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISCARD, 0);
    }
    public DO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DO, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public EACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EACH, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENCRYPTED, 0);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.END, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ESCAPE, 0);
    }
    public EVALUATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EVALUATE, 0);
    }
    public EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUDE, 0);
    }
    public EXCLUSION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUSION, 0);
    }
    public EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUSIVE, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPLAIN, 0);
    }
    public EXPORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPORT, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public FAIL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FAIL, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FAMILY, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FILTER, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FIRST, 0);
    }
    public FLATTEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FLATTEN, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOLLOWING, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOR, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOREIGN, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FUNCTION, 0);
    }
    public GLOB(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GLOB, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUP, 0);
    }
    public GROUPING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUPING, 0);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HASH, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ILIKE, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IMMEDIATE, 0);
    }
    public IMPORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IMPORT, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IN, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INDEX, 0);
    }
    public INDEXED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INDEXED, 0);
    }
    public INHERITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INHERITS, 0);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIAL, 0);
    }
    public INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIALLY, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INNER, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSTEAD, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTO, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IS, 0);
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ISNULL, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JOIN, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.KEY, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LAST, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEFT, 0);
    }
    public LEGACY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEGACY, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIKE, 0);
    }
    public MANAGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MANAGE, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCHES, 0);
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MEASURES, 0);
    }
    public MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MICROSECONDS, 0);
    }
    public MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MILLISECONDS, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MODIFY, 0);
    }
    public NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NANOSECONDS, 0);
    }
    public NATURAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NATURAL, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NEXT, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NO, 0);
    }
    public NOTNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOTNULL, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULLS, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OBJECT, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OF, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OFFSET, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OMIT, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONE, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONLY, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ORDER, 0);
    }
    public OTHERS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OTHERS, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OUTER, 0);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OVER, 0);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARALLEL, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARTITION, 0);
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSING, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSWORD, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PAST, 0);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PATTERN, 0);
    }
    public PER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PER, 0);
    }
    public PERMUTE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PERMUTE, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLAN, 0);
    }
    public PRAGMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRAGMA, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRECEDING, 0);
    }
    public PRESORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRESORT, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIMARY, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIVILEGES, 0);
    }
    public QUEUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUEUE, 0);
    }
    public RAISE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RAISE, 0);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REFERENCES, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REGEXP, 0);
    }
    public REINDEX(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REINDEX, 0);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RELEASE, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REMOVE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RENAME, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLICATION, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESET, 0);
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESPECT, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESTRICT, 0);
    }
    public RESULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESULT, 0);
    }
    public REVERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVERT, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVOKE, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RIGHT, 0);
    }
    public RLIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RLIKE, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROLLBACK, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SAMPLE, 0);
    }
    public SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SAVEPOINT, 0);
    }
    public SECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SECONDS, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEEK, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEMI, 0);
    }
    public SETS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SETS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SHOW, 0);
    }
    public SKIP_RULE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SKIP_RULE, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SOURCE, 0);
    }
    public SUBQUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBQUERY, 0);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBSET, 0);
    }
    public SYMBOLS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYMBOLS, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYNC, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYSTEM, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLES, 0);
    }
    public TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESAMPLE, 0);
    }
    public TABLESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESTORE, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMP, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMPORARY, 0);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.THEN, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TIES, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public TOPIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TOPIC, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRANSACTION, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRIGGER, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TYPE, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNCONDITIONAL, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNIQUE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNKNOWN, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNMATCHED, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPDATE, 0);
    }
    public UPSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPSERT, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USING, 0);
    }
    public VACUUM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VACUUM, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VALUES, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public VIRTUAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIRTUAL, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WRAPPER, 0);
    }
    public XOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.XOR, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_compat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_compat) {
            return visitor.visitKeyword_compat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_idContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTIONAL, 0);
    }
    public TUPLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TUPLE, 0);
    }
    public STRUCT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRUCT, 0);
    }
    public VARIANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VARIANT, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIST, 0);
    }
    public FLOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FLOW, 0);
    }
    public DICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DICT, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SET, 0);
    }
    public ENUM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENUM, 0);
    }
    public RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESOURCE, 0);
    }
    public TAGGED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TAGGED, 0);
    }
    public CALLABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CALLABLE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_id;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_id) {
            return visitor.visitType_id(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Bool_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bool_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBool_value) {
            return visitor.visitBool_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RealContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.REAL, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_real;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReal) {
            return visitor.visitReal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntegerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DIGITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIGITS, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTEGER_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_integer;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInteger) {
            return visitor.visitInteger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_query_yqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_list_yq(): Sql_stmt_list_yqContext | null {
        return this.getRuleContext(0, Sql_stmt_list_yqContext);
    }
    public PRAGMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRAGMA, 0);
    }
    public ANSI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANSI, 0);
    }
    public DIGITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIGITS, 0);
    }
    public ansi_sql_stmt_list(): Ansi_sql_stmt_listContext | null {
        return this.getRuleContext(0, Ansi_sql_stmt_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_query_yq;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_query_yq) {
            return visitor.visitSql_query_yq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmt_list_yqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_yq(): Sql_stmt_yqContext[];
    public sql_stmt_yq(i: number): Sql_stmt_yqContext | null;
    public sql_stmt_yq(i?: number): Sql_stmt_yqContext[] | Sql_stmt_yqContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_stmt_yqContext);
        }

        return this.getRuleContext(i, Sql_stmt_yqContext);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(YQLParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_list_yq;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt_list_yq) {
            return visitor.visitSql_stmt_list_yq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmt_yqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_core_yq(): Sql_stmt_core_yqContext {
        return this.getRuleContext(0, Sql_stmt_core_yqContext)!;
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPLAIN, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUERY, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLAN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_yq;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt_yq) {
            return visitor.visitSql_stmt_yq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmt_core_yqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pragma_stmt(): Pragma_stmtContext | null {
        return this.getRuleContext(0, Pragma_stmtContext);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public named_nodes_stmt(): Named_nodes_stmtContext | null {
        return this.getRuleContext(0, Named_nodes_stmtContext);
    }
    public use_stmt(): Use_stmtContext | null {
        return this.getRuleContext(0, Use_stmtContext);
    }
    public into_table_stmt_yq(): Into_table_stmt_yqContext | null {
        return this.getRuleContext(0, Into_table_stmt_yqContext);
    }
    public declare_stmt(): Declare_stmtContext | null {
        return this.getRuleContext(0, Declare_stmtContext);
    }
    public import_stmt(): Import_stmtContext | null {
        return this.getRuleContext(0, Import_stmtContext);
    }
    public export_stmt(): Export_stmtContext | null {
        return this.getRuleContext(0, Export_stmtContext);
    }
    public do_stmt(): Do_stmtContext | null {
        return this.getRuleContext(0, Do_stmtContext);
    }
    public define_action_or_subquery_stmt(): Define_action_or_subquery_stmtContext | null {
        return this.getRuleContext(0, Define_action_or_subquery_stmtContext);
    }
    public if_stmt(): If_stmtContext | null {
        return this.getRuleContext(0, If_stmtContext);
    }
    public for_stmt(): For_stmtContext | null {
        return this.getRuleContext(0, For_stmtContext);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_core_yq;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt_core_yq) {
            return visitor.visitSql_stmt_core_yq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Replication_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_replication_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReplication_name) {
            return visitor.visitReplication_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Where_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(YQLParser.WHERE, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_where_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWhere_expr) {
            return visitor.visitWhere_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class From_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(YQLParser.FROM, 0)!;
    }
    public join_source(): Join_sourceContext {
        return this.getRuleContext(0, Join_sourceContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_from_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFrom_stmt) {
            return visitor.visitFrom_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_for_autocompleteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_stmt(): Alter_table_stmtContext | null {
        return this.getRuleContext(0, Alter_table_stmtContext);
    }
    public alter_table_store_stmt(): Alter_table_store_stmtContext | null {
        return this.getRuleContext(0, Alter_table_store_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_for_autocomplete;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_for_autocomplete) {
            return visitor.visitAlter_table_for_autocomplete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
