////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/yql/grammar/YQL.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { YQLVisitor } from "./YQLVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class YQLParser extends antlr.Parser {
    public static readonly QUERY = 1;
    public static readonly EQUALS = 2;
    public static readonly EQUALS2 = 3;
    public static readonly NOT_EQUALS = 4;
    public static readonly NOT_EQUALS2 = 5;
    public static readonly LESS = 6;
    public static readonly LESS_OR_EQ = 7;
    public static readonly GREATER = 8;
    public static readonly GREATER_OR_EQ = 9;
    public static readonly SHIFT_LEFT = 10;
    public static readonly ROT_LEFT = 11;
    public static readonly AMPERSAND = 12;
    public static readonly PIPE = 13;
    public static readonly DOUBLE_PIPE = 14;
    public static readonly STRUCT_OPEN = 15;
    public static readonly STRUCT_CLOSE = 16;
    public static readonly PLUS = 17;
    public static readonly MINUS = 18;
    public static readonly TILDA = 19;
    public static readonly ASTERISK = 20;
    public static readonly SLASH = 21;
    public static readonly PERCENT = 22;
    public static readonly SEMICOLON = 23;
    public static readonly DOT = 24;
    public static readonly COMMA = 25;
    public static readonly LPAREN = 26;
    public static readonly RPAREN = 27;
    public static readonly QUESTION = 28;
    public static readonly COLON = 29;
    public static readonly COMMAT = 30;
    public static readonly DOUBLE_COMMAT = 31;
    public static readonly DOLLAR = 32;
    public static readonly LBRACE_CURLY = 33;
    public static readonly RBRACE_CURLY = 34;
    public static readonly CARET = 35;
    public static readonly NAMESPACE = 36;
    public static readonly ARROW = 37;
    public static readonly RBRACE_SQUARE = 38;
    public static readonly LBRACE_SQUARE = 39;
    public static readonly ABORT = 40;
    public static readonly ACTION = 41;
    public static readonly ADD = 42;
    public static readonly AFTER = 43;
    public static readonly ALL = 44;
    public static readonly ALTER = 45;
    public static readonly ANALYZE = 46;
    public static readonly AND = 47;
    public static readonly ANSI = 48;
    public static readonly ANY = 49;
    public static readonly ARRAY = 50;
    public static readonly AS = 51;
    public static readonly ASC = 52;
    public static readonly ASSUME = 53;
    public static readonly ASYMMETRIC = 54;
    public static readonly ASYNC = 55;
    public static readonly AT = 56;
    public static readonly ATTACH = 57;
    public static readonly ATTRIBUTES = 58;
    public static readonly AUTOINCREMENT = 59;
    public static readonly AUTOMAP = 60;
    public static readonly BACKUP = 61;
    public static readonly COLLECTION = 62;
    public static readonly BEFORE = 63;
    public static readonly BEGIN = 64;
    public static readonly BERNOULLI = 65;
    public static readonly BETWEEN = 66;
    public static readonly BITCAST = 67;
    public static readonly BY = 68;
    public static readonly CALLABLE = 69;
    public static readonly CASCADE = 70;
    public static readonly CASE = 71;
    public static readonly CAST = 72;
    public static readonly CHANGEFEED = 73;
    public static readonly CHECK = 74;
    public static readonly CLASSIFIER = 75;
    public static readonly COLLATE = 76;
    public static readonly COLUMN = 77;
    public static readonly COLUMNS = 78;
    public static readonly COMMIT = 79;
    public static readonly COMPACT = 80;
    public static readonly CONDITIONAL = 81;
    public static readonly CONFLICT = 82;
    public static readonly CONNECT = 83;
    public static readonly CONSTRAINT = 84;
    public static readonly CONSUMER = 85;
    public static readonly COVER = 86;
    public static readonly CREATE = 87;
    public static readonly CROSS = 88;
    public static readonly CUBE = 89;
    public static readonly CURRENT = 90;
    public static readonly CURRENT_DATE = 91;
    public static readonly CURRENT_TIME = 92;
    public static readonly CURRENT_TIMESTAMP = 93;
    public static readonly DATA = 94;
    public static readonly DATABASE = 95;
    public static readonly DECIMAL = 96;
    public static readonly DECLARE = 97;
    public static readonly DEFAULT = 98;
    public static readonly DEFERRABLE = 99;
    public static readonly DEFERRED = 100;
    public static readonly DEFINE = 101;
    public static readonly DELETE = 102;
    public static readonly DESC = 103;
    public static readonly DESCRIBE = 104;
    public static readonly DETACH = 105;
    public static readonly DICT = 106;
    public static readonly DIRECTORY = 107;
    public static readonly DISABLE = 108;
    public static readonly DISCARD = 109;
    public static readonly DISTINCT = 110;
    public static readonly DO = 111;
    public static readonly DROP = 112;
    public static readonly EACH = 113;
    public static readonly ELSE = 114;
    public static readonly EMPTY = 115;
    public static readonly EMPTY_ACTION = 116;
    public static readonly ENCRYPTED = 117;
    public static readonly END = 118;
    public static readonly ENUM = 119;
    public static readonly ERASE = 120;
    public static readonly ERROR = 121;
    public static readonly ESCAPE = 122;
    public static readonly EVALUATE = 123;
    public static readonly EXCEPT = 124;
    public static readonly EXCLUDE = 125;
    public static readonly EXCLUSION = 126;
    public static readonly EXCLUSIVE = 127;
    public static readonly EXISTS = 128;
    public static readonly EXPLAIN = 129;
    public static readonly EXPORT = 130;
    public static readonly EXTERNAL = 131;
    public static readonly FAIL = 132;
    public static readonly FALSE = 133;
    public static readonly FAMILY = 134;
    public static readonly FILTER = 135;
    public static readonly FIRST = 136;
    public static readonly FLATTEN = 137;
    public static readonly FLOW = 138;
    public static readonly FOLLOWING = 139;
    public static readonly FOR = 140;
    public static readonly FOREIGN = 141;
    public static readonly FROM = 142;
    public static readonly FULL = 143;
    public static readonly FUNCTION = 144;
    public static readonly GLOB = 145;
    public static readonly GLOBAL = 146;
    public static readonly GRANT = 147;
    public static readonly GROUP = 148;
    public static readonly GROUPING = 149;
    public static readonly GROUPS = 150;
    public static readonly HASH = 151;
    public static readonly HAVING = 152;
    public static readonly HOP = 153;
    public static readonly IF = 154;
    public static readonly IGNORE = 155;
    public static readonly ILIKE = 156;
    public static readonly IMMEDIATE = 157;
    public static readonly IMPORT = 158;
    public static readonly IN = 159;
    public static readonly INCREMENTAL = 160;
    public static readonly INDEX = 161;
    public static readonly INDEXED = 162;
    public static readonly INHERITS = 163;
    public static readonly INITIAL = 164;
    public static readonly INITIALLY = 165;
    public static readonly INNER = 166;
    public static readonly INSERT = 167;
    public static readonly INSTEAD = 168;
    public static readonly INTERSECT = 169;
    public static readonly INTO = 170;
    public static readonly IS = 171;
    public static readonly ISNULL = 172;
    public static readonly JOIN = 173;
    public static readonly JSON_EXISTS = 174;
    public static readonly JSON_QUERY = 175;
    public static readonly JSON_VALUE = 176;
    public static readonly KEY = 177;
    public static readonly LAST = 178;
    public static readonly LEFT = 179;
    public static readonly LEGACY = 180;
    public static readonly LIKE = 181;
    public static readonly LIMIT = 182;
    public static readonly LIST = 183;
    public static readonly LOCAL = 184;
    public static readonly MANAGE = 185;
    public static readonly MATCH = 186;
    public static readonly MATCHES = 187;
    public static readonly MATCH_RECOGNIZE = 188;
    public static readonly MEASURES = 189;
    public static readonly MICROSECONDS = 190;
    public static readonly MILLISECONDS = 191;
    public static readonly MODIFY = 192;
    public static readonly NANOSECONDS = 193;
    public static readonly NATURAL = 194;
    public static readonly NEXT = 195;
    public static readonly NO = 196;
    public static readonly NOT = 197;
    public static readonly NOTNULL = 198;
    public static readonly NULL = 199;
    public static readonly NULLS = 200;
    public static readonly OBJECT = 201;
    public static readonly OF = 202;
    public static readonly OFFSET = 203;
    public static readonly OMIT = 204;
    public static readonly ON = 205;
    public static readonly ONE = 206;
    public static readonly ONLY = 207;
    public static readonly OPTION = 208;
    public static readonly OPTIONAL = 209;
    public static readonly OR = 210;
    public static readonly ORDER = 211;
    public static readonly OTHERS = 212;
    public static readonly OUTER = 213;
    public static readonly OVER = 214;
    public static readonly PARALLEL = 215;
    public static readonly PARTITION = 216;
    public static readonly PASSING = 217;
    public static readonly PASSWORD = 218;
    public static readonly PAST = 219;
    public static readonly PATTERN = 220;
    public static readonly PER = 221;
    public static readonly PERMUTE = 222;
    public static readonly PLAN = 223;
    public static readonly POOL = 224;
    public static readonly PRAGMA = 225;
    public static readonly PRECEDING = 226;
    public static readonly PRESORT = 227;
    public static readonly PRIMARY = 228;
    public static readonly PRIVILEGES = 229;
    public static readonly PROCESS = 230;
    public static readonly QUEUE = 231;
    public static readonly RAISE = 232;
    public static readonly RANGE = 233;
    public static readonly REDUCE = 234;
    public static readonly REFERENCES = 235;
    public static readonly REGEXP = 236;
    public static readonly REINDEX = 237;
    public static readonly RELEASE = 238;
    public static readonly REMOVE = 239;
    public static readonly RENAME = 240;
    public static readonly REPEATABLE = 241;
    public static readonly REPLACE = 242;
    public static readonly REPLICATION = 243;
    public static readonly RESET = 244;
    public static readonly RESOURCE = 245;
    public static readonly RESPECT = 246;
    public static readonly RESTORE = 247;
    public static readonly RESTRICT = 248;
    public static readonly RESULT = 249;
    public static readonly RETURN = 250;
    public static readonly RETURNING = 251;
    public static readonly REVERT = 252;
    public static readonly REVOKE = 253;
    public static readonly RIGHT = 254;
    public static readonly RLIKE = 255;
    public static readonly ROLLBACK = 256;
    public static readonly ROLLUP = 257;
    public static readonly ROW = 258;
    public static readonly ROWS = 259;
    public static readonly SAMPLE = 260;
    public static readonly SAVEPOINT = 261;
    public static readonly SCHEMA = 262;
    public static readonly SECONDS = 263;
    public static readonly SEEK = 264;
    public static readonly SELECT = 265;
    public static readonly SEMI = 266;
    public static readonly SET = 267;
    public static readonly SETS = 268;
    public static readonly SHOW = 269;
    public static readonly TSKIP = 270;
    public static readonly SOURCE = 271;
    public static readonly STREAM = 272;
    public static readonly STRUCT = 273;
    public static readonly SUBQUERY = 274;
    public static readonly SUBSET = 275;
    public static readonly SYMBOLS = 276;
    public static readonly SYMMETRIC = 277;
    public static readonly SYNC = 278;
    public static readonly SYSTEM = 279;
    public static readonly TABLE = 280;
    public static readonly TABLES = 281;
    public static readonly TABLESAMPLE = 282;
    public static readonly TABLESTORE = 283;
    public static readonly TAGGED = 284;
    public static readonly TEMP = 285;
    public static readonly TEMPORARY = 286;
    public static readonly THEN = 287;
    public static readonly TIES = 288;
    public static readonly TO = 289;
    public static readonly TOPIC = 290;
    public static readonly TRANSACTION = 291;
    public static readonly TRIGGER = 292;
    public static readonly TRUE = 293;
    public static readonly TUPLE = 294;
    public static readonly TYPE = 295;
    public static readonly UNBOUNDED = 296;
    public static readonly UNCONDITIONAL = 297;
    public static readonly UNION = 298;
    public static readonly UNIQUE = 299;
    public static readonly UNKNOWN = 300;
    public static readonly UNMATCHED = 301;
    public static readonly UPDATE = 302;
    public static readonly UPSERT = 303;
    public static readonly USE = 304;
    public static readonly USER = 305;
    public static readonly USING = 306;
    public static readonly VACUUM = 307;
    public static readonly VALUES = 308;
    public static readonly VARIANT = 309;
    public static readonly VIEW = 310;
    public static readonly VIRTUAL = 311;
    public static readonly WHEN = 312;
    public static readonly WHERE = 313;
    public static readonly WINDOW = 314;
    public static readonly WITH = 315;
    public static readonly WITHOUT = 316;
    public static readonly WRAPPER = 317;
    public static readonly XOR = 318;
    public static readonly STRING_VALUE = 319;
    public static readonly ID_PLAIN = 320;
    public static readonly ID_QUOTED = 321;
    public static readonly DIGITS = 322;
    public static readonly INTEGER_VALUE = 323;
    public static readonly REAL = 324;
    public static readonly BLOB = 325;
    public static readonly TQ = 326;
    public static readonly TU = 327;
    public static readonly TE = 328;
    public static readonly TR = 329;
    public static readonly TY = 330;
    public static readonly WS = 331;
    public static readonly COMMENT = 332;
    public static readonly RULE_sql_query = 0;
    public static readonly RULE_sql_stmt_list = 1;
    public static readonly RULE_ansi_sql_stmt_list = 2;
    public static readonly RULE_lambda_body = 3;
    public static readonly RULE_lambda_stmt = 4;
    public static readonly RULE_sql_stmt = 5;
    public static readonly RULE_sql_stmt_core = 6;
    public static readonly RULE_expr = 7;
    public static readonly RULE_or_subexpr = 8;
    public static readonly RULE_and_subexpr = 9;
    public static readonly RULE_xor_subexpr = 10;
    public static readonly RULE_distinct_from_op = 11;
    public static readonly RULE_cond_expr = 12;
    public static readonly RULE_match_op = 13;
    public static readonly RULE_eq_subexpr = 14;
    public static readonly RULE_shift_right = 15;
    public static readonly RULE_rot_right = 16;
    public static readonly RULE_double_question = 17;
    public static readonly RULE_neq_subexpr = 18;
    public static readonly RULE_bit_subexpr = 19;
    public static readonly RULE_add_subexpr = 20;
    public static readonly RULE_mul_subexpr = 21;
    public static readonly RULE_con_subexpr = 22;
    public static readonly RULE_unary_op = 23;
    public static readonly RULE_unary_subexpr_suffix = 24;
    public static readonly RULE_unary_casual_subexpr = 25;
    public static readonly RULE_in_unary_casual_subexpr = 26;
    public static readonly RULE_unary_subexpr = 27;
    public static readonly RULE_in_unary_subexpr = 28;
    public static readonly RULE_list_literal = 29;
    public static readonly RULE_expr_dict_list = 30;
    public static readonly RULE_dict_literal = 31;
    public static readonly RULE_expr_struct_list = 32;
    public static readonly RULE_struct_literal = 33;
    public static readonly RULE_atom_expr = 34;
    public static readonly RULE_in_atom_expr = 35;
    public static readonly RULE_cast_expr = 36;
    public static readonly RULE_bitcast_expr = 37;
    public static readonly RULE_exists_expr = 38;
    public static readonly RULE_case_expr = 39;
    public static readonly RULE_lambda = 40;
    public static readonly RULE_in_expr = 41;
    public static readonly RULE_json_api_expr = 42;
    public static readonly RULE_jsonpath_spec = 43;
    public static readonly RULE_json_variable_name = 44;
    public static readonly RULE_json_variable = 45;
    public static readonly RULE_json_variables = 46;
    public static readonly RULE_json_common_args = 47;
    public static readonly RULE_json_case_handler = 48;
    public static readonly RULE_json_value = 49;
    public static readonly RULE_json_exists_handler = 50;
    public static readonly RULE_json_exists = 51;
    public static readonly RULE_json_query_wrapper = 52;
    public static readonly RULE_json_query_handler = 53;
    public static readonly RULE_json_query = 54;
    public static readonly RULE_smart_parenthesis = 55;
    public static readonly RULE_expr_list = 56;
    public static readonly RULE_pure_column_list = 57;
    public static readonly RULE_pure_column_or_named = 58;
    public static readonly RULE_pure_column_or_named_list = 59;
    public static readonly RULE_column_name = 60;
    public static readonly RULE_without_column_name = 61;
    public static readonly RULE_column_list = 62;
    public static readonly RULE_without_column_list = 63;
    public static readonly RULE_named_expr = 64;
    public static readonly RULE_named_expr_list = 65;
    public static readonly RULE_invoke_expr = 66;
    public static readonly RULE_invoke_expr_tail = 67;
    public static readonly RULE_using_call_expr = 68;
    public static readonly RULE_key_expr = 69;
    public static readonly RULE_when_expr = 70;
    public static readonly RULE_literal_value = 71;
    public static readonly RULE_bind_parameter = 72;
    public static readonly RULE_opt_bind_parameter = 73;
    public static readonly RULE_bind_parameter_list = 74;
    public static readonly RULE_named_bind_parameter = 75;
    public static readonly RULE_named_bind_parameter_list = 76;
    public static readonly RULE_signed_number = 77;
    public static readonly RULE_type_name_simple = 78;
    public static readonly RULE_integer_or_bind = 79;
    public static readonly RULE_type_name_tag = 80;
    public static readonly RULE_struct_arg = 81;
    public static readonly RULE_struct_arg_positional = 82;
    public static readonly RULE_variant_arg = 83;
    public static readonly RULE_callable_arg = 84;
    public static readonly RULE_callable_arg_list = 85;
    public static readonly RULE_type_name_decimal = 86;
    public static readonly RULE_type_name_optional = 87;
    public static readonly RULE_type_name_tuple = 88;
    public static readonly RULE_type_name_struct = 89;
    public static readonly RULE_type_name_variant = 90;
    public static readonly RULE_type_name_list = 91;
    public static readonly RULE_type_name_stream = 92;
    public static readonly RULE_type_name_flow = 93;
    public static readonly RULE_type_name_dict = 94;
    public static readonly RULE_type_name_set = 95;
    public static readonly RULE_type_name_enum = 96;
    public static readonly RULE_type_name_resource = 97;
    public static readonly RULE_type_name_tagged = 98;
    public static readonly RULE_type_name_callable = 99;
    public static readonly RULE_type_name_composite = 100;
    public static readonly RULE_type_name = 101;
    public static readonly RULE_type_name_or_bind = 102;
    public static readonly RULE_value_constructor_literal = 103;
    public static readonly RULE_value_constructor = 104;
    public static readonly RULE_declare_stmt = 105;
    public static readonly RULE_module_path = 106;
    public static readonly RULE_import_stmt = 107;
    public static readonly RULE_export_stmt = 108;
    public static readonly RULE_call_action = 109;
    public static readonly RULE_inline_action = 110;
    public static readonly RULE_do_stmt = 111;
    public static readonly RULE_pragma_stmt = 112;
    public static readonly RULE_pragma_value = 113;
    public static readonly RULE_sort_specification = 114;
    public static readonly RULE_sort_specification_list = 115;
    public static readonly RULE_select_stmt = 116;
    public static readonly RULE_select_unparenthesized_stmt = 117;
    public static readonly RULE_select_kind_parenthesis = 118;
    public static readonly RULE_select_op = 119;
    public static readonly RULE_select_kind_partial = 120;
    public static readonly RULE_select_kind = 121;
    public static readonly RULE_process_core = 122;
    public static readonly RULE_external_call_param = 123;
    public static readonly RULE_external_call_settings = 124;
    public static readonly RULE_reduce_core = 125;
    public static readonly RULE_opt_set_quantifier = 126;
    public static readonly RULE_select_core = 127;
    public static readonly RULE_row_pattern_recognition_clause = 128;
    public static readonly RULE_row_pattern_rows_per_match = 129;
    public static readonly RULE_row_pattern_empty_match_handling = 130;
    public static readonly RULE_row_pattern_measures = 131;
    public static readonly RULE_row_pattern_measure_list = 132;
    public static readonly RULE_row_pattern_measure_definition = 133;
    public static readonly RULE_row_pattern_common_syntax = 134;
    public static readonly RULE_row_pattern_skip_to = 135;
    public static readonly RULE_row_pattern_skip_to_variable_name = 136;
    public static readonly RULE_row_pattern_initial_or_seek = 137;
    public static readonly RULE_row_pattern = 138;
    public static readonly RULE_row_pattern_term = 139;
    public static readonly RULE_row_pattern_factor = 140;
    public static readonly RULE_row_pattern_quantifier = 141;
    public static readonly RULE_row_pattern_primary = 142;
    public static readonly RULE_row_pattern_primary_variable_name = 143;
    public static readonly RULE_row_pattern_permute = 144;
    public static readonly RULE_row_pattern_subset_clause = 145;
    public static readonly RULE_row_pattern_subset_list = 146;
    public static readonly RULE_row_pattern_subset_item = 147;
    public static readonly RULE_row_pattern_subset_item_variable_name = 148;
    public static readonly RULE_row_pattern_subset_rhs = 149;
    public static readonly RULE_row_pattern_subset_rhs_variable_name = 150;
    public static readonly RULE_row_pattern_definition_list = 151;
    public static readonly RULE_row_pattern_definition = 152;
    public static readonly RULE_row_pattern_definition_variable_name = 153;
    public static readonly RULE_row_pattern_definition_search_condition = 154;
    public static readonly RULE_search_condition = 155;
    public static readonly RULE_row_pattern_variable_name = 156;
    public static readonly RULE_order_by_clause = 157;
    public static readonly RULE_ext_order_by_clause = 158;
    public static readonly RULE_group_by_clause = 159;
    public static readonly RULE_grouping_element_list = 160;
    public static readonly RULE_grouping_element = 161;
    public static readonly RULE_ordinary_grouping_set = 162;
    public static readonly RULE_ordinary_grouping_set_list = 163;
    public static readonly RULE_rollup_list = 164;
    public static readonly RULE_cube_list = 165;
    public static readonly RULE_grouping_sets_specification = 166;
    public static readonly RULE_hopping_window_specification = 167;
    public static readonly RULE_result_column = 168;
    public static readonly RULE_join_source = 169;
    public static readonly RULE_named_column = 170;
    public static readonly RULE_flatten_by_arg = 171;
    public static readonly RULE_flatten_source = 172;
    public static readonly RULE_named_single_source = 173;
    public static readonly RULE_single_source = 174;
    public static readonly RULE_sample_clause = 175;
    public static readonly RULE_tablesample_clause = 176;
    public static readonly RULE_sampling_mode = 177;
    public static readonly RULE_repeatable_clause = 178;
    public static readonly RULE_join_op = 179;
    public static readonly RULE_join_constraint = 180;
    public static readonly RULE_returning_columns_list = 181;
    public static readonly RULE_into_table_stmt = 182;
    public static readonly RULE_into_table_stmt_yq = 183;
    public static readonly RULE_into_values_source = 184;
    public static readonly RULE_values_stmt = 185;
    public static readonly RULE_values_source = 186;
    public static readonly RULE_values_source_row_list = 187;
    public static readonly RULE_values_source_row = 188;
    public static readonly RULE_simple_values_source = 189;
    public static readonly RULE_create_external_data_source_stmt = 190;
    public static readonly RULE_alter_external_data_source_stmt = 191;
    public static readonly RULE_alter_external_data_source_action = 192;
    public static readonly RULE_drop_external_data_source_stmt = 193;
    public static readonly RULE_create_view_stmt = 194;
    public static readonly RULE_drop_view_stmt = 195;
    public static readonly RULE_upsert_object_stmt = 196;
    public static readonly RULE_create_object_stmt = 197;
    public static readonly RULE_create_object_features = 198;
    public static readonly RULE_alter_object_stmt = 199;
    public static readonly RULE_alter_object_features = 200;
    public static readonly RULE_drop_object_stmt = 201;
    public static readonly RULE_drop_object_features = 202;
    public static readonly RULE_object_feature_value = 203;
    public static readonly RULE_object_feature_kv = 204;
    public static readonly RULE_object_feature_flag = 205;
    public static readonly RULE_object_feature = 206;
    public static readonly RULE_object_features = 207;
    public static readonly RULE_object_type_ref = 208;
    public static readonly RULE_create_table_stmt = 209;
    public static readonly RULE_create_table_entry = 210;
    public static readonly RULE_create_backup_collection_stmt = 211;
    public static readonly RULE_alter_backup_collection_stmt = 212;
    public static readonly RULE_drop_backup_collection_stmt = 213;
    public static readonly RULE_create_backup_collection_entries = 214;
    public static readonly RULE_create_backup_collection_entries_many = 215;
    public static readonly RULE_table_list = 216;
    public static readonly RULE_alter_backup_collection_actions = 217;
    public static readonly RULE_alter_backup_collection_action = 218;
    public static readonly RULE_alter_backup_collection_entries = 219;
    public static readonly RULE_alter_backup_collection_entry = 220;
    public static readonly RULE_backup_collection = 221;
    public static readonly RULE_backup_collection_settings = 222;
    public static readonly RULE_backup_collection_settings_entry = 223;
    public static readonly RULE_backup_stmt = 224;
    public static readonly RULE_restore_stmt = 225;
    public static readonly RULE_table_inherits = 226;
    public static readonly RULE_table_partition_by = 227;
    public static readonly RULE_with_table_settings = 228;
    public static readonly RULE_table_tablestore = 229;
    public static readonly RULE_table_settings_entry = 230;
    public static readonly RULE_table_as_source = 231;
    public static readonly RULE_alter_table_stmt = 232;
    public static readonly RULE_alter_table_action = 233;
    public static readonly RULE_alter_external_table_stmt = 234;
    public static readonly RULE_alter_external_table_action = 235;
    public static readonly RULE_alter_table_store_stmt = 236;
    public static readonly RULE_alter_table_store_action = 237;
    public static readonly RULE_alter_table_add_column = 238;
    public static readonly RULE_alter_table_drop_column = 239;
    public static readonly RULE_alter_table_alter_column = 240;
    public static readonly RULE_alter_table_alter_column_drop_not_null = 241;
    public static readonly RULE_alter_table_add_column_family = 242;
    public static readonly RULE_alter_table_alter_column_family = 243;
    public static readonly RULE_alter_table_set_table_setting_uncompat = 244;
    public static readonly RULE_alter_table_set_table_setting_compat = 245;
    public static readonly RULE_alter_table_reset_table_setting = 246;
    public static readonly RULE_alter_table_add_index = 247;
    public static readonly RULE_alter_table_drop_index = 248;
    public static readonly RULE_alter_table_rename_to = 249;
    public static readonly RULE_alter_table_rename_index_to = 250;
    public static readonly RULE_alter_table_add_changefeed = 251;
    public static readonly RULE_alter_table_alter_changefeed = 252;
    public static readonly RULE_alter_table_drop_changefeed = 253;
    public static readonly RULE_alter_table_alter_index = 254;
    public static readonly RULE_column_schema = 255;
    public static readonly RULE_family_relation = 256;
    public static readonly RULE_opt_column_constraints = 257;
    public static readonly RULE_column_order_by_specification = 258;
    public static readonly RULE_table_constraint = 259;
    public static readonly RULE_table_index = 260;
    public static readonly RULE_table_index_type = 261;
    public static readonly RULE_global_index = 262;
    public static readonly RULE_local_index = 263;
    public static readonly RULE_index_subtype = 264;
    public static readonly RULE_with_index_settings = 265;
    public static readonly RULE_index_setting_entry = 266;
    public static readonly RULE_index_setting_value = 267;
    public static readonly RULE_changefeed = 268;
    public static readonly RULE_changefeed_settings = 269;
    public static readonly RULE_changefeed_settings_entry = 270;
    public static readonly RULE_changefeed_setting_value = 271;
    public static readonly RULE_changefeed_alter_settings = 272;
    public static readonly RULE_alter_table_setting_entry = 273;
    public static readonly RULE_table_setting_value = 274;
    public static readonly RULE_family_entry = 275;
    public static readonly RULE_family_settings = 276;
    public static readonly RULE_family_settings_entry = 277;
    public static readonly RULE_family_setting_value = 278;
    public static readonly RULE_split_boundaries = 279;
    public static readonly RULE_literal_value_list = 280;
    public static readonly RULE_alter_table_alter_index_action = 281;
    public static readonly RULE_drop_table_stmt = 282;
    public static readonly RULE_create_user_stmt = 283;
    public static readonly RULE_alter_user_stmt = 284;
    public static readonly RULE_create_group_stmt = 285;
    public static readonly RULE_alter_group_stmt = 286;
    public static readonly RULE_drop_role_stmt = 287;
    public static readonly RULE_role_name = 288;
    public static readonly RULE_create_user_option = 289;
    public static readonly RULE_grant_permissions_stmt = 290;
    public static readonly RULE_revoke_permissions_stmt = 291;
    public static readonly RULE_permission_id = 292;
    public static readonly RULE_permission_name = 293;
    public static readonly RULE_permission_name_target = 294;
    public static readonly RULE_create_resource_pool_stmt = 295;
    public static readonly RULE_alter_resource_pool_stmt = 296;
    public static readonly RULE_alter_resource_pool_action = 297;
    public static readonly RULE_drop_resource_pool_stmt = 298;
    public static readonly RULE_create_resource_pool_classifier_stmt = 299;
    public static readonly RULE_alter_resource_pool_classifier_stmt = 300;
    public static readonly RULE_alter_resource_pool_classifier_action = 301;
    public static readonly RULE_drop_resource_pool_classifier_stmt = 302;
    public static readonly RULE_create_replication_stmt = 303;
    public static readonly RULE_replication_target = 304;
    public static readonly RULE_replication_settings = 305;
    public static readonly RULE_replication_settings_entry = 306;
    public static readonly RULE_alter_replication_stmt = 307;
    public static readonly RULE_alter_replication_action = 308;
    public static readonly RULE_alter_replication_set_setting = 309;
    public static readonly RULE_drop_replication_stmt = 310;
    public static readonly RULE_action_or_subquery_args = 311;
    public static readonly RULE_define_action_or_subquery_stmt = 312;
    public static readonly RULE_define_action_or_subquery_body = 313;
    public static readonly RULE_if_stmt = 314;
    public static readonly RULE_for_stmt = 315;
    public static readonly RULE_table_ref = 316;
    public static readonly RULE_table_key = 317;
    public static readonly RULE_table_arg = 318;
    public static readonly RULE_table_hints = 319;
    public static readonly RULE_table_hint = 320;
    public static readonly RULE_object_ref = 321;
    public static readonly RULE_simple_table_ref_core = 322;
    public static readonly RULE_simple_table_ref = 323;
    public static readonly RULE_into_simple_table_ref = 324;
    public static readonly RULE_delete_stmt = 325;
    public static readonly RULE_update_stmt = 326;
    public static readonly RULE_set_clause_choice = 327;
    public static readonly RULE_set_clause_list = 328;
    public static readonly RULE_set_clause = 329;
    public static readonly RULE_set_target = 330;
    public static readonly RULE_multiple_column_assignment = 331;
    public static readonly RULE_set_target_list = 332;
    public static readonly RULE_create_topic_stmt = 333;
    public static readonly RULE_create_topic_entries = 334;
    public static readonly RULE_create_topic_entry = 335;
    public static readonly RULE_with_topic_settings = 336;
    public static readonly RULE_alter_topic_stmt = 337;
    public static readonly RULE_alter_topic_action = 338;
    public static readonly RULE_alter_topic_add_consumer = 339;
    public static readonly RULE_topic_create_consumer_entry = 340;
    public static readonly RULE_alter_topic_alter_consumer = 341;
    public static readonly RULE_alter_topic_alter_consumer_entry = 342;
    public static readonly RULE_alter_topic_drop_consumer = 343;
    public static readonly RULE_topic_alter_consumer_set = 344;
    public static readonly RULE_topic_alter_consumer_reset = 345;
    public static readonly RULE_alter_topic_set_settings = 346;
    public static readonly RULE_alter_topic_reset_settings = 347;
    public static readonly RULE_drop_topic_stmt = 348;
    public static readonly RULE_topic_settings = 349;
    public static readonly RULE_topic_settings_entry = 350;
    public static readonly RULE_topic_setting_value = 351;
    public static readonly RULE_topic_consumer_with_settings = 352;
    public static readonly RULE_topic_consumer_settings = 353;
    public static readonly RULE_topic_consumer_settings_entry = 354;
    public static readonly RULE_topic_consumer_setting_value = 355;
    public static readonly RULE_topic_ref = 356;
    public static readonly RULE_topic_consumer_ref = 357;
    public static readonly RULE_null_treatment = 358;
    public static readonly RULE_filter_clause = 359;
    public static readonly RULE_window_name_or_specification = 360;
    public static readonly RULE_window_name = 361;
    public static readonly RULE_window_clause = 362;
    public static readonly RULE_window_definition_list = 363;
    public static readonly RULE_window_definition = 364;
    public static readonly RULE_new_window_name = 365;
    public static readonly RULE_window_specification = 366;
    public static readonly RULE_window_specification_details = 367;
    public static readonly RULE_existing_window_name = 368;
    public static readonly RULE_window_partition_clause = 369;
    public static readonly RULE_window_order_clause = 370;
    public static readonly RULE_window_frame_clause = 371;
    public static readonly RULE_window_frame_units = 372;
    public static readonly RULE_window_frame_extent = 373;
    public static readonly RULE_window_frame_between = 374;
    public static readonly RULE_window_frame_bound = 375;
    public static readonly RULE_window_frame_exclusion = 376;
    public static readonly RULE_use_stmt = 377;
    public static readonly RULE_subselect_stmt = 378;
    public static readonly RULE_named_nodes_stmt = 379;
    public static readonly RULE_commit_stmt = 380;
    public static readonly RULE_rollback_stmt = 381;
    public static readonly RULE_analyze_table = 382;
    public static readonly RULE_analyze_table_list = 383;
    public static readonly RULE_analyze_stmt = 384;
    public static readonly RULE_identifier = 385;
    public static readonly RULE_id = 386;
    public static readonly RULE_id_schema = 387;
    public static readonly RULE_id_expr = 388;
    public static readonly RULE_id_expr_in = 389;
    public static readonly RULE_id_window = 390;
    public static readonly RULE_id_table = 391;
    public static readonly RULE_id_without = 392;
    public static readonly RULE_id_hint = 393;
    public static readonly RULE_id_as_compat = 394;
    public static readonly RULE_an_id = 395;
    public static readonly RULE_an_id_or_type = 396;
    public static readonly RULE_an_id_schema = 397;
    public static readonly RULE_an_id_expr = 398;
    public static readonly RULE_an_id_expr_in = 399;
    public static readonly RULE_an_id_window = 400;
    public static readonly RULE_an_id_table = 401;
    public static readonly RULE_an_id_without = 402;
    public static readonly RULE_an_id_hint = 403;
    public static readonly RULE_an_id_pure = 404;
    public static readonly RULE_an_id_as_compat = 405;
    public static readonly RULE_view_name = 406;
    public static readonly RULE_opt_id_prefix = 407;
    public static readonly RULE_cluster_expr = 408;
    public static readonly RULE_id_or_type = 409;
    public static readonly RULE_opt_id_prefix_or_type = 410;
    public static readonly RULE_id_or_at = 411;
    public static readonly RULE_id_table_or_type = 412;
    public static readonly RULE_id_table_or_at = 413;
    public static readonly RULE_keyword = 414;
    public static readonly RULE_keyword_expr_uncompat = 415;
    public static readonly RULE_keyword_table_uncompat = 416;
    public static readonly RULE_keyword_select_uncompat = 417;
    public static readonly RULE_keyword_alter_uncompat = 418;
    public static readonly RULE_keyword_in_uncompat = 419;
    public static readonly RULE_keyword_window_uncompat = 420;
    public static readonly RULE_keyword_hint_uncompat = 421;
    public static readonly RULE_keyword_as_compat = 422;
    public static readonly RULE_keyword_compat = 423;
    public static readonly RULE_type_id = 424;
    public static readonly RULE_bool_value = 425;
    public static readonly RULE_real = 426;
    public static readonly RULE_integer = 427;
    public static readonly RULE_sql_query_yq = 428;
    public static readonly RULE_sql_stmt_list_yq = 429;
    public static readonly RULE_sql_stmt_yq = 430;
    public static readonly RULE_sql_stmt_core_yq = 431;
    public static readonly RULE_replication_name = 432;
    public static readonly RULE_where_expr = 433;
    public static readonly RULE_from_stmt = 434;
    public static readonly RULE_alter_table_for_autocomplete = 435;

    public static readonly literalNames = [
        null, null, "'='", "'=='", "'!='", "'<>'", "'<'", "'<='", "'>'", 
        "'>='", "'<<'", "'|<<'", "'&'", "'|'", "'||'", "'<|'", "'|>'", "'+'", 
        "'-'", "'~'", "'*'", "'/'", "'%'", "';'", "'.'", "','", "'('", "')'", 
        "'?'", "':'", "'@'", "'@@'", "'$'", "'{'", "'}'", "'^'", "'::'", 
        "'->'", "']'", "'['"
    ];

    public static readonly symbolicNames = [
        null, "QUERY", "EQUALS", "EQUALS2", "NOT_EQUALS", "NOT_EQUALS2", 
        "LESS", "LESS_OR_EQ", "GREATER", "GREATER_OR_EQ", "SHIFT_LEFT", 
        "ROT_LEFT", "AMPERSAND", "PIPE", "DOUBLE_PIPE", "STRUCT_OPEN", "STRUCT_CLOSE", 
        "PLUS", "MINUS", "TILDA", "ASTERISK", "SLASH", "PERCENT", "SEMICOLON", 
        "DOT", "COMMA", "LPAREN", "RPAREN", "QUESTION", "COLON", "COMMAT", 
        "DOUBLE_COMMAT", "DOLLAR", "LBRACE_CURLY", "RBRACE_CURLY", "CARET", 
        "NAMESPACE", "ARROW", "RBRACE_SQUARE", "LBRACE_SQUARE", "ABORT", 
        "ACTION", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "ANSI", 
        "ANY", "ARRAY", "AS", "ASC", "ASSUME", "ASYMMETRIC", "ASYNC", "AT", 
        "ATTACH", "ATTRIBUTES", "AUTOINCREMENT", "AUTOMAP", "BACKUP", "COLLECTION", 
        "BEFORE", "BEGIN", "BERNOULLI", "BETWEEN", "BITCAST", "BY", "CALLABLE", 
        "CASCADE", "CASE", "CAST", "CHANGEFEED", "CHECK", "CLASSIFIER", 
        "COLLATE", "COLUMN", "COLUMNS", "COMMIT", "COMPACT", "CONDITIONAL", 
        "CONFLICT", "CONNECT", "CONSTRAINT", "CONSUMER", "COVER", "CREATE", 
        "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
        "DATA", "DATABASE", "DECIMAL", "DECLARE", "DEFAULT", "DEFERRABLE", 
        "DEFERRED", "DEFINE", "DELETE", "DESC", "DESCRIBE", "DETACH", "DICT", 
        "DIRECTORY", "DISABLE", "DISCARD", "DISTINCT", "DO", "DROP", "EACH", 
        "ELSE", "EMPTY", "EMPTY_ACTION", "ENCRYPTED", "END", "ENUM", "ERASE", 
        "ERROR", "ESCAPE", "EVALUATE", "EXCEPT", "EXCLUDE", "EXCLUSION", 
        "EXCLUSIVE", "EXISTS", "EXPLAIN", "EXPORT", "EXTERNAL", "FAIL", 
        "FALSE", "FAMILY", "FILTER", "FIRST", "FLATTEN", "FLOW", "FOLLOWING", 
        "FOR", "FOREIGN", "FROM", "FULL", "FUNCTION", "GLOB", "GLOBAL", 
        "GRANT", "GROUP", "GROUPING", "GROUPS", "HASH", "HAVING", "HOP", 
        "IF", "IGNORE", "ILIKE", "IMMEDIATE", "IMPORT", "IN", "INCREMENTAL", 
        "INDEX", "INDEXED", "INHERITS", "INITIAL", "INITIALLY", "INNER", 
        "INSERT", "INSTEAD", "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", 
        "JSON_EXISTS", "JSON_QUERY", "JSON_VALUE", "KEY", "LAST", "LEFT", 
        "LEGACY", "LIKE", "LIMIT", "LIST", "LOCAL", "MANAGE", "MATCH", "MATCHES", 
        "MATCH_RECOGNIZE", "MEASURES", "MICROSECONDS", "MILLISECONDS", "MODIFY", 
        "NANOSECONDS", "NATURAL", "NEXT", "NO", "NOT", "NOTNULL", "NULL", 
        "NULLS", "OBJECT", "OF", "OFFSET", "OMIT", "ON", "ONE", "ONLY", 
        "OPTION", "OPTIONAL", "OR", "ORDER", "OTHERS", "OUTER", "OVER", 
        "PARALLEL", "PARTITION", "PASSING", "PASSWORD", "PAST", "PATTERN", 
        "PER", "PERMUTE", "PLAN", "POOL", "PRAGMA", "PRECEDING", "PRESORT", 
        "PRIMARY", "PRIVILEGES", "PROCESS", "QUEUE", "RAISE", "RANGE", "REDUCE", 
        "REFERENCES", "REGEXP", "REINDEX", "RELEASE", "REMOVE", "RENAME", 
        "REPEATABLE", "REPLACE", "REPLICATION", "RESET", "RESOURCE", "RESPECT", 
        "RESTORE", "RESTRICT", "RESULT", "RETURN", "RETURNING", "REVERT", 
        "REVOKE", "RIGHT", "RLIKE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", 
        "SAMPLE", "SAVEPOINT", "SCHEMA", "SECONDS", "SEEK", "SELECT", "SEMI", 
        "SET", "SETS", "SHOW", "TSKIP", "SOURCE", "STREAM", "STRUCT", "SUBQUERY", 
        "SUBSET", "SYMBOLS", "SYMMETRIC", "SYNC", "SYSTEM", "TABLE", "TABLES", 
        "TABLESAMPLE", "TABLESTORE", "TAGGED", "TEMP", "TEMPORARY", "THEN", 
        "TIES", "TO", "TOPIC", "TRANSACTION", "TRIGGER", "TRUE", "TUPLE", 
        "TYPE", "UNBOUNDED", "UNCONDITIONAL", "UNION", "UNIQUE", "UNKNOWN", 
        "UNMATCHED", "UPDATE", "UPSERT", "USE", "USER", "USING", "VACUUM", 
        "VALUES", "VARIANT", "VIEW", "VIRTUAL", "WHEN", "WHERE", "WINDOW", 
        "WITH", "WITHOUT", "WRAPPER", "XOR", "STRING_VALUE", "ID_PLAIN", 
        "ID_QUOTED", "DIGITS", "INTEGER_VALUE", "REAL", "BLOB", "TQ", "TU", 
        "TE", "TR", "TY", "WS", "COMMENT"
    ];
    public static readonly ruleNames = [
        "sql_query", "sql_stmt_list", "ansi_sql_stmt_list", "lambda_body", 
        "lambda_stmt", "sql_stmt", "sql_stmt_core", "expr", "or_subexpr", 
        "and_subexpr", "xor_subexpr", "distinct_from_op", "cond_expr", "match_op", 
        "eq_subexpr", "shift_right", "rot_right", "double_question", "neq_subexpr", 
        "bit_subexpr", "add_subexpr", "mul_subexpr", "con_subexpr", "unary_op", 
        "unary_subexpr_suffix", "unary_casual_subexpr", "in_unary_casual_subexpr", 
        "unary_subexpr", "in_unary_subexpr", "list_literal", "expr_dict_list", 
        "dict_literal", "expr_struct_list", "struct_literal", "atom_expr", 
        "in_atom_expr", "cast_expr", "bitcast_expr", "exists_expr", "case_expr", 
        "lambda", "in_expr", "json_api_expr", "jsonpath_spec", "json_variable_name", 
        "json_variable", "json_variables", "json_common_args", "json_case_handler", 
        "json_value", "json_exists_handler", "json_exists", "json_query_wrapper", 
        "json_query_handler", "json_query", "smart_parenthesis", "expr_list", 
        "pure_column_list", "pure_column_or_named", "pure_column_or_named_list", 
        "column_name", "without_column_name", "column_list", "without_column_list", 
        "named_expr", "named_expr_list", "invoke_expr", "invoke_expr_tail", 
        "using_call_expr", "key_expr", "when_expr", "literal_value", "bind_parameter", 
        "opt_bind_parameter", "bind_parameter_list", "named_bind_parameter", 
        "named_bind_parameter_list", "signed_number", "type_name_simple", 
        "integer_or_bind", "type_name_tag", "struct_arg", "struct_arg_positional", 
        "variant_arg", "callable_arg", "callable_arg_list", "type_name_decimal", 
        "type_name_optional", "type_name_tuple", "type_name_struct", "type_name_variant", 
        "type_name_list", "type_name_stream", "type_name_flow", "type_name_dict", 
        "type_name_set", "type_name_enum", "type_name_resource", "type_name_tagged", 
        "type_name_callable", "type_name_composite", "type_name", "type_name_or_bind", 
        "value_constructor_literal", "value_constructor", "declare_stmt", 
        "module_path", "import_stmt", "export_stmt", "call_action", "inline_action", 
        "do_stmt", "pragma_stmt", "pragma_value", "sort_specification", 
        "sort_specification_list", "select_stmt", "select_unparenthesized_stmt", 
        "select_kind_parenthesis", "select_op", "select_kind_partial", "select_kind", 
        "process_core", "external_call_param", "external_call_settings", 
        "reduce_core", "opt_set_quantifier", "select_core", "row_pattern_recognition_clause", 
        "row_pattern_rows_per_match", "row_pattern_empty_match_handling", 
        "row_pattern_measures", "row_pattern_measure_list", "row_pattern_measure_definition", 
        "row_pattern_common_syntax", "row_pattern_skip_to", "row_pattern_skip_to_variable_name", 
        "row_pattern_initial_or_seek", "row_pattern", "row_pattern_term", 
        "row_pattern_factor", "row_pattern_quantifier", "row_pattern_primary", 
        "row_pattern_primary_variable_name", "row_pattern_permute", "row_pattern_subset_clause", 
        "row_pattern_subset_list", "row_pattern_subset_item", "row_pattern_subset_item_variable_name", 
        "row_pattern_subset_rhs", "row_pattern_subset_rhs_variable_name", 
        "row_pattern_definition_list", "row_pattern_definition", "row_pattern_definition_variable_name", 
        "row_pattern_definition_search_condition", "search_condition", "row_pattern_variable_name", 
        "order_by_clause", "ext_order_by_clause", "group_by_clause", "grouping_element_list", 
        "grouping_element", "ordinary_grouping_set", "ordinary_grouping_set_list", 
        "rollup_list", "cube_list", "grouping_sets_specification", "hopping_window_specification", 
        "result_column", "join_source", "named_column", "flatten_by_arg", 
        "flatten_source", "named_single_source", "single_source", "sample_clause", 
        "tablesample_clause", "sampling_mode", "repeatable_clause", "join_op", 
        "join_constraint", "returning_columns_list", "into_table_stmt", 
        "into_table_stmt_yq", "into_values_source", "values_stmt", "values_source", 
        "values_source_row_list", "values_source_row", "simple_values_source", 
        "create_external_data_source_stmt", "alter_external_data_source_stmt", 
        "alter_external_data_source_action", "drop_external_data_source_stmt", 
        "create_view_stmt", "drop_view_stmt", "upsert_object_stmt", "create_object_stmt", 
        "create_object_features", "alter_object_stmt", "alter_object_features", 
        "drop_object_stmt", "drop_object_features", "object_feature_value", 
        "object_feature_kv", "object_feature_flag", "object_feature", "object_features", 
        "object_type_ref", "create_table_stmt", "create_table_entry", "create_backup_collection_stmt", 
        "alter_backup_collection_stmt", "drop_backup_collection_stmt", "create_backup_collection_entries", 
        "create_backup_collection_entries_many", "table_list", "alter_backup_collection_actions", 
        "alter_backup_collection_action", "alter_backup_collection_entries", 
        "alter_backup_collection_entry", "backup_collection", "backup_collection_settings", 
        "backup_collection_settings_entry", "backup_stmt", "restore_stmt", 
        "table_inherits", "table_partition_by", "with_table_settings", "table_tablestore", 
        "table_settings_entry", "table_as_source", "alter_table_stmt", "alter_table_action", 
        "alter_external_table_stmt", "alter_external_table_action", "alter_table_store_stmt", 
        "alter_table_store_action", "alter_table_add_column", "alter_table_drop_column", 
        "alter_table_alter_column", "alter_table_alter_column_drop_not_null", 
        "alter_table_add_column_family", "alter_table_alter_column_family", 
        "alter_table_set_table_setting_uncompat", "alter_table_set_table_setting_compat", 
        "alter_table_reset_table_setting", "alter_table_add_index", "alter_table_drop_index", 
        "alter_table_rename_to", "alter_table_rename_index_to", "alter_table_add_changefeed", 
        "alter_table_alter_changefeed", "alter_table_drop_changefeed", "alter_table_alter_index", 
        "column_schema", "family_relation", "opt_column_constraints", "column_order_by_specification", 
        "table_constraint", "table_index", "table_index_type", "global_index", 
        "local_index", "index_subtype", "with_index_settings", "index_setting_entry", 
        "index_setting_value", "changefeed", "changefeed_settings", "changefeed_settings_entry", 
        "changefeed_setting_value", "changefeed_alter_settings", "alter_table_setting_entry", 
        "table_setting_value", "family_entry", "family_settings", "family_settings_entry", 
        "family_setting_value", "split_boundaries", "literal_value_list", 
        "alter_table_alter_index_action", "drop_table_stmt", "create_user_stmt", 
        "alter_user_stmt", "create_group_stmt", "alter_group_stmt", "drop_role_stmt", 
        "role_name", "create_user_option", "grant_permissions_stmt", "revoke_permissions_stmt", 
        "permission_id", "permission_name", "permission_name_target", "create_resource_pool_stmt", 
        "alter_resource_pool_stmt", "alter_resource_pool_action", "drop_resource_pool_stmt", 
        "create_resource_pool_classifier_stmt", "alter_resource_pool_classifier_stmt", 
        "alter_resource_pool_classifier_action", "drop_resource_pool_classifier_stmt", 
        "create_replication_stmt", "replication_target", "replication_settings", 
        "replication_settings_entry", "alter_replication_stmt", "alter_replication_action", 
        "alter_replication_set_setting", "drop_replication_stmt", "action_or_subquery_args", 
        "define_action_or_subquery_stmt", "define_action_or_subquery_body", 
        "if_stmt", "for_stmt", "table_ref", "table_key", "table_arg", "table_hints", 
        "table_hint", "object_ref", "simple_table_ref_core", "simple_table_ref", 
        "into_simple_table_ref", "delete_stmt", "update_stmt", "set_clause_choice", 
        "set_clause_list", "set_clause", "set_target", "multiple_column_assignment", 
        "set_target_list", "create_topic_stmt", "create_topic_entries", 
        "create_topic_entry", "with_topic_settings", "alter_topic_stmt", 
        "alter_topic_action", "alter_topic_add_consumer", "topic_create_consumer_entry", 
        "alter_topic_alter_consumer", "alter_topic_alter_consumer_entry", 
        "alter_topic_drop_consumer", "topic_alter_consumer_set", "topic_alter_consumer_reset", 
        "alter_topic_set_settings", "alter_topic_reset_settings", "drop_topic_stmt", 
        "topic_settings", "topic_settings_entry", "topic_setting_value", 
        "topic_consumer_with_settings", "topic_consumer_settings", "topic_consumer_settings_entry", 
        "topic_consumer_setting_value", "topic_ref", "topic_consumer_ref", 
        "null_treatment", "filter_clause", "window_name_or_specification", 
        "window_name", "window_clause", "window_definition_list", "window_definition", 
        "new_window_name", "window_specification", "window_specification_details", 
        "existing_window_name", "window_partition_clause", "window_order_clause", 
        "window_frame_clause", "window_frame_units", "window_frame_extent", 
        "window_frame_between", "window_frame_bound", "window_frame_exclusion", 
        "use_stmt", "subselect_stmt", "named_nodes_stmt", "commit_stmt", 
        "rollback_stmt", "analyze_table", "analyze_table_list", "analyze_stmt", 
        "identifier", "id", "id_schema", "id_expr", "id_expr_in", "id_window", 
        "id_table", "id_without", "id_hint", "id_as_compat", "an_id", "an_id_or_type", 
        "an_id_schema", "an_id_expr", "an_id_expr_in", "an_id_window", "an_id_table", 
        "an_id_without", "an_id_hint", "an_id_pure", "an_id_as_compat", 
        "view_name", "opt_id_prefix", "cluster_expr", "id_or_type", "opt_id_prefix_or_type", 
        "id_or_at", "id_table_or_type", "id_table_or_at", "keyword", "keyword_expr_uncompat", 
        "keyword_table_uncompat", "keyword_select_uncompat", "keyword_alter_uncompat", 
        "keyword_in_uncompat", "keyword_window_uncompat", "keyword_hint_uncompat", 
        "keyword_as_compat", "keyword_compat", "type_id", "bool_value", 
        "real", "integer", "sql_query_yq", "sql_stmt_list_yq", "sql_stmt_yq", 
        "sql_stmt_core_yq", "replication_name", "where_expr", "from_stmt", 
        "alter_table_for_autocomplete",
    ];

    public get grammarFileName(): string { return "YQL.g4"; }
    public get literalNames(): (string | null)[] { return YQLParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return YQLParser.symbolicNames; }
    public get ruleNames(): string[] { return YQLParser.ruleNames; }
    public get serializedATN(): number[] { return YQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, YQLParser._ATN, YQLParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public sql_query(): Sql_queryContext {
        let localContext = new Sql_queryContext(this.context, this.state);
        this.enterRule(localContext, 0, YQLParser.RULE_sql_query);
        try {
            this.state = 877;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 0, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 872;
                this.sql_stmt_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 873;
                this.match(YQLParser.PRAGMA);
                this.state = 874;
                this.match(YQLParser.ANSI);
                this.state = 875;
                this.match(YQLParser.DIGITS);
                this.state = 876;
                this.ansi_sql_stmt_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_list(): Sql_stmt_listContext {
        let localContext = new Sql_stmt_listContext(this.context, this.state);
        this.enterRule(localContext, 2, YQLParser.RULE_sql_stmt_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 882;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 879;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 884;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 885;
            this.sql_stmt();
            this.state = 894;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 3, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 887;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 886;
                        this.match(YQLParser.SEMICOLON);
                        }
                        }
                        this.state = 889;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 23);
                    this.state = 891;
                    this.sql_stmt();
                    }
                    }
                }
                this.state = 896;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 3, this.context);
            }
            this.state = 900;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 897;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 902;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 903;
            this.match(YQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ansi_sql_stmt_list(): Ansi_sql_stmt_listContext {
        let localContext = new Ansi_sql_stmt_listContext(this.context, this.state);
        this.enterRule(localContext, 4, YQLParser.RULE_ansi_sql_stmt_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 908;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 905;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 911;
            this.match(YQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lambda_body(): Lambda_bodyContext {
        let localContext = new Lambda_bodyContext(this.context, this.state);
        this.enterRule(localContext, 6, YQLParser.RULE_lambda_body);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 916;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 913;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 918;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 927;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 32 || _la === 158) {
                {
                {
                this.state = 919;
                this.lambda_stmt();
                this.state = 921;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 920;
                    this.match(YQLParser.SEMICOLON);
                    }
                    }
                    this.state = 923;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 23);
                }
                }
                this.state = 929;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 930;
            this.match(YQLParser.RETURN);
            this.state = 931;
            this.expr();
            this.state = 935;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 932;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 937;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lambda_stmt(): Lambda_stmtContext {
        let localContext = new Lambda_stmtContext(this.context, this.state);
        this.enterRule(localContext, 8, YQLParser.RULE_lambda_stmt);
        try {
            this.state = 940;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 938;
                this.named_nodes_stmt();
                }
                break;
            case YQLParser.IMPORT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 939;
                this.import_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt(): Sql_stmtContext {
        let localContext = new Sql_stmtContext(this.context, this.state);
        this.enterRule(localContext, 10, YQLParser.RULE_sql_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 947;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 942;
                this.match(YQLParser.EXPLAIN);
                this.state = 945;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1) {
                    {
                    this.state = 943;
                    this.match(YQLParser.QUERY);
                    this.state = 944;
                    this.match(YQLParser.PLAN);
                    }
                }

                }
            }

            this.state = 949;
            this.sql_stmt_core();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_core(): Sql_stmt_coreContext {
        let localContext = new Sql_stmt_coreContext(this.context, this.state);
        this.enterRule(localContext, 12, YQLParser.RULE_sql_stmt_core);
        try {
            this.state = 1007;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 13, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 951;
                this.pragma_stmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 952;
                this.select_stmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 953;
                this.named_nodes_stmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 954;
                this.create_table_stmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 955;
                this.drop_table_stmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 956;
                this.use_stmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 957;
                this.into_table_stmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 958;
                this.commit_stmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 959;
                this.update_stmt();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 960;
                this.delete_stmt();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 961;
                this.rollback_stmt();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 962;
                this.declare_stmt();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 963;
                this.import_stmt();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 964;
                this.export_stmt();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 965;
                this.alter_table_stmt();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 966;
                this.alter_external_table_stmt();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 967;
                this.do_stmt();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 968;
                this.define_action_or_subquery_stmt();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 969;
                this.if_stmt();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 970;
                this.for_stmt();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 971;
                this.values_stmt();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 972;
                this.create_user_stmt();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 973;
                this.alter_user_stmt();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 974;
                this.create_group_stmt();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 975;
                this.alter_group_stmt();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 976;
                this.drop_role_stmt();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 977;
                this.create_object_stmt();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 978;
                this.alter_object_stmt();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 979;
                this.drop_object_stmt();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 980;
                this.create_external_data_source_stmt();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 981;
                this.alter_external_data_source_stmt();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 982;
                this.drop_external_data_source_stmt();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 983;
                this.create_replication_stmt();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 984;
                this.drop_replication_stmt();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 985;
                this.create_topic_stmt();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 986;
                this.alter_topic_stmt();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 987;
                this.drop_topic_stmt();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 988;
                this.grant_permissions_stmt();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 989;
                this.revoke_permissions_stmt();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 990;
                this.alter_table_store_stmt();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 991;
                this.upsert_object_stmt();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 992;
                this.create_view_stmt();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 993;
                this.drop_view_stmt();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 994;
                this.alter_replication_stmt();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 995;
                this.create_resource_pool_stmt();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 996;
                this.alter_resource_pool_stmt();
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 997;
                this.drop_resource_pool_stmt();
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 998;
                this.create_backup_collection_stmt();
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 999;
                this.alter_backup_collection_stmt();
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 1000;
                this.drop_backup_collection_stmt();
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 1001;
                this.analyze_stmt();
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 1002;
                this.create_resource_pool_classifier_stmt();
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 1003;
                this.alter_resource_pool_classifier_stmt();
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 1004;
                this.drop_resource_pool_classifier_stmt();
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 1005;
                this.backup_stmt();
                }
                break;
            case 56:
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 1006;
                this.restore_stmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr(): ExprContext {
        let localContext = new ExprContext(this.context, this.state);
        this.enterRule(localContext, 14, YQLParser.RULE_expr);
        try {
            let alternative: number;
            this.state = 1018;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1009;
                this.or_subexpr();
                this.state = 1014;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 14, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1010;
                        this.match(YQLParser.OR);
                        this.state = 1011;
                        this.or_subexpr();
                        }
                        }
                    }
                    this.state = 1016;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 14, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1017;
                this.type_name_composite();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public or_subexpr(): Or_subexprContext {
        let localContext = new Or_subexprContext(this.context, this.state);
        this.enterRule(localContext, 16, YQLParser.RULE_or_subexpr);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1020;
            this.and_subexpr();
            this.state = 1025;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 16, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1021;
                    this.match(YQLParser.AND);
                    this.state = 1022;
                    this.and_subexpr();
                    }
                    }
                }
                this.state = 1027;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 16, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public and_subexpr(): And_subexprContext {
        let localContext = new And_subexprContext(this.context, this.state);
        this.enterRule(localContext, 18, YQLParser.RULE_and_subexpr);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1028;
            this.xor_subexpr();
            this.state = 1033;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 17, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1029;
                    this.match(YQLParser.XOR);
                    this.state = 1030;
                    this.xor_subexpr();
                    }
                    }
                }
                this.state = 1035;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 17, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xor_subexpr(): Xor_subexprContext {
        let localContext = new Xor_subexprContext(this.context, this.state);
        this.enterRule(localContext, 20, YQLParser.RULE_xor_subexpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1036;
            this.eq_subexpr();
            this.state = 1038;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 18, this.context) ) {
            case 1:
                {
                this.state = 1037;
                this.cond_expr();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distinct_from_op(): Distinct_from_opContext {
        let localContext = new Distinct_from_opContext(this.context, this.state);
        this.enterRule(localContext, 22, YQLParser.RULE_distinct_from_op);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1040;
            this.match(YQLParser.IS);
            this.state = 1042;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 197) {
                {
                this.state = 1041;
                this.match(YQLParser.NOT);
                }
            }

            this.state = 1044;
            this.match(YQLParser.DISTINCT);
            this.state = 1045;
            this.match(YQLParser.FROM);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cond_expr(): Cond_exprContext {
        let localContext = new Cond_exprContext(this.context, this.state);
        this.enterRule(localContext, 24, YQLParser.RULE_cond_expr);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1098;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1048;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 1047;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 1050;
                this.match_op();
                this.state = 1051;
                this.eq_subexpr();
                this.state = 1054;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 21, this.context) ) {
                case 1:
                    {
                    this.state = 1052;
                    this.match(YQLParser.ESCAPE);
                    this.state = 1053;
                    this.eq_subexpr();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1057;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 1056;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 1059;
                this.match(YQLParser.IN);
                this.state = 1061;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
                case 1:
                    {
                    this.state = 1060;
                    this.match(YQLParser.COMPACT);
                    }
                    break;
                }
                this.state = 1063;
                this.in_expr();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1073;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
                case 1:
                    {
                    this.state = 1064;
                    this.match(YQLParser.ISNULL);
                    }
                    break;
                case 2:
                    {
                    this.state = 1065;
                    this.match(YQLParser.NOTNULL);
                    }
                    break;
                case 3:
                    {
                    this.state = 1066;
                    this.match(YQLParser.IS);
                    this.state = 1067;
                    this.match(YQLParser.NULL);
                    }
                    break;
                case 4:
                    {
                    this.state = 1069;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 171) {
                        {
                        this.state = 1068;
                        this.match(YQLParser.IS);
                        }
                    }

                    this.state = 1071;
                    this.match(YQLParser.NOT);
                    this.state = 1072;
                    this.match(YQLParser.NULL);
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1076;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 1075;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 1078;
                this.match(YQLParser.BETWEEN);
                this.state = 1080;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
                case 1:
                    {
                    this.state = 1079;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 54 || _la === 277)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 1082;
                this.eq_subexpr();
                this.state = 1083;
                this.match(YQLParser.AND);
                this.state = 1084;
                this.eq_subexpr();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1094;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 1091;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case YQLParser.EQUALS:
                            {
                            this.state = 1086;
                            this.match(YQLParser.EQUALS);
                            }
                            break;
                        case YQLParser.EQUALS2:
                            {
                            this.state = 1087;
                            this.match(YQLParser.EQUALS2);
                            }
                            break;
                        case YQLParser.NOT_EQUALS:
                            {
                            this.state = 1088;
                            this.match(YQLParser.NOT_EQUALS);
                            }
                            break;
                        case YQLParser.NOT_EQUALS2:
                            {
                            this.state = 1089;
                            this.match(YQLParser.NOT_EQUALS2);
                            }
                            break;
                        case YQLParser.IS:
                            {
                            this.state = 1090;
                            this.distinct_from_op();
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        this.state = 1093;
                        this.eq_subexpr();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1096;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 29, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public match_op(): Match_opContext {
        let localContext = new Match_opContext(this.context, this.state);
        this.enterRule(localContext, 26, YQLParser.RULE_match_op);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1100;
            _la = this.tokenStream.LA(1);
            if(!(_la === 145 || _la === 156 || _la === 181 || _la === 186 || _la === 236 || _la === 255)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public eq_subexpr(): Eq_subexprContext {
        let localContext = new Eq_subexprContext(this.context, this.state);
        this.enterRule(localContext, 28, YQLParser.RULE_eq_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1102;
            this.neq_subexpr();
            this.state = 1107;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 960) !== 0)) {
                {
                {
                this.state = 1103;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 960) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1104;
                this.neq_subexpr();
                }
                }
                this.state = 1109;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public shift_right(): Shift_rightContext {
        let localContext = new Shift_rightContext(this.context, this.state);
        this.enterRule(localContext, 30, YQLParser.RULE_shift_right);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1110;
            this.match(YQLParser.GREATER);
            this.state = 1111;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rot_right(): Rot_rightContext {
        let localContext = new Rot_rightContext(this.context, this.state);
        this.enterRule(localContext, 32, YQLParser.RULE_rot_right);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1113;
            this.match(YQLParser.GREATER);
            this.state = 1114;
            this.match(YQLParser.GREATER);
            this.state = 1115;
            this.match(YQLParser.PIPE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public double_question(): Double_questionContext {
        let localContext = new Double_questionContext(this.context, this.state);
        this.enterRule(localContext, 34, YQLParser.RULE_double_question);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1117;
            this.match(YQLParser.QUESTION);
            this.state = 1118;
            this.match(YQLParser.QUESTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public neq_subexpr(): Neq_subexprContext {
        let localContext = new Neq_subexprContext(this.context, this.state);
        this.enterRule(localContext, 36, YQLParser.RULE_neq_subexpr);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1120;
            this.bit_subexpr();
            this.state = 1133;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 33, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1128;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
                    case 1:
                        {
                        this.state = 1121;
                        this.match(YQLParser.SHIFT_LEFT);
                        }
                        break;
                    case 2:
                        {
                        this.state = 1122;
                        this.shift_right();
                        }
                        break;
                    case 3:
                        {
                        this.state = 1123;
                        this.match(YQLParser.ROT_LEFT);
                        }
                        break;
                    case 4:
                        {
                        this.state = 1124;
                        this.rot_right();
                        }
                        break;
                    case 5:
                        {
                        this.state = 1125;
                        this.match(YQLParser.AMPERSAND);
                        }
                        break;
                    case 6:
                        {
                        this.state = 1126;
                        this.match(YQLParser.PIPE);
                        }
                        break;
                    case 7:
                        {
                        this.state = 1127;
                        this.match(YQLParser.CARET);
                        }
                        break;
                    }
                    this.state = 1130;
                    this.bit_subexpr();
                    }
                    }
                }
                this.state = 1135;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 33, this.context);
            }
            this.state = 1144;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
            case 1:
                {
                this.state = 1136;
                this.double_question();
                this.state = 1137;
                this.neq_subexpr();
                }
                break;
            case 2:
                {
                this.state = 1140;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 1139;
                    this.match(YQLParser.QUESTION);
                    }
                    }
                    this.state = 1142;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 28);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bit_subexpr(): Bit_subexprContext {
        let localContext = new Bit_subexprContext(this.context, this.state);
        this.enterRule(localContext, 38, YQLParser.RULE_bit_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1146;
            this.add_subexpr();
            this.state = 1151;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 17 || _la === 18) {
                {
                {
                this.state = 1147;
                _la = this.tokenStream.LA(1);
                if(!(_la === 17 || _la === 18)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1148;
                this.add_subexpr();
                }
                }
                this.state = 1153;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public add_subexpr(): Add_subexprContext {
        let localContext = new Add_subexprContext(this.context, this.state);
        this.enterRule(localContext, 40, YQLParser.RULE_add_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1154;
            this.mul_subexpr();
            this.state = 1159;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 7340032) !== 0)) {
                {
                {
                this.state = 1155;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 7340032) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1156;
                this.mul_subexpr();
                }
                }
                this.state = 1161;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mul_subexpr(): Mul_subexprContext {
        let localContext = new Mul_subexprContext(this.context, this.state);
        this.enterRule(localContext, 42, YQLParser.RULE_mul_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1162;
            this.con_subexpr();
            this.state = 1167;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 14) {
                {
                {
                this.state = 1163;
                this.match(YQLParser.DOUBLE_PIPE);
                this.state = 1164;
                this.con_subexpr();
                }
                }
                this.state = 1169;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public con_subexpr(): Con_subexprContext {
        let localContext = new Con_subexprContext(this.context, this.state);
        this.enterRule(localContext, 44, YQLParser.RULE_con_subexpr);
        try {
            this.state = 1174;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1170;
                this.unary_subexpr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1171;
                this.unary_op();
                this.state = 1172;
                this.unary_subexpr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_op(): Unary_opContext {
        let localContext = new Unary_opContext(this.context, this.state);
        this.enterRule(localContext, 46, YQLParser.RULE_unary_op);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1176;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 917504) !== 0) || _la === 197)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_subexpr_suffix(): Unary_subexpr_suffixContext {
        let localContext = new Unary_subexpr_suffixContext(this.context, this.state);
        this.enterRule(localContext, 48, YQLParser.RULE_unary_subexpr_suffix);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1190;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 24)) & ~0x1F) === 0 && ((1 << (_la - 24)) & 32773) !== 0)) {
                {
                {
                this.state = 1186;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.LBRACE_SQUARE:
                    {
                    this.state = 1178;
                    this.key_expr();
                    }
                    break;
                case YQLParser.LPAREN:
                    {
                    this.state = 1179;
                    this.invoke_expr();
                    }
                    break;
                case YQLParser.DOT:
                    {
                    this.state = 1180;
                    this.match(YQLParser.DOT);
                    this.state = 1184;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case YQLParser.DOLLAR:
                        {
                        this.state = 1181;
                        this.bind_parameter();
                        }
                        break;
                    case YQLParser.DIGITS:
                        {
                        this.state = 1182;
                        this.match(YQLParser.DIGITS);
                        }
                        break;
                    case YQLParser.ABORT:
                    case YQLParser.ACTION:
                    case YQLParser.ADD:
                    case YQLParser.AFTER:
                    case YQLParser.ALL:
                    case YQLParser.ALTER:
                    case YQLParser.ANALYZE:
                    case YQLParser.AND:
                    case YQLParser.ANSI:
                    case YQLParser.ANY:
                    case YQLParser.ARRAY:
                    case YQLParser.AS:
                    case YQLParser.ASC:
                    case YQLParser.ASSUME:
                    case YQLParser.ASYMMETRIC:
                    case YQLParser.ASYNC:
                    case YQLParser.AT:
                    case YQLParser.ATTACH:
                    case YQLParser.ATTRIBUTES:
                    case YQLParser.AUTOINCREMENT:
                    case YQLParser.BACKUP:
                    case YQLParser.COLLECTION:
                    case YQLParser.BEFORE:
                    case YQLParser.BEGIN:
                    case YQLParser.BERNOULLI:
                    case YQLParser.BETWEEN:
                    case YQLParser.BITCAST:
                    case YQLParser.BY:
                    case YQLParser.CALLABLE:
                    case YQLParser.CASCADE:
                    case YQLParser.CASE:
                    case YQLParser.CAST:
                    case YQLParser.CHANGEFEED:
                    case YQLParser.CHECK:
                    case YQLParser.CLASSIFIER:
                    case YQLParser.COLLATE:
                    case YQLParser.COLUMN:
                    case YQLParser.COLUMNS:
                    case YQLParser.COMMIT:
                    case YQLParser.COMPACT:
                    case YQLParser.CONDITIONAL:
                    case YQLParser.CONFLICT:
                    case YQLParser.CONNECT:
                    case YQLParser.CONSTRAINT:
                    case YQLParser.CONSUMER:
                    case YQLParser.COVER:
                    case YQLParser.CREATE:
                    case YQLParser.CROSS:
                    case YQLParser.CUBE:
                    case YQLParser.CURRENT:
                    case YQLParser.CURRENT_DATE:
                    case YQLParser.CURRENT_TIME:
                    case YQLParser.CURRENT_TIMESTAMP:
                    case YQLParser.DATA:
                    case YQLParser.DATABASE:
                    case YQLParser.DECIMAL:
                    case YQLParser.DECLARE:
                    case YQLParser.DEFAULT:
                    case YQLParser.DEFERRABLE:
                    case YQLParser.DEFERRED:
                    case YQLParser.DEFINE:
                    case YQLParser.DELETE:
                    case YQLParser.DESC:
                    case YQLParser.DESCRIBE:
                    case YQLParser.DETACH:
                    case YQLParser.DICT:
                    case YQLParser.DIRECTORY:
                    case YQLParser.DISABLE:
                    case YQLParser.DISCARD:
                    case YQLParser.DISTINCT:
                    case YQLParser.DO:
                    case YQLParser.DROP:
                    case YQLParser.EACH:
                    case YQLParser.ELSE:
                    case YQLParser.EMPTY:
                    case YQLParser.EMPTY_ACTION:
                    case YQLParser.ENCRYPTED:
                    case YQLParser.END:
                    case YQLParser.ENUM:
                    case YQLParser.ERASE:
                    case YQLParser.ERROR:
                    case YQLParser.ESCAPE:
                    case YQLParser.EVALUATE:
                    case YQLParser.EXCEPT:
                    case YQLParser.EXCLUDE:
                    case YQLParser.EXCLUSION:
                    case YQLParser.EXCLUSIVE:
                    case YQLParser.EXISTS:
                    case YQLParser.EXPLAIN:
                    case YQLParser.EXPORT:
                    case YQLParser.EXTERNAL:
                    case YQLParser.FAIL:
                    case YQLParser.FAMILY:
                    case YQLParser.FILTER:
                    case YQLParser.FIRST:
                    case YQLParser.FLATTEN:
                    case YQLParser.FLOW:
                    case YQLParser.FOLLOWING:
                    case YQLParser.FOR:
                    case YQLParser.FOREIGN:
                    case YQLParser.FROM:
                    case YQLParser.FULL:
                    case YQLParser.FUNCTION:
                    case YQLParser.GLOB:
                    case YQLParser.GRANT:
                    case YQLParser.GROUP:
                    case YQLParser.GROUPING:
                    case YQLParser.GROUPS:
                    case YQLParser.HASH:
                    case YQLParser.HAVING:
                    case YQLParser.HOP:
                    case YQLParser.IF:
                    case YQLParser.IGNORE:
                    case YQLParser.ILIKE:
                    case YQLParser.IMMEDIATE:
                    case YQLParser.IMPORT:
                    case YQLParser.IN:
                    case YQLParser.INCREMENTAL:
                    case YQLParser.INDEX:
                    case YQLParser.INDEXED:
                    case YQLParser.INHERITS:
                    case YQLParser.INITIAL:
                    case YQLParser.INITIALLY:
                    case YQLParser.INNER:
                    case YQLParser.INSERT:
                    case YQLParser.INSTEAD:
                    case YQLParser.INTERSECT:
                    case YQLParser.INTO:
                    case YQLParser.IS:
                    case YQLParser.ISNULL:
                    case YQLParser.JOIN:
                    case YQLParser.JSON_EXISTS:
                    case YQLParser.JSON_QUERY:
                    case YQLParser.JSON_VALUE:
                    case YQLParser.KEY:
                    case YQLParser.LAST:
                    case YQLParser.LEFT:
                    case YQLParser.LEGACY:
                    case YQLParser.LIKE:
                    case YQLParser.LIMIT:
                    case YQLParser.LIST:
                    case YQLParser.LOCAL:
                    case YQLParser.MANAGE:
                    case YQLParser.MATCH:
                    case YQLParser.MATCHES:
                    case YQLParser.MATCH_RECOGNIZE:
                    case YQLParser.MEASURES:
                    case YQLParser.MICROSECONDS:
                    case YQLParser.MILLISECONDS:
                    case YQLParser.MODIFY:
                    case YQLParser.NANOSECONDS:
                    case YQLParser.NATURAL:
                    case YQLParser.NEXT:
                    case YQLParser.NO:
                    case YQLParser.NOT:
                    case YQLParser.NOTNULL:
                    case YQLParser.NULL:
                    case YQLParser.NULLS:
                    case YQLParser.OBJECT:
                    case YQLParser.OF:
                    case YQLParser.OFFSET:
                    case YQLParser.OMIT:
                    case YQLParser.ON:
                    case YQLParser.ONE:
                    case YQLParser.ONLY:
                    case YQLParser.OPTION:
                    case YQLParser.OPTIONAL:
                    case YQLParser.OR:
                    case YQLParser.ORDER:
                    case YQLParser.OTHERS:
                    case YQLParser.OUTER:
                    case YQLParser.OVER:
                    case YQLParser.PARALLEL:
                    case YQLParser.PARTITION:
                    case YQLParser.PASSING:
                    case YQLParser.PASSWORD:
                    case YQLParser.PAST:
                    case YQLParser.PATTERN:
                    case YQLParser.PER:
                    case YQLParser.PERMUTE:
                    case YQLParser.PLAN:
                    case YQLParser.POOL:
                    case YQLParser.PRAGMA:
                    case YQLParser.PRECEDING:
                    case YQLParser.PRESORT:
                    case YQLParser.PRIMARY:
                    case YQLParser.PRIVILEGES:
                    case YQLParser.PROCESS:
                    case YQLParser.QUEUE:
                    case YQLParser.RAISE:
                    case YQLParser.RANGE:
                    case YQLParser.REDUCE:
                    case YQLParser.REFERENCES:
                    case YQLParser.REGEXP:
                    case YQLParser.REINDEX:
                    case YQLParser.RELEASE:
                    case YQLParser.REMOVE:
                    case YQLParser.RENAME:
                    case YQLParser.REPLACE:
                    case YQLParser.REPLICATION:
                    case YQLParser.RESET:
                    case YQLParser.RESOURCE:
                    case YQLParser.RESPECT:
                    case YQLParser.RESTORE:
                    case YQLParser.RESTRICT:
                    case YQLParser.RESULT:
                    case YQLParser.RETURN:
                    case YQLParser.RETURNING:
                    case YQLParser.REVERT:
                    case YQLParser.REVOKE:
                    case YQLParser.RIGHT:
                    case YQLParser.RLIKE:
                    case YQLParser.ROLLBACK:
                    case YQLParser.ROLLUP:
                    case YQLParser.ROW:
                    case YQLParser.ROWS:
                    case YQLParser.SAMPLE:
                    case YQLParser.SAVEPOINT:
                    case YQLParser.SCHEMA:
                    case YQLParser.SECONDS:
                    case YQLParser.SEEK:
                    case YQLParser.SELECT:
                    case YQLParser.SEMI:
                    case YQLParser.SET:
                    case YQLParser.SETS:
                    case YQLParser.SHOW:
                    case YQLParser.TSKIP:
                    case YQLParser.SOURCE:
                    case YQLParser.STREAM:
                    case YQLParser.STRUCT:
                    case YQLParser.SUBQUERY:
                    case YQLParser.SUBSET:
                    case YQLParser.SYMBOLS:
                    case YQLParser.SYMMETRIC:
                    case YQLParser.SYNC:
                    case YQLParser.SYSTEM:
                    case YQLParser.TABLE:
                    case YQLParser.TABLES:
                    case YQLParser.TABLESAMPLE:
                    case YQLParser.TABLESTORE:
                    case YQLParser.TAGGED:
                    case YQLParser.TEMP:
                    case YQLParser.TEMPORARY:
                    case YQLParser.THEN:
                    case YQLParser.TIES:
                    case YQLParser.TO:
                    case YQLParser.TOPIC:
                    case YQLParser.TRANSACTION:
                    case YQLParser.TRIGGER:
                    case YQLParser.TUPLE:
                    case YQLParser.TYPE:
                    case YQLParser.UNBOUNDED:
                    case YQLParser.UNCONDITIONAL:
                    case YQLParser.UNION:
                    case YQLParser.UNIQUE:
                    case YQLParser.UNKNOWN:
                    case YQLParser.UNMATCHED:
                    case YQLParser.UPDATE:
                    case YQLParser.UPSERT:
                    case YQLParser.USE:
                    case YQLParser.USER:
                    case YQLParser.USING:
                    case YQLParser.VACUUM:
                    case YQLParser.VALUES:
                    case YQLParser.VARIANT:
                    case YQLParser.VIEW:
                    case YQLParser.VIRTUAL:
                    case YQLParser.WHEN:
                    case YQLParser.WHERE:
                    case YQLParser.WINDOW:
                    case YQLParser.WITH:
                    case YQLParser.WITHOUT:
                    case YQLParser.WRAPPER:
                    case YQLParser.XOR:
                    case YQLParser.STRING_VALUE:
                    case YQLParser.ID_PLAIN:
                    case YQLParser.ID_QUOTED:
                        {
                        this.state = 1183;
                        this.an_id_or_type();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                }
                this.state = 1192;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1195;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 76) {
                {
                this.state = 1193;
                this.match(YQLParser.COLLATE);
                this.state = 1194;
                this.an_id();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_casual_subexpr(): Unary_casual_subexprContext {
        let localContext = new Unary_casual_subexprContext(this.context, this.state);
        this.enterRule(localContext, 50, YQLParser.RULE_unary_casual_subexpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1199;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
            case 1:
                {
                this.state = 1197;
                this.id_expr();
                }
                break;
            case 2:
                {
                this.state = 1198;
                this.atom_expr();
                }
                break;
            }
            this.state = 1201;
            this.unary_subexpr_suffix();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_unary_casual_subexpr(): In_unary_casual_subexprContext {
        let localContext = new In_unary_casual_subexprContext(this.context, this.state);
        this.enterRule(localContext, 52, YQLParser.RULE_in_unary_casual_subexpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1205;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 45, this.context) ) {
            case 1:
                {
                this.state = 1203;
                this.id_expr_in();
                }
                break;
            case 2:
                {
                this.state = 1204;
                this.in_atom_expr();
                }
                break;
            }
            this.state = 1207;
            this.unary_subexpr_suffix();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_subexpr(): Unary_subexprContext {
        let localContext = new Unary_subexprContext(this.context, this.state);
        this.enterRule(localContext, 54, YQLParser.RULE_unary_subexpr);
        try {
            this.state = 1211;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 46, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1209;
                this.unary_casual_subexpr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1210;
                this.json_api_expr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_unary_subexpr(): In_unary_subexprContext {
        let localContext = new In_unary_subexprContext(this.context, this.state);
        this.enterRule(localContext, 56, YQLParser.RULE_in_unary_subexpr);
        try {
            this.state = 1215;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 47, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1213;
                this.in_unary_casual_subexpr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1214;
                this.json_api_expr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public list_literal(): List_literalContext {
        let localContext = new List_literalContext(this.context, this.state);
        this.enterRule(localContext, 58, YQLParser.RULE_list_literal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1217;
            this.match(YQLParser.LBRACE_SQUARE);
            this.state = 1219;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4278585373) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294959103) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 239)) & ~0x1F) === 0 && ((1 << (_la - 239)) & 4294967291) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 4294967295) !== 0) || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & 8388607) !== 0)) {
                {
                this.state = 1218;
                this.expr_list();
                }
            }

            this.state = 1222;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1221;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1224;
            this.match(YQLParser.RBRACE_SQUARE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_dict_list(): Expr_dict_listContext {
        let localContext = new Expr_dict_listContext(this.context, this.state);
        this.enterRule(localContext, 60, YQLParser.RULE_expr_dict_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1226;
            this.expr();
            this.state = 1229;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 29) {
                {
                this.state = 1227;
                this.match(YQLParser.COLON);
                this.state = 1228;
                this.expr();
                }
            }

            this.state = 1239;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 52, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1231;
                    this.match(YQLParser.COMMA);
                    this.state = 1232;
                    this.expr();
                    this.state = 1235;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 29) {
                        {
                        this.state = 1233;
                        this.match(YQLParser.COLON);
                        this.state = 1234;
                        this.expr();
                        }
                    }

                    }
                    }
                }
                this.state = 1241;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 52, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dict_literal(): Dict_literalContext {
        let localContext = new Dict_literalContext(this.context, this.state);
        this.enterRule(localContext, 62, YQLParser.RULE_dict_literal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1242;
            this.match(YQLParser.LBRACE_CURLY);
            this.state = 1244;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4278585373) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294959103) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 239)) & ~0x1F) === 0 && ((1 << (_la - 239)) & 4294967291) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 4294967295) !== 0) || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & 8388607) !== 0)) {
                {
                this.state = 1243;
                this.expr_dict_list();
                }
            }

            this.state = 1247;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1246;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1249;
            this.match(YQLParser.RBRACE_CURLY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_struct_list(): Expr_struct_listContext {
        let localContext = new Expr_struct_listContext(this.context, this.state);
        this.enterRule(localContext, 64, YQLParser.RULE_expr_struct_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1251;
            this.expr();
            this.state = 1252;
            this.match(YQLParser.COLON);
            this.state = 1253;
            this.expr();
            this.state = 1261;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 55, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1254;
                    this.match(YQLParser.COMMA);
                    this.state = 1255;
                    this.expr();
                    this.state = 1256;
                    this.match(YQLParser.COLON);
                    this.state = 1257;
                    this.expr();
                    }
                    }
                }
                this.state = 1263;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 55, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public struct_literal(): Struct_literalContext {
        let localContext = new Struct_literalContext(this.context, this.state);
        this.enterRule(localContext, 66, YQLParser.RULE_struct_literal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1264;
            this.match(YQLParser.STRUCT_OPEN);
            this.state = 1266;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4278585373) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294959103) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 239)) & ~0x1F) === 0 && ((1 << (_la - 239)) & 4294967291) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 4294967295) !== 0) || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & 8388607) !== 0)) {
                {
                this.state = 1265;
                this.expr_struct_list();
                }
            }

            this.state = 1269;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1268;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1271;
            this.match(YQLParser.STRUCT_CLOSE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atom_expr(): Atom_exprContext {
        let localContext = new Atom_exprContext(this.context, this.state);
        this.enterRule(localContext, 68, YQLParser.RULE_atom_expr);
        try {
            this.state = 1290;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 59, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1273;
                this.literal_value();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1274;
                this.bind_parameter();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1275;
                this.lambda();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1276;
                this.cast_expr();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1277;
                this.exists_expr();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1278;
                this.case_expr();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1279;
                this.an_id_or_type();
                this.state = 1280;
                this.match(YQLParser.NAMESPACE);
                this.state = 1283;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.ABORT:
                case YQLParser.ACTION:
                case YQLParser.ADD:
                case YQLParser.AFTER:
                case YQLParser.ALL:
                case YQLParser.ALTER:
                case YQLParser.ANALYZE:
                case YQLParser.AND:
                case YQLParser.ANSI:
                case YQLParser.ANY:
                case YQLParser.ARRAY:
                case YQLParser.AS:
                case YQLParser.ASC:
                case YQLParser.ASSUME:
                case YQLParser.ASYMMETRIC:
                case YQLParser.ASYNC:
                case YQLParser.AT:
                case YQLParser.ATTACH:
                case YQLParser.ATTRIBUTES:
                case YQLParser.AUTOINCREMENT:
                case YQLParser.BACKUP:
                case YQLParser.COLLECTION:
                case YQLParser.BEFORE:
                case YQLParser.BEGIN:
                case YQLParser.BERNOULLI:
                case YQLParser.BETWEEN:
                case YQLParser.BITCAST:
                case YQLParser.BY:
                case YQLParser.CALLABLE:
                case YQLParser.CASCADE:
                case YQLParser.CASE:
                case YQLParser.CAST:
                case YQLParser.CHANGEFEED:
                case YQLParser.CHECK:
                case YQLParser.CLASSIFIER:
                case YQLParser.COLLATE:
                case YQLParser.COLUMN:
                case YQLParser.COLUMNS:
                case YQLParser.COMMIT:
                case YQLParser.COMPACT:
                case YQLParser.CONDITIONAL:
                case YQLParser.CONFLICT:
                case YQLParser.CONNECT:
                case YQLParser.CONSTRAINT:
                case YQLParser.CONSUMER:
                case YQLParser.COVER:
                case YQLParser.CREATE:
                case YQLParser.CROSS:
                case YQLParser.CUBE:
                case YQLParser.CURRENT:
                case YQLParser.CURRENT_DATE:
                case YQLParser.CURRENT_TIME:
                case YQLParser.CURRENT_TIMESTAMP:
                case YQLParser.DATA:
                case YQLParser.DATABASE:
                case YQLParser.DECIMAL:
                case YQLParser.DECLARE:
                case YQLParser.DEFAULT:
                case YQLParser.DEFERRABLE:
                case YQLParser.DEFERRED:
                case YQLParser.DEFINE:
                case YQLParser.DELETE:
                case YQLParser.DESC:
                case YQLParser.DESCRIBE:
                case YQLParser.DETACH:
                case YQLParser.DICT:
                case YQLParser.DIRECTORY:
                case YQLParser.DISABLE:
                case YQLParser.DISCARD:
                case YQLParser.DISTINCT:
                case YQLParser.DO:
                case YQLParser.DROP:
                case YQLParser.EACH:
                case YQLParser.ELSE:
                case YQLParser.EMPTY:
                case YQLParser.EMPTY_ACTION:
                case YQLParser.ENCRYPTED:
                case YQLParser.END:
                case YQLParser.ENUM:
                case YQLParser.ERASE:
                case YQLParser.ERROR:
                case YQLParser.ESCAPE:
                case YQLParser.EVALUATE:
                case YQLParser.EXCEPT:
                case YQLParser.EXCLUDE:
                case YQLParser.EXCLUSION:
                case YQLParser.EXCLUSIVE:
                case YQLParser.EXISTS:
                case YQLParser.EXPLAIN:
                case YQLParser.EXPORT:
                case YQLParser.EXTERNAL:
                case YQLParser.FAIL:
                case YQLParser.FAMILY:
                case YQLParser.FILTER:
                case YQLParser.FIRST:
                case YQLParser.FLATTEN:
                case YQLParser.FLOW:
                case YQLParser.FOLLOWING:
                case YQLParser.FOR:
                case YQLParser.FOREIGN:
                case YQLParser.FROM:
                case YQLParser.FULL:
                case YQLParser.FUNCTION:
                case YQLParser.GLOB:
                case YQLParser.GRANT:
                case YQLParser.GROUP:
                case YQLParser.GROUPING:
                case YQLParser.GROUPS:
                case YQLParser.HASH:
                case YQLParser.HAVING:
                case YQLParser.HOP:
                case YQLParser.IF:
                case YQLParser.IGNORE:
                case YQLParser.ILIKE:
                case YQLParser.IMMEDIATE:
                case YQLParser.IMPORT:
                case YQLParser.IN:
                case YQLParser.INCREMENTAL:
                case YQLParser.INDEX:
                case YQLParser.INDEXED:
                case YQLParser.INHERITS:
                case YQLParser.INITIAL:
                case YQLParser.INITIALLY:
                case YQLParser.INNER:
                case YQLParser.INSERT:
                case YQLParser.INSTEAD:
                case YQLParser.INTERSECT:
                case YQLParser.INTO:
                case YQLParser.IS:
                case YQLParser.ISNULL:
                case YQLParser.JOIN:
                case YQLParser.JSON_EXISTS:
                case YQLParser.JSON_QUERY:
                case YQLParser.JSON_VALUE:
                case YQLParser.KEY:
                case YQLParser.LAST:
                case YQLParser.LEFT:
                case YQLParser.LEGACY:
                case YQLParser.LIKE:
                case YQLParser.LIMIT:
                case YQLParser.LIST:
                case YQLParser.LOCAL:
                case YQLParser.MANAGE:
                case YQLParser.MATCH:
                case YQLParser.MATCHES:
                case YQLParser.MATCH_RECOGNIZE:
                case YQLParser.MEASURES:
                case YQLParser.MICROSECONDS:
                case YQLParser.MILLISECONDS:
                case YQLParser.MODIFY:
                case YQLParser.NANOSECONDS:
                case YQLParser.NATURAL:
                case YQLParser.NEXT:
                case YQLParser.NO:
                case YQLParser.NOT:
                case YQLParser.NOTNULL:
                case YQLParser.NULL:
                case YQLParser.NULLS:
                case YQLParser.OBJECT:
                case YQLParser.OF:
                case YQLParser.OFFSET:
                case YQLParser.OMIT:
                case YQLParser.ON:
                case YQLParser.ONE:
                case YQLParser.ONLY:
                case YQLParser.OPTION:
                case YQLParser.OPTIONAL:
                case YQLParser.OR:
                case YQLParser.ORDER:
                case YQLParser.OTHERS:
                case YQLParser.OUTER:
                case YQLParser.OVER:
                case YQLParser.PARALLEL:
                case YQLParser.PARTITION:
                case YQLParser.PASSING:
                case YQLParser.PASSWORD:
                case YQLParser.PAST:
                case YQLParser.PATTERN:
                case YQLParser.PER:
                case YQLParser.PERMUTE:
                case YQLParser.PLAN:
                case YQLParser.POOL:
                case YQLParser.PRAGMA:
                case YQLParser.PRECEDING:
                case YQLParser.PRESORT:
                case YQLParser.PRIMARY:
                case YQLParser.PRIVILEGES:
                case YQLParser.PROCESS:
                case YQLParser.QUEUE:
                case YQLParser.RAISE:
                case YQLParser.RANGE:
                case YQLParser.REDUCE:
                case YQLParser.REFERENCES:
                case YQLParser.REGEXP:
                case YQLParser.REINDEX:
                case YQLParser.RELEASE:
                case YQLParser.REMOVE:
                case YQLParser.RENAME:
                case YQLParser.REPLACE:
                case YQLParser.REPLICATION:
                case YQLParser.RESET:
                case YQLParser.RESOURCE:
                case YQLParser.RESPECT:
                case YQLParser.RESTORE:
                case YQLParser.RESTRICT:
                case YQLParser.RESULT:
                case YQLParser.RETURN:
                case YQLParser.RETURNING:
                case YQLParser.REVERT:
                case YQLParser.REVOKE:
                case YQLParser.RIGHT:
                case YQLParser.RLIKE:
                case YQLParser.ROLLBACK:
                case YQLParser.ROLLUP:
                case YQLParser.ROW:
                case YQLParser.ROWS:
                case YQLParser.SAMPLE:
                case YQLParser.SAVEPOINT:
                case YQLParser.SCHEMA:
                case YQLParser.SECONDS:
                case YQLParser.SEEK:
                case YQLParser.SELECT:
                case YQLParser.SEMI:
                case YQLParser.SET:
                case YQLParser.SETS:
                case YQLParser.SHOW:
                case YQLParser.TSKIP:
                case YQLParser.SOURCE:
                case YQLParser.STREAM:
                case YQLParser.STRUCT:
                case YQLParser.SUBQUERY:
                case YQLParser.SUBSET:
                case YQLParser.SYMBOLS:
                case YQLParser.SYMMETRIC:
                case YQLParser.SYNC:
                case YQLParser.SYSTEM:
                case YQLParser.TABLE:
                case YQLParser.TABLES:
                case YQLParser.TABLESAMPLE:
                case YQLParser.TABLESTORE:
                case YQLParser.TAGGED:
                case YQLParser.TEMP:
                case YQLParser.TEMPORARY:
                case YQLParser.THEN:
                case YQLParser.TIES:
                case YQLParser.TO:
                case YQLParser.TOPIC:
                case YQLParser.TRANSACTION:
                case YQLParser.TRIGGER:
                case YQLParser.TUPLE:
                case YQLParser.TYPE:
                case YQLParser.UNBOUNDED:
                case YQLParser.UNCONDITIONAL:
                case YQLParser.UNION:
                case YQLParser.UNIQUE:
                case YQLParser.UNKNOWN:
                case YQLParser.UNMATCHED:
                case YQLParser.UPDATE:
                case YQLParser.UPSERT:
                case YQLParser.USE:
                case YQLParser.USER:
                case YQLParser.USING:
                case YQLParser.VACUUM:
                case YQLParser.VALUES:
                case YQLParser.VARIANT:
                case YQLParser.VIEW:
                case YQLParser.VIRTUAL:
                case YQLParser.WHEN:
                case YQLParser.WHERE:
                case YQLParser.WINDOW:
                case YQLParser.WITH:
                case YQLParser.WITHOUT:
                case YQLParser.WRAPPER:
                case YQLParser.XOR:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 1281;
                    this.id_or_type();
                    }
                    break;
                case YQLParser.STRING_VALUE:
                    {
                    this.state = 1282;
                    this.match(YQLParser.STRING_VALUE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1285;
                this.value_constructor();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1286;
                this.bitcast_expr();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1287;
                this.list_literal();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1288;
                this.dict_literal();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1289;
                this.struct_literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_atom_expr(): In_atom_exprContext {
        let localContext = new In_atom_exprContext(this.context, this.state);
        this.enterRule(localContext, 70, YQLParser.RULE_in_atom_expr);
        try {
            this.state = 1312;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 61, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1292;
                this.literal_value();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1293;
                this.bind_parameter();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1294;
                this.lambda();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1295;
                this.cast_expr();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1296;
                this.case_expr();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1297;
                this.an_id_or_type();
                this.state = 1298;
                this.match(YQLParser.NAMESPACE);
                this.state = 1301;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.ABORT:
                case YQLParser.ACTION:
                case YQLParser.ADD:
                case YQLParser.AFTER:
                case YQLParser.ALL:
                case YQLParser.ALTER:
                case YQLParser.ANALYZE:
                case YQLParser.AND:
                case YQLParser.ANSI:
                case YQLParser.ANY:
                case YQLParser.ARRAY:
                case YQLParser.AS:
                case YQLParser.ASC:
                case YQLParser.ASSUME:
                case YQLParser.ASYMMETRIC:
                case YQLParser.ASYNC:
                case YQLParser.AT:
                case YQLParser.ATTACH:
                case YQLParser.ATTRIBUTES:
                case YQLParser.AUTOINCREMENT:
                case YQLParser.BACKUP:
                case YQLParser.COLLECTION:
                case YQLParser.BEFORE:
                case YQLParser.BEGIN:
                case YQLParser.BERNOULLI:
                case YQLParser.BETWEEN:
                case YQLParser.BITCAST:
                case YQLParser.BY:
                case YQLParser.CALLABLE:
                case YQLParser.CASCADE:
                case YQLParser.CASE:
                case YQLParser.CAST:
                case YQLParser.CHANGEFEED:
                case YQLParser.CHECK:
                case YQLParser.CLASSIFIER:
                case YQLParser.COLLATE:
                case YQLParser.COLUMN:
                case YQLParser.COLUMNS:
                case YQLParser.COMMIT:
                case YQLParser.COMPACT:
                case YQLParser.CONDITIONAL:
                case YQLParser.CONFLICT:
                case YQLParser.CONNECT:
                case YQLParser.CONSTRAINT:
                case YQLParser.CONSUMER:
                case YQLParser.COVER:
                case YQLParser.CREATE:
                case YQLParser.CROSS:
                case YQLParser.CUBE:
                case YQLParser.CURRENT:
                case YQLParser.CURRENT_DATE:
                case YQLParser.CURRENT_TIME:
                case YQLParser.CURRENT_TIMESTAMP:
                case YQLParser.DATA:
                case YQLParser.DATABASE:
                case YQLParser.DECIMAL:
                case YQLParser.DECLARE:
                case YQLParser.DEFAULT:
                case YQLParser.DEFERRABLE:
                case YQLParser.DEFERRED:
                case YQLParser.DEFINE:
                case YQLParser.DELETE:
                case YQLParser.DESC:
                case YQLParser.DESCRIBE:
                case YQLParser.DETACH:
                case YQLParser.DICT:
                case YQLParser.DIRECTORY:
                case YQLParser.DISABLE:
                case YQLParser.DISCARD:
                case YQLParser.DISTINCT:
                case YQLParser.DO:
                case YQLParser.DROP:
                case YQLParser.EACH:
                case YQLParser.ELSE:
                case YQLParser.EMPTY:
                case YQLParser.EMPTY_ACTION:
                case YQLParser.ENCRYPTED:
                case YQLParser.END:
                case YQLParser.ENUM:
                case YQLParser.ERASE:
                case YQLParser.ERROR:
                case YQLParser.ESCAPE:
                case YQLParser.EVALUATE:
                case YQLParser.EXCEPT:
                case YQLParser.EXCLUDE:
                case YQLParser.EXCLUSION:
                case YQLParser.EXCLUSIVE:
                case YQLParser.EXISTS:
                case YQLParser.EXPLAIN:
                case YQLParser.EXPORT:
                case YQLParser.EXTERNAL:
                case YQLParser.FAIL:
                case YQLParser.FAMILY:
                case YQLParser.FILTER:
                case YQLParser.FIRST:
                case YQLParser.FLATTEN:
                case YQLParser.FLOW:
                case YQLParser.FOLLOWING:
                case YQLParser.FOR:
                case YQLParser.FOREIGN:
                case YQLParser.FROM:
                case YQLParser.FULL:
                case YQLParser.FUNCTION:
                case YQLParser.GLOB:
                case YQLParser.GRANT:
                case YQLParser.GROUP:
                case YQLParser.GROUPING:
                case YQLParser.GROUPS:
                case YQLParser.HASH:
                case YQLParser.HAVING:
                case YQLParser.HOP:
                case YQLParser.IF:
                case YQLParser.IGNORE:
                case YQLParser.ILIKE:
                case YQLParser.IMMEDIATE:
                case YQLParser.IMPORT:
                case YQLParser.IN:
                case YQLParser.INCREMENTAL:
                case YQLParser.INDEX:
                case YQLParser.INDEXED:
                case YQLParser.INHERITS:
                case YQLParser.INITIAL:
                case YQLParser.INITIALLY:
                case YQLParser.INNER:
                case YQLParser.INSERT:
                case YQLParser.INSTEAD:
                case YQLParser.INTERSECT:
                case YQLParser.INTO:
                case YQLParser.IS:
                case YQLParser.ISNULL:
                case YQLParser.JOIN:
                case YQLParser.JSON_EXISTS:
                case YQLParser.JSON_QUERY:
                case YQLParser.JSON_VALUE:
                case YQLParser.KEY:
                case YQLParser.LAST:
                case YQLParser.LEFT:
                case YQLParser.LEGACY:
                case YQLParser.LIKE:
                case YQLParser.LIMIT:
                case YQLParser.LIST:
                case YQLParser.LOCAL:
                case YQLParser.MANAGE:
                case YQLParser.MATCH:
                case YQLParser.MATCHES:
                case YQLParser.MATCH_RECOGNIZE:
                case YQLParser.MEASURES:
                case YQLParser.MICROSECONDS:
                case YQLParser.MILLISECONDS:
                case YQLParser.MODIFY:
                case YQLParser.NANOSECONDS:
                case YQLParser.NATURAL:
                case YQLParser.NEXT:
                case YQLParser.NO:
                case YQLParser.NOT:
                case YQLParser.NOTNULL:
                case YQLParser.NULL:
                case YQLParser.NULLS:
                case YQLParser.OBJECT:
                case YQLParser.OF:
                case YQLParser.OFFSET:
                case YQLParser.OMIT:
                case YQLParser.ON:
                case YQLParser.ONE:
                case YQLParser.ONLY:
                case YQLParser.OPTION:
                case YQLParser.OPTIONAL:
                case YQLParser.OR:
                case YQLParser.ORDER:
                case YQLParser.OTHERS:
                case YQLParser.OUTER:
                case YQLParser.OVER:
                case YQLParser.PARALLEL:
                case YQLParser.PARTITION:
                case YQLParser.PASSING:
                case YQLParser.PASSWORD:
                case YQLParser.PAST:
                case YQLParser.PATTERN:
                case YQLParser.PER:
                case YQLParser.PERMUTE:
                case YQLParser.PLAN:
                case YQLParser.POOL:
                case YQLParser.PRAGMA:
                case YQLParser.PRECEDING:
                case YQLParser.PRESORT:
                case YQLParser.PRIMARY:
                case YQLParser.PRIVILEGES:
                case YQLParser.PROCESS:
                case YQLParser.QUEUE:
                case YQLParser.RAISE:
                case YQLParser.RANGE:
                case YQLParser.REDUCE:
                case YQLParser.REFERENCES:
                case YQLParser.REGEXP:
                case YQLParser.REINDEX:
                case YQLParser.RELEASE:
                case YQLParser.REMOVE:
                case YQLParser.RENAME:
                case YQLParser.REPLACE:
                case YQLParser.REPLICATION:
                case YQLParser.RESET:
                case YQLParser.RESOURCE:
                case YQLParser.RESPECT:
                case YQLParser.RESTORE:
                case YQLParser.RESTRICT:
                case YQLParser.RESULT:
                case YQLParser.RETURN:
                case YQLParser.RETURNING:
                case YQLParser.REVERT:
                case YQLParser.REVOKE:
                case YQLParser.RIGHT:
                case YQLParser.RLIKE:
                case YQLParser.ROLLBACK:
                case YQLParser.ROLLUP:
                case YQLParser.ROW:
                case YQLParser.ROWS:
                case YQLParser.SAMPLE:
                case YQLParser.SAVEPOINT:
                case YQLParser.SCHEMA:
                case YQLParser.SECONDS:
                case YQLParser.SEEK:
                case YQLParser.SELECT:
                case YQLParser.SEMI:
                case YQLParser.SET:
                case YQLParser.SETS:
                case YQLParser.SHOW:
                case YQLParser.TSKIP:
                case YQLParser.SOURCE:
                case YQLParser.STREAM:
                case YQLParser.STRUCT:
                case YQLParser.SUBQUERY:
                case YQLParser.SUBSET:
                case YQLParser.SYMBOLS:
                case YQLParser.SYMMETRIC:
                case YQLParser.SYNC:
                case YQLParser.SYSTEM:
                case YQLParser.TABLE:
                case YQLParser.TABLES:
                case YQLParser.TABLESAMPLE:
                case YQLParser.TABLESTORE:
                case YQLParser.TAGGED:
                case YQLParser.TEMP:
                case YQLParser.TEMPORARY:
                case YQLParser.THEN:
                case YQLParser.TIES:
                case YQLParser.TO:
                case YQLParser.TOPIC:
                case YQLParser.TRANSACTION:
                case YQLParser.TRIGGER:
                case YQLParser.TUPLE:
                case YQLParser.TYPE:
                case YQLParser.UNBOUNDED:
                case YQLParser.UNCONDITIONAL:
                case YQLParser.UNION:
                case YQLParser.UNIQUE:
                case YQLParser.UNKNOWN:
                case YQLParser.UNMATCHED:
                case YQLParser.UPDATE:
                case YQLParser.UPSERT:
                case YQLParser.USE:
                case YQLParser.USER:
                case YQLParser.USING:
                case YQLParser.VACUUM:
                case YQLParser.VALUES:
                case YQLParser.VARIANT:
                case YQLParser.VIEW:
                case YQLParser.VIRTUAL:
                case YQLParser.WHEN:
                case YQLParser.WHERE:
                case YQLParser.WINDOW:
                case YQLParser.WITH:
                case YQLParser.WITHOUT:
                case YQLParser.WRAPPER:
                case YQLParser.XOR:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 1299;
                    this.id_or_type();
                    }
                    break;
                case YQLParser.STRING_VALUE:
                    {
                    this.state = 1300;
                    this.match(YQLParser.STRING_VALUE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1303;
                this.match(YQLParser.LPAREN);
                this.state = 1304;
                this.select_stmt();
                this.state = 1305;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1307;
                this.value_constructor();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1308;
                this.bitcast_expr();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1309;
                this.list_literal();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1310;
                this.dict_literal();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1311;
                this.struct_literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cast_expr(): Cast_exprContext {
        let localContext = new Cast_exprContext(this.context, this.state);
        this.enterRule(localContext, 72, YQLParser.RULE_cast_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1314;
            this.match(YQLParser.CAST);
            this.state = 1315;
            this.match(YQLParser.LPAREN);
            this.state = 1316;
            this.expr();
            this.state = 1317;
            this.match(YQLParser.AS);
            this.state = 1318;
            this.type_name_or_bind();
            this.state = 1319;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bitcast_expr(): Bitcast_exprContext {
        let localContext = new Bitcast_exprContext(this.context, this.state);
        this.enterRule(localContext, 74, YQLParser.RULE_bitcast_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1321;
            this.match(YQLParser.BITCAST);
            this.state = 1322;
            this.match(YQLParser.LPAREN);
            this.state = 1323;
            this.expr();
            this.state = 1324;
            this.match(YQLParser.AS);
            this.state = 1325;
            this.type_name_simple();
            this.state = 1326;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exists_expr(): Exists_exprContext {
        let localContext = new Exists_exprContext(this.context, this.state);
        this.enterRule(localContext, 76, YQLParser.RULE_exists_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1328;
            this.match(YQLParser.EXISTS);
            this.state = 1329;
            this.match(YQLParser.LPAREN);
            this.state = 1332;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LPAREN:
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                {
                this.state = 1330;
                this.select_stmt();
                }
                break;
            case YQLParser.VALUES:
                {
                this.state = 1331;
                this.values_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1334;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public case_expr(): Case_exprContext {
        let localContext = new Case_exprContext(this.context, this.state);
        this.enterRule(localContext, 78, YQLParser.RULE_case_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1336;
            this.match(YQLParser.CASE);
            this.state = 1338;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 63, this.context) ) {
            case 1:
                {
                this.state = 1337;
                this.expr();
                }
                break;
            }
            this.state = 1341;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1340;
                this.when_expr();
                }
                }
                this.state = 1343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 312);
            this.state = 1347;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 114) {
                {
                this.state = 1345;
                this.match(YQLParser.ELSE);
                this.state = 1346;
                this.expr();
                }
            }

            this.state = 1349;
            this.match(YQLParser.END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lambda(): LambdaContext {
        let localContext = new LambdaContext(this.context, this.state);
        this.enterRule(localContext, 80, YQLParser.RULE_lambda);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1351;
            this.smart_parenthesis();
            this.state = 1363;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 37) {
                {
                this.state = 1352;
                this.match(YQLParser.ARROW);
                this.state = 1361;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.LPAREN:
                    {
                    this.state = 1353;
                    this.match(YQLParser.LPAREN);
                    this.state = 1354;
                    this.expr();
                    this.state = 1355;
                    this.match(YQLParser.RPAREN);
                    }
                    break;
                case YQLParser.LBRACE_CURLY:
                    {
                    this.state = 1357;
                    this.match(YQLParser.LBRACE_CURLY);
                    this.state = 1358;
                    this.lambda_body();
                    this.state = 1359;
                    this.match(YQLParser.RBRACE_CURLY);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_expr(): In_exprContext {
        let localContext = new In_exprContext(this.context, this.state);
        this.enterRule(localContext, 82, YQLParser.RULE_in_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1365;
            this.in_unary_subexpr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_api_expr(): Json_api_exprContext {
        let localContext = new Json_api_exprContext(this.context, this.state);
        this.enterRule(localContext, 84, YQLParser.RULE_json_api_expr);
        try {
            this.state = 1370;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.JSON_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1367;
                this.json_value();
                }
                break;
            case YQLParser.JSON_EXISTS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1368;
                this.json_exists();
                }
                break;
            case YQLParser.JSON_QUERY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1369;
                this.json_query();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonpath_spec(): Jsonpath_specContext {
        let localContext = new Jsonpath_specContext(this.context, this.state);
        this.enterRule(localContext, 86, YQLParser.RULE_jsonpath_spec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1372;
            this.match(YQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_variable_name(): Json_variable_nameContext {
        let localContext = new Json_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 88, YQLParser.RULE_json_variable_name);
        try {
            this.state = 1376;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1374;
                this.id_expr();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1375;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_variable(): Json_variableContext {
        let localContext = new Json_variableContext(this.context, this.state);
        this.enterRule(localContext, 90, YQLParser.RULE_json_variable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1378;
            this.expr();
            this.state = 1379;
            this.match(YQLParser.AS);
            this.state = 1380;
            this.json_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_variables(): Json_variablesContext {
        let localContext = new Json_variablesContext(this.context, this.state);
        this.enterRule(localContext, 92, YQLParser.RULE_json_variables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1382;
            this.json_variable();
            this.state = 1387;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1383;
                this.match(YQLParser.COMMA);
                this.state = 1384;
                this.json_variable();
                }
                }
                this.state = 1389;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_common_args(): Json_common_argsContext {
        let localContext = new Json_common_argsContext(this.context, this.state);
        this.enterRule(localContext, 94, YQLParser.RULE_json_common_args);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1390;
            this.expr();
            this.state = 1391;
            this.match(YQLParser.COMMA);
            this.state = 1392;
            this.jsonpath_spec();
            this.state = 1395;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 217) {
                {
                this.state = 1393;
                this.match(YQLParser.PASSING);
                this.state = 1394;
                this.json_variables();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_case_handler(): Json_case_handlerContext {
        let localContext = new Json_case_handlerContext(this.context, this.state);
        this.enterRule(localContext, 96, YQLParser.RULE_json_case_handler);
        try {
            this.state = 1401;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ERROR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1397;
                this.match(YQLParser.ERROR);
                }
                break;
            case YQLParser.NULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1398;
                this.match(YQLParser.NULL);
                }
                break;
            case YQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1399;
                this.match(YQLParser.DEFAULT);
                this.state = 1400;
                this.expr();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_value(): Json_valueContext {
        let localContext = new Json_valueContext(this.context, this.state);
        this.enterRule(localContext, 98, YQLParser.RULE_json_value);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1403;
            this.match(YQLParser.JSON_VALUE);
            this.state = 1404;
            this.match(YQLParser.LPAREN);
            this.state = 1405;
            this.json_common_args();
            this.state = 1408;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251) {
                {
                this.state = 1406;
                this.match(YQLParser.RETURNING);
                this.state = 1407;
                this.type_name_simple();
                }
            }

            this.state = 1416;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 98 || _la === 121 || _la === 199) {
                {
                {
                this.state = 1410;
                this.json_case_handler();
                this.state = 1411;
                this.match(YQLParser.ON);
                this.state = 1412;
                _la = this.tokenStream.LA(1);
                if(!(_la === 115 || _la === 121)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                }
                this.state = 1418;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1419;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_exists_handler(): Json_exists_handlerContext {
        let localContext = new Json_exists_handlerContext(this.context, this.state);
        this.enterRule(localContext, 100, YQLParser.RULE_json_exists_handler);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1421;
            _la = this.tokenStream.LA(1);
            if(!(_la === 121 || _la === 133 || _la === 293 || _la === 300)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1422;
            this.match(YQLParser.ON);
            this.state = 1423;
            this.match(YQLParser.ERROR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_exists(): Json_existsContext {
        let localContext = new Json_existsContext(this.context, this.state);
        this.enterRule(localContext, 102, YQLParser.RULE_json_exists);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1425;
            this.match(YQLParser.JSON_EXISTS);
            this.state = 1426;
            this.match(YQLParser.LPAREN);
            this.state = 1427;
            this.json_common_args();
            this.state = 1429;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 121 || _la === 133 || _la === 293 || _la === 300) {
                {
                this.state = 1428;
                this.json_exists_handler();
                }
            }

            this.state = 1431;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_query_wrapper(): Json_query_wrapperContext {
        let localContext = new Json_query_wrapperContext(this.context, this.state);
        this.enterRule(localContext, 104, YQLParser.RULE_json_query_wrapper);
        let _la: number;
        try {
            this.state = 1444;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1433;
                this.match(YQLParser.WITHOUT);
                this.state = 1435;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 50) {
                    {
                    this.state = 1434;
                    this.match(YQLParser.ARRAY);
                    }
                }

                }
                break;
            case YQLParser.WITH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1437;
                this.match(YQLParser.WITH);
                this.state = 1439;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81 || _la === 297) {
                    {
                    this.state = 1438;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 81 || _la === 297)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1442;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 50) {
                    {
                    this.state = 1441;
                    this.match(YQLParser.ARRAY);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_query_handler(): Json_query_handlerContext {
        let localContext = new Json_query_handlerContext(this.context, this.state);
        this.enterRule(localContext, 106, YQLParser.RULE_json_query_handler);
        try {
            this.state = 1452;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 80, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1446;
                this.match(YQLParser.ERROR);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1447;
                this.match(YQLParser.NULL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1448;
                this.match(YQLParser.EMPTY);
                this.state = 1449;
                this.match(YQLParser.ARRAY);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1450;
                this.match(YQLParser.EMPTY);
                this.state = 1451;
                this.match(YQLParser.OBJECT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_query(): Json_queryContext {
        let localContext = new Json_queryContext(this.context, this.state);
        this.enterRule(localContext, 108, YQLParser.RULE_json_query);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1454;
            this.match(YQLParser.JSON_QUERY);
            this.state = 1455;
            this.match(YQLParser.LPAREN);
            this.state = 1456;
            this.json_common_args();
            this.state = 1460;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315 || _la === 316) {
                {
                this.state = 1457;
                this.json_query_wrapper();
                this.state = 1458;
                this.match(YQLParser.WRAPPER);
                }
            }

            this.state = 1466;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 82, this.context) ) {
            case 1:
                {
                this.state = 1462;
                this.json_query_handler();
                this.state = 1463;
                this.match(YQLParser.ON);
                this.state = 1464;
                this.match(YQLParser.EMPTY);
                }
                break;
            }
            this.state = 1472;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 115 || _la === 121 || _la === 199) {
                {
                this.state = 1468;
                this.json_query_handler();
                this.state = 1469;
                this.match(YQLParser.ON);
                this.state = 1470;
                this.match(YQLParser.ERROR);
                }
            }

            this.state = 1474;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public smart_parenthesis(): Smart_parenthesisContext {
        let localContext = new Smart_parenthesisContext(this.context, this.state);
        this.enterRule(localContext, 110, YQLParser.RULE_smart_parenthesis);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1476;
            this.match(YQLParser.LPAREN);
            this.state = 1478;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4278585373) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294959103) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 239)) & ~0x1F) === 0 && ((1 << (_la - 239)) & 4294967291) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 4294967295) !== 0) || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & 8388607) !== 0)) {
                {
                this.state = 1477;
                this.named_expr_list();
                }
            }

            this.state = 1481;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1480;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1483;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_list(): Expr_listContext {
        let localContext = new Expr_listContext(this.context, this.state);
        this.enterRule(localContext, 112, YQLParser.RULE_expr_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1485;
            this.expr();
            this.state = 1490;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 86, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1486;
                    this.match(YQLParser.COMMA);
                    this.state = 1487;
                    this.expr();
                    }
                    }
                }
                this.state = 1492;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 86, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pure_column_list(): Pure_column_listContext {
        let localContext = new Pure_column_listContext(this.context, this.state);
        this.enterRule(localContext, 114, YQLParser.RULE_pure_column_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1493;
            this.match(YQLParser.LPAREN);
            this.state = 1494;
            this.an_id();
            this.state = 1499;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1495;
                this.match(YQLParser.COMMA);
                this.state = 1496;
                this.an_id();
                }
                }
                this.state = 1501;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1502;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pure_column_or_named(): Pure_column_or_namedContext {
        let localContext = new Pure_column_or_namedContext(this.context, this.state);
        this.enterRule(localContext, 116, YQLParser.RULE_pure_column_or_named);
        try {
            this.state = 1506;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1504;
                this.bind_parameter();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1505;
                this.an_id();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pure_column_or_named_list(): Pure_column_or_named_listContext {
        let localContext = new Pure_column_or_named_listContext(this.context, this.state);
        this.enterRule(localContext, 118, YQLParser.RULE_pure_column_or_named_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1508;
            this.match(YQLParser.LPAREN);
            this.state = 1509;
            this.pure_column_or_named();
            this.state = 1514;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1510;
                this.match(YQLParser.COMMA);
                this.state = 1511;
                this.pure_column_or_named();
                }
                }
                this.state = 1516;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1517;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_name(): Column_nameContext {
        let localContext = new Column_nameContext(this.context, this.state);
        this.enterRule(localContext, 120, YQLParser.RULE_column_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1519;
            this.opt_id_prefix();
            this.state = 1520;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public without_column_name(): Without_column_nameContext {
        let localContext = new Without_column_nameContext(this.context, this.state);
        this.enterRule(localContext, 122, YQLParser.RULE_without_column_name);
        try {
            this.state = 1527;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 90, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1522;
                this.an_id();
                this.state = 1523;
                this.match(YQLParser.DOT);
                this.state = 1524;
                this.an_id();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1526;
                this.an_id_without();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_list(): Column_listContext {
        let localContext = new Column_listContext(this.context, this.state);
        this.enterRule(localContext, 124, YQLParser.RULE_column_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1529;
            this.column_name();
            this.state = 1534;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 91, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1530;
                    this.match(YQLParser.COMMA);
                    this.state = 1531;
                    this.column_name();
                    }
                    }
                }
                this.state = 1536;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 91, this.context);
            }
            this.state = 1538;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1537;
                this.match(YQLParser.COMMA);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public without_column_list(): Without_column_listContext {
        let localContext = new Without_column_listContext(this.context, this.state);
        this.enterRule(localContext, 126, YQLParser.RULE_without_column_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1540;
            this.without_column_name();
            this.state = 1545;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 93, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1541;
                    this.match(YQLParser.COMMA);
                    this.state = 1542;
                    this.without_column_name();
                    }
                    }
                }
                this.state = 1547;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 93, this.context);
            }
            this.state = 1549;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1548;
                this.match(YQLParser.COMMA);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_expr(): Named_exprContext {
        let localContext = new Named_exprContext(this.context, this.state);
        this.enterRule(localContext, 128, YQLParser.RULE_named_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1551;
            this.expr();
            this.state = 1554;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 1552;
                this.match(YQLParser.AS);
                this.state = 1553;
                this.an_id_or_type();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_expr_list(): Named_expr_listContext {
        let localContext = new Named_expr_listContext(this.context, this.state);
        this.enterRule(localContext, 130, YQLParser.RULE_named_expr_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1556;
            this.named_expr();
            this.state = 1561;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 96, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1557;
                    this.match(YQLParser.COMMA);
                    this.state = 1558;
                    this.named_expr();
                    }
                    }
                }
                this.state = 1563;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 96, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public invoke_expr(): Invoke_exprContext {
        let localContext = new Invoke_exprContext(this.context, this.state);
        this.enterRule(localContext, 132, YQLParser.RULE_invoke_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1564;
            this.match(YQLParser.LPAREN);
            this.state = 1571;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.STRUCT_OPEN:
            case YQLParser.PLUS:
            case YQLParser.MINUS:
            case YQLParser.TILDA:
            case YQLParser.LPAREN:
            case YQLParser.DOLLAR:
            case YQLParser.LBRACE_CURLY:
            case YQLParser.LBRACE_SQUARE:
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FALSE:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TRUE:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
            case YQLParser.REAL:
            case YQLParser.BLOB:
                {
                this.state = 1565;
                this.opt_set_quantifier();
                this.state = 1566;
                this.named_expr_list();
                this.state = 1568;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 1567;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
                break;
            case YQLParser.ASTERISK:
                {
                this.state = 1570;
                this.match(YQLParser.ASTERISK);
                }
                break;
            case YQLParser.RPAREN:
                break;
            default:
                break;
            }
            this.state = 1573;
            this.match(YQLParser.RPAREN);
            this.state = 1574;
            this.invoke_expr_tail();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public invoke_expr_tail(): Invoke_expr_tailContext {
        let localContext = new Invoke_expr_tailContext(this.context, this.state);
        this.enterRule(localContext, 134, YQLParser.RULE_invoke_expr_tail);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1578;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 99, this.context) ) {
            case 1:
                {
                this.state = 1576;
                this.null_treatment();
                }
                break;
            case 2:
                {
                this.state = 1577;
                this.filter_clause();
                }
                break;
            }
            this.state = 1582;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 214) {
                {
                this.state = 1580;
                this.match(YQLParser.OVER);
                this.state = 1581;
                this.window_name_or_specification();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public using_call_expr(): Using_call_exprContext {
        let localContext = new Using_call_exprContext(this.context, this.state);
        this.enterRule(localContext, 136, YQLParser.RULE_using_call_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1592;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 101, this.context) ) {
            case 1:
                {
                this.state = 1584;
                this.an_id_or_type();
                this.state = 1585;
                this.match(YQLParser.NAMESPACE);
                this.state = 1586;
                this.an_id_or_type();
                }
                break;
            case 2:
                {
                this.state = 1588;
                this.an_id_expr();
                }
                break;
            case 3:
                {
                this.state = 1589;
                this.bind_parameter();
                }
                break;
            case 4:
                {
                this.state = 1590;
                this.match(YQLParser.EXTERNAL);
                this.state = 1591;
                this.match(YQLParser.FUNCTION);
                }
                break;
            }
            this.state = 1594;
            this.invoke_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_expr(): Key_exprContext {
        let localContext = new Key_exprContext(this.context, this.state);
        this.enterRule(localContext, 138, YQLParser.RULE_key_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1596;
            this.match(YQLParser.LBRACE_SQUARE);
            this.state = 1597;
            this.expr();
            this.state = 1598;
            this.match(YQLParser.RBRACE_SQUARE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public when_expr(): When_exprContext {
        let localContext = new When_exprContext(this.context, this.state);
        this.enterRule(localContext, 140, YQLParser.RULE_when_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1600;
            this.match(YQLParser.WHEN);
            this.state = 1601;
            this.expr();
            this.state = 1602;
            this.match(YQLParser.THEN);
            this.state = 1603;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literal_value(): Literal_valueContext {
        let localContext = new Literal_valueContext(this.context, this.state);
        this.enterRule(localContext, 142, YQLParser.RULE_literal_value);
        try {
            this.state = 1615;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1605;
                this.integer();
                }
                break;
            case YQLParser.REAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1606;
                this.real();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1607;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.BLOB:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1608;
                this.match(YQLParser.BLOB);
                }
                break;
            case YQLParser.NULL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1609;
                this.match(YQLParser.NULL);
                }
                break;
            case YQLParser.CURRENT_TIME:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1610;
                this.match(YQLParser.CURRENT_TIME);
                }
                break;
            case YQLParser.CURRENT_DATE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1611;
                this.match(YQLParser.CURRENT_DATE);
                }
                break;
            case YQLParser.CURRENT_TIMESTAMP:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1612;
                this.match(YQLParser.CURRENT_TIMESTAMP);
                }
                break;
            case YQLParser.FALSE:
            case YQLParser.TRUE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1613;
                this.bool_value();
                }
                break;
            case YQLParser.EMPTY_ACTION:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1614;
                this.match(YQLParser.EMPTY_ACTION);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bind_parameter(): Bind_parameterContext {
        let localContext = new Bind_parameterContext(this.context, this.state);
        this.enterRule(localContext, 144, YQLParser.RULE_bind_parameter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1617;
            this.match(YQLParser.DOLLAR);
            this.state = 1621;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 1618;
                this.an_id_or_type();
                }
                break;
            case YQLParser.TRUE:
                {
                this.state = 1619;
                this.match(YQLParser.TRUE);
                }
                break;
            case YQLParser.FALSE:
                {
                this.state = 1620;
                this.match(YQLParser.FALSE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_bind_parameter(): Opt_bind_parameterContext {
        let localContext = new Opt_bind_parameterContext(this.context, this.state);
        this.enterRule(localContext, 146, YQLParser.RULE_opt_bind_parameter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1623;
            this.bind_parameter();
            this.state = 1625;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 28) {
                {
                this.state = 1624;
                this.match(YQLParser.QUESTION);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bind_parameter_list(): Bind_parameter_listContext {
        let localContext = new Bind_parameter_listContext(this.context, this.state);
        this.enterRule(localContext, 148, YQLParser.RULE_bind_parameter_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1627;
            this.bind_parameter();
            this.state = 1632;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1628;
                this.match(YQLParser.COMMA);
                this.state = 1629;
                this.bind_parameter();
                }
                }
                this.state = 1634;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_bind_parameter(): Named_bind_parameterContext {
        let localContext = new Named_bind_parameterContext(this.context, this.state);
        this.enterRule(localContext, 150, YQLParser.RULE_named_bind_parameter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1635;
            this.bind_parameter();
            this.state = 1638;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 1636;
                this.match(YQLParser.AS);
                this.state = 1637;
                this.bind_parameter();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_bind_parameter_list(): Named_bind_parameter_listContext {
        let localContext = new Named_bind_parameter_listContext(this.context, this.state);
        this.enterRule(localContext, 152, YQLParser.RULE_named_bind_parameter_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1640;
            this.named_bind_parameter();
            this.state = 1645;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1641;
                this.match(YQLParser.COMMA);
                this.state = 1642;
                this.named_bind_parameter();
                }
                }
                this.state = 1647;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signed_number(): Signed_numberContext {
        let localContext = new Signed_numberContext(this.context, this.state);
        this.enterRule(localContext, 154, YQLParser.RULE_signed_number);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1649;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17 || _la === 18) {
                {
                this.state = 1648;
                _la = this.tokenStream.LA(1);
                if(!(_la === 17 || _la === 18)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1653;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                {
                this.state = 1651;
                this.integer();
                }
                break;
            case YQLParser.REAL:
                {
                this.state = 1652;
                this.real();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_simple(): Type_name_simpleContext {
        let localContext = new Type_name_simpleContext(this.context, this.state);
        this.enterRule(localContext, 156, YQLParser.RULE_type_name_simple);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1655;
            this.an_id_pure();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public integer_or_bind(): Integer_or_bindContext {
        let localContext = new Integer_or_bindContext(this.context, this.state);
        this.enterRule(localContext, 158, YQLParser.RULE_integer_or_bind);
        try {
            this.state = 1659;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1657;
                this.integer();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1658;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_tag(): Type_name_tagContext {
        let localContext = new Type_name_tagContext(this.context, this.state);
        this.enterRule(localContext, 160, YQLParser.RULE_type_name_tag);
        try {
            this.state = 1664;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1661;
                this.id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1662;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1663;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public struct_arg(): Struct_argContext {
        let localContext = new Struct_argContext(this.context, this.state);
        this.enterRule(localContext, 162, YQLParser.RULE_struct_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1666;
            this.type_name_tag();
            this.state = 1667;
            this.match(YQLParser.COLON);
            this.state = 1668;
            this.type_name_or_bind();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public struct_arg_positional(): Struct_arg_positionalContext {
        let localContext = new Struct_arg_positionalContext(this.context, this.state);
        this.enterRule(localContext, 164, YQLParser.RULE_struct_arg_positional);
        let _la: number;
        try {
            this.state = 1682;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 114, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1670;
                this.type_name_tag();
                this.state = 1671;
                this.type_name_or_bind();
                this.state = 1676;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197 || _la === 199) {
                    {
                    this.state = 1673;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 197) {
                        {
                        this.state = 1672;
                        this.match(YQLParser.NOT);
                        }
                    }

                    this.state = 1675;
                    this.match(YQLParser.NULL);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1678;
                this.type_name_or_bind();
                this.state = 1679;
                this.match(YQLParser.AS);
                this.state = 1680;
                this.type_name_tag();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variant_arg(): Variant_argContext {
        let localContext = new Variant_argContext(this.context, this.state);
        this.enterRule(localContext, 166, YQLParser.RULE_variant_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1687;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 115, this.context) ) {
            case 1:
                {
                this.state = 1684;
                this.type_name_tag();
                this.state = 1685;
                this.match(YQLParser.COLON);
                }
                break;
            }
            this.state = 1689;
            this.type_name_or_bind();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callable_arg(): Callable_argContext {
        let localContext = new Callable_argContext(this.context, this.state);
        this.enterRule(localContext, 168, YQLParser.RULE_callable_arg);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1691;
            this.variant_arg();
            this.state = 1695;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 33) {
                {
                this.state = 1692;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 1693;
                this.match(YQLParser.AUTOMAP);
                this.state = 1694;
                this.match(YQLParser.RBRACE_CURLY);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callable_arg_list(): Callable_arg_listContext {
        let localContext = new Callable_arg_listContext(this.context, this.state);
        this.enterRule(localContext, 170, YQLParser.RULE_callable_arg_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1697;
            this.callable_arg();
            this.state = 1702;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 117, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1698;
                    this.match(YQLParser.COMMA);
                    this.state = 1699;
                    this.callable_arg();
                    }
                    }
                }
                this.state = 1704;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 117, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_decimal(): Type_name_decimalContext {
        let localContext = new Type_name_decimalContext(this.context, this.state);
        this.enterRule(localContext, 172, YQLParser.RULE_type_name_decimal);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1705;
            this.match(YQLParser.DECIMAL);
            this.state = 1706;
            this.match(YQLParser.LPAREN);
            this.state = 1707;
            this.integer_or_bind();
            this.state = 1708;
            this.match(YQLParser.COMMA);
            this.state = 1709;
            this.integer_or_bind();
            this.state = 1710;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_optional(): Type_name_optionalContext {
        let localContext = new Type_name_optionalContext(this.context, this.state);
        this.enterRule(localContext, 174, YQLParser.RULE_type_name_optional);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1712;
            this.match(YQLParser.OPTIONAL);
            this.state = 1713;
            this.match(YQLParser.LESS);
            this.state = 1714;
            this.type_name_or_bind();
            this.state = 1715;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_tuple(): Type_name_tupleContext {
        let localContext = new Type_name_tupleContext(this.context, this.state);
        this.enterRule(localContext, 176, YQLParser.RULE_type_name_tuple);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1717;
            this.match(YQLParser.TUPLE);
            this.state = 1734;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LESS:
                {
                this.state = 1718;
                this.match(YQLParser.LESS);
                this.state = 1730;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 32 || _la === 69 || _la === 96 || _la === 106 || _la === 119 || _la === 138 || _la === 183 || _la === 209 || ((((_la - 245)) & ~0x1F) === 0 && ((1 << (_la - 245)) & 406847489) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & 33555457) !== 0) || ((((_la - 319)) & ~0x1F) === 0 && ((1 << (_la - 319)) & 7) !== 0)) {
                    {
                    this.state = 1719;
                    this.type_name_or_bind();
                    this.state = 1724;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 118, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 1720;
                            this.match(YQLParser.COMMA);
                            this.state = 1721;
                            this.type_name_or_bind();
                            }
                            }
                        }
                        this.state = 1726;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 118, this.context);
                    }
                    this.state = 1728;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 25) {
                        {
                        this.state = 1727;
                        this.match(YQLParser.COMMA);
                        }
                    }

                    }
                }

                this.state = 1732;
                this.match(YQLParser.GREATER);
                }
                break;
            case YQLParser.NOT_EQUALS2:
                {
                this.state = 1733;
                this.match(YQLParser.NOT_EQUALS2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_struct(): Type_name_structContext {
        let localContext = new Type_name_structContext(this.context, this.state);
        this.enterRule(localContext, 178, YQLParser.RULE_type_name_struct);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1736;
            this.match(YQLParser.STRUCT);
            this.state = 1753;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LESS:
                {
                this.state = 1737;
                this.match(YQLParser.LESS);
                this.state = 1749;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4026531585) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967263) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4286577663) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294704095) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4286578687) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294836223) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4292739071) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4026398719) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4292870047) !== 0) || _la === 320 || _la === 321) {
                    {
                    this.state = 1738;
                    this.struct_arg();
                    this.state = 1743;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 122, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 1739;
                            this.match(YQLParser.COMMA);
                            this.state = 1740;
                            this.struct_arg();
                            }
                            }
                        }
                        this.state = 1745;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 122, this.context);
                    }
                    this.state = 1747;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 25) {
                        {
                        this.state = 1746;
                        this.match(YQLParser.COMMA);
                        }
                    }

                    }
                }

                this.state = 1751;
                this.match(YQLParser.GREATER);
                }
                break;
            case YQLParser.NOT_EQUALS2:
                {
                this.state = 1752;
                this.match(YQLParser.NOT_EQUALS2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_variant(): Type_name_variantContext {
        let localContext = new Type_name_variantContext(this.context, this.state);
        this.enterRule(localContext, 180, YQLParser.RULE_type_name_variant);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1755;
            this.match(YQLParser.VARIANT);
            this.state = 1756;
            this.match(YQLParser.LESS);
            this.state = 1757;
            this.variant_arg();
            this.state = 1762;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 126, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1758;
                    this.match(YQLParser.COMMA);
                    this.state = 1759;
                    this.variant_arg();
                    }
                    }
                }
                this.state = 1764;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 126, this.context);
            }
            this.state = 1766;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1765;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1768;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_list(): Type_name_listContext {
        let localContext = new Type_name_listContext(this.context, this.state);
        this.enterRule(localContext, 182, YQLParser.RULE_type_name_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1770;
            this.match(YQLParser.LIST);
            this.state = 1771;
            this.match(YQLParser.LESS);
            this.state = 1772;
            this.type_name_or_bind();
            this.state = 1773;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_stream(): Type_name_streamContext {
        let localContext = new Type_name_streamContext(this.context, this.state);
        this.enterRule(localContext, 184, YQLParser.RULE_type_name_stream);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1775;
            this.match(YQLParser.STREAM);
            this.state = 1776;
            this.match(YQLParser.LESS);
            this.state = 1777;
            this.type_name_or_bind();
            this.state = 1778;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_flow(): Type_name_flowContext {
        let localContext = new Type_name_flowContext(this.context, this.state);
        this.enterRule(localContext, 186, YQLParser.RULE_type_name_flow);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1780;
            this.match(YQLParser.FLOW);
            this.state = 1781;
            this.match(YQLParser.LESS);
            this.state = 1782;
            this.type_name_or_bind();
            this.state = 1783;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_dict(): Type_name_dictContext {
        let localContext = new Type_name_dictContext(this.context, this.state);
        this.enterRule(localContext, 188, YQLParser.RULE_type_name_dict);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1785;
            this.match(YQLParser.DICT);
            this.state = 1786;
            this.match(YQLParser.LESS);
            this.state = 1787;
            this.type_name_or_bind();
            this.state = 1788;
            this.match(YQLParser.COMMA);
            this.state = 1789;
            this.type_name_or_bind();
            this.state = 1790;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_set(): Type_name_setContext {
        let localContext = new Type_name_setContext(this.context, this.state);
        this.enterRule(localContext, 190, YQLParser.RULE_type_name_set);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1792;
            this.match(YQLParser.SET);
            this.state = 1793;
            this.match(YQLParser.LESS);
            this.state = 1794;
            this.type_name_or_bind();
            this.state = 1795;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_enum(): Type_name_enumContext {
        let localContext = new Type_name_enumContext(this.context, this.state);
        this.enterRule(localContext, 192, YQLParser.RULE_type_name_enum);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1797;
            this.match(YQLParser.ENUM);
            this.state = 1798;
            this.match(YQLParser.LESS);
            this.state = 1799;
            this.type_name_tag();
            this.state = 1804;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 128, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1800;
                    this.match(YQLParser.COMMA);
                    this.state = 1801;
                    this.type_name_tag();
                    }
                    }
                }
                this.state = 1806;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 128, this.context);
            }
            this.state = 1808;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1807;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1810;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_resource(): Type_name_resourceContext {
        let localContext = new Type_name_resourceContext(this.context, this.state);
        this.enterRule(localContext, 194, YQLParser.RULE_type_name_resource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1812;
            this.match(YQLParser.RESOURCE);
            this.state = 1813;
            this.match(YQLParser.LESS);
            this.state = 1814;
            this.type_name_tag();
            this.state = 1815;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_tagged(): Type_name_taggedContext {
        let localContext = new Type_name_taggedContext(this.context, this.state);
        this.enterRule(localContext, 196, YQLParser.RULE_type_name_tagged);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1817;
            this.match(YQLParser.TAGGED);
            this.state = 1818;
            this.match(YQLParser.LESS);
            this.state = 1819;
            this.type_name_or_bind();
            this.state = 1820;
            this.match(YQLParser.COMMA);
            this.state = 1821;
            this.type_name_tag();
            this.state = 1822;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_callable(): Type_name_callableContext {
        let localContext = new Type_name_callableContext(this.context, this.state);
        this.enterRule(localContext, 198, YQLParser.RULE_type_name_callable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1824;
            this.match(YQLParser.CALLABLE);
            this.state = 1825;
            this.match(YQLParser.LESS);
            this.state = 1826;
            this.match(YQLParser.LPAREN);
            this.state = 1828;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4026531585) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294705119) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294836223) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || _la === 320 || _la === 321) {
                {
                this.state = 1827;
                this.callable_arg_list();
                }
            }

            this.state = 1831;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1830;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1837;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 39) {
                {
                this.state = 1833;
                this.match(YQLParser.LBRACE_SQUARE);
                this.state = 1834;
                this.callable_arg_list();
                this.state = 1835;
                this.match(YQLParser.RBRACE_SQUARE);
                }
            }

            this.state = 1839;
            this.match(YQLParser.RPAREN);
            this.state = 1840;
            this.match(YQLParser.ARROW);
            this.state = 1841;
            this.type_name_or_bind();
            this.state = 1842;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_composite(): Type_name_compositeContext {
        let localContext = new Type_name_compositeContext(this.context, this.state);
        this.enterRule(localContext, 200, YQLParser.RULE_type_name_composite);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1857;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.OPTIONAL:
                {
                this.state = 1844;
                this.type_name_optional();
                }
                break;
            case YQLParser.TUPLE:
                {
                this.state = 1845;
                this.type_name_tuple();
                }
                break;
            case YQLParser.STRUCT:
                {
                this.state = 1846;
                this.type_name_struct();
                }
                break;
            case YQLParser.VARIANT:
                {
                this.state = 1847;
                this.type_name_variant();
                }
                break;
            case YQLParser.LIST:
                {
                this.state = 1848;
                this.type_name_list();
                }
                break;
            case YQLParser.STREAM:
                {
                this.state = 1849;
                this.type_name_stream();
                }
                break;
            case YQLParser.FLOW:
                {
                this.state = 1850;
                this.type_name_flow();
                }
                break;
            case YQLParser.DICT:
                {
                this.state = 1851;
                this.type_name_dict();
                }
                break;
            case YQLParser.SET:
                {
                this.state = 1852;
                this.type_name_set();
                }
                break;
            case YQLParser.ENUM:
                {
                this.state = 1853;
                this.type_name_enum();
                }
                break;
            case YQLParser.RESOURCE:
                {
                this.state = 1854;
                this.type_name_resource();
                }
                break;
            case YQLParser.TAGGED:
                {
                this.state = 1855;
                this.type_name_tagged();
                }
                break;
            case YQLParser.CALLABLE:
                {
                this.state = 1856;
                this.type_name_callable();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1862;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 28) {
                {
                {
                this.state = 1859;
                this.match(YQLParser.QUESTION);
                }
                }
                this.state = 1864;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name(): Type_nameContext {
        let localContext = new Type_nameContext(this.context, this.state);
        this.enterRule(localContext, 202, YQLParser.RULE_type_name);
        let _la: number;
        try {
            this.state = 1876;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.CALLABLE:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1865;
                this.type_name_composite();
                }
                break;
            case YQLParser.DECIMAL:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1868;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.DECIMAL:
                    {
                    this.state = 1866;
                    this.type_name_decimal();
                    }
                    break;
                case YQLParser.STRING_VALUE:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 1867;
                    this.type_name_simple();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1873;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 28) {
                    {
                    {
                    this.state = 1870;
                    this.match(YQLParser.QUESTION);
                    }
                    }
                    this.state = 1875;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        let localContext = new Type_name_or_bindContext(this.context, this.state);
        this.enterRule(localContext, 204, YQLParser.RULE_type_name_or_bind);
        try {
            this.state = 1880;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.CALLABLE:
            case YQLParser.DECIMAL:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1878;
                this.type_name();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1879;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public value_constructor_literal(): Value_constructor_literalContext {
        let localContext = new Value_constructor_literalContext(this.context, this.state);
        this.enterRule(localContext, 206, YQLParser.RULE_value_constructor_literal);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1882;
            this.match(YQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public value_constructor(): Value_constructorContext {
        let localContext = new Value_constructorContext(this.context, this.state);
        this.enterRule(localContext, 208, YQLParser.RULE_value_constructor);
        try {
            this.state = 1907;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1884;
                this.match(YQLParser.VARIANT);
                this.state = 1885;
                this.match(YQLParser.LPAREN);
                this.state = 1886;
                this.expr();
                this.state = 1887;
                this.match(YQLParser.COMMA);
                this.state = 1888;
                this.expr();
                this.state = 1889;
                this.match(YQLParser.COMMA);
                this.state = 1890;
                this.expr();
                this.state = 1891;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.ENUM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1893;
                this.match(YQLParser.ENUM);
                this.state = 1894;
                this.match(YQLParser.LPAREN);
                this.state = 1895;
                this.expr();
                this.state = 1896;
                this.match(YQLParser.COMMA);
                this.state = 1897;
                this.expr();
                this.state = 1898;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.CALLABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1900;
                this.match(YQLParser.CALLABLE);
                this.state = 1901;
                this.match(YQLParser.LPAREN);
                this.state = 1902;
                this.expr();
                this.state = 1903;
                this.match(YQLParser.COMMA);
                this.state = 1904;
                this.expr();
                this.state = 1905;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declare_stmt(): Declare_stmtContext {
        let localContext = new Declare_stmtContext(this.context, this.state);
        this.enterRule(localContext, 210, YQLParser.RULE_declare_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1909;
            this.match(YQLParser.DECLARE);
            this.state = 1910;
            this.bind_parameter();
            this.state = 1911;
            this.match(YQLParser.AS);
            this.state = 1912;
            this.type_name();
            this.state = 1915;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 1913;
                this.match(YQLParser.EQUALS);
                this.state = 1914;
                this.literal_value();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public module_path(): Module_pathContext {
        let localContext = new Module_pathContext(this.context, this.state);
        this.enterRule(localContext, 212, YQLParser.RULE_module_path);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1918;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 24) {
                {
                this.state = 1917;
                this.match(YQLParser.DOT);
                }
            }

            this.state = 1920;
            this.an_id();
            this.state = 1925;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 24) {
                {
                {
                this.state = 1921;
                this.match(YQLParser.DOT);
                this.state = 1922;
                this.an_id();
                }
                }
                this.state = 1927;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public import_stmt(): Import_stmtContext {
        let localContext = new Import_stmtContext(this.context, this.state);
        this.enterRule(localContext, 214, YQLParser.RULE_import_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1928;
            this.match(YQLParser.IMPORT);
            this.state = 1929;
            this.module_path();
            this.state = 1930;
            this.match(YQLParser.SYMBOLS);
            this.state = 1931;
            this.named_bind_parameter_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public export_stmt(): Export_stmtContext {
        let localContext = new Export_stmtContext(this.context, this.state);
        this.enterRule(localContext, 216, YQLParser.RULE_export_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1933;
            this.match(YQLParser.EXPORT);
            this.state = 1934;
            this.bind_parameter_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public call_action(): Call_actionContext {
        let localContext = new Call_actionContext(this.context, this.state);
        this.enterRule(localContext, 218, YQLParser.RULE_call_action);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1938;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
                {
                this.state = 1936;
                this.bind_parameter();
                }
                break;
            case YQLParser.EMPTY_ACTION:
                {
                this.state = 1937;
                this.match(YQLParser.EMPTY_ACTION);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1940;
            this.match(YQLParser.LPAREN);
            this.state = 1942;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4278585373) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294959103) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 239)) & ~0x1F) === 0 && ((1 << (_la - 239)) & 4294967291) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 4294967295) !== 0) || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & 8388607) !== 0)) {
                {
                this.state = 1941;
                this.expr_list();
                }
            }

            this.state = 1944;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inline_action(): Inline_actionContext {
        let localContext = new Inline_actionContext(this.context, this.state);
        this.enterRule(localContext, 220, YQLParser.RULE_inline_action);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1946;
            this.match(YQLParser.BEGIN);
            this.state = 1947;
            this.define_action_or_subquery_body();
            this.state = 1948;
            this.match(YQLParser.END);
            this.state = 1949;
            this.match(YQLParser.DO);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public do_stmt(): Do_stmtContext {
        let localContext = new Do_stmtContext(this.context, this.state);
        this.enterRule(localContext, 222, YQLParser.RULE_do_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1951;
            this.match(YQLParser.DO);
            this.state = 1954;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
            case YQLParser.EMPTY_ACTION:
                {
                this.state = 1952;
                this.call_action();
                }
                break;
            case YQLParser.BEGIN:
                {
                this.state = 1953;
                this.inline_action();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pragma_stmt(): Pragma_stmtContext {
        let localContext = new Pragma_stmtContext(this.context, this.state);
        this.enterRule(localContext, 224, YQLParser.RULE_pragma_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1956;
            this.match(YQLParser.PRAGMA);
            this.state = 1957;
            this.opt_id_prefix_or_type();
            this.state = 1958;
            this.an_id();
            this.state = 1972;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.EQUALS:
                {
                this.state = 1959;
                this.match(YQLParser.EQUALS);
                this.state = 1960;
                this.pragma_value();
                }
                break;
            case YQLParser.LPAREN:
                {
                this.state = 1961;
                this.match(YQLParser.LPAREN);
                this.state = 1962;
                this.pragma_value();
                this.state = 1967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 1963;
                    this.match(YQLParser.COMMA);
                    this.state = 1964;
                    this.pragma_value();
                    }
                    }
                    this.state = 1969;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1970;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.EOF:
            case YQLParser.SEMICOLON:
            case YQLParser.END:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pragma_value(): Pragma_valueContext {
        let localContext = new Pragma_valueContext(this.context, this.state);
        this.enterRule(localContext, 226, YQLParser.RULE_pragma_value);
        try {
            this.state = 1979;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.PLUS:
            case YQLParser.MINUS:
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
            case YQLParser.REAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1974;
                this.signed_number();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1975;
                this.id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1976;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.FALSE:
            case YQLParser.TRUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1977;
                this.bool_value();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1978;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sort_specification(): Sort_specificationContext {
        let localContext = new Sort_specificationContext(this.context, this.state);
        this.enterRule(localContext, 228, YQLParser.RULE_sort_specification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1981;
            this.expr();
            this.state = 1983;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 52 || _la === 103) {
                {
                this.state = 1982;
                _la = this.tokenStream.LA(1);
                if(!(_la === 52 || _la === 103)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sort_specification_list(): Sort_specification_listContext {
        let localContext = new Sort_specification_listContext(this.context, this.state);
        this.enterRule(localContext, 230, YQLParser.RULE_sort_specification_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1985;
            this.sort_specification();
            this.state = 1990;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1986;
                this.match(YQLParser.COMMA);
                this.state = 1987;
                this.sort_specification();
                }
                }
                this.state = 1992;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_stmt(): Select_stmtContext {
        let localContext = new Select_stmtContext(this.context, this.state);
        this.enterRule(localContext, 232, YQLParser.RULE_select_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1993;
            this.select_kind_parenthesis();
            this.state = 1999;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 124 || _la === 169 || _la === 298) {
                {
                {
                this.state = 1994;
                this.select_op();
                this.state = 1995;
                this.select_kind_parenthesis();
                }
                }
                this.state = 2001;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_unparenthesized_stmt(): Select_unparenthesized_stmtContext {
        let localContext = new Select_unparenthesized_stmtContext(this.context, this.state);
        this.enterRule(localContext, 234, YQLParser.RULE_select_unparenthesized_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2002;
            this.select_kind_partial();
            this.state = 2008;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 124 || _la === 169 || _la === 298) {
                {
                {
                this.state = 2003;
                this.select_op();
                this.state = 2004;
                this.select_kind_parenthesis();
                }
                }
                this.state = 2010;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_kind_parenthesis(): Select_kind_parenthesisContext {
        let localContext = new Select_kind_parenthesisContext(this.context, this.state);
        this.enterRule(localContext, 236, YQLParser.RULE_select_kind_parenthesis);
        try {
            this.state = 2016;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2011;
                this.select_kind_partial();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2012;
                this.match(YQLParser.LPAREN);
                this.state = 2013;
                this.select_kind_partial();
                this.state = 2014;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_op(): Select_opContext {
        let localContext = new Select_opContext(this.context, this.state);
        this.enterRule(localContext, 238, YQLParser.RULE_select_op);
        let _la: number;
        try {
            this.state = 2024;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.UNION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2018;
                this.match(YQLParser.UNION);
                this.state = 2020;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 44) {
                    {
                    this.state = 2019;
                    this.match(YQLParser.ALL);
                    }
                }

                }
                break;
            case YQLParser.INTERSECT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2022;
                this.match(YQLParser.INTERSECT);
                }
                break;
            case YQLParser.EXCEPT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2023;
                this.match(YQLParser.EXCEPT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_kind_partial(): Select_kind_partialContext {
        let localContext = new Select_kind_partialContext(this.context, this.state);
        this.enterRule(localContext, 240, YQLParser.RULE_select_kind_partial);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2026;
            this.select_kind();
            this.state = 2033;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 182) {
                {
                this.state = 2027;
                this.match(YQLParser.LIMIT);
                this.state = 2028;
                this.expr();
                this.state = 2031;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25 || _la === 203) {
                    {
                    this.state = 2029;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 25 || _la === 203)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2030;
                    this.expr();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_kind(): Select_kindContext {
        let localContext = new Select_kindContext(this.context, this.state);
        this.enterRule(localContext, 242, YQLParser.RULE_select_kind);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2036;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 2035;
                this.match(YQLParser.DISCARD);
                }
            }

            this.state = 2041;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.PROCESS:
                {
                this.state = 2038;
                this.process_core();
                }
                break;
            case YQLParser.REDUCE:
                {
                this.state = 2039;
                this.reduce_core();
                }
                break;
            case YQLParser.FROM:
            case YQLParser.SELECT:
                {
                this.state = 2040;
                this.select_core();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2046;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 170) {
                {
                this.state = 2043;
                this.match(YQLParser.INTO);
                this.state = 2044;
                this.match(YQLParser.RESULT);
                this.state = 2045;
                this.pure_column_or_named();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public process_core(): Process_coreContext {
        let localContext = new Process_coreContext(this.context, this.state);
        this.enterRule(localContext, 244, YQLParser.RULE_process_core);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2048;
            this.match(YQLParser.PROCESS);
            this.state = 2050;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 161, this.context) ) {
            case 1:
                {
                this.state = 2049;
                this.match(YQLParser.STREAM);
                }
                break;
            }
            this.state = 2052;
            this.named_single_source();
            this.state = 2057;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2053;
                this.match(YQLParser.COMMA);
                this.state = 2054;
                this.named_single_source();
                }
                }
                this.state = 2059;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2081;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 2060;
                this.match(YQLParser.USING);
                this.state = 2061;
                this.using_call_expr();
                this.state = 2064;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 51) {
                    {
                    this.state = 2062;
                    this.match(YQLParser.AS);
                    this.state = 2063;
                    this.an_id();
                    }
                }

                this.state = 2068;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 315) {
                    {
                    this.state = 2066;
                    this.match(YQLParser.WITH);
                    this.state = 2067;
                    this.external_call_settings();
                    }
                }

                this.state = 2071;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 2070;
                    this.where_expr();
                    }
                }

                this.state = 2075;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 152) {
                    {
                    this.state = 2073;
                    this.match(YQLParser.HAVING);
                    this.state = 2074;
                    this.expr();
                    }
                }

                this.state = 2079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53) {
                    {
                    this.state = 2077;
                    this.match(YQLParser.ASSUME);
                    this.state = 2078;
                    this.order_by_clause();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public external_call_param(): External_call_paramContext {
        let localContext = new External_call_paramContext(this.context, this.state);
        this.enterRule(localContext, 246, YQLParser.RULE_external_call_param);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2083;
            this.an_id();
            this.state = 2084;
            this.match(YQLParser.EQUALS);
            this.state = 2085;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public external_call_settings(): External_call_settingsContext {
        let localContext = new External_call_settingsContext(this.context, this.state);
        this.enterRule(localContext, 248, YQLParser.RULE_external_call_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2087;
            this.external_call_param();
            this.state = 2092;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2088;
                this.match(YQLParser.COMMA);
                this.state = 2089;
                this.external_call_param();
                }
                }
                this.state = 2094;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reduce_core(): Reduce_coreContext {
        let localContext = new Reduce_coreContext(this.context, this.state);
        this.enterRule(localContext, 250, YQLParser.RULE_reduce_core);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2095;
            this.match(YQLParser.REDUCE);
            this.state = 2096;
            this.named_single_source();
            this.state = 2101;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2097;
                this.match(YQLParser.COMMA);
                this.state = 2098;
                this.named_single_source();
                }
                }
                this.state = 2103;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2106;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 227) {
                {
                this.state = 2104;
                this.match(YQLParser.PRESORT);
                this.state = 2105;
                this.sort_specification_list();
                }
            }

            this.state = 2108;
            this.match(YQLParser.ON);
            this.state = 2109;
            this.column_list();
            this.state = 2110;
            this.match(YQLParser.USING);
            this.state = 2112;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 172, this.context) ) {
            case 1:
                {
                this.state = 2111;
                this.match(YQLParser.ALL);
                }
                break;
            }
            this.state = 2114;
            this.using_call_expr();
            this.state = 2117;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 2115;
                this.match(YQLParser.AS);
                this.state = 2116;
                this.an_id();
                }
            }

            this.state = 2120;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 313) {
                {
                this.state = 2119;
                this.where_expr();
                }
            }

            this.state = 2124;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 2122;
                this.match(YQLParser.HAVING);
                this.state = 2123;
                this.expr();
                }
            }

            this.state = 2128;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 2126;
                this.match(YQLParser.ASSUME);
                this.state = 2127;
                this.order_by_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext {
        let localContext = new Opt_set_quantifierContext(this.context, this.state);
        this.enterRule(localContext, 252, YQLParser.RULE_opt_set_quantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2131;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                {
                this.state = 2130;
                _la = this.tokenStream.LA(1);
                if(!(_la === 44 || _la === 110)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_core(): Select_coreContext {
        let localContext = new Select_coreContext(this.context, this.state);
        this.enterRule(localContext, 254, YQLParser.RULE_select_core);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2134;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 142) {
                {
                this.state = 2133;
                this.from_stmt();
                }
            }

            this.state = 2136;
            this.match(YQLParser.SELECT);
            this.state = 2138;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 179, this.context) ) {
            case 1:
                {
                this.state = 2137;
                this.match(YQLParser.STREAM);
                }
                break;
            }
            this.state = 2140;
            this.opt_set_quantifier();
            this.state = 2141;
            this.result_column();
            this.state = 2146;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 180, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2142;
                    this.match(YQLParser.COMMA);
                    this.state = 2143;
                    this.result_column();
                    }
                    }
                }
                this.state = 2148;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 180, this.context);
            }
            this.state = 2150;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 2149;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 2154;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 316) {
                {
                this.state = 2152;
                this.match(YQLParser.WITHOUT);
                this.state = 2153;
                this.without_column_list();
                }
            }

            this.state = 2157;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 142) {
                {
                this.state = 2156;
                this.from_stmt();
                }
            }

            this.state = 2160;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 313) {
                {
                this.state = 2159;
                this.where_expr();
                }
            }

            this.state = 2163;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 148) {
                {
                this.state = 2162;
                this.group_by_clause();
                }
            }

            this.state = 2167;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 2165;
                this.match(YQLParser.HAVING);
                this.state = 2166;
                this.expr();
                }
            }

            this.state = 2170;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 314) {
                {
                this.state = 2169;
                this.window_clause();
                }
            }

            this.state = 2173;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || _la === 211) {
                {
                this.state = 2172;
                this.ext_order_by_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_recognition_clause(): Row_pattern_recognition_clauseContext {
        let localContext = new Row_pattern_recognition_clauseContext(this.context, this.state);
        this.enterRule(localContext, 256, YQLParser.RULE_row_pattern_recognition_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2175;
            this.match(YQLParser.MATCH_RECOGNIZE);
            this.state = 2176;
            this.match(YQLParser.LPAREN);
            this.state = 2178;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 216) {
                {
                this.state = 2177;
                this.window_partition_clause();
                }
            }

            this.state = 2181;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 211) {
                {
                this.state = 2180;
                this.order_by_clause();
                }
            }

            this.state = 2184;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 189) {
                {
                this.state = 2183;
                this.row_pattern_measures();
                }
            }

            this.state = 2187;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 44 || _la === 206) {
                {
                this.state = 2186;
                this.row_pattern_rows_per_match();
                }
            }

            this.state = 2189;
            this.row_pattern_common_syntax();
            this.state = 2190;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_rows_per_match(): Row_pattern_rows_per_matchContext {
        let localContext = new Row_pattern_rows_per_matchContext(this.context, this.state);
        this.enterRule(localContext, 258, YQLParser.RULE_row_pattern_rows_per_match);
        let _la: number;
        try {
            this.state = 2203;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ONE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2192;
                this.match(YQLParser.ONE);
                this.state = 2193;
                this.match(YQLParser.ROW);
                this.state = 2194;
                this.match(YQLParser.PER);
                this.state = 2195;
                this.match(YQLParser.MATCH);
                }
                break;
            case YQLParser.ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2196;
                this.match(YQLParser.ALL);
                this.state = 2197;
                this.match(YQLParser.ROWS);
                this.state = 2198;
                this.match(YQLParser.PER);
                this.state = 2199;
                this.match(YQLParser.MATCH);
                this.state = 2201;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 204 || _la === 269 || _la === 315) {
                    {
                    this.state = 2200;
                    this.row_pattern_empty_match_handling();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_empty_match_handling(): Row_pattern_empty_match_handlingContext {
        let localContext = new Row_pattern_empty_match_handlingContext(this.context, this.state);
        this.enterRule(localContext, 260, YQLParser.RULE_row_pattern_empty_match_handling);
        try {
            this.state = 2214;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SHOW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2205;
                this.match(YQLParser.SHOW);
                this.state = 2206;
                this.match(YQLParser.EMPTY);
                this.state = 2207;
                this.match(YQLParser.MATCHES);
                }
                break;
            case YQLParser.OMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2208;
                this.match(YQLParser.OMIT);
                this.state = 2209;
                this.match(YQLParser.EMPTY);
                this.state = 2210;
                this.match(YQLParser.MATCHES);
                }
                break;
            case YQLParser.WITH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2211;
                this.match(YQLParser.WITH);
                this.state = 2212;
                this.match(YQLParser.UNMATCHED);
                this.state = 2213;
                this.match(YQLParser.ROWS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_measures(): Row_pattern_measuresContext {
        let localContext = new Row_pattern_measuresContext(this.context, this.state);
        this.enterRule(localContext, 262, YQLParser.RULE_row_pattern_measures);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2216;
            this.match(YQLParser.MEASURES);
            this.state = 2217;
            this.row_pattern_measure_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_measure_list(): Row_pattern_measure_listContext {
        let localContext = new Row_pattern_measure_listContext(this.context, this.state);
        this.enterRule(localContext, 264, YQLParser.RULE_row_pattern_measure_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2219;
            this.row_pattern_measure_definition();
            this.state = 2224;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2220;
                this.match(YQLParser.COMMA);
                this.state = 2221;
                this.row_pattern_measure_definition();
                }
                }
                this.state = 2226;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_measure_definition(): Row_pattern_measure_definitionContext {
        let localContext = new Row_pattern_measure_definitionContext(this.context, this.state);
        this.enterRule(localContext, 266, YQLParser.RULE_row_pattern_measure_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2227;
            this.expr();
            this.state = 2228;
            this.match(YQLParser.AS);
            this.state = 2229;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_common_syntax(): Row_pattern_common_syntaxContext {
        let localContext = new Row_pattern_common_syntaxContext(this.context, this.state);
        this.enterRule(localContext, 268, YQLParser.RULE_row_pattern_common_syntax);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2234;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43) {
                {
                this.state = 2231;
                this.match(YQLParser.AFTER);
                this.state = 2232;
                this.match(YQLParser.MATCH);
                this.state = 2233;
                this.row_pattern_skip_to();
                }
            }

            this.state = 2237;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 164 || _la === 264) {
                {
                this.state = 2236;
                this.row_pattern_initial_or_seek();
                }
            }

            this.state = 2239;
            this.match(YQLParser.PATTERN);
            this.state = 2240;
            this.match(YQLParser.LPAREN);
            this.state = 2241;
            this.row_pattern();
            this.state = 2242;
            this.match(YQLParser.RPAREN);
            this.state = 2244;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 275) {
                {
                this.state = 2243;
                this.row_pattern_subset_clause();
                }
            }

            this.state = 2246;
            this.match(YQLParser.DEFINE);
            this.state = 2247;
            this.row_pattern_definition_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_skip_to(): Row_pattern_skip_toContext {
        let localContext = new Row_pattern_skip_toContext(this.context, this.state);
        this.enterRule(localContext, 270, YQLParser.RULE_row_pattern_skip_to);
        try {
            this.state = 2268;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 200, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2249;
                this.match(YQLParser.TSKIP);
                this.state = 2250;
                this.match(YQLParser.TO);
                this.state = 2251;
                this.match(YQLParser.NEXT);
                this.state = 2252;
                this.match(YQLParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2253;
                this.match(YQLParser.TSKIP);
                this.state = 2254;
                this.match(YQLParser.PAST);
                this.state = 2255;
                this.match(YQLParser.LAST);
                this.state = 2256;
                this.match(YQLParser.ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2257;
                this.match(YQLParser.TSKIP);
                this.state = 2258;
                this.match(YQLParser.TO);
                this.state = 2259;
                this.match(YQLParser.FIRST);
                this.state = 2260;
                this.row_pattern_skip_to_variable_name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2261;
                this.match(YQLParser.TSKIP);
                this.state = 2262;
                this.match(YQLParser.TO);
                this.state = 2263;
                this.match(YQLParser.LAST);
                this.state = 2264;
                this.row_pattern_skip_to_variable_name();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2265;
                this.match(YQLParser.TSKIP);
                this.state = 2266;
                this.match(YQLParser.TO);
                this.state = 2267;
                this.row_pattern_skip_to_variable_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_skip_to_variable_name(): Row_pattern_skip_to_variable_nameContext {
        let localContext = new Row_pattern_skip_to_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 272, YQLParser.RULE_row_pattern_skip_to_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2270;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_initial_or_seek(): Row_pattern_initial_or_seekContext {
        let localContext = new Row_pattern_initial_or_seekContext(this.context, this.state);
        this.enterRule(localContext, 274, YQLParser.RULE_row_pattern_initial_or_seek);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2272;
            _la = this.tokenStream.LA(1);
            if(!(_la === 164 || _la === 264)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern(): Row_patternContext {
        let localContext = new Row_patternContext(this.context, this.state);
        this.enterRule(localContext, 276, YQLParser.RULE_row_pattern);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2274;
            this.row_pattern_term();
            this.state = 2279;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 13) {
                {
                {
                this.state = 2275;
                this.match(YQLParser.PIPE);
                this.state = 2276;
                this.row_pattern_term();
                }
                }
                this.state = 2281;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_term(): Row_pattern_termContext {
        let localContext = new Row_pattern_termContext(this.context, this.state);
        this.enterRule(localContext, 278, YQLParser.RULE_row_pattern_term);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2283;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 2282;
                this.row_pattern_factor();
                }
                }
                this.state = 2285;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & 705) !== 0) || _la === 222 || _la === 320 || _la === 321);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_factor(): Row_pattern_factorContext {
        let localContext = new Row_pattern_factorContext(this.context, this.state);
        this.enterRule(localContext, 280, YQLParser.RULE_row_pattern_factor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2287;
            this.row_pattern_primary();
            this.state = 2289;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
            case 1:
                {
                this.state = 2288;
                this.row_pattern_quantifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_quantifier(): Row_pattern_quantifierContext {
        let localContext = new Row_pattern_quantifierContext(this.context, this.state);
        this.enterRule(localContext, 282, YQLParser.RULE_row_pattern_quantifier);
        let _la: number;
        try {
            this.state = 2319;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 210, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2291;
                this.match(YQLParser.ASTERISK);
                this.state = 2293;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2292;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2295;
                this.match(YQLParser.PLUS);
                this.state = 2297;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2296;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2299;
                this.match(YQLParser.QUESTION);
                this.state = 2301;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2300;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2303;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 2305;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322 || _la === 323) {
                    {
                    this.state = 2304;
                    this.integer();
                    }
                }

                this.state = 2307;
                this.match(YQLParser.COMMA);
                this.state = 2309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322 || _la === 323) {
                    {
                    this.state = 2308;
                    this.integer();
                    }
                }

                this.state = 2311;
                this.match(YQLParser.RBRACE_CURLY);
                this.state = 2313;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2312;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2315;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 2316;
                this.integer();
                this.state = 2317;
                this.match(YQLParser.RBRACE_CURLY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_primary(): Row_pattern_primaryContext {
        let localContext = new Row_pattern_primaryContext(this.context, this.state);
        this.enterRule(localContext, 284, YQLParser.RULE_row_pattern_primary);
        let _la: number;
        try {
            this.state = 2336;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2321;
                this.row_pattern_primary_variable_name();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2322;
                this.match(YQLParser.DOLLAR);
                }
                break;
            case YQLParser.CARET:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2323;
                this.match(YQLParser.CARET);
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2324;
                this.match(YQLParser.LPAREN);
                this.state = 2326;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & 705) !== 0) || _la === 222 || _la === 320 || _la === 321) {
                    {
                    this.state = 2325;
                    this.row_pattern();
                    }
                }

                this.state = 2328;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.LBRACE_CURLY:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2329;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 2330;
                this.match(YQLParser.MINUS);
                this.state = 2331;
                this.row_pattern();
                this.state = 2332;
                this.match(YQLParser.MINUS);
                this.state = 2333;
                this.match(YQLParser.RBRACE_CURLY);
                }
                break;
            case YQLParser.PERMUTE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2335;
                this.row_pattern_permute();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_primary_variable_name(): Row_pattern_primary_variable_nameContext {
        let localContext = new Row_pattern_primary_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 286, YQLParser.RULE_row_pattern_primary_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2338;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_permute(): Row_pattern_permuteContext {
        let localContext = new Row_pattern_permuteContext(this.context, this.state);
        this.enterRule(localContext, 288, YQLParser.RULE_row_pattern_permute);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2340;
            this.match(YQLParser.PERMUTE);
            this.state = 2341;
            this.match(YQLParser.LPAREN);
            this.state = 2342;
            this.row_pattern();
            this.state = 2347;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2343;
                this.match(YQLParser.COMMA);
                this.state = 2344;
                this.row_pattern();
                }
                }
                this.state = 2349;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2350;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_clause(): Row_pattern_subset_clauseContext {
        let localContext = new Row_pattern_subset_clauseContext(this.context, this.state);
        this.enterRule(localContext, 290, YQLParser.RULE_row_pattern_subset_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2352;
            this.match(YQLParser.SUBSET);
            this.state = 2353;
            this.row_pattern_subset_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_list(): Row_pattern_subset_listContext {
        let localContext = new Row_pattern_subset_listContext(this.context, this.state);
        this.enterRule(localContext, 292, YQLParser.RULE_row_pattern_subset_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2355;
            this.row_pattern_subset_item();
            this.state = 2360;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2356;
                this.match(YQLParser.COMMA);
                this.state = 2357;
                this.row_pattern_subset_item();
                }
                }
                this.state = 2362;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_item(): Row_pattern_subset_itemContext {
        let localContext = new Row_pattern_subset_itemContext(this.context, this.state);
        this.enterRule(localContext, 294, YQLParser.RULE_row_pattern_subset_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2363;
            this.row_pattern_subset_item_variable_name();
            this.state = 2364;
            this.match(YQLParser.EQUALS);
            this.state = 2365;
            this.match(YQLParser.LPAREN);
            this.state = 2366;
            this.row_pattern_subset_rhs();
            this.state = 2367;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_item_variable_name(): Row_pattern_subset_item_variable_nameContext {
        let localContext = new Row_pattern_subset_item_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 296, YQLParser.RULE_row_pattern_subset_item_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2369;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_rhs(): Row_pattern_subset_rhsContext {
        let localContext = new Row_pattern_subset_rhsContext(this.context, this.state);
        this.enterRule(localContext, 298, YQLParser.RULE_row_pattern_subset_rhs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2371;
            this.row_pattern_subset_rhs_variable_name();
            this.state = 2376;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2372;
                this.match(YQLParser.COMMA);
                this.state = 2373;
                this.row_pattern_subset_rhs_variable_name();
                }
                }
                this.state = 2378;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_rhs_variable_name(): Row_pattern_subset_rhs_variable_nameContext {
        let localContext = new Row_pattern_subset_rhs_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 300, YQLParser.RULE_row_pattern_subset_rhs_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2379;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition_list(): Row_pattern_definition_listContext {
        let localContext = new Row_pattern_definition_listContext(this.context, this.state);
        this.enterRule(localContext, 302, YQLParser.RULE_row_pattern_definition_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2381;
            this.row_pattern_definition();
            this.state = 2386;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2382;
                this.match(YQLParser.COMMA);
                this.state = 2383;
                this.row_pattern_definition();
                }
                }
                this.state = 2388;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition(): Row_pattern_definitionContext {
        let localContext = new Row_pattern_definitionContext(this.context, this.state);
        this.enterRule(localContext, 304, YQLParser.RULE_row_pattern_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2389;
            this.row_pattern_definition_variable_name();
            this.state = 2390;
            this.match(YQLParser.AS);
            this.state = 2391;
            this.row_pattern_definition_search_condition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition_variable_name(): Row_pattern_definition_variable_nameContext {
        let localContext = new Row_pattern_definition_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 306, YQLParser.RULE_row_pattern_definition_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2393;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition_search_condition(): Row_pattern_definition_search_conditionContext {
        let localContext = new Row_pattern_definition_search_conditionContext(this.context, this.state);
        this.enterRule(localContext, 308, YQLParser.RULE_row_pattern_definition_search_condition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2395;
            this.search_condition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public search_condition(): Search_conditionContext {
        let localContext = new Search_conditionContext(this.context, this.state);
        this.enterRule(localContext, 310, YQLParser.RULE_search_condition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2397;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        let localContext = new Row_pattern_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 312, YQLParser.RULE_row_pattern_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2399;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public order_by_clause(): Order_by_clauseContext {
        let localContext = new Order_by_clauseContext(this.context, this.state);
        this.enterRule(localContext, 314, YQLParser.RULE_order_by_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2401;
            this.match(YQLParser.ORDER);
            this.state = 2402;
            this.match(YQLParser.BY);
            this.state = 2403;
            this.sort_specification_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ext_order_by_clause(): Ext_order_by_clauseContext {
        let localContext = new Ext_order_by_clauseContext(this.context, this.state);
        this.enterRule(localContext, 316, YQLParser.RULE_ext_order_by_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2406;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 2405;
                this.match(YQLParser.ASSUME);
                }
            }

            this.state = 2408;
            this.order_by_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_by_clause(): Group_by_clauseContext {
        let localContext = new Group_by_clauseContext(this.context, this.state);
        this.enterRule(localContext, 318, YQLParser.RULE_group_by_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2410;
            this.match(YQLParser.GROUP);
            this.state = 2412;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 2411;
                this.match(YQLParser.COMPACT);
                }
            }

            this.state = 2414;
            this.match(YQLParser.BY);
            this.state = 2415;
            this.opt_set_quantifier();
            this.state = 2416;
            this.grouping_element_list();
            this.state = 2419;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 2417;
                this.match(YQLParser.WITH);
                this.state = 2418;
                this.an_id();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grouping_element_list(): Grouping_element_listContext {
        let localContext = new Grouping_element_listContext(this.context, this.state);
        this.enterRule(localContext, 320, YQLParser.RULE_grouping_element_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2421;
            this.grouping_element();
            this.state = 2426;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2422;
                this.match(YQLParser.COMMA);
                this.state = 2423;
                this.grouping_element();
                }
                }
                this.state = 2428;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grouping_element(): Grouping_elementContext {
        let localContext = new Grouping_elementContext(this.context, this.state);
        this.enterRule(localContext, 322, YQLParser.RULE_grouping_element);
        try {
            this.state = 2434;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 221, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2429;
                this.ordinary_grouping_set();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2430;
                this.rollup_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2431;
                this.cube_list();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2432;
                this.grouping_sets_specification();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2433;
                this.hopping_window_specification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ordinary_grouping_set(): Ordinary_grouping_setContext {
        let localContext = new Ordinary_grouping_setContext(this.context, this.state);
        this.enterRule(localContext, 324, YQLParser.RULE_ordinary_grouping_set);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2436;
            this.named_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ordinary_grouping_set_list(): Ordinary_grouping_set_listContext {
        let localContext = new Ordinary_grouping_set_listContext(this.context, this.state);
        this.enterRule(localContext, 326, YQLParser.RULE_ordinary_grouping_set_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2438;
            this.ordinary_grouping_set();
            this.state = 2443;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2439;
                this.match(YQLParser.COMMA);
                this.state = 2440;
                this.ordinary_grouping_set();
                }
                }
                this.state = 2445;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollup_list(): Rollup_listContext {
        let localContext = new Rollup_listContext(this.context, this.state);
        this.enterRule(localContext, 328, YQLParser.RULE_rollup_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2446;
            this.match(YQLParser.ROLLUP);
            this.state = 2447;
            this.match(YQLParser.LPAREN);
            this.state = 2448;
            this.ordinary_grouping_set_list();
            this.state = 2449;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cube_list(): Cube_listContext {
        let localContext = new Cube_listContext(this.context, this.state);
        this.enterRule(localContext, 330, YQLParser.RULE_cube_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2451;
            this.match(YQLParser.CUBE);
            this.state = 2452;
            this.match(YQLParser.LPAREN);
            this.state = 2453;
            this.ordinary_grouping_set_list();
            this.state = 2454;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grouping_sets_specification(): Grouping_sets_specificationContext {
        let localContext = new Grouping_sets_specificationContext(this.context, this.state);
        this.enterRule(localContext, 332, YQLParser.RULE_grouping_sets_specification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2456;
            this.match(YQLParser.GROUPING);
            this.state = 2457;
            this.match(YQLParser.SETS);
            this.state = 2458;
            this.match(YQLParser.LPAREN);
            this.state = 2459;
            this.grouping_element_list();
            this.state = 2460;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hopping_window_specification(): Hopping_window_specificationContext {
        let localContext = new Hopping_window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 334, YQLParser.RULE_hopping_window_specification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2462;
            this.match(YQLParser.HOP);
            this.state = 2463;
            this.match(YQLParser.LPAREN);
            this.state = 2464;
            this.expr();
            this.state = 2465;
            this.match(YQLParser.COMMA);
            this.state = 2466;
            this.expr();
            this.state = 2467;
            this.match(YQLParser.COMMA);
            this.state = 2468;
            this.expr();
            this.state = 2469;
            this.match(YQLParser.COMMA);
            this.state = 2470;
            this.expr();
            this.state = 2471;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public result_column(): Result_columnContext {
        let localContext = new Result_columnContext(this.context, this.state);
        this.enterRule(localContext, 336, YQLParser.RULE_result_column);
        try {
            this.state = 2482;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 224, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2473;
                this.opt_id_prefix();
                this.state = 2474;
                this.match(YQLParser.ASTERISK);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2476;
                this.expr();
                this.state = 2480;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 223, this.context) ) {
                case 1:
                    {
                    this.state = 2477;
                    this.match(YQLParser.AS);
                    this.state = 2478;
                    this.an_id_or_type();
                    }
                    break;
                case 2:
                    {
                    this.state = 2479;
                    this.an_id_as_compat();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_source(): Join_sourceContext {
        let localContext = new Join_sourceContext(this.context, this.state);
        this.enterRule(localContext, 338, YQLParser.RULE_join_source);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2485;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 225, this.context) ) {
            case 1:
                {
                this.state = 2484;
                this.match(YQLParser.ANY);
                }
                break;
            }
            this.state = 2487;
            this.flatten_source();
            this.state = 2498;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25 || _la === 88 || _la === 126 || _la === 143 || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 268443777) !== 0) || _la === 213 || _la === 254) {
                {
                {
                this.state = 2488;
                this.join_op();
                this.state = 2490;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 226, this.context) ) {
                case 1:
                    {
                    this.state = 2489;
                    this.match(YQLParser.ANY);
                    }
                    break;
                }
                this.state = 2492;
                this.flatten_source();
                this.state = 2494;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 205 || _la === 306) {
                    {
                    this.state = 2493;
                    this.join_constraint();
                    }
                }

                }
                }
                this.state = 2500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_column(): Named_columnContext {
        let localContext = new Named_columnContext(this.context, this.state);
        this.enterRule(localContext, 340, YQLParser.RULE_named_column);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2501;
            this.column_name();
            this.state = 2504;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 2502;
                this.match(YQLParser.AS);
                this.state = 2503;
                this.an_id();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flatten_by_arg(): Flatten_by_argContext {
        let localContext = new Flatten_by_argContext(this.context, this.state);
        this.enterRule(localContext, 342, YQLParser.RULE_flatten_by_arg);
        let _la: number;
        try {
            this.state = 2514;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2506;
                this.named_column();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2507;
                this.match(YQLParser.LPAREN);
                this.state = 2508;
                this.named_expr_list();
                this.state = 2510;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2509;
                    this.match(YQLParser.COMMA);
                    }
                }

                this.state = 2512;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flatten_source(): Flatten_sourceContext {
        let localContext = new Flatten_sourceContext(this.context, this.state);
        this.enterRule(localContext, 344, YQLParser.RULE_flatten_source);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2516;
            this.named_single_source();
            this.state = 2526;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 137) {
                {
                this.state = 2517;
                this.match(YQLParser.FLATTEN);
                this.state = 2524;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.BY:
                case YQLParser.DICT:
                case YQLParser.LIST:
                case YQLParser.OPTIONAL:
                    {
                    this.state = 2519;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 106 || _la === 183 || _la === 209) {
                        {
                        this.state = 2518;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 106 || _la === 183 || _la === 209)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 2521;
                    this.match(YQLParser.BY);
                    this.state = 2522;
                    this.flatten_by_arg();
                    }
                    break;
                case YQLParser.COLUMNS:
                    {
                    this.state = 2523;
                    this.match(YQLParser.COLUMNS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_single_source(): Named_single_sourceContext {
        let localContext = new Named_single_sourceContext(this.context, this.state);
        this.enterRule(localContext, 346, YQLParser.RULE_named_single_source);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2528;
            this.single_source();
            this.state = 2530;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
            case 1:
                {
                this.state = 2529;
                this.row_pattern_recognition_clause();
                }
                break;
            }
            this.state = 2540;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
            case 1:
                {
                this.state = 2535;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.AS:
                    {
                    this.state = 2532;
                    this.match(YQLParser.AS);
                    this.state = 2533;
                    this.an_id();
                    }
                    break;
                case YQLParser.ABORT:
                case YQLParser.ACTION:
                case YQLParser.ADD:
                case YQLParser.AFTER:
                case YQLParser.ALTER:
                case YQLParser.ANALYZE:
                case YQLParser.AND:
                case YQLParser.ANSI:
                case YQLParser.ARRAY:
                case YQLParser.ASC:
                case YQLParser.ASYNC:
                case YQLParser.AT:
                case YQLParser.ATTACH:
                case YQLParser.ATTRIBUTES:
                case YQLParser.AUTOINCREMENT:
                case YQLParser.BACKUP:
                case YQLParser.COLLECTION:
                case YQLParser.BEFORE:
                case YQLParser.BEGIN:
                case YQLParser.BERNOULLI:
                case YQLParser.BY:
                case YQLParser.CASCADE:
                case YQLParser.CHANGEFEED:
                case YQLParser.CHECK:
                case YQLParser.CLASSIFIER:
                case YQLParser.COMMIT:
                case YQLParser.CONDITIONAL:
                case YQLParser.CONFLICT:
                case YQLParser.CONNECT:
                case YQLParser.CONSTRAINT:
                case YQLParser.CONSUMER:
                case YQLParser.COVER:
                case YQLParser.CREATE:
                case YQLParser.CURRENT:
                case YQLParser.DATA:
                case YQLParser.DATABASE:
                case YQLParser.DECIMAL:
                case YQLParser.DECLARE:
                case YQLParser.DEFAULT:
                case YQLParser.DEFERRABLE:
                case YQLParser.DEFERRED:
                case YQLParser.DELETE:
                case YQLParser.DESC:
                case YQLParser.DESCRIBE:
                case YQLParser.DETACH:
                case YQLParser.DIRECTORY:
                case YQLParser.DISABLE:
                case YQLParser.DISCARD:
                case YQLParser.DROP:
                case YQLParser.EACH:
                case YQLParser.ELSE:
                case YQLParser.EMPTY:
                case YQLParser.ENCRYPTED:
                case YQLParser.END:
                case YQLParser.ERROR:
                case YQLParser.ESCAPE:
                case YQLParser.EVALUATE:
                case YQLParser.EXCLUDE:
                case YQLParser.EXCLUSIVE:
                case YQLParser.EXPLAIN:
                case YQLParser.EXPORT:
                case YQLParser.EXTERNAL:
                case YQLParser.FAIL:
                case YQLParser.FAMILY:
                case YQLParser.FILTER:
                case YQLParser.FIRST:
                case YQLParser.FLATTEN:
                case YQLParser.FOLLOWING:
                case YQLParser.FOR:
                case YQLParser.FOREIGN:
                case YQLParser.FUNCTION:
                case YQLParser.GLOB:
                case YQLParser.GRANT:
                case YQLParser.GROUP:
                case YQLParser.GROUPING:
                case YQLParser.HASH:
                case YQLParser.IF:
                case YQLParser.IGNORE:
                case YQLParser.ILIKE:
                case YQLParser.IMMEDIATE:
                case YQLParser.IMPORT:
                case YQLParser.IN:
                case YQLParser.INCREMENTAL:
                case YQLParser.INDEX:
                case YQLParser.INDEXED:
                case YQLParser.INHERITS:
                case YQLParser.INITIAL:
                case YQLParser.INITIALLY:
                case YQLParser.INSERT:
                case YQLParser.INSTEAD:
                case YQLParser.INTO:
                case YQLParser.IS:
                case YQLParser.LAST:
                case YQLParser.LEGACY:
                case YQLParser.LIKE:
                case YQLParser.MANAGE:
                case YQLParser.MATCH:
                case YQLParser.MATCHES:
                case YQLParser.MATCH_RECOGNIZE:
                case YQLParser.MEASURES:
                case YQLParser.MICROSECONDS:
                case YQLParser.MILLISECONDS:
                case YQLParser.MODIFY:
                case YQLParser.NANOSECONDS:
                case YQLParser.NEXT:
                case YQLParser.NO:
                case YQLParser.NULLS:
                case YQLParser.OBJECT:
                case YQLParser.OF:
                case YQLParser.OFFSET:
                case YQLParser.OMIT:
                case YQLParser.ONE:
                case YQLParser.ONLY:
                case YQLParser.OPTION:
                case YQLParser.OR:
                case YQLParser.OTHERS:
                case YQLParser.PARALLEL:
                case YQLParser.PARTITION:
                case YQLParser.PASSING:
                case YQLParser.PASSWORD:
                case YQLParser.PAST:
                case YQLParser.PATTERN:
                case YQLParser.PER:
                case YQLParser.PERMUTE:
                case YQLParser.PLAN:
                case YQLParser.POOL:
                case YQLParser.PRAGMA:
                case YQLParser.PRECEDING:
                case YQLParser.PRIMARY:
                case YQLParser.PRIVILEGES:
                case YQLParser.QUEUE:
                case YQLParser.RAISE:
                case YQLParser.REFERENCES:
                case YQLParser.REGEXP:
                case YQLParser.REINDEX:
                case YQLParser.RELEASE:
                case YQLParser.REMOVE:
                case YQLParser.RENAME:
                case YQLParser.REPLACE:
                case YQLParser.REPLICATION:
                case YQLParser.RESET:
                case YQLParser.RESPECT:
                case YQLParser.RESTORE:
                case YQLParser.RESTRICT:
                case YQLParser.REVERT:
                case YQLParser.REVOKE:
                case YQLParser.RLIKE:
                case YQLParser.ROLLBACK:
                case YQLParser.ROW:
                case YQLParser.SAVEPOINT:
                case YQLParser.SECONDS:
                case YQLParser.SEEK:
                case YQLParser.SETS:
                case YQLParser.SHOW:
                case YQLParser.TSKIP:
                case YQLParser.SOURCE:
                case YQLParser.SUBQUERY:
                case YQLParser.SUBSET:
                case YQLParser.SYMBOLS:
                case YQLParser.SYNC:
                case YQLParser.SYSTEM:
                case YQLParser.TABLE:
                case YQLParser.TABLES:
                case YQLParser.TABLESAMPLE:
                case YQLParser.TABLESTORE:
                case YQLParser.TEMP:
                case YQLParser.TEMPORARY:
                case YQLParser.THEN:
                case YQLParser.TIES:
                case YQLParser.TO:
                case YQLParser.TOPIC:
                case YQLParser.TRANSACTION:
                case YQLParser.TRIGGER:
                case YQLParser.TYPE:
                case YQLParser.UNCONDITIONAL:
                case YQLParser.UNIQUE:
                case YQLParser.UNKNOWN:
                case YQLParser.UNMATCHED:
                case YQLParser.UPDATE:
                case YQLParser.UPSERT:
                case YQLParser.USE:
                case YQLParser.USER:
                case YQLParser.VACUUM:
                case YQLParser.VALUES:
                case YQLParser.VIRTUAL:
                case YQLParser.WRAPPER:
                case YQLParser.XOR:
                case YQLParser.STRING_VALUE:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 2534;
                    this.an_id_as_compat();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2538;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26) {
                    {
                    this.state = 2537;
                    this.pure_column_list();
                    }
                }

                }
                break;
            }
            this.state = 2544;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SAMPLE:
                {
                this.state = 2542;
                this.sample_clause();
                }
                break;
            case YQLParser.TABLESAMPLE:
                {
                this.state = 2543;
                this.tablesample_clause();
                }
                break;
            case YQLParser.EOF:
            case YQLParser.SEMICOLON:
            case YQLParser.COMMA:
            case YQLParser.RPAREN:
            case YQLParser.ASSUME:
            case YQLParser.CROSS:
            case YQLParser.END:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUSION:
            case YQLParser.FLATTEN:
            case YQLParser.FULL:
            case YQLParser.GROUP:
            case YQLParser.HAVING:
            case YQLParser.INNER:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.JOIN:
            case YQLParser.LEFT:
            case YQLParser.LIMIT:
            case YQLParser.NATURAL:
            case YQLParser.ON:
            case YQLParser.ORDER:
            case YQLParser.OUTER:
            case YQLParser.PRESORT:
            case YQLParser.RETURNING:
            case YQLParser.RIGHT:
            case YQLParser.SELECT:
            case YQLParser.UNION:
            case YQLParser.USING:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public single_source(): Single_sourceContext {
        let localContext = new Single_sourceContext(this.context, this.state);
        this.enterRule(localContext, 348, YQLParser.RULE_single_source);
        try {
            this.state = 2555;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2546;
                this.table_ref();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2547;
                this.match(YQLParser.LPAREN);
                this.state = 2548;
                this.select_stmt();
                this.state = 2549;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2551;
                this.match(YQLParser.LPAREN);
                this.state = 2552;
                this.values_stmt();
                this.state = 2553;
                this.match(YQLParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sample_clause(): Sample_clauseContext {
        let localContext = new Sample_clauseContext(this.context, this.state);
        this.enterRule(localContext, 350, YQLParser.RULE_sample_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2557;
            this.match(YQLParser.SAMPLE);
            this.state = 2558;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablesample_clause(): Tablesample_clauseContext {
        let localContext = new Tablesample_clauseContext(this.context, this.state);
        this.enterRule(localContext, 352, YQLParser.RULE_tablesample_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2560;
            this.match(YQLParser.TABLESAMPLE);
            this.state = 2561;
            this.sampling_mode();
            this.state = 2562;
            this.match(YQLParser.LPAREN);
            this.state = 2563;
            this.expr();
            this.state = 2564;
            this.match(YQLParser.RPAREN);
            this.state = 2566;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 241) {
                {
                this.state = 2565;
                this.repeatable_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampling_mode(): Sampling_modeContext {
        let localContext = new Sampling_modeContext(this.context, this.state);
        this.enterRule(localContext, 354, YQLParser.RULE_sampling_mode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2568;
            _la = this.tokenStream.LA(1);
            if(!(_la === 65 || _la === 279)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public repeatable_clause(): Repeatable_clauseContext {
        let localContext = new Repeatable_clauseContext(this.context, this.state);
        this.enterRule(localContext, 356, YQLParser.RULE_repeatable_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2570;
            this.match(YQLParser.REPEATABLE);
            this.state = 2571;
            this.match(YQLParser.LPAREN);
            this.state = 2572;
            this.expr();
            this.state = 2573;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_op(): Join_opContext {
        let localContext = new Join_opContext(this.context, this.state);
        this.enterRule(localContext, 358, YQLParser.RULE_join_op);
        let _la: number;
        try {
            this.state = 2599;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.COMMA:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2575;
                this.match(YQLParser.COMMA);
                }
                break;
            case YQLParser.CROSS:
            case YQLParser.EXCLUSION:
            case YQLParser.FULL:
            case YQLParser.INNER:
            case YQLParser.JOIN:
            case YQLParser.LEFT:
            case YQLParser.NATURAL:
            case YQLParser.OUTER:
            case YQLParser.RIGHT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2577;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 2576;
                    this.match(YQLParser.NATURAL);
                    }
                }

                this.state = 2596;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.EXCLUSION:
                case YQLParser.FULL:
                case YQLParser.JOIN:
                case YQLParser.LEFT:
                case YQLParser.OUTER:
                case YQLParser.RIGHT:
                    {
                    this.state = 2589;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case YQLParser.LEFT:
                        {
                        this.state = 2579;
                        this.match(YQLParser.LEFT);
                        this.state = 2581;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 207 || _la === 266) {
                            {
                            this.state = 2580;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 207 || _la === 266)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                        }

                        }
                        break;
                    case YQLParser.RIGHT:
                        {
                        this.state = 2583;
                        this.match(YQLParser.RIGHT);
                        this.state = 2585;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 207 || _la === 266) {
                            {
                            this.state = 2584;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 207 || _la === 266)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                        }

                        }
                        break;
                    case YQLParser.EXCLUSION:
                        {
                        this.state = 2587;
                        this.match(YQLParser.EXCLUSION);
                        }
                        break;
                    case YQLParser.FULL:
                        {
                        this.state = 2588;
                        this.match(YQLParser.FULL);
                        }
                        break;
                    case YQLParser.JOIN:
                    case YQLParser.OUTER:
                        break;
                    default:
                        break;
                    }
                    this.state = 2592;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 213) {
                        {
                        this.state = 2591;
                        this.match(YQLParser.OUTER);
                        }
                    }

                    }
                    break;
                case YQLParser.INNER:
                    {
                    this.state = 2594;
                    this.match(YQLParser.INNER);
                    }
                    break;
                case YQLParser.CROSS:
                    {
                    this.state = 2595;
                    this.match(YQLParser.CROSS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2598;
                this.match(YQLParser.JOIN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_constraint(): Join_constraintContext {
        let localContext = new Join_constraintContext(this.context, this.state);
        this.enterRule(localContext, 360, YQLParser.RULE_join_constraint);
        try {
            this.state = 2605;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2601;
                this.match(YQLParser.ON);
                this.state = 2602;
                this.expr();
                }
                break;
            case YQLParser.USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2603;
                this.match(YQLParser.USING);
                this.state = 2604;
                this.pure_column_or_named_list();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returning_columns_list(): Returning_columns_listContext {
        let localContext = new Returning_columns_listContext(this.context, this.state);
        this.enterRule(localContext, 362, YQLParser.RULE_returning_columns_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2607;
            this.match(YQLParser.RETURNING);
            this.state = 2617;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ASTERISK:
                {
                this.state = 2608;
                this.match(YQLParser.ASTERISK);
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 2609;
                this.an_id();
                this.state = 2614;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 2610;
                    this.match(YQLParser.COMMA);
                    this.state = 2611;
                    this.an_id();
                    }
                    }
                    this.state = 2616;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_table_stmt(): Into_table_stmtContext {
        let localContext = new Into_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 364, YQLParser.RULE_into_table_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2631;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 252, this.context) ) {
            case 1:
                {
                this.state = 2619;
                this.match(YQLParser.INSERT);
                }
                break;
            case 2:
                {
                this.state = 2620;
                this.match(YQLParser.INSERT);
                this.state = 2621;
                this.match(YQLParser.OR);
                this.state = 2622;
                this.match(YQLParser.ABORT);
                }
                break;
            case 3:
                {
                this.state = 2623;
                this.match(YQLParser.INSERT);
                this.state = 2624;
                this.match(YQLParser.OR);
                this.state = 2625;
                this.match(YQLParser.REVERT);
                }
                break;
            case 4:
                {
                this.state = 2626;
                this.match(YQLParser.INSERT);
                this.state = 2627;
                this.match(YQLParser.OR);
                this.state = 2628;
                this.match(YQLParser.IGNORE);
                }
                break;
            case 5:
                {
                this.state = 2629;
                this.match(YQLParser.UPSERT);
                }
                break;
            case 6:
                {
                this.state = 2630;
                this.match(YQLParser.REPLACE);
                }
                break;
            }
            this.state = 2633;
            this.match(YQLParser.INTO);
            this.state = 2634;
            this.into_simple_table_ref();
            this.state = 2635;
            this.into_values_source();
            this.state = 2637;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251) {
                {
                this.state = 2636;
                this.returning_columns_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_table_stmt_yq(): Into_table_stmt_yqContext {
        let localContext = new Into_table_stmt_yqContext(this.context, this.state);
        this.enterRule(localContext, 366, YQLParser.RULE_into_table_stmt_yq);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2650;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
            case 1:
                {
                this.state = 2639;
                this.match(YQLParser.INSERT);
                }
                break;
            case 2:
                {
                this.state = 2640;
                this.match(YQLParser.INSERT);
                this.state = 2641;
                this.match(YQLParser.OR);
                this.state = 2642;
                this.match(YQLParser.ABORT);
                }
                break;
            case 3:
                {
                this.state = 2643;
                this.match(YQLParser.INSERT);
                this.state = 2644;
                this.match(YQLParser.OR);
                this.state = 2645;
                this.match(YQLParser.REVERT);
                }
                break;
            case 4:
                {
                this.state = 2646;
                this.match(YQLParser.INSERT);
                this.state = 2647;
                this.match(YQLParser.OR);
                this.state = 2648;
                this.match(YQLParser.IGNORE);
                }
                break;
            case 5:
                {
                this.state = 2649;
                this.match(YQLParser.REPLACE);
                }
                break;
            }
            this.state = 2652;
            this.match(YQLParser.INTO);
            this.state = 2653;
            this.into_simple_table_ref();
            this.state = 2654;
            this.into_values_source();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_values_source(): Into_values_sourceContext {
        let localContext = new Into_values_sourceContext(this.context, this.state);
        this.enterRule(localContext, 368, YQLParser.RULE_into_values_source);
        try {
            this.state = 2662;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LPAREN:
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
            case YQLParser.VALUES:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2657;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
                case 1:
                    {
                    this.state = 2656;
                    this.pure_column_list();
                    }
                    break;
                }
                this.state = 2659;
                this.values_source();
                }
                break;
            case YQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2660;
                this.match(YQLParser.DEFAULT);
                this.state = 2661;
                this.match(YQLParser.VALUES);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_stmt(): Values_stmtContext {
        let localContext = new Values_stmtContext(this.context, this.state);
        this.enterRule(localContext, 370, YQLParser.RULE_values_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2664;
            this.match(YQLParser.VALUES);
            this.state = 2665;
            this.values_source_row_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_source(): Values_sourceContext {
        let localContext = new Values_sourceContext(this.context, this.state);
        this.enterRule(localContext, 372, YQLParser.RULE_values_source);
        try {
            this.state = 2669;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.VALUES:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2667;
                this.values_stmt();
                }
                break;
            case YQLParser.LPAREN:
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2668;
                this.select_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_source_row_list(): Values_source_row_listContext {
        let localContext = new Values_source_row_listContext(this.context, this.state);
        this.enterRule(localContext, 374, YQLParser.RULE_values_source_row_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2671;
            this.values_source_row();
            this.state = 2676;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2672;
                this.match(YQLParser.COMMA);
                this.state = 2673;
                this.values_source_row();
                }
                }
                this.state = 2678;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_source_row(): Values_source_rowContext {
        let localContext = new Values_source_rowContext(this.context, this.state);
        this.enterRule(localContext, 376, YQLParser.RULE_values_source_row);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2679;
            this.match(YQLParser.LPAREN);
            this.state = 2680;
            this.expr_list();
            this.state = 2681;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_values_source(): Simple_values_sourceContext {
        let localContext = new Simple_values_sourceContext(this.context, this.state);
        this.enterRule(localContext, 378, YQLParser.RULE_simple_values_source);
        try {
            this.state = 2685;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2683;
                this.expr_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2684;
                this.select_stmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_external_data_source_stmt(): Create_external_data_source_stmtContext {
        let localContext = new Create_external_data_source_stmtContext(this.context, this.state);
        this.enterRule(localContext, 380, YQLParser.RULE_create_external_data_source_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2687;
            this.match(YQLParser.CREATE);
            this.state = 2690;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 210) {
                {
                this.state = 2688;
                this.match(YQLParser.OR);
                this.state = 2689;
                this.match(YQLParser.REPLACE);
                }
            }

            this.state = 2692;
            this.match(YQLParser.EXTERNAL);
            this.state = 2693;
            this.match(YQLParser.DATA);
            this.state = 2694;
            this.match(YQLParser.SOURCE);
            this.state = 2698;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 261, this.context) ) {
            case 1:
                {
                this.state = 2695;
                this.match(YQLParser.IF);
                this.state = 2696;
                this.match(YQLParser.NOT);
                this.state = 2697;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2700;
            this.object_ref();
            this.state = 2701;
            this.with_table_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_data_source_stmt(): Alter_external_data_source_stmtContext {
        let localContext = new Alter_external_data_source_stmtContext(this.context, this.state);
        this.enterRule(localContext, 382, YQLParser.RULE_alter_external_data_source_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2703;
            this.match(YQLParser.ALTER);
            this.state = 2704;
            this.match(YQLParser.EXTERNAL);
            this.state = 2705;
            this.match(YQLParser.DATA);
            this.state = 2706;
            this.match(YQLParser.SOURCE);
            this.state = 2707;
            this.object_ref();
            this.state = 2708;
            this.alter_external_data_source_action();
            this.state = 2713;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2709;
                this.match(YQLParser.COMMA);
                this.state = 2710;
                this.alter_external_data_source_action();
                }
                }
                this.state = 2715;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_data_source_action(): Alter_external_data_source_actionContext {
        let localContext = new Alter_external_data_source_actionContext(this.context, this.state);
        this.enterRule(localContext, 384, YQLParser.RULE_alter_external_data_source_action);
        try {
            this.state = 2719;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 263, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2716;
                this.alter_table_set_table_setting_uncompat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2717;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2718;
                this.alter_table_reset_table_setting();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_external_data_source_stmt(): Drop_external_data_source_stmtContext {
        let localContext = new Drop_external_data_source_stmtContext(this.context, this.state);
        this.enterRule(localContext, 386, YQLParser.RULE_drop_external_data_source_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2721;
            this.match(YQLParser.DROP);
            this.state = 2722;
            this.match(YQLParser.EXTERNAL);
            this.state = 2723;
            this.match(YQLParser.DATA);
            this.state = 2724;
            this.match(YQLParser.SOURCE);
            this.state = 2727;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 264, this.context) ) {
            case 1:
                {
                this.state = 2725;
                this.match(YQLParser.IF);
                this.state = 2726;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2729;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_view_stmt(): Create_view_stmtContext {
        let localContext = new Create_view_stmtContext(this.context, this.state);
        this.enterRule(localContext, 388, YQLParser.RULE_create_view_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2731;
            this.match(YQLParser.CREATE);
            this.state = 2732;
            this.match(YQLParser.VIEW);
            this.state = 2736;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 265, this.context) ) {
            case 1:
                {
                this.state = 2733;
                this.match(YQLParser.IF);
                this.state = 2734;
                this.match(YQLParser.NOT);
                this.state = 2735;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2738;
            this.object_ref();
            this.state = 2740;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 2739;
                this.create_object_features();
                }
            }

            this.state = 2742;
            this.match(YQLParser.AS);
            this.state = 2743;
            this.select_stmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_view_stmt(): Drop_view_stmtContext {
        let localContext = new Drop_view_stmtContext(this.context, this.state);
        this.enterRule(localContext, 390, YQLParser.RULE_drop_view_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2745;
            this.match(YQLParser.DROP);
            this.state = 2746;
            this.match(YQLParser.VIEW);
            this.state = 2749;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 267, this.context) ) {
            case 1:
                {
                this.state = 2747;
                this.match(YQLParser.IF);
                this.state = 2748;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2751;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public upsert_object_stmt(): Upsert_object_stmtContext {
        let localContext = new Upsert_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 392, YQLParser.RULE_upsert_object_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2753;
            this.match(YQLParser.UPSERT);
            this.state = 2754;
            this.match(YQLParser.OBJECT);
            this.state = 2755;
            this.object_ref();
            this.state = 2756;
            this.match(YQLParser.LPAREN);
            this.state = 2757;
            this.match(YQLParser.TYPE);
            this.state = 2758;
            this.object_type_ref();
            this.state = 2759;
            this.match(YQLParser.RPAREN);
            this.state = 2761;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 2760;
                this.create_object_features();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_object_stmt(): Create_object_stmtContext {
        let localContext = new Create_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 394, YQLParser.RULE_create_object_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2763;
            this.match(YQLParser.CREATE);
            this.state = 2764;
            this.match(YQLParser.OBJECT);
            this.state = 2768;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 269, this.context) ) {
            case 1:
                {
                this.state = 2765;
                this.match(YQLParser.IF);
                this.state = 2766;
                this.match(YQLParser.NOT);
                this.state = 2767;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2770;
            this.object_ref();
            this.state = 2771;
            this.match(YQLParser.LPAREN);
            this.state = 2772;
            this.match(YQLParser.TYPE);
            this.state = 2773;
            this.object_type_ref();
            this.state = 2774;
            this.match(YQLParser.RPAREN);
            this.state = 2776;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 2775;
                this.create_object_features();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_object_features(): Create_object_featuresContext {
        let localContext = new Create_object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 396, YQLParser.RULE_create_object_features);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2778;
            this.match(YQLParser.WITH);
            this.state = 2779;
            this.object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_object_stmt(): Alter_object_stmtContext {
        let localContext = new Alter_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 398, YQLParser.RULE_alter_object_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2781;
            this.match(YQLParser.ALTER);
            this.state = 2782;
            this.match(YQLParser.OBJECT);
            this.state = 2783;
            this.object_ref();
            this.state = 2784;
            this.match(YQLParser.LPAREN);
            this.state = 2785;
            this.match(YQLParser.TYPE);
            this.state = 2786;
            this.object_type_ref();
            this.state = 2787;
            this.match(YQLParser.RPAREN);
            this.state = 2788;
            this.alter_object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_object_features(): Alter_object_featuresContext {
        let localContext = new Alter_object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 400, YQLParser.RULE_alter_object_features);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2790;
            this.match(YQLParser.SET);
            this.state = 2791;
            this.object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_object_stmt(): Drop_object_stmtContext {
        let localContext = new Drop_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 402, YQLParser.RULE_drop_object_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2793;
            this.match(YQLParser.DROP);
            this.state = 2794;
            this.match(YQLParser.OBJECT);
            this.state = 2797;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 271, this.context) ) {
            case 1:
                {
                this.state = 2795;
                this.match(YQLParser.IF);
                this.state = 2796;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2799;
            this.object_ref();
            this.state = 2800;
            this.match(YQLParser.LPAREN);
            this.state = 2801;
            this.match(YQLParser.TYPE);
            this.state = 2802;
            this.object_type_ref();
            this.state = 2803;
            this.match(YQLParser.RPAREN);
            this.state = 2805;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 2804;
                this.drop_object_features();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_object_features(): Drop_object_featuresContext {
        let localContext = new Drop_object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 404, YQLParser.RULE_drop_object_features);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2807;
            this.match(YQLParser.WITH);
            this.state = 2808;
            this.object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature_value(): Object_feature_valueContext {
        let localContext = new Object_feature_valueContext(this.context, this.state);
        this.enterRule(localContext, 406, YQLParser.RULE_object_feature_value);
        try {
            this.state = 2814;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2810;
                this.id_or_type();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2811;
                this.bind_parameter();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2812;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.FALSE:
            case YQLParser.TRUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2813;
                this.bool_value();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature_kv(): Object_feature_kvContext {
        let localContext = new Object_feature_kvContext(this.context, this.state);
        this.enterRule(localContext, 408, YQLParser.RULE_object_feature_kv);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2816;
            this.an_id_or_type();
            this.state = 2817;
            this.match(YQLParser.EQUALS);
            this.state = 2818;
            this.object_feature_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature_flag(): Object_feature_flagContext {
        let localContext = new Object_feature_flagContext(this.context, this.state);
        this.enterRule(localContext, 410, YQLParser.RULE_object_feature_flag);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2820;
            this.an_id_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature(): Object_featureContext {
        let localContext = new Object_featureContext(this.context, this.state);
        this.enterRule(localContext, 412, YQLParser.RULE_object_feature);
        try {
            this.state = 2824;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 274, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2822;
                this.object_feature_kv();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2823;
                this.object_feature_flag();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_features(): Object_featuresContext {
        let localContext = new Object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 414, YQLParser.RULE_object_features);
        let _la: number;
        try {
            this.state = 2838;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2826;
                this.object_feature();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2827;
                this.match(YQLParser.LPAREN);
                this.state = 2828;
                this.object_feature();
                this.state = 2833;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 2829;
                    this.match(YQLParser.COMMA);
                    this.state = 2830;
                    this.object_feature();
                    }
                    }
                    this.state = 2835;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2836;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_type_ref(): Object_type_refContext {
        let localContext = new Object_type_refContext(this.context, this.state);
        this.enterRule(localContext, 416, YQLParser.RULE_object_type_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2840;
            this.an_id_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_table_stmt(): Create_table_stmtContext {
        let localContext = new Create_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 418, YQLParser.RULE_create_table_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2842;
            this.match(YQLParser.CREATE);
            this.state = 2845;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 210) {
                {
                this.state = 2843;
                this.match(YQLParser.OR);
                this.state = 2844;
                this.match(YQLParser.REPLACE);
                }
            }

            this.state = 2855;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.TABLE:
                {
                this.state = 2847;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TABLESTORE:
                {
                this.state = 2848;
                this.match(YQLParser.TABLESTORE);
                }
                break;
            case YQLParser.EXTERNAL:
                {
                this.state = 2849;
                this.match(YQLParser.EXTERNAL);
                this.state = 2850;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TEMP:
                {
                this.state = 2851;
                this.match(YQLParser.TEMP);
                this.state = 2852;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TEMPORARY:
                {
                this.state = 2853;
                this.match(YQLParser.TEMPORARY);
                this.state = 2854;
                this.match(YQLParser.TABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2860;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 279, this.context) ) {
            case 1:
                {
                this.state = 2857;
                this.match(YQLParser.IF);
                this.state = 2858;
                this.match(YQLParser.NOT);
                this.state = 2859;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2862;
            this.simple_table_ref();
            this.state = 2863;
            this.match(YQLParser.LPAREN);
            this.state = 2864;
            this.create_table_entry();
            this.state = 2869;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 280, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2865;
                    this.match(YQLParser.COMMA);
                    this.state = 2866;
                    this.create_table_entry();
                    }
                    }
                }
                this.state = 2871;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 280, this.context);
            }
            this.state = 2873;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 2872;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 2875;
            this.match(YQLParser.RPAREN);
            this.state = 2877;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 163) {
                {
                this.state = 2876;
                this.table_inherits();
                }
            }

            this.state = 2880;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 216) {
                {
                this.state = 2879;
                this.table_partition_by();
                }
            }

            this.state = 2883;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 2882;
                this.with_table_settings();
                }
            }

            this.state = 2886;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 283) {
                {
                this.state = 2885;
                this.table_tablestore();
                }
            }

            this.state = 2889;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 2888;
                this.table_as_source();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_table_entry(): Create_table_entryContext {
        let localContext = new Create_table_entryContext(this.context, this.state);
        this.enterRule(localContext, 420, YQLParser.RULE_create_table_entry);
        try {
            this.state = 2897;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 287, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2891;
                this.column_schema();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2892;
                this.table_constraint();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2893;
                this.table_index();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2894;
                this.family_entry();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2895;
                this.changefeed();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2896;
                this.an_id_schema();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_backup_collection_stmt(): Create_backup_collection_stmtContext {
        let localContext = new Create_backup_collection_stmtContext(this.context, this.state);
        this.enterRule(localContext, 422, YQLParser.RULE_create_backup_collection_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2899;
            this.match(YQLParser.CREATE);
            this.state = 2900;
            this.backup_collection();
            this.state = 2902;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26 || _la === 95) {
                {
                this.state = 2901;
                this.create_backup_collection_entries();
                }
            }

            this.state = 2904;
            this.match(YQLParser.WITH);
            this.state = 2905;
            this.match(YQLParser.LPAREN);
            this.state = 2906;
            this.backup_collection_settings();
            this.state = 2907;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_backup_collection_stmt(): Alter_backup_collection_stmtContext {
        let localContext = new Alter_backup_collection_stmtContext(this.context, this.state);
        this.enterRule(localContext, 424, YQLParser.RULE_alter_backup_collection_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2909;
            this.match(YQLParser.ALTER);
            this.state = 2910;
            this.backup_collection();
            this.state = 2913;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.RESET:
            case YQLParser.SET:
                {
                this.state = 2911;
                this.alter_backup_collection_actions();
                }
                break;
            case YQLParser.ADD:
            case YQLParser.DROP:
                {
                this.state = 2912;
                this.alter_backup_collection_entries();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_backup_collection_stmt(): Drop_backup_collection_stmtContext {
        let localContext = new Drop_backup_collection_stmtContext(this.context, this.state);
        this.enterRule(localContext, 426, YQLParser.RULE_drop_backup_collection_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2915;
            this.match(YQLParser.DROP);
            this.state = 2916;
            this.backup_collection();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_backup_collection_entries(): Create_backup_collection_entriesContext {
        let localContext = new Create_backup_collection_entriesContext(this.context, this.state);
        this.enterRule(localContext, 428, YQLParser.RULE_create_backup_collection_entries);
        try {
            this.state = 2920;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DATABASE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2918;
                this.match(YQLParser.DATABASE);
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2919;
                this.create_backup_collection_entries_many();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_backup_collection_entries_many(): Create_backup_collection_entries_manyContext {
        let localContext = new Create_backup_collection_entries_manyContext(this.context, this.state);
        this.enterRule(localContext, 430, YQLParser.RULE_create_backup_collection_entries_many);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2922;
            this.match(YQLParser.LPAREN);
            this.state = 2923;
            this.table_list();
            this.state = 2924;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_list(): Table_listContext {
        let localContext = new Table_listContext(this.context, this.state);
        this.enterRule(localContext, 432, YQLParser.RULE_table_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2926;
            this.match(YQLParser.TABLE);
            this.state = 2927;
            this.an_id_table();
            this.state = 2933;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2928;
                this.match(YQLParser.COMMA);
                this.state = 2929;
                this.match(YQLParser.TABLE);
                this.state = 2930;
                this.an_id_table();
                }
                }
                this.state = 2935;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_backup_collection_actions(): Alter_backup_collection_actionsContext {
        let localContext = new Alter_backup_collection_actionsContext(this.context, this.state);
        this.enterRule(localContext, 434, YQLParser.RULE_alter_backup_collection_actions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2936;
            this.alter_backup_collection_action();
            this.state = 2941;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2937;
                this.match(YQLParser.COMMA);
                this.state = 2938;
                this.alter_backup_collection_action();
                }
                }
                this.state = 2943;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_backup_collection_action(): Alter_backup_collection_actionContext {
        let localContext = new Alter_backup_collection_actionContext(this.context, this.state);
        this.enterRule(localContext, 436, YQLParser.RULE_alter_backup_collection_action);
        try {
            this.state = 2946;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2944;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2945;
                this.alter_table_reset_table_setting();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_backup_collection_entries(): Alter_backup_collection_entriesContext {
        let localContext = new Alter_backup_collection_entriesContext(this.context, this.state);
        this.enterRule(localContext, 438, YQLParser.RULE_alter_backup_collection_entries);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2948;
            this.alter_backup_collection_entry();
            this.state = 2953;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2949;
                this.match(YQLParser.COMMA);
                this.state = 2950;
                this.alter_backup_collection_entry();
                }
                }
                this.state = 2955;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_backup_collection_entry(): Alter_backup_collection_entryContext {
        let localContext = new Alter_backup_collection_entryContext(this.context, this.state);
        this.enterRule(localContext, 440, YQLParser.RULE_alter_backup_collection_entry);
        try {
            this.state = 2966;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 295, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2956;
                this.match(YQLParser.ADD);
                this.state = 2957;
                this.match(YQLParser.DATABASE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2958;
                this.match(YQLParser.DROP);
                this.state = 2959;
                this.match(YQLParser.DATABASE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2960;
                this.match(YQLParser.ADD);
                this.state = 2961;
                this.match(YQLParser.TABLE);
                this.state = 2962;
                this.an_id_table();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2963;
                this.match(YQLParser.DROP);
                this.state = 2964;
                this.match(YQLParser.TABLE);
                this.state = 2965;
                this.an_id_table();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public backup_collection(): Backup_collectionContext {
        let localContext = new Backup_collectionContext(this.context, this.state);
        this.enterRule(localContext, 442, YQLParser.RULE_backup_collection);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2968;
            this.match(YQLParser.BACKUP);
            this.state = 2969;
            this.match(YQLParser.COLLECTION);
            this.state = 2970;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public backup_collection_settings(): Backup_collection_settingsContext {
        let localContext = new Backup_collection_settingsContext(this.context, this.state);
        this.enterRule(localContext, 444, YQLParser.RULE_backup_collection_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2972;
            this.backup_collection_settings_entry();
            this.state = 2977;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2973;
                this.match(YQLParser.COMMA);
                this.state = 2974;
                this.backup_collection_settings_entry();
                }
                }
                this.state = 2979;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public backup_collection_settings_entry(): Backup_collection_settings_entryContext {
        let localContext = new Backup_collection_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 446, YQLParser.RULE_backup_collection_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2980;
            this.an_id();
            this.state = 2981;
            this.match(YQLParser.EQUALS);
            this.state = 2982;
            this.table_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public backup_stmt(): Backup_stmtContext {
        let localContext = new Backup_stmtContext(this.context, this.state);
        this.enterRule(localContext, 448, YQLParser.RULE_backup_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2984;
            this.match(YQLParser.BACKUP);
            this.state = 2985;
            this.object_ref();
            this.state = 2987;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 160) {
                {
                this.state = 2986;
                this.match(YQLParser.INCREMENTAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public restore_stmt(): Restore_stmtContext {
        let localContext = new Restore_stmtContext(this.context, this.state);
        this.enterRule(localContext, 450, YQLParser.RULE_restore_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2989;
            this.match(YQLParser.RESTORE);
            this.state = 2990;
            this.object_ref();
            this.state = 2993;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56) {
                {
                this.state = 2991;
                this.match(YQLParser.AT);
                this.state = 2992;
                this.match(YQLParser.STRING_VALUE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_inherits(): Table_inheritsContext {
        let localContext = new Table_inheritsContext(this.context, this.state);
        this.enterRule(localContext, 452, YQLParser.RULE_table_inherits);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2995;
            this.match(YQLParser.INHERITS);
            this.state = 2996;
            this.match(YQLParser.LPAREN);
            this.state = 2997;
            this.simple_table_ref_core();
            this.state = 3002;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2998;
                this.match(YQLParser.COMMA);
                this.state = 2999;
                this.simple_table_ref_core();
                }
                }
                this.state = 3004;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3005;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_partition_by(): Table_partition_byContext {
        let localContext = new Table_partition_byContext(this.context, this.state);
        this.enterRule(localContext, 454, YQLParser.RULE_table_partition_by);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3007;
            this.match(YQLParser.PARTITION);
            this.state = 3008;
            this.match(YQLParser.BY);
            this.state = 3009;
            this.match(YQLParser.HASH);
            this.state = 3010;
            this.pure_column_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_table_settings(): With_table_settingsContext {
        let localContext = new With_table_settingsContext(this.context, this.state);
        this.enterRule(localContext, 456, YQLParser.RULE_with_table_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3012;
            this.match(YQLParser.WITH);
            this.state = 3013;
            this.match(YQLParser.LPAREN);
            this.state = 3014;
            this.table_settings_entry();
            this.state = 3019;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3015;
                this.match(YQLParser.COMMA);
                this.state = 3016;
                this.table_settings_entry();
                }
                }
                this.state = 3021;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3022;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_tablestore(): Table_tablestoreContext {
        let localContext = new Table_tablestoreContext(this.context, this.state);
        this.enterRule(localContext, 458, YQLParser.RULE_table_tablestore);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3024;
            this.match(YQLParser.TABLESTORE);
            this.state = 3025;
            this.simple_table_ref_core();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_settings_entry(): Table_settings_entryContext {
        let localContext = new Table_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 460, YQLParser.RULE_table_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3027;
            this.an_id();
            this.state = 3028;
            this.match(YQLParser.EQUALS);
            this.state = 3029;
            this.table_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_as_source(): Table_as_sourceContext {
        let localContext = new Table_as_sourceContext(this.context, this.state);
        this.enterRule(localContext, 462, YQLParser.RULE_table_as_source);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3031;
            this.match(YQLParser.AS);
            this.state = 3032;
            this.values_source();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_stmt(): Alter_table_stmtContext {
        let localContext = new Alter_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 464, YQLParser.RULE_alter_table_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3034;
            this.match(YQLParser.ALTER);
            this.state = 3035;
            this.match(YQLParser.TABLE);
            this.state = 3036;
            this.simple_table_ref();
            this.state = 3037;
            this.alter_table_action();
            this.state = 3042;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3038;
                this.match(YQLParser.COMMA);
                this.state = 3039;
                this.alter_table_action();
                }
                }
                this.state = 3044;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_action(): Alter_table_actionContext {
        let localContext = new Alter_table_actionContext(this.context, this.state);
        this.enterRule(localContext, 466, YQLParser.RULE_alter_table_action);
        try {
            this.state = 3062;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 302, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3045;
                this.alter_table_add_column();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3046;
                this.alter_table_drop_column();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3047;
                this.alter_table_alter_column();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3048;
                this.alter_table_add_column_family();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3049;
                this.alter_table_alter_column_family();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3050;
                this.alter_table_set_table_setting_uncompat();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3051;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3052;
                this.alter_table_reset_table_setting();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3053;
                this.alter_table_add_index();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3054;
                this.alter_table_drop_index();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3055;
                this.alter_table_rename_to();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3056;
                this.alter_table_add_changefeed();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3057;
                this.alter_table_alter_changefeed();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3058;
                this.alter_table_drop_changefeed();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3059;
                this.alter_table_rename_index_to();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3060;
                this.alter_table_alter_index();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3061;
                this.alter_table_alter_column_drop_not_null();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_table_stmt(): Alter_external_table_stmtContext {
        let localContext = new Alter_external_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 468, YQLParser.RULE_alter_external_table_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3064;
            this.match(YQLParser.ALTER);
            this.state = 3065;
            this.match(YQLParser.EXTERNAL);
            this.state = 3066;
            this.match(YQLParser.TABLE);
            this.state = 3067;
            this.simple_table_ref();
            this.state = 3068;
            this.alter_external_table_action();
            this.state = 3073;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3069;
                this.match(YQLParser.COMMA);
                this.state = 3070;
                this.alter_external_table_action();
                }
                }
                this.state = 3075;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_table_action(): Alter_external_table_actionContext {
        let localContext = new Alter_external_table_actionContext(this.context, this.state);
        this.enterRule(localContext, 470, YQLParser.RULE_alter_external_table_action);
        try {
            this.state = 3081;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 304, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3076;
                this.alter_table_add_column();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3077;
                this.alter_table_drop_column();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3078;
                this.alter_table_set_table_setting_uncompat();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3079;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3080;
                this.alter_table_reset_table_setting();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_store_stmt(): Alter_table_store_stmtContext {
        let localContext = new Alter_table_store_stmtContext(this.context, this.state);
        this.enterRule(localContext, 472, YQLParser.RULE_alter_table_store_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3083;
            this.match(YQLParser.ALTER);
            this.state = 3084;
            this.match(YQLParser.TABLESTORE);
            this.state = 3085;
            this.object_ref();
            this.state = 3086;
            this.alter_table_store_action();
            this.state = 3091;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3087;
                this.match(YQLParser.COMMA);
                this.state = 3088;
                this.alter_table_store_action();
                }
                }
                this.state = 3093;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_store_action(): Alter_table_store_actionContext {
        let localContext = new Alter_table_store_actionContext(this.context, this.state);
        this.enterRule(localContext, 474, YQLParser.RULE_alter_table_store_action);
        try {
            this.state = 3096;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ADD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3094;
                this.alter_table_add_column();
                }
                break;
            case YQLParser.DROP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3095;
                this.alter_table_drop_column();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_column(): Alter_table_add_columnContext {
        let localContext = new Alter_table_add_columnContext(this.context, this.state);
        this.enterRule(localContext, 476, YQLParser.RULE_alter_table_add_column);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3098;
            this.match(YQLParser.ADD);
            this.state = 3100;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 77) {
                {
                this.state = 3099;
                this.match(YQLParser.COLUMN);
                }
            }

            this.state = 3102;
            this.column_schema();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext {
        let localContext = new Alter_table_drop_columnContext(this.context, this.state);
        this.enterRule(localContext, 478, YQLParser.RULE_alter_table_drop_column);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3104;
            this.match(YQLParser.DROP);
            this.state = 3106;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 308, this.context) ) {
            case 1:
                {
                this.state = 3105;
                this.match(YQLParser.COLUMN);
                }
                break;
            }
            this.state = 3108;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_column(): Alter_table_alter_columnContext {
        let localContext = new Alter_table_alter_columnContext(this.context, this.state);
        this.enterRule(localContext, 480, YQLParser.RULE_alter_table_alter_column);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3110;
            this.match(YQLParser.ALTER);
            this.state = 3111;
            this.match(YQLParser.COLUMN);
            this.state = 3112;
            this.an_id();
            this.state = 3113;
            this.match(YQLParser.SET);
            this.state = 3114;
            this.family_relation();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_column_drop_not_null(): Alter_table_alter_column_drop_not_nullContext {
        let localContext = new Alter_table_alter_column_drop_not_nullContext(this.context, this.state);
        this.enterRule(localContext, 482, YQLParser.RULE_alter_table_alter_column_drop_not_null);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3116;
            this.match(YQLParser.ALTER);
            this.state = 3117;
            this.match(YQLParser.COLUMN);
            this.state = 3118;
            this.an_id();
            this.state = 3119;
            this.match(YQLParser.DROP);
            this.state = 3120;
            this.match(YQLParser.NOT);
            this.state = 3121;
            this.match(YQLParser.NULL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_column_family(): Alter_table_add_column_familyContext {
        let localContext = new Alter_table_add_column_familyContext(this.context, this.state);
        this.enterRule(localContext, 484, YQLParser.RULE_alter_table_add_column_family);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3123;
            this.match(YQLParser.ADD);
            this.state = 3124;
            this.family_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_column_family(): Alter_table_alter_column_familyContext {
        let localContext = new Alter_table_alter_column_familyContext(this.context, this.state);
        this.enterRule(localContext, 486, YQLParser.RULE_alter_table_alter_column_family);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3126;
            this.match(YQLParser.ALTER);
            this.state = 3127;
            this.match(YQLParser.FAMILY);
            this.state = 3128;
            this.an_id();
            this.state = 3129;
            this.match(YQLParser.SET);
            this.state = 3130;
            this.an_id();
            this.state = 3131;
            this.family_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext {
        let localContext = new Alter_table_set_table_setting_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 488, YQLParser.RULE_alter_table_set_table_setting_uncompat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3133;
            this.match(YQLParser.SET);
            this.state = 3134;
            this.an_id();
            this.state = 3135;
            this.table_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext {
        let localContext = new Alter_table_set_table_setting_compatContext(this.context, this.state);
        this.enterRule(localContext, 490, YQLParser.RULE_alter_table_set_table_setting_compat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3137;
            this.match(YQLParser.SET);
            this.state = 3138;
            this.match(YQLParser.LPAREN);
            this.state = 3139;
            this.alter_table_setting_entry();
            this.state = 3144;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3140;
                this.match(YQLParser.COMMA);
                this.state = 3141;
                this.alter_table_setting_entry();
                }
                }
                this.state = 3146;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3147;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext {
        let localContext = new Alter_table_reset_table_settingContext(this.context, this.state);
        this.enterRule(localContext, 492, YQLParser.RULE_alter_table_reset_table_setting);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3149;
            this.match(YQLParser.RESET);
            this.state = 3150;
            this.match(YQLParser.LPAREN);
            this.state = 3151;
            this.an_id();
            this.state = 3156;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3152;
                this.match(YQLParser.COMMA);
                this.state = 3153;
                this.an_id();
                }
                }
                this.state = 3158;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3159;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_index(): Alter_table_add_indexContext {
        let localContext = new Alter_table_add_indexContext(this.context, this.state);
        this.enterRule(localContext, 494, YQLParser.RULE_alter_table_add_index);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3161;
            this.match(YQLParser.ADD);
            this.state = 3162;
            this.table_index();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_drop_index(): Alter_table_drop_indexContext {
        let localContext = new Alter_table_drop_indexContext(this.context, this.state);
        this.enterRule(localContext, 496, YQLParser.RULE_alter_table_drop_index);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3164;
            this.match(YQLParser.DROP);
            this.state = 3165;
            this.match(YQLParser.INDEX);
            this.state = 3166;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_rename_to(): Alter_table_rename_toContext {
        let localContext = new Alter_table_rename_toContext(this.context, this.state);
        this.enterRule(localContext, 498, YQLParser.RULE_alter_table_rename_to);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3168;
            this.match(YQLParser.RENAME);
            this.state = 3169;
            this.match(YQLParser.TO);
            this.state = 3170;
            this.an_id_table();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_rename_index_to(): Alter_table_rename_index_toContext {
        let localContext = new Alter_table_rename_index_toContext(this.context, this.state);
        this.enterRule(localContext, 500, YQLParser.RULE_alter_table_rename_index_to);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3172;
            this.match(YQLParser.RENAME);
            this.state = 3173;
            this.match(YQLParser.INDEX);
            this.state = 3174;
            this.an_id();
            this.state = 3175;
            this.match(YQLParser.TO);
            this.state = 3176;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_changefeed(): Alter_table_add_changefeedContext {
        let localContext = new Alter_table_add_changefeedContext(this.context, this.state);
        this.enterRule(localContext, 502, YQLParser.RULE_alter_table_add_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3178;
            this.match(YQLParser.ADD);
            this.state = 3179;
            this.changefeed();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_changefeed(): Alter_table_alter_changefeedContext {
        let localContext = new Alter_table_alter_changefeedContext(this.context, this.state);
        this.enterRule(localContext, 504, YQLParser.RULE_alter_table_alter_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3181;
            this.match(YQLParser.ALTER);
            this.state = 3182;
            this.match(YQLParser.CHANGEFEED);
            this.state = 3183;
            this.an_id();
            this.state = 3184;
            this.changefeed_alter_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_drop_changefeed(): Alter_table_drop_changefeedContext {
        let localContext = new Alter_table_drop_changefeedContext(this.context, this.state);
        this.enterRule(localContext, 506, YQLParser.RULE_alter_table_drop_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3186;
            this.match(YQLParser.DROP);
            this.state = 3187;
            this.match(YQLParser.CHANGEFEED);
            this.state = 3188;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_index(): Alter_table_alter_indexContext {
        let localContext = new Alter_table_alter_indexContext(this.context, this.state);
        this.enterRule(localContext, 508, YQLParser.RULE_alter_table_alter_index);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3190;
            this.match(YQLParser.ALTER);
            this.state = 3191;
            this.match(YQLParser.INDEX);
            this.state = 3192;
            this.an_id();
            this.state = 3193;
            this.alter_table_alter_index_action();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_schema(): Column_schemaContext {
        let localContext = new Column_schemaContext(this.context, this.state);
        this.enterRule(localContext, 510, YQLParser.RULE_column_schema);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3195;
            this.an_id_schema();
            this.state = 3196;
            this.type_name_or_bind();
            this.state = 3198;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134) {
                {
                this.state = 3197;
                this.family_relation();
                }
            }

            this.state = 3200;
            this.opt_column_constraints();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_relation(): Family_relationContext {
        let localContext = new Family_relationContext(this.context, this.state);
        this.enterRule(localContext, 512, YQLParser.RULE_family_relation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3202;
            this.match(YQLParser.FAMILY);
            this.state = 3203;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_column_constraints(): Opt_column_constraintsContext {
        let localContext = new Opt_column_constraintsContext(this.context, this.state);
        this.enterRule(localContext, 514, YQLParser.RULE_opt_column_constraints);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3209;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 197 || _la === 199) {
                {
                this.state = 3206;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3205;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 3208;
                this.match(YQLParser.NULL);
                }
            }

            this.state = 3213;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 98) {
                {
                this.state = 3211;
                this.match(YQLParser.DEFAULT);
                this.state = 3212;
                this.expr();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_order_by_specification(): Column_order_by_specificationContext {
        let localContext = new Column_order_by_specificationContext(this.context, this.state);
        this.enterRule(localContext, 516, YQLParser.RULE_column_order_by_specification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3215;
            this.an_id();
            this.state = 3217;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 52 || _la === 103) {
                {
                this.state = 3216;
                _la = this.tokenStream.LA(1);
                if(!(_la === 52 || _la === 103)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_constraint(): Table_constraintContext {
        let localContext = new Table_constraintContext(this.context, this.state);
        this.enterRule(localContext, 518, YQLParser.RULE_table_constraint);
        let _la: number;
        try {
            this.state = 3258;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.PRIMARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3219;
                this.match(YQLParser.PRIMARY);
                this.state = 3220;
                this.match(YQLParser.KEY);
                this.state = 3221;
                this.match(YQLParser.LPAREN);
                this.state = 3222;
                this.an_id();
                this.state = 3227;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3223;
                    this.match(YQLParser.COMMA);
                    this.state = 3224;
                    this.an_id();
                    }
                    }
                    this.state = 3229;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3230;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.PARTITION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3232;
                this.match(YQLParser.PARTITION);
                this.state = 3233;
                this.match(YQLParser.BY);
                this.state = 3234;
                this.match(YQLParser.LPAREN);
                this.state = 3235;
                this.an_id();
                this.state = 3240;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3236;
                    this.match(YQLParser.COMMA);
                    this.state = 3237;
                    this.an_id();
                    }
                    }
                    this.state = 3242;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3243;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.ORDER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3245;
                this.match(YQLParser.ORDER);
                this.state = 3246;
                this.match(YQLParser.BY);
                this.state = 3247;
                this.match(YQLParser.LPAREN);
                this.state = 3248;
                this.column_order_by_specification();
                this.state = 3253;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3249;
                    this.match(YQLParser.COMMA);
                    this.state = 3250;
                    this.column_order_by_specification();
                    }
                    }
                    this.state = 3255;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3256;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_index(): Table_indexContext {
        let localContext = new Table_indexContext(this.context, this.state);
        this.enterRule(localContext, 520, YQLParser.RULE_table_index);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3260;
            this.match(YQLParser.INDEX);
            this.state = 3261;
            this.an_id();
            this.state = 3262;
            this.table_index_type();
            this.state = 3263;
            this.match(YQLParser.ON);
            this.state = 3264;
            this.match(YQLParser.LPAREN);
            this.state = 3265;
            this.an_id_schema();
            this.state = 3270;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3266;
                this.match(YQLParser.COMMA);
                this.state = 3267;
                this.an_id_schema();
                }
                }
                this.state = 3272;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3273;
            this.match(YQLParser.RPAREN);
            this.state = 3286;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 86) {
                {
                this.state = 3274;
                this.match(YQLParser.COVER);
                this.state = 3275;
                this.match(YQLParser.LPAREN);
                this.state = 3276;
                this.an_id_schema();
                this.state = 3281;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3277;
                    this.match(YQLParser.COMMA);
                    this.state = 3278;
                    this.an_id_schema();
                    }
                    }
                    this.state = 3283;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3284;
                this.match(YQLParser.RPAREN);
                }
            }

            this.state = 3289;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3288;
                this.with_index_settings();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_index_type(): Table_index_typeContext {
        let localContext = new Table_index_typeContext(this.context, this.state);
        this.enterRule(localContext, 522, YQLParser.RULE_table_index_type);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3293;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.GLOBAL:
                {
                this.state = 3291;
                this.global_index();
                }
                break;
            case YQLParser.LOCAL:
                {
                this.state = 3292;
                this.local_index();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3297;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 3295;
                this.match(YQLParser.USING);
                this.state = 3296;
                this.index_subtype();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public global_index(): Global_indexContext {
        let localContext = new Global_indexContext(this.context, this.state);
        this.enterRule(localContext, 524, YQLParser.RULE_global_index);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3299;
            this.match(YQLParser.GLOBAL);
            this.state = 3301;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 299) {
                {
                this.state = 3300;
                this.match(YQLParser.UNIQUE);
                }
            }

            this.state = 3304;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55 || _la === 278) {
                {
                this.state = 3303;
                _la = this.tokenStream.LA(1);
                if(!(_la === 55 || _la === 278)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public local_index(): Local_indexContext {
        let localContext = new Local_indexContext(this.context, this.state);
        this.enterRule(localContext, 526, YQLParser.RULE_local_index);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3306;
            this.match(YQLParser.LOCAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_subtype(): Index_subtypeContext {
        let localContext = new Index_subtypeContext(this.context, this.state);
        this.enterRule(localContext, 528, YQLParser.RULE_index_subtype);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3308;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_index_settings(): With_index_settingsContext {
        let localContext = new With_index_settingsContext(this.context, this.state);
        this.enterRule(localContext, 530, YQLParser.RULE_with_index_settings);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3310;
            this.match(YQLParser.WITH);
            this.state = 3311;
            this.match(YQLParser.LPAREN);
            this.state = 3312;
            this.index_setting_entry();
            this.state = 3317;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 328, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3313;
                    this.match(YQLParser.COMMA);
                    this.state = 3314;
                    this.index_setting_entry();
                    }
                    }
                }
                this.state = 3319;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 328, this.context);
            }
            this.state = 3321;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 3320;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 3323;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_setting_entry(): Index_setting_entryContext {
        let localContext = new Index_setting_entryContext(this.context, this.state);
        this.enterRule(localContext, 532, YQLParser.RULE_index_setting_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3325;
            this.an_id();
            this.state = 3326;
            this.match(YQLParser.EQUALS);
            this.state = 3327;
            this.index_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_setting_value(): Index_setting_valueContext {
        let localContext = new Index_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 534, YQLParser.RULE_index_setting_value);
        try {
            this.state = 3333;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3329;
                this.id_or_type();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3330;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3331;
                this.integer();
                }
                break;
            case YQLParser.FALSE:
            case YQLParser.TRUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3332;
                this.bool_value();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed(): ChangefeedContext {
        let localContext = new ChangefeedContext(this.context, this.state);
        this.enterRule(localContext, 536, YQLParser.RULE_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3335;
            this.match(YQLParser.CHANGEFEED);
            this.state = 3336;
            this.an_id();
            this.state = 3337;
            this.match(YQLParser.WITH);
            this.state = 3338;
            this.match(YQLParser.LPAREN);
            this.state = 3339;
            this.changefeed_settings();
            this.state = 3340;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_settings(): Changefeed_settingsContext {
        let localContext = new Changefeed_settingsContext(this.context, this.state);
        this.enterRule(localContext, 538, YQLParser.RULE_changefeed_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3342;
            this.changefeed_settings_entry();
            this.state = 3347;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3343;
                this.match(YQLParser.COMMA);
                this.state = 3344;
                this.changefeed_settings_entry();
                }
                }
                this.state = 3349;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_settings_entry(): Changefeed_settings_entryContext {
        let localContext = new Changefeed_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 540, YQLParser.RULE_changefeed_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3350;
            this.an_id();
            this.state = 3351;
            this.match(YQLParser.EQUALS);
            this.state = 3352;
            this.changefeed_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_setting_value(): Changefeed_setting_valueContext {
        let localContext = new Changefeed_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 542, YQLParser.RULE_changefeed_setting_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3354;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_alter_settings(): Changefeed_alter_settingsContext {
        let localContext = new Changefeed_alter_settingsContext(this.context, this.state);
        this.enterRule(localContext, 544, YQLParser.RULE_changefeed_alter_settings);
        try {
            this.state = 3362;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DISABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3356;
                this.match(YQLParser.DISABLE);
                }
                break;
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3357;
                this.match(YQLParser.SET);
                this.state = 3358;
                this.match(YQLParser.LPAREN);
                this.state = 3359;
                this.changefeed_settings();
                this.state = 3360;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_setting_entry(): Alter_table_setting_entryContext {
        let localContext = new Alter_table_setting_entryContext(this.context, this.state);
        this.enterRule(localContext, 546, YQLParser.RULE_alter_table_setting_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3364;
            this.an_id();
            this.state = 3365;
            this.match(YQLParser.EQUALS);
            this.state = 3366;
            this.table_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_setting_value(): Table_setting_valueContext {
        let localContext = new Table_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 548, YQLParser.RULE_table_setting_value);
        let _la: number;
        try {
            this.state = 3380;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 334, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3368;
                this.id();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3369;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3370;
                this.integer();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3371;
                this.split_boundaries();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3372;
                this.expr();
                this.state = 3373;
                this.match(YQLParser.ON);
                this.state = 3374;
                this.an_id();
                this.state = 3377;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 51) {
                    {
                    this.state = 3375;
                    this.match(YQLParser.AS);
                    this.state = 3376;
                    _la = this.tokenStream.LA(1);
                    if(!(((((_la - 190)) & ~0x1F) === 0 && ((1 << (_la - 190)) & 11) !== 0) || _la === 263)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3379;
                this.bool_value();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_entry(): Family_entryContext {
        let localContext = new Family_entryContext(this.context, this.state);
        this.enterRule(localContext, 550, YQLParser.RULE_family_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3382;
            this.match(YQLParser.FAMILY);
            this.state = 3383;
            this.an_id();
            this.state = 3384;
            this.family_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_settings(): Family_settingsContext {
        let localContext = new Family_settingsContext(this.context, this.state);
        this.enterRule(localContext, 552, YQLParser.RULE_family_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3386;
            this.match(YQLParser.LPAREN);
            this.state = 3395;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & 3757047807) !== 0) || ((((_la - 72)) & ~0x1F) === 0 && ((1 << (_la - 72)) & 4294967295) !== 0) || ((((_la - 104)) & ~0x1F) === 0 && ((1 << (_la - 104)) & 3758063611) !== 0) || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & 4294966267) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 4294934527) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 4294966783) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 4294958591) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 2683305463) !== 0) || ((((_la - 296)) & ~0x1F) === 0 && ((1 << (_la - 296)) & 67100671) !== 0)) {
                {
                this.state = 3387;
                this.family_settings_entry();
                this.state = 3392;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3388;
                    this.match(YQLParser.COMMA);
                    this.state = 3389;
                    this.family_settings_entry();
                    }
                    }
                    this.state = 3394;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3397;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_settings_entry(): Family_settings_entryContext {
        let localContext = new Family_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 554, YQLParser.RULE_family_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3399;
            this.an_id();
            this.state = 3400;
            this.match(YQLParser.EQUALS);
            this.state = 3401;
            this.family_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_setting_value(): Family_setting_valueContext {
        let localContext = new Family_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 556, YQLParser.RULE_family_setting_value);
        try {
            this.state = 3405;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3403;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3404;
                this.integer();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public split_boundaries(): Split_boundariesContext {
        let localContext = new Split_boundariesContext(this.context, this.state);
        this.enterRule(localContext, 558, YQLParser.RULE_split_boundaries);
        let _la: number;
        try {
            this.state = 3419;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 339, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3407;
                this.match(YQLParser.LPAREN);
                this.state = 3408;
                this.literal_value_list();
                this.state = 3413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3409;
                    this.match(YQLParser.COMMA);
                    this.state = 3410;
                    this.literal_value_list();
                    }
                    }
                    this.state = 3415;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3416;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3418;
                this.literal_value_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literal_value_list(): Literal_value_listContext {
        let localContext = new Literal_value_listContext(this.context, this.state);
        this.enterRule(localContext, 560, YQLParser.RULE_literal_value_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3421;
            this.match(YQLParser.LPAREN);
            this.state = 3422;
            this.literal_value();
            this.state = 3427;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3423;
                this.match(YQLParser.COMMA);
                this.state = 3424;
                this.literal_value();
                }
                }
                this.state = 3429;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3430;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_index_action(): Alter_table_alter_index_actionContext {
        let localContext = new Alter_table_alter_index_actionContext(this.context, this.state);
        this.enterRule(localContext, 562, YQLParser.RULE_alter_table_alter_index_action);
        try {
            this.state = 3435;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 341, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3432;
                this.alter_table_set_table_setting_uncompat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3433;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3434;
                this.alter_table_reset_table_setting();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_table_stmt(): Drop_table_stmtContext {
        let localContext = new Drop_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 564, YQLParser.RULE_drop_table_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3437;
            this.match(YQLParser.DROP);
            this.state = 3442;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.TABLE:
                {
                this.state = 3438;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TABLESTORE:
                {
                this.state = 3439;
                this.match(YQLParser.TABLESTORE);
                }
                break;
            case YQLParser.EXTERNAL:
                {
                this.state = 3440;
                this.match(YQLParser.EXTERNAL);
                this.state = 3441;
                this.match(YQLParser.TABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3446;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 343, this.context) ) {
            case 1:
                {
                this.state = 3444;
                this.match(YQLParser.IF);
                this.state = 3445;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 3448;
            this.simple_table_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_user_stmt(): Create_user_stmtContext {
        let localContext = new Create_user_stmtContext(this.context, this.state);
        this.enterRule(localContext, 566, YQLParser.RULE_create_user_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3450;
            this.match(YQLParser.CREATE);
            this.state = 3451;
            this.match(YQLParser.USER);
            this.state = 3452;
            this.role_name();
            this.state = 3454;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 117 || _la === 218) {
                {
                this.state = 3453;
                this.create_user_option();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_user_stmt(): Alter_user_stmtContext {
        let localContext = new Alter_user_stmtContext(this.context, this.state);
        this.enterRule(localContext, 568, YQLParser.RULE_alter_user_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3456;
            this.match(YQLParser.ALTER);
            this.state = 3457;
            this.match(YQLParser.USER);
            this.state = 3458;
            this.role_name();
            this.state = 3466;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ENCRYPTED:
            case YQLParser.PASSWORD:
            case YQLParser.WITH:
                {
                this.state = 3460;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 315) {
                    {
                    this.state = 3459;
                    this.match(YQLParser.WITH);
                    }
                }

                this.state = 3462;
                this.create_user_option();
                }
                break;
            case YQLParser.RENAME:
                {
                this.state = 3463;
                this.match(YQLParser.RENAME);
                this.state = 3464;
                this.match(YQLParser.TO);
                this.state = 3465;
                this.role_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_group_stmt(): Create_group_stmtContext {
        let localContext = new Create_group_stmtContext(this.context, this.state);
        this.enterRule(localContext, 570, YQLParser.RULE_create_group_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3468;
            this.match(YQLParser.CREATE);
            this.state = 3469;
            this.match(YQLParser.GROUP);
            this.state = 3470;
            this.role_name();
            this.state = 3484;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3471;
                this.match(YQLParser.WITH);
                this.state = 3472;
                this.match(YQLParser.USER);
                this.state = 3473;
                this.role_name();
                this.state = 3478;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 347, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3474;
                        this.match(YQLParser.COMMA);
                        this.state = 3475;
                        this.role_name();
                        }
                        }
                    }
                    this.state = 3480;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 347, this.context);
                }
                this.state = 3482;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3481;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_group_stmt(): Alter_group_stmtContext {
        let localContext = new Alter_group_stmtContext(this.context, this.state);
        this.enterRule(localContext, 572, YQLParser.RULE_alter_group_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3486;
            this.match(YQLParser.ALTER);
            this.state = 3487;
            this.match(YQLParser.GROUP);
            this.state = 3488;
            this.role_name();
            this.state = 3505;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ADD:
            case YQLParser.DROP:
                {
                this.state = 3489;
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 112)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3490;
                this.match(YQLParser.USER);
                this.state = 3491;
                this.role_name();
                this.state = 3496;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 350, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3492;
                        this.match(YQLParser.COMMA);
                        this.state = 3493;
                        this.role_name();
                        }
                        }
                    }
                    this.state = 3498;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 350, this.context);
                }
                this.state = 3500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3499;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
                break;
            case YQLParser.RENAME:
                {
                this.state = 3502;
                this.match(YQLParser.RENAME);
                this.state = 3503;
                this.match(YQLParser.TO);
                this.state = 3504;
                this.role_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_role_stmt(): Drop_role_stmtContext {
        let localContext = new Drop_role_stmtContext(this.context, this.state);
        this.enterRule(localContext, 574, YQLParser.RULE_drop_role_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3507;
            this.match(YQLParser.DROP);
            this.state = 3508;
            _la = this.tokenStream.LA(1);
            if(!(_la === 148 || _la === 305)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3511;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 353, this.context) ) {
            case 1:
                {
                this.state = 3509;
                this.match(YQLParser.IF);
                this.state = 3510;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 3513;
            this.role_name();
            this.state = 3518;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 354, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3514;
                    this.match(YQLParser.COMMA);
                    this.state = 3515;
                    this.role_name();
                    }
                    }
                }
                this.state = 3520;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 354, this.context);
            }
            this.state = 3522;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 3521;
                this.match(YQLParser.COMMA);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public role_name(): Role_nameContext {
        let localContext = new Role_nameContext(this.context, this.state);
        this.enterRule(localContext, 576, YQLParser.RULE_role_name);
        try {
            this.state = 3526;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3524;
                this.an_id_or_type();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3525;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_user_option(): Create_user_optionContext {
        let localContext = new Create_user_optionContext(this.context, this.state);
        this.enterRule(localContext, 578, YQLParser.RULE_create_user_option);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3529;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 117) {
                {
                this.state = 3528;
                this.match(YQLParser.ENCRYPTED);
                }
            }

            this.state = 3531;
            this.match(YQLParser.PASSWORD);
            this.state = 3532;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grant_permissions_stmt(): Grant_permissions_stmtContext {
        let localContext = new Grant_permissions_stmtContext(this.context, this.state);
        this.enterRule(localContext, 580, YQLParser.RULE_grant_permissions_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3534;
            this.match(YQLParser.GRANT);
            this.state = 3535;
            this.permission_name_target();
            this.state = 3536;
            this.match(YQLParser.ON);
            this.state = 3537;
            this.an_id_schema();
            this.state = 3542;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3538;
                this.match(YQLParser.COMMA);
                this.state = 3539;
                this.an_id_schema();
                }
                }
                this.state = 3544;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3545;
            this.match(YQLParser.TO);
            this.state = 3546;
            this.role_name();
            this.state = 3551;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 359, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3547;
                    this.match(YQLParser.COMMA);
                    this.state = 3548;
                    this.role_name();
                    }
                    }
                }
                this.state = 3553;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 359, this.context);
            }
            this.state = 3555;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 3554;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 3560;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3557;
                this.match(YQLParser.WITH);
                this.state = 3558;
                this.match(YQLParser.GRANT);
                this.state = 3559;
                this.match(YQLParser.OPTION);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revoke_permissions_stmt(): Revoke_permissions_stmtContext {
        let localContext = new Revoke_permissions_stmtContext(this.context, this.state);
        this.enterRule(localContext, 582, YQLParser.RULE_revoke_permissions_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3562;
            this.match(YQLParser.REVOKE);
            this.state = 3566;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 362, this.context) ) {
            case 1:
                {
                this.state = 3563;
                this.match(YQLParser.GRANT);
                this.state = 3564;
                this.match(YQLParser.OPTION);
                this.state = 3565;
                this.match(YQLParser.FOR);
                }
                break;
            }
            this.state = 3568;
            this.permission_name_target();
            this.state = 3569;
            this.match(YQLParser.ON);
            this.state = 3570;
            this.an_id_schema();
            this.state = 3575;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3571;
                this.match(YQLParser.COMMA);
                this.state = 3572;
                this.an_id_schema();
                }
                }
                this.state = 3577;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3578;
            this.match(YQLParser.FROM);
            this.state = 3579;
            this.role_name();
            this.state = 3584;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3580;
                this.match(YQLParser.COMMA);
                this.state = 3581;
                this.role_name();
                }
                }
                this.state = 3586;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public permission_id(): Permission_idContext {
        let localContext = new Permission_idContext(this.context, this.state);
        this.enterRule(localContext, 584, YQLParser.RULE_permission_id);
        let _la: number;
        try {
            this.state = 3611;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.CONNECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3587;
                this.match(YQLParser.CONNECT);
                }
                break;
            case YQLParser.LIST:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3588;
                this.match(YQLParser.LIST);
                }
                break;
            case YQLParser.INSERT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3589;
                this.match(YQLParser.INSERT);
                }
                break;
            case YQLParser.MANAGE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3590;
                this.match(YQLParser.MANAGE);
                }
                break;
            case YQLParser.DROP:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3591;
                this.match(YQLParser.DROP);
                }
                break;
            case YQLParser.GRANT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3592;
                this.match(YQLParser.GRANT);
                }
                break;
            case YQLParser.MODIFY:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3593;
                this.match(YQLParser.MODIFY);
                this.state = 3594;
                _la = this.tokenStream.LA(1);
                if(!(_la === 58 || _la === 281)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case YQLParser.ERASE:
            case YQLParser.UPDATE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3595;
                _la = this.tokenStream.LA(1);
                if(!(_la === 120 || _la === 302)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3596;
                this.match(YQLParser.ROW);
                }
                break;
            case YQLParser.ALTER:
            case YQLParser.DESCRIBE:
            case YQLParser.REMOVE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3597;
                _la = this.tokenStream.LA(1);
                if(!(_la === 45 || _la === 104 || _la === 239)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3598;
                this.match(YQLParser.SCHEMA);
                }
                break;
            case YQLParser.SELECT:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3599;
                this.match(YQLParser.SELECT);
                this.state = 3601;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 58 || _la === 258 || _la === 281) {
                    {
                    this.state = 3600;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 58 || _la === 258 || _la === 281)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case YQLParser.FULL:
            case YQLParser.USE:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3603;
                _la = this.tokenStream.LA(1);
                if(!(_la === 143 || _la === 304)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3605;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 180) {
                    {
                    this.state = 3604;
                    this.match(YQLParser.LEGACY);
                    }
                }

                }
                break;
            case YQLParser.CREATE:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3607;
                this.match(YQLParser.CREATE);
                this.state = 3609;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 107 || _la === 231 || _la === 280) {
                    {
                    this.state = 3608;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 107 || _la === 231 || _la === 280)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public permission_name(): Permission_nameContext {
        let localContext = new Permission_nameContext(this.context, this.state);
        this.enterRule(localContext, 586, YQLParser.RULE_permission_name);
        try {
            this.state = 3615;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ALTER:
            case YQLParser.CONNECT:
            case YQLParser.CREATE:
            case YQLParser.DESCRIBE:
            case YQLParser.DROP:
            case YQLParser.ERASE:
            case YQLParser.FULL:
            case YQLParser.GRANT:
            case YQLParser.INSERT:
            case YQLParser.LIST:
            case YQLParser.MANAGE:
            case YQLParser.MODIFY:
            case YQLParser.REMOVE:
            case YQLParser.SELECT:
            case YQLParser.UPDATE:
            case YQLParser.USE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3613;
                this.permission_id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3614;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public permission_name_target(): Permission_name_targetContext {
        let localContext = new Permission_name_targetContext(this.context, this.state);
        this.enterRule(localContext, 588, YQLParser.RULE_permission_name_target);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3632;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ALTER:
            case YQLParser.CONNECT:
            case YQLParser.CREATE:
            case YQLParser.DESCRIBE:
            case YQLParser.DROP:
            case YQLParser.ERASE:
            case YQLParser.FULL:
            case YQLParser.GRANT:
            case YQLParser.INSERT:
            case YQLParser.LIST:
            case YQLParser.MANAGE:
            case YQLParser.MODIFY:
            case YQLParser.REMOVE:
            case YQLParser.SELECT:
            case YQLParser.UPDATE:
            case YQLParser.USE:
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3617;
                this.permission_name();
                this.state = 3622;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 370, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3618;
                        this.match(YQLParser.COMMA);
                        this.state = 3619;
                        this.permission_name();
                        }
                        }
                    }
                    this.state = 3624;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 370, this.context);
                }
                this.state = 3626;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3625;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
                break;
            case YQLParser.ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3628;
                this.match(YQLParser.ALL);
                this.state = 3630;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 3629;
                    this.match(YQLParser.PRIVILEGES);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_resource_pool_stmt(): Create_resource_pool_stmtContext {
        let localContext = new Create_resource_pool_stmtContext(this.context, this.state);
        this.enterRule(localContext, 590, YQLParser.RULE_create_resource_pool_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3634;
            this.match(YQLParser.CREATE);
            this.state = 3635;
            this.match(YQLParser.RESOURCE);
            this.state = 3636;
            this.match(YQLParser.POOL);
            this.state = 3637;
            this.object_ref();
            this.state = 3638;
            this.with_table_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_resource_pool_stmt(): Alter_resource_pool_stmtContext {
        let localContext = new Alter_resource_pool_stmtContext(this.context, this.state);
        this.enterRule(localContext, 592, YQLParser.RULE_alter_resource_pool_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3640;
            this.match(YQLParser.ALTER);
            this.state = 3641;
            this.match(YQLParser.RESOURCE);
            this.state = 3642;
            this.match(YQLParser.POOL);
            this.state = 3643;
            this.object_ref();
            this.state = 3644;
            this.alter_resource_pool_action();
            this.state = 3649;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3645;
                this.match(YQLParser.COMMA);
                this.state = 3646;
                this.alter_resource_pool_action();
                }
                }
                this.state = 3651;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_resource_pool_action(): Alter_resource_pool_actionContext {
        let localContext = new Alter_resource_pool_actionContext(this.context, this.state);
        this.enterRule(localContext, 594, YQLParser.RULE_alter_resource_pool_action);
        try {
            this.state = 3654;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3652;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3653;
                this.alter_table_reset_table_setting();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_resource_pool_stmt(): Drop_resource_pool_stmtContext {
        let localContext = new Drop_resource_pool_stmtContext(this.context, this.state);
        this.enterRule(localContext, 596, YQLParser.RULE_drop_resource_pool_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3656;
            this.match(YQLParser.DROP);
            this.state = 3657;
            this.match(YQLParser.RESOURCE);
            this.state = 3658;
            this.match(YQLParser.POOL);
            this.state = 3659;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_resource_pool_classifier_stmt(): Create_resource_pool_classifier_stmtContext {
        let localContext = new Create_resource_pool_classifier_stmtContext(this.context, this.state);
        this.enterRule(localContext, 598, YQLParser.RULE_create_resource_pool_classifier_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3661;
            this.match(YQLParser.CREATE);
            this.state = 3662;
            this.match(YQLParser.RESOURCE);
            this.state = 3663;
            this.match(YQLParser.POOL);
            this.state = 3664;
            this.match(YQLParser.CLASSIFIER);
            this.state = 3665;
            this.object_ref();
            this.state = 3666;
            this.with_table_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_resource_pool_classifier_stmt(): Alter_resource_pool_classifier_stmtContext {
        let localContext = new Alter_resource_pool_classifier_stmtContext(this.context, this.state);
        this.enterRule(localContext, 600, YQLParser.RULE_alter_resource_pool_classifier_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3668;
            this.match(YQLParser.ALTER);
            this.state = 3669;
            this.match(YQLParser.RESOURCE);
            this.state = 3670;
            this.match(YQLParser.POOL);
            this.state = 3671;
            this.match(YQLParser.CLASSIFIER);
            this.state = 3672;
            this.object_ref();
            this.state = 3673;
            this.alter_resource_pool_classifier_action();
            this.state = 3678;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3674;
                this.match(YQLParser.COMMA);
                this.state = 3675;
                this.alter_resource_pool_classifier_action();
                }
                }
                this.state = 3680;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_resource_pool_classifier_action(): Alter_resource_pool_classifier_actionContext {
        let localContext = new Alter_resource_pool_classifier_actionContext(this.context, this.state);
        this.enterRule(localContext, 602, YQLParser.RULE_alter_resource_pool_classifier_action);
        try {
            this.state = 3683;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3681;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3682;
                this.alter_table_reset_table_setting();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_resource_pool_classifier_stmt(): Drop_resource_pool_classifier_stmtContext {
        let localContext = new Drop_resource_pool_classifier_stmtContext(this.context, this.state);
        this.enterRule(localContext, 604, YQLParser.RULE_drop_resource_pool_classifier_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3685;
            this.match(YQLParser.DROP);
            this.state = 3686;
            this.match(YQLParser.RESOURCE);
            this.state = 3687;
            this.match(YQLParser.POOL);
            this.state = 3688;
            this.match(YQLParser.CLASSIFIER);
            this.state = 3689;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_replication_stmt(): Create_replication_stmtContext {
        let localContext = new Create_replication_stmtContext(this.context, this.state);
        this.enterRule(localContext, 606, YQLParser.RULE_create_replication_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3691;
            this.match(YQLParser.CREATE);
            this.state = 3692;
            this.match(YQLParser.ASYNC);
            this.state = 3693;
            this.match(YQLParser.REPLICATION);
            this.state = 3694;
            this.object_ref();
            this.state = 3695;
            this.match(YQLParser.FOR);
            this.state = 3696;
            this.replication_target();
            this.state = 3701;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3697;
                this.match(YQLParser.COMMA);
                this.state = 3698;
                this.replication_target();
                }
                }
                this.state = 3703;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3704;
            this.match(YQLParser.WITH);
            this.state = 3705;
            this.match(YQLParser.LPAREN);
            this.state = 3706;
            this.replication_settings();
            this.state = 3707;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replication_target(): Replication_targetContext {
        let localContext = new Replication_targetContext(this.context, this.state);
        this.enterRule(localContext, 608, YQLParser.RULE_replication_target);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3709;
            this.object_ref();
            this.state = 3710;
            this.replication_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replication_settings(): Replication_settingsContext {
        let localContext = new Replication_settingsContext(this.context, this.state);
        this.enterRule(localContext, 610, YQLParser.RULE_replication_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3712;
            this.replication_settings_entry();
            this.state = 3717;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3713;
                this.match(YQLParser.COMMA);
                this.state = 3714;
                this.replication_settings_entry();
                }
                }
                this.state = 3719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replication_settings_entry(): Replication_settings_entryContext {
        let localContext = new Replication_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 612, YQLParser.RULE_replication_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3720;
            this.an_id();
            this.state = 3721;
            this.match(YQLParser.EQUALS);
            this.state = 3722;
            this.match(YQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_replication_stmt(): Alter_replication_stmtContext {
        let localContext = new Alter_replication_stmtContext(this.context, this.state);
        this.enterRule(localContext, 614, YQLParser.RULE_alter_replication_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3724;
            this.match(YQLParser.ALTER);
            this.state = 3725;
            this.match(YQLParser.ASYNC);
            this.state = 3726;
            this.match(YQLParser.REPLICATION);
            this.state = 3727;
            this.object_ref();
            this.state = 3728;
            this.alter_replication_action();
            this.state = 3733;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3729;
                this.match(YQLParser.COMMA);
                this.state = 3730;
                this.alter_replication_action();
                }
                }
                this.state = 3735;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_replication_action(): Alter_replication_actionContext {
        let localContext = new Alter_replication_actionContext(this.context, this.state);
        this.enterRule(localContext, 616, YQLParser.RULE_alter_replication_action);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3736;
            this.alter_replication_set_setting();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_replication_set_setting(): Alter_replication_set_settingContext {
        let localContext = new Alter_replication_set_settingContext(this.context, this.state);
        this.enterRule(localContext, 618, YQLParser.RULE_alter_replication_set_setting);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3738;
            this.match(YQLParser.SET);
            this.state = 3739;
            this.match(YQLParser.LPAREN);
            this.state = 3740;
            this.replication_settings();
            this.state = 3741;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_replication_stmt(): Drop_replication_stmtContext {
        let localContext = new Drop_replication_stmtContext(this.context, this.state);
        this.enterRule(localContext, 620, YQLParser.RULE_drop_replication_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3743;
            this.match(YQLParser.DROP);
            this.state = 3744;
            this.match(YQLParser.ASYNC);
            this.state = 3745;
            this.match(YQLParser.REPLICATION);
            this.state = 3746;
            this.object_ref();
            this.state = 3748;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 70) {
                {
                this.state = 3747;
                this.match(YQLParser.CASCADE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public action_or_subquery_args(): Action_or_subquery_argsContext {
        let localContext = new Action_or_subquery_argsContext(this.context, this.state);
        this.enterRule(localContext, 622, YQLParser.RULE_action_or_subquery_args);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3750;
            this.opt_bind_parameter();
            this.state = 3755;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3751;
                this.match(YQLParser.COMMA);
                this.state = 3752;
                this.opt_bind_parameter();
                }
                }
                this.state = 3757;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public define_action_or_subquery_stmt(): Define_action_or_subquery_stmtContext {
        let localContext = new Define_action_or_subquery_stmtContext(this.context, this.state);
        this.enterRule(localContext, 624, YQLParser.RULE_define_action_or_subquery_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3758;
            this.match(YQLParser.DEFINE);
            this.state = 3759;
            _la = this.tokenStream.LA(1);
            if(!(_la === 41 || _la === 274)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3760;
            this.bind_parameter();
            this.state = 3761;
            this.match(YQLParser.LPAREN);
            this.state = 3763;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 32) {
                {
                this.state = 3762;
                this.action_or_subquery_args();
                }
            }

            this.state = 3765;
            this.match(YQLParser.RPAREN);
            this.state = 3766;
            this.match(YQLParser.AS);
            this.state = 3767;
            this.define_action_or_subquery_body();
            this.state = 3768;
            this.match(YQLParser.END);
            this.state = 3769;
            this.match(YQLParser.DEFINE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public define_action_or_subquery_body(): Define_action_or_subquery_bodyContext {
        let localContext = new Define_action_or_subquery_bodyContext(this.context, this.state);
        this.enterRule(localContext, 626, YQLParser.RULE_define_action_or_subquery_body);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3774;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 3771;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 3776;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3795;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26 || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 536895489) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 1086587137) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 2684882947) !== 0) || ((((_la - 147)) & ~0x1F) === 0 && ((1 << (_la - 147)) & 1050753) !== 0) || ((((_la - 215)) & ~0x1F) === 0 && ((1 << (_la - 215)) & 134775809) !== 0) || ((((_la - 247)) & ~0x1F) === 0 && ((1 << (_la - 247)) & 262721) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 71) !== 0)) {
                {
                this.state = 3777;
                this.sql_stmt_core();
                this.state = 3786;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 386, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3779;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        do {
                            {
                            {
                            this.state = 3778;
                            this.match(YQLParser.SEMICOLON);
                            }
                            }
                            this.state = 3781;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        } while (_la === 23);
                        this.state = 3783;
                        this.sql_stmt_core();
                        }
                        }
                    }
                    this.state = 3788;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 386, this.context);
                }
                this.state = 3792;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 23) {
                    {
                    {
                    this.state = 3789;
                    this.match(YQLParser.SEMICOLON);
                    }
                    }
                    this.state = 3794;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public if_stmt(): If_stmtContext {
        let localContext = new If_stmtContext(this.context, this.state);
        this.enterRule(localContext, 628, YQLParser.RULE_if_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3798;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123) {
                {
                this.state = 3797;
                this.match(YQLParser.EVALUATE);
                }
            }

            this.state = 3800;
            this.match(YQLParser.IF);
            this.state = 3801;
            this.expr();
            this.state = 3802;
            this.do_stmt();
            this.state = 3805;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 114) {
                {
                this.state = 3803;
                this.match(YQLParser.ELSE);
                this.state = 3804;
                this.do_stmt();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_stmt(): For_stmtContext {
        let localContext = new For_stmtContext(this.context, this.state);
        this.enterRule(localContext, 630, YQLParser.RULE_for_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3808;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123) {
                {
                this.state = 3807;
                this.match(YQLParser.EVALUATE);
                }
            }

            this.state = 3811;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215) {
                {
                this.state = 3810;
                this.match(YQLParser.PARALLEL);
                }
            }

            this.state = 3813;
            this.match(YQLParser.FOR);
            this.state = 3814;
            this.bind_parameter();
            this.state = 3815;
            this.match(YQLParser.IN);
            this.state = 3816;
            this.expr();
            this.state = 3817;
            this.do_stmt();
            this.state = 3820;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 114) {
                {
                this.state = 3818;
                this.match(YQLParser.ELSE);
                this.state = 3819;
                this.do_stmt();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_ref(): Table_refContext {
        let localContext = new Table_refContext(this.context, this.state);
        this.enterRule(localContext, 632, YQLParser.RULE_table_ref);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3825;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 394, this.context) ) {
            case 1:
                {
                this.state = 3822;
                this.cluster_expr();
                this.state = 3823;
                this.match(YQLParser.DOT);
                }
                break;
            }
            this.state = 3828;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 3827;
                this.match(YQLParser.COMMAT);
                }
            }

            this.state = 3860;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 402, this.context) ) {
            case 1:
                {
                this.state = 3830;
                this.table_key();
                }
                break;
            case 2:
                {
                this.state = 3831;
                this.an_id_expr();
                this.state = 3832;
                this.match(YQLParser.LPAREN);
                this.state = 3844;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4278618141) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294959103) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 239)) & ~0x1F) === 0 && ((1 << (_la - 239)) & 4294967291) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 4294967295) !== 0) || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & 8388607) !== 0)) {
                    {
                    this.state = 3833;
                    this.table_arg();
                    this.state = 3838;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 396, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 3834;
                            this.match(YQLParser.COMMA);
                            this.state = 3835;
                            this.table_arg();
                            }
                            }
                        }
                        this.state = 3840;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 396, this.context);
                    }
                    this.state = 3842;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 25) {
                        {
                        this.state = 3841;
                        this.match(YQLParser.COMMA);
                        }
                    }

                    }
                }

                this.state = 3846;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 3:
                {
                this.state = 3848;
                this.bind_parameter();
                this.state = 3854;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26) {
                    {
                    this.state = 3849;
                    this.match(YQLParser.LPAREN);
                    this.state = 3851;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 15)) & ~0x1F) === 0 && ((1 << (_la - 15)) & 4278585373) !== 0) || ((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 4294959103) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 4294967295) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & 4294967295) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 4294967287) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 4294967295) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 4294967295) !== 0) || ((((_la - 239)) & ~0x1F) === 0 && ((1 << (_la - 239)) & 4294967291) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 4294967295) !== 0) || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & 8388607) !== 0)) {
                        {
                        this.state = 3850;
                        this.expr_list();
                        }
                    }

                    this.state = 3853;
                    this.match(YQLParser.RPAREN);
                    }
                }

                this.state = 3858;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 310) {
                    {
                    this.state = 3856;
                    this.match(YQLParser.VIEW);
                    this.state = 3857;
                    this.view_name();
                    }
                }

                }
                break;
            }
            this.state = 3863;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3862;
                this.table_hints();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_key(): Table_keyContext {
        let localContext = new Table_keyContext(this.context, this.state);
        this.enterRule(localContext, 634, YQLParser.RULE_table_key);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3865;
            this.id_table_or_type();
            this.state = 3868;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 310) {
                {
                this.state = 3866;
                this.match(YQLParser.VIEW);
                this.state = 3867;
                this.view_name();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_arg(): Table_argContext {
        let localContext = new Table_argContext(this.context, this.state);
        this.enterRule(localContext, 636, YQLParser.RULE_table_arg);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3871;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 3870;
                this.match(YQLParser.COMMAT);
                }
            }

            this.state = 3873;
            this.named_expr();
            this.state = 3876;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 310) {
                {
                this.state = 3874;
                this.match(YQLParser.VIEW);
                this.state = 3875;
                this.view_name();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_hints(): Table_hintsContext {
        let localContext = new Table_hintsContext(this.context, this.state);
        this.enterRule(localContext, 638, YQLParser.RULE_table_hints);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3878;
            this.match(YQLParser.WITH);
            this.state = 3891;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 3879;
                this.table_hint();
                }
                break;
            case YQLParser.LPAREN:
                {
                this.state = 3880;
                this.match(YQLParser.LPAREN);
                this.state = 3881;
                this.table_hint();
                this.state = 3886;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3882;
                    this.match(YQLParser.COMMA);
                    this.state = 3883;
                    this.table_hint();
                    }
                    }
                    this.state = 3888;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3889;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_hint(): Table_hintContext {
        let localContext = new Table_hintContext(this.context, this.state);
        this.enterRule(localContext, 640, YQLParser.RULE_table_hint);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3938;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 418, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3893;
                this.an_id_hint();
                this.state = 3912;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3894;
                    this.match(YQLParser.EQUALS);
                    this.state = 3910;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case YQLParser.DOLLAR:
                    case YQLParser.ABORT:
                    case YQLParser.ACTION:
                    case YQLParser.ADD:
                    case YQLParser.AFTER:
                    case YQLParser.ALL:
                    case YQLParser.ALTER:
                    case YQLParser.ANALYZE:
                    case YQLParser.AND:
                    case YQLParser.ANSI:
                    case YQLParser.ANY:
                    case YQLParser.ARRAY:
                    case YQLParser.AS:
                    case YQLParser.ASC:
                    case YQLParser.ASSUME:
                    case YQLParser.ASYMMETRIC:
                    case YQLParser.ASYNC:
                    case YQLParser.AT:
                    case YQLParser.ATTACH:
                    case YQLParser.ATTRIBUTES:
                    case YQLParser.AUTOINCREMENT:
                    case YQLParser.BACKUP:
                    case YQLParser.COLLECTION:
                    case YQLParser.BEFORE:
                    case YQLParser.BEGIN:
                    case YQLParser.BERNOULLI:
                    case YQLParser.BETWEEN:
                    case YQLParser.BITCAST:
                    case YQLParser.BY:
                    case YQLParser.CASCADE:
                    case YQLParser.CASE:
                    case YQLParser.CAST:
                    case YQLParser.CHANGEFEED:
                    case YQLParser.CHECK:
                    case YQLParser.CLASSIFIER:
                    case YQLParser.COLLATE:
                    case YQLParser.COLUMN:
                    case YQLParser.COLUMNS:
                    case YQLParser.COMMIT:
                    case YQLParser.COMPACT:
                    case YQLParser.CONDITIONAL:
                    case YQLParser.CONFLICT:
                    case YQLParser.CONNECT:
                    case YQLParser.CONSTRAINT:
                    case YQLParser.CONSUMER:
                    case YQLParser.COVER:
                    case YQLParser.CREATE:
                    case YQLParser.CROSS:
                    case YQLParser.CUBE:
                    case YQLParser.CURRENT:
                    case YQLParser.CURRENT_DATE:
                    case YQLParser.CURRENT_TIME:
                    case YQLParser.CURRENT_TIMESTAMP:
                    case YQLParser.DATA:
                    case YQLParser.DATABASE:
                    case YQLParser.DECIMAL:
                    case YQLParser.DECLARE:
                    case YQLParser.DEFAULT:
                    case YQLParser.DEFERRABLE:
                    case YQLParser.DEFERRED:
                    case YQLParser.DEFINE:
                    case YQLParser.DELETE:
                    case YQLParser.DESC:
                    case YQLParser.DESCRIBE:
                    case YQLParser.DETACH:
                    case YQLParser.DIRECTORY:
                    case YQLParser.DISABLE:
                    case YQLParser.DISCARD:
                    case YQLParser.DISTINCT:
                    case YQLParser.DO:
                    case YQLParser.DROP:
                    case YQLParser.EACH:
                    case YQLParser.ELSE:
                    case YQLParser.EMPTY:
                    case YQLParser.EMPTY_ACTION:
                    case YQLParser.ENCRYPTED:
                    case YQLParser.END:
                    case YQLParser.ERASE:
                    case YQLParser.ERROR:
                    case YQLParser.ESCAPE:
                    case YQLParser.EVALUATE:
                    case YQLParser.EXCEPT:
                    case YQLParser.EXCLUDE:
                    case YQLParser.EXCLUSION:
                    case YQLParser.EXCLUSIVE:
                    case YQLParser.EXISTS:
                    case YQLParser.EXPLAIN:
                    case YQLParser.EXPORT:
                    case YQLParser.EXTERNAL:
                    case YQLParser.FAIL:
                    case YQLParser.FAMILY:
                    case YQLParser.FILTER:
                    case YQLParser.FIRST:
                    case YQLParser.FLATTEN:
                    case YQLParser.FOLLOWING:
                    case YQLParser.FOR:
                    case YQLParser.FOREIGN:
                    case YQLParser.FROM:
                    case YQLParser.FULL:
                    case YQLParser.FUNCTION:
                    case YQLParser.GLOB:
                    case YQLParser.GRANT:
                    case YQLParser.GROUP:
                    case YQLParser.GROUPING:
                    case YQLParser.GROUPS:
                    case YQLParser.HASH:
                    case YQLParser.HAVING:
                    case YQLParser.HOP:
                    case YQLParser.IF:
                    case YQLParser.IGNORE:
                    case YQLParser.ILIKE:
                    case YQLParser.IMMEDIATE:
                    case YQLParser.IMPORT:
                    case YQLParser.IN:
                    case YQLParser.INCREMENTAL:
                    case YQLParser.INDEX:
                    case YQLParser.INDEXED:
                    case YQLParser.INHERITS:
                    case YQLParser.INITIAL:
                    case YQLParser.INITIALLY:
                    case YQLParser.INNER:
                    case YQLParser.INSERT:
                    case YQLParser.INSTEAD:
                    case YQLParser.INTERSECT:
                    case YQLParser.INTO:
                    case YQLParser.IS:
                    case YQLParser.ISNULL:
                    case YQLParser.JOIN:
                    case YQLParser.JSON_EXISTS:
                    case YQLParser.JSON_QUERY:
                    case YQLParser.JSON_VALUE:
                    case YQLParser.KEY:
                    case YQLParser.LAST:
                    case YQLParser.LEFT:
                    case YQLParser.LEGACY:
                    case YQLParser.LIKE:
                    case YQLParser.LIMIT:
                    case YQLParser.LOCAL:
                    case YQLParser.MANAGE:
                    case YQLParser.MATCH:
                    case YQLParser.MATCHES:
                    case YQLParser.MATCH_RECOGNIZE:
                    case YQLParser.MEASURES:
                    case YQLParser.MICROSECONDS:
                    case YQLParser.MILLISECONDS:
                    case YQLParser.MODIFY:
                    case YQLParser.NANOSECONDS:
                    case YQLParser.NATURAL:
                    case YQLParser.NEXT:
                    case YQLParser.NO:
                    case YQLParser.NOT:
                    case YQLParser.NOTNULL:
                    case YQLParser.NULL:
                    case YQLParser.NULLS:
                    case YQLParser.OBJECT:
                    case YQLParser.OF:
                    case YQLParser.OFFSET:
                    case YQLParser.OMIT:
                    case YQLParser.ON:
                    case YQLParser.ONE:
                    case YQLParser.ONLY:
                    case YQLParser.OPTION:
                    case YQLParser.OR:
                    case YQLParser.ORDER:
                    case YQLParser.OTHERS:
                    case YQLParser.OUTER:
                    case YQLParser.OVER:
                    case YQLParser.PARALLEL:
                    case YQLParser.PARTITION:
                    case YQLParser.PASSING:
                    case YQLParser.PASSWORD:
                    case YQLParser.PAST:
                    case YQLParser.PATTERN:
                    case YQLParser.PER:
                    case YQLParser.PERMUTE:
                    case YQLParser.PLAN:
                    case YQLParser.POOL:
                    case YQLParser.PRAGMA:
                    case YQLParser.PRECEDING:
                    case YQLParser.PRESORT:
                    case YQLParser.PRIMARY:
                    case YQLParser.PRIVILEGES:
                    case YQLParser.PROCESS:
                    case YQLParser.QUEUE:
                    case YQLParser.RAISE:
                    case YQLParser.RANGE:
                    case YQLParser.REDUCE:
                    case YQLParser.REFERENCES:
                    case YQLParser.REGEXP:
                    case YQLParser.REINDEX:
                    case YQLParser.RELEASE:
                    case YQLParser.REMOVE:
                    case YQLParser.RENAME:
                    case YQLParser.REPLACE:
                    case YQLParser.REPLICATION:
                    case YQLParser.RESET:
                    case YQLParser.RESPECT:
                    case YQLParser.RESTORE:
                    case YQLParser.RESTRICT:
                    case YQLParser.RESULT:
                    case YQLParser.RETURN:
                    case YQLParser.RETURNING:
                    case YQLParser.REVERT:
                    case YQLParser.REVOKE:
                    case YQLParser.RIGHT:
                    case YQLParser.RLIKE:
                    case YQLParser.ROLLBACK:
                    case YQLParser.ROLLUP:
                    case YQLParser.ROW:
                    case YQLParser.ROWS:
                    case YQLParser.SAMPLE:
                    case YQLParser.SAVEPOINT:
                    case YQLParser.SCHEMA:
                    case YQLParser.SECONDS:
                    case YQLParser.SEEK:
                    case YQLParser.SELECT:
                    case YQLParser.SEMI:
                    case YQLParser.SETS:
                    case YQLParser.SHOW:
                    case YQLParser.TSKIP:
                    case YQLParser.SOURCE:
                    case YQLParser.STREAM:
                    case YQLParser.SUBQUERY:
                    case YQLParser.SUBSET:
                    case YQLParser.SYMBOLS:
                    case YQLParser.SYMMETRIC:
                    case YQLParser.SYNC:
                    case YQLParser.SYSTEM:
                    case YQLParser.TABLE:
                    case YQLParser.TABLES:
                    case YQLParser.TABLESAMPLE:
                    case YQLParser.TABLESTORE:
                    case YQLParser.TEMP:
                    case YQLParser.TEMPORARY:
                    case YQLParser.THEN:
                    case YQLParser.TIES:
                    case YQLParser.TO:
                    case YQLParser.TOPIC:
                    case YQLParser.TRANSACTION:
                    case YQLParser.TRIGGER:
                    case YQLParser.TYPE:
                    case YQLParser.UNBOUNDED:
                    case YQLParser.UNCONDITIONAL:
                    case YQLParser.UNION:
                    case YQLParser.UNIQUE:
                    case YQLParser.UNKNOWN:
                    case YQLParser.UNMATCHED:
                    case YQLParser.UPDATE:
                    case YQLParser.UPSERT:
                    case YQLParser.USE:
                    case YQLParser.USER:
                    case YQLParser.USING:
                    case YQLParser.VACUUM:
                    case YQLParser.VALUES:
                    case YQLParser.VIEW:
                    case YQLParser.VIRTUAL:
                    case YQLParser.WHEN:
                    case YQLParser.WHERE:
                    case YQLParser.WINDOW:
                    case YQLParser.WITH:
                    case YQLParser.WITHOUT:
                    case YQLParser.WRAPPER:
                    case YQLParser.XOR:
                    case YQLParser.STRING_VALUE:
                    case YQLParser.ID_PLAIN:
                    case YQLParser.ID_QUOTED:
                        {
                        this.state = 3895;
                        this.type_name_tag();
                        }
                        break;
                    case YQLParser.LPAREN:
                        {
                        this.state = 3896;
                        this.match(YQLParser.LPAREN);
                        this.state = 3897;
                        this.type_name_tag();
                        this.state = 3902;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 409, this.context);
                        while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                            if (alternative === 1) {
                                {
                                {
                                this.state = 3898;
                                this.match(YQLParser.COMMA);
                                this.state = 3899;
                                this.type_name_tag();
                                }
                                }
                            }
                            this.state = 3904;
                            this.errorHandler.sync(this);
                            alternative = this.interpreter.adaptivePredict(this.tokenStream, 409, this.context);
                        }
                        this.state = 3906;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 25) {
                            {
                            this.state = 3905;
                            this.match(YQLParser.COMMA);
                            }
                        }

                        this.state = 3908;
                        this.match(YQLParser.RPAREN);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3914;
                _la = this.tokenStream.LA(1);
                if(!(_la === 78 || _la === 262)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3916;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3915;
                    this.match(YQLParser.EQUALS);
                    }
                }

                this.state = 3918;
                this.type_name_or_bind();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3919;
                this.match(YQLParser.SCHEMA);
                this.state = 3921;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3920;
                    this.match(YQLParser.EQUALS);
                    }
                }

                this.state = 3923;
                this.match(YQLParser.LPAREN);
                this.state = 3932;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4026531585) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294705119) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294836223) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || _la === 320 || _la === 321) {
                    {
                    this.state = 3924;
                    this.struct_arg_positional();
                    this.state = 3929;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 415, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 3925;
                            this.match(YQLParser.COMMA);
                            this.state = 3926;
                            this.struct_arg_positional();
                            }
                            }
                        }
                        this.state = 3931;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 415, this.context);
                    }
                    }
                }

                this.state = 3935;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3934;
                    this.match(YQLParser.COMMA);
                    }
                }

                this.state = 3937;
                this.match(YQLParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_ref(): Object_refContext {
        let localContext = new Object_refContext(this.context, this.state);
        this.enterRule(localContext, 642, YQLParser.RULE_object_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3943;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 419, this.context) ) {
            case 1:
                {
                this.state = 3940;
                this.cluster_expr();
                this.state = 3941;
                this.match(YQLParser.DOT);
                }
                break;
            }
            this.state = 3945;
            this.id_or_at();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext {
        let localContext = new Simple_table_ref_coreContext(this.context, this.state);
        this.enterRule(localContext, 644, YQLParser.RULE_simple_table_ref_core);
        let _la: number;
        try {
            this.state = 3952;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 421, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3947;
                this.object_ref();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3949;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 3948;
                    this.match(YQLParser.COMMAT);
                    }
                }

                this.state = 3951;
                this.bind_parameter();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_table_ref(): Simple_table_refContext {
        let localContext = new Simple_table_refContext(this.context, this.state);
        this.enterRule(localContext, 646, YQLParser.RULE_simple_table_ref);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3954;
            this.simple_table_ref_core();
            this.state = 3956;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3955;
                this.table_hints();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_simple_table_ref(): Into_simple_table_refContext {
        let localContext = new Into_simple_table_refContext(this.context, this.state);
        this.enterRule(localContext, 648, YQLParser.RULE_into_simple_table_ref);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3958;
            this.simple_table_ref();
            this.state = 3962;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 3959;
                this.match(YQLParser.ERASE);
                this.state = 3960;
                this.match(YQLParser.BY);
                this.state = 3961;
                this.pure_column_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public delete_stmt(): Delete_stmtContext {
        let localContext = new Delete_stmtContext(this.context, this.state);
        this.enterRule(localContext, 650, YQLParser.RULE_delete_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3964;
            this.match(YQLParser.DELETE);
            this.state = 3965;
            this.match(YQLParser.FROM);
            this.state = 3966;
            this.simple_table_ref();
            this.state = 3970;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.WHERE:
                {
                this.state = 3967;
                this.where_expr();
                }
                break;
            case YQLParser.ON:
                {
                this.state = 3968;
                this.match(YQLParser.ON);
                this.state = 3969;
                this.into_values_source();
                }
                break;
            case YQLParser.EOF:
            case YQLParser.SEMICOLON:
            case YQLParser.END:
            case YQLParser.RETURNING:
                break;
            default:
                break;
            }
            this.state = 3973;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251) {
                {
                this.state = 3972;
                this.returning_columns_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public update_stmt(): Update_stmtContext {
        let localContext = new Update_stmtContext(this.context, this.state);
        this.enterRule(localContext, 652, YQLParser.RULE_update_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3975;
            this.match(YQLParser.UPDATE);
            this.state = 3976;
            this.simple_table_ref();
            this.state = 3984;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                {
                this.state = 3977;
                this.match(YQLParser.SET);
                this.state = 3978;
                this.set_clause_choice();
                this.state = 3980;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 3979;
                    this.where_expr();
                    }
                }

                }
                break;
            case YQLParser.ON:
                {
                this.state = 3982;
                this.match(YQLParser.ON);
                this.state = 3983;
                this.into_values_source();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3987;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251) {
                {
                this.state = 3986;
                this.returning_columns_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause_choice(): Set_clause_choiceContext {
        let localContext = new Set_clause_choiceContext(this.context, this.state);
        this.enterRule(localContext, 654, YQLParser.RULE_set_clause_choice);
        try {
            this.state = 3991;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3989;
                this.set_clause_list();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3990;
                this.multiple_column_assignment();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause_list(): Set_clause_listContext {
        let localContext = new Set_clause_listContext(this.context, this.state);
        this.enterRule(localContext, 656, YQLParser.RULE_set_clause_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3993;
            this.set_clause();
            this.state = 3998;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3994;
                this.match(YQLParser.COMMA);
                this.state = 3995;
                this.set_clause();
                }
                }
                this.state = 4000;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause(): Set_clauseContext {
        let localContext = new Set_clauseContext(this.context, this.state);
        this.enterRule(localContext, 658, YQLParser.RULE_set_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4001;
            this.set_target();
            this.state = 4002;
            this.match(YQLParser.EQUALS);
            this.state = 4003;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_target(): Set_targetContext {
        let localContext = new Set_targetContext(this.context, this.state);
        this.enterRule(localContext, 660, YQLParser.RULE_set_target);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4005;
            this.column_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiple_column_assignment(): Multiple_column_assignmentContext {
        let localContext = new Multiple_column_assignmentContext(this.context, this.state);
        this.enterRule(localContext, 662, YQLParser.RULE_multiple_column_assignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4007;
            this.set_target_list();
            this.state = 4008;
            this.match(YQLParser.EQUALS);
            this.state = 4009;
            this.match(YQLParser.LPAREN);
            this.state = 4010;
            this.simple_values_source();
            this.state = 4011;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_target_list(): Set_target_listContext {
        let localContext = new Set_target_listContext(this.context, this.state);
        this.enterRule(localContext, 664, YQLParser.RULE_set_target_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4013;
            this.match(YQLParser.LPAREN);
            this.state = 4014;
            this.set_target();
            this.state = 4019;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4015;
                this.match(YQLParser.COMMA);
                this.state = 4016;
                this.set_target();
                }
                }
                this.state = 4021;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4022;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_topic_stmt(): Create_topic_stmtContext {
        let localContext = new Create_topic_stmtContext(this.context, this.state);
        this.enterRule(localContext, 666, YQLParser.RULE_create_topic_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4024;
            this.match(YQLParser.CREATE);
            this.state = 4025;
            this.match(YQLParser.TOPIC);
            this.state = 4029;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 432, this.context) ) {
            case 1:
                {
                this.state = 4026;
                this.match(YQLParser.IF);
                this.state = 4027;
                this.match(YQLParser.NOT);
                this.state = 4028;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 4031;
            this.topic_ref();
            this.state = 4033;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 4032;
                this.create_topic_entries();
                }
            }

            this.state = 4036;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 4035;
                this.with_topic_settings();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_topic_entries(): Create_topic_entriesContext {
        let localContext = new Create_topic_entriesContext(this.context, this.state);
        this.enterRule(localContext, 668, YQLParser.RULE_create_topic_entries);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4038;
            this.match(YQLParser.LPAREN);
            this.state = 4039;
            this.create_topic_entry();
            this.state = 4044;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4040;
                this.match(YQLParser.COMMA);
                this.state = 4041;
                this.create_topic_entry();
                }
                }
                this.state = 4046;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4047;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_topic_entry(): Create_topic_entryContext {
        let localContext = new Create_topic_entryContext(this.context, this.state);
        this.enterRule(localContext, 670, YQLParser.RULE_create_topic_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4049;
            this.topic_create_consumer_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_topic_settings(): With_topic_settingsContext {
        let localContext = new With_topic_settingsContext(this.context, this.state);
        this.enterRule(localContext, 672, YQLParser.RULE_with_topic_settings);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4051;
            this.match(YQLParser.WITH);
            this.state = 4052;
            this.match(YQLParser.LPAREN);
            this.state = 4053;
            this.topic_settings();
            this.state = 4054;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_stmt(): Alter_topic_stmtContext {
        let localContext = new Alter_topic_stmtContext(this.context, this.state);
        this.enterRule(localContext, 674, YQLParser.RULE_alter_topic_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4056;
            this.match(YQLParser.ALTER);
            this.state = 4057;
            this.match(YQLParser.TOPIC);
            this.state = 4060;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 436, this.context) ) {
            case 1:
                {
                this.state = 4058;
                this.match(YQLParser.IF);
                this.state = 4059;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 4062;
            this.topic_ref();
            this.state = 4063;
            this.alter_topic_action();
            this.state = 4068;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4064;
                this.match(YQLParser.COMMA);
                this.state = 4065;
                this.alter_topic_action();
                }
                }
                this.state = 4070;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_action(): Alter_topic_actionContext {
        let localContext = new Alter_topic_actionContext(this.context, this.state);
        this.enterRule(localContext, 676, YQLParser.RULE_alter_topic_action);
        try {
            this.state = 4076;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ADD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4071;
                this.alter_topic_add_consumer();
                }
                break;
            case YQLParser.ALTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4072;
                this.alter_topic_alter_consumer();
                }
                break;
            case YQLParser.DROP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4073;
                this.alter_topic_drop_consumer();
                }
                break;
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4074;
                this.alter_topic_set_settings();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4075;
                this.alter_topic_reset_settings();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_add_consumer(): Alter_topic_add_consumerContext {
        let localContext = new Alter_topic_add_consumerContext(this.context, this.state);
        this.enterRule(localContext, 678, YQLParser.RULE_alter_topic_add_consumer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4078;
            this.match(YQLParser.ADD);
            this.state = 4079;
            this.topic_create_consumer_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_create_consumer_entry(): Topic_create_consumer_entryContext {
        let localContext = new Topic_create_consumer_entryContext(this.context, this.state);
        this.enterRule(localContext, 680, YQLParser.RULE_topic_create_consumer_entry);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4081;
            this.match(YQLParser.CONSUMER);
            this.state = 4082;
            this.an_id();
            this.state = 4084;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 4083;
                this.topic_consumer_with_settings();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_alter_consumer(): Alter_topic_alter_consumerContext {
        let localContext = new Alter_topic_alter_consumerContext(this.context, this.state);
        this.enterRule(localContext, 682, YQLParser.RULE_alter_topic_alter_consumer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4086;
            this.match(YQLParser.ALTER);
            this.state = 4087;
            this.match(YQLParser.CONSUMER);
            this.state = 4088;
            this.topic_consumer_ref();
            this.state = 4089;
            this.alter_topic_alter_consumer_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_alter_consumer_entry(): Alter_topic_alter_consumer_entryContext {
        let localContext = new Alter_topic_alter_consumer_entryContext(this.context, this.state);
        this.enterRule(localContext, 684, YQLParser.RULE_alter_topic_alter_consumer_entry);
        try {
            this.state = 4093;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4091;
                this.topic_alter_consumer_set();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4092;
                this.topic_alter_consumer_reset();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_drop_consumer(): Alter_topic_drop_consumerContext {
        let localContext = new Alter_topic_drop_consumerContext(this.context, this.state);
        this.enterRule(localContext, 686, YQLParser.RULE_alter_topic_drop_consumer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4095;
            this.match(YQLParser.DROP);
            this.state = 4096;
            this.match(YQLParser.CONSUMER);
            this.state = 4097;
            this.topic_consumer_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_alter_consumer_set(): Topic_alter_consumer_setContext {
        let localContext = new Topic_alter_consumer_setContext(this.context, this.state);
        this.enterRule(localContext, 688, YQLParser.RULE_topic_alter_consumer_set);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4099;
            this.match(YQLParser.SET);
            this.state = 4100;
            this.match(YQLParser.LPAREN);
            this.state = 4101;
            this.topic_consumer_settings();
            this.state = 4102;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_alter_consumer_reset(): Topic_alter_consumer_resetContext {
        let localContext = new Topic_alter_consumer_resetContext(this.context, this.state);
        this.enterRule(localContext, 690, YQLParser.RULE_topic_alter_consumer_reset);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4104;
            this.match(YQLParser.RESET);
            this.state = 4105;
            this.match(YQLParser.LPAREN);
            this.state = 4106;
            this.an_id();
            this.state = 4111;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4107;
                this.match(YQLParser.COMMA);
                this.state = 4108;
                this.an_id();
                }
                }
                this.state = 4113;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4114;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_set_settings(): Alter_topic_set_settingsContext {
        let localContext = new Alter_topic_set_settingsContext(this.context, this.state);
        this.enterRule(localContext, 692, YQLParser.RULE_alter_topic_set_settings);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4116;
            this.match(YQLParser.SET);
            this.state = 4117;
            this.match(YQLParser.LPAREN);
            this.state = 4118;
            this.topic_settings();
            this.state = 4119;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_reset_settings(): Alter_topic_reset_settingsContext {
        let localContext = new Alter_topic_reset_settingsContext(this.context, this.state);
        this.enterRule(localContext, 694, YQLParser.RULE_alter_topic_reset_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4121;
            this.match(YQLParser.RESET);
            this.state = 4122;
            this.match(YQLParser.LPAREN);
            this.state = 4123;
            this.an_id();
            this.state = 4128;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4124;
                this.match(YQLParser.COMMA);
                this.state = 4125;
                this.an_id_pure();
                }
                }
                this.state = 4130;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4131;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_topic_stmt(): Drop_topic_stmtContext {
        let localContext = new Drop_topic_stmtContext(this.context, this.state);
        this.enterRule(localContext, 696, YQLParser.RULE_drop_topic_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4133;
            this.match(YQLParser.DROP);
            this.state = 4134;
            this.match(YQLParser.TOPIC);
            this.state = 4137;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 443, this.context) ) {
            case 1:
                {
                this.state = 4135;
                this.match(YQLParser.IF);
                this.state = 4136;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 4139;
            this.topic_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_settings(): Topic_settingsContext {
        let localContext = new Topic_settingsContext(this.context, this.state);
        this.enterRule(localContext, 698, YQLParser.RULE_topic_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4141;
            this.topic_settings_entry();
            this.state = 4146;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4142;
                this.match(YQLParser.COMMA);
                this.state = 4143;
                this.topic_settings_entry();
                }
                }
                this.state = 4148;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_settings_entry(): Topic_settings_entryContext {
        let localContext = new Topic_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 700, YQLParser.RULE_topic_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4149;
            this.an_id();
            this.state = 4150;
            this.match(YQLParser.EQUALS);
            this.state = 4151;
            this.topic_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_setting_value(): Topic_setting_valueContext {
        let localContext = new Topic_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 702, YQLParser.RULE_topic_setting_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4153;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_with_settings(): Topic_consumer_with_settingsContext {
        let localContext = new Topic_consumer_with_settingsContext(this.context, this.state);
        this.enterRule(localContext, 704, YQLParser.RULE_topic_consumer_with_settings);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4155;
            this.match(YQLParser.WITH);
            this.state = 4156;
            this.match(YQLParser.LPAREN);
            this.state = 4157;
            this.topic_consumer_settings();
            this.state = 4158;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_settings(): Topic_consumer_settingsContext {
        let localContext = new Topic_consumer_settingsContext(this.context, this.state);
        this.enterRule(localContext, 706, YQLParser.RULE_topic_consumer_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4160;
            this.topic_consumer_settings_entry();
            this.state = 4165;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4161;
                this.match(YQLParser.COMMA);
                this.state = 4162;
                this.topic_consumer_settings_entry();
                }
                }
                this.state = 4167;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_settings_entry(): Topic_consumer_settings_entryContext {
        let localContext = new Topic_consumer_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 708, YQLParser.RULE_topic_consumer_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4168;
            this.an_id();
            this.state = 4169;
            this.match(YQLParser.EQUALS);
            this.state = 4170;
            this.topic_consumer_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_setting_value(): Topic_consumer_setting_valueContext {
        let localContext = new Topic_consumer_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 710, YQLParser.RULE_topic_consumer_setting_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4172;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_ref(): Topic_refContext {
        let localContext = new Topic_refContext(this.context, this.state);
        this.enterRule(localContext, 712, YQLParser.RULE_topic_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4177;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 446, this.context) ) {
            case 1:
                {
                this.state = 4174;
                this.cluster_expr();
                this.state = 4175;
                this.match(YQLParser.DOT);
                }
                break;
            }
            this.state = 4179;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_ref(): Topic_consumer_refContext {
        let localContext = new Topic_consumer_refContext(this.context, this.state);
        this.enterRule(localContext, 714, YQLParser.RULE_topic_consumer_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4181;
            this.an_id_pure();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public null_treatment(): Null_treatmentContext {
        let localContext = new Null_treatmentContext(this.context, this.state);
        this.enterRule(localContext, 716, YQLParser.RULE_null_treatment);
        try {
            this.state = 4187;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.RESPECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4183;
                this.match(YQLParser.RESPECT);
                this.state = 4184;
                this.match(YQLParser.NULLS);
                }
                break;
            case YQLParser.IGNORE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4185;
                this.match(YQLParser.IGNORE);
                this.state = 4186;
                this.match(YQLParser.NULLS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filter_clause(): Filter_clauseContext {
        let localContext = new Filter_clauseContext(this.context, this.state);
        this.enterRule(localContext, 718, YQLParser.RULE_filter_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4189;
            this.match(YQLParser.FILTER);
            this.state = 4190;
            this.match(YQLParser.LPAREN);
            this.state = 4191;
            this.where_expr();
            this.state = 4192;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_name_or_specification(): Window_name_or_specificationContext {
        let localContext = new Window_name_or_specificationContext(this.context, this.state);
        this.enterRule(localContext, 720, YQLParser.RULE_window_name_or_specification);
        try {
            this.state = 4196;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4194;
                this.window_name();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4195;
                this.window_specification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_name(): Window_nameContext {
        let localContext = new Window_nameContext(this.context, this.state);
        this.enterRule(localContext, 722, YQLParser.RULE_window_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4198;
            this.an_id_window();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_clause(): Window_clauseContext {
        let localContext = new Window_clauseContext(this.context, this.state);
        this.enterRule(localContext, 724, YQLParser.RULE_window_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4200;
            this.match(YQLParser.WINDOW);
            this.state = 4201;
            this.window_definition_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_definition_list(): Window_definition_listContext {
        let localContext = new Window_definition_listContext(this.context, this.state);
        this.enterRule(localContext, 726, YQLParser.RULE_window_definition_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4203;
            this.window_definition();
            this.state = 4208;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4204;
                this.match(YQLParser.COMMA);
                this.state = 4205;
                this.window_definition();
                }
                }
                this.state = 4210;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_definition(): Window_definitionContext {
        let localContext = new Window_definitionContext(this.context, this.state);
        this.enterRule(localContext, 728, YQLParser.RULE_window_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4211;
            this.new_window_name();
            this.state = 4212;
            this.match(YQLParser.AS);
            this.state = 4213;
            this.window_specification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public new_window_name(): New_window_nameContext {
        let localContext = new New_window_nameContext(this.context, this.state);
        this.enterRule(localContext, 730, YQLParser.RULE_new_window_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4215;
            this.window_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification(): Window_specificationContext {
        let localContext = new Window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 732, YQLParser.RULE_window_specification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4217;
            this.match(YQLParser.LPAREN);
            this.state = 4218;
            this.window_specification_details();
            this.state = 4219;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification_details(): Window_specification_detailsContext {
        let localContext = new Window_specification_detailsContext(this.context, this.state);
        this.enterRule(localContext, 734, YQLParser.RULE_window_specification_details);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4222;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 450, this.context) ) {
            case 1:
                {
                this.state = 4221;
                this.existing_window_name();
                }
                break;
            }
            this.state = 4225;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 216) {
                {
                this.state = 4224;
                this.window_partition_clause();
                }
            }

            this.state = 4228;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 211) {
                {
                this.state = 4227;
                this.window_order_clause();
                }
            }

            this.state = 4231;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 150 || _la === 233 || _la === 259) {
                {
                this.state = 4230;
                this.window_frame_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existing_window_name(): Existing_window_nameContext {
        let localContext = new Existing_window_nameContext(this.context, this.state);
        this.enterRule(localContext, 736, YQLParser.RULE_existing_window_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4233;
            this.window_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_partition_clause(): Window_partition_clauseContext {
        let localContext = new Window_partition_clauseContext(this.context, this.state);
        this.enterRule(localContext, 738, YQLParser.RULE_window_partition_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4235;
            this.match(YQLParser.PARTITION);
            this.state = 4237;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 4236;
                this.match(YQLParser.COMPACT);
                }
            }

            this.state = 4239;
            this.match(YQLParser.BY);
            this.state = 4240;
            this.named_expr_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_order_clause(): Window_order_clauseContext {
        let localContext = new Window_order_clauseContext(this.context, this.state);
        this.enterRule(localContext, 740, YQLParser.RULE_window_order_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4242;
            this.order_by_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_clause(): Window_frame_clauseContext {
        let localContext = new Window_frame_clauseContext(this.context, this.state);
        this.enterRule(localContext, 742, YQLParser.RULE_window_frame_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4244;
            this.window_frame_units();
            this.state = 4245;
            this.window_frame_extent();
            this.state = 4247;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 125) {
                {
                this.state = 4246;
                this.window_frame_exclusion();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_units(): Window_frame_unitsContext {
        let localContext = new Window_frame_unitsContext(this.context, this.state);
        this.enterRule(localContext, 744, YQLParser.RULE_window_frame_units);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4249;
            _la = this.tokenStream.LA(1);
            if(!(_la === 150 || _la === 233 || _la === 259)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_extent(): Window_frame_extentContext {
        let localContext = new Window_frame_extentContext(this.context, this.state);
        this.enterRule(localContext, 746, YQLParser.RULE_window_frame_extent);
        try {
            this.state = 4253;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 456, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4251;
                this.window_frame_bound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4252;
                this.window_frame_between();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_between(): Window_frame_betweenContext {
        let localContext = new Window_frame_betweenContext(this.context, this.state);
        this.enterRule(localContext, 748, YQLParser.RULE_window_frame_between);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4255;
            this.match(YQLParser.BETWEEN);
            this.state = 4256;
            this.window_frame_bound();
            this.state = 4257;
            this.match(YQLParser.AND);
            this.state = 4258;
            this.window_frame_bound();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_bound(): Window_frame_boundContext {
        let localContext = new Window_frame_boundContext(this.context, this.state);
        this.enterRule(localContext, 750, YQLParser.RULE_window_frame_bound);
        let _la: number;
        try {
            this.state = 4267;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 458, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4260;
                this.match(YQLParser.CURRENT);
                this.state = 4261;
                this.match(YQLParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4264;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 457, this.context) ) {
                case 1:
                    {
                    this.state = 4262;
                    this.expr();
                    }
                    break;
                case 2:
                    {
                    this.state = 4263;
                    this.match(YQLParser.UNBOUNDED);
                    }
                    break;
                }
                this.state = 4266;
                _la = this.tokenStream.LA(1);
                if(!(_la === 139 || _la === 226)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_exclusion(): Window_frame_exclusionContext {
        let localContext = new Window_frame_exclusionContext(this.context, this.state);
        this.enterRule(localContext, 752, YQLParser.RULE_window_frame_exclusion);
        try {
            this.state = 4279;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 459, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4269;
                this.match(YQLParser.EXCLUDE);
                this.state = 4270;
                this.match(YQLParser.CURRENT);
                this.state = 4271;
                this.match(YQLParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4272;
                this.match(YQLParser.EXCLUDE);
                this.state = 4273;
                this.match(YQLParser.GROUP);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4274;
                this.match(YQLParser.EXCLUDE);
                this.state = 4275;
                this.match(YQLParser.TIES);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4276;
                this.match(YQLParser.EXCLUDE);
                this.state = 4277;
                this.match(YQLParser.NO);
                this.state = 4278;
                this.match(YQLParser.OTHERS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public use_stmt(): Use_stmtContext {
        let localContext = new Use_stmtContext(this.context, this.state);
        this.enterRule(localContext, 754, YQLParser.RULE_use_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4281;
            this.match(YQLParser.USE);
            this.state = 4282;
            this.cluster_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subselect_stmt(): Subselect_stmtContext {
        let localContext = new Subselect_stmtContext(this.context, this.state);
        this.enterRule(localContext, 756, YQLParser.RULE_subselect_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4289;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LPAREN:
                {
                this.state = 4284;
                this.match(YQLParser.LPAREN);
                this.state = 4285;
                this.select_stmt();
                this.state = 4286;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                {
                this.state = 4288;
                this.select_unparenthesized_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_nodes_stmt(): Named_nodes_stmtContext {
        let localContext = new Named_nodes_stmtContext(this.context, this.state);
        this.enterRule(localContext, 758, YQLParser.RULE_named_nodes_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4291;
            this.bind_parameter_list();
            this.state = 4292;
            this.match(YQLParser.EQUALS);
            this.state = 4295;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 461, this.context) ) {
            case 1:
                {
                this.state = 4293;
                this.expr();
                }
                break;
            case 2:
                {
                this.state = 4294;
                this.subselect_stmt();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commit_stmt(): Commit_stmtContext {
        let localContext = new Commit_stmtContext(this.context, this.state);
        this.enterRule(localContext, 760, YQLParser.RULE_commit_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4297;
            this.match(YQLParser.COMMIT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollback_stmt(): Rollback_stmtContext {
        let localContext = new Rollback_stmtContext(this.context, this.state);
        this.enterRule(localContext, 762, YQLParser.RULE_rollback_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4299;
            this.match(YQLParser.ROLLBACK);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_table(): Analyze_tableContext {
        let localContext = new Analyze_tableContext(this.context, this.state);
        this.enterRule(localContext, 764, YQLParser.RULE_analyze_table);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4301;
            this.simple_table_ref();
            this.state = 4306;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 4302;
                this.match(YQLParser.LPAREN);
                this.state = 4303;
                this.column_list();
                this.state = 4304;
                this.match(YQLParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_table_list(): Analyze_table_listContext {
        let localContext = new Analyze_table_listContext(this.context, this.state);
        this.enterRule(localContext, 766, YQLParser.RULE_analyze_table_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4308;
            this.analyze_table();
            this.state = 4313;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 463, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4309;
                    this.match(YQLParser.COMMA);
                    this.state = 4310;
                    this.analyze_table();
                    }
                    }
                }
                this.state = 4315;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 463, this.context);
            }
            this.state = 4317;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 4316;
                this.match(YQLParser.COMMA);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_stmt(): Analyze_stmtContext {
        let localContext = new Analyze_stmtContext(this.context, this.state);
        this.enterRule(localContext, 768, YQLParser.RULE_analyze_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4319;
            this.match(YQLParser.ANALYZE);
            this.state = 4320;
            this.analyze_table_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 770, YQLParser.RULE_identifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4322;
            _la = this.tokenStream.LA(1);
            if(!(_la === 320 || _la === 321)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id(): IdContext {
        let localContext = new IdContext(this.context, this.state);
        this.enterRule(localContext, 772, YQLParser.RULE_id);
        try {
            this.state = 4326;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4324;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4325;
                this.keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_schema(): Id_schemaContext {
        let localContext = new Id_schemaContext(this.context, this.state);
        this.enterRule(localContext, 774, YQLParser.RULE_id_schema);
        try {
            this.state = 4335;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4328;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4329;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4330;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4331;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4332;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4333;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4334;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_expr(): Id_exprContext {
        let localContext = new Id_exprContext(this.context, this.state);
        this.enterRule(localContext, 776, YQLParser.RULE_id_expr);
        try {
            this.state = 4343;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4337;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4338;
                this.keyword_compat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4339;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4340;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4341;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4342;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_expr_in(): Id_expr_inContext {
        let localContext = new Id_expr_inContext(this.context, this.state);
        this.enterRule(localContext, 778, YQLParser.RULE_id_expr_in);
        try {
            this.state = 4350;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4345;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4346;
                this.keyword_compat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4347;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4348;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4349;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_window(): Id_windowContext {
        let localContext = new Id_windowContext(this.context, this.state);
        this.enterRule(localContext, 780, YQLParser.RULE_id_window);
        try {
            this.state = 4360;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4352;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4353;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4354;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4355;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4356;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4357;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4358;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4359;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_table(): Id_tableContext {
        let localContext = new Id_tableContext(this.context, this.state);
        this.enterRule(localContext, 782, YQLParser.RULE_id_table);
        try {
            this.state = 4369;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4362;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4363;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4364;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4365;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4366;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4367;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4368;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_without(): Id_withoutContext {
        let localContext = new Id_withoutContext(this.context, this.state);
        this.enterRule(localContext, 784, YQLParser.RULE_id_without);
        try {
            this.state = 4378;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4371;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4372;
                this.keyword_compat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4373;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4374;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4375;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4376;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4377;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_hint(): Id_hintContext {
        let localContext = new Id_hintContext(this.context, this.state);
        this.enterRule(localContext, 786, YQLParser.RULE_id_hint);
        try {
            this.state = 4388;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4380;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4381;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4382;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4383;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4384;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4385;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4386;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4387;
                this.keyword_window_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_as_compat(): Id_as_compatContext {
        let localContext = new Id_as_compatContext(this.context, this.state);
        this.enterRule(localContext, 788, YQLParser.RULE_id_as_compat);
        try {
            this.state = 4392;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4390;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.LAST:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.OTHERS:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIRTUAL:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4391;
                this.keyword_as_compat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id(): An_idContext {
        let localContext = new An_idContext(this.context, this.state);
        this.enterRule(localContext, 790, YQLParser.RULE_an_id);
        try {
            this.state = 4396;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4394;
                this.id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4395;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_or_type(): An_id_or_typeContext {
        let localContext = new An_id_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 792, YQLParser.RULE_an_id_or_type);
        try {
            this.state = 4400;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4398;
                this.id_or_type();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4399;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_schema(): An_id_schemaContext {
        let localContext = new An_id_schemaContext(this.context, this.state);
        this.enterRule(localContext, 794, YQLParser.RULE_an_id_schema);
        try {
            this.state = 4404;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4402;
                this.id_schema();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4403;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_expr(): An_id_exprContext {
        let localContext = new An_id_exprContext(this.context, this.state);
        this.enterRule(localContext, 796, YQLParser.RULE_an_id_expr);
        try {
            this.state = 4408;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4406;
                this.id_expr();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4407;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_expr_in(): An_id_expr_inContext {
        let localContext = new An_id_expr_inContext(this.context, this.state);
        this.enterRule(localContext, 798, YQLParser.RULE_an_id_expr_in);
        try {
            this.state = 4412;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4410;
                this.id_expr_in();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4411;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_window(): An_id_windowContext {
        let localContext = new An_id_windowContext(this.context, this.state);
        this.enterRule(localContext, 800, YQLParser.RULE_an_id_window);
        try {
            this.state = 4416;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4414;
                this.id_window();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4415;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_table(): An_id_tableContext {
        let localContext = new An_id_tableContext(this.context, this.state);
        this.enterRule(localContext, 802, YQLParser.RULE_an_id_table);
        try {
            this.state = 4420;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4418;
                this.id_table();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4419;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_without(): An_id_withoutContext {
        let localContext = new An_id_withoutContext(this.context, this.state);
        this.enterRule(localContext, 804, YQLParser.RULE_an_id_without);
        try {
            this.state = 4424;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4422;
                this.id_without();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4423;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_hint(): An_id_hintContext {
        let localContext = new An_id_hintContext(this.context, this.state);
        this.enterRule(localContext, 806, YQLParser.RULE_an_id_hint);
        try {
            this.state = 4428;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4426;
                this.id_hint();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4427;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_pure(): An_id_pureContext {
        let localContext = new An_id_pureContext(this.context, this.state);
        this.enterRule(localContext, 808, YQLParser.RULE_an_id_pure);
        try {
            this.state = 4432;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4430;
                this.identifier();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4431;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_as_compat(): An_id_as_compatContext {
        let localContext = new An_id_as_compatContext(this.context, this.state);
        this.enterRule(localContext, 810, YQLParser.RULE_an_id_as_compat);
        try {
            this.state = 4436;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.LAST:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.OTHERS:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIRTUAL:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4434;
                this.id_as_compat();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4435;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public view_name(): View_nameContext {
        let localContext = new View_nameContext(this.context, this.state);
        this.enterRule(localContext, 812, YQLParser.RULE_view_name);
        try {
            this.state = 4441;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 485, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4438;
                this.an_id();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4439;
                this.match(YQLParser.PRIMARY);
                this.state = 4440;
                this.match(YQLParser.KEY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_id_prefix(): Opt_id_prefixContext {
        let localContext = new Opt_id_prefixContext(this.context, this.state);
        this.enterRule(localContext, 814, YQLParser.RULE_opt_id_prefix);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4446;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 486, this.context) ) {
            case 1:
                {
                this.state = 4443;
                this.an_id();
                this.state = 4444;
                this.match(YQLParser.DOT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cluster_expr(): Cluster_exprContext {
        let localContext = new Cluster_exprContext(this.context, this.state);
        this.enterRule(localContext, 816, YQLParser.RULE_cluster_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4451;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 487, this.context) ) {
            case 1:
                {
                this.state = 4448;
                this.an_id();
                this.state = 4449;
                this.match(YQLParser.COLON);
                }
                break;
            }
            this.state = 4455;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 4453;
                this.pure_column_or_named();
                }
                break;
            case YQLParser.ASTERISK:
                {
                this.state = 4454;
                this.match(YQLParser.ASTERISK);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_or_type(): Id_or_typeContext {
        let localContext = new Id_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 818, YQLParser.RULE_id_or_type);
        try {
            this.state = 4459;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4457;
                this.id();
                }
                break;
            case YQLParser.CALLABLE:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4458;
                this.type_id();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_id_prefix_or_type(): Opt_id_prefix_or_typeContext {
        let localContext = new Opt_id_prefix_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 820, YQLParser.RULE_opt_id_prefix_or_type);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4464;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 490, this.context) ) {
            case 1:
                {
                this.state = 4461;
                this.an_id_or_type();
                this.state = 4462;
                this.match(YQLParser.DOT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_or_at(): Id_or_atContext {
        let localContext = new Id_or_atContext(this.context, this.state);
        this.enterRule(localContext, 822, YQLParser.RULE_id_or_at);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4467;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 4466;
                this.match(YQLParser.COMMAT);
                }
            }

            this.state = 4469;
            this.an_id_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_table_or_type(): Id_table_or_typeContext {
        let localContext = new Id_table_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 824, YQLParser.RULE_id_table_or_type);
        try {
            this.state = 4473;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4471;
                this.an_id_table();
                }
                break;
            case YQLParser.CALLABLE:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4472;
                this.type_id();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_table_or_at(): Id_table_or_atContext {
        let localContext = new Id_table_or_atContext(this.context, this.state);
        this.enterRule(localContext, 826, YQLParser.RULE_id_table_or_at);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4476;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 4475;
                this.match(YQLParser.COMMAT);
                }
            }

            this.state = 4478;
            this.id_table_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword(): KeywordContext {
        let localContext = new KeywordContext(this.context, this.state);
        this.enterRule(localContext, 828, YQLParser.RULE_keyword);
        try {
            this.state = 4488;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.AT:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INCREMENTAL:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTORE:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4480;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4481;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4482;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4483;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4484;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4485;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4486;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4487;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext {
        let localContext = new Keyword_expr_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 830, YQLParser.RULE_keyword_expr_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4490;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 54)) & ~0x1F) === 0 && ((1 << (_la - 54)) & 405505) !== 0) || ((((_la - 89)) & ~0x1F) === 0 && ((1 << (_la - 89)) & 134217757) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 33603585) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & 41944071) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 137363473) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 2147487745) !== 0) || _la === 312 || _la === 313)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext {
        let localContext = new Keyword_table_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 832, YQLParser.RULE_keyword_table_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4492;
            _la = this.tokenStream.LA(1);
            if(!(_la === 49 || _la === 120 || _la === 272)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext {
        let localContext = new Keyword_select_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 834, YQLParser.RULE_keyword_select_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4494;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & 641) !== 0) || _la === 110 || _la === 124 || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & 1073872897) !== 0) || ((((_la - 298)) & ~0x1F) === 0 && ((1 << (_la - 298)) & 327681) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext {
        let localContext = new Keyword_alter_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 836, YQLParser.RULE_keyword_alter_uncompat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4496;
            this.match(YQLParser.COLUMN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext {
        let localContext = new Keyword_in_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 838, YQLParser.RULE_keyword_in_uncompat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4498;
            this.match(YQLParser.COMPACT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext {
        let localContext = new Keyword_window_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 840, YQLParser.RULE_keyword_window_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4500;
            _la = this.tokenStream.LA(1);
            if(!(_la === 150 || _la === 233 || _la === 259)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext {
        let localContext = new Keyword_hint_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 842, YQLParser.RULE_keyword_hint_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4502;
            _la = this.tokenStream.LA(1);
            if(!(_la === 78 || _la === 262)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_as_compat(): Keyword_as_compatContext {
        let localContext = new Keyword_as_compatContext(this.context, this.state);
        this.enterRule(localContext, 844, YQLParser.RULE_keyword_as_compat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4504;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & 1408210415) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 4024598343) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & 4015470493) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & 3757989277) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & 3338636547) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & 1845486967) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & 884358079) !== 0) || ((((_la - 268)) & ~0x1F) === 0 && ((1 << (_la - 268)) & 2852060623) !== 0) || ((((_la - 300)) & ~0x1F) === 0 && ((1 << (_la - 300)) & 395711) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_compat(): Keyword_compatContext {
        let localContext = new Keyword_compatContext(this.context, this.state);
        this.enterRule(localContext, 846, YQLParser.RULE_keyword_compat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4506;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & 1408210415) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 4293066575) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & 4017567709) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & 4294860189) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & 3623849871) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & 1879048063) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & 3065936831) !== 0) || ((((_la - 268)) & ~0x1F) === 0 && ((1 << (_la - 268)) & 2852060623) !== 0) || ((((_la - 300)) & ~0x1F) === 0 && ((1 << (_la - 300)) & 429567) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_id(): Type_idContext {
        let localContext = new Type_idContext(this.context, this.state);
        this.enterRule(localContext, 848, YQLParser.RULE_type_id);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4508;
            _la = this.tokenStream.LA(1);
            if(!(_la === 69 || _la === 106 || _la === 119 || _la === 138 || _la === 183 || _la === 209 || ((((_la - 245)) & ~0x1F) === 0 && ((1 << (_la - 245)) & 272629761) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & 33555457) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bool_value(): Bool_valueContext {
        let localContext = new Bool_valueContext(this.context, this.state);
        this.enterRule(localContext, 850, YQLParser.RULE_bool_value);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4510;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 293)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public real(): RealContext {
        let localContext = new RealContext(this.context, this.state);
        this.enterRule(localContext, 852, YQLParser.RULE_real);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4512;
            this.match(YQLParser.REAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public integer(): IntegerContext {
        let localContext = new IntegerContext(this.context, this.state);
        this.enterRule(localContext, 854, YQLParser.RULE_integer);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4514;
            _la = this.tokenStream.LA(1);
            if(!(_la === 322 || _la === 323)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_query_yq(): Sql_query_yqContext {
        let localContext = new Sql_query_yqContext(this.context, this.state);
        this.enterRule(localContext, 856, YQLParser.RULE_sql_query_yq);
        try {
            this.state = 4521;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 495, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4516;
                this.sql_stmt_list_yq();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 4517;
                this.match(YQLParser.PRAGMA);
                this.state = 4518;
                this.match(YQLParser.ANSI);
                this.state = 4519;
                this.match(YQLParser.DIGITS);
                this.state = 4520;
                this.ansi_sql_stmt_list();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_list_yq(): Sql_stmt_list_yqContext {
        let localContext = new Sql_stmt_list_yqContext(this.context, this.state);
        this.enterRule(localContext, 858, YQLParser.RULE_sql_stmt_list_yq);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4526;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 4523;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 4528;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4529;
            this.sql_stmt_yq();
            this.state = 4538;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 498, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4531;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 4530;
                        this.match(YQLParser.SEMICOLON);
                        }
                        }
                        this.state = 4533;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 23);
                    this.state = 4535;
                    this.sql_stmt_yq();
                    }
                    }
                }
                this.state = 4540;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 498, this.context);
            }
            this.state = 4544;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 4541;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 4546;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4547;
            this.match(YQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_yq(): Sql_stmt_yqContext {
        let localContext = new Sql_stmt_yqContext(this.context, this.state);
        this.enterRule(localContext, 860, YQLParser.RULE_sql_stmt_yq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4554;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 4549;
                this.match(YQLParser.EXPLAIN);
                this.state = 4552;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1) {
                    {
                    this.state = 4550;
                    this.match(YQLParser.QUERY);
                    this.state = 4551;
                    this.match(YQLParser.PLAN);
                    }
                }

                }
            }

            this.state = 4556;
            this.sql_stmt_core_yq();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_core_yq(): Sql_stmt_core_yqContext {
        let localContext = new Sql_stmt_core_yqContext(this.context, this.state);
        this.enterRule(localContext, 862, YQLParser.RULE_sql_stmt_core_yq);
        try {
            this.state = 4571;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 502, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4558;
                this.pragma_stmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4559;
                this.select_stmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4560;
                this.named_nodes_stmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4561;
                this.use_stmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4562;
                this.into_table_stmt_yq();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4563;
                this.declare_stmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4564;
                this.import_stmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4565;
                this.export_stmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4566;
                this.do_stmt();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4567;
                this.define_action_or_subquery_stmt();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4568;
                this.if_stmt();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4569;
                this.for_stmt();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4570;
                this.values_stmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replication_name(): Replication_nameContext {
        let localContext = new Replication_nameContext(this.context, this.state);
        this.enterRule(localContext, 864, YQLParser.RULE_replication_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4573;
            this.match(YQLParser.AS);
            this.state = 4574;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public where_expr(): Where_exprContext {
        let localContext = new Where_exprContext(this.context, this.state);
        this.enterRule(localContext, 866, YQLParser.RULE_where_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4576;
            this.match(YQLParser.WHERE);
            this.state = 4577;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_stmt(): From_stmtContext {
        let localContext = new From_stmtContext(this.context, this.state);
        this.enterRule(localContext, 868, YQLParser.RULE_from_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4579;
            this.match(YQLParser.FROM);
            this.state = 4580;
            this.join_source();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_for_autocomplete(): Alter_table_for_autocompleteContext {
        let localContext = new Alter_table_for_autocompleteContext(this.context, this.state);
        this.enterRule(localContext, 870, YQLParser.RULE_alter_table_for_autocomplete);
        try {
            this.state = 4584;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 503, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4582;
                this.alter_table_stmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4583;
                this.alter_table_store_stmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public static readonly _serializedATN: number[] = [
        4,1,332,4587,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,1,0,1,0,1,0,1,0,1,0,3,0,878,8,0,1,1,5,1,
        881,8,1,10,1,12,1,884,9,1,1,1,1,1,4,1,888,8,1,11,1,12,1,889,1,1,
        5,1,893,8,1,10,1,12,1,896,9,1,1,1,5,1,899,8,1,10,1,12,1,902,9,1,
        1,1,1,1,1,2,5,2,907,8,2,10,2,12,2,910,9,2,1,2,1,2,1,3,5,3,915,8,
        3,10,3,12,3,918,9,3,1,3,1,3,4,3,922,8,3,11,3,12,3,923,5,3,926,8,
        3,10,3,12,3,929,9,3,1,3,1,3,1,3,5,3,934,8,3,10,3,12,3,937,9,3,1,
        4,1,4,3,4,941,8,4,1,5,1,5,1,5,3,5,946,8,5,3,5,948,8,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1008,8,6,1,7,1,7,1,7,5,7,1013,
        8,7,10,7,12,7,1016,9,7,1,7,3,7,1019,8,7,1,8,1,8,1,8,5,8,1024,8,8,
        10,8,12,8,1027,9,8,1,9,1,9,1,9,5,9,1032,8,9,10,9,12,9,1035,9,9,1,
        10,1,10,3,10,1039,8,10,1,11,1,11,3,11,1043,8,11,1,11,1,11,1,11,1,
        12,3,12,1049,8,12,1,12,1,12,1,12,1,12,3,12,1055,8,12,1,12,3,12,1058,
        8,12,1,12,1,12,3,12,1062,8,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,
        1070,8,12,1,12,1,12,3,12,1074,8,12,1,12,3,12,1077,8,12,1,12,1,12,
        3,12,1081,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,
        1092,8,12,1,12,4,12,1095,8,12,11,12,12,12,1096,3,12,1099,8,12,1,
        13,1,13,1,14,1,14,1,14,5,14,1106,8,14,10,14,12,14,1109,9,14,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,3,18,1129,8,18,1,18,5,18,1132,8,18,10,18,12,
        18,1135,9,18,1,18,1,18,1,18,1,18,4,18,1141,8,18,11,18,12,18,1142,
        3,18,1145,8,18,1,19,1,19,1,19,5,19,1150,8,19,10,19,12,19,1153,9,
        19,1,20,1,20,1,20,5,20,1158,8,20,10,20,12,20,1161,9,20,1,21,1,21,
        1,21,5,21,1166,8,21,10,21,12,21,1169,9,21,1,22,1,22,1,22,1,22,3,
        22,1175,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1185,8,
        24,3,24,1187,8,24,5,24,1189,8,24,10,24,12,24,1192,9,24,1,24,1,24,
        3,24,1196,8,24,1,25,1,25,3,25,1200,8,25,1,25,1,25,1,26,1,26,3,26,
        1206,8,26,1,26,1,26,1,27,1,27,3,27,1212,8,27,1,28,1,28,3,28,1216,
        8,28,1,29,1,29,3,29,1220,8,29,1,29,3,29,1223,8,29,1,29,1,29,1,30,
        1,30,1,30,3,30,1230,8,30,1,30,1,30,1,30,1,30,3,30,1236,8,30,5,30,
        1238,8,30,10,30,12,30,1241,9,30,1,31,1,31,3,31,1245,8,31,1,31,3,
        31,1248,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,
        32,1260,8,32,10,32,12,32,1263,9,32,1,33,1,33,3,33,1267,8,33,1,33,
        3,33,1270,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,3,34,1284,8,34,1,34,1,34,1,34,1,34,1,34,3,34,1291,8,34,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1302,8,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1313,8,35,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,
        1,38,1,38,1,38,3,38,1333,8,38,1,38,1,38,1,39,1,39,3,39,1339,8,39,
        1,39,4,39,1342,8,39,11,39,12,39,1343,1,39,1,39,3,39,1348,8,39,1,
        39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1362,
        8,40,3,40,1364,8,40,1,41,1,41,1,42,1,42,1,42,3,42,1371,8,42,1,43,
        1,43,1,44,1,44,3,44,1377,8,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,
        5,46,1386,8,46,10,46,12,46,1389,9,46,1,47,1,47,1,47,1,47,1,47,3,
        47,1396,8,47,1,48,1,48,1,48,1,48,3,48,1402,8,48,1,49,1,49,1,49,1,
        49,1,49,3,49,1409,8,49,1,49,1,49,1,49,1,49,5,49,1415,8,49,10,49,
        12,49,1418,9,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,
        3,51,1430,8,51,1,51,1,51,1,52,1,52,3,52,1436,8,52,1,52,1,52,3,52,
        1440,8,52,1,52,3,52,1443,8,52,3,52,1445,8,52,1,53,1,53,1,53,1,53,
        1,53,1,53,3,53,1453,8,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1461,
        8,54,1,54,1,54,1,54,1,54,3,54,1467,8,54,1,54,1,54,1,54,1,54,3,54,
        1473,8,54,1,54,1,54,1,55,1,55,3,55,1479,8,55,1,55,3,55,1482,8,55,
        1,55,1,55,1,56,1,56,1,56,5,56,1489,8,56,10,56,12,56,1492,9,56,1,
        57,1,57,1,57,1,57,5,57,1498,8,57,10,57,12,57,1501,9,57,1,57,1,57,
        1,58,1,58,3,58,1507,8,58,1,59,1,59,1,59,1,59,5,59,1513,8,59,10,59,
        12,59,1516,9,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,
        3,61,1528,8,61,1,62,1,62,1,62,5,62,1533,8,62,10,62,12,62,1536,9,
        62,1,62,3,62,1539,8,62,1,63,1,63,1,63,5,63,1544,8,63,10,63,12,63,
        1547,9,63,1,63,3,63,1550,8,63,1,64,1,64,1,64,3,64,1555,8,64,1,65,
        1,65,1,65,5,65,1560,8,65,10,65,12,65,1563,9,65,1,66,1,66,1,66,1,
        66,3,66,1569,8,66,1,66,3,66,1572,8,66,1,66,1,66,1,66,1,67,1,67,3,
        67,1579,8,67,1,67,1,67,3,67,1583,8,67,1,68,1,68,1,68,1,68,1,68,1,
        68,1,68,1,68,3,68,1593,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,
        70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,3,71,1616,8,71,1,72,1,72,1,72,1,72,3,72,1622,8,72,1,73,1,73,3,
        73,1626,8,73,1,74,1,74,1,74,5,74,1631,8,74,10,74,12,74,1634,9,74,
        1,75,1,75,1,75,3,75,1639,8,75,1,76,1,76,1,76,5,76,1644,8,76,10,76,
        12,76,1647,9,76,1,77,3,77,1650,8,77,1,77,1,77,3,77,1654,8,77,1,78,
        1,78,1,79,1,79,3,79,1660,8,79,1,80,1,80,1,80,3,80,1665,8,80,1,81,
        1,81,1,81,1,81,1,82,1,82,1,82,3,82,1674,8,82,1,82,3,82,1677,8,82,
        1,82,1,82,1,82,1,82,3,82,1683,8,82,1,83,1,83,1,83,3,83,1688,8,83,
        1,83,1,83,1,84,1,84,1,84,1,84,3,84,1696,8,84,1,85,1,85,1,85,5,85,
        1701,8,85,10,85,12,85,1704,9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,
        86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,5,88,1723,8,
        88,10,88,12,88,1726,9,88,1,88,3,88,1729,8,88,3,88,1731,8,88,1,88,
        1,88,3,88,1735,8,88,1,89,1,89,1,89,1,89,1,89,5,89,1742,8,89,10,89,
        12,89,1745,9,89,1,89,3,89,1748,8,89,3,89,1750,8,89,1,89,1,89,3,89,
        1754,8,89,1,90,1,90,1,90,1,90,1,90,5,90,1761,8,90,10,90,12,90,1764,
        9,90,1,90,3,90,1767,8,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,
        1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,
        5,96,1803,8,96,10,96,12,96,1806,9,96,1,96,3,96,1809,8,96,1,96,1,
        96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        99,1,99,1,99,1,99,3,99,1829,8,99,1,99,3,99,1832,8,99,1,99,1,99,1,
        99,1,99,3,99,1838,8,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,
        1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,
        1858,8,100,1,100,5,100,1861,8,100,10,100,12,100,1864,9,100,1,101,
        1,101,1,101,3,101,1869,8,101,1,101,5,101,1872,8,101,10,101,12,101,
        1875,9,101,3,101,1877,8,101,1,102,1,102,3,102,1881,8,102,1,103,1,
        103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,3,104,1908,8,104,1,105,1,105,1,105,1,105,1,105,1,105,
        3,105,1916,8,105,1,106,3,106,1919,8,106,1,106,1,106,1,106,5,106,
        1924,8,106,10,106,12,106,1927,9,106,1,107,1,107,1,107,1,107,1,107,
        1,108,1,108,1,108,1,109,1,109,3,109,1939,8,109,1,109,1,109,3,109,
        1943,8,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,111,1,111,
        1,111,3,111,1955,8,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,5,112,1966,8,112,10,112,12,112,1969,9,112,1,112,1,112,
        3,112,1973,8,112,1,113,1,113,1,113,1,113,1,113,3,113,1980,8,113,
        1,114,1,114,3,114,1984,8,114,1,115,1,115,1,115,5,115,1989,8,115,
        10,115,12,115,1992,9,115,1,116,1,116,1,116,1,116,5,116,1998,8,116,
        10,116,12,116,2001,9,116,1,117,1,117,1,117,1,117,5,117,2007,8,117,
        10,117,12,117,2010,9,117,1,118,1,118,1,118,1,118,1,118,3,118,2017,
        8,118,1,119,1,119,3,119,2021,8,119,1,119,1,119,3,119,2025,8,119,
        1,120,1,120,1,120,1,120,1,120,3,120,2032,8,120,3,120,2034,8,120,
        1,121,3,121,2037,8,121,1,121,1,121,1,121,3,121,2042,8,121,1,121,
        1,121,1,121,3,121,2047,8,121,1,122,1,122,3,122,2051,8,122,1,122,
        1,122,1,122,5,122,2056,8,122,10,122,12,122,2059,9,122,1,122,1,122,
        1,122,1,122,3,122,2065,8,122,1,122,1,122,3,122,2069,8,122,1,122,
        3,122,2072,8,122,1,122,1,122,3,122,2076,8,122,1,122,1,122,3,122,
        2080,8,122,3,122,2082,8,122,1,123,1,123,1,123,1,123,1,124,1,124,
        1,124,5,124,2091,8,124,10,124,12,124,2094,9,124,1,125,1,125,1,125,
        1,125,5,125,2100,8,125,10,125,12,125,2103,9,125,1,125,1,125,3,125,
        2107,8,125,1,125,1,125,1,125,1,125,3,125,2113,8,125,1,125,1,125,
        1,125,3,125,2118,8,125,1,125,3,125,2121,8,125,1,125,1,125,3,125,
        2125,8,125,1,125,1,125,3,125,2129,8,125,1,126,3,126,2132,8,126,1,
        127,3,127,2135,8,127,1,127,1,127,3,127,2139,8,127,1,127,1,127,1,
        127,1,127,5,127,2145,8,127,10,127,12,127,2148,9,127,1,127,3,127,
        2151,8,127,1,127,1,127,3,127,2155,8,127,1,127,3,127,2158,8,127,1,
        127,3,127,2161,8,127,1,127,3,127,2164,8,127,1,127,1,127,3,127,2168,
        8,127,1,127,3,127,2171,8,127,1,127,3,127,2174,8,127,1,128,1,128,
        1,128,3,128,2179,8,128,1,128,3,128,2182,8,128,1,128,3,128,2185,8,
        128,1,128,3,128,2188,8,128,1,128,1,128,1,128,1,129,1,129,1,129,1,
        129,1,129,1,129,1,129,1,129,1,129,3,129,2202,8,129,3,129,2204,8,
        129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,
        2215,8,130,1,131,1,131,1,131,1,132,1,132,1,132,5,132,2223,8,132,
        10,132,12,132,2226,9,132,1,133,1,133,1,133,1,133,1,134,1,134,1,134,
        3,134,2235,8,134,1,134,3,134,2238,8,134,1,134,1,134,1,134,1,134,
        1,134,3,134,2245,8,134,1,134,1,134,1,134,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,1,135,3,135,2269,8,135,1,136,1,136,1,137,1,137,
        1,138,1,138,1,138,5,138,2278,8,138,10,138,12,138,2281,9,138,1,139,
        4,139,2284,8,139,11,139,12,139,2285,1,140,1,140,3,140,2290,8,140,
        1,141,1,141,3,141,2294,8,141,1,141,1,141,3,141,2298,8,141,1,141,
        1,141,3,141,2302,8,141,1,141,1,141,3,141,2306,8,141,1,141,1,141,
        3,141,2310,8,141,1,141,1,141,3,141,2314,8,141,1,141,1,141,1,141,
        1,141,3,141,2320,8,141,1,142,1,142,1,142,1,142,1,142,3,142,2327,
        8,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,2337,
        8,142,1,143,1,143,1,144,1,144,1,144,1,144,1,144,5,144,2346,8,144,
        10,144,12,144,2349,9,144,1,144,1,144,1,145,1,145,1,145,1,146,1,146,
        1,146,5,146,2359,8,146,10,146,12,146,2362,9,146,1,147,1,147,1,147,
        1,147,1,147,1,147,1,148,1,148,1,149,1,149,1,149,5,149,2375,8,149,
        10,149,12,149,2378,9,149,1,150,1,150,1,151,1,151,1,151,5,151,2385,
        8,151,10,151,12,151,2388,9,151,1,152,1,152,1,152,1,152,1,153,1,153,
        1,154,1,154,1,155,1,155,1,156,1,156,1,157,1,157,1,157,1,157,1,158,
        3,158,2407,8,158,1,158,1,158,1,159,1,159,3,159,2413,8,159,1,159,
        1,159,1,159,1,159,1,159,3,159,2420,8,159,1,160,1,160,1,160,5,160,
        2425,8,160,10,160,12,160,2428,9,160,1,161,1,161,1,161,1,161,1,161,
        3,161,2435,8,161,1,162,1,162,1,163,1,163,1,163,5,163,2442,8,163,
        10,163,12,163,2445,9,163,1,164,1,164,1,164,1,164,1,164,1,165,1,165,
        1,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,1,166,1,167,1,167,
        1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,168,1,168,
        1,168,1,168,1,168,1,168,1,168,3,168,2481,8,168,3,168,2483,8,168,
        1,169,3,169,2486,8,169,1,169,1,169,1,169,3,169,2491,8,169,1,169,
        1,169,3,169,2495,8,169,5,169,2497,8,169,10,169,12,169,2500,9,169,
        1,170,1,170,1,170,3,170,2505,8,170,1,171,1,171,1,171,1,171,3,171,
        2511,8,171,1,171,1,171,3,171,2515,8,171,1,172,1,172,1,172,3,172,
        2520,8,172,1,172,1,172,1,172,3,172,2525,8,172,3,172,2527,8,172,1,
        173,1,173,3,173,2531,8,173,1,173,1,173,1,173,3,173,2536,8,173,1,
        173,3,173,2539,8,173,3,173,2541,8,173,1,173,1,173,3,173,2545,8,173,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,2556,
        8,174,1,175,1,175,1,175,1,176,1,176,1,176,1,176,1,176,1,176,3,176,
        2567,8,176,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,179,1,179,
        3,179,2578,8,179,1,179,1,179,3,179,2582,8,179,1,179,1,179,3,179,
        2586,8,179,1,179,1,179,3,179,2590,8,179,1,179,3,179,2593,8,179,1,
        179,1,179,3,179,2597,8,179,1,179,3,179,2600,8,179,1,180,1,180,1,
        180,1,180,3,180,2606,8,180,1,181,1,181,1,181,1,181,1,181,5,181,2613,
        8,181,10,181,12,181,2616,9,181,3,181,2618,8,181,1,182,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,2632,
        8,182,1,182,1,182,1,182,1,182,3,182,2638,8,182,1,183,1,183,1,183,
        1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,2651,8,183,
        1,183,1,183,1,183,1,183,1,184,3,184,2658,8,184,1,184,1,184,1,184,
        3,184,2663,8,184,1,185,1,185,1,185,1,186,1,186,3,186,2670,8,186,
        1,187,1,187,1,187,5,187,2675,8,187,10,187,12,187,2678,9,187,1,188,
        1,188,1,188,1,188,1,189,1,189,3,189,2686,8,189,1,190,1,190,1,190,
        3,190,2691,8,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,2699,
        8,190,1,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,191,1,191,
        1,191,5,191,2712,8,191,10,191,12,191,2715,9,191,1,192,1,192,1,192,
        3,192,2720,8,192,1,193,1,193,1,193,1,193,1,193,1,193,3,193,2728,
        8,193,1,193,1,193,1,194,1,194,1,194,1,194,1,194,3,194,2737,8,194,
        1,194,1,194,3,194,2741,8,194,1,194,1,194,1,194,1,195,1,195,1,195,
        1,195,3,195,2750,8,195,1,195,1,195,1,196,1,196,1,196,1,196,1,196,
        1,196,1,196,1,196,3,196,2762,8,196,1,197,1,197,1,197,1,197,1,197,
        3,197,2769,8,197,1,197,1,197,1,197,1,197,1,197,1,197,3,197,2777,
        8,197,1,198,1,198,1,198,1,199,1,199,1,199,1,199,1,199,1,199,1,199,
        1,199,1,199,1,200,1,200,1,200,1,201,1,201,1,201,1,201,3,201,2798,
        8,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,2806,8,201,1,202,
        1,202,1,202,1,203,1,203,1,203,1,203,3,203,2815,8,203,1,204,1,204,
        1,204,1,204,1,205,1,205,1,206,1,206,3,206,2825,8,206,1,207,1,207,
        1,207,1,207,1,207,5,207,2832,8,207,10,207,12,207,2835,9,207,1,207,
        1,207,3,207,2839,8,207,1,208,1,208,1,209,1,209,1,209,3,209,2846,
        8,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,3,209,2856,
        8,209,1,209,1,209,1,209,3,209,2861,8,209,1,209,1,209,1,209,1,209,
        1,209,5,209,2868,8,209,10,209,12,209,2871,9,209,1,209,3,209,2874,
        8,209,1,209,1,209,3,209,2878,8,209,1,209,3,209,2881,8,209,1,209,
        3,209,2884,8,209,1,209,3,209,2887,8,209,1,209,3,209,2890,8,209,1,
        210,1,210,1,210,1,210,1,210,1,210,3,210,2898,8,210,1,211,1,211,1,
        211,3,211,2903,8,211,1,211,1,211,1,211,1,211,1,211,1,212,1,212,1,
        212,1,212,3,212,2914,8,212,1,213,1,213,1,213,1,214,1,214,3,214,2921,
        8,214,1,215,1,215,1,215,1,215,1,216,1,216,1,216,1,216,1,216,5,216,
        2932,8,216,10,216,12,216,2935,9,216,1,217,1,217,1,217,5,217,2940,
        8,217,10,217,12,217,2943,9,217,1,218,1,218,3,218,2947,8,218,1,219,
        1,219,1,219,5,219,2952,8,219,10,219,12,219,2955,9,219,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,2967,8,220,
        1,221,1,221,1,221,1,221,1,222,1,222,1,222,5,222,2976,8,222,10,222,
        12,222,2979,9,222,1,223,1,223,1,223,1,223,1,224,1,224,1,224,3,224,
        2988,8,224,1,225,1,225,1,225,1,225,3,225,2994,8,225,1,226,1,226,
        1,226,1,226,1,226,5,226,3001,8,226,10,226,12,226,3004,9,226,1,226,
        1,226,1,227,1,227,1,227,1,227,1,227,1,228,1,228,1,228,1,228,1,228,
        5,228,3018,8,228,10,228,12,228,3021,9,228,1,228,1,228,1,229,1,229,
        1,229,1,230,1,230,1,230,1,230,1,231,1,231,1,231,1,232,1,232,1,232,
        1,232,1,232,1,232,5,232,3041,8,232,10,232,12,232,3044,9,232,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,3,233,3063,8,233,1,234,1,234,1,234,
        1,234,1,234,1,234,1,234,5,234,3072,8,234,10,234,12,234,3075,9,234,
        1,235,1,235,1,235,1,235,1,235,3,235,3082,8,235,1,236,1,236,1,236,
        1,236,1,236,1,236,5,236,3090,8,236,10,236,12,236,3093,9,236,1,237,
        1,237,3,237,3097,8,237,1,238,1,238,3,238,3101,8,238,1,238,1,238,
        1,239,1,239,3,239,3107,8,239,1,239,1,239,1,240,1,240,1,240,1,240,
        1,240,1,240,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,242,1,242,
        1,242,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,244,1,244,1,244,
        1,244,1,245,1,245,1,245,1,245,1,245,5,245,3143,8,245,10,245,12,245,
        3146,9,245,1,245,1,245,1,246,1,246,1,246,1,246,1,246,5,246,3155,
        8,246,10,246,12,246,3158,9,246,1,246,1,246,1,247,1,247,1,247,1,248,
        1,248,1,248,1,248,1,249,1,249,1,249,1,249,1,250,1,250,1,250,1,250,
        1,250,1,250,1,251,1,251,1,251,1,252,1,252,1,252,1,252,1,252,1,253,
        1,253,1,253,1,253,1,254,1,254,1,254,1,254,1,254,1,255,1,255,1,255,
        3,255,3199,8,255,1,255,1,255,1,256,1,256,1,256,1,257,3,257,3207,
        8,257,1,257,3,257,3210,8,257,1,257,1,257,3,257,3214,8,257,1,258,
        1,258,3,258,3218,8,258,1,259,1,259,1,259,1,259,1,259,1,259,5,259,
        3226,8,259,10,259,12,259,3229,9,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,5,259,3239,8,259,10,259,12,259,3242,9,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,5,259,3252,8,259,10,259,
        12,259,3255,9,259,1,259,1,259,3,259,3259,8,259,1,260,1,260,1,260,
        1,260,1,260,1,260,1,260,1,260,5,260,3269,8,260,10,260,12,260,3272,
        9,260,1,260,1,260,1,260,1,260,1,260,1,260,5,260,3280,8,260,10,260,
        12,260,3283,9,260,1,260,1,260,3,260,3287,8,260,1,260,3,260,3290,
        8,260,1,261,1,261,3,261,3294,8,261,1,261,1,261,3,261,3298,8,261,
        1,262,1,262,3,262,3302,8,262,1,262,3,262,3305,8,262,1,263,1,263,
        1,264,1,264,1,265,1,265,1,265,1,265,1,265,5,265,3316,8,265,10,265,
        12,265,3319,9,265,1,265,3,265,3322,8,265,1,265,1,265,1,266,1,266,
        1,266,1,266,1,267,1,267,1,267,1,267,3,267,3334,8,267,1,268,1,268,
        1,268,1,268,1,268,1,268,1,268,1,269,1,269,1,269,5,269,3346,8,269,
        10,269,12,269,3349,9,269,1,270,1,270,1,270,1,270,1,271,1,271,1,272,
        1,272,1,272,1,272,1,272,1,272,3,272,3363,8,272,1,273,1,273,1,273,
        1,273,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,3,274,
        3378,8,274,1,274,3,274,3381,8,274,1,275,1,275,1,275,1,275,1,276,
        1,276,1,276,1,276,5,276,3391,8,276,10,276,12,276,3394,9,276,3,276,
        3396,8,276,1,276,1,276,1,277,1,277,1,277,1,277,1,278,1,278,3,278,
        3406,8,278,1,279,1,279,1,279,1,279,5,279,3412,8,279,10,279,12,279,
        3415,9,279,1,279,1,279,1,279,3,279,3420,8,279,1,280,1,280,1,280,
        1,280,5,280,3426,8,280,10,280,12,280,3429,9,280,1,280,1,280,1,281,
        1,281,1,281,3,281,3436,8,281,1,282,1,282,1,282,1,282,1,282,3,282,
        3443,8,282,1,282,1,282,3,282,3447,8,282,1,282,1,282,1,283,1,283,
        1,283,1,283,3,283,3455,8,283,1,284,1,284,1,284,1,284,3,284,3461,
        8,284,1,284,1,284,1,284,1,284,3,284,3467,8,284,1,285,1,285,1,285,
        1,285,1,285,1,285,1,285,1,285,5,285,3477,8,285,10,285,12,285,3480,
        9,285,1,285,3,285,3483,8,285,3,285,3485,8,285,1,286,1,286,1,286,
        1,286,1,286,1,286,1,286,1,286,5,286,3495,8,286,10,286,12,286,3498,
        9,286,1,286,3,286,3501,8,286,1,286,1,286,1,286,3,286,3506,8,286,
        1,287,1,287,1,287,1,287,3,287,3512,8,287,1,287,1,287,1,287,5,287,
        3517,8,287,10,287,12,287,3520,9,287,1,287,3,287,3523,8,287,1,288,
        1,288,3,288,3527,8,288,1,289,3,289,3530,8,289,1,289,1,289,1,289,
        1,290,1,290,1,290,1,290,1,290,1,290,5,290,3541,8,290,10,290,12,290,
        3544,9,290,1,290,1,290,1,290,1,290,5,290,3550,8,290,10,290,12,290,
        3553,9,290,1,290,3,290,3556,8,290,1,290,1,290,1,290,3,290,3561,8,
        290,1,291,1,291,1,291,1,291,3,291,3567,8,291,1,291,1,291,1,291,1,
        291,1,291,5,291,3574,8,291,10,291,12,291,3577,9,291,1,291,1,291,
        1,291,1,291,5,291,3583,8,291,10,291,12,291,3586,9,291,1,292,1,292,
        1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,
        1,292,3,292,3602,8,292,1,292,1,292,3,292,3606,8,292,1,292,1,292,
        3,292,3610,8,292,3,292,3612,8,292,1,293,1,293,3,293,3616,8,293,1,
        294,1,294,1,294,5,294,3621,8,294,10,294,12,294,3624,9,294,1,294,
        3,294,3627,8,294,1,294,1,294,3,294,3631,8,294,3,294,3633,8,294,1,
        295,1,295,1,295,1,295,1,295,1,295,1,296,1,296,1,296,1,296,1,296,
        1,296,1,296,5,296,3648,8,296,10,296,12,296,3651,9,296,1,297,1,297,
        3,297,3655,8,297,1,298,1,298,1,298,1,298,1,298,1,299,1,299,1,299,
        1,299,1,299,1,299,1,299,1,300,1,300,1,300,1,300,1,300,1,300,1,300,
        1,300,5,300,3677,8,300,10,300,12,300,3680,9,300,1,301,1,301,3,301,
        3684,8,301,1,302,1,302,1,302,1,302,1,302,1,302,1,303,1,303,1,303,
        1,303,1,303,1,303,1,303,1,303,5,303,3700,8,303,10,303,12,303,3703,
        9,303,1,303,1,303,1,303,1,303,1,303,1,304,1,304,1,304,1,305,1,305,
        1,305,5,305,3716,8,305,10,305,12,305,3719,9,305,1,306,1,306,1,306,
        1,306,1,307,1,307,1,307,1,307,1,307,1,307,1,307,5,307,3732,8,307,
        10,307,12,307,3735,9,307,1,308,1,308,1,309,1,309,1,309,1,309,1,309,
        1,310,1,310,1,310,1,310,1,310,3,310,3749,8,310,1,311,1,311,1,311,
        5,311,3754,8,311,10,311,12,311,3757,9,311,1,312,1,312,1,312,1,312,
        1,312,3,312,3764,8,312,1,312,1,312,1,312,1,312,1,312,1,312,1,313,
        5,313,3773,8,313,10,313,12,313,3776,9,313,1,313,1,313,4,313,3780,
        8,313,11,313,12,313,3781,1,313,5,313,3785,8,313,10,313,12,313,3788,
        9,313,1,313,5,313,3791,8,313,10,313,12,313,3794,9,313,3,313,3796,
        8,313,1,314,3,314,3799,8,314,1,314,1,314,1,314,1,314,1,314,3,314,
        3806,8,314,1,315,3,315,3809,8,315,1,315,3,315,3812,8,315,1,315,1,
        315,1,315,1,315,1,315,1,315,1,315,3,315,3821,8,315,1,316,1,316,1,
        316,3,316,3826,8,316,1,316,3,316,3829,8,316,1,316,1,316,1,316,1,
        316,1,316,1,316,5,316,3837,8,316,10,316,12,316,3840,9,316,1,316,
        3,316,3843,8,316,3,316,3845,8,316,1,316,1,316,1,316,1,316,1,316,
        3,316,3852,8,316,1,316,3,316,3855,8,316,1,316,1,316,3,316,3859,8,
        316,3,316,3861,8,316,1,316,3,316,3864,8,316,1,317,1,317,1,317,3,
        317,3869,8,317,1,318,3,318,3872,8,318,1,318,1,318,1,318,3,318,3877,
        8,318,1,319,1,319,1,319,1,319,1,319,1,319,5,319,3885,8,319,10,319,
        12,319,3888,9,319,1,319,1,319,3,319,3892,8,319,1,320,1,320,1,320,
        1,320,1,320,1,320,1,320,5,320,3901,8,320,10,320,12,320,3904,9,320,
        1,320,3,320,3907,8,320,1,320,1,320,3,320,3911,8,320,3,320,3913,8,
        320,1,320,1,320,3,320,3917,8,320,1,320,1,320,1,320,3,320,3922,8,
        320,1,320,1,320,1,320,1,320,5,320,3928,8,320,10,320,12,320,3931,
        9,320,3,320,3933,8,320,1,320,3,320,3936,8,320,1,320,3,320,3939,8,
        320,1,321,1,321,1,321,3,321,3944,8,321,1,321,1,321,1,322,1,322,3,
        322,3950,8,322,1,322,3,322,3953,8,322,1,323,1,323,3,323,3957,8,323,
        1,324,1,324,1,324,1,324,3,324,3963,8,324,1,325,1,325,1,325,1,325,
        1,325,1,325,3,325,3971,8,325,1,325,3,325,3974,8,325,1,326,1,326,
        1,326,1,326,1,326,3,326,3981,8,326,1,326,1,326,3,326,3985,8,326,
        1,326,3,326,3988,8,326,1,327,1,327,3,327,3992,8,327,1,328,1,328,
        1,328,5,328,3997,8,328,10,328,12,328,4000,9,328,1,329,1,329,1,329,
        1,329,1,330,1,330,1,331,1,331,1,331,1,331,1,331,1,331,1,332,1,332,
        1,332,1,332,5,332,4018,8,332,10,332,12,332,4021,9,332,1,332,1,332,
        1,333,1,333,1,333,1,333,1,333,3,333,4030,8,333,1,333,1,333,3,333,
        4034,8,333,1,333,3,333,4037,8,333,1,334,1,334,1,334,1,334,5,334,
        4043,8,334,10,334,12,334,4046,9,334,1,334,1,334,1,335,1,335,1,336,
        1,336,1,336,1,336,1,336,1,337,1,337,1,337,1,337,3,337,4061,8,337,
        1,337,1,337,1,337,1,337,5,337,4067,8,337,10,337,12,337,4070,9,337,
        1,338,1,338,1,338,1,338,1,338,3,338,4077,8,338,1,339,1,339,1,339,
        1,340,1,340,1,340,3,340,4085,8,340,1,341,1,341,1,341,1,341,1,341,
        1,342,1,342,3,342,4094,8,342,1,343,1,343,1,343,1,343,1,344,1,344,
        1,344,1,344,1,344,1,345,1,345,1,345,1,345,1,345,5,345,4110,8,345,
        10,345,12,345,4113,9,345,1,345,1,345,1,346,1,346,1,346,1,346,1,346,
        1,347,1,347,1,347,1,347,1,347,5,347,4127,8,347,10,347,12,347,4130,
        9,347,1,347,1,347,1,348,1,348,1,348,1,348,3,348,4138,8,348,1,348,
        1,348,1,349,1,349,1,349,5,349,4145,8,349,10,349,12,349,4148,9,349,
        1,350,1,350,1,350,1,350,1,351,1,351,1,352,1,352,1,352,1,352,1,352,
        1,353,1,353,1,353,5,353,4164,8,353,10,353,12,353,4167,9,353,1,354,
        1,354,1,354,1,354,1,355,1,355,1,356,1,356,1,356,3,356,4178,8,356,
        1,356,1,356,1,357,1,357,1,358,1,358,1,358,1,358,3,358,4188,8,358,
        1,359,1,359,1,359,1,359,1,359,1,360,1,360,3,360,4197,8,360,1,361,
        1,361,1,362,1,362,1,362,1,363,1,363,1,363,5,363,4207,8,363,10,363,
        12,363,4210,9,363,1,364,1,364,1,364,1,364,1,365,1,365,1,366,1,366,
        1,366,1,366,1,367,3,367,4223,8,367,1,367,3,367,4226,8,367,1,367,
        3,367,4229,8,367,1,367,3,367,4232,8,367,1,368,1,368,1,369,1,369,
        3,369,4238,8,369,1,369,1,369,1,369,1,370,1,370,1,371,1,371,1,371,
        3,371,4248,8,371,1,372,1,372,1,373,1,373,3,373,4254,8,373,1,374,
        1,374,1,374,1,374,1,374,1,375,1,375,1,375,1,375,3,375,4265,8,375,
        1,375,3,375,4268,8,375,1,376,1,376,1,376,1,376,1,376,1,376,1,376,
        1,376,1,376,1,376,3,376,4280,8,376,1,377,1,377,1,377,1,378,1,378,
        1,378,1,378,1,378,3,378,4290,8,378,1,379,1,379,1,379,1,379,3,379,
        4296,8,379,1,380,1,380,1,381,1,381,1,382,1,382,1,382,1,382,1,382,
        3,382,4307,8,382,1,383,1,383,1,383,5,383,4312,8,383,10,383,12,383,
        4315,9,383,1,383,3,383,4318,8,383,1,384,1,384,1,384,1,385,1,385,
        1,386,1,386,3,386,4327,8,386,1,387,1,387,1,387,1,387,1,387,1,387,
        1,387,3,387,4336,8,387,1,388,1,388,1,388,1,388,1,388,1,388,3,388,
        4344,8,388,1,389,1,389,1,389,1,389,1,389,3,389,4351,8,389,1,390,
        1,390,1,390,1,390,1,390,1,390,1,390,1,390,3,390,4361,8,390,1,391,
        1,391,1,391,1,391,1,391,1,391,1,391,3,391,4370,8,391,1,392,1,392,
        1,392,1,392,1,392,1,392,1,392,3,392,4379,8,392,1,393,1,393,1,393,
        1,393,1,393,1,393,1,393,1,393,3,393,4389,8,393,1,394,1,394,3,394,
        4393,8,394,1,395,1,395,3,395,4397,8,395,1,396,1,396,3,396,4401,8,
        396,1,397,1,397,3,397,4405,8,397,1,398,1,398,3,398,4409,8,398,1,
        399,1,399,3,399,4413,8,399,1,400,1,400,3,400,4417,8,400,1,401,1,
        401,3,401,4421,8,401,1,402,1,402,3,402,4425,8,402,1,403,1,403,3,
        403,4429,8,403,1,404,1,404,3,404,4433,8,404,1,405,1,405,3,405,4437,
        8,405,1,406,1,406,1,406,3,406,4442,8,406,1,407,1,407,1,407,3,407,
        4447,8,407,1,408,1,408,1,408,3,408,4452,8,408,1,408,1,408,3,408,
        4456,8,408,1,409,1,409,3,409,4460,8,409,1,410,1,410,1,410,3,410,
        4465,8,410,1,411,3,411,4468,8,411,1,411,1,411,1,412,1,412,3,412,
        4474,8,412,1,413,3,413,4477,8,413,1,413,1,413,1,414,1,414,1,414,
        1,414,1,414,1,414,1,414,1,414,3,414,4489,8,414,1,415,1,415,1,416,
        1,416,1,417,1,417,1,418,1,418,1,419,1,419,1,420,1,420,1,421,1,421,
        1,422,1,422,1,423,1,423,1,424,1,424,1,425,1,425,1,426,1,426,1,427,
        1,427,1,428,1,428,1,428,1,428,1,428,3,428,4522,8,428,1,429,5,429,
        4525,8,429,10,429,12,429,4528,9,429,1,429,1,429,4,429,4532,8,429,
        11,429,12,429,4533,1,429,5,429,4537,8,429,10,429,12,429,4540,9,429,
        1,429,5,429,4543,8,429,10,429,12,429,4546,9,429,1,429,1,429,1,430,
        1,430,1,430,3,430,4553,8,430,3,430,4555,8,430,1,430,1,430,1,431,
        1,431,1,431,1,431,1,431,1,431,1,431,1,431,1,431,1,431,1,431,1,431,
        1,431,3,431,4572,8,431,1,432,1,432,1,432,1,433,1,433,1,433,1,434,
        1,434,1,434,1,435,1,435,3,435,4585,8,435,1,435,0,0,436,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
        324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
        356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
        388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,
        420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
        452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
        484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,
        516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,
        548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,
        580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,
        612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,
        644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,
        676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,
        708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,
        740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,
        772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,
        804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,
        836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,
        868,870,0,39,2,0,54,54,277,277,6,0,145,145,156,156,181,181,186,186,
        236,236,255,255,1,0,6,9,1,0,17,18,1,0,20,22,2,0,17,19,197,197,2,
        0,115,115,121,121,4,0,121,121,133,133,293,293,300,300,2,0,81,81,
        297,297,2,0,52,52,103,103,2,0,25,25,203,203,2,0,44,44,110,110,2,
        0,164,164,264,264,3,0,106,106,183,183,209,209,2,0,65,65,279,279,
        2,0,207,207,266,266,2,0,55,55,278,278,3,0,190,191,193,193,263,263,
        2,0,42,42,112,112,2,0,148,148,305,305,2,0,58,58,281,281,2,0,120,
        120,302,302,3,0,45,45,104,104,239,239,3,0,58,58,258,258,281,281,
        2,0,143,143,304,304,3,0,107,107,231,231,280,280,2,0,41,41,274,274,
        2,0,78,78,262,262,3,0,150,150,233,233,259,259,2,0,139,139,226,226,
        1,0,320,321,21,0,54,54,66,67,71,72,89,89,91,93,116,116,128,128,142,
        143,153,153,174,176,184,184,197,197,199,199,230,230,234,234,250,
        251,257,257,265,265,277,277,296,296,312,313,3,0,49,49,120,120,272,
        272,11,0,44,44,51,51,53,53,110,110,124,124,152,152,169,169,182,182,
        298,298,314,314,316,316,58,0,40,43,45,48,50,50,52,52,55,59,61,65,
        68,68,70,70,73,75,79,79,81,87,90,90,94,100,102,105,107,109,112,115,
        117,118,121,123,125,125,127,127,129,132,134,137,139,141,144,145,
        147,149,151,151,154,165,167,168,170,171,178,178,180,181,185,193,
        195,196,200,204,206,208,210,210,212,212,215,226,228,229,231,232,
        235,240,242,244,246,248,252,253,255,256,258,258,261,261,263,264,
        268,271,274,276,278,283,285,292,295,295,297,297,299,305,307,308,
        311,311,317,318,50,0,40,43,45,48,50,50,52,52,55,59,61,65,68,68,70,
        70,73,76,79,79,81,88,90,90,94,105,107,109,111,115,117,118,121,123,
        125,127,129,132,134,137,139,141,144,145,147,149,151,151,154,168,
        170,173,177,181,185,196,198,198,200,208,210,229,231,232,235,240,
        242,244,246,249,252,256,258,258,260,261,263,264,266,266,268,271,
        274,276,278,283,285,292,295,295,297,297,299,308,310,311,315,315,
        317,318,12,0,69,69,106,106,119,119,138,138,183,183,209,209,245,245,
        267,267,273,273,284,284,294,294,309,309,2,0,133,133,293,293,1,0,
        322,323,4916,0,877,1,0,0,0,2,882,1,0,0,0,4,908,1,0,0,0,6,916,1,0,
        0,0,8,940,1,0,0,0,10,947,1,0,0,0,12,1007,1,0,0,0,14,1018,1,0,0,0,
        16,1020,1,0,0,0,18,1028,1,0,0,0,20,1036,1,0,0,0,22,1040,1,0,0,0,
        24,1098,1,0,0,0,26,1100,1,0,0,0,28,1102,1,0,0,0,30,1110,1,0,0,0,
        32,1113,1,0,0,0,34,1117,1,0,0,0,36,1120,1,0,0,0,38,1146,1,0,0,0,
        40,1154,1,0,0,0,42,1162,1,0,0,0,44,1174,1,0,0,0,46,1176,1,0,0,0,
        48,1190,1,0,0,0,50,1199,1,0,0,0,52,1205,1,0,0,0,54,1211,1,0,0,0,
        56,1215,1,0,0,0,58,1217,1,0,0,0,60,1226,1,0,0,0,62,1242,1,0,0,0,
        64,1251,1,0,0,0,66,1264,1,0,0,0,68,1290,1,0,0,0,70,1312,1,0,0,0,
        72,1314,1,0,0,0,74,1321,1,0,0,0,76,1328,1,0,0,0,78,1336,1,0,0,0,
        80,1351,1,0,0,0,82,1365,1,0,0,0,84,1370,1,0,0,0,86,1372,1,0,0,0,
        88,1376,1,0,0,0,90,1378,1,0,0,0,92,1382,1,0,0,0,94,1390,1,0,0,0,
        96,1401,1,0,0,0,98,1403,1,0,0,0,100,1421,1,0,0,0,102,1425,1,0,0,
        0,104,1444,1,0,0,0,106,1452,1,0,0,0,108,1454,1,0,0,0,110,1476,1,
        0,0,0,112,1485,1,0,0,0,114,1493,1,0,0,0,116,1506,1,0,0,0,118,1508,
        1,0,0,0,120,1519,1,0,0,0,122,1527,1,0,0,0,124,1529,1,0,0,0,126,1540,
        1,0,0,0,128,1551,1,0,0,0,130,1556,1,0,0,0,132,1564,1,0,0,0,134,1578,
        1,0,0,0,136,1592,1,0,0,0,138,1596,1,0,0,0,140,1600,1,0,0,0,142,1615,
        1,0,0,0,144,1617,1,0,0,0,146,1623,1,0,0,0,148,1627,1,0,0,0,150,1635,
        1,0,0,0,152,1640,1,0,0,0,154,1649,1,0,0,0,156,1655,1,0,0,0,158,1659,
        1,0,0,0,160,1664,1,0,0,0,162,1666,1,0,0,0,164,1682,1,0,0,0,166,1687,
        1,0,0,0,168,1691,1,0,0,0,170,1697,1,0,0,0,172,1705,1,0,0,0,174,1712,
        1,0,0,0,176,1717,1,0,0,0,178,1736,1,0,0,0,180,1755,1,0,0,0,182,1770,
        1,0,0,0,184,1775,1,0,0,0,186,1780,1,0,0,0,188,1785,1,0,0,0,190,1792,
        1,0,0,0,192,1797,1,0,0,0,194,1812,1,0,0,0,196,1817,1,0,0,0,198,1824,
        1,0,0,0,200,1857,1,0,0,0,202,1876,1,0,0,0,204,1880,1,0,0,0,206,1882,
        1,0,0,0,208,1907,1,0,0,0,210,1909,1,0,0,0,212,1918,1,0,0,0,214,1928,
        1,0,0,0,216,1933,1,0,0,0,218,1938,1,0,0,0,220,1946,1,0,0,0,222,1951,
        1,0,0,0,224,1956,1,0,0,0,226,1979,1,0,0,0,228,1981,1,0,0,0,230,1985,
        1,0,0,0,232,1993,1,0,0,0,234,2002,1,0,0,0,236,2016,1,0,0,0,238,2024,
        1,0,0,0,240,2026,1,0,0,0,242,2036,1,0,0,0,244,2048,1,0,0,0,246,2083,
        1,0,0,0,248,2087,1,0,0,0,250,2095,1,0,0,0,252,2131,1,0,0,0,254,2134,
        1,0,0,0,256,2175,1,0,0,0,258,2203,1,0,0,0,260,2214,1,0,0,0,262,2216,
        1,0,0,0,264,2219,1,0,0,0,266,2227,1,0,0,0,268,2234,1,0,0,0,270,2268,
        1,0,0,0,272,2270,1,0,0,0,274,2272,1,0,0,0,276,2274,1,0,0,0,278,2283,
        1,0,0,0,280,2287,1,0,0,0,282,2319,1,0,0,0,284,2336,1,0,0,0,286,2338,
        1,0,0,0,288,2340,1,0,0,0,290,2352,1,0,0,0,292,2355,1,0,0,0,294,2363,
        1,0,0,0,296,2369,1,0,0,0,298,2371,1,0,0,0,300,2379,1,0,0,0,302,2381,
        1,0,0,0,304,2389,1,0,0,0,306,2393,1,0,0,0,308,2395,1,0,0,0,310,2397,
        1,0,0,0,312,2399,1,0,0,0,314,2401,1,0,0,0,316,2406,1,0,0,0,318,2410,
        1,0,0,0,320,2421,1,0,0,0,322,2434,1,0,0,0,324,2436,1,0,0,0,326,2438,
        1,0,0,0,328,2446,1,0,0,0,330,2451,1,0,0,0,332,2456,1,0,0,0,334,2462,
        1,0,0,0,336,2482,1,0,0,0,338,2485,1,0,0,0,340,2501,1,0,0,0,342,2514,
        1,0,0,0,344,2516,1,0,0,0,346,2528,1,0,0,0,348,2555,1,0,0,0,350,2557,
        1,0,0,0,352,2560,1,0,0,0,354,2568,1,0,0,0,356,2570,1,0,0,0,358,2599,
        1,0,0,0,360,2605,1,0,0,0,362,2607,1,0,0,0,364,2631,1,0,0,0,366,2650,
        1,0,0,0,368,2662,1,0,0,0,370,2664,1,0,0,0,372,2669,1,0,0,0,374,2671,
        1,0,0,0,376,2679,1,0,0,0,378,2685,1,0,0,0,380,2687,1,0,0,0,382,2703,
        1,0,0,0,384,2719,1,0,0,0,386,2721,1,0,0,0,388,2731,1,0,0,0,390,2745,
        1,0,0,0,392,2753,1,0,0,0,394,2763,1,0,0,0,396,2778,1,0,0,0,398,2781,
        1,0,0,0,400,2790,1,0,0,0,402,2793,1,0,0,0,404,2807,1,0,0,0,406,2814,
        1,0,0,0,408,2816,1,0,0,0,410,2820,1,0,0,0,412,2824,1,0,0,0,414,2838,
        1,0,0,0,416,2840,1,0,0,0,418,2842,1,0,0,0,420,2897,1,0,0,0,422,2899,
        1,0,0,0,424,2909,1,0,0,0,426,2915,1,0,0,0,428,2920,1,0,0,0,430,2922,
        1,0,0,0,432,2926,1,0,0,0,434,2936,1,0,0,0,436,2946,1,0,0,0,438,2948,
        1,0,0,0,440,2966,1,0,0,0,442,2968,1,0,0,0,444,2972,1,0,0,0,446,2980,
        1,0,0,0,448,2984,1,0,0,0,450,2989,1,0,0,0,452,2995,1,0,0,0,454,3007,
        1,0,0,0,456,3012,1,0,0,0,458,3024,1,0,0,0,460,3027,1,0,0,0,462,3031,
        1,0,0,0,464,3034,1,0,0,0,466,3062,1,0,0,0,468,3064,1,0,0,0,470,3081,
        1,0,0,0,472,3083,1,0,0,0,474,3096,1,0,0,0,476,3098,1,0,0,0,478,3104,
        1,0,0,0,480,3110,1,0,0,0,482,3116,1,0,0,0,484,3123,1,0,0,0,486,3126,
        1,0,0,0,488,3133,1,0,0,0,490,3137,1,0,0,0,492,3149,1,0,0,0,494,3161,
        1,0,0,0,496,3164,1,0,0,0,498,3168,1,0,0,0,500,3172,1,0,0,0,502,3178,
        1,0,0,0,504,3181,1,0,0,0,506,3186,1,0,0,0,508,3190,1,0,0,0,510,3195,
        1,0,0,0,512,3202,1,0,0,0,514,3209,1,0,0,0,516,3215,1,0,0,0,518,3258,
        1,0,0,0,520,3260,1,0,0,0,522,3293,1,0,0,0,524,3299,1,0,0,0,526,3306,
        1,0,0,0,528,3308,1,0,0,0,530,3310,1,0,0,0,532,3325,1,0,0,0,534,3333,
        1,0,0,0,536,3335,1,0,0,0,538,3342,1,0,0,0,540,3350,1,0,0,0,542,3354,
        1,0,0,0,544,3362,1,0,0,0,546,3364,1,0,0,0,548,3380,1,0,0,0,550,3382,
        1,0,0,0,552,3386,1,0,0,0,554,3399,1,0,0,0,556,3405,1,0,0,0,558,3419,
        1,0,0,0,560,3421,1,0,0,0,562,3435,1,0,0,0,564,3437,1,0,0,0,566,3450,
        1,0,0,0,568,3456,1,0,0,0,570,3468,1,0,0,0,572,3486,1,0,0,0,574,3507,
        1,0,0,0,576,3526,1,0,0,0,578,3529,1,0,0,0,580,3534,1,0,0,0,582,3562,
        1,0,0,0,584,3611,1,0,0,0,586,3615,1,0,0,0,588,3632,1,0,0,0,590,3634,
        1,0,0,0,592,3640,1,0,0,0,594,3654,1,0,0,0,596,3656,1,0,0,0,598,3661,
        1,0,0,0,600,3668,1,0,0,0,602,3683,1,0,0,0,604,3685,1,0,0,0,606,3691,
        1,0,0,0,608,3709,1,0,0,0,610,3712,1,0,0,0,612,3720,1,0,0,0,614,3724,
        1,0,0,0,616,3736,1,0,0,0,618,3738,1,0,0,0,620,3743,1,0,0,0,622,3750,
        1,0,0,0,624,3758,1,0,0,0,626,3774,1,0,0,0,628,3798,1,0,0,0,630,3808,
        1,0,0,0,632,3825,1,0,0,0,634,3865,1,0,0,0,636,3871,1,0,0,0,638,3878,
        1,0,0,0,640,3938,1,0,0,0,642,3943,1,0,0,0,644,3952,1,0,0,0,646,3954,
        1,0,0,0,648,3958,1,0,0,0,650,3964,1,0,0,0,652,3975,1,0,0,0,654,3991,
        1,0,0,0,656,3993,1,0,0,0,658,4001,1,0,0,0,660,4005,1,0,0,0,662,4007,
        1,0,0,0,664,4013,1,0,0,0,666,4024,1,0,0,0,668,4038,1,0,0,0,670,4049,
        1,0,0,0,672,4051,1,0,0,0,674,4056,1,0,0,0,676,4076,1,0,0,0,678,4078,
        1,0,0,0,680,4081,1,0,0,0,682,4086,1,0,0,0,684,4093,1,0,0,0,686,4095,
        1,0,0,0,688,4099,1,0,0,0,690,4104,1,0,0,0,692,4116,1,0,0,0,694,4121,
        1,0,0,0,696,4133,1,0,0,0,698,4141,1,0,0,0,700,4149,1,0,0,0,702,4153,
        1,0,0,0,704,4155,1,0,0,0,706,4160,1,0,0,0,708,4168,1,0,0,0,710,4172,
        1,0,0,0,712,4177,1,0,0,0,714,4181,1,0,0,0,716,4187,1,0,0,0,718,4189,
        1,0,0,0,720,4196,1,0,0,0,722,4198,1,0,0,0,724,4200,1,0,0,0,726,4203,
        1,0,0,0,728,4211,1,0,0,0,730,4215,1,0,0,0,732,4217,1,0,0,0,734,4222,
        1,0,0,0,736,4233,1,0,0,0,738,4235,1,0,0,0,740,4242,1,0,0,0,742,4244,
        1,0,0,0,744,4249,1,0,0,0,746,4253,1,0,0,0,748,4255,1,0,0,0,750,4267,
        1,0,0,0,752,4279,1,0,0,0,754,4281,1,0,0,0,756,4289,1,0,0,0,758,4291,
        1,0,0,0,760,4297,1,0,0,0,762,4299,1,0,0,0,764,4301,1,0,0,0,766,4308,
        1,0,0,0,768,4319,1,0,0,0,770,4322,1,0,0,0,772,4326,1,0,0,0,774,4335,
        1,0,0,0,776,4343,1,0,0,0,778,4350,1,0,0,0,780,4360,1,0,0,0,782,4369,
        1,0,0,0,784,4378,1,0,0,0,786,4388,1,0,0,0,788,4392,1,0,0,0,790,4396,
        1,0,0,0,792,4400,1,0,0,0,794,4404,1,0,0,0,796,4408,1,0,0,0,798,4412,
        1,0,0,0,800,4416,1,0,0,0,802,4420,1,0,0,0,804,4424,1,0,0,0,806,4428,
        1,0,0,0,808,4432,1,0,0,0,810,4436,1,0,0,0,812,4441,1,0,0,0,814,4446,
        1,0,0,0,816,4451,1,0,0,0,818,4459,1,0,0,0,820,4464,1,0,0,0,822,4467,
        1,0,0,0,824,4473,1,0,0,0,826,4476,1,0,0,0,828,4488,1,0,0,0,830,4490,
        1,0,0,0,832,4492,1,0,0,0,834,4494,1,0,0,0,836,4496,1,0,0,0,838,4498,
        1,0,0,0,840,4500,1,0,0,0,842,4502,1,0,0,0,844,4504,1,0,0,0,846,4506,
        1,0,0,0,848,4508,1,0,0,0,850,4510,1,0,0,0,852,4512,1,0,0,0,854,4514,
        1,0,0,0,856,4521,1,0,0,0,858,4526,1,0,0,0,860,4554,1,0,0,0,862,4571,
        1,0,0,0,864,4573,1,0,0,0,866,4576,1,0,0,0,868,4579,1,0,0,0,870,4584,
        1,0,0,0,872,878,3,2,1,0,873,874,5,225,0,0,874,875,5,48,0,0,875,876,
        5,322,0,0,876,878,3,4,2,0,877,872,1,0,0,0,877,873,1,0,0,0,878,1,
        1,0,0,0,879,881,5,23,0,0,880,879,1,0,0,0,881,884,1,0,0,0,882,880,
        1,0,0,0,882,883,1,0,0,0,883,885,1,0,0,0,884,882,1,0,0,0,885,894,
        3,10,5,0,886,888,5,23,0,0,887,886,1,0,0,0,888,889,1,0,0,0,889,887,
        1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,893,3,10,5,0,892,887,
        1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,900,
        1,0,0,0,896,894,1,0,0,0,897,899,5,23,0,0,898,897,1,0,0,0,899,902,
        1,0,0,0,900,898,1,0,0,0,900,901,1,0,0,0,901,903,1,0,0,0,902,900,
        1,0,0,0,903,904,5,0,0,1,904,3,1,0,0,0,905,907,5,23,0,0,906,905,1,
        0,0,0,907,910,1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,911,1,
        0,0,0,910,908,1,0,0,0,911,912,5,0,0,1,912,5,1,0,0,0,913,915,5,23,
        0,0,914,913,1,0,0,0,915,918,1,0,0,0,916,914,1,0,0,0,916,917,1,0,
        0,0,917,927,1,0,0,0,918,916,1,0,0,0,919,921,3,8,4,0,920,922,5,23,
        0,0,921,920,1,0,0,0,922,923,1,0,0,0,923,921,1,0,0,0,923,924,1,0,
        0,0,924,926,1,0,0,0,925,919,1,0,0,0,926,929,1,0,0,0,927,925,1,0,
        0,0,927,928,1,0,0,0,928,930,1,0,0,0,929,927,1,0,0,0,930,931,5,250,
        0,0,931,935,3,14,7,0,932,934,5,23,0,0,933,932,1,0,0,0,934,937,1,
        0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,7,1,0,0,0,937,935,1,0,
        0,0,938,941,3,758,379,0,939,941,3,214,107,0,940,938,1,0,0,0,940,
        939,1,0,0,0,941,9,1,0,0,0,942,945,5,129,0,0,943,944,5,1,0,0,944,
        946,5,223,0,0,945,943,1,0,0,0,945,946,1,0,0,0,946,948,1,0,0,0,947,
        942,1,0,0,0,947,948,1,0,0,0,948,949,1,0,0,0,949,950,3,12,6,0,950,
        11,1,0,0,0,951,1008,3,224,112,0,952,1008,3,232,116,0,953,1008,3,
        758,379,0,954,1008,3,418,209,0,955,1008,3,564,282,0,956,1008,3,754,
        377,0,957,1008,3,364,182,0,958,1008,3,760,380,0,959,1008,3,652,326,
        0,960,1008,3,650,325,0,961,1008,3,762,381,0,962,1008,3,210,105,0,
        963,1008,3,214,107,0,964,1008,3,216,108,0,965,1008,3,464,232,0,966,
        1008,3,468,234,0,967,1008,3,222,111,0,968,1008,3,624,312,0,969,1008,
        3,628,314,0,970,1008,3,630,315,0,971,1008,3,370,185,0,972,1008,3,
        566,283,0,973,1008,3,568,284,0,974,1008,3,570,285,0,975,1008,3,572,
        286,0,976,1008,3,574,287,0,977,1008,3,394,197,0,978,1008,3,398,199,
        0,979,1008,3,402,201,0,980,1008,3,380,190,0,981,1008,3,382,191,0,
        982,1008,3,386,193,0,983,1008,3,606,303,0,984,1008,3,620,310,0,985,
        1008,3,666,333,0,986,1008,3,674,337,0,987,1008,3,696,348,0,988,1008,
        3,580,290,0,989,1008,3,582,291,0,990,1008,3,472,236,0,991,1008,3,
        392,196,0,992,1008,3,388,194,0,993,1008,3,390,195,0,994,1008,3,614,
        307,0,995,1008,3,590,295,0,996,1008,3,592,296,0,997,1008,3,596,298,
        0,998,1008,3,422,211,0,999,1008,3,424,212,0,1000,1008,3,426,213,
        0,1001,1008,3,768,384,0,1002,1008,3,598,299,0,1003,1008,3,600,300,
        0,1004,1008,3,604,302,0,1005,1008,3,448,224,0,1006,1008,3,450,225,
        0,1007,951,1,0,0,0,1007,952,1,0,0,0,1007,953,1,0,0,0,1007,954,1,
        0,0,0,1007,955,1,0,0,0,1007,956,1,0,0,0,1007,957,1,0,0,0,1007,958,
        1,0,0,0,1007,959,1,0,0,0,1007,960,1,0,0,0,1007,961,1,0,0,0,1007,
        962,1,0,0,0,1007,963,1,0,0,0,1007,964,1,0,0,0,1007,965,1,0,0,0,1007,
        966,1,0,0,0,1007,967,1,0,0,0,1007,968,1,0,0,0,1007,969,1,0,0,0,1007,
        970,1,0,0,0,1007,971,1,0,0,0,1007,972,1,0,0,0,1007,973,1,0,0,0,1007,
        974,1,0,0,0,1007,975,1,0,0,0,1007,976,1,0,0,0,1007,977,1,0,0,0,1007,
        978,1,0,0,0,1007,979,1,0,0,0,1007,980,1,0,0,0,1007,981,1,0,0,0,1007,
        982,1,0,0,0,1007,983,1,0,0,0,1007,984,1,0,0,0,1007,985,1,0,0,0,1007,
        986,1,0,0,0,1007,987,1,0,0,0,1007,988,1,0,0,0,1007,989,1,0,0,0,1007,
        990,1,0,0,0,1007,991,1,0,0,0,1007,992,1,0,0,0,1007,993,1,0,0,0,1007,
        994,1,0,0,0,1007,995,1,0,0,0,1007,996,1,0,0,0,1007,997,1,0,0,0,1007,
        998,1,0,0,0,1007,999,1,0,0,0,1007,1000,1,0,0,0,1007,1001,1,0,0,0,
        1007,1002,1,0,0,0,1007,1003,1,0,0,0,1007,1004,1,0,0,0,1007,1005,
        1,0,0,0,1007,1006,1,0,0,0,1008,13,1,0,0,0,1009,1014,3,16,8,0,1010,
        1011,5,210,0,0,1011,1013,3,16,8,0,1012,1010,1,0,0,0,1013,1016,1,
        0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,1019,1,0,0,0,1016,
        1014,1,0,0,0,1017,1019,3,200,100,0,1018,1009,1,0,0,0,1018,1017,1,
        0,0,0,1019,15,1,0,0,0,1020,1025,3,18,9,0,1021,1022,5,47,0,0,1022,
        1024,3,18,9,0,1023,1021,1,0,0,0,1024,1027,1,0,0,0,1025,1023,1,0,
        0,0,1025,1026,1,0,0,0,1026,17,1,0,0,0,1027,1025,1,0,0,0,1028,1033,
        3,20,10,0,1029,1030,5,318,0,0,1030,1032,3,20,10,0,1031,1029,1,0,
        0,0,1032,1035,1,0,0,0,1033,1031,1,0,0,0,1033,1034,1,0,0,0,1034,19,
        1,0,0,0,1035,1033,1,0,0,0,1036,1038,3,28,14,0,1037,1039,3,24,12,
        0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,21,1,0,0,0,1040,1042,
        5,171,0,0,1041,1043,5,197,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,
        0,1043,1044,1,0,0,0,1044,1045,5,110,0,0,1045,1046,5,142,0,0,1046,
        23,1,0,0,0,1047,1049,5,197,0,0,1048,1047,1,0,0,0,1048,1049,1,0,0,
        0,1049,1050,1,0,0,0,1050,1051,3,26,13,0,1051,1054,3,28,14,0,1052,
        1053,5,122,0,0,1053,1055,3,28,14,0,1054,1052,1,0,0,0,1054,1055,1,
        0,0,0,1055,1099,1,0,0,0,1056,1058,5,197,0,0,1057,1056,1,0,0,0,1057,
        1058,1,0,0,0,1058,1059,1,0,0,0,1059,1061,5,159,0,0,1060,1062,5,80,
        0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1099,
        3,82,41,0,1064,1074,5,172,0,0,1065,1074,5,198,0,0,1066,1067,5,171,
        0,0,1067,1074,5,199,0,0,1068,1070,5,171,0,0,1069,1068,1,0,0,0,1069,
        1070,1,0,0,0,1070,1071,1,0,0,0,1071,1072,5,197,0,0,1072,1074,5,199,
        0,0,1073,1064,1,0,0,0,1073,1065,1,0,0,0,1073,1066,1,0,0,0,1073,1069,
        1,0,0,0,1074,1099,1,0,0,0,1075,1077,5,197,0,0,1076,1075,1,0,0,0,
        1076,1077,1,0,0,0,1077,1078,1,0,0,0,1078,1080,5,66,0,0,1079,1081,
        7,0,0,0,1080,1079,1,0,0,0,1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,
        1083,3,28,14,0,1083,1084,5,47,0,0,1084,1085,3,28,14,0,1085,1099,
        1,0,0,0,1086,1092,5,2,0,0,1087,1092,5,3,0,0,1088,1092,5,4,0,0,1089,
        1092,5,5,0,0,1090,1092,3,22,11,0,1091,1086,1,0,0,0,1091,1087,1,0,
        0,0,1091,1088,1,0,0,0,1091,1089,1,0,0,0,1091,1090,1,0,0,0,1092,1093,
        1,0,0,0,1093,1095,3,28,14,0,1094,1091,1,0,0,0,1095,1096,1,0,0,0,
        1096,1094,1,0,0,0,1096,1097,1,0,0,0,1097,1099,1,0,0,0,1098,1048,
        1,0,0,0,1098,1057,1,0,0,0,1098,1073,1,0,0,0,1098,1076,1,0,0,0,1098,
        1094,1,0,0,0,1099,25,1,0,0,0,1100,1101,7,1,0,0,1101,27,1,0,0,0,1102,
        1107,3,36,18,0,1103,1104,7,2,0,0,1104,1106,3,36,18,0,1105,1103,1,
        0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,
        29,1,0,0,0,1109,1107,1,0,0,0,1110,1111,5,8,0,0,1111,1112,5,8,0,0,
        1112,31,1,0,0,0,1113,1114,5,8,0,0,1114,1115,5,8,0,0,1115,1116,5,
        13,0,0,1116,33,1,0,0,0,1117,1118,5,28,0,0,1118,1119,5,28,0,0,1119,
        35,1,0,0,0,1120,1133,3,38,19,0,1121,1129,5,10,0,0,1122,1129,3,30,
        15,0,1123,1129,5,11,0,0,1124,1129,3,32,16,0,1125,1129,5,12,0,0,1126,
        1129,5,13,0,0,1127,1129,5,35,0,0,1128,1121,1,0,0,0,1128,1122,1,0,
        0,0,1128,1123,1,0,0,0,1128,1124,1,0,0,0,1128,1125,1,0,0,0,1128,1126,
        1,0,0,0,1128,1127,1,0,0,0,1129,1130,1,0,0,0,1130,1132,3,38,19,0,
        1131,1128,1,0,0,0,1132,1135,1,0,0,0,1133,1131,1,0,0,0,1133,1134,
        1,0,0,0,1134,1144,1,0,0,0,1135,1133,1,0,0,0,1136,1137,3,34,17,0,
        1137,1138,3,36,18,0,1138,1145,1,0,0,0,1139,1141,5,28,0,0,1140,1139,
        1,0,0,0,1141,1142,1,0,0,0,1142,1140,1,0,0,0,1142,1143,1,0,0,0,1143,
        1145,1,0,0,0,1144,1136,1,0,0,0,1144,1140,1,0,0,0,1144,1145,1,0,0,
        0,1145,37,1,0,0,0,1146,1151,3,40,20,0,1147,1148,7,3,0,0,1148,1150,
        3,40,20,0,1149,1147,1,0,0,0,1150,1153,1,0,0,0,1151,1149,1,0,0,0,
        1151,1152,1,0,0,0,1152,39,1,0,0,0,1153,1151,1,0,0,0,1154,1159,3,
        42,21,0,1155,1156,7,4,0,0,1156,1158,3,42,21,0,1157,1155,1,0,0,0,
        1158,1161,1,0,0,0,1159,1157,1,0,0,0,1159,1160,1,0,0,0,1160,41,1,
        0,0,0,1161,1159,1,0,0,0,1162,1167,3,44,22,0,1163,1164,5,14,0,0,1164,
        1166,3,44,22,0,1165,1163,1,0,0,0,1166,1169,1,0,0,0,1167,1165,1,0,
        0,0,1167,1168,1,0,0,0,1168,43,1,0,0,0,1169,1167,1,0,0,0,1170,1175,
        3,54,27,0,1171,1172,3,46,23,0,1172,1173,3,54,27,0,1173,1175,1,0,
        0,0,1174,1170,1,0,0,0,1174,1171,1,0,0,0,1175,45,1,0,0,0,1176,1177,
        7,5,0,0,1177,47,1,0,0,0,1178,1187,3,138,69,0,1179,1187,3,132,66,
        0,1180,1184,5,24,0,0,1181,1185,3,144,72,0,1182,1185,5,322,0,0,1183,
        1185,3,792,396,0,1184,1181,1,0,0,0,1184,1182,1,0,0,0,1184,1183,1,
        0,0,0,1185,1187,1,0,0,0,1186,1178,1,0,0,0,1186,1179,1,0,0,0,1186,
        1180,1,0,0,0,1187,1189,1,0,0,0,1188,1186,1,0,0,0,1189,1192,1,0,0,
        0,1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,1195,1,0,0,0,1192,1190,
        1,0,0,0,1193,1194,5,76,0,0,1194,1196,3,790,395,0,1195,1193,1,0,0,
        0,1195,1196,1,0,0,0,1196,49,1,0,0,0,1197,1200,3,776,388,0,1198,1200,
        3,68,34,0,1199,1197,1,0,0,0,1199,1198,1,0,0,0,1200,1201,1,0,0,0,
        1201,1202,3,48,24,0,1202,51,1,0,0,0,1203,1206,3,778,389,0,1204,1206,
        3,70,35,0,1205,1203,1,0,0,0,1205,1204,1,0,0,0,1206,1207,1,0,0,0,
        1207,1208,3,48,24,0,1208,53,1,0,0,0,1209,1212,3,50,25,0,1210,1212,
        3,84,42,0,1211,1209,1,0,0,0,1211,1210,1,0,0,0,1212,55,1,0,0,0,1213,
        1216,3,52,26,0,1214,1216,3,84,42,0,1215,1213,1,0,0,0,1215,1214,1,
        0,0,0,1216,57,1,0,0,0,1217,1219,5,39,0,0,1218,1220,3,112,56,0,1219,
        1218,1,0,0,0,1219,1220,1,0,0,0,1220,1222,1,0,0,0,1221,1223,5,25,
        0,0,1222,1221,1,0,0,0,1222,1223,1,0,0,0,1223,1224,1,0,0,0,1224,1225,
        5,38,0,0,1225,59,1,0,0,0,1226,1229,3,14,7,0,1227,1228,5,29,0,0,1228,
        1230,3,14,7,0,1229,1227,1,0,0,0,1229,1230,1,0,0,0,1230,1239,1,0,
        0,0,1231,1232,5,25,0,0,1232,1235,3,14,7,0,1233,1234,5,29,0,0,1234,
        1236,3,14,7,0,1235,1233,1,0,0,0,1235,1236,1,0,0,0,1236,1238,1,0,
        0,0,1237,1231,1,0,0,0,1238,1241,1,0,0,0,1239,1237,1,0,0,0,1239,1240,
        1,0,0,0,1240,61,1,0,0,0,1241,1239,1,0,0,0,1242,1244,5,33,0,0,1243,
        1245,3,60,30,0,1244,1243,1,0,0,0,1244,1245,1,0,0,0,1245,1247,1,0,
        0,0,1246,1248,5,25,0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,
        1249,1,0,0,0,1249,1250,5,34,0,0,1250,63,1,0,0,0,1251,1252,3,14,7,
        0,1252,1253,5,29,0,0,1253,1261,3,14,7,0,1254,1255,5,25,0,0,1255,
        1256,3,14,7,0,1256,1257,5,29,0,0,1257,1258,3,14,7,0,1258,1260,1,
        0,0,0,1259,1254,1,0,0,0,1260,1263,1,0,0,0,1261,1259,1,0,0,0,1261,
        1262,1,0,0,0,1262,65,1,0,0,0,1263,1261,1,0,0,0,1264,1266,5,15,0,
        0,1265,1267,3,64,32,0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,1269,
        1,0,0,0,1268,1270,5,25,0,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,
        1271,1,0,0,0,1271,1272,5,16,0,0,1272,67,1,0,0,0,1273,1291,3,142,
        71,0,1274,1291,3,144,72,0,1275,1291,3,80,40,0,1276,1291,3,72,36,
        0,1277,1291,3,76,38,0,1278,1291,3,78,39,0,1279,1280,3,792,396,0,
        1280,1283,5,36,0,0,1281,1284,3,818,409,0,1282,1284,5,319,0,0,1283,
        1281,1,0,0,0,1283,1282,1,0,0,0,1284,1291,1,0,0,0,1285,1291,3,208,
        104,0,1286,1291,3,74,37,0,1287,1291,3,58,29,0,1288,1291,3,62,31,
        0,1289,1291,3,66,33,0,1290,1273,1,0,0,0,1290,1274,1,0,0,0,1290,1275,
        1,0,0,0,1290,1276,1,0,0,0,1290,1277,1,0,0,0,1290,1278,1,0,0,0,1290,
        1279,1,0,0,0,1290,1285,1,0,0,0,1290,1286,1,0,0,0,1290,1287,1,0,0,
        0,1290,1288,1,0,0,0,1290,1289,1,0,0,0,1291,69,1,0,0,0,1292,1313,
        3,142,71,0,1293,1313,3,144,72,0,1294,1313,3,80,40,0,1295,1313,3,
        72,36,0,1296,1313,3,78,39,0,1297,1298,3,792,396,0,1298,1301,5,36,
        0,0,1299,1302,3,818,409,0,1300,1302,5,319,0,0,1301,1299,1,0,0,0,
        1301,1300,1,0,0,0,1302,1313,1,0,0,0,1303,1304,5,26,0,0,1304,1305,
        3,232,116,0,1305,1306,5,27,0,0,1306,1313,1,0,0,0,1307,1313,3,208,
        104,0,1308,1313,3,74,37,0,1309,1313,3,58,29,0,1310,1313,3,62,31,
        0,1311,1313,3,66,33,0,1312,1292,1,0,0,0,1312,1293,1,0,0,0,1312,1294,
        1,0,0,0,1312,1295,1,0,0,0,1312,1296,1,0,0,0,1312,1297,1,0,0,0,1312,
        1303,1,0,0,0,1312,1307,1,0,0,0,1312,1308,1,0,0,0,1312,1309,1,0,0,
        0,1312,1310,1,0,0,0,1312,1311,1,0,0,0,1313,71,1,0,0,0,1314,1315,
        5,72,0,0,1315,1316,5,26,0,0,1316,1317,3,14,7,0,1317,1318,5,51,0,
        0,1318,1319,3,204,102,0,1319,1320,5,27,0,0,1320,73,1,0,0,0,1321,
        1322,5,67,0,0,1322,1323,5,26,0,0,1323,1324,3,14,7,0,1324,1325,5,
        51,0,0,1325,1326,3,156,78,0,1326,1327,5,27,0,0,1327,75,1,0,0,0,1328,
        1329,5,128,0,0,1329,1332,5,26,0,0,1330,1333,3,232,116,0,1331,1333,
        3,370,185,0,1332,1330,1,0,0,0,1332,1331,1,0,0,0,1333,1334,1,0,0,
        0,1334,1335,5,27,0,0,1335,77,1,0,0,0,1336,1338,5,71,0,0,1337,1339,
        3,14,7,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,1341,1,0,0,0,1340,
        1342,3,140,70,0,1341,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1341,1,
        0,0,0,1343,1344,1,0,0,0,1344,1347,1,0,0,0,1345,1346,5,114,0,0,1346,
        1348,3,14,7,0,1347,1345,1,0,0,0,1347,1348,1,0,0,0,1348,1349,1,0,
        0,0,1349,1350,5,118,0,0,1350,79,1,0,0,0,1351,1363,3,110,55,0,1352,
        1361,5,37,0,0,1353,1354,5,26,0,0,1354,1355,3,14,7,0,1355,1356,5,
        27,0,0,1356,1362,1,0,0,0,1357,1358,5,33,0,0,1358,1359,3,6,3,0,1359,
        1360,5,34,0,0,1360,1362,1,0,0,0,1361,1353,1,0,0,0,1361,1357,1,0,
        0,0,1362,1364,1,0,0,0,1363,1352,1,0,0,0,1363,1364,1,0,0,0,1364,81,
        1,0,0,0,1365,1366,3,56,28,0,1366,83,1,0,0,0,1367,1371,3,98,49,0,
        1368,1371,3,102,51,0,1369,1371,3,108,54,0,1370,1367,1,0,0,0,1370,
        1368,1,0,0,0,1370,1369,1,0,0,0,1371,85,1,0,0,0,1372,1373,5,319,0,
        0,1373,87,1,0,0,0,1374,1377,3,776,388,0,1375,1377,5,319,0,0,1376,
        1374,1,0,0,0,1376,1375,1,0,0,0,1377,89,1,0,0,0,1378,1379,3,14,7,
        0,1379,1380,5,51,0,0,1380,1381,3,88,44,0,1381,91,1,0,0,0,1382,1387,
        3,90,45,0,1383,1384,5,25,0,0,1384,1386,3,90,45,0,1385,1383,1,0,0,
        0,1386,1389,1,0,0,0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,93,
        1,0,0,0,1389,1387,1,0,0,0,1390,1391,3,14,7,0,1391,1392,5,25,0,0,
        1392,1395,3,86,43,0,1393,1394,5,217,0,0,1394,1396,3,92,46,0,1395,
        1393,1,0,0,0,1395,1396,1,0,0,0,1396,95,1,0,0,0,1397,1402,5,121,0,
        0,1398,1402,5,199,0,0,1399,1400,5,98,0,0,1400,1402,3,14,7,0,1401,
        1397,1,0,0,0,1401,1398,1,0,0,0,1401,1399,1,0,0,0,1402,97,1,0,0,0,
        1403,1404,5,176,0,0,1404,1405,5,26,0,0,1405,1408,3,94,47,0,1406,
        1407,5,251,0,0,1407,1409,3,156,78,0,1408,1406,1,0,0,0,1408,1409,
        1,0,0,0,1409,1416,1,0,0,0,1410,1411,3,96,48,0,1411,1412,5,205,0,
        0,1412,1413,7,6,0,0,1413,1415,1,0,0,0,1414,1410,1,0,0,0,1415,1418,
        1,0,0,0,1416,1414,1,0,0,0,1416,1417,1,0,0,0,1417,1419,1,0,0,0,1418,
        1416,1,0,0,0,1419,1420,5,27,0,0,1420,99,1,0,0,0,1421,1422,7,7,0,
        0,1422,1423,5,205,0,0,1423,1424,5,121,0,0,1424,101,1,0,0,0,1425,
        1426,5,174,0,0,1426,1427,5,26,0,0,1427,1429,3,94,47,0,1428,1430,
        3,100,50,0,1429,1428,1,0,0,0,1429,1430,1,0,0,0,1430,1431,1,0,0,0,
        1431,1432,5,27,0,0,1432,103,1,0,0,0,1433,1435,5,316,0,0,1434,1436,
        5,50,0,0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,1445,1,0,0,0,1437,
        1439,5,315,0,0,1438,1440,7,8,0,0,1439,1438,1,0,0,0,1439,1440,1,0,
        0,0,1440,1442,1,0,0,0,1441,1443,5,50,0,0,1442,1441,1,0,0,0,1442,
        1443,1,0,0,0,1443,1445,1,0,0,0,1444,1433,1,0,0,0,1444,1437,1,0,0,
        0,1445,105,1,0,0,0,1446,1453,5,121,0,0,1447,1453,5,199,0,0,1448,
        1449,5,115,0,0,1449,1453,5,50,0,0,1450,1451,5,115,0,0,1451,1453,
        5,201,0,0,1452,1446,1,0,0,0,1452,1447,1,0,0,0,1452,1448,1,0,0,0,
        1452,1450,1,0,0,0,1453,107,1,0,0,0,1454,1455,5,175,0,0,1455,1456,
        5,26,0,0,1456,1460,3,94,47,0,1457,1458,3,104,52,0,1458,1459,5,317,
        0,0,1459,1461,1,0,0,0,1460,1457,1,0,0,0,1460,1461,1,0,0,0,1461,1466,
        1,0,0,0,1462,1463,3,106,53,0,1463,1464,5,205,0,0,1464,1465,5,115,
        0,0,1465,1467,1,0,0,0,1466,1462,1,0,0,0,1466,1467,1,0,0,0,1467,1472,
        1,0,0,0,1468,1469,3,106,53,0,1469,1470,5,205,0,0,1470,1471,5,121,
        0,0,1471,1473,1,0,0,0,1472,1468,1,0,0,0,1472,1473,1,0,0,0,1473,1474,
        1,0,0,0,1474,1475,5,27,0,0,1475,109,1,0,0,0,1476,1478,5,26,0,0,1477,
        1479,3,130,65,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1481,1,
        0,0,0,1480,1482,5,25,0,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,
        1483,1,0,0,0,1483,1484,5,27,0,0,1484,111,1,0,0,0,1485,1490,3,14,
        7,0,1486,1487,5,25,0,0,1487,1489,3,14,7,0,1488,1486,1,0,0,0,1489,
        1492,1,0,0,0,1490,1488,1,0,0,0,1490,1491,1,0,0,0,1491,113,1,0,0,
        0,1492,1490,1,0,0,0,1493,1494,5,26,0,0,1494,1499,3,790,395,0,1495,
        1496,5,25,0,0,1496,1498,3,790,395,0,1497,1495,1,0,0,0,1498,1501,
        1,0,0,0,1499,1497,1,0,0,0,1499,1500,1,0,0,0,1500,1502,1,0,0,0,1501,
        1499,1,0,0,0,1502,1503,5,27,0,0,1503,115,1,0,0,0,1504,1507,3,144,
        72,0,1505,1507,3,790,395,0,1506,1504,1,0,0,0,1506,1505,1,0,0,0,1507,
        117,1,0,0,0,1508,1509,5,26,0,0,1509,1514,3,116,58,0,1510,1511,5,
        25,0,0,1511,1513,3,116,58,0,1512,1510,1,0,0,0,1513,1516,1,0,0,0,
        1514,1512,1,0,0,0,1514,1515,1,0,0,0,1515,1517,1,0,0,0,1516,1514,
        1,0,0,0,1517,1518,5,27,0,0,1518,119,1,0,0,0,1519,1520,3,814,407,
        0,1520,1521,3,790,395,0,1521,121,1,0,0,0,1522,1523,3,790,395,0,1523,
        1524,5,24,0,0,1524,1525,3,790,395,0,1525,1528,1,0,0,0,1526,1528,
        3,804,402,0,1527,1522,1,0,0,0,1527,1526,1,0,0,0,1528,123,1,0,0,0,
        1529,1534,3,120,60,0,1530,1531,5,25,0,0,1531,1533,3,120,60,0,1532,
        1530,1,0,0,0,1533,1536,1,0,0,0,1534,1532,1,0,0,0,1534,1535,1,0,0,
        0,1535,1538,1,0,0,0,1536,1534,1,0,0,0,1537,1539,5,25,0,0,1538,1537,
        1,0,0,0,1538,1539,1,0,0,0,1539,125,1,0,0,0,1540,1545,3,122,61,0,
        1541,1542,5,25,0,0,1542,1544,3,122,61,0,1543,1541,1,0,0,0,1544,1547,
        1,0,0,0,1545,1543,1,0,0,0,1545,1546,1,0,0,0,1546,1549,1,0,0,0,1547,
        1545,1,0,0,0,1548,1550,5,25,0,0,1549,1548,1,0,0,0,1549,1550,1,0,
        0,0,1550,127,1,0,0,0,1551,1554,3,14,7,0,1552,1553,5,51,0,0,1553,
        1555,3,792,396,0,1554,1552,1,0,0,0,1554,1555,1,0,0,0,1555,129,1,
        0,0,0,1556,1561,3,128,64,0,1557,1558,5,25,0,0,1558,1560,3,128,64,
        0,1559,1557,1,0,0,0,1560,1563,1,0,0,0,1561,1559,1,0,0,0,1561,1562,
        1,0,0,0,1562,131,1,0,0,0,1563,1561,1,0,0,0,1564,1571,5,26,0,0,1565,
        1566,3,252,126,0,1566,1568,3,130,65,0,1567,1569,5,25,0,0,1568,1567,
        1,0,0,0,1568,1569,1,0,0,0,1569,1572,1,0,0,0,1570,1572,5,20,0,0,1571,
        1565,1,0,0,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,0,
        0,1573,1574,5,27,0,0,1574,1575,3,134,67,0,1575,133,1,0,0,0,1576,
        1579,3,716,358,0,1577,1579,3,718,359,0,1578,1576,1,0,0,0,1578,1577,
        1,0,0,0,1578,1579,1,0,0,0,1579,1582,1,0,0,0,1580,1581,5,214,0,0,
        1581,1583,3,720,360,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,135,
        1,0,0,0,1584,1585,3,792,396,0,1585,1586,5,36,0,0,1586,1587,3,792,
        396,0,1587,1593,1,0,0,0,1588,1593,3,796,398,0,1589,1593,3,144,72,
        0,1590,1591,5,131,0,0,1591,1593,5,144,0,0,1592,1584,1,0,0,0,1592,
        1588,1,0,0,0,1592,1589,1,0,0,0,1592,1590,1,0,0,0,1593,1594,1,0,0,
        0,1594,1595,3,132,66,0,1595,137,1,0,0,0,1596,1597,5,39,0,0,1597,
        1598,3,14,7,0,1598,1599,5,38,0,0,1599,139,1,0,0,0,1600,1601,5,312,
        0,0,1601,1602,3,14,7,0,1602,1603,5,287,0,0,1603,1604,3,14,7,0,1604,
        141,1,0,0,0,1605,1616,3,854,427,0,1606,1616,3,852,426,0,1607,1616,
        5,319,0,0,1608,1616,5,325,0,0,1609,1616,5,199,0,0,1610,1616,5,92,
        0,0,1611,1616,5,91,0,0,1612,1616,5,93,0,0,1613,1616,3,850,425,0,
        1614,1616,5,116,0,0,1615,1605,1,0,0,0,1615,1606,1,0,0,0,1615,1607,
        1,0,0,0,1615,1608,1,0,0,0,1615,1609,1,0,0,0,1615,1610,1,0,0,0,1615,
        1611,1,0,0,0,1615,1612,1,0,0,0,1615,1613,1,0,0,0,1615,1614,1,0,0,
        0,1616,143,1,0,0,0,1617,1621,5,32,0,0,1618,1622,3,792,396,0,1619,
        1622,5,293,0,0,1620,1622,5,133,0,0,1621,1618,1,0,0,0,1621,1619,1,
        0,0,0,1621,1620,1,0,0,0,1622,145,1,0,0,0,1623,1625,3,144,72,0,1624,
        1626,5,28,0,0,1625,1624,1,0,0,0,1625,1626,1,0,0,0,1626,147,1,0,0,
        0,1627,1632,3,144,72,0,1628,1629,5,25,0,0,1629,1631,3,144,72,0,1630,
        1628,1,0,0,0,1631,1634,1,0,0,0,1632,1630,1,0,0,0,1632,1633,1,0,0,
        0,1633,149,1,0,0,0,1634,1632,1,0,0,0,1635,1638,3,144,72,0,1636,1637,
        5,51,0,0,1637,1639,3,144,72,0,1638,1636,1,0,0,0,1638,1639,1,0,0,
        0,1639,151,1,0,0,0,1640,1645,3,150,75,0,1641,1642,5,25,0,0,1642,
        1644,3,150,75,0,1643,1641,1,0,0,0,1644,1647,1,0,0,0,1645,1643,1,
        0,0,0,1645,1646,1,0,0,0,1646,153,1,0,0,0,1647,1645,1,0,0,0,1648,
        1650,7,3,0,0,1649,1648,1,0,0,0,1649,1650,1,0,0,0,1650,1653,1,0,0,
        0,1651,1654,3,854,427,0,1652,1654,3,852,426,0,1653,1651,1,0,0,0,
        1653,1652,1,0,0,0,1654,155,1,0,0,0,1655,1656,3,808,404,0,1656,157,
        1,0,0,0,1657,1660,3,854,427,0,1658,1660,3,144,72,0,1659,1657,1,0,
        0,0,1659,1658,1,0,0,0,1660,159,1,0,0,0,1661,1665,3,772,386,0,1662,
        1665,5,319,0,0,1663,1665,3,144,72,0,1664,1661,1,0,0,0,1664,1662,
        1,0,0,0,1664,1663,1,0,0,0,1665,161,1,0,0,0,1666,1667,3,160,80,0,
        1667,1668,5,29,0,0,1668,1669,3,204,102,0,1669,163,1,0,0,0,1670,1671,
        3,160,80,0,1671,1676,3,204,102,0,1672,1674,5,197,0,0,1673,1672,1,
        0,0,0,1673,1674,1,0,0,0,1674,1675,1,0,0,0,1675,1677,5,199,0,0,1676,
        1673,1,0,0,0,1676,1677,1,0,0,0,1677,1683,1,0,0,0,1678,1679,3,204,
        102,0,1679,1680,5,51,0,0,1680,1681,3,160,80,0,1681,1683,1,0,0,0,
        1682,1670,1,0,0,0,1682,1678,1,0,0,0,1683,165,1,0,0,0,1684,1685,3,
        160,80,0,1685,1686,5,29,0,0,1686,1688,1,0,0,0,1687,1684,1,0,0,0,
        1687,1688,1,0,0,0,1688,1689,1,0,0,0,1689,1690,3,204,102,0,1690,167,
        1,0,0,0,1691,1695,3,166,83,0,1692,1693,5,33,0,0,1693,1694,5,60,0,
        0,1694,1696,5,34,0,0,1695,1692,1,0,0,0,1695,1696,1,0,0,0,1696,169,
        1,0,0,0,1697,1702,3,168,84,0,1698,1699,5,25,0,0,1699,1701,3,168,
        84,0,1700,1698,1,0,0,0,1701,1704,1,0,0,0,1702,1700,1,0,0,0,1702,
        1703,1,0,0,0,1703,171,1,0,0,0,1704,1702,1,0,0,0,1705,1706,5,96,0,
        0,1706,1707,5,26,0,0,1707,1708,3,158,79,0,1708,1709,5,25,0,0,1709,
        1710,3,158,79,0,1710,1711,5,27,0,0,1711,173,1,0,0,0,1712,1713,5,
        209,0,0,1713,1714,5,6,0,0,1714,1715,3,204,102,0,1715,1716,5,8,0,
        0,1716,175,1,0,0,0,1717,1734,5,294,0,0,1718,1730,5,6,0,0,1719,1724,
        3,204,102,0,1720,1721,5,25,0,0,1721,1723,3,204,102,0,1722,1720,1,
        0,0,0,1723,1726,1,0,0,0,1724,1722,1,0,0,0,1724,1725,1,0,0,0,1725,
        1728,1,0,0,0,1726,1724,1,0,0,0,1727,1729,5,25,0,0,1728,1727,1,0,
        0,0,1728,1729,1,0,0,0,1729,1731,1,0,0,0,1730,1719,1,0,0,0,1730,1731,
        1,0,0,0,1731,1732,1,0,0,0,1732,1735,5,8,0,0,1733,1735,5,5,0,0,1734,
        1718,1,0,0,0,1734,1733,1,0,0,0,1735,177,1,0,0,0,1736,1753,5,273,
        0,0,1737,1749,5,6,0,0,1738,1743,3,162,81,0,1739,1740,5,25,0,0,1740,
        1742,3,162,81,0,1741,1739,1,0,0,0,1742,1745,1,0,0,0,1743,1741,1,
        0,0,0,1743,1744,1,0,0,0,1744,1747,1,0,0,0,1745,1743,1,0,0,0,1746,
        1748,5,25,0,0,1747,1746,1,0,0,0,1747,1748,1,0,0,0,1748,1750,1,0,
        0,0,1749,1738,1,0,0,0,1749,1750,1,0,0,0,1750,1751,1,0,0,0,1751,1754,
        5,8,0,0,1752,1754,5,5,0,0,1753,1737,1,0,0,0,1753,1752,1,0,0,0,1754,
        179,1,0,0,0,1755,1756,5,309,0,0,1756,1757,5,6,0,0,1757,1762,3,166,
        83,0,1758,1759,5,25,0,0,1759,1761,3,166,83,0,1760,1758,1,0,0,0,1761,
        1764,1,0,0,0,1762,1760,1,0,0,0,1762,1763,1,0,0,0,1763,1766,1,0,0,
        0,1764,1762,1,0,0,0,1765,1767,5,25,0,0,1766,1765,1,0,0,0,1766,1767,
        1,0,0,0,1767,1768,1,0,0,0,1768,1769,5,8,0,0,1769,181,1,0,0,0,1770,
        1771,5,183,0,0,1771,1772,5,6,0,0,1772,1773,3,204,102,0,1773,1774,
        5,8,0,0,1774,183,1,0,0,0,1775,1776,5,272,0,0,1776,1777,5,6,0,0,1777,
        1778,3,204,102,0,1778,1779,5,8,0,0,1779,185,1,0,0,0,1780,1781,5,
        138,0,0,1781,1782,5,6,0,0,1782,1783,3,204,102,0,1783,1784,5,8,0,
        0,1784,187,1,0,0,0,1785,1786,5,106,0,0,1786,1787,5,6,0,0,1787,1788,
        3,204,102,0,1788,1789,5,25,0,0,1789,1790,3,204,102,0,1790,1791,5,
        8,0,0,1791,189,1,0,0,0,1792,1793,5,267,0,0,1793,1794,5,6,0,0,1794,
        1795,3,204,102,0,1795,1796,5,8,0,0,1796,191,1,0,0,0,1797,1798,5,
        119,0,0,1798,1799,5,6,0,0,1799,1804,3,160,80,0,1800,1801,5,25,0,
        0,1801,1803,3,160,80,0,1802,1800,1,0,0,0,1803,1806,1,0,0,0,1804,
        1802,1,0,0,0,1804,1805,1,0,0,0,1805,1808,1,0,0,0,1806,1804,1,0,0,
        0,1807,1809,5,25,0,0,1808,1807,1,0,0,0,1808,1809,1,0,0,0,1809,1810,
        1,0,0,0,1810,1811,5,8,0,0,1811,193,1,0,0,0,1812,1813,5,245,0,0,1813,
        1814,5,6,0,0,1814,1815,3,160,80,0,1815,1816,5,8,0,0,1816,195,1,0,
        0,0,1817,1818,5,284,0,0,1818,1819,5,6,0,0,1819,1820,3,204,102,0,
        1820,1821,5,25,0,0,1821,1822,3,160,80,0,1822,1823,5,8,0,0,1823,197,
        1,0,0,0,1824,1825,5,69,0,0,1825,1826,5,6,0,0,1826,1828,5,26,0,0,
        1827,1829,3,170,85,0,1828,1827,1,0,0,0,1828,1829,1,0,0,0,1829,1831,
        1,0,0,0,1830,1832,5,25,0,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,
        1837,1,0,0,0,1833,1834,5,39,0,0,1834,1835,3,170,85,0,1835,1836,5,
        38,0,0,1836,1838,1,0,0,0,1837,1833,1,0,0,0,1837,1838,1,0,0,0,1838,
        1839,1,0,0,0,1839,1840,5,27,0,0,1840,1841,5,37,0,0,1841,1842,3,204,
        102,0,1842,1843,5,8,0,0,1843,199,1,0,0,0,1844,1858,3,174,87,0,1845,
        1858,3,176,88,0,1846,1858,3,178,89,0,1847,1858,3,180,90,0,1848,1858,
        3,182,91,0,1849,1858,3,184,92,0,1850,1858,3,186,93,0,1851,1858,3,
        188,94,0,1852,1858,3,190,95,0,1853,1858,3,192,96,0,1854,1858,3,194,
        97,0,1855,1858,3,196,98,0,1856,1858,3,198,99,0,1857,1844,1,0,0,0,
        1857,1845,1,0,0,0,1857,1846,1,0,0,0,1857,1847,1,0,0,0,1857,1848,
        1,0,0,0,1857,1849,1,0,0,0,1857,1850,1,0,0,0,1857,1851,1,0,0,0,1857,
        1852,1,0,0,0,1857,1853,1,0,0,0,1857,1854,1,0,0,0,1857,1855,1,0,0,
        0,1857,1856,1,0,0,0,1858,1862,1,0,0,0,1859,1861,5,28,0,0,1860,1859,
        1,0,0,0,1861,1864,1,0,0,0,1862,1860,1,0,0,0,1862,1863,1,0,0,0,1863,
        201,1,0,0,0,1864,1862,1,0,0,0,1865,1877,3,200,100,0,1866,1869,3,
        172,86,0,1867,1869,3,156,78,0,1868,1866,1,0,0,0,1868,1867,1,0,0,
        0,1869,1873,1,0,0,0,1870,1872,5,28,0,0,1871,1870,1,0,0,0,1872,1875,
        1,0,0,0,1873,1871,1,0,0,0,1873,1874,1,0,0,0,1874,1877,1,0,0,0,1875,
        1873,1,0,0,0,1876,1865,1,0,0,0,1876,1868,1,0,0,0,1877,203,1,0,0,
        0,1878,1881,3,202,101,0,1879,1881,3,144,72,0,1880,1878,1,0,0,0,1880,
        1879,1,0,0,0,1881,205,1,0,0,0,1882,1883,5,319,0,0,1883,207,1,0,0,
        0,1884,1885,5,309,0,0,1885,1886,5,26,0,0,1886,1887,3,14,7,0,1887,
        1888,5,25,0,0,1888,1889,3,14,7,0,1889,1890,5,25,0,0,1890,1891,3,
        14,7,0,1891,1892,5,27,0,0,1892,1908,1,0,0,0,1893,1894,5,119,0,0,
        1894,1895,5,26,0,0,1895,1896,3,14,7,0,1896,1897,5,25,0,0,1897,1898,
        3,14,7,0,1898,1899,5,27,0,0,1899,1908,1,0,0,0,1900,1901,5,69,0,0,
        1901,1902,5,26,0,0,1902,1903,3,14,7,0,1903,1904,5,25,0,0,1904,1905,
        3,14,7,0,1905,1906,5,27,0,0,1906,1908,1,0,0,0,1907,1884,1,0,0,0,
        1907,1893,1,0,0,0,1907,1900,1,0,0,0,1908,209,1,0,0,0,1909,1910,5,
        97,0,0,1910,1911,3,144,72,0,1911,1912,5,51,0,0,1912,1915,3,202,101,
        0,1913,1914,5,2,0,0,1914,1916,3,142,71,0,1915,1913,1,0,0,0,1915,
        1916,1,0,0,0,1916,211,1,0,0,0,1917,1919,5,24,0,0,1918,1917,1,0,0,
        0,1918,1919,1,0,0,0,1919,1920,1,0,0,0,1920,1925,3,790,395,0,1921,
        1922,5,24,0,0,1922,1924,3,790,395,0,1923,1921,1,0,0,0,1924,1927,
        1,0,0,0,1925,1923,1,0,0,0,1925,1926,1,0,0,0,1926,213,1,0,0,0,1927,
        1925,1,0,0,0,1928,1929,5,158,0,0,1929,1930,3,212,106,0,1930,1931,
        5,276,0,0,1931,1932,3,152,76,0,1932,215,1,0,0,0,1933,1934,5,130,
        0,0,1934,1935,3,148,74,0,1935,217,1,0,0,0,1936,1939,3,144,72,0,1937,
        1939,5,116,0,0,1938,1936,1,0,0,0,1938,1937,1,0,0,0,1939,1940,1,0,
        0,0,1940,1942,5,26,0,0,1941,1943,3,112,56,0,1942,1941,1,0,0,0,1942,
        1943,1,0,0,0,1943,1944,1,0,0,0,1944,1945,5,27,0,0,1945,219,1,0,0,
        0,1946,1947,5,64,0,0,1947,1948,3,626,313,0,1948,1949,5,118,0,0,1949,
        1950,5,111,0,0,1950,221,1,0,0,0,1951,1954,5,111,0,0,1952,1955,3,
        218,109,0,1953,1955,3,220,110,0,1954,1952,1,0,0,0,1954,1953,1,0,
        0,0,1955,223,1,0,0,0,1956,1957,5,225,0,0,1957,1958,3,820,410,0,1958,
        1972,3,790,395,0,1959,1960,5,2,0,0,1960,1973,3,226,113,0,1961,1962,
        5,26,0,0,1962,1967,3,226,113,0,1963,1964,5,25,0,0,1964,1966,3,226,
        113,0,1965,1963,1,0,0,0,1966,1969,1,0,0,0,1967,1965,1,0,0,0,1967,
        1968,1,0,0,0,1968,1970,1,0,0,0,1969,1967,1,0,0,0,1970,1971,5,27,
        0,0,1971,1973,1,0,0,0,1972,1959,1,0,0,0,1972,1961,1,0,0,0,1972,1973,
        1,0,0,0,1973,225,1,0,0,0,1974,1980,3,154,77,0,1975,1980,3,772,386,
        0,1976,1980,5,319,0,0,1977,1980,3,850,425,0,1978,1980,3,144,72,0,
        1979,1974,1,0,0,0,1979,1975,1,0,0,0,1979,1976,1,0,0,0,1979,1977,
        1,0,0,0,1979,1978,1,0,0,0,1980,227,1,0,0,0,1981,1983,3,14,7,0,1982,
        1984,7,9,0,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,229,1,0,0,
        0,1985,1990,3,228,114,0,1986,1987,5,25,0,0,1987,1989,3,228,114,0,
        1988,1986,1,0,0,0,1989,1992,1,0,0,0,1990,1988,1,0,0,0,1990,1991,
        1,0,0,0,1991,231,1,0,0,0,1992,1990,1,0,0,0,1993,1999,3,236,118,0,
        1994,1995,3,238,119,0,1995,1996,3,236,118,0,1996,1998,1,0,0,0,1997,
        1994,1,0,0,0,1998,2001,1,0,0,0,1999,1997,1,0,0,0,1999,2000,1,0,0,
        0,2000,233,1,0,0,0,2001,1999,1,0,0,0,2002,2008,3,240,120,0,2003,
        2004,3,238,119,0,2004,2005,3,236,118,0,2005,2007,1,0,0,0,2006,2003,
        1,0,0,0,2007,2010,1,0,0,0,2008,2006,1,0,0,0,2008,2009,1,0,0,0,2009,
        235,1,0,0,0,2010,2008,1,0,0,0,2011,2017,3,240,120,0,2012,2013,5,
        26,0,0,2013,2014,3,240,120,0,2014,2015,5,27,0,0,2015,2017,1,0,0,
        0,2016,2011,1,0,0,0,2016,2012,1,0,0,0,2017,237,1,0,0,0,2018,2020,
        5,298,0,0,2019,2021,5,44,0,0,2020,2019,1,0,0,0,2020,2021,1,0,0,0,
        2021,2025,1,0,0,0,2022,2025,5,169,0,0,2023,2025,5,124,0,0,2024,2018,
        1,0,0,0,2024,2022,1,0,0,0,2024,2023,1,0,0,0,2025,239,1,0,0,0,2026,
        2033,3,242,121,0,2027,2028,5,182,0,0,2028,2031,3,14,7,0,2029,2030,
        7,10,0,0,2030,2032,3,14,7,0,2031,2029,1,0,0,0,2031,2032,1,0,0,0,
        2032,2034,1,0,0,0,2033,2027,1,0,0,0,2033,2034,1,0,0,0,2034,241,1,
        0,0,0,2035,2037,5,109,0,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,
        2041,1,0,0,0,2038,2042,3,244,122,0,2039,2042,3,250,125,0,2040,2042,
        3,254,127,0,2041,2038,1,0,0,0,2041,2039,1,0,0,0,2041,2040,1,0,0,
        0,2042,2046,1,0,0,0,2043,2044,5,170,0,0,2044,2045,5,249,0,0,2045,
        2047,3,116,58,0,2046,2043,1,0,0,0,2046,2047,1,0,0,0,2047,243,1,0,
        0,0,2048,2050,5,230,0,0,2049,2051,5,272,0,0,2050,2049,1,0,0,0,2050,
        2051,1,0,0,0,2051,2052,1,0,0,0,2052,2057,3,346,173,0,2053,2054,5,
        25,0,0,2054,2056,3,346,173,0,2055,2053,1,0,0,0,2056,2059,1,0,0,0,
        2057,2055,1,0,0,0,2057,2058,1,0,0,0,2058,2081,1,0,0,0,2059,2057,
        1,0,0,0,2060,2061,5,306,0,0,2061,2064,3,136,68,0,2062,2063,5,51,
        0,0,2063,2065,3,790,395,0,2064,2062,1,0,0,0,2064,2065,1,0,0,0,2065,
        2068,1,0,0,0,2066,2067,5,315,0,0,2067,2069,3,248,124,0,2068,2066,
        1,0,0,0,2068,2069,1,0,0,0,2069,2071,1,0,0,0,2070,2072,3,866,433,
        0,2071,2070,1,0,0,0,2071,2072,1,0,0,0,2072,2075,1,0,0,0,2073,2074,
        5,152,0,0,2074,2076,3,14,7,0,2075,2073,1,0,0,0,2075,2076,1,0,0,0,
        2076,2079,1,0,0,0,2077,2078,5,53,0,0,2078,2080,3,314,157,0,2079,
        2077,1,0,0,0,2079,2080,1,0,0,0,2080,2082,1,0,0,0,2081,2060,1,0,0,
        0,2081,2082,1,0,0,0,2082,245,1,0,0,0,2083,2084,3,790,395,0,2084,
        2085,5,2,0,0,2085,2086,3,14,7,0,2086,247,1,0,0,0,2087,2092,3,246,
        123,0,2088,2089,5,25,0,0,2089,2091,3,246,123,0,2090,2088,1,0,0,0,
        2091,2094,1,0,0,0,2092,2090,1,0,0,0,2092,2093,1,0,0,0,2093,249,1,
        0,0,0,2094,2092,1,0,0,0,2095,2096,5,234,0,0,2096,2101,3,346,173,
        0,2097,2098,5,25,0,0,2098,2100,3,346,173,0,2099,2097,1,0,0,0,2100,
        2103,1,0,0,0,2101,2099,1,0,0,0,2101,2102,1,0,0,0,2102,2106,1,0,0,
        0,2103,2101,1,0,0,0,2104,2105,5,227,0,0,2105,2107,3,230,115,0,2106,
        2104,1,0,0,0,2106,2107,1,0,0,0,2107,2108,1,0,0,0,2108,2109,5,205,
        0,0,2109,2110,3,124,62,0,2110,2112,5,306,0,0,2111,2113,5,44,0,0,
        2112,2111,1,0,0,0,2112,2113,1,0,0,0,2113,2114,1,0,0,0,2114,2117,
        3,136,68,0,2115,2116,5,51,0,0,2116,2118,3,790,395,0,2117,2115,1,
        0,0,0,2117,2118,1,0,0,0,2118,2120,1,0,0,0,2119,2121,3,866,433,0,
        2120,2119,1,0,0,0,2120,2121,1,0,0,0,2121,2124,1,0,0,0,2122,2123,
        5,152,0,0,2123,2125,3,14,7,0,2124,2122,1,0,0,0,2124,2125,1,0,0,0,
        2125,2128,1,0,0,0,2126,2127,5,53,0,0,2127,2129,3,314,157,0,2128,
        2126,1,0,0,0,2128,2129,1,0,0,0,2129,251,1,0,0,0,2130,2132,7,11,0,
        0,2131,2130,1,0,0,0,2131,2132,1,0,0,0,2132,253,1,0,0,0,2133,2135,
        3,868,434,0,2134,2133,1,0,0,0,2134,2135,1,0,0,0,2135,2136,1,0,0,
        0,2136,2138,5,265,0,0,2137,2139,5,272,0,0,2138,2137,1,0,0,0,2138,
        2139,1,0,0,0,2139,2140,1,0,0,0,2140,2141,3,252,126,0,2141,2146,3,
        336,168,0,2142,2143,5,25,0,0,2143,2145,3,336,168,0,2144,2142,1,0,
        0,0,2145,2148,1,0,0,0,2146,2144,1,0,0,0,2146,2147,1,0,0,0,2147,2150,
        1,0,0,0,2148,2146,1,0,0,0,2149,2151,5,25,0,0,2150,2149,1,0,0,0,2150,
        2151,1,0,0,0,2151,2154,1,0,0,0,2152,2153,5,316,0,0,2153,2155,3,126,
        63,0,2154,2152,1,0,0,0,2154,2155,1,0,0,0,2155,2157,1,0,0,0,2156,
        2158,3,868,434,0,2157,2156,1,0,0,0,2157,2158,1,0,0,0,2158,2160,1,
        0,0,0,2159,2161,3,866,433,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,
        2161,2163,1,0,0,0,2162,2164,3,318,159,0,2163,2162,1,0,0,0,2163,2164,
        1,0,0,0,2164,2167,1,0,0,0,2165,2166,5,152,0,0,2166,2168,3,14,7,0,
        2167,2165,1,0,0,0,2167,2168,1,0,0,0,2168,2170,1,0,0,0,2169,2171,
        3,724,362,0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,2173,1,0,0,
        0,2172,2174,3,316,158,0,2173,2172,1,0,0,0,2173,2174,1,0,0,0,2174,
        255,1,0,0,0,2175,2176,5,188,0,0,2176,2178,5,26,0,0,2177,2179,3,738,
        369,0,2178,2177,1,0,0,0,2178,2179,1,0,0,0,2179,2181,1,0,0,0,2180,
        2182,3,314,157,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,2184,1,
        0,0,0,2183,2185,3,262,131,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,
        2185,2187,1,0,0,0,2186,2188,3,258,129,0,2187,2186,1,0,0,0,2187,2188,
        1,0,0,0,2188,2189,1,0,0,0,2189,2190,3,268,134,0,2190,2191,5,27,0,
        0,2191,257,1,0,0,0,2192,2193,5,206,0,0,2193,2194,5,258,0,0,2194,
        2195,5,221,0,0,2195,2204,5,186,0,0,2196,2197,5,44,0,0,2197,2198,
        5,259,0,0,2198,2199,5,221,0,0,2199,2201,5,186,0,0,2200,2202,3,260,
        130,0,2201,2200,1,0,0,0,2201,2202,1,0,0,0,2202,2204,1,0,0,0,2203,
        2192,1,0,0,0,2203,2196,1,0,0,0,2204,259,1,0,0,0,2205,2206,5,269,
        0,0,2206,2207,5,115,0,0,2207,2215,5,187,0,0,2208,2209,5,204,0,0,
        2209,2210,5,115,0,0,2210,2215,5,187,0,0,2211,2212,5,315,0,0,2212,
        2213,5,301,0,0,2213,2215,5,259,0,0,2214,2205,1,0,0,0,2214,2208,1,
        0,0,0,2214,2211,1,0,0,0,2215,261,1,0,0,0,2216,2217,5,189,0,0,2217,
        2218,3,264,132,0,2218,263,1,0,0,0,2219,2224,3,266,133,0,2220,2221,
        5,25,0,0,2221,2223,3,266,133,0,2222,2220,1,0,0,0,2223,2226,1,0,0,
        0,2224,2222,1,0,0,0,2224,2225,1,0,0,0,2225,265,1,0,0,0,2226,2224,
        1,0,0,0,2227,2228,3,14,7,0,2228,2229,5,51,0,0,2229,2230,3,790,395,
        0,2230,267,1,0,0,0,2231,2232,5,43,0,0,2232,2233,5,186,0,0,2233,2235,
        3,270,135,0,2234,2231,1,0,0,0,2234,2235,1,0,0,0,2235,2237,1,0,0,
        0,2236,2238,3,274,137,0,2237,2236,1,0,0,0,2237,2238,1,0,0,0,2238,
        2239,1,0,0,0,2239,2240,5,220,0,0,2240,2241,5,26,0,0,2241,2242,3,
        276,138,0,2242,2244,5,27,0,0,2243,2245,3,290,145,0,2244,2243,1,0,
        0,0,2244,2245,1,0,0,0,2245,2246,1,0,0,0,2246,2247,5,101,0,0,2247,
        2248,3,302,151,0,2248,269,1,0,0,0,2249,2250,5,270,0,0,2250,2251,
        5,289,0,0,2251,2252,5,195,0,0,2252,2269,5,258,0,0,2253,2254,5,270,
        0,0,2254,2255,5,219,0,0,2255,2256,5,178,0,0,2256,2269,5,258,0,0,
        2257,2258,5,270,0,0,2258,2259,5,289,0,0,2259,2260,5,136,0,0,2260,
        2269,3,272,136,0,2261,2262,5,270,0,0,2262,2263,5,289,0,0,2263,2264,
        5,178,0,0,2264,2269,3,272,136,0,2265,2266,5,270,0,0,2266,2267,5,
        289,0,0,2267,2269,3,272,136,0,2268,2249,1,0,0,0,2268,2253,1,0,0,
        0,2268,2257,1,0,0,0,2268,2261,1,0,0,0,2268,2265,1,0,0,0,2269,271,
        1,0,0,0,2270,2271,3,312,156,0,2271,273,1,0,0,0,2272,2273,7,12,0,
        0,2273,275,1,0,0,0,2274,2279,3,278,139,0,2275,2276,5,13,0,0,2276,
        2278,3,278,139,0,2277,2275,1,0,0,0,2278,2281,1,0,0,0,2279,2277,1,
        0,0,0,2279,2280,1,0,0,0,2280,277,1,0,0,0,2281,2279,1,0,0,0,2282,
        2284,3,280,140,0,2283,2282,1,0,0,0,2284,2285,1,0,0,0,2285,2283,1,
        0,0,0,2285,2286,1,0,0,0,2286,279,1,0,0,0,2287,2289,3,284,142,0,2288,
        2290,3,282,141,0,2289,2288,1,0,0,0,2289,2290,1,0,0,0,2290,281,1,
        0,0,0,2291,2293,5,20,0,0,2292,2294,5,28,0,0,2293,2292,1,0,0,0,2293,
        2294,1,0,0,0,2294,2320,1,0,0,0,2295,2297,5,17,0,0,2296,2298,5,28,
        0,0,2297,2296,1,0,0,0,2297,2298,1,0,0,0,2298,2320,1,0,0,0,2299,2301,
        5,28,0,0,2300,2302,5,28,0,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,
        2302,2320,1,0,0,0,2303,2305,5,33,0,0,2304,2306,3,854,427,0,2305,
        2304,1,0,0,0,2305,2306,1,0,0,0,2306,2307,1,0,0,0,2307,2309,5,25,
        0,0,2308,2310,3,854,427,0,2309,2308,1,0,0,0,2309,2310,1,0,0,0,2310,
        2311,1,0,0,0,2311,2313,5,34,0,0,2312,2314,5,28,0,0,2313,2312,1,0,
        0,0,2313,2314,1,0,0,0,2314,2320,1,0,0,0,2315,2316,5,33,0,0,2316,
        2317,3,854,427,0,2317,2318,5,34,0,0,2318,2320,1,0,0,0,2319,2291,
        1,0,0,0,2319,2295,1,0,0,0,2319,2299,1,0,0,0,2319,2303,1,0,0,0,2319,
        2315,1,0,0,0,2320,283,1,0,0,0,2321,2337,3,286,143,0,2322,2337,5,
        32,0,0,2323,2337,5,35,0,0,2324,2326,5,26,0,0,2325,2327,3,276,138,
        0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,2328,1,0,0,0,2328,2337,
        5,27,0,0,2329,2330,5,33,0,0,2330,2331,5,18,0,0,2331,2332,3,276,138,
        0,2332,2333,5,18,0,0,2333,2334,5,34,0,0,2334,2337,1,0,0,0,2335,2337,
        3,288,144,0,2336,2321,1,0,0,0,2336,2322,1,0,0,0,2336,2323,1,0,0,
        0,2336,2324,1,0,0,0,2336,2329,1,0,0,0,2336,2335,1,0,0,0,2337,285,
        1,0,0,0,2338,2339,3,312,156,0,2339,287,1,0,0,0,2340,2341,5,222,0,
        0,2341,2342,5,26,0,0,2342,2347,3,276,138,0,2343,2344,5,25,0,0,2344,
        2346,3,276,138,0,2345,2343,1,0,0,0,2346,2349,1,0,0,0,2347,2345,1,
        0,0,0,2347,2348,1,0,0,0,2348,2350,1,0,0,0,2349,2347,1,0,0,0,2350,
        2351,5,27,0,0,2351,289,1,0,0,0,2352,2353,5,275,0,0,2353,2354,3,292,
        146,0,2354,291,1,0,0,0,2355,2360,3,294,147,0,2356,2357,5,25,0,0,
        2357,2359,3,294,147,0,2358,2356,1,0,0,0,2359,2362,1,0,0,0,2360,2358,
        1,0,0,0,2360,2361,1,0,0,0,2361,293,1,0,0,0,2362,2360,1,0,0,0,2363,
        2364,3,296,148,0,2364,2365,5,2,0,0,2365,2366,5,26,0,0,2366,2367,
        3,298,149,0,2367,2368,5,27,0,0,2368,295,1,0,0,0,2369,2370,3,312,
        156,0,2370,297,1,0,0,0,2371,2376,3,300,150,0,2372,2373,5,25,0,0,
        2373,2375,3,300,150,0,2374,2372,1,0,0,0,2375,2378,1,0,0,0,2376,2374,
        1,0,0,0,2376,2377,1,0,0,0,2377,299,1,0,0,0,2378,2376,1,0,0,0,2379,
        2380,3,312,156,0,2380,301,1,0,0,0,2381,2386,3,304,152,0,2382,2383,
        5,25,0,0,2383,2385,3,304,152,0,2384,2382,1,0,0,0,2385,2388,1,0,0,
        0,2386,2384,1,0,0,0,2386,2387,1,0,0,0,2387,303,1,0,0,0,2388,2386,
        1,0,0,0,2389,2390,3,306,153,0,2390,2391,5,51,0,0,2391,2392,3,308,
        154,0,2392,305,1,0,0,0,2393,2394,3,312,156,0,2394,307,1,0,0,0,2395,
        2396,3,310,155,0,2396,309,1,0,0,0,2397,2398,3,14,7,0,2398,311,1,
        0,0,0,2399,2400,3,770,385,0,2400,313,1,0,0,0,2401,2402,5,211,0,0,
        2402,2403,5,68,0,0,2403,2404,3,230,115,0,2404,315,1,0,0,0,2405,2407,
        5,53,0,0,2406,2405,1,0,0,0,2406,2407,1,0,0,0,2407,2408,1,0,0,0,2408,
        2409,3,314,157,0,2409,317,1,0,0,0,2410,2412,5,148,0,0,2411,2413,
        5,80,0,0,2412,2411,1,0,0,0,2412,2413,1,0,0,0,2413,2414,1,0,0,0,2414,
        2415,5,68,0,0,2415,2416,3,252,126,0,2416,2419,3,320,160,0,2417,2418,
        5,315,0,0,2418,2420,3,790,395,0,2419,2417,1,0,0,0,2419,2420,1,0,
        0,0,2420,319,1,0,0,0,2421,2426,3,322,161,0,2422,2423,5,25,0,0,2423,
        2425,3,322,161,0,2424,2422,1,0,0,0,2425,2428,1,0,0,0,2426,2424,1,
        0,0,0,2426,2427,1,0,0,0,2427,321,1,0,0,0,2428,2426,1,0,0,0,2429,
        2435,3,324,162,0,2430,2435,3,328,164,0,2431,2435,3,330,165,0,2432,
        2435,3,332,166,0,2433,2435,3,334,167,0,2434,2429,1,0,0,0,2434,2430,
        1,0,0,0,2434,2431,1,0,0,0,2434,2432,1,0,0,0,2434,2433,1,0,0,0,2435,
        323,1,0,0,0,2436,2437,3,128,64,0,2437,325,1,0,0,0,2438,2443,3,324,
        162,0,2439,2440,5,25,0,0,2440,2442,3,324,162,0,2441,2439,1,0,0,0,
        2442,2445,1,0,0,0,2443,2441,1,0,0,0,2443,2444,1,0,0,0,2444,327,1,
        0,0,0,2445,2443,1,0,0,0,2446,2447,5,257,0,0,2447,2448,5,26,0,0,2448,
        2449,3,326,163,0,2449,2450,5,27,0,0,2450,329,1,0,0,0,2451,2452,5,
        89,0,0,2452,2453,5,26,0,0,2453,2454,3,326,163,0,2454,2455,5,27,0,
        0,2455,331,1,0,0,0,2456,2457,5,149,0,0,2457,2458,5,268,0,0,2458,
        2459,5,26,0,0,2459,2460,3,320,160,0,2460,2461,5,27,0,0,2461,333,
        1,0,0,0,2462,2463,5,153,0,0,2463,2464,5,26,0,0,2464,2465,3,14,7,
        0,2465,2466,5,25,0,0,2466,2467,3,14,7,0,2467,2468,5,25,0,0,2468,
        2469,3,14,7,0,2469,2470,5,25,0,0,2470,2471,3,14,7,0,2471,2472,5,
        27,0,0,2472,335,1,0,0,0,2473,2474,3,814,407,0,2474,2475,5,20,0,0,
        2475,2483,1,0,0,0,2476,2480,3,14,7,0,2477,2478,5,51,0,0,2478,2481,
        3,792,396,0,2479,2481,3,810,405,0,2480,2477,1,0,0,0,2480,2479,1,
        0,0,0,2480,2481,1,0,0,0,2481,2483,1,0,0,0,2482,2473,1,0,0,0,2482,
        2476,1,0,0,0,2483,337,1,0,0,0,2484,2486,5,49,0,0,2485,2484,1,0,0,
        0,2485,2486,1,0,0,0,2486,2487,1,0,0,0,2487,2498,3,344,172,0,2488,
        2490,3,358,179,0,2489,2491,5,49,0,0,2490,2489,1,0,0,0,2490,2491,
        1,0,0,0,2491,2492,1,0,0,0,2492,2494,3,344,172,0,2493,2495,3,360,
        180,0,2494,2493,1,0,0,0,2494,2495,1,0,0,0,2495,2497,1,0,0,0,2496,
        2488,1,0,0,0,2497,2500,1,0,0,0,2498,2496,1,0,0,0,2498,2499,1,0,0,
        0,2499,339,1,0,0,0,2500,2498,1,0,0,0,2501,2504,3,120,60,0,2502,2503,
        5,51,0,0,2503,2505,3,790,395,0,2504,2502,1,0,0,0,2504,2505,1,0,0,
        0,2505,341,1,0,0,0,2506,2515,3,340,170,0,2507,2508,5,26,0,0,2508,
        2510,3,130,65,0,2509,2511,5,25,0,0,2510,2509,1,0,0,0,2510,2511,1,
        0,0,0,2511,2512,1,0,0,0,2512,2513,5,27,0,0,2513,2515,1,0,0,0,2514,
        2506,1,0,0,0,2514,2507,1,0,0,0,2515,343,1,0,0,0,2516,2526,3,346,
        173,0,2517,2524,5,137,0,0,2518,2520,7,13,0,0,2519,2518,1,0,0,0,2519,
        2520,1,0,0,0,2520,2521,1,0,0,0,2521,2522,5,68,0,0,2522,2525,3,342,
        171,0,2523,2525,5,78,0,0,2524,2519,1,0,0,0,2524,2523,1,0,0,0,2525,
        2527,1,0,0,0,2526,2517,1,0,0,0,2526,2527,1,0,0,0,2527,345,1,0,0,
        0,2528,2530,3,348,174,0,2529,2531,3,256,128,0,2530,2529,1,0,0,0,
        2530,2531,1,0,0,0,2531,2540,1,0,0,0,2532,2533,5,51,0,0,2533,2536,
        3,790,395,0,2534,2536,3,810,405,0,2535,2532,1,0,0,0,2535,2534,1,
        0,0,0,2536,2538,1,0,0,0,2537,2539,3,114,57,0,2538,2537,1,0,0,0,2538,
        2539,1,0,0,0,2539,2541,1,0,0,0,2540,2535,1,0,0,0,2540,2541,1,0,0,
        0,2541,2544,1,0,0,0,2542,2545,3,350,175,0,2543,2545,3,352,176,0,
        2544,2542,1,0,0,0,2544,2543,1,0,0,0,2544,2545,1,0,0,0,2545,347,1,
        0,0,0,2546,2556,3,632,316,0,2547,2548,5,26,0,0,2548,2549,3,232,116,
        0,2549,2550,5,27,0,0,2550,2556,1,0,0,0,2551,2552,5,26,0,0,2552,2553,
        3,370,185,0,2553,2554,5,27,0,0,2554,2556,1,0,0,0,2555,2546,1,0,0,
        0,2555,2547,1,0,0,0,2555,2551,1,0,0,0,2556,349,1,0,0,0,2557,2558,
        5,260,0,0,2558,2559,3,14,7,0,2559,351,1,0,0,0,2560,2561,5,282,0,
        0,2561,2562,3,354,177,0,2562,2563,5,26,0,0,2563,2564,3,14,7,0,2564,
        2566,5,27,0,0,2565,2567,3,356,178,0,2566,2565,1,0,0,0,2566,2567,
        1,0,0,0,2567,353,1,0,0,0,2568,2569,7,14,0,0,2569,355,1,0,0,0,2570,
        2571,5,241,0,0,2571,2572,5,26,0,0,2572,2573,3,14,7,0,2573,2574,5,
        27,0,0,2574,357,1,0,0,0,2575,2600,5,25,0,0,2576,2578,5,194,0,0,2577,
        2576,1,0,0,0,2577,2578,1,0,0,0,2578,2596,1,0,0,0,2579,2581,5,179,
        0,0,2580,2582,7,15,0,0,2581,2580,1,0,0,0,2581,2582,1,0,0,0,2582,
        2590,1,0,0,0,2583,2585,5,254,0,0,2584,2586,7,15,0,0,2585,2584,1,
        0,0,0,2585,2586,1,0,0,0,2586,2590,1,0,0,0,2587,2590,5,126,0,0,2588,
        2590,5,143,0,0,2589,2579,1,0,0,0,2589,2583,1,0,0,0,2589,2587,1,0,
        0,0,2589,2588,1,0,0,0,2589,2590,1,0,0,0,2590,2592,1,0,0,0,2591,2593,
        5,213,0,0,2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,2597,1,0,0,0,
        2594,2597,5,166,0,0,2595,2597,5,88,0,0,2596,2589,1,0,0,0,2596,2594,
        1,0,0,0,2596,2595,1,0,0,0,2597,2598,1,0,0,0,2598,2600,5,173,0,0,
        2599,2575,1,0,0,0,2599,2577,1,0,0,0,2600,359,1,0,0,0,2601,2602,5,
        205,0,0,2602,2606,3,14,7,0,2603,2604,5,306,0,0,2604,2606,3,118,59,
        0,2605,2601,1,0,0,0,2605,2603,1,0,0,0,2606,361,1,0,0,0,2607,2617,
        5,251,0,0,2608,2618,5,20,0,0,2609,2614,3,790,395,0,2610,2611,5,25,
        0,0,2611,2613,3,790,395,0,2612,2610,1,0,0,0,2613,2616,1,0,0,0,2614,
        2612,1,0,0,0,2614,2615,1,0,0,0,2615,2618,1,0,0,0,2616,2614,1,0,0,
        0,2617,2608,1,0,0,0,2617,2609,1,0,0,0,2618,363,1,0,0,0,2619,2632,
        5,167,0,0,2620,2621,5,167,0,0,2621,2622,5,210,0,0,2622,2632,5,40,
        0,0,2623,2624,5,167,0,0,2624,2625,5,210,0,0,2625,2632,5,252,0,0,
        2626,2627,5,167,0,0,2627,2628,5,210,0,0,2628,2632,5,155,0,0,2629,
        2632,5,303,0,0,2630,2632,5,242,0,0,2631,2619,1,0,0,0,2631,2620,1,
        0,0,0,2631,2623,1,0,0,0,2631,2626,1,0,0,0,2631,2629,1,0,0,0,2631,
        2630,1,0,0,0,2632,2633,1,0,0,0,2633,2634,5,170,0,0,2634,2635,3,648,
        324,0,2635,2637,3,368,184,0,2636,2638,3,362,181,0,2637,2636,1,0,
        0,0,2637,2638,1,0,0,0,2638,365,1,0,0,0,2639,2651,5,167,0,0,2640,
        2641,5,167,0,0,2641,2642,5,210,0,0,2642,2651,5,40,0,0,2643,2644,
        5,167,0,0,2644,2645,5,210,0,0,2645,2651,5,252,0,0,2646,2647,5,167,
        0,0,2647,2648,5,210,0,0,2648,2651,5,155,0,0,2649,2651,5,242,0,0,
        2650,2639,1,0,0,0,2650,2640,1,0,0,0,2650,2643,1,0,0,0,2650,2646,
        1,0,0,0,2650,2649,1,0,0,0,2651,2652,1,0,0,0,2652,2653,5,170,0,0,
        2653,2654,3,648,324,0,2654,2655,3,368,184,0,2655,367,1,0,0,0,2656,
        2658,3,114,57,0,2657,2656,1,0,0,0,2657,2658,1,0,0,0,2658,2659,1,
        0,0,0,2659,2663,3,372,186,0,2660,2661,5,98,0,0,2661,2663,5,308,0,
        0,2662,2657,1,0,0,0,2662,2660,1,0,0,0,2663,369,1,0,0,0,2664,2665,
        5,308,0,0,2665,2666,3,374,187,0,2666,371,1,0,0,0,2667,2670,3,370,
        185,0,2668,2670,3,232,116,0,2669,2667,1,0,0,0,2669,2668,1,0,0,0,
        2670,373,1,0,0,0,2671,2676,3,376,188,0,2672,2673,5,25,0,0,2673,2675,
        3,376,188,0,2674,2672,1,0,0,0,2675,2678,1,0,0,0,2676,2674,1,0,0,
        0,2676,2677,1,0,0,0,2677,375,1,0,0,0,2678,2676,1,0,0,0,2679,2680,
        5,26,0,0,2680,2681,3,112,56,0,2681,2682,5,27,0,0,2682,377,1,0,0,
        0,2683,2686,3,112,56,0,2684,2686,3,232,116,0,2685,2683,1,0,0,0,2685,
        2684,1,0,0,0,2686,379,1,0,0,0,2687,2690,5,87,0,0,2688,2689,5,210,
        0,0,2689,2691,5,242,0,0,2690,2688,1,0,0,0,2690,2691,1,0,0,0,2691,
        2692,1,0,0,0,2692,2693,5,131,0,0,2693,2694,5,94,0,0,2694,2698,5,
        271,0,0,2695,2696,5,154,0,0,2696,2697,5,197,0,0,2697,2699,5,128,
        0,0,2698,2695,1,0,0,0,2698,2699,1,0,0,0,2699,2700,1,0,0,0,2700,2701,
        3,642,321,0,2701,2702,3,456,228,0,2702,381,1,0,0,0,2703,2704,5,45,
        0,0,2704,2705,5,131,0,0,2705,2706,5,94,0,0,2706,2707,5,271,0,0,2707,
        2708,3,642,321,0,2708,2713,3,384,192,0,2709,2710,5,25,0,0,2710,2712,
        3,384,192,0,2711,2709,1,0,0,0,2712,2715,1,0,0,0,2713,2711,1,0,0,
        0,2713,2714,1,0,0,0,2714,383,1,0,0,0,2715,2713,1,0,0,0,2716,2720,
        3,488,244,0,2717,2720,3,490,245,0,2718,2720,3,492,246,0,2719,2716,
        1,0,0,0,2719,2717,1,0,0,0,2719,2718,1,0,0,0,2720,385,1,0,0,0,2721,
        2722,5,112,0,0,2722,2723,5,131,0,0,2723,2724,5,94,0,0,2724,2727,
        5,271,0,0,2725,2726,5,154,0,0,2726,2728,5,128,0,0,2727,2725,1,0,
        0,0,2727,2728,1,0,0,0,2728,2729,1,0,0,0,2729,2730,3,642,321,0,2730,
        387,1,0,0,0,2731,2732,5,87,0,0,2732,2736,5,310,0,0,2733,2734,5,154,
        0,0,2734,2735,5,197,0,0,2735,2737,5,128,0,0,2736,2733,1,0,0,0,2736,
        2737,1,0,0,0,2737,2738,1,0,0,0,2738,2740,3,642,321,0,2739,2741,3,
        396,198,0,2740,2739,1,0,0,0,2740,2741,1,0,0,0,2741,2742,1,0,0,0,
        2742,2743,5,51,0,0,2743,2744,3,232,116,0,2744,389,1,0,0,0,2745,2746,
        5,112,0,0,2746,2749,5,310,0,0,2747,2748,5,154,0,0,2748,2750,5,128,
        0,0,2749,2747,1,0,0,0,2749,2750,1,0,0,0,2750,2751,1,0,0,0,2751,2752,
        3,642,321,0,2752,391,1,0,0,0,2753,2754,5,303,0,0,2754,2755,5,201,
        0,0,2755,2756,3,642,321,0,2756,2757,5,26,0,0,2757,2758,5,295,0,0,
        2758,2759,3,416,208,0,2759,2761,5,27,0,0,2760,2762,3,396,198,0,2761,
        2760,1,0,0,0,2761,2762,1,0,0,0,2762,393,1,0,0,0,2763,2764,5,87,0,
        0,2764,2768,5,201,0,0,2765,2766,5,154,0,0,2766,2767,5,197,0,0,2767,
        2769,5,128,0,0,2768,2765,1,0,0,0,2768,2769,1,0,0,0,2769,2770,1,0,
        0,0,2770,2771,3,642,321,0,2771,2772,5,26,0,0,2772,2773,5,295,0,0,
        2773,2774,3,416,208,0,2774,2776,5,27,0,0,2775,2777,3,396,198,0,2776,
        2775,1,0,0,0,2776,2777,1,0,0,0,2777,395,1,0,0,0,2778,2779,5,315,
        0,0,2779,2780,3,414,207,0,2780,397,1,0,0,0,2781,2782,5,45,0,0,2782,
        2783,5,201,0,0,2783,2784,3,642,321,0,2784,2785,5,26,0,0,2785,2786,
        5,295,0,0,2786,2787,3,416,208,0,2787,2788,5,27,0,0,2788,2789,3,400,
        200,0,2789,399,1,0,0,0,2790,2791,5,267,0,0,2791,2792,3,414,207,0,
        2792,401,1,0,0,0,2793,2794,5,112,0,0,2794,2797,5,201,0,0,2795,2796,
        5,154,0,0,2796,2798,5,128,0,0,2797,2795,1,0,0,0,2797,2798,1,0,0,
        0,2798,2799,1,0,0,0,2799,2800,3,642,321,0,2800,2801,5,26,0,0,2801,
        2802,5,295,0,0,2802,2803,3,416,208,0,2803,2805,5,27,0,0,2804,2806,
        3,404,202,0,2805,2804,1,0,0,0,2805,2806,1,0,0,0,2806,403,1,0,0,0,
        2807,2808,5,315,0,0,2808,2809,3,414,207,0,2809,405,1,0,0,0,2810,
        2815,3,818,409,0,2811,2815,3,144,72,0,2812,2815,5,319,0,0,2813,2815,
        3,850,425,0,2814,2810,1,0,0,0,2814,2811,1,0,0,0,2814,2812,1,0,0,
        0,2814,2813,1,0,0,0,2815,407,1,0,0,0,2816,2817,3,792,396,0,2817,
        2818,5,2,0,0,2818,2819,3,406,203,0,2819,409,1,0,0,0,2820,2821,3,
        792,396,0,2821,411,1,0,0,0,2822,2825,3,408,204,0,2823,2825,3,410,
        205,0,2824,2822,1,0,0,0,2824,2823,1,0,0,0,2825,413,1,0,0,0,2826,
        2839,3,412,206,0,2827,2828,5,26,0,0,2828,2833,3,412,206,0,2829,2830,
        5,25,0,0,2830,2832,3,412,206,0,2831,2829,1,0,0,0,2832,2835,1,0,0,
        0,2833,2831,1,0,0,0,2833,2834,1,0,0,0,2834,2836,1,0,0,0,2835,2833,
        1,0,0,0,2836,2837,5,27,0,0,2837,2839,1,0,0,0,2838,2826,1,0,0,0,2838,
        2827,1,0,0,0,2839,415,1,0,0,0,2840,2841,3,792,396,0,2841,417,1,0,
        0,0,2842,2845,5,87,0,0,2843,2844,5,210,0,0,2844,2846,5,242,0,0,2845,
        2843,1,0,0,0,2845,2846,1,0,0,0,2846,2855,1,0,0,0,2847,2856,5,280,
        0,0,2848,2856,5,283,0,0,2849,2850,5,131,0,0,2850,2856,5,280,0,0,
        2851,2852,5,285,0,0,2852,2856,5,280,0,0,2853,2854,5,286,0,0,2854,
        2856,5,280,0,0,2855,2847,1,0,0,0,2855,2848,1,0,0,0,2855,2849,1,0,
        0,0,2855,2851,1,0,0,0,2855,2853,1,0,0,0,2856,2860,1,0,0,0,2857,2858,
        5,154,0,0,2858,2859,5,197,0,0,2859,2861,5,128,0,0,2860,2857,1,0,
        0,0,2860,2861,1,0,0,0,2861,2862,1,0,0,0,2862,2863,3,646,323,0,2863,
        2864,5,26,0,0,2864,2869,3,420,210,0,2865,2866,5,25,0,0,2866,2868,
        3,420,210,0,2867,2865,1,0,0,0,2868,2871,1,0,0,0,2869,2867,1,0,0,
        0,2869,2870,1,0,0,0,2870,2873,1,0,0,0,2871,2869,1,0,0,0,2872,2874,
        5,25,0,0,2873,2872,1,0,0,0,2873,2874,1,0,0,0,2874,2875,1,0,0,0,2875,
        2877,5,27,0,0,2876,2878,3,452,226,0,2877,2876,1,0,0,0,2877,2878,
        1,0,0,0,2878,2880,1,0,0,0,2879,2881,3,454,227,0,2880,2879,1,0,0,
        0,2880,2881,1,0,0,0,2881,2883,1,0,0,0,2882,2884,3,456,228,0,2883,
        2882,1,0,0,0,2883,2884,1,0,0,0,2884,2886,1,0,0,0,2885,2887,3,458,
        229,0,2886,2885,1,0,0,0,2886,2887,1,0,0,0,2887,2889,1,0,0,0,2888,
        2890,3,462,231,0,2889,2888,1,0,0,0,2889,2890,1,0,0,0,2890,419,1,
        0,0,0,2891,2898,3,510,255,0,2892,2898,3,518,259,0,2893,2898,3,520,
        260,0,2894,2898,3,550,275,0,2895,2898,3,536,268,0,2896,2898,3,794,
        397,0,2897,2891,1,0,0,0,2897,2892,1,0,0,0,2897,2893,1,0,0,0,2897,
        2894,1,0,0,0,2897,2895,1,0,0,0,2897,2896,1,0,0,0,2898,421,1,0,0,
        0,2899,2900,5,87,0,0,2900,2902,3,442,221,0,2901,2903,3,428,214,0,
        2902,2901,1,0,0,0,2902,2903,1,0,0,0,2903,2904,1,0,0,0,2904,2905,
        5,315,0,0,2905,2906,5,26,0,0,2906,2907,3,444,222,0,2907,2908,5,27,
        0,0,2908,423,1,0,0,0,2909,2910,5,45,0,0,2910,2913,3,442,221,0,2911,
        2914,3,434,217,0,2912,2914,3,438,219,0,2913,2911,1,0,0,0,2913,2912,
        1,0,0,0,2914,425,1,0,0,0,2915,2916,5,112,0,0,2916,2917,3,442,221,
        0,2917,427,1,0,0,0,2918,2921,5,95,0,0,2919,2921,3,430,215,0,2920,
        2918,1,0,0,0,2920,2919,1,0,0,0,2921,429,1,0,0,0,2922,2923,5,26,0,
        0,2923,2924,3,432,216,0,2924,2925,5,27,0,0,2925,431,1,0,0,0,2926,
        2927,5,280,0,0,2927,2933,3,802,401,0,2928,2929,5,25,0,0,2929,2930,
        5,280,0,0,2930,2932,3,802,401,0,2931,2928,1,0,0,0,2932,2935,1,0,
        0,0,2933,2931,1,0,0,0,2933,2934,1,0,0,0,2934,433,1,0,0,0,2935,2933,
        1,0,0,0,2936,2941,3,436,218,0,2937,2938,5,25,0,0,2938,2940,3,436,
        218,0,2939,2937,1,0,0,0,2940,2943,1,0,0,0,2941,2939,1,0,0,0,2941,
        2942,1,0,0,0,2942,435,1,0,0,0,2943,2941,1,0,0,0,2944,2947,3,490,
        245,0,2945,2947,3,492,246,0,2946,2944,1,0,0,0,2946,2945,1,0,0,0,
        2947,437,1,0,0,0,2948,2953,3,440,220,0,2949,2950,5,25,0,0,2950,2952,
        3,440,220,0,2951,2949,1,0,0,0,2952,2955,1,0,0,0,2953,2951,1,0,0,
        0,2953,2954,1,0,0,0,2954,439,1,0,0,0,2955,2953,1,0,0,0,2956,2957,
        5,42,0,0,2957,2967,5,95,0,0,2958,2959,5,112,0,0,2959,2967,5,95,0,
        0,2960,2961,5,42,0,0,2961,2962,5,280,0,0,2962,2967,3,802,401,0,2963,
        2964,5,112,0,0,2964,2965,5,280,0,0,2965,2967,3,802,401,0,2966,2956,
        1,0,0,0,2966,2958,1,0,0,0,2966,2960,1,0,0,0,2966,2963,1,0,0,0,2967,
        441,1,0,0,0,2968,2969,5,61,0,0,2969,2970,5,62,0,0,2970,2971,3,642,
        321,0,2971,443,1,0,0,0,2972,2977,3,446,223,0,2973,2974,5,25,0,0,
        2974,2976,3,446,223,0,2975,2973,1,0,0,0,2976,2979,1,0,0,0,2977,2975,
        1,0,0,0,2977,2978,1,0,0,0,2978,445,1,0,0,0,2979,2977,1,0,0,0,2980,
        2981,3,790,395,0,2981,2982,5,2,0,0,2982,2983,3,548,274,0,2983,447,
        1,0,0,0,2984,2985,5,61,0,0,2985,2987,3,642,321,0,2986,2988,5,160,
        0,0,2987,2986,1,0,0,0,2987,2988,1,0,0,0,2988,449,1,0,0,0,2989,2990,
        5,247,0,0,2990,2993,3,642,321,0,2991,2992,5,56,0,0,2992,2994,5,319,
        0,0,2993,2991,1,0,0,0,2993,2994,1,0,0,0,2994,451,1,0,0,0,2995,2996,
        5,163,0,0,2996,2997,5,26,0,0,2997,3002,3,644,322,0,2998,2999,5,25,
        0,0,2999,3001,3,644,322,0,3000,2998,1,0,0,0,3001,3004,1,0,0,0,3002,
        3000,1,0,0,0,3002,3003,1,0,0,0,3003,3005,1,0,0,0,3004,3002,1,0,0,
        0,3005,3006,5,27,0,0,3006,453,1,0,0,0,3007,3008,5,216,0,0,3008,3009,
        5,68,0,0,3009,3010,5,151,0,0,3010,3011,3,114,57,0,3011,455,1,0,0,
        0,3012,3013,5,315,0,0,3013,3014,5,26,0,0,3014,3019,3,460,230,0,3015,
        3016,5,25,0,0,3016,3018,3,460,230,0,3017,3015,1,0,0,0,3018,3021,
        1,0,0,0,3019,3017,1,0,0,0,3019,3020,1,0,0,0,3020,3022,1,0,0,0,3021,
        3019,1,0,0,0,3022,3023,5,27,0,0,3023,457,1,0,0,0,3024,3025,5,283,
        0,0,3025,3026,3,644,322,0,3026,459,1,0,0,0,3027,3028,3,790,395,0,
        3028,3029,5,2,0,0,3029,3030,3,548,274,0,3030,461,1,0,0,0,3031,3032,
        5,51,0,0,3032,3033,3,372,186,0,3033,463,1,0,0,0,3034,3035,5,45,0,
        0,3035,3036,5,280,0,0,3036,3037,3,646,323,0,3037,3042,3,466,233,
        0,3038,3039,5,25,0,0,3039,3041,3,466,233,0,3040,3038,1,0,0,0,3041,
        3044,1,0,0,0,3042,3040,1,0,0,0,3042,3043,1,0,0,0,3043,465,1,0,0,
        0,3044,3042,1,0,0,0,3045,3063,3,476,238,0,3046,3063,3,478,239,0,
        3047,3063,3,480,240,0,3048,3063,3,484,242,0,3049,3063,3,486,243,
        0,3050,3063,3,488,244,0,3051,3063,3,490,245,0,3052,3063,3,492,246,
        0,3053,3063,3,494,247,0,3054,3063,3,496,248,0,3055,3063,3,498,249,
        0,3056,3063,3,502,251,0,3057,3063,3,504,252,0,3058,3063,3,506,253,
        0,3059,3063,3,500,250,0,3060,3063,3,508,254,0,3061,3063,3,482,241,
        0,3062,3045,1,0,0,0,3062,3046,1,0,0,0,3062,3047,1,0,0,0,3062,3048,
        1,0,0,0,3062,3049,1,0,0,0,3062,3050,1,0,0,0,3062,3051,1,0,0,0,3062,
        3052,1,0,0,0,3062,3053,1,0,0,0,3062,3054,1,0,0,0,3062,3055,1,0,0,
        0,3062,3056,1,0,0,0,3062,3057,1,0,0,0,3062,3058,1,0,0,0,3062,3059,
        1,0,0,0,3062,3060,1,0,0,0,3062,3061,1,0,0,0,3063,467,1,0,0,0,3064,
        3065,5,45,0,0,3065,3066,5,131,0,0,3066,3067,5,280,0,0,3067,3068,
        3,646,323,0,3068,3073,3,470,235,0,3069,3070,5,25,0,0,3070,3072,3,
        470,235,0,3071,3069,1,0,0,0,3072,3075,1,0,0,0,3073,3071,1,0,0,0,
        3073,3074,1,0,0,0,3074,469,1,0,0,0,3075,3073,1,0,0,0,3076,3082,3,
        476,238,0,3077,3082,3,478,239,0,3078,3082,3,488,244,0,3079,3082,
        3,490,245,0,3080,3082,3,492,246,0,3081,3076,1,0,0,0,3081,3077,1,
        0,0,0,3081,3078,1,0,0,0,3081,3079,1,0,0,0,3081,3080,1,0,0,0,3082,
        471,1,0,0,0,3083,3084,5,45,0,0,3084,3085,5,283,0,0,3085,3086,3,642,
        321,0,3086,3091,3,474,237,0,3087,3088,5,25,0,0,3088,3090,3,474,237,
        0,3089,3087,1,0,0,0,3090,3093,1,0,0,0,3091,3089,1,0,0,0,3091,3092,
        1,0,0,0,3092,473,1,0,0,0,3093,3091,1,0,0,0,3094,3097,3,476,238,0,
        3095,3097,3,478,239,0,3096,3094,1,0,0,0,3096,3095,1,0,0,0,3097,475,
        1,0,0,0,3098,3100,5,42,0,0,3099,3101,5,77,0,0,3100,3099,1,0,0,0,
        3100,3101,1,0,0,0,3101,3102,1,0,0,0,3102,3103,3,510,255,0,3103,477,
        1,0,0,0,3104,3106,5,112,0,0,3105,3107,5,77,0,0,3106,3105,1,0,0,0,
        3106,3107,1,0,0,0,3107,3108,1,0,0,0,3108,3109,3,790,395,0,3109,479,
        1,0,0,0,3110,3111,5,45,0,0,3111,3112,5,77,0,0,3112,3113,3,790,395,
        0,3113,3114,5,267,0,0,3114,3115,3,512,256,0,3115,481,1,0,0,0,3116,
        3117,5,45,0,0,3117,3118,5,77,0,0,3118,3119,3,790,395,0,3119,3120,
        5,112,0,0,3120,3121,5,197,0,0,3121,3122,5,199,0,0,3122,483,1,0,0,
        0,3123,3124,5,42,0,0,3124,3125,3,550,275,0,3125,485,1,0,0,0,3126,
        3127,5,45,0,0,3127,3128,5,134,0,0,3128,3129,3,790,395,0,3129,3130,
        5,267,0,0,3130,3131,3,790,395,0,3131,3132,3,556,278,0,3132,487,1,
        0,0,0,3133,3134,5,267,0,0,3134,3135,3,790,395,0,3135,3136,3,548,
        274,0,3136,489,1,0,0,0,3137,3138,5,267,0,0,3138,3139,5,26,0,0,3139,
        3144,3,546,273,0,3140,3141,5,25,0,0,3141,3143,3,546,273,0,3142,3140,
        1,0,0,0,3143,3146,1,0,0,0,3144,3142,1,0,0,0,3144,3145,1,0,0,0,3145,
        3147,1,0,0,0,3146,3144,1,0,0,0,3147,3148,5,27,0,0,3148,491,1,0,0,
        0,3149,3150,5,244,0,0,3150,3151,5,26,0,0,3151,3156,3,790,395,0,3152,
        3153,5,25,0,0,3153,3155,3,790,395,0,3154,3152,1,0,0,0,3155,3158,
        1,0,0,0,3156,3154,1,0,0,0,3156,3157,1,0,0,0,3157,3159,1,0,0,0,3158,
        3156,1,0,0,0,3159,3160,5,27,0,0,3160,493,1,0,0,0,3161,3162,5,42,
        0,0,3162,3163,3,520,260,0,3163,495,1,0,0,0,3164,3165,5,112,0,0,3165,
        3166,5,161,0,0,3166,3167,3,790,395,0,3167,497,1,0,0,0,3168,3169,
        5,240,0,0,3169,3170,5,289,0,0,3170,3171,3,802,401,0,3171,499,1,0,
        0,0,3172,3173,5,240,0,0,3173,3174,5,161,0,0,3174,3175,3,790,395,
        0,3175,3176,5,289,0,0,3176,3177,3,790,395,0,3177,501,1,0,0,0,3178,
        3179,5,42,0,0,3179,3180,3,536,268,0,3180,503,1,0,0,0,3181,3182,5,
        45,0,0,3182,3183,5,73,0,0,3183,3184,3,790,395,0,3184,3185,3,544,
        272,0,3185,505,1,0,0,0,3186,3187,5,112,0,0,3187,3188,5,73,0,0,3188,
        3189,3,790,395,0,3189,507,1,0,0,0,3190,3191,5,45,0,0,3191,3192,5,
        161,0,0,3192,3193,3,790,395,0,3193,3194,3,562,281,0,3194,509,1,0,
        0,0,3195,3196,3,794,397,0,3196,3198,3,204,102,0,3197,3199,3,512,
        256,0,3198,3197,1,0,0,0,3198,3199,1,0,0,0,3199,3200,1,0,0,0,3200,
        3201,3,514,257,0,3201,511,1,0,0,0,3202,3203,5,134,0,0,3203,3204,
        3,790,395,0,3204,513,1,0,0,0,3205,3207,5,197,0,0,3206,3205,1,0,0,
        0,3206,3207,1,0,0,0,3207,3208,1,0,0,0,3208,3210,5,199,0,0,3209,3206,
        1,0,0,0,3209,3210,1,0,0,0,3210,3213,1,0,0,0,3211,3212,5,98,0,0,3212,
        3214,3,14,7,0,3213,3211,1,0,0,0,3213,3214,1,0,0,0,3214,515,1,0,0,
        0,3215,3217,3,790,395,0,3216,3218,7,9,0,0,3217,3216,1,0,0,0,3217,
        3218,1,0,0,0,3218,517,1,0,0,0,3219,3220,5,228,0,0,3220,3221,5,177,
        0,0,3221,3222,5,26,0,0,3222,3227,3,790,395,0,3223,3224,5,25,0,0,
        3224,3226,3,790,395,0,3225,3223,1,0,0,0,3226,3229,1,0,0,0,3227,3225,
        1,0,0,0,3227,3228,1,0,0,0,3228,3230,1,0,0,0,3229,3227,1,0,0,0,3230,
        3231,5,27,0,0,3231,3259,1,0,0,0,3232,3233,5,216,0,0,3233,3234,5,
        68,0,0,3234,3235,5,26,0,0,3235,3240,3,790,395,0,3236,3237,5,25,0,
        0,3237,3239,3,790,395,0,3238,3236,1,0,0,0,3239,3242,1,0,0,0,3240,
        3238,1,0,0,0,3240,3241,1,0,0,0,3241,3243,1,0,0,0,3242,3240,1,0,0,
        0,3243,3244,5,27,0,0,3244,3259,1,0,0,0,3245,3246,5,211,0,0,3246,
        3247,5,68,0,0,3247,3248,5,26,0,0,3248,3253,3,516,258,0,3249,3250,
        5,25,0,0,3250,3252,3,516,258,0,3251,3249,1,0,0,0,3252,3255,1,0,0,
        0,3253,3251,1,0,0,0,3253,3254,1,0,0,0,3254,3256,1,0,0,0,3255,3253,
        1,0,0,0,3256,3257,5,27,0,0,3257,3259,1,0,0,0,3258,3219,1,0,0,0,3258,
        3232,1,0,0,0,3258,3245,1,0,0,0,3259,519,1,0,0,0,3260,3261,5,161,
        0,0,3261,3262,3,790,395,0,3262,3263,3,522,261,0,3263,3264,5,205,
        0,0,3264,3265,5,26,0,0,3265,3270,3,794,397,0,3266,3267,5,25,0,0,
        3267,3269,3,794,397,0,3268,3266,1,0,0,0,3269,3272,1,0,0,0,3270,3268,
        1,0,0,0,3270,3271,1,0,0,0,3271,3273,1,0,0,0,3272,3270,1,0,0,0,3273,
        3286,5,27,0,0,3274,3275,5,86,0,0,3275,3276,5,26,0,0,3276,3281,3,
        794,397,0,3277,3278,5,25,0,0,3278,3280,3,794,397,0,3279,3277,1,0,
        0,0,3280,3283,1,0,0,0,3281,3279,1,0,0,0,3281,3282,1,0,0,0,3282,3284,
        1,0,0,0,3283,3281,1,0,0,0,3284,3285,5,27,0,0,3285,3287,1,0,0,0,3286,
        3274,1,0,0,0,3286,3287,1,0,0,0,3287,3289,1,0,0,0,3288,3290,3,530,
        265,0,3289,3288,1,0,0,0,3289,3290,1,0,0,0,3290,521,1,0,0,0,3291,
        3294,3,524,262,0,3292,3294,3,526,263,0,3293,3291,1,0,0,0,3293,3292,
        1,0,0,0,3294,3297,1,0,0,0,3295,3296,5,306,0,0,3296,3298,3,528,264,
        0,3297,3295,1,0,0,0,3297,3298,1,0,0,0,3298,523,1,0,0,0,3299,3301,
        5,146,0,0,3300,3302,5,299,0,0,3301,3300,1,0,0,0,3301,3302,1,0,0,
        0,3302,3304,1,0,0,0,3303,3305,7,16,0,0,3304,3303,1,0,0,0,3304,3305,
        1,0,0,0,3305,525,1,0,0,0,3306,3307,5,184,0,0,3307,527,1,0,0,0,3308,
        3309,3,790,395,0,3309,529,1,0,0,0,3310,3311,5,315,0,0,3311,3312,
        5,26,0,0,3312,3317,3,532,266,0,3313,3314,5,25,0,0,3314,3316,3,532,
        266,0,3315,3313,1,0,0,0,3316,3319,1,0,0,0,3317,3315,1,0,0,0,3317,
        3318,1,0,0,0,3318,3321,1,0,0,0,3319,3317,1,0,0,0,3320,3322,5,25,
        0,0,3321,3320,1,0,0,0,3321,3322,1,0,0,0,3322,3323,1,0,0,0,3323,3324,
        5,27,0,0,3324,531,1,0,0,0,3325,3326,3,790,395,0,3326,3327,5,2,0,
        0,3327,3328,3,534,267,0,3328,533,1,0,0,0,3329,3334,3,818,409,0,3330,
        3334,5,319,0,0,3331,3334,3,854,427,0,3332,3334,3,850,425,0,3333,
        3329,1,0,0,0,3333,3330,1,0,0,0,3333,3331,1,0,0,0,3333,3332,1,0,0,
        0,3334,535,1,0,0,0,3335,3336,5,73,0,0,3336,3337,3,790,395,0,3337,
        3338,5,315,0,0,3338,3339,5,26,0,0,3339,3340,3,538,269,0,3340,3341,
        5,27,0,0,3341,537,1,0,0,0,3342,3347,3,540,270,0,3343,3344,5,25,0,
        0,3344,3346,3,540,270,0,3345,3343,1,0,0,0,3346,3349,1,0,0,0,3347,
        3345,1,0,0,0,3347,3348,1,0,0,0,3348,539,1,0,0,0,3349,3347,1,0,0,
        0,3350,3351,3,790,395,0,3351,3352,5,2,0,0,3352,3353,3,542,271,0,
        3353,541,1,0,0,0,3354,3355,3,14,7,0,3355,543,1,0,0,0,3356,3363,5,
        108,0,0,3357,3358,5,267,0,0,3358,3359,5,26,0,0,3359,3360,3,538,269,
        0,3360,3361,5,27,0,0,3361,3363,1,0,0,0,3362,3356,1,0,0,0,3362,3357,
        1,0,0,0,3363,545,1,0,0,0,3364,3365,3,790,395,0,3365,3366,5,2,0,0,
        3366,3367,3,548,274,0,3367,547,1,0,0,0,3368,3381,3,772,386,0,3369,
        3381,5,319,0,0,3370,3381,3,854,427,0,3371,3381,3,558,279,0,3372,
        3373,3,14,7,0,3373,3374,5,205,0,0,3374,3377,3,790,395,0,3375,3376,
        5,51,0,0,3376,3378,7,17,0,0,3377,3375,1,0,0,0,3377,3378,1,0,0,0,
        3378,3381,1,0,0,0,3379,3381,3,850,425,0,3380,3368,1,0,0,0,3380,3369,
        1,0,0,0,3380,3370,1,0,0,0,3380,3371,1,0,0,0,3380,3372,1,0,0,0,3380,
        3379,1,0,0,0,3381,549,1,0,0,0,3382,3383,5,134,0,0,3383,3384,3,790,
        395,0,3384,3385,3,552,276,0,3385,551,1,0,0,0,3386,3395,5,26,0,0,
        3387,3392,3,554,277,0,3388,3389,5,25,0,0,3389,3391,3,554,277,0,3390,
        3388,1,0,0,0,3391,3394,1,0,0,0,3392,3390,1,0,0,0,3392,3393,1,0,0,
        0,3393,3396,1,0,0,0,3394,3392,1,0,0,0,3395,3387,1,0,0,0,3395,3396,
        1,0,0,0,3396,3397,1,0,0,0,3397,3398,5,27,0,0,3398,553,1,0,0,0,3399,
        3400,3,790,395,0,3400,3401,5,2,0,0,3401,3402,3,556,278,0,3402,555,
        1,0,0,0,3403,3406,5,319,0,0,3404,3406,3,854,427,0,3405,3403,1,0,
        0,0,3405,3404,1,0,0,0,3406,557,1,0,0,0,3407,3408,5,26,0,0,3408,3413,
        3,560,280,0,3409,3410,5,25,0,0,3410,3412,3,560,280,0,3411,3409,1,
        0,0,0,3412,3415,1,0,0,0,3413,3411,1,0,0,0,3413,3414,1,0,0,0,3414,
        3416,1,0,0,0,3415,3413,1,0,0,0,3416,3417,5,27,0,0,3417,3420,1,0,
        0,0,3418,3420,3,560,280,0,3419,3407,1,0,0,0,3419,3418,1,0,0,0,3420,
        559,1,0,0,0,3421,3422,5,26,0,0,3422,3427,3,142,71,0,3423,3424,5,
        25,0,0,3424,3426,3,142,71,0,3425,3423,1,0,0,0,3426,3429,1,0,0,0,
        3427,3425,1,0,0,0,3427,3428,1,0,0,0,3428,3430,1,0,0,0,3429,3427,
        1,0,0,0,3430,3431,5,27,0,0,3431,561,1,0,0,0,3432,3436,3,488,244,
        0,3433,3436,3,490,245,0,3434,3436,3,492,246,0,3435,3432,1,0,0,0,
        3435,3433,1,0,0,0,3435,3434,1,0,0,0,3436,563,1,0,0,0,3437,3442,5,
        112,0,0,3438,3443,5,280,0,0,3439,3443,5,283,0,0,3440,3441,5,131,
        0,0,3441,3443,5,280,0,0,3442,3438,1,0,0,0,3442,3439,1,0,0,0,3442,
        3440,1,0,0,0,3443,3446,1,0,0,0,3444,3445,5,154,0,0,3445,3447,5,128,
        0,0,3446,3444,1,0,0,0,3446,3447,1,0,0,0,3447,3448,1,0,0,0,3448,3449,
        3,646,323,0,3449,565,1,0,0,0,3450,3451,5,87,0,0,3451,3452,5,305,
        0,0,3452,3454,3,576,288,0,3453,3455,3,578,289,0,3454,3453,1,0,0,
        0,3454,3455,1,0,0,0,3455,567,1,0,0,0,3456,3457,5,45,0,0,3457,3458,
        5,305,0,0,3458,3466,3,576,288,0,3459,3461,5,315,0,0,3460,3459,1,
        0,0,0,3460,3461,1,0,0,0,3461,3462,1,0,0,0,3462,3467,3,578,289,0,
        3463,3464,5,240,0,0,3464,3465,5,289,0,0,3465,3467,3,576,288,0,3466,
        3460,1,0,0,0,3466,3463,1,0,0,0,3467,569,1,0,0,0,3468,3469,5,87,0,
        0,3469,3470,5,148,0,0,3470,3484,3,576,288,0,3471,3472,5,315,0,0,
        3472,3473,5,305,0,0,3473,3478,3,576,288,0,3474,3475,5,25,0,0,3475,
        3477,3,576,288,0,3476,3474,1,0,0,0,3477,3480,1,0,0,0,3478,3476,1,
        0,0,0,3478,3479,1,0,0,0,3479,3482,1,0,0,0,3480,3478,1,0,0,0,3481,
        3483,5,25,0,0,3482,3481,1,0,0,0,3482,3483,1,0,0,0,3483,3485,1,0,
        0,0,3484,3471,1,0,0,0,3484,3485,1,0,0,0,3485,571,1,0,0,0,3486,3487,
        5,45,0,0,3487,3488,5,148,0,0,3488,3505,3,576,288,0,3489,3490,7,18,
        0,0,3490,3491,5,305,0,0,3491,3496,3,576,288,0,3492,3493,5,25,0,0,
        3493,3495,3,576,288,0,3494,3492,1,0,0,0,3495,3498,1,0,0,0,3496,3494,
        1,0,0,0,3496,3497,1,0,0,0,3497,3500,1,0,0,0,3498,3496,1,0,0,0,3499,
        3501,5,25,0,0,3500,3499,1,0,0,0,3500,3501,1,0,0,0,3501,3506,1,0,
        0,0,3502,3503,5,240,0,0,3503,3504,5,289,0,0,3504,3506,3,576,288,
        0,3505,3489,1,0,0,0,3505,3502,1,0,0,0,3506,573,1,0,0,0,3507,3508,
        5,112,0,0,3508,3511,7,19,0,0,3509,3510,5,154,0,0,3510,3512,5,128,
        0,0,3511,3509,1,0,0,0,3511,3512,1,0,0,0,3512,3513,1,0,0,0,3513,3518,
        3,576,288,0,3514,3515,5,25,0,0,3515,3517,3,576,288,0,3516,3514,1,
        0,0,0,3517,3520,1,0,0,0,3518,3516,1,0,0,0,3518,3519,1,0,0,0,3519,
        3522,1,0,0,0,3520,3518,1,0,0,0,3521,3523,5,25,0,0,3522,3521,1,0,
        0,0,3522,3523,1,0,0,0,3523,575,1,0,0,0,3524,3527,3,792,396,0,3525,
        3527,3,144,72,0,3526,3524,1,0,0,0,3526,3525,1,0,0,0,3527,577,1,0,
        0,0,3528,3530,5,117,0,0,3529,3528,1,0,0,0,3529,3530,1,0,0,0,3530,
        3531,1,0,0,0,3531,3532,5,218,0,0,3532,3533,3,14,7,0,3533,579,1,0,
        0,0,3534,3535,5,147,0,0,3535,3536,3,588,294,0,3536,3537,5,205,0,
        0,3537,3542,3,794,397,0,3538,3539,5,25,0,0,3539,3541,3,794,397,0,
        3540,3538,1,0,0,0,3541,3544,1,0,0,0,3542,3540,1,0,0,0,3542,3543,
        1,0,0,0,3543,3545,1,0,0,0,3544,3542,1,0,0,0,3545,3546,5,289,0,0,
        3546,3551,3,576,288,0,3547,3548,5,25,0,0,3548,3550,3,576,288,0,3549,
        3547,1,0,0,0,3550,3553,1,0,0,0,3551,3549,1,0,0,0,3551,3552,1,0,0,
        0,3552,3555,1,0,0,0,3553,3551,1,0,0,0,3554,3556,5,25,0,0,3555,3554,
        1,0,0,0,3555,3556,1,0,0,0,3556,3560,1,0,0,0,3557,3558,5,315,0,0,
        3558,3559,5,147,0,0,3559,3561,5,208,0,0,3560,3557,1,0,0,0,3560,3561,
        1,0,0,0,3561,581,1,0,0,0,3562,3566,5,253,0,0,3563,3564,5,147,0,0,
        3564,3565,5,208,0,0,3565,3567,5,140,0,0,3566,3563,1,0,0,0,3566,3567,
        1,0,0,0,3567,3568,1,0,0,0,3568,3569,3,588,294,0,3569,3570,5,205,
        0,0,3570,3575,3,794,397,0,3571,3572,5,25,0,0,3572,3574,3,794,397,
        0,3573,3571,1,0,0,0,3574,3577,1,0,0,0,3575,3573,1,0,0,0,3575,3576,
        1,0,0,0,3576,3578,1,0,0,0,3577,3575,1,0,0,0,3578,3579,5,142,0,0,
        3579,3584,3,576,288,0,3580,3581,5,25,0,0,3581,3583,3,576,288,0,3582,
        3580,1,0,0,0,3583,3586,1,0,0,0,3584,3582,1,0,0,0,3584,3585,1,0,0,
        0,3585,583,1,0,0,0,3586,3584,1,0,0,0,3587,3612,5,83,0,0,3588,3612,
        5,183,0,0,3589,3612,5,167,0,0,3590,3612,5,185,0,0,3591,3612,5,112,
        0,0,3592,3612,5,147,0,0,3593,3594,5,192,0,0,3594,3612,7,20,0,0,3595,
        3596,7,21,0,0,3596,3612,5,258,0,0,3597,3598,7,22,0,0,3598,3612,5,
        262,0,0,3599,3601,5,265,0,0,3600,3602,7,23,0,0,3601,3600,1,0,0,0,
        3601,3602,1,0,0,0,3602,3612,1,0,0,0,3603,3605,7,24,0,0,3604,3606,
        5,180,0,0,3605,3604,1,0,0,0,3605,3606,1,0,0,0,3606,3612,1,0,0,0,
        3607,3609,5,87,0,0,3608,3610,7,25,0,0,3609,3608,1,0,0,0,3609,3610,
        1,0,0,0,3610,3612,1,0,0,0,3611,3587,1,0,0,0,3611,3588,1,0,0,0,3611,
        3589,1,0,0,0,3611,3590,1,0,0,0,3611,3591,1,0,0,0,3611,3592,1,0,0,
        0,3611,3593,1,0,0,0,3611,3595,1,0,0,0,3611,3597,1,0,0,0,3611,3599,
        1,0,0,0,3611,3603,1,0,0,0,3611,3607,1,0,0,0,3612,585,1,0,0,0,3613,
        3616,3,584,292,0,3614,3616,5,319,0,0,3615,3613,1,0,0,0,3615,3614,
        1,0,0,0,3616,587,1,0,0,0,3617,3622,3,586,293,0,3618,3619,5,25,0,
        0,3619,3621,3,586,293,0,3620,3618,1,0,0,0,3621,3624,1,0,0,0,3622,
        3620,1,0,0,0,3622,3623,1,0,0,0,3623,3626,1,0,0,0,3624,3622,1,0,0,
        0,3625,3627,5,25,0,0,3626,3625,1,0,0,0,3626,3627,1,0,0,0,3627,3633,
        1,0,0,0,3628,3630,5,44,0,0,3629,3631,5,229,0,0,3630,3629,1,0,0,0,
        3630,3631,1,0,0,0,3631,3633,1,0,0,0,3632,3617,1,0,0,0,3632,3628,
        1,0,0,0,3633,589,1,0,0,0,3634,3635,5,87,0,0,3635,3636,5,245,0,0,
        3636,3637,5,224,0,0,3637,3638,3,642,321,0,3638,3639,3,456,228,0,
        3639,591,1,0,0,0,3640,3641,5,45,0,0,3641,3642,5,245,0,0,3642,3643,
        5,224,0,0,3643,3644,3,642,321,0,3644,3649,3,594,297,0,3645,3646,
        5,25,0,0,3646,3648,3,594,297,0,3647,3645,1,0,0,0,3648,3651,1,0,0,
        0,3649,3647,1,0,0,0,3649,3650,1,0,0,0,3650,593,1,0,0,0,3651,3649,
        1,0,0,0,3652,3655,3,490,245,0,3653,3655,3,492,246,0,3654,3652,1,
        0,0,0,3654,3653,1,0,0,0,3655,595,1,0,0,0,3656,3657,5,112,0,0,3657,
        3658,5,245,0,0,3658,3659,5,224,0,0,3659,3660,3,642,321,0,3660,597,
        1,0,0,0,3661,3662,5,87,0,0,3662,3663,5,245,0,0,3663,3664,5,224,0,
        0,3664,3665,5,75,0,0,3665,3666,3,642,321,0,3666,3667,3,456,228,0,
        3667,599,1,0,0,0,3668,3669,5,45,0,0,3669,3670,5,245,0,0,3670,3671,
        5,224,0,0,3671,3672,5,75,0,0,3672,3673,3,642,321,0,3673,3678,3,602,
        301,0,3674,3675,5,25,0,0,3675,3677,3,602,301,0,3676,3674,1,0,0,0,
        3677,3680,1,0,0,0,3678,3676,1,0,0,0,3678,3679,1,0,0,0,3679,601,1,
        0,0,0,3680,3678,1,0,0,0,3681,3684,3,490,245,0,3682,3684,3,492,246,
        0,3683,3681,1,0,0,0,3683,3682,1,0,0,0,3684,603,1,0,0,0,3685,3686,
        5,112,0,0,3686,3687,5,245,0,0,3687,3688,5,224,0,0,3688,3689,5,75,
        0,0,3689,3690,3,642,321,0,3690,605,1,0,0,0,3691,3692,5,87,0,0,3692,
        3693,5,55,0,0,3693,3694,5,243,0,0,3694,3695,3,642,321,0,3695,3696,
        5,140,0,0,3696,3701,3,608,304,0,3697,3698,5,25,0,0,3698,3700,3,608,
        304,0,3699,3697,1,0,0,0,3700,3703,1,0,0,0,3701,3699,1,0,0,0,3701,
        3702,1,0,0,0,3702,3704,1,0,0,0,3703,3701,1,0,0,0,3704,3705,5,315,
        0,0,3705,3706,5,26,0,0,3706,3707,3,610,305,0,3707,3708,5,27,0,0,
        3708,607,1,0,0,0,3709,3710,3,642,321,0,3710,3711,3,864,432,0,3711,
        609,1,0,0,0,3712,3717,3,612,306,0,3713,3714,5,25,0,0,3714,3716,3,
        612,306,0,3715,3713,1,0,0,0,3716,3719,1,0,0,0,3717,3715,1,0,0,0,
        3717,3718,1,0,0,0,3718,611,1,0,0,0,3719,3717,1,0,0,0,3720,3721,3,
        790,395,0,3721,3722,5,2,0,0,3722,3723,5,319,0,0,3723,613,1,0,0,0,
        3724,3725,5,45,0,0,3725,3726,5,55,0,0,3726,3727,5,243,0,0,3727,3728,
        3,642,321,0,3728,3733,3,616,308,0,3729,3730,5,25,0,0,3730,3732,3,
        616,308,0,3731,3729,1,0,0,0,3732,3735,1,0,0,0,3733,3731,1,0,0,0,
        3733,3734,1,0,0,0,3734,615,1,0,0,0,3735,3733,1,0,0,0,3736,3737,3,
        618,309,0,3737,617,1,0,0,0,3738,3739,5,267,0,0,3739,3740,5,26,0,
        0,3740,3741,3,610,305,0,3741,3742,5,27,0,0,3742,619,1,0,0,0,3743,
        3744,5,112,0,0,3744,3745,5,55,0,0,3745,3746,5,243,0,0,3746,3748,
        3,642,321,0,3747,3749,5,70,0,0,3748,3747,1,0,0,0,3748,3749,1,0,0,
        0,3749,621,1,0,0,0,3750,3755,3,146,73,0,3751,3752,5,25,0,0,3752,
        3754,3,146,73,0,3753,3751,1,0,0,0,3754,3757,1,0,0,0,3755,3753,1,
        0,0,0,3755,3756,1,0,0,0,3756,623,1,0,0,0,3757,3755,1,0,0,0,3758,
        3759,5,101,0,0,3759,3760,7,26,0,0,3760,3761,3,144,72,0,3761,3763,
        5,26,0,0,3762,3764,3,622,311,0,3763,3762,1,0,0,0,3763,3764,1,0,0,
        0,3764,3765,1,0,0,0,3765,3766,5,27,0,0,3766,3767,5,51,0,0,3767,3768,
        3,626,313,0,3768,3769,5,118,0,0,3769,3770,5,101,0,0,3770,625,1,0,
        0,0,3771,3773,5,23,0,0,3772,3771,1,0,0,0,3773,3776,1,0,0,0,3774,
        3772,1,0,0,0,3774,3775,1,0,0,0,3775,3795,1,0,0,0,3776,3774,1,0,0,
        0,3777,3786,3,12,6,0,3778,3780,5,23,0,0,3779,3778,1,0,0,0,3780,3781,
        1,0,0,0,3781,3779,1,0,0,0,3781,3782,1,0,0,0,3782,3783,1,0,0,0,3783,
        3785,3,12,6,0,3784,3779,1,0,0,0,3785,3788,1,0,0,0,3786,3784,1,0,
        0,0,3786,3787,1,0,0,0,3787,3792,1,0,0,0,3788,3786,1,0,0,0,3789,3791,
        5,23,0,0,3790,3789,1,0,0,0,3791,3794,1,0,0,0,3792,3790,1,0,0,0,3792,
        3793,1,0,0,0,3793,3796,1,0,0,0,3794,3792,1,0,0,0,3795,3777,1,0,0,
        0,3795,3796,1,0,0,0,3796,627,1,0,0,0,3797,3799,5,123,0,0,3798,3797,
        1,0,0,0,3798,3799,1,0,0,0,3799,3800,1,0,0,0,3800,3801,5,154,0,0,
        3801,3802,3,14,7,0,3802,3805,3,222,111,0,3803,3804,5,114,0,0,3804,
        3806,3,222,111,0,3805,3803,1,0,0,0,3805,3806,1,0,0,0,3806,629,1,
        0,0,0,3807,3809,5,123,0,0,3808,3807,1,0,0,0,3808,3809,1,0,0,0,3809,
        3811,1,0,0,0,3810,3812,5,215,0,0,3811,3810,1,0,0,0,3811,3812,1,0,
        0,0,3812,3813,1,0,0,0,3813,3814,5,140,0,0,3814,3815,3,144,72,0,3815,
        3816,5,159,0,0,3816,3817,3,14,7,0,3817,3820,3,222,111,0,3818,3819,
        5,114,0,0,3819,3821,3,222,111,0,3820,3818,1,0,0,0,3820,3821,1,0,
        0,0,3821,631,1,0,0,0,3822,3823,3,816,408,0,3823,3824,5,24,0,0,3824,
        3826,1,0,0,0,3825,3822,1,0,0,0,3825,3826,1,0,0,0,3826,3828,1,0,0,
        0,3827,3829,5,30,0,0,3828,3827,1,0,0,0,3828,3829,1,0,0,0,3829,3860,
        1,0,0,0,3830,3861,3,634,317,0,3831,3832,3,796,398,0,3832,3844,5,
        26,0,0,3833,3838,3,636,318,0,3834,3835,5,25,0,0,3835,3837,3,636,
        318,0,3836,3834,1,0,0,0,3837,3840,1,0,0,0,3838,3836,1,0,0,0,3838,
        3839,1,0,0,0,3839,3842,1,0,0,0,3840,3838,1,0,0,0,3841,3843,5,25,
        0,0,3842,3841,1,0,0,0,3842,3843,1,0,0,0,3843,3845,1,0,0,0,3844,3833,
        1,0,0,0,3844,3845,1,0,0,0,3845,3846,1,0,0,0,3846,3847,5,27,0,0,3847,
        3861,1,0,0,0,3848,3854,3,144,72,0,3849,3851,5,26,0,0,3850,3852,3,
        112,56,0,3851,3850,1,0,0,0,3851,3852,1,0,0,0,3852,3853,1,0,0,0,3853,
        3855,5,27,0,0,3854,3849,1,0,0,0,3854,3855,1,0,0,0,3855,3858,1,0,
        0,0,3856,3857,5,310,0,0,3857,3859,3,812,406,0,3858,3856,1,0,0,0,
        3858,3859,1,0,0,0,3859,3861,1,0,0,0,3860,3830,1,0,0,0,3860,3831,
        1,0,0,0,3860,3848,1,0,0,0,3861,3863,1,0,0,0,3862,3864,3,638,319,
        0,3863,3862,1,0,0,0,3863,3864,1,0,0,0,3864,633,1,0,0,0,3865,3868,
        3,824,412,0,3866,3867,5,310,0,0,3867,3869,3,812,406,0,3868,3866,
        1,0,0,0,3868,3869,1,0,0,0,3869,635,1,0,0,0,3870,3872,5,30,0,0,3871,
        3870,1,0,0,0,3871,3872,1,0,0,0,3872,3873,1,0,0,0,3873,3876,3,128,
        64,0,3874,3875,5,310,0,0,3875,3877,3,812,406,0,3876,3874,1,0,0,0,
        3876,3877,1,0,0,0,3877,637,1,0,0,0,3878,3891,5,315,0,0,3879,3892,
        3,640,320,0,3880,3881,5,26,0,0,3881,3886,3,640,320,0,3882,3883,5,
        25,0,0,3883,3885,3,640,320,0,3884,3882,1,0,0,0,3885,3888,1,0,0,0,
        3886,3884,1,0,0,0,3886,3887,1,0,0,0,3887,3889,1,0,0,0,3888,3886,
        1,0,0,0,3889,3890,5,27,0,0,3890,3892,1,0,0,0,3891,3879,1,0,0,0,3891,
        3880,1,0,0,0,3892,639,1,0,0,0,3893,3912,3,806,403,0,3894,3910,5,
        2,0,0,3895,3911,3,160,80,0,3896,3897,5,26,0,0,3897,3902,3,160,80,
        0,3898,3899,5,25,0,0,3899,3901,3,160,80,0,3900,3898,1,0,0,0,3901,
        3904,1,0,0,0,3902,3900,1,0,0,0,3902,3903,1,0,0,0,3903,3906,1,0,0,
        0,3904,3902,1,0,0,0,3905,3907,5,25,0,0,3906,3905,1,0,0,0,3906,3907,
        1,0,0,0,3907,3908,1,0,0,0,3908,3909,5,27,0,0,3909,3911,1,0,0,0,3910,
        3895,1,0,0,0,3910,3896,1,0,0,0,3911,3913,1,0,0,0,3912,3894,1,0,0,
        0,3912,3913,1,0,0,0,3913,3939,1,0,0,0,3914,3916,7,27,0,0,3915,3917,
        5,2,0,0,3916,3915,1,0,0,0,3916,3917,1,0,0,0,3917,3918,1,0,0,0,3918,
        3939,3,204,102,0,3919,3921,5,262,0,0,3920,3922,5,2,0,0,3921,3920,
        1,0,0,0,3921,3922,1,0,0,0,3922,3923,1,0,0,0,3923,3932,5,26,0,0,3924,
        3929,3,164,82,0,3925,3926,5,25,0,0,3926,3928,3,164,82,0,3927,3925,
        1,0,0,0,3928,3931,1,0,0,0,3929,3927,1,0,0,0,3929,3930,1,0,0,0,3930,
        3933,1,0,0,0,3931,3929,1,0,0,0,3932,3924,1,0,0,0,3932,3933,1,0,0,
        0,3933,3935,1,0,0,0,3934,3936,5,25,0,0,3935,3934,1,0,0,0,3935,3936,
        1,0,0,0,3936,3937,1,0,0,0,3937,3939,5,27,0,0,3938,3893,1,0,0,0,3938,
        3914,1,0,0,0,3938,3919,1,0,0,0,3939,641,1,0,0,0,3940,3941,3,816,
        408,0,3941,3942,5,24,0,0,3942,3944,1,0,0,0,3943,3940,1,0,0,0,3943,
        3944,1,0,0,0,3944,3945,1,0,0,0,3945,3946,3,822,411,0,3946,643,1,
        0,0,0,3947,3953,3,642,321,0,3948,3950,5,30,0,0,3949,3948,1,0,0,0,
        3949,3950,1,0,0,0,3950,3951,1,0,0,0,3951,3953,3,144,72,0,3952,3947,
        1,0,0,0,3952,3949,1,0,0,0,3953,645,1,0,0,0,3954,3956,3,644,322,0,
        3955,3957,3,638,319,0,3956,3955,1,0,0,0,3956,3957,1,0,0,0,3957,647,
        1,0,0,0,3958,3962,3,646,323,0,3959,3960,5,120,0,0,3960,3961,5,68,
        0,0,3961,3963,3,114,57,0,3962,3959,1,0,0,0,3962,3963,1,0,0,0,3963,
        649,1,0,0,0,3964,3965,5,102,0,0,3965,3966,5,142,0,0,3966,3970,3,
        646,323,0,3967,3971,3,866,433,0,3968,3969,5,205,0,0,3969,3971,3,
        368,184,0,3970,3967,1,0,0,0,3970,3968,1,0,0,0,3970,3971,1,0,0,0,
        3971,3973,1,0,0,0,3972,3974,3,362,181,0,3973,3972,1,0,0,0,3973,3974,
        1,0,0,0,3974,651,1,0,0,0,3975,3976,5,302,0,0,3976,3984,3,646,323,
        0,3977,3978,5,267,0,0,3978,3980,3,654,327,0,3979,3981,3,866,433,
        0,3980,3979,1,0,0,0,3980,3981,1,0,0,0,3981,3985,1,0,0,0,3982,3983,
        5,205,0,0,3983,3985,3,368,184,0,3984,3977,1,0,0,0,3984,3982,1,0,
        0,0,3985,3987,1,0,0,0,3986,3988,3,362,181,0,3987,3986,1,0,0,0,3987,
        3988,1,0,0,0,3988,653,1,0,0,0,3989,3992,3,656,328,0,3990,3992,3,
        662,331,0,3991,3989,1,0,0,0,3991,3990,1,0,0,0,3992,655,1,0,0,0,3993,
        3998,3,658,329,0,3994,3995,5,25,0,0,3995,3997,3,658,329,0,3996,3994,
        1,0,0,0,3997,4000,1,0,0,0,3998,3996,1,0,0,0,3998,3999,1,0,0,0,3999,
        657,1,0,0,0,4000,3998,1,0,0,0,4001,4002,3,660,330,0,4002,4003,5,
        2,0,0,4003,4004,3,14,7,0,4004,659,1,0,0,0,4005,4006,3,120,60,0,4006,
        661,1,0,0,0,4007,4008,3,664,332,0,4008,4009,5,2,0,0,4009,4010,5,
        26,0,0,4010,4011,3,378,189,0,4011,4012,5,27,0,0,4012,663,1,0,0,0,
        4013,4014,5,26,0,0,4014,4019,3,660,330,0,4015,4016,5,25,0,0,4016,
        4018,3,660,330,0,4017,4015,1,0,0,0,4018,4021,1,0,0,0,4019,4017,1,
        0,0,0,4019,4020,1,0,0,0,4020,4022,1,0,0,0,4021,4019,1,0,0,0,4022,
        4023,5,27,0,0,4023,665,1,0,0,0,4024,4025,5,87,0,0,4025,4029,5,290,
        0,0,4026,4027,5,154,0,0,4027,4028,5,197,0,0,4028,4030,5,128,0,0,
        4029,4026,1,0,0,0,4029,4030,1,0,0,0,4030,4031,1,0,0,0,4031,4033,
        3,712,356,0,4032,4034,3,668,334,0,4033,4032,1,0,0,0,4033,4034,1,
        0,0,0,4034,4036,1,0,0,0,4035,4037,3,672,336,0,4036,4035,1,0,0,0,
        4036,4037,1,0,0,0,4037,667,1,0,0,0,4038,4039,5,26,0,0,4039,4044,
        3,670,335,0,4040,4041,5,25,0,0,4041,4043,3,670,335,0,4042,4040,1,
        0,0,0,4043,4046,1,0,0,0,4044,4042,1,0,0,0,4044,4045,1,0,0,0,4045,
        4047,1,0,0,0,4046,4044,1,0,0,0,4047,4048,5,27,0,0,4048,669,1,0,0,
        0,4049,4050,3,680,340,0,4050,671,1,0,0,0,4051,4052,5,315,0,0,4052,
        4053,5,26,0,0,4053,4054,3,698,349,0,4054,4055,5,27,0,0,4055,673,
        1,0,0,0,4056,4057,5,45,0,0,4057,4060,5,290,0,0,4058,4059,5,154,0,
        0,4059,4061,5,128,0,0,4060,4058,1,0,0,0,4060,4061,1,0,0,0,4061,4062,
        1,0,0,0,4062,4063,3,712,356,0,4063,4068,3,676,338,0,4064,4065,5,
        25,0,0,4065,4067,3,676,338,0,4066,4064,1,0,0,0,4067,4070,1,0,0,0,
        4068,4066,1,0,0,0,4068,4069,1,0,0,0,4069,675,1,0,0,0,4070,4068,1,
        0,0,0,4071,4077,3,678,339,0,4072,4077,3,682,341,0,4073,4077,3,686,
        343,0,4074,4077,3,692,346,0,4075,4077,3,694,347,0,4076,4071,1,0,
        0,0,4076,4072,1,0,0,0,4076,4073,1,0,0,0,4076,4074,1,0,0,0,4076,4075,
        1,0,0,0,4077,677,1,0,0,0,4078,4079,5,42,0,0,4079,4080,3,680,340,
        0,4080,679,1,0,0,0,4081,4082,5,85,0,0,4082,4084,3,790,395,0,4083,
        4085,3,704,352,0,4084,4083,1,0,0,0,4084,4085,1,0,0,0,4085,681,1,
        0,0,0,4086,4087,5,45,0,0,4087,4088,5,85,0,0,4088,4089,3,714,357,
        0,4089,4090,3,684,342,0,4090,683,1,0,0,0,4091,4094,3,688,344,0,4092,
        4094,3,690,345,0,4093,4091,1,0,0,0,4093,4092,1,0,0,0,4094,685,1,
        0,0,0,4095,4096,5,112,0,0,4096,4097,5,85,0,0,4097,4098,3,714,357,
        0,4098,687,1,0,0,0,4099,4100,5,267,0,0,4100,4101,5,26,0,0,4101,4102,
        3,706,353,0,4102,4103,5,27,0,0,4103,689,1,0,0,0,4104,4105,5,244,
        0,0,4105,4106,5,26,0,0,4106,4111,3,790,395,0,4107,4108,5,25,0,0,
        4108,4110,3,790,395,0,4109,4107,1,0,0,0,4110,4113,1,0,0,0,4111,4109,
        1,0,0,0,4111,4112,1,0,0,0,4112,4114,1,0,0,0,4113,4111,1,0,0,0,4114,
        4115,5,27,0,0,4115,691,1,0,0,0,4116,4117,5,267,0,0,4117,4118,5,26,
        0,0,4118,4119,3,698,349,0,4119,4120,5,27,0,0,4120,693,1,0,0,0,4121,
        4122,5,244,0,0,4122,4123,5,26,0,0,4123,4128,3,790,395,0,4124,4125,
        5,25,0,0,4125,4127,3,808,404,0,4126,4124,1,0,0,0,4127,4130,1,0,0,
        0,4128,4126,1,0,0,0,4128,4129,1,0,0,0,4129,4131,1,0,0,0,4130,4128,
        1,0,0,0,4131,4132,5,27,0,0,4132,695,1,0,0,0,4133,4134,5,112,0,0,
        4134,4137,5,290,0,0,4135,4136,5,154,0,0,4136,4138,5,128,0,0,4137,
        4135,1,0,0,0,4137,4138,1,0,0,0,4138,4139,1,0,0,0,4139,4140,3,712,
        356,0,4140,697,1,0,0,0,4141,4146,3,700,350,0,4142,4143,5,25,0,0,
        4143,4145,3,700,350,0,4144,4142,1,0,0,0,4145,4148,1,0,0,0,4146,4144,
        1,0,0,0,4146,4147,1,0,0,0,4147,699,1,0,0,0,4148,4146,1,0,0,0,4149,
        4150,3,790,395,0,4150,4151,5,2,0,0,4151,4152,3,702,351,0,4152,701,
        1,0,0,0,4153,4154,3,14,7,0,4154,703,1,0,0,0,4155,4156,5,315,0,0,
        4156,4157,5,26,0,0,4157,4158,3,706,353,0,4158,4159,5,27,0,0,4159,
        705,1,0,0,0,4160,4165,3,708,354,0,4161,4162,5,25,0,0,4162,4164,3,
        708,354,0,4163,4161,1,0,0,0,4164,4167,1,0,0,0,4165,4163,1,0,0,0,
        4165,4166,1,0,0,0,4166,707,1,0,0,0,4167,4165,1,0,0,0,4168,4169,3,
        790,395,0,4169,4170,5,2,0,0,4170,4171,3,710,355,0,4171,709,1,0,0,
        0,4172,4173,3,14,7,0,4173,711,1,0,0,0,4174,4175,3,816,408,0,4175,
        4176,5,24,0,0,4176,4178,1,0,0,0,4177,4174,1,0,0,0,4177,4178,1,0,
        0,0,4178,4179,1,0,0,0,4179,4180,3,790,395,0,4180,713,1,0,0,0,4181,
        4182,3,808,404,0,4182,715,1,0,0,0,4183,4184,5,246,0,0,4184,4188,
        5,200,0,0,4185,4186,5,155,0,0,4186,4188,5,200,0,0,4187,4183,1,0,
        0,0,4187,4185,1,0,0,0,4188,717,1,0,0,0,4189,4190,5,135,0,0,4190,
        4191,5,26,0,0,4191,4192,3,866,433,0,4192,4193,5,27,0,0,4193,719,
        1,0,0,0,4194,4197,3,722,361,0,4195,4197,3,732,366,0,4196,4194,1,
        0,0,0,4196,4195,1,0,0,0,4197,721,1,0,0,0,4198,4199,3,800,400,0,4199,
        723,1,0,0,0,4200,4201,5,314,0,0,4201,4202,3,726,363,0,4202,725,1,
        0,0,0,4203,4208,3,728,364,0,4204,4205,5,25,0,0,4205,4207,3,728,364,
        0,4206,4204,1,0,0,0,4207,4210,1,0,0,0,4208,4206,1,0,0,0,4208,4209,
        1,0,0,0,4209,727,1,0,0,0,4210,4208,1,0,0,0,4211,4212,3,730,365,0,
        4212,4213,5,51,0,0,4213,4214,3,732,366,0,4214,729,1,0,0,0,4215,4216,
        3,722,361,0,4216,731,1,0,0,0,4217,4218,5,26,0,0,4218,4219,3,734,
        367,0,4219,4220,5,27,0,0,4220,733,1,0,0,0,4221,4223,3,736,368,0,
        4222,4221,1,0,0,0,4222,4223,1,0,0,0,4223,4225,1,0,0,0,4224,4226,
        3,738,369,0,4225,4224,1,0,0,0,4225,4226,1,0,0,0,4226,4228,1,0,0,
        0,4227,4229,3,740,370,0,4228,4227,1,0,0,0,4228,4229,1,0,0,0,4229,
        4231,1,0,0,0,4230,4232,3,742,371,0,4231,4230,1,0,0,0,4231,4232,1,
        0,0,0,4232,735,1,0,0,0,4233,4234,3,722,361,0,4234,737,1,0,0,0,4235,
        4237,5,216,0,0,4236,4238,5,80,0,0,4237,4236,1,0,0,0,4237,4238,1,
        0,0,0,4238,4239,1,0,0,0,4239,4240,5,68,0,0,4240,4241,3,130,65,0,
        4241,739,1,0,0,0,4242,4243,3,314,157,0,4243,741,1,0,0,0,4244,4245,
        3,744,372,0,4245,4247,3,746,373,0,4246,4248,3,752,376,0,4247,4246,
        1,0,0,0,4247,4248,1,0,0,0,4248,743,1,0,0,0,4249,4250,7,28,0,0,4250,
        745,1,0,0,0,4251,4254,3,750,375,0,4252,4254,3,748,374,0,4253,4251,
        1,0,0,0,4253,4252,1,0,0,0,4254,747,1,0,0,0,4255,4256,5,66,0,0,4256,
        4257,3,750,375,0,4257,4258,5,47,0,0,4258,4259,3,750,375,0,4259,749,
        1,0,0,0,4260,4261,5,90,0,0,4261,4268,5,258,0,0,4262,4265,3,14,7,
        0,4263,4265,5,296,0,0,4264,4262,1,0,0,0,4264,4263,1,0,0,0,4265,4266,
        1,0,0,0,4266,4268,7,29,0,0,4267,4260,1,0,0,0,4267,4264,1,0,0,0,4268,
        751,1,0,0,0,4269,4270,5,125,0,0,4270,4271,5,90,0,0,4271,4280,5,258,
        0,0,4272,4273,5,125,0,0,4273,4280,5,148,0,0,4274,4275,5,125,0,0,
        4275,4280,5,288,0,0,4276,4277,5,125,0,0,4277,4278,5,196,0,0,4278,
        4280,5,212,0,0,4279,4269,1,0,0,0,4279,4272,1,0,0,0,4279,4274,1,0,
        0,0,4279,4276,1,0,0,0,4280,753,1,0,0,0,4281,4282,5,304,0,0,4282,
        4283,3,816,408,0,4283,755,1,0,0,0,4284,4285,5,26,0,0,4285,4286,3,
        232,116,0,4286,4287,5,27,0,0,4287,4290,1,0,0,0,4288,4290,3,234,117,
        0,4289,4284,1,0,0,0,4289,4288,1,0,0,0,4290,757,1,0,0,0,4291,4292,
        3,148,74,0,4292,4295,5,2,0,0,4293,4296,3,14,7,0,4294,4296,3,756,
        378,0,4295,4293,1,0,0,0,4295,4294,1,0,0,0,4296,759,1,0,0,0,4297,
        4298,5,79,0,0,4298,761,1,0,0,0,4299,4300,5,256,0,0,4300,763,1,0,
        0,0,4301,4306,3,646,323,0,4302,4303,5,26,0,0,4303,4304,3,124,62,
        0,4304,4305,5,27,0,0,4305,4307,1,0,0,0,4306,4302,1,0,0,0,4306,4307,
        1,0,0,0,4307,765,1,0,0,0,4308,4313,3,764,382,0,4309,4310,5,25,0,
        0,4310,4312,3,764,382,0,4311,4309,1,0,0,0,4312,4315,1,0,0,0,4313,
        4311,1,0,0,0,4313,4314,1,0,0,0,4314,4317,1,0,0,0,4315,4313,1,0,0,
        0,4316,4318,5,25,0,0,4317,4316,1,0,0,0,4317,4318,1,0,0,0,4318,767,
        1,0,0,0,4319,4320,5,46,0,0,4320,4321,3,766,383,0,4321,769,1,0,0,
        0,4322,4323,7,30,0,0,4323,771,1,0,0,0,4324,4327,3,770,385,0,4325,
        4327,3,828,414,0,4326,4324,1,0,0,0,4326,4325,1,0,0,0,4327,773,1,
        0,0,0,4328,4336,3,770,385,0,4329,4336,3,846,423,0,4330,4336,3,830,
        415,0,4331,4336,3,834,417,0,4332,4336,3,838,419,0,4333,4336,3,840,
        420,0,4334,4336,3,842,421,0,4335,4328,1,0,0,0,4335,4329,1,0,0,0,
        4335,4330,1,0,0,0,4335,4331,1,0,0,0,4335,4332,1,0,0,0,4335,4333,
        1,0,0,0,4335,4334,1,0,0,0,4336,775,1,0,0,0,4337,4344,3,770,385,0,
        4338,4344,3,846,423,0,4339,4344,3,836,418,0,4340,4344,3,838,419,
        0,4341,4344,3,840,420,0,4342,4344,3,842,421,0,4343,4337,1,0,0,0,
        4343,4338,1,0,0,0,4343,4339,1,0,0,0,4343,4340,1,0,0,0,4343,4341,
        1,0,0,0,4343,4342,1,0,0,0,4344,777,1,0,0,0,4345,4351,3,770,385,0,
        4346,4351,3,846,423,0,4347,4351,3,836,418,0,4348,4351,3,840,420,
        0,4349,4351,3,842,421,0,4350,4345,1,0,0,0,4350,4346,1,0,0,0,4350,
        4347,1,0,0,0,4350,4348,1,0,0,0,4350,4349,1,0,0,0,4351,779,1,0,0,
        0,4352,4361,3,770,385,0,4353,4361,3,846,423,0,4354,4361,3,830,415,
        0,4355,4361,3,832,416,0,4356,4361,3,834,417,0,4357,4361,3,836,418,
        0,4358,4361,3,838,419,0,4359,4361,3,842,421,0,4360,4352,1,0,0,0,
        4360,4353,1,0,0,0,4360,4354,1,0,0,0,4360,4355,1,0,0,0,4360,4356,
        1,0,0,0,4360,4357,1,0,0,0,4360,4358,1,0,0,0,4360,4359,1,0,0,0,4361,
        781,1,0,0,0,4362,4370,3,770,385,0,4363,4370,3,846,423,0,4364,4370,
        3,830,415,0,4365,4370,3,834,417,0,4366,4370,3,838,419,0,4367,4370,
        3,840,420,0,4368,4370,3,842,421,0,4369,4362,1,0,0,0,4369,4363,1,
        0,0,0,4369,4364,1,0,0,0,4369,4365,1,0,0,0,4369,4366,1,0,0,0,4369,
        4367,1,0,0,0,4369,4368,1,0,0,0,4370,783,1,0,0,0,4371,4379,3,770,
        385,0,4372,4379,3,846,423,0,4373,4379,3,832,416,0,4374,4379,3,836,
        418,0,4375,4379,3,838,419,0,4376,4379,3,840,420,0,4377,4379,3,842,
        421,0,4378,4371,1,0,0,0,4378,4372,1,0,0,0,4378,4373,1,0,0,0,4378,
        4374,1,0,0,0,4378,4375,1,0,0,0,4378,4376,1,0,0,0,4378,4377,1,0,0,
        0,4379,785,1,0,0,0,4380,4389,3,770,385,0,4381,4389,3,846,423,0,4382,
        4389,3,830,415,0,4383,4389,3,832,416,0,4384,4389,3,834,417,0,4385,
        4389,3,836,418,0,4386,4389,3,838,419,0,4387,4389,3,840,420,0,4388,
        4380,1,0,0,0,4388,4381,1,0,0,0,4388,4382,1,0,0,0,4388,4383,1,0,0,
        0,4388,4384,1,0,0,0,4388,4385,1,0,0,0,4388,4386,1,0,0,0,4388,4387,
        1,0,0,0,4389,787,1,0,0,0,4390,4393,3,770,385,0,4391,4393,3,844,422,
        0,4392,4390,1,0,0,0,4392,4391,1,0,0,0,4393,789,1,0,0,0,4394,4397,
        3,772,386,0,4395,4397,5,319,0,0,4396,4394,1,0,0,0,4396,4395,1,0,
        0,0,4397,791,1,0,0,0,4398,4401,3,818,409,0,4399,4401,5,319,0,0,4400,
        4398,1,0,0,0,4400,4399,1,0,0,0,4401,793,1,0,0,0,4402,4405,3,774,
        387,0,4403,4405,5,319,0,0,4404,4402,1,0,0,0,4404,4403,1,0,0,0,4405,
        795,1,0,0,0,4406,4409,3,776,388,0,4407,4409,5,319,0,0,4408,4406,
        1,0,0,0,4408,4407,1,0,0,0,4409,797,1,0,0,0,4410,4413,3,778,389,0,
        4411,4413,5,319,0,0,4412,4410,1,0,0,0,4412,4411,1,0,0,0,4413,799,
        1,0,0,0,4414,4417,3,780,390,0,4415,4417,5,319,0,0,4416,4414,1,0,
        0,0,4416,4415,1,0,0,0,4417,801,1,0,0,0,4418,4421,3,782,391,0,4419,
        4421,5,319,0,0,4420,4418,1,0,0,0,4420,4419,1,0,0,0,4421,803,1,0,
        0,0,4422,4425,3,784,392,0,4423,4425,5,319,0,0,4424,4422,1,0,0,0,
        4424,4423,1,0,0,0,4425,805,1,0,0,0,4426,4429,3,786,393,0,4427,4429,
        5,319,0,0,4428,4426,1,0,0,0,4428,4427,1,0,0,0,4429,807,1,0,0,0,4430,
        4433,3,770,385,0,4431,4433,5,319,0,0,4432,4430,1,0,0,0,4432,4431,
        1,0,0,0,4433,809,1,0,0,0,4434,4437,3,788,394,0,4435,4437,5,319,0,
        0,4436,4434,1,0,0,0,4436,4435,1,0,0,0,4437,811,1,0,0,0,4438,4442,
        3,790,395,0,4439,4440,5,228,0,0,4440,4442,5,177,0,0,4441,4438,1,
        0,0,0,4441,4439,1,0,0,0,4442,813,1,0,0,0,4443,4444,3,790,395,0,4444,
        4445,5,24,0,0,4445,4447,1,0,0,0,4446,4443,1,0,0,0,4446,4447,1,0,
        0,0,4447,815,1,0,0,0,4448,4449,3,790,395,0,4449,4450,5,29,0,0,4450,
        4452,1,0,0,0,4451,4448,1,0,0,0,4451,4452,1,0,0,0,4452,4455,1,0,0,
        0,4453,4456,3,116,58,0,4454,4456,5,20,0,0,4455,4453,1,0,0,0,4455,
        4454,1,0,0,0,4456,817,1,0,0,0,4457,4460,3,772,386,0,4458,4460,3,
        848,424,0,4459,4457,1,0,0,0,4459,4458,1,0,0,0,4460,819,1,0,0,0,4461,
        4462,3,792,396,0,4462,4463,5,24,0,0,4463,4465,1,0,0,0,4464,4461,
        1,0,0,0,4464,4465,1,0,0,0,4465,821,1,0,0,0,4466,4468,5,30,0,0,4467,
        4466,1,0,0,0,4467,4468,1,0,0,0,4468,4469,1,0,0,0,4469,4470,3,792,
        396,0,4470,823,1,0,0,0,4471,4474,3,802,401,0,4472,4474,3,848,424,
        0,4473,4471,1,0,0,0,4473,4472,1,0,0,0,4474,825,1,0,0,0,4475,4477,
        5,30,0,0,4476,4475,1,0,0,0,4476,4477,1,0,0,0,4477,4478,1,0,0,0,4478,
        4479,3,824,412,0,4479,827,1,0,0,0,4480,4489,3,846,423,0,4481,4489,
        3,830,415,0,4482,4489,3,832,416,0,4483,4489,3,834,417,0,4484,4489,
        3,836,418,0,4485,4489,3,838,419,0,4486,4489,3,840,420,0,4487,4489,
        3,842,421,0,4488,4480,1,0,0,0,4488,4481,1,0,0,0,4488,4482,1,0,0,
        0,4488,4483,1,0,0,0,4488,4484,1,0,0,0,4488,4485,1,0,0,0,4488,4486,
        1,0,0,0,4488,4487,1,0,0,0,4489,829,1,0,0,0,4490,4491,7,31,0,0,4491,
        831,1,0,0,0,4492,4493,7,32,0,0,4493,833,1,0,0,0,4494,4495,7,33,0,
        0,4495,835,1,0,0,0,4496,4497,5,77,0,0,4497,837,1,0,0,0,4498,4499,
        5,80,0,0,4499,839,1,0,0,0,4500,4501,7,28,0,0,4501,841,1,0,0,0,4502,
        4503,7,27,0,0,4503,843,1,0,0,0,4504,4505,7,34,0,0,4505,845,1,0,0,
        0,4506,4507,7,35,0,0,4507,847,1,0,0,0,4508,4509,7,36,0,0,4509,849,
        1,0,0,0,4510,4511,7,37,0,0,4511,851,1,0,0,0,4512,4513,5,324,0,0,
        4513,853,1,0,0,0,4514,4515,7,38,0,0,4515,855,1,0,0,0,4516,4522,3,
        858,429,0,4517,4518,5,225,0,0,4518,4519,5,48,0,0,4519,4520,5,322,
        0,0,4520,4522,3,4,2,0,4521,4516,1,0,0,0,4521,4517,1,0,0,0,4522,857,
        1,0,0,0,4523,4525,5,23,0,0,4524,4523,1,0,0,0,4525,4528,1,0,0,0,4526,
        4524,1,0,0,0,4526,4527,1,0,0,0,4527,4529,1,0,0,0,4528,4526,1,0,0,
        0,4529,4538,3,860,430,0,4530,4532,5,23,0,0,4531,4530,1,0,0,0,4532,
        4533,1,0,0,0,4533,4531,1,0,0,0,4533,4534,1,0,0,0,4534,4535,1,0,0,
        0,4535,4537,3,860,430,0,4536,4531,1,0,0,0,4537,4540,1,0,0,0,4538,
        4536,1,0,0,0,4538,4539,1,0,0,0,4539,4544,1,0,0,0,4540,4538,1,0,0,
        0,4541,4543,5,23,0,0,4542,4541,1,0,0,0,4543,4546,1,0,0,0,4544,4542,
        1,0,0,0,4544,4545,1,0,0,0,4545,4547,1,0,0,0,4546,4544,1,0,0,0,4547,
        4548,5,0,0,1,4548,859,1,0,0,0,4549,4552,5,129,0,0,4550,4551,5,1,
        0,0,4551,4553,5,223,0,0,4552,4550,1,0,0,0,4552,4553,1,0,0,0,4553,
        4555,1,0,0,0,4554,4549,1,0,0,0,4554,4555,1,0,0,0,4555,4556,1,0,0,
        0,4556,4557,3,862,431,0,4557,861,1,0,0,0,4558,4572,3,224,112,0,4559,
        4572,3,232,116,0,4560,4572,3,758,379,0,4561,4572,3,754,377,0,4562,
        4572,3,366,183,0,4563,4572,3,210,105,0,4564,4572,3,214,107,0,4565,
        4572,3,216,108,0,4566,4572,3,222,111,0,4567,4572,3,624,312,0,4568,
        4572,3,628,314,0,4569,4572,3,630,315,0,4570,4572,3,370,185,0,4571,
        4558,1,0,0,0,4571,4559,1,0,0,0,4571,4560,1,0,0,0,4571,4561,1,0,0,
        0,4571,4562,1,0,0,0,4571,4563,1,0,0,0,4571,4564,1,0,0,0,4571,4565,
        1,0,0,0,4571,4566,1,0,0,0,4571,4567,1,0,0,0,4571,4568,1,0,0,0,4571,
        4569,1,0,0,0,4571,4570,1,0,0,0,4572,863,1,0,0,0,4573,4574,5,51,0,
        0,4574,4575,3,642,321,0,4575,865,1,0,0,0,4576,4577,5,313,0,0,4577,
        4578,3,14,7,0,4578,867,1,0,0,0,4579,4580,5,142,0,0,4580,4581,3,338,
        169,0,4581,869,1,0,0,0,4582,4585,3,464,232,0,4583,4585,3,472,236,
        0,4584,4582,1,0,0,0,4584,4583,1,0,0,0,4585,871,1,0,0,0,504,877,882,
        889,894,900,908,916,923,927,935,940,945,947,1007,1014,1018,1025,
        1033,1038,1042,1048,1054,1057,1061,1069,1073,1076,1080,1091,1096,
        1098,1107,1128,1133,1142,1144,1151,1159,1167,1174,1184,1186,1190,
        1195,1199,1205,1211,1215,1219,1222,1229,1235,1239,1244,1247,1261,
        1266,1269,1283,1290,1301,1312,1332,1338,1343,1347,1361,1363,1370,
        1376,1387,1395,1401,1408,1416,1429,1435,1439,1442,1444,1452,1460,
        1466,1472,1478,1481,1490,1499,1506,1514,1527,1534,1538,1545,1549,
        1554,1561,1568,1571,1578,1582,1592,1615,1621,1625,1632,1638,1645,
        1649,1653,1659,1664,1673,1676,1682,1687,1695,1702,1724,1728,1730,
        1734,1743,1747,1749,1753,1762,1766,1804,1808,1828,1831,1837,1857,
        1862,1868,1873,1876,1880,1907,1915,1918,1925,1938,1942,1954,1967,
        1972,1979,1983,1990,1999,2008,2016,2020,2024,2031,2033,2036,2041,
        2046,2050,2057,2064,2068,2071,2075,2079,2081,2092,2101,2106,2112,
        2117,2120,2124,2128,2131,2134,2138,2146,2150,2154,2157,2160,2163,
        2167,2170,2173,2178,2181,2184,2187,2201,2203,2214,2224,2234,2237,
        2244,2268,2279,2285,2289,2293,2297,2301,2305,2309,2313,2319,2326,
        2336,2347,2360,2376,2386,2406,2412,2419,2426,2434,2443,2480,2482,
        2485,2490,2494,2498,2504,2510,2514,2519,2524,2526,2530,2535,2538,
        2540,2544,2555,2566,2577,2581,2585,2589,2592,2596,2599,2605,2614,
        2617,2631,2637,2650,2657,2662,2669,2676,2685,2690,2698,2713,2719,
        2727,2736,2740,2749,2761,2768,2776,2797,2805,2814,2824,2833,2838,
        2845,2855,2860,2869,2873,2877,2880,2883,2886,2889,2897,2902,2913,
        2920,2933,2941,2946,2953,2966,2977,2987,2993,3002,3019,3042,3062,
        3073,3081,3091,3096,3100,3106,3144,3156,3198,3206,3209,3213,3217,
        3227,3240,3253,3258,3270,3281,3286,3289,3293,3297,3301,3304,3317,
        3321,3333,3347,3362,3377,3380,3392,3395,3405,3413,3419,3427,3435,
        3442,3446,3454,3460,3466,3478,3482,3484,3496,3500,3505,3511,3518,
        3522,3526,3529,3542,3551,3555,3560,3566,3575,3584,3601,3605,3609,
        3611,3615,3622,3626,3630,3632,3649,3654,3678,3683,3701,3717,3733,
        3748,3755,3763,3774,3781,3786,3792,3795,3798,3805,3808,3811,3820,
        3825,3828,3838,3842,3844,3851,3854,3858,3860,3863,3868,3871,3876,
        3886,3891,3902,3906,3910,3912,3916,3921,3929,3932,3935,3938,3943,
        3949,3952,3956,3962,3970,3973,3980,3984,3987,3991,3998,4019,4029,
        4033,4036,4044,4060,4068,4076,4084,4093,4111,4128,4137,4146,4165,
        4177,4187,4196,4208,4222,4225,4228,4231,4237,4247,4253,4264,4267,
        4279,4289,4295,4306,4313,4317,4326,4335,4343,4350,4360,4369,4378,
        4388,4392,4396,4400,4404,4408,4412,4416,4420,4424,4428,4432,4436,
        4441,4446,4451,4455,4459,4464,4467,4473,4476,4488,4521,4526,4533,
        4538,4544,4552,4554,4571,4584
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!YQLParser.__ATN) {
            YQLParser.__ATN = new antlr.ATNDeserializer().deserialize(YQLParser._serializedATN);
        }

        return YQLParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(YQLParser.literalNames, YQLParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return YQLParser.vocabulary;
    }

    private static readonly decisionsToDFA = YQLParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class Sql_queryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_list(): Sql_stmt_listContext | null {
        return this.getRuleContext(0, Sql_stmt_listContext);
    }
    public PRAGMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRAGMA, 0);
    }
    public ANSI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANSI, 0);
    }
    public DIGITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIGITS, 0);
    }
    public ansi_sql_stmt_list(): Ansi_sql_stmt_listContext | null {
        return this.getRuleContext(0, Ansi_sql_stmt_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_query;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_query) {
            return visitor.visitSql_query(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt(): Sql_stmtContext[];
    public sql_stmt(i: number): Sql_stmtContext | null;
    public sql_stmt(i?: number): Sql_stmtContext[] | Sql_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_stmtContext);
        }

        return this.getRuleContext(i, Sql_stmtContext);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(YQLParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt_list) {
            return visitor.visitSql_stmt_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Ansi_sql_stmt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(YQLParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ansi_sql_stmt_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAnsi_sql_stmt_list) {
            return visitor.visitAnsi_sql_stmt_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Lambda_bodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RETURN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public lambda_stmt(): Lambda_stmtContext[];
    public lambda_stmt(i: number): Lambda_stmtContext | null;
    public lambda_stmt(i?: number): Lambda_stmtContext[] | Lambda_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Lambda_stmtContext);
        }

        return this.getRuleContext(i, Lambda_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_lambda_body;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLambda_body) {
            return visitor.visitLambda_body(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Lambda_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_nodes_stmt(): Named_nodes_stmtContext | null {
        return this.getRuleContext(0, Named_nodes_stmtContext);
    }
    public import_stmt(): Import_stmtContext | null {
        return this.getRuleContext(0, Import_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_lambda_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLambda_stmt) {
            return visitor.visitLambda_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_core(): Sql_stmt_coreContext {
        return this.getRuleContext(0, Sql_stmt_coreContext)!;
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPLAIN, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUERY, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLAN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt) {
            return visitor.visitSql_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmt_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pragma_stmt(): Pragma_stmtContext | null {
        return this.getRuleContext(0, Pragma_stmtContext);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public named_nodes_stmt(): Named_nodes_stmtContext | null {
        return this.getRuleContext(0, Named_nodes_stmtContext);
    }
    public create_table_stmt(): Create_table_stmtContext | null {
        return this.getRuleContext(0, Create_table_stmtContext);
    }
    public drop_table_stmt(): Drop_table_stmtContext | null {
        return this.getRuleContext(0, Drop_table_stmtContext);
    }
    public use_stmt(): Use_stmtContext | null {
        return this.getRuleContext(0, Use_stmtContext);
    }
    public into_table_stmt(): Into_table_stmtContext | null {
        return this.getRuleContext(0, Into_table_stmtContext);
    }
    public commit_stmt(): Commit_stmtContext | null {
        return this.getRuleContext(0, Commit_stmtContext);
    }
    public update_stmt(): Update_stmtContext | null {
        return this.getRuleContext(0, Update_stmtContext);
    }
    public delete_stmt(): Delete_stmtContext | null {
        return this.getRuleContext(0, Delete_stmtContext);
    }
    public rollback_stmt(): Rollback_stmtContext | null {
        return this.getRuleContext(0, Rollback_stmtContext);
    }
    public declare_stmt(): Declare_stmtContext | null {
        return this.getRuleContext(0, Declare_stmtContext);
    }
    public import_stmt(): Import_stmtContext | null {
        return this.getRuleContext(0, Import_stmtContext);
    }
    public export_stmt(): Export_stmtContext | null {
        return this.getRuleContext(0, Export_stmtContext);
    }
    public alter_table_stmt(): Alter_table_stmtContext | null {
        return this.getRuleContext(0, Alter_table_stmtContext);
    }
    public alter_external_table_stmt(): Alter_external_table_stmtContext | null {
        return this.getRuleContext(0, Alter_external_table_stmtContext);
    }
    public do_stmt(): Do_stmtContext | null {
        return this.getRuleContext(0, Do_stmtContext);
    }
    public define_action_or_subquery_stmt(): Define_action_or_subquery_stmtContext | null {
        return this.getRuleContext(0, Define_action_or_subquery_stmtContext);
    }
    public if_stmt(): If_stmtContext | null {
        return this.getRuleContext(0, If_stmtContext);
    }
    public for_stmt(): For_stmtContext | null {
        return this.getRuleContext(0, For_stmtContext);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public create_user_stmt(): Create_user_stmtContext | null {
        return this.getRuleContext(0, Create_user_stmtContext);
    }
    public alter_user_stmt(): Alter_user_stmtContext | null {
        return this.getRuleContext(0, Alter_user_stmtContext);
    }
    public create_group_stmt(): Create_group_stmtContext | null {
        return this.getRuleContext(0, Create_group_stmtContext);
    }
    public alter_group_stmt(): Alter_group_stmtContext | null {
        return this.getRuleContext(0, Alter_group_stmtContext);
    }
    public drop_role_stmt(): Drop_role_stmtContext | null {
        return this.getRuleContext(0, Drop_role_stmtContext);
    }
    public create_object_stmt(): Create_object_stmtContext | null {
        return this.getRuleContext(0, Create_object_stmtContext);
    }
    public alter_object_stmt(): Alter_object_stmtContext | null {
        return this.getRuleContext(0, Alter_object_stmtContext);
    }
    public drop_object_stmt(): Drop_object_stmtContext | null {
        return this.getRuleContext(0, Drop_object_stmtContext);
    }
    public create_external_data_source_stmt(): Create_external_data_source_stmtContext | null {
        return this.getRuleContext(0, Create_external_data_source_stmtContext);
    }
    public alter_external_data_source_stmt(): Alter_external_data_source_stmtContext | null {
        return this.getRuleContext(0, Alter_external_data_source_stmtContext);
    }
    public drop_external_data_source_stmt(): Drop_external_data_source_stmtContext | null {
        return this.getRuleContext(0, Drop_external_data_source_stmtContext);
    }
    public create_replication_stmt(): Create_replication_stmtContext | null {
        return this.getRuleContext(0, Create_replication_stmtContext);
    }
    public drop_replication_stmt(): Drop_replication_stmtContext | null {
        return this.getRuleContext(0, Drop_replication_stmtContext);
    }
    public create_topic_stmt(): Create_topic_stmtContext | null {
        return this.getRuleContext(0, Create_topic_stmtContext);
    }
    public alter_topic_stmt(): Alter_topic_stmtContext | null {
        return this.getRuleContext(0, Alter_topic_stmtContext);
    }
    public drop_topic_stmt(): Drop_topic_stmtContext | null {
        return this.getRuleContext(0, Drop_topic_stmtContext);
    }
    public grant_permissions_stmt(): Grant_permissions_stmtContext | null {
        return this.getRuleContext(0, Grant_permissions_stmtContext);
    }
    public revoke_permissions_stmt(): Revoke_permissions_stmtContext | null {
        return this.getRuleContext(0, Revoke_permissions_stmtContext);
    }
    public alter_table_store_stmt(): Alter_table_store_stmtContext | null {
        return this.getRuleContext(0, Alter_table_store_stmtContext);
    }
    public upsert_object_stmt(): Upsert_object_stmtContext | null {
        return this.getRuleContext(0, Upsert_object_stmtContext);
    }
    public create_view_stmt(): Create_view_stmtContext | null {
        return this.getRuleContext(0, Create_view_stmtContext);
    }
    public drop_view_stmt(): Drop_view_stmtContext | null {
        return this.getRuleContext(0, Drop_view_stmtContext);
    }
    public alter_replication_stmt(): Alter_replication_stmtContext | null {
        return this.getRuleContext(0, Alter_replication_stmtContext);
    }
    public create_resource_pool_stmt(): Create_resource_pool_stmtContext | null {
        return this.getRuleContext(0, Create_resource_pool_stmtContext);
    }
    public alter_resource_pool_stmt(): Alter_resource_pool_stmtContext | null {
        return this.getRuleContext(0, Alter_resource_pool_stmtContext);
    }
    public drop_resource_pool_stmt(): Drop_resource_pool_stmtContext | null {
        return this.getRuleContext(0, Drop_resource_pool_stmtContext);
    }
    public create_backup_collection_stmt(): Create_backup_collection_stmtContext | null {
        return this.getRuleContext(0, Create_backup_collection_stmtContext);
    }
    public alter_backup_collection_stmt(): Alter_backup_collection_stmtContext | null {
        return this.getRuleContext(0, Alter_backup_collection_stmtContext);
    }
    public drop_backup_collection_stmt(): Drop_backup_collection_stmtContext | null {
        return this.getRuleContext(0, Drop_backup_collection_stmtContext);
    }
    public analyze_stmt(): Analyze_stmtContext | null {
        return this.getRuleContext(0, Analyze_stmtContext);
    }
    public create_resource_pool_classifier_stmt(): Create_resource_pool_classifier_stmtContext | null {
        return this.getRuleContext(0, Create_resource_pool_classifier_stmtContext);
    }
    public alter_resource_pool_classifier_stmt(): Alter_resource_pool_classifier_stmtContext | null {
        return this.getRuleContext(0, Alter_resource_pool_classifier_stmtContext);
    }
    public drop_resource_pool_classifier_stmt(): Drop_resource_pool_classifier_stmtContext | null {
        return this.getRuleContext(0, Drop_resource_pool_classifier_stmtContext);
    }
    public backup_stmt(): Backup_stmtContext | null {
        return this.getRuleContext(0, Backup_stmtContext);
    }
    public restore_stmt(): Restore_stmtContext | null {
        return this.getRuleContext(0, Restore_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_core;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt_core) {
            return visitor.visitSql_stmt_core(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public or_subexpr(): Or_subexprContext[];
    public or_subexpr(i: number): Or_subexprContext | null;
    public or_subexpr(i?: number): Or_subexprContext[] | Or_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Or_subexprContext);
        }

        return this.getRuleContext(i, Or_subexprContext);
    }
    public OR(): antlr.TerminalNode[];
    public OR(i: number): antlr.TerminalNode | null;
    public OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.OR);
    	} else {
    		return this.getToken(YQLParser.OR, i);
    	}
    }
    public type_name_composite(): Type_name_compositeContext | null {
        return this.getRuleContext(0, Type_name_compositeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExpr) {
            return visitor.visitExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Or_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public and_subexpr(): And_subexprContext[];
    public and_subexpr(i: number): And_subexprContext | null;
    public and_subexpr(i?: number): And_subexprContext[] | And_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(And_subexprContext);
        }

        return this.getRuleContext(i, And_subexprContext);
    }
    public AND(): antlr.TerminalNode[];
    public AND(i: number): antlr.TerminalNode | null;
    public AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.AND);
    	} else {
    		return this.getToken(YQLParser.AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_or_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOr_subexpr) {
            return visitor.visitOr_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class And_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xor_subexpr(): Xor_subexprContext[];
    public xor_subexpr(i: number): Xor_subexprContext | null;
    public xor_subexpr(i?: number): Xor_subexprContext[] | Xor_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xor_subexprContext);
        }

        return this.getRuleContext(i, Xor_subexprContext);
    }
    public XOR(): antlr.TerminalNode[];
    public XOR(i: number): antlr.TerminalNode | null;
    public XOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.XOR);
    	} else {
    		return this.getToken(YQLParser.XOR, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_and_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAnd_subexpr) {
            return visitor.visitAnd_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xor_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public eq_subexpr(): Eq_subexprContext {
        return this.getRuleContext(0, Eq_subexprContext)!;
    }
    public cond_expr(): Cond_exprContext | null {
        return this.getRuleContext(0, Cond_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_xor_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitXor_subexpr) {
            return visitor.visitXor_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Distinct_from_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(YQLParser.IS, 0)!;
    }
    public DISTINCT(): antlr.TerminalNode {
        return this.getToken(YQLParser.DISTINCT, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(YQLParser.FROM, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_distinct_from_op;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDistinct_from_op) {
            return visitor.visitDistinct_from_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cond_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public match_op(): Match_opContext | null {
        return this.getRuleContext(0, Match_opContext);
    }
    public eq_subexpr(): Eq_subexprContext[];
    public eq_subexpr(i: number): Eq_subexprContext | null;
    public eq_subexpr(i?: number): Eq_subexprContext[] | Eq_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Eq_subexprContext);
        }

        return this.getRuleContext(i, Eq_subexprContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ESCAPE, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IN, 0);
    }
    public in_expr(): In_exprContext | null {
        return this.getRuleContext(0, In_exprContext);
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMPACT, 0);
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ISNULL, 0);
    }
    public NOTNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOTNULL, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IS, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BETWEEN, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AND, 0);
    }
    public SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYMMETRIC, 0);
    }
    public ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYMMETRIC, 0);
    }
    public EQUALS(): antlr.TerminalNode[];
    public EQUALS(i: number): antlr.TerminalNode | null;
    public EQUALS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.EQUALS);
    	} else {
    		return this.getToken(YQLParser.EQUALS, i);
    	}
    }
    public EQUALS2(): antlr.TerminalNode[];
    public EQUALS2(i: number): antlr.TerminalNode | null;
    public EQUALS2(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.EQUALS2);
    	} else {
    		return this.getToken(YQLParser.EQUALS2, i);
    	}
    }
    public NOT_EQUALS(): antlr.TerminalNode[];
    public NOT_EQUALS(i: number): antlr.TerminalNode | null;
    public NOT_EQUALS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.NOT_EQUALS);
    	} else {
    		return this.getToken(YQLParser.NOT_EQUALS, i);
    	}
    }
    public NOT_EQUALS2(): antlr.TerminalNode[];
    public NOT_EQUALS2(i: number): antlr.TerminalNode | null;
    public NOT_EQUALS2(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.NOT_EQUALS2);
    	} else {
    		return this.getToken(YQLParser.NOT_EQUALS2, i);
    	}
    }
    public distinct_from_op(): Distinct_from_opContext[];
    public distinct_from_op(i: number): Distinct_from_opContext | null;
    public distinct_from_op(i?: number): Distinct_from_opContext[] | Distinct_from_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Distinct_from_opContext);
        }

        return this.getRuleContext(i, Distinct_from_opContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cond_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCond_expr) {
            return visitor.visitCond_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Match_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIKE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ILIKE, 0);
    }
    public GLOB(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GLOB, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REGEXP, 0);
    }
    public RLIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RLIKE, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_match_op;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitMatch_op) {
            return visitor.visitMatch_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Eq_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public neq_subexpr(): Neq_subexprContext[];
    public neq_subexpr(i: number): Neq_subexprContext | null;
    public neq_subexpr(i?: number): Neq_subexprContext[] | Neq_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Neq_subexprContext);
        }

        return this.getRuleContext(i, Neq_subexprContext);
    }
    public LESS(): antlr.TerminalNode[];
    public LESS(i: number): antlr.TerminalNode | null;
    public LESS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.LESS);
    	} else {
    		return this.getToken(YQLParser.LESS, i);
    	}
    }
    public LESS_OR_EQ(): antlr.TerminalNode[];
    public LESS_OR_EQ(i: number): antlr.TerminalNode | null;
    public LESS_OR_EQ(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.LESS_OR_EQ);
    	} else {
    		return this.getToken(YQLParser.LESS_OR_EQ, i);
    	}
    }
    public GREATER(): antlr.TerminalNode[];
    public GREATER(i: number): antlr.TerminalNode | null;
    public GREATER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER);
    	} else {
    		return this.getToken(YQLParser.GREATER, i);
    	}
    }
    public GREATER_OR_EQ(): antlr.TerminalNode[];
    public GREATER_OR_EQ(i: number): antlr.TerminalNode | null;
    public GREATER_OR_EQ(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER_OR_EQ);
    	} else {
    		return this.getToken(YQLParser.GREATER_OR_EQ, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_eq_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitEq_subexpr) {
            return visitor.visitEq_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Shift_rightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GREATER(): antlr.TerminalNode[];
    public GREATER(i: number): antlr.TerminalNode | null;
    public GREATER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER);
    	} else {
    		return this.getToken(YQLParser.GREATER, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_shift_right;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitShift_right) {
            return visitor.visitShift_right(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Rot_rightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GREATER(): antlr.TerminalNode[];
    public GREATER(i: number): antlr.TerminalNode | null;
    public GREATER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER);
    	} else {
    		return this.getToken(YQLParser.GREATER, i);
    	}
    }
    public PIPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.PIPE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_rot_right;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRot_right) {
            return visitor.visitRot_right(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Double_questionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_double_question;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDouble_question) {
            return visitor.visitDouble_question(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Neq_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bit_subexpr(): Bit_subexprContext[];
    public bit_subexpr(i: number): Bit_subexprContext | null;
    public bit_subexpr(i?: number): Bit_subexprContext[] | Bit_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bit_subexprContext);
        }

        return this.getRuleContext(i, Bit_subexprContext);
    }
    public double_question(): Double_questionContext | null {
        return this.getRuleContext(0, Double_questionContext);
    }
    public neq_subexpr(): Neq_subexprContext | null {
        return this.getRuleContext(0, Neq_subexprContext);
    }
    public SHIFT_LEFT(): antlr.TerminalNode[];
    public SHIFT_LEFT(i: number): antlr.TerminalNode | null;
    public SHIFT_LEFT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SHIFT_LEFT);
    	} else {
    		return this.getToken(YQLParser.SHIFT_LEFT, i);
    	}
    }
    public shift_right(): Shift_rightContext[];
    public shift_right(i: number): Shift_rightContext | null;
    public shift_right(i?: number): Shift_rightContext[] | Shift_rightContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Shift_rightContext);
        }

        return this.getRuleContext(i, Shift_rightContext);
    }
    public ROT_LEFT(): antlr.TerminalNode[];
    public ROT_LEFT(i: number): antlr.TerminalNode | null;
    public ROT_LEFT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ROT_LEFT);
    	} else {
    		return this.getToken(YQLParser.ROT_LEFT, i);
    	}
    }
    public rot_right(): Rot_rightContext[];
    public rot_right(i: number): Rot_rightContext | null;
    public rot_right(i?: number): Rot_rightContext[] | Rot_rightContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Rot_rightContext);
        }

        return this.getRuleContext(i, Rot_rightContext);
    }
    public AMPERSAND(): antlr.TerminalNode[];
    public AMPERSAND(i: number): antlr.TerminalNode | null;
    public AMPERSAND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.AMPERSAND);
    	} else {
    		return this.getToken(YQLParser.AMPERSAND, i);
    	}
    }
    public PIPE(): antlr.TerminalNode[];
    public PIPE(i: number): antlr.TerminalNode | null;
    public PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PIPE);
    	} else {
    		return this.getToken(YQLParser.PIPE, i);
    	}
    }
    public CARET(): antlr.TerminalNode[];
    public CARET(i: number): antlr.TerminalNode | null;
    public CARET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.CARET);
    	} else {
    		return this.getToken(YQLParser.CARET, i);
    	}
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_neq_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNeq_subexpr) {
            return visitor.visitNeq_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Bit_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public add_subexpr(): Add_subexprContext[];
    public add_subexpr(i: number): Add_subexprContext | null;
    public add_subexpr(i?: number): Add_subexprContext[] | Add_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Add_subexprContext);
        }

        return this.getRuleContext(i, Add_subexprContext);
    }
    public PLUS(): antlr.TerminalNode[];
    public PLUS(i: number): antlr.TerminalNode | null;
    public PLUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PLUS);
    	} else {
    		return this.getToken(YQLParser.PLUS, i);
    	}
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.MINUS);
    	} else {
    		return this.getToken(YQLParser.MINUS, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bit_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBit_subexpr) {
            return visitor.visitBit_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Add_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public mul_subexpr(): Mul_subexprContext[];
    public mul_subexpr(i: number): Mul_subexprContext | null;
    public mul_subexpr(i?: number): Mul_subexprContext[] | Mul_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Mul_subexprContext);
        }

        return this.getRuleContext(i, Mul_subexprContext);
    }
    public ASTERISK(): antlr.TerminalNode[];
    public ASTERISK(i: number): antlr.TerminalNode | null;
    public ASTERISK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ASTERISK);
    	} else {
    		return this.getToken(YQLParser.ASTERISK, i);
    	}
    }
    public SLASH(): antlr.TerminalNode[];
    public SLASH(i: number): antlr.TerminalNode | null;
    public SLASH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SLASH);
    	} else {
    		return this.getToken(YQLParser.SLASH, i);
    	}
    }
    public PERCENT(): antlr.TerminalNode[];
    public PERCENT(i: number): antlr.TerminalNode | null;
    public PERCENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PERCENT);
    	} else {
    		return this.getToken(YQLParser.PERCENT, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_add_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAdd_subexpr) {
            return visitor.visitAdd_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Mul_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public con_subexpr(): Con_subexprContext[];
    public con_subexpr(i: number): Con_subexprContext | null;
    public con_subexpr(i?: number): Con_subexprContext[] | Con_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Con_subexprContext);
        }

        return this.getRuleContext(i, Con_subexprContext);
    }
    public DOUBLE_PIPE(): antlr.TerminalNode[];
    public DOUBLE_PIPE(i: number): antlr.TerminalNode | null;
    public DOUBLE_PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DOUBLE_PIPE);
    	} else {
    		return this.getToken(YQLParser.DOUBLE_PIPE, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_mul_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitMul_subexpr) {
            return visitor.visitMul_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Con_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_subexpr(): Unary_subexprContext {
        return this.getRuleContext(0, Unary_subexprContext)!;
    }
    public unary_op(): Unary_opContext | null {
        return this.getRuleContext(0, Unary_opContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_con_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCon_subexpr) {
            return visitor.visitCon_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unary_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MINUS, 0);
    }
    public TILDA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TILDA, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_op;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUnary_op) {
            return visitor.visitUnary_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unary_subexpr_suffixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLLATE, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public key_expr(): Key_exprContext[];
    public key_expr(i: number): Key_exprContext | null;
    public key_expr(i?: number): Key_exprContext[] | Key_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Key_exprContext);
        }

        return this.getRuleContext(i, Key_exprContext);
    }
    public invoke_expr(): Invoke_exprContext[];
    public invoke_expr(i: number): Invoke_exprContext | null;
    public invoke_expr(i?: number): Invoke_exprContext[] | Invoke_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Invoke_exprContext);
        }

        return this.getRuleContext(i, Invoke_exprContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DOT);
    	} else {
    		return this.getToken(YQLParser.DOT, i);
    	}
    }
    public bind_parameter(): Bind_parameterContext[];
    public bind_parameter(i: number): Bind_parameterContext | null;
    public bind_parameter(i?: number): Bind_parameterContext[] | Bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bind_parameterContext);
        }

        return this.getRuleContext(i, Bind_parameterContext);
    }
    public DIGITS(): antlr.TerminalNode[];
    public DIGITS(i: number): antlr.TerminalNode | null;
    public DIGITS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DIGITS);
    	} else {
    		return this.getToken(YQLParser.DIGITS, i);
    	}
    }
    public an_id_or_type(): An_id_or_typeContext[];
    public an_id_or_type(i: number): An_id_or_typeContext | null;
    public an_id_or_type(i?: number): An_id_or_typeContext[] | An_id_or_typeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_or_typeContext);
        }

        return this.getRuleContext(i, An_id_or_typeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_subexpr_suffix;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUnary_subexpr_suffix) {
            return visitor.visitUnary_subexpr_suffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unary_casual_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_subexpr_suffix(): Unary_subexpr_suffixContext {
        return this.getRuleContext(0, Unary_subexpr_suffixContext)!;
    }
    public id_expr(): Id_exprContext | null {
        return this.getRuleContext(0, Id_exprContext);
    }
    public atom_expr(): Atom_exprContext | null {
        return this.getRuleContext(0, Atom_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_casual_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUnary_casual_subexpr) {
            return visitor.visitUnary_casual_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class In_unary_casual_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_subexpr_suffix(): Unary_subexpr_suffixContext {
        return this.getRuleContext(0, Unary_subexpr_suffixContext)!;
    }
    public id_expr_in(): Id_expr_inContext | null {
        return this.getRuleContext(0, Id_expr_inContext);
    }
    public in_atom_expr(): In_atom_exprContext | null {
        return this.getRuleContext(0, In_atom_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_unary_casual_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIn_unary_casual_subexpr) {
            return visitor.visitIn_unary_casual_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unary_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_casual_subexpr(): Unary_casual_subexprContext | null {
        return this.getRuleContext(0, Unary_casual_subexprContext);
    }
    public json_api_expr(): Json_api_exprContext | null {
        return this.getRuleContext(0, Json_api_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUnary_subexpr) {
            return visitor.visitUnary_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class In_unary_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public in_unary_casual_subexpr(): In_unary_casual_subexprContext | null {
        return this.getRuleContext(0, In_unary_casual_subexprContext);
    }
    public json_api_expr(): Json_api_exprContext | null {
        return this.getRuleContext(0, Json_api_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_unary_subexpr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIn_unary_subexpr) {
            return visitor.visitIn_unary_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class List_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.LBRACE_SQUARE, 0)!;
    }
    public RBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RBRACE_SQUARE, 0)!;
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_list_literal;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitList_literal) {
            return visitor.visitList_literal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Expr_dict_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COLON(): antlr.TerminalNode[];
    public COLON(i: number): antlr.TerminalNode | null;
    public COLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COLON);
    	} else {
    		return this.getToken(YQLParser.COLON, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr_dict_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExpr_dict_list) {
            return visitor.visitExpr_dict_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Dict_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE_CURLY(): antlr.TerminalNode {
        return this.getToken(YQLParser.LBRACE_CURLY, 0)!;
    }
    public RBRACE_CURLY(): antlr.TerminalNode {
        return this.getToken(YQLParser.RBRACE_CURLY, 0)!;
    }
    public expr_dict_list(): Expr_dict_listContext | null {
        return this.getRuleContext(0, Expr_dict_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_dict_literal;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDict_literal) {
            return visitor.visitDict_literal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Expr_struct_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COLON(): antlr.TerminalNode[];
    public COLON(i: number): antlr.TerminalNode | null;
    public COLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COLON);
    	} else {
    		return this.getToken(YQLParser.COLON, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr_struct_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExpr_struct_list) {
            return visitor.visitExpr_struct_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Struct_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRUCT_OPEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRUCT_OPEN, 0)!;
    }
    public STRUCT_CLOSE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRUCT_CLOSE, 0)!;
    }
    public expr_struct_list(): Expr_struct_listContext | null {
        return this.getRuleContext(0, Expr_struct_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_struct_literal;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitStruct_literal) {
            return visitor.visitStruct_literal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Atom_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal_value(): Literal_valueContext | null {
        return this.getRuleContext(0, Literal_valueContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public lambda(): LambdaContext | null {
        return this.getRuleContext(0, LambdaContext);
    }
    public cast_expr(): Cast_exprContext | null {
        return this.getRuleContext(0, Cast_exprContext);
    }
    public exists_expr(): Exists_exprContext | null {
        return this.getRuleContext(0, Exists_exprContext);
    }
    public case_expr(): Case_exprContext | null {
        return this.getRuleContext(0, Case_exprContext);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NAMESPACE, 0);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public value_constructor(): Value_constructorContext | null {
        return this.getRuleContext(0, Value_constructorContext);
    }
    public bitcast_expr(): Bitcast_exprContext | null {
        return this.getRuleContext(0, Bitcast_exprContext);
    }
    public list_literal(): List_literalContext | null {
        return this.getRuleContext(0, List_literalContext);
    }
    public dict_literal(): Dict_literalContext | null {
        return this.getRuleContext(0, Dict_literalContext);
    }
    public struct_literal(): Struct_literalContext | null {
        return this.getRuleContext(0, Struct_literalContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_atom_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAtom_expr) {
            return visitor.visitAtom_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class In_atom_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal_value(): Literal_valueContext | null {
        return this.getRuleContext(0, Literal_valueContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public lambda(): LambdaContext | null {
        return this.getRuleContext(0, LambdaContext);
    }
    public cast_expr(): Cast_exprContext | null {
        return this.getRuleContext(0, Cast_exprContext);
    }
    public case_expr(): Case_exprContext | null {
        return this.getRuleContext(0, Case_exprContext);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NAMESPACE, 0);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public value_constructor(): Value_constructorContext | null {
        return this.getRuleContext(0, Value_constructorContext);
    }
    public bitcast_expr(): Bitcast_exprContext | null {
        return this.getRuleContext(0, Bitcast_exprContext);
    }
    public list_literal(): List_literalContext | null {
        return this.getRuleContext(0, List_literalContext);
    }
    public dict_literal(): Dict_literalContext | null {
        return this.getRuleContext(0, Dict_literalContext);
    }
    public struct_literal(): Struct_literalContext | null {
        return this.getRuleContext(0, Struct_literalContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_atom_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIn_atom_expr) {
            return visitor.visitIn_atom_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cast_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(YQLParser.CAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cast_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCast_expr) {
            return visitor.visitCast_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Bitcast_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BITCAST(): antlr.TerminalNode {
        return this.getToken(YQLParser.BITCAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public type_name_simple(): Type_name_simpleContext {
        return this.getRuleContext(0, Type_name_simpleContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bitcast_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBitcast_expr) {
            return visitor.visitBitcast_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Exists_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXISTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_exists_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExists_expr) {
            return visitor.visitExists_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Case_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(YQLParser.END, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public when_expr(): When_exprContext[];
    public when_expr(i: number): When_exprContext | null;
    public when_expr(i?: number): When_exprContext[] | When_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(When_exprContext);
        }

        return this.getRuleContext(i, When_exprContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_case_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCase_expr) {
            return visitor.visitCase_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LambdaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public smart_parenthesis(): Smart_parenthesisContext {
        return this.getRuleContext(0, Smart_parenthesisContext)!;
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARROW, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public lambda_body(): Lambda_bodyContext | null {
        return this.getRuleContext(0, Lambda_bodyContext);
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_lambda;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLambda) {
            return visitor.visitLambda(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class In_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public in_unary_subexpr(): In_unary_subexprContext {
        return this.getRuleContext(0, In_unary_subexprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIn_expr) {
            return visitor.visitIn_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_api_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_value(): Json_valueContext | null {
        return this.getRuleContext(0, Json_valueContext);
    }
    public json_exists(): Json_existsContext | null {
        return this.getRuleContext(0, Json_existsContext);
    }
    public json_query(): Json_queryContext | null {
        return this.getRuleContext(0, Json_queryContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_api_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_api_expr) {
            return visitor.visitJson_api_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Jsonpath_specContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRING_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_jsonpath_spec;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJsonpath_spec) {
            return visitor.visitJsonpath_spec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_expr(): Id_exprContext | null {
        return this.getRuleContext(0, Id_exprContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_variable_name) {
            return visitor.visitJson_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_variableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public json_variable_name(): Json_variable_nameContext {
        return this.getRuleContext(0, Json_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_variable;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_variable) {
            return visitor.visitJson_variable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_variablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_variable(): Json_variableContext[];
    public json_variable(i: number): Json_variableContext | null;
    public json_variable(i?: number): Json_variableContext[] | Json_variableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Json_variableContext);
        }

        return this.getRuleContext(i, Json_variableContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_variables;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_variables) {
            return visitor.visitJson_variables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_common_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public jsonpath_spec(): Jsonpath_specContext {
        return this.getRuleContext(0, Jsonpath_specContext)!;
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSING, 0);
    }
    public json_variables(): Json_variablesContext | null {
        return this.getRuleContext(0, Json_variablesContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_common_args;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_common_args) {
            return visitor.visitJson_common_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_case_handlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_case_handler;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_case_handler) {
            return visitor.visitJson_case_handler(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.JSON_VALUE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public json_common_args(): Json_common_argsContext {
        return this.getRuleContext(0, Json_common_argsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RETURNING, 0);
    }
    public type_name_simple(): Type_name_simpleContext | null {
        return this.getRuleContext(0, Type_name_simpleContext);
    }
    public json_case_handler(): Json_case_handlerContext[];
    public json_case_handler(i: number): Json_case_handlerContext | null;
    public json_case_handler(i?: number): Json_case_handlerContext[] | Json_case_handlerContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Json_case_handlerContext);
        }

        return this.getRuleContext(i, Json_case_handlerContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ON);
    	} else {
    		return this.getToken(YQLParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode[];
    public EMPTY(i: number): antlr.TerminalNode | null;
    public EMPTY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.EMPTY);
    	} else {
    		return this.getToken(YQLParser.EMPTY, i);
    	}
    }
    public ERROR(): antlr.TerminalNode[];
    public ERROR(i: number): antlr.TerminalNode | null;
    public ERROR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ERROR);
    	} else {
    		return this.getToken(YQLParser.ERROR, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_value) {
            return visitor.visitJson_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_exists_handlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public ERROR(): antlr.TerminalNode[];
    public ERROR(i: number): antlr.TerminalNode | null;
    public ERROR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ERROR);
    	} else {
    		return this.getToken(YQLParser.ERROR, i);
    	}
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FALSE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNKNOWN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_exists_handler;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_exists_handler) {
            return visitor.visitJson_exists_handler(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_existsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_EXISTS(): antlr.TerminalNode {
        return this.getToken(YQLParser.JSON_EXISTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public json_common_args(): Json_common_argsContext {
        return this.getRuleContext(0, Json_common_argsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public json_exists_handler(): Json_exists_handlerContext | null {
        return this.getRuleContext(0, Json_exists_handlerContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_exists;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_exists) {
            return visitor.visitJson_exists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_query_wrapperContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITHOUT, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARRAY, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONDITIONAL, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNCONDITIONAL, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_query_wrapper;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_query_wrapper) {
            return visitor.visitJson_query_wrapper(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_query_handlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARRAY, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OBJECT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_query_handler;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_query_handler) {
            return visitor.visitJson_query_handler(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json_queryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_QUERY(): antlr.TerminalNode {
        return this.getToken(YQLParser.JSON_QUERY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public json_common_args(): Json_common_argsContext {
        return this.getRuleContext(0, Json_common_argsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public json_query_wrapper(): Json_query_wrapperContext | null {
        return this.getRuleContext(0, Json_query_wrapperContext);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WRAPPER, 0);
    }
    public json_query_handler(): Json_query_handlerContext[];
    public json_query_handler(i: number): Json_query_handlerContext | null;
    public json_query_handler(i?: number): Json_query_handlerContext[] | Json_query_handlerContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Json_query_handlerContext);
        }

        return this.getRuleContext(i, Json_query_handlerContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ON);
    	} else {
    		return this.getToken(YQLParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_query;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJson_query) {
            return visitor.visitJson_query(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Smart_parenthesisContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public named_expr_list(): Named_expr_listContext | null {
        return this.getRuleContext(0, Named_expr_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_smart_parenthesis;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSmart_parenthesis) {
            return visitor.visitSmart_parenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExpr_list) {
            return visitor.visitExpr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pure_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pure_column_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPure_column_list) {
            return visitor.visitPure_column_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pure_column_or_namedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pure_column_or_named;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPure_column_or_named) {
            return visitor.visitPure_column_or_named(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pure_column_or_named_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public pure_column_or_named(): Pure_column_or_namedContext[];
    public pure_column_or_named(i: number): Pure_column_or_namedContext | null;
    public pure_column_or_named(i?: number): Pure_column_or_namedContext[] | Pure_column_or_namedContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Pure_column_or_namedContext);
        }

        return this.getRuleContext(i, Pure_column_or_namedContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pure_column_or_named_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPure_column_or_named_list) {
            return visitor.visitPure_column_or_named_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_id_prefix(): Opt_id_prefixContext {
        return this.getRuleContext(0, Opt_id_prefixContext)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitColumn_name) {
            return visitor.visitColumn_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Without_column_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public an_id_without(): An_id_withoutContext | null {
        return this.getRuleContext(0, An_id_withoutContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_without_column_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWithout_column_name) {
            return visitor.visitWithout_column_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext[];
    public column_name(i: number): Column_nameContext | null;
    public column_name(i?: number): Column_nameContext[] | Column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_nameContext);
        }

        return this.getRuleContext(i, Column_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitColumn_list) {
            return visitor.visitColumn_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Without_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public without_column_name(): Without_column_nameContext[];
    public without_column_name(i: number): Without_column_nameContext | null;
    public without_column_name(i?: number): Without_column_nameContext[] | Without_column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Without_column_nameContext);
        }

        return this.getRuleContext(i, Without_column_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_without_column_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWithout_column_list) {
            return visitor.visitWithout_column_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_expr) {
            return visitor.visitNamed_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_expr(): Named_exprContext[];
    public named_expr(i: number): Named_exprContext | null;
    public named_expr(i?: number): Named_exprContext[] | Named_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_exprContext);
        }

        return this.getRuleContext(i, Named_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_expr_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_expr_list) {
            return visitor.visitNamed_expr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Invoke_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public invoke_expr_tail(): Invoke_expr_tailContext {
        return this.getRuleContext(0, Invoke_expr_tailContext)!;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext | null {
        return this.getRuleContext(0, Opt_set_quantifierContext);
    }
    public named_expr_list(): Named_expr_listContext | null {
        return this.getRuleContext(0, Named_expr_listContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_invoke_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInvoke_expr) {
            return visitor.visitInvoke_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Invoke_expr_tailContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public null_treatment(): Null_treatmentContext | null {
        return this.getRuleContext(0, Null_treatmentContext);
    }
    public filter_clause(): Filter_clauseContext | null {
        return this.getRuleContext(0, Filter_clauseContext);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OVER, 0);
    }
    public window_name_or_specification(): Window_name_or_specificationContext | null {
        return this.getRuleContext(0, Window_name_or_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_invoke_expr_tail;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInvoke_expr_tail) {
            return visitor.visitInvoke_expr_tail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Using_call_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public invoke_expr(): Invoke_exprContext {
        return this.getRuleContext(0, Invoke_exprContext)!;
    }
    public an_id_or_type(): An_id_or_typeContext[];
    public an_id_or_type(i: number): An_id_or_typeContext | null;
    public an_id_or_type(i?: number): An_id_or_typeContext[] | An_id_or_typeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_or_typeContext);
        }

        return this.getRuleContext(i, An_id_or_typeContext);
    }
    public NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NAMESPACE, 0);
    }
    public an_id_expr(): An_id_exprContext | null {
        return this.getRuleContext(0, An_id_exprContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FUNCTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_using_call_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUsing_call_expr) {
            return visitor.visitUsing_call_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.LBRACE_SQUARE, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public RBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RBRACE_SQUARE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_key_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKey_expr) {
            return visitor.visitKey_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class When_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.WHEN, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.THEN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_when_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWhen_expr) {
            return visitor.visitWhen_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Literal_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public real(): RealContext | null {
        return this.getRuleContext(0, RealContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public BLOB(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BLOB, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIME, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIMESTAMP, 0);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public EMPTY_ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY_ACTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_literal_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLiteral_value) {
            return visitor.visitLiteral_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Bind_parameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOLLAR(): antlr.TerminalNode {
        return this.getToken(YQLParser.DOLLAR, 0)!;
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bind_parameter;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBind_parameter) {
            return visitor.visitBind_parameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_bind_parameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public QUESTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUESTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_bind_parameter;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOpt_bind_parameter) {
            return visitor.visitOpt_bind_parameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Bind_parameter_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext[];
    public bind_parameter(i: number): Bind_parameterContext | null;
    public bind_parameter(i?: number): Bind_parameterContext[] | Bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bind_parameterContext);
        }

        return this.getRuleContext(i, Bind_parameterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bind_parameter_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBind_parameter_list) {
            return visitor.visitBind_parameter_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_bind_parameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext[];
    public bind_parameter(i: number): Bind_parameterContext | null;
    public bind_parameter(i?: number): Bind_parameterContext[] | Bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bind_parameterContext);
        }

        return this.getRuleContext(i, Bind_parameterContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_bind_parameter;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_bind_parameter) {
            return visitor.visitNamed_bind_parameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_bind_parameter_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_bind_parameter(): Named_bind_parameterContext[];
    public named_bind_parameter(i: number): Named_bind_parameterContext | null;
    public named_bind_parameter(i?: number): Named_bind_parameterContext[] | Named_bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_bind_parameterContext);
        }

        return this.getRuleContext(i, Named_bind_parameterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_bind_parameter_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_bind_parameter_list) {
            return visitor.visitNamed_bind_parameter_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Signed_numberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public real(): RealContext | null {
        return this.getRuleContext(0, RealContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_signed_number;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSigned_number) {
            return visitor.visitSigned_number(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_simpleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_pure(): An_id_pureContext {
        return this.getRuleContext(0, An_id_pureContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_simple;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_simple) {
            return visitor.visitType_name_simple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Integer_or_bindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_integer_or_bind;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInteger_or_bind) {
            return visitor.visitInteger_or_bind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_tagContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_tag;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_tag) {
            return visitor.visitType_name_tag(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Struct_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLON, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_struct_arg;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitStruct_arg) {
            return visitor.visitStruct_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Struct_arg_positionalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_struct_arg_positional;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitStruct_arg_positional) {
            return visitor.visitStruct_arg_positional(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Variant_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public type_name_tag(): Type_name_tagContext | null {
        return this.getRuleContext(0, Type_name_tagContext);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_variant_arg;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitVariant_arg) {
            return visitor.visitVariant_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Callable_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public variant_arg(): Variant_argContext {
        return this.getRuleContext(0, Variant_argContext)!;
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public AUTOMAP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AUTOMAP, 0);
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_callable_arg;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCallable_arg) {
            return visitor.visitCallable_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Callable_arg_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public callable_arg(): Callable_argContext[];
    public callable_arg(i: number): Callable_argContext | null;
    public callable_arg(i?: number): Callable_argContext[] | Callable_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Callable_argContext);
        }

        return this.getRuleContext(i, Callable_argContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_callable_arg_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCallable_arg_list) {
            return visitor.visitCallable_arg_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_decimalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECIMAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.DECIMAL, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public integer_or_bind(): Integer_or_bindContext[];
    public integer_or_bind(i: number): Integer_or_bindContext | null;
    public integer_or_bind(i?: number): Integer_or_bindContext[] | Integer_or_bindContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Integer_or_bindContext);
        }

        return this.getRuleContext(i, Integer_or_bindContext);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_decimal;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_decimal) {
            return visitor.visitType_name_decimal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_optionalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.OPTIONAL, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_optional;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_optional) {
            return visitor.visitType_name_optional(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_tupleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TUPLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TUPLE, 0)!;
    }
    public LESS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LESS, 0);
    }
    public GREATER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GREATER, 0);
    }
    public NOT_EQUALS2(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT_EQUALS2, 0);
    }
    public type_name_or_bind(): Type_name_or_bindContext[];
    public type_name_or_bind(i: number): Type_name_or_bindContext | null;
    public type_name_or_bind(i?: number): Type_name_or_bindContext[] | Type_name_or_bindContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_or_bindContext);
        }

        return this.getRuleContext(i, Type_name_or_bindContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_tuple;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_tuple) {
            return visitor.visitType_name_tuple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_structContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRUCT(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRUCT, 0)!;
    }
    public LESS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LESS, 0);
    }
    public GREATER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GREATER, 0);
    }
    public NOT_EQUALS2(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT_EQUALS2, 0);
    }
    public struct_arg(): Struct_argContext[];
    public struct_arg(i: number): Struct_argContext | null;
    public struct_arg(i?: number): Struct_argContext[] | Struct_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Struct_argContext);
        }

        return this.getRuleContext(i, Struct_argContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_struct;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_struct) {
            return visitor.visitType_name_struct(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_variantContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VARIANT(): antlr.TerminalNode {
        return this.getToken(YQLParser.VARIANT, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public variant_arg(): Variant_argContext[];
    public variant_arg(i: number): Variant_argContext | null;
    public variant_arg(i?: number): Variant_argContext[] | Variant_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Variant_argContext);
        }

        return this.getRuleContext(i, Variant_argContext);
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_variant;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_variant) {
            return visitor.visitType_name_variant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIST(): antlr.TerminalNode {
        return this.getToken(YQLParser.LIST, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_list) {
            return visitor.visitType_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_streamContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STREAM(): antlr.TerminalNode {
        return this.getToken(YQLParser.STREAM, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_stream;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_stream) {
            return visitor.visitType_name_stream(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_flowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLOW(): antlr.TerminalNode {
        return this.getToken(YQLParser.FLOW, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_flow;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_flow) {
            return visitor.visitType_name_flow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_dictContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DICT(): antlr.TerminalNode {
        return this.getToken(YQLParser.DICT, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext[];
    public type_name_or_bind(i: number): Type_name_or_bindContext | null;
    public type_name_or_bind(i?: number): Type_name_or_bindContext[] | Type_name_or_bindContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_or_bindContext);
        }

        return this.getRuleContext(i, Type_name_or_bindContext);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_dict;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_dict) {
            return visitor.visitType_name_dict(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_set;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_set) {
            return visitor.visitType_name_set(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_enumContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENUM(): antlr.TerminalNode {
        return this.getToken(YQLParser.ENUM, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_tag(): Type_name_tagContext[];
    public type_name_tag(i: number): Type_name_tagContext | null;
    public type_name_tag(i?: number): Type_name_tagContext[] | Type_name_tagContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_tagContext);
        }

        return this.getRuleContext(i, Type_name_tagContext);
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_enum;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_enum) {
            return visitor.visitType_name_enum(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_resourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_resource;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_resource) {
            return visitor.visitType_name_resource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_taggedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TAGGED(): antlr.TerminalNode {
        return this.getToken(YQLParser.TAGGED, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_tagged;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_tagged) {
            return visitor.visitType_name_tagged(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_callableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CALLABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CALLABLE, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public ARROW(): antlr.TerminalNode {
        return this.getToken(YQLParser.ARROW, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public callable_arg_list(): Callable_arg_listContext[];
    public callable_arg_list(i: number): Callable_arg_listContext | null;
    public callable_arg_list(i?: number): Callable_arg_listContext[] | Callable_arg_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Callable_arg_listContext);
        }

        return this.getRuleContext(i, Callable_arg_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public LBRACE_SQUARE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_SQUARE, 0);
    }
    public RBRACE_SQUARE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_SQUARE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_callable;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_callable) {
            return visitor.visitType_name_callable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_compositeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_optional(): Type_name_optionalContext | null {
        return this.getRuleContext(0, Type_name_optionalContext);
    }
    public type_name_tuple(): Type_name_tupleContext | null {
        return this.getRuleContext(0, Type_name_tupleContext);
    }
    public type_name_struct(): Type_name_structContext | null {
        return this.getRuleContext(0, Type_name_structContext);
    }
    public type_name_variant(): Type_name_variantContext | null {
        return this.getRuleContext(0, Type_name_variantContext);
    }
    public type_name_list(): Type_name_listContext | null {
        return this.getRuleContext(0, Type_name_listContext);
    }
    public type_name_stream(): Type_name_streamContext | null {
        return this.getRuleContext(0, Type_name_streamContext);
    }
    public type_name_flow(): Type_name_flowContext | null {
        return this.getRuleContext(0, Type_name_flowContext);
    }
    public type_name_dict(): Type_name_dictContext | null {
        return this.getRuleContext(0, Type_name_dictContext);
    }
    public type_name_set(): Type_name_setContext | null {
        return this.getRuleContext(0, Type_name_setContext);
    }
    public type_name_enum(): Type_name_enumContext | null {
        return this.getRuleContext(0, Type_name_enumContext);
    }
    public type_name_resource(): Type_name_resourceContext | null {
        return this.getRuleContext(0, Type_name_resourceContext);
    }
    public type_name_tagged(): Type_name_taggedContext | null {
        return this.getRuleContext(0, Type_name_taggedContext);
    }
    public type_name_callable(): Type_name_callableContext | null {
        return this.getRuleContext(0, Type_name_callableContext);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_composite;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_composite) {
            return visitor.visitType_name_composite(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_composite(): Type_name_compositeContext | null {
        return this.getRuleContext(0, Type_name_compositeContext);
    }
    public type_name_decimal(): Type_name_decimalContext | null {
        return this.getRuleContext(0, Type_name_decimalContext);
    }
    public type_name_simple(): Type_name_simpleContext | null {
        return this.getRuleContext(0, Type_name_simpleContext);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name) {
            return visitor.visitType_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_or_bindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name(): Type_nameContext | null {
        return this.getRuleContext(0, Type_nameContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_or_bind;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_name_or_bind) {
            return visitor.visitType_name_or_bind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Value_constructor_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRING_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_value_constructor_literal;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValue_constructor_literal) {
            return visitor.visitValue_constructor_literal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Value_constructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VARIANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VARIANT, 0);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public ENUM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENUM, 0);
    }
    public CALLABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CALLABLE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_value_constructor;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValue_constructor) {
            return visitor.visitValue_constructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Declare_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.DECLARE, 0)!;
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public type_name(): Type_nameContext {
        return this.getRuleContext(0, Type_nameContext)!;
    }
    public EQUALS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EQUALS, 0);
    }
    public literal_value(): Literal_valueContext | null {
        return this.getRuleContext(0, Literal_valueContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_declare_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDeclare_stmt) {
            return visitor.visitDeclare_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Module_pathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DOT);
    	} else {
    		return this.getToken(YQLParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_module_path;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitModule_path) {
            return visitor.visitModule_path(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Import_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IMPORT(): antlr.TerminalNode {
        return this.getToken(YQLParser.IMPORT, 0)!;
    }
    public module_path(): Module_pathContext {
        return this.getRuleContext(0, Module_pathContext)!;
    }
    public SYMBOLS(): antlr.TerminalNode {
        return this.getToken(YQLParser.SYMBOLS, 0)!;
    }
    public named_bind_parameter_list(): Named_bind_parameter_listContext {
        return this.getRuleContext(0, Named_bind_parameter_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_import_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitImport_stmt) {
            return visitor.visitImport_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Export_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPORT(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXPORT, 0)!;
    }
    public bind_parameter_list(): Bind_parameter_listContext {
        return this.getRuleContext(0, Bind_parameter_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_export_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExport_stmt) {
            return visitor.visitExport_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Call_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public EMPTY_ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY_ACTION, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_call_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCall_action) {
            return visitor.visitCall_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Inline_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEGIN(): antlr.TerminalNode {
        return this.getToken(YQLParser.BEGIN, 0)!;
    }
    public define_action_or_subquery_body(): Define_action_or_subquery_bodyContext {
        return this.getRuleContext(0, Define_action_or_subquery_bodyContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(YQLParser.END, 0)!;
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(YQLParser.DO, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_inline_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInline_action) {
            return visitor.visitInline_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Do_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(YQLParser.DO, 0)!;
    }
    public call_action(): Call_actionContext | null {
        return this.getRuleContext(0, Call_actionContext);
    }
    public inline_action(): Inline_actionContext | null {
        return this.getRuleContext(0, Inline_actionContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_do_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDo_stmt) {
            return visitor.visitDo_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pragma_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRAGMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.PRAGMA, 0)!;
    }
    public opt_id_prefix_or_type(): Opt_id_prefix_or_typeContext {
        return this.getRuleContext(0, Opt_id_prefix_or_typeContext)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EQUALS, 0);
    }
    public pragma_value(): Pragma_valueContext[];
    public pragma_value(i: number): Pragma_valueContext | null;
    public pragma_value(i?: number): Pragma_valueContext[] | Pragma_valueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Pragma_valueContext);
        }

        return this.getRuleContext(i, Pragma_valueContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pragma_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPragma_stmt) {
            return visitor.visitPragma_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pragma_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public signed_number(): Signed_numberContext | null {
        return this.getRuleContext(0, Signed_numberContext);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pragma_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPragma_value) {
            return visitor.visitPragma_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sort_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESC, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sort_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSort_specification) {
            return visitor.visitSort_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sort_specification_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sort_specification(): Sort_specificationContext[];
    public sort_specification(i: number): Sort_specificationContext | null;
    public sort_specification(i?: number): Sort_specificationContext[] | Sort_specificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sort_specificationContext);
        }

        return this.getRuleContext(i, Sort_specificationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sort_specification_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSort_specification_list) {
            return visitor.visitSort_specification_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind_parenthesis(): Select_kind_parenthesisContext[];
    public select_kind_parenthesis(i: number): Select_kind_parenthesisContext | null;
    public select_kind_parenthesis(i?: number): Select_kind_parenthesisContext[] | Select_kind_parenthesisContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_kind_parenthesisContext);
        }

        return this.getRuleContext(i, Select_kind_parenthesisContext);
    }
    public select_op(): Select_opContext[];
    public select_op(i: number): Select_opContext | null;
    public select_op(i?: number): Select_opContext[] | Select_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_opContext);
        }

        return this.getRuleContext(i, Select_opContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_stmt) {
            return visitor.visitSelect_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_unparenthesized_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind_partial(): Select_kind_partialContext {
        return this.getRuleContext(0, Select_kind_partialContext)!;
    }
    public select_op(): Select_opContext[];
    public select_op(i: number): Select_opContext | null;
    public select_op(i?: number): Select_opContext[] | Select_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_opContext);
        }

        return this.getRuleContext(i, Select_opContext);
    }
    public select_kind_parenthesis(): Select_kind_parenthesisContext[];
    public select_kind_parenthesis(i: number): Select_kind_parenthesisContext | null;
    public select_kind_parenthesis(i?: number): Select_kind_parenthesisContext[] | Select_kind_parenthesisContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_kind_parenthesisContext);
        }

        return this.getRuleContext(i, Select_kind_parenthesisContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_unparenthesized_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_unparenthesized_stmt) {
            return visitor.visitSelect_unparenthesized_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_kind_parenthesisContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind_partial(): Select_kind_partialContext {
        return this.getRuleContext(0, Select_kind_partialContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_kind_parenthesis;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_kind_parenthesis) {
            return visitor.visitSelect_kind_parenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNION, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTERSECT, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCEPT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_op;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_op) {
            return visitor.visitSelect_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_kind_partialContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind(): Select_kindContext {
        return this.getRuleContext(0, Select_kindContext)!;
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIMIT, 0);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OFFSET, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_kind_partial;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_kind_partial) {
            return visitor.visitSelect_kind_partial(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_kindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public process_core(): Process_coreContext | null {
        return this.getRuleContext(0, Process_coreContext);
    }
    public reduce_core(): Reduce_coreContext | null {
        return this.getRuleContext(0, Reduce_coreContext);
    }
    public select_core(): Select_coreContext | null {
        return this.getRuleContext(0, Select_coreContext);
    }
    public DISCARD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISCARD, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTO, 0);
    }
    public RESULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESULT, 0);
    }
    public pure_column_or_named(): Pure_column_or_namedContext | null {
        return this.getRuleContext(0, Pure_column_or_namedContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_kind;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_kind) {
            return visitor.visitSelect_kind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Process_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.PROCESS, 0)!;
    }
    public named_single_source(): Named_single_sourceContext[];
    public named_single_source(i: number): Named_single_sourceContext | null;
    public named_single_source(i?: number): Named_single_sourceContext[] | Named_single_sourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_single_sourceContext);
        }

        return this.getRuleContext(i, Named_single_sourceContext);
    }
    public STREAM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STREAM, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USING, 0);
    }
    public using_call_expr(): Using_call_exprContext | null {
        return this.getRuleContext(0, Using_call_exprContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public external_call_settings(): External_call_settingsContext | null {
        return this.getRuleContext(0, External_call_settingsContext);
    }
    public where_expr(): Where_exprContext | null {
        return this.getRuleContext(0, Where_exprContext);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public order_by_clause(): Order_by_clauseContext | null {
        return this.getRuleContext(0, Order_by_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_process_core;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitProcess_core) {
            return visitor.visitProcess_core(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class External_call_paramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_external_call_param;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExternal_call_param) {
            return visitor.visitExternal_call_param(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class External_call_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public external_call_param(): External_call_paramContext[];
    public external_call_param(i: number): External_call_paramContext | null;
    public external_call_param(i?: number): External_call_paramContext[] | External_call_paramContext | null {
        if (i === undefined) {
            return this.getRuleContexts(External_call_paramContext);
        }

        return this.getRuleContext(i, External_call_paramContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_external_call_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExternal_call_settings) {
            return visitor.visitExternal_call_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Reduce_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REDUCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.REDUCE, 0)!;
    }
    public named_single_source(): Named_single_sourceContext[];
    public named_single_source(i: number): Named_single_sourceContext | null;
    public named_single_source(i?: number): Named_single_sourceContext[] | Named_single_sourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_single_sourceContext);
        }

        return this.getRuleContext(i, Named_single_sourceContext);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public column_list(): Column_listContext {
        return this.getRuleContext(0, Column_listContext)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(YQLParser.USING, 0)!;
    }
    public using_call_expr(): Using_call_exprContext {
        return this.getRuleContext(0, Using_call_exprContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public PRESORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRESORT, 0);
    }
    public sort_specification_list(): Sort_specification_listContext | null {
        return this.getRuleContext(0, Sort_specification_listContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public where_expr(): Where_exprContext | null {
        return this.getRuleContext(0, Where_exprContext);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public order_by_clause(): Order_by_clauseContext | null {
        return this.getRuleContext(0, Order_by_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_reduce_core;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReduce_core) {
            return visitor.visitReduce_core(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_set_quantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_set_quantifier;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOpt_set_quantifier) {
            return visitor.visitOpt_set_quantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.SELECT, 0)!;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext {
        return this.getRuleContext(0, Opt_set_quantifierContext)!;
    }
    public result_column(): Result_columnContext[];
    public result_column(i: number): Result_columnContext | null;
    public result_column(i?: number): Result_columnContext[] | Result_columnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Result_columnContext);
        }

        return this.getRuleContext(i, Result_columnContext);
    }
    public from_stmt(): From_stmtContext[];
    public from_stmt(i: number): From_stmtContext | null;
    public from_stmt(i?: number): From_stmtContext[] | From_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(From_stmtContext);
        }

        return this.getRuleContext(i, From_stmtContext);
    }
    public STREAM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STREAM, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITHOUT, 0);
    }
    public without_column_list(): Without_column_listContext | null {
        return this.getRuleContext(0, Without_column_listContext);
    }
    public where_expr(): Where_exprContext | null {
        return this.getRuleContext(0, Where_exprContext);
    }
    public group_by_clause(): Group_by_clauseContext | null {
        return this.getRuleContext(0, Group_by_clauseContext);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public ext_order_by_clause(): Ext_order_by_clauseContext | null {
        return this.getRuleContext(0, Ext_order_by_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_core;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSelect_core) {
            return visitor.visitSelect_core(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_recognition_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode {
        return this.getToken(YQLParser.MATCH_RECOGNIZE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern_common_syntax(): Row_pattern_common_syntaxContext {
        return this.getRuleContext(0, Row_pattern_common_syntaxContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public window_partition_clause(): Window_partition_clauseContext | null {
        return this.getRuleContext(0, Window_partition_clauseContext);
    }
    public order_by_clause(): Order_by_clauseContext | null {
        return this.getRuleContext(0, Order_by_clauseContext);
    }
    public row_pattern_measures(): Row_pattern_measuresContext | null {
        return this.getRuleContext(0, Row_pattern_measuresContext);
    }
    public row_pattern_rows_per_match(): Row_pattern_rows_per_matchContext | null {
        return this.getRuleContext(0, Row_pattern_rows_per_matchContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_recognition_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_recognition_clause) {
            return visitor.visitRow_pattern_recognition_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_rows_per_matchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONE, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public PER(): antlr.TerminalNode {
        return this.getToken(YQLParser.PER, 0)!;
    }
    public MATCH(): antlr.TerminalNode {
        return this.getToken(YQLParser.MATCH, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public row_pattern_empty_match_handling(): Row_pattern_empty_match_handlingContext | null {
        return this.getRuleContext(0, Row_pattern_empty_match_handlingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_rows_per_match;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_rows_per_match) {
            return visitor.visitRow_pattern_rows_per_match(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_empty_match_handlingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SHOW, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCHES, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OMIT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNMATCHED, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_empty_match_handling;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_empty_match_handling) {
            return visitor.visitRow_pattern_empty_match_handling(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_measuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MEASURES(): antlr.TerminalNode {
        return this.getToken(YQLParser.MEASURES, 0)!;
    }
    public row_pattern_measure_list(): Row_pattern_measure_listContext {
        return this.getRuleContext(0, Row_pattern_measure_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_measures;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_measures) {
            return visitor.visitRow_pattern_measures(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_measure_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_measure_definition(): Row_pattern_measure_definitionContext[];
    public row_pattern_measure_definition(i: number): Row_pattern_measure_definitionContext | null;
    public row_pattern_measure_definition(i?: number): Row_pattern_measure_definitionContext[] | Row_pattern_measure_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_measure_definitionContext);
        }

        return this.getRuleContext(i, Row_pattern_measure_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_measure_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_measure_list) {
            return visitor.visitRow_pattern_measure_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_measure_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_measure_definition;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_measure_definition) {
            return visitor.visitRow_pattern_measure_definition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_common_syntaxContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PATTERN(): antlr.TerminalNode {
        return this.getToken(YQLParser.PATTERN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern(): Row_patternContext {
        return this.getRuleContext(0, Row_patternContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public DEFINE(): antlr.TerminalNode {
        return this.getToken(YQLParser.DEFINE, 0)!;
    }
    public row_pattern_definition_list(): Row_pattern_definition_listContext {
        return this.getRuleContext(0, Row_pattern_definition_listContext)!;
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AFTER, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH, 0);
    }
    public row_pattern_skip_to(): Row_pattern_skip_toContext | null {
        return this.getRuleContext(0, Row_pattern_skip_toContext);
    }
    public row_pattern_initial_or_seek(): Row_pattern_initial_or_seekContext | null {
        return this.getRuleContext(0, Row_pattern_initial_or_seekContext);
    }
    public row_pattern_subset_clause(): Row_pattern_subset_clauseContext | null {
        return this.getRuleContext(0, Row_pattern_subset_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_common_syntax;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_common_syntax) {
            return visitor.visitRow_pattern_common_syntax(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_skip_toContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TSKIP(): antlr.TerminalNode {
        return this.getToken(YQLParser.TSKIP, 0)!;
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NEXT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PAST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LAST, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FIRST, 0);
    }
    public row_pattern_skip_to_variable_name(): Row_pattern_skip_to_variable_nameContext | null {
        return this.getRuleContext(0, Row_pattern_skip_to_variable_nameContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_skip_to;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_skip_to) {
            return visitor.visitRow_pattern_skip_to(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_skip_to_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_skip_to_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_skip_to_variable_name) {
            return visitor.visitRow_pattern_skip_to_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_initial_or_seekContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIAL, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEEK, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_initial_or_seek;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_initial_or_seek) {
            return visitor.visitRow_pattern_initial_or_seek(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_patternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_term(): Row_pattern_termContext[];
    public row_pattern_term(i: number): Row_pattern_termContext | null;
    public row_pattern_term(i?: number): Row_pattern_termContext[] | Row_pattern_termContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_termContext);
        }

        return this.getRuleContext(i, Row_pattern_termContext);
    }
    public PIPE(): antlr.TerminalNode[];
    public PIPE(i: number): antlr.TerminalNode | null;
    public PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PIPE);
    	} else {
    		return this.getToken(YQLParser.PIPE, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern) {
            return visitor.visitRow_pattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_termContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_factor(): Row_pattern_factorContext[];
    public row_pattern_factor(i: number): Row_pattern_factorContext | null;
    public row_pattern_factor(i?: number): Row_pattern_factorContext[] | Row_pattern_factorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_factorContext);
        }

        return this.getRuleContext(i, Row_pattern_factorContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_term;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_term) {
            return visitor.visitRow_pattern_term(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_factorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_primary(): Row_pattern_primaryContext {
        return this.getRuleContext(0, Row_pattern_primaryContext)!;
    }
    public row_pattern_quantifier(): Row_pattern_quantifierContext | null {
        return this.getRuleContext(0, Row_pattern_quantifierContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_factor;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_factor) {
            return visitor.visitRow_pattern_factor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_quantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLUS, 0);
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public integer(): IntegerContext[];
    public integer(i: number): IntegerContext | null;
    public integer(i?: number): IntegerContext[] | IntegerContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntegerContext);
        }

        return this.getRuleContext(i, IntegerContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_quantifier;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_quantifier) {
            return visitor.visitRow_pattern_quantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_primaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_primary_variable_name(): Row_pattern_primary_variable_nameContext | null {
        return this.getRuleContext(0, Row_pattern_primary_variable_nameContext);
    }
    public DOLLAR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOLLAR, 0);
    }
    public CARET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CARET, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public row_pattern(): Row_patternContext | null {
        return this.getRuleContext(0, Row_patternContext);
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.MINUS);
    	} else {
    		return this.getToken(YQLParser.MINUS, i);
    	}
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public row_pattern_permute(): Row_pattern_permuteContext | null {
        return this.getRuleContext(0, Row_pattern_permuteContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_primary;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_primary) {
            return visitor.visitRow_pattern_primary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_primary_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_primary_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_primary_variable_name) {
            return visitor.visitRow_pattern_primary_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_permuteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PERMUTE(): antlr.TerminalNode {
        return this.getToken(YQLParser.PERMUTE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern(): Row_patternContext[];
    public row_pattern(i: number): Row_patternContext | null;
    public row_pattern(i?: number): Row_patternContext[] | Row_patternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_patternContext);
        }

        return this.getRuleContext(i, Row_patternContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_permute;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_permute) {
            return visitor.visitRow_pattern_permute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBSET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SUBSET, 0)!;
    }
    public row_pattern_subset_list(): Row_pattern_subset_listContext {
        return this.getRuleContext(0, Row_pattern_subset_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_clause) {
            return visitor.visitRow_pattern_subset_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_subset_item(): Row_pattern_subset_itemContext[];
    public row_pattern_subset_item(i: number): Row_pattern_subset_itemContext | null;
    public row_pattern_subset_item(i?: number): Row_pattern_subset_itemContext[] | Row_pattern_subset_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_subset_itemContext);
        }

        return this.getRuleContext(i, Row_pattern_subset_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_list) {
            return visitor.visitRow_pattern_subset_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_subset_item_variable_name(): Row_pattern_subset_item_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_subset_item_variable_nameContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern_subset_rhs(): Row_pattern_subset_rhsContext {
        return this.getRuleContext(0, Row_pattern_subset_rhsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_item;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_item) {
            return visitor.visitRow_pattern_subset_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_item_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_item_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_item_variable_name) {
            return visitor.visitRow_pattern_subset_item_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_rhsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_subset_rhs_variable_name(): Row_pattern_subset_rhs_variable_nameContext[];
    public row_pattern_subset_rhs_variable_name(i: number): Row_pattern_subset_rhs_variable_nameContext | null;
    public row_pattern_subset_rhs_variable_name(i?: number): Row_pattern_subset_rhs_variable_nameContext[] | Row_pattern_subset_rhs_variable_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_subset_rhs_variable_nameContext);
        }

        return this.getRuleContext(i, Row_pattern_subset_rhs_variable_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_rhs;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_rhs) {
            return visitor.visitRow_pattern_subset_rhs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_subset_rhs_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_rhs_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_subset_rhs_variable_name) {
            return visitor.visitRow_pattern_subset_rhs_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_definition_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_definition(): Row_pattern_definitionContext[];
    public row_pattern_definition(i: number): Row_pattern_definitionContext | null;
    public row_pattern_definition(i?: number): Row_pattern_definitionContext[] | Row_pattern_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_definitionContext);
        }

        return this.getRuleContext(i, Row_pattern_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_definition_list) {
            return visitor.visitRow_pattern_definition_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_definition_variable_name(): Row_pattern_definition_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_definition_variable_nameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public row_pattern_definition_search_condition(): Row_pattern_definition_search_conditionContext {
        return this.getRuleContext(0, Row_pattern_definition_search_conditionContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_definition) {
            return visitor.visitRow_pattern_definition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_definition_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_definition_variable_name) {
            return visitor.visitRow_pattern_definition_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_definition_search_conditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public search_condition(): Search_conditionContext {
        return this.getRuleContext(0, Search_conditionContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition_search_condition;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_definition_search_condition) {
            return visitor.visitRow_pattern_definition_search_condition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Search_conditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_search_condition;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSearch_condition) {
            return visitor.visitSearch_condition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_pattern_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_variable_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRow_pattern_variable_name) {
            return visitor.visitRow_pattern_variable_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Order_by_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public sort_specification_list(): Sort_specification_listContext {
        return this.getRuleContext(0, Sort_specification_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_order_by_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOrder_by_clause) {
            return visitor.visitOrder_by_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Ext_order_by_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public order_by_clause(): Order_by_clauseContext {
        return this.getRuleContext(0, Order_by_clauseContext)!;
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ext_order_by_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExt_order_by_clause) {
            return visitor.visitExt_order_by_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Group_by_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUP, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext {
        return this.getRuleContext(0, Opt_set_quantifierContext)!;
    }
    public grouping_element_list(): Grouping_element_listContext {
        return this.getRuleContext(0, Grouping_element_listContext)!;
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMPACT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_group_by_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGroup_by_clause) {
            return visitor.visitGroup_by_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Grouping_element_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public grouping_element(): Grouping_elementContext[];
    public grouping_element(i: number): Grouping_elementContext | null;
    public grouping_element(i?: number): Grouping_elementContext[] | Grouping_elementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Grouping_elementContext);
        }

        return this.getRuleContext(i, Grouping_elementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grouping_element_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGrouping_element_list) {
            return visitor.visitGrouping_element_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Grouping_elementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ordinary_grouping_set(): Ordinary_grouping_setContext | null {
        return this.getRuleContext(0, Ordinary_grouping_setContext);
    }
    public rollup_list(): Rollup_listContext | null {
        return this.getRuleContext(0, Rollup_listContext);
    }
    public cube_list(): Cube_listContext | null {
        return this.getRuleContext(0, Cube_listContext);
    }
    public grouping_sets_specification(): Grouping_sets_specificationContext | null {
        return this.getRuleContext(0, Grouping_sets_specificationContext);
    }
    public hopping_window_specification(): Hopping_window_specificationContext | null {
        return this.getRuleContext(0, Hopping_window_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grouping_element;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGrouping_element) {
            return visitor.visitGrouping_element(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Ordinary_grouping_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_expr(): Named_exprContext {
        return this.getRuleContext(0, Named_exprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ordinary_grouping_set;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOrdinary_grouping_set) {
            return visitor.visitOrdinary_grouping_set(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Ordinary_grouping_set_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ordinary_grouping_set(): Ordinary_grouping_setContext[];
    public ordinary_grouping_set(i: number): Ordinary_grouping_setContext | null;
    public ordinary_grouping_set(i?: number): Ordinary_grouping_setContext[] | Ordinary_grouping_setContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Ordinary_grouping_setContext);
        }

        return this.getRuleContext(i, Ordinary_grouping_setContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ordinary_grouping_set_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOrdinary_grouping_set_list) {
            return visitor.visitOrdinary_grouping_set_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Rollup_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLLUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.ROLLUP, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public ordinary_grouping_set_list(): Ordinary_grouping_set_listContext {
        return this.getRuleContext(0, Ordinary_grouping_set_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_rollup_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRollup_list) {
            return visitor.visitRollup_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cube_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CUBE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CUBE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public ordinary_grouping_set_list(): Ordinary_grouping_set_listContext {
        return this.getRuleContext(0, Ordinary_grouping_set_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cube_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCube_list) {
            return visitor.visitCube_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Grouping_sets_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUPING(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUPING, 0)!;
    }
    public SETS(): antlr.TerminalNode {
        return this.getToken(YQLParser.SETS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public grouping_element_list(): Grouping_element_listContext {
        return this.getRuleContext(0, Grouping_element_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grouping_sets_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGrouping_sets_specification) {
            return visitor.visitGrouping_sets_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Hopping_window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOP(): antlr.TerminalNode {
        return this.getToken(YQLParser.HOP, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_hopping_window_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitHopping_window_specification) {
            return visitor.visitHopping_window_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Result_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_id_prefix(): Opt_id_prefixContext | null {
        return this.getRuleContext(0, Opt_id_prefixContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public an_id_as_compat(): An_id_as_compatContext | null {
        return this.getRuleContext(0, An_id_as_compatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_result_column;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitResult_column) {
            return visitor.visitResult_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Join_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public flatten_source(): Flatten_sourceContext[];
    public flatten_source(i: number): Flatten_sourceContext | null;
    public flatten_source(i?: number): Flatten_sourceContext[] | Flatten_sourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Flatten_sourceContext);
        }

        return this.getRuleContext(i, Flatten_sourceContext);
    }
    public ANY(): antlr.TerminalNode[];
    public ANY(i: number): antlr.TerminalNode | null;
    public ANY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ANY);
    	} else {
    		return this.getToken(YQLParser.ANY, i);
    	}
    }
    public join_op(): Join_opContext[];
    public join_op(i: number): Join_opContext | null;
    public join_op(i?: number): Join_opContext[] | Join_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_opContext);
        }

        return this.getRuleContext(i, Join_opContext);
    }
    public join_constraint(): Join_constraintContext[];
    public join_constraint(i: number): Join_constraintContext | null;
    public join_constraint(i?: number): Join_constraintContext[] | Join_constraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_constraintContext);
        }

        return this.getRuleContext(i, Join_constraintContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_join_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJoin_source) {
            return visitor.visitJoin_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_column;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_column) {
            return visitor.visitNamed_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Flatten_by_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_column(): Named_columnContext | null {
        return this.getRuleContext(0, Named_columnContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public named_expr_list(): Named_expr_listContext | null {
        return this.getRuleContext(0, Named_expr_listContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_flatten_by_arg;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFlatten_by_arg) {
            return visitor.visitFlatten_by_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Flatten_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_single_source(): Named_single_sourceContext {
        return this.getRuleContext(0, Named_single_sourceContext)!;
    }
    public FLATTEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FLATTEN, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public flatten_by_arg(): Flatten_by_argContext | null {
        return this.getRuleContext(0, Flatten_by_argContext);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMNS, 0);
    }
    public OPTIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTIONAL, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIST, 0);
    }
    public DICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DICT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_flatten_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFlatten_source) {
            return visitor.visitFlatten_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_single_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public single_source(): Single_sourceContext {
        return this.getRuleContext(0, Single_sourceContext)!;
    }
    public row_pattern_recognition_clause(): Row_pattern_recognition_clauseContext | null {
        return this.getRuleContext(0, Row_pattern_recognition_clauseContext);
    }
    public sample_clause(): Sample_clauseContext | null {
        return this.getRuleContext(0, Sample_clauseContext);
    }
    public tablesample_clause(): Tablesample_clauseContext | null {
        return this.getRuleContext(0, Tablesample_clauseContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public an_id_as_compat(): An_id_as_compatContext | null {
        return this.getRuleContext(0, An_id_as_compatContext);
    }
    public pure_column_list(): Pure_column_listContext | null {
        return this.getRuleContext(0, Pure_column_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_single_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_single_source) {
            return visitor.visitNamed_single_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Single_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_ref(): Table_refContext | null {
        return this.getRuleContext(0, Table_refContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_single_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSingle_source) {
            return visitor.visitSingle_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sample_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAMPLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SAMPLE, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sample_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSample_clause) {
            return visitor.visitSample_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Tablesample_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLESAMPLE, 0)!;
    }
    public sampling_mode(): Sampling_modeContext {
        return this.getRuleContext(0, Sampling_modeContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public repeatable_clause(): Repeatable_clauseContext | null {
        return this.getRuleContext(0, Repeatable_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_tablesample_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTablesample_clause) {
            return visitor.visitTablesample_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sampling_modeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BERNOULLI, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYSTEM, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sampling_mode;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSampling_mode) {
            return visitor.visitSampling_mode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Repeatable_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPEATABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPEATABLE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_repeatable_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRepeatable_clause) {
            return visitor.visitRepeatable_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Join_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JOIN, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INNER, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CROSS, 0);
    }
    public NATURAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NATURAL, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RIGHT, 0);
    }
    public EXCLUSION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUSION, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FULL, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OUTER, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONLY, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEMI, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_join_op;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJoin_op) {
            return visitor.visitJoin_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Join_constraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USING, 0);
    }
    public pure_column_or_named_list(): Pure_column_or_named_listContext | null {
        return this.getRuleContext(0, Pure_column_or_named_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_join_constraint;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitJoin_constraint) {
            return visitor.visitJoin_constraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Returning_columns_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURNING(): antlr.TerminalNode {
        return this.getToken(YQLParser.RETURNING, 0)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_returning_columns_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReturning_columns_list) {
            return visitor.visitReturning_columns_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Into_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(YQLParser.INTO, 0)!;
    }
    public into_simple_table_ref(): Into_simple_table_refContext {
        return this.getRuleContext(0, Into_simple_table_refContext)!;
    }
    public into_values_source(): Into_values_sourceContext {
        return this.getRuleContext(0, Into_values_sourceContext)!;
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public ABORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ABORT, 0);
    }
    public REVERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVERT, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public UPSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPSERT, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public returning_columns_list(): Returning_columns_listContext | null {
        return this.getRuleContext(0, Returning_columns_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_into_table_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInto_table_stmt) {
            return visitor.visitInto_table_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Into_table_stmt_yqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(YQLParser.INTO, 0)!;
    }
    public into_simple_table_ref(): Into_simple_table_refContext {
        return this.getRuleContext(0, Into_simple_table_refContext)!;
    }
    public into_values_source(): Into_values_sourceContext {
        return this.getRuleContext(0, Into_values_sourceContext)!;
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public ABORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ABORT, 0);
    }
    public REVERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVERT, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_into_table_stmt_yq;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInto_table_stmt_yq) {
            return visitor.visitInto_table_stmt_yq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Into_values_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public values_source(): Values_sourceContext | null {
        return this.getRuleContext(0, Values_sourceContext);
    }
    public pure_column_list(): Pure_column_listContext | null {
        return this.getRuleContext(0, Pure_column_listContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VALUES, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_into_values_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInto_values_source) {
            return visitor.visitInto_values_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Values_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(YQLParser.VALUES, 0)!;
    }
    public values_source_row_list(): Values_source_row_listContext {
        return this.getRuleContext(0, Values_source_row_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValues_stmt) {
            return visitor.visitValues_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Values_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValues_source) {
            return visitor.visitValues_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Values_source_row_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public values_source_row(): Values_source_rowContext[];
    public values_source_row(i: number): Values_source_rowContext | null;
    public values_source_row(i?: number): Values_source_rowContext[] | Values_source_rowContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Values_source_rowContext);
        }

        return this.getRuleContext(i, Values_source_rowContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_source_row_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValues_source_row_list) {
            return visitor.visitValues_source_row_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Values_source_rowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_source_row;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitValues_source_row) {
            return visitor.visitValues_source_row(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Simple_values_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_simple_values_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSimple_values_source) {
            return visitor.visitSimple_values_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_external_data_source_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(YQLParser.DATA, 0)!;
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SOURCE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public with_table_settings(): With_table_settingsContext {
        return this.getRuleContext(0, With_table_settingsContext)!;
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_external_data_source_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_external_data_source_stmt) {
            return visitor.visitCreate_external_data_source_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_external_data_source_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(YQLParser.DATA, 0)!;
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SOURCE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_external_data_source_action(): Alter_external_data_source_actionContext[];
    public alter_external_data_source_action(i: number): Alter_external_data_source_actionContext | null;
    public alter_external_data_source_action(i?: number): Alter_external_data_source_actionContext[] | Alter_external_data_source_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_external_data_source_actionContext);
        }

        return this.getRuleContext(i, Alter_external_data_source_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_data_source_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_external_data_source_stmt) {
            return visitor.visitAlter_external_data_source_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_external_data_source_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_uncompatContext);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_data_source_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_external_data_source_action) {
            return visitor.visitAlter_external_data_source_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_external_data_source_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(YQLParser.DATA, 0)!;
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SOURCE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_external_data_source_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_external_data_source_stmt) {
            return visitor.visitDrop_external_data_source_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_view_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(YQLParser.VIEW, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public select_stmt(): Select_stmtContext {
        return this.getRuleContext(0, Select_stmtContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public create_object_features(): Create_object_featuresContext | null {
        return this.getRuleContext(0, Create_object_featuresContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_view_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_view_stmt) {
            return visitor.visitCreate_view_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_view_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(YQLParser.VIEW, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_view_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_view_stmt) {
            return visitor.visitDrop_view_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Upsert_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPSERT(): antlr.TerminalNode {
        return this.getToken(YQLParser.UPSERT, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public create_object_features(): Create_object_featuresContext | null {
        return this.getRuleContext(0, Create_object_featuresContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_upsert_object_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUpsert_object_stmt) {
            return visitor.visitUpsert_object_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public create_object_features(): Create_object_featuresContext | null {
        return this.getRuleContext(0, Create_object_featuresContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_object_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_object_stmt) {
            return visitor.visitCreate_object_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public object_features(): Object_featuresContext {
        return this.getRuleContext(0, Object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_object_features;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_object_features) {
            return visitor.visitCreate_object_features(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public alter_object_features(): Alter_object_featuresContext {
        return this.getRuleContext(0, Alter_object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_object_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_object_stmt) {
            return visitor.visitAlter_object_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public object_features(): Object_featuresContext {
        return this.getRuleContext(0, Object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_object_features;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_object_features) {
            return visitor.visitAlter_object_features(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public drop_object_features(): Drop_object_featuresContext | null {
        return this.getRuleContext(0, Drop_object_featuresContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_object_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_object_stmt) {
            return visitor.visitDrop_object_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public object_features(): Object_featuresContext {
        return this.getRuleContext(0, Object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_object_features;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_object_features) {
            return visitor.visitDrop_object_features(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_feature_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_feature_value) {
            return visitor.visitObject_feature_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_feature_kvContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public object_feature_value(): Object_feature_valueContext {
        return this.getRuleContext(0, Object_feature_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature_kv;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_feature_kv) {
            return visitor.visitObject_feature_kv(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_feature_flagContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature_flag;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_feature_flag) {
            return visitor.visitObject_feature_flag(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_featureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_feature_kv(): Object_feature_kvContext | null {
        return this.getRuleContext(0, Object_feature_kvContext);
    }
    public object_feature_flag(): Object_feature_flagContext | null {
        return this.getRuleContext(0, Object_feature_flagContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_feature) {
            return visitor.visitObject_feature(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_feature(): Object_featureContext[];
    public object_feature(i: number): Object_featureContext | null;
    public object_feature(i?: number): Object_featureContext[] | Object_featureContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Object_featureContext);
        }

        return this.getRuleContext(i, Object_featureContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_features;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_features) {
            return visitor.visitObject_features(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_type_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_type_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_type_ref) {
            return visitor.visitObject_type_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public create_table_entry(): Create_table_entryContext[];
    public create_table_entry(i: number): Create_table_entryContext | null;
    public create_table_entry(i?: number): Create_table_entryContext[] | Create_table_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Create_table_entryContext);
        }

        return this.getRuleContext(i, Create_table_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public TABLESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESTORE, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMP, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMPORARY, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public table_inherits(): Table_inheritsContext | null {
        return this.getRuleContext(0, Table_inheritsContext);
    }
    public table_partition_by(): Table_partition_byContext | null {
        return this.getRuleContext(0, Table_partition_byContext);
    }
    public with_table_settings(): With_table_settingsContext | null {
        return this.getRuleContext(0, With_table_settingsContext);
    }
    public table_tablestore(): Table_tablestoreContext | null {
        return this.getRuleContext(0, Table_tablestoreContext);
    }
    public table_as_source(): Table_as_sourceContext | null {
        return this.getRuleContext(0, Table_as_sourceContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_table_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_table_stmt) {
            return visitor.visitCreate_table_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_table_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_schema(): Column_schemaContext | null {
        return this.getRuleContext(0, Column_schemaContext);
    }
    public table_constraint(): Table_constraintContext | null {
        return this.getRuleContext(0, Table_constraintContext);
    }
    public table_index(): Table_indexContext | null {
        return this.getRuleContext(0, Table_indexContext);
    }
    public family_entry(): Family_entryContext | null {
        return this.getRuleContext(0, Family_entryContext);
    }
    public changefeed(): ChangefeedContext | null {
        return this.getRuleContext(0, ChangefeedContext);
    }
    public an_id_schema(): An_id_schemaContext | null {
        return this.getRuleContext(0, An_id_schemaContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_table_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_table_entry) {
            return visitor.visitCreate_table_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_backup_collection_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public backup_collection(): Backup_collectionContext {
        return this.getRuleContext(0, Backup_collectionContext)!;
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public backup_collection_settings(): Backup_collection_settingsContext {
        return this.getRuleContext(0, Backup_collection_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public create_backup_collection_entries(): Create_backup_collection_entriesContext | null {
        return this.getRuleContext(0, Create_backup_collection_entriesContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_backup_collection_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_backup_collection_stmt) {
            return visitor.visitCreate_backup_collection_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_backup_collection_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public backup_collection(): Backup_collectionContext {
        return this.getRuleContext(0, Backup_collectionContext)!;
    }
    public alter_backup_collection_actions(): Alter_backup_collection_actionsContext | null {
        return this.getRuleContext(0, Alter_backup_collection_actionsContext);
    }
    public alter_backup_collection_entries(): Alter_backup_collection_entriesContext | null {
        return this.getRuleContext(0, Alter_backup_collection_entriesContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_backup_collection_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_backup_collection_stmt) {
            return visitor.visitAlter_backup_collection_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_backup_collection_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public backup_collection(): Backup_collectionContext {
        return this.getRuleContext(0, Backup_collectionContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_backup_collection_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_backup_collection_stmt) {
            return visitor.visitDrop_backup_collection_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_backup_collection_entriesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATABASE, 0);
    }
    public create_backup_collection_entries_many(): Create_backup_collection_entries_manyContext | null {
        return this.getRuleContext(0, Create_backup_collection_entries_manyContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_backup_collection_entries;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_backup_collection_entries) {
            return visitor.visitCreate_backup_collection_entries(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_backup_collection_entries_manyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public table_list(): Table_listContext {
        return this.getRuleContext(0, Table_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_backup_collection_entries_many;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_backup_collection_entries_many) {
            return visitor.visitCreate_backup_collection_entries_many(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode[];
    public TABLE(i: number): antlr.TerminalNode | null;
    public TABLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.TABLE);
    	} else {
    		return this.getToken(YQLParser.TABLE, i);
    	}
    }
    public an_id_table(): An_id_tableContext[];
    public an_id_table(i: number): An_id_tableContext | null;
    public an_id_table(i?: number): An_id_tableContext[] | An_id_tableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_tableContext);
        }

        return this.getRuleContext(i, An_id_tableContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_list) {
            return visitor.visitTable_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_backup_collection_actionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_backup_collection_action(): Alter_backup_collection_actionContext[];
    public alter_backup_collection_action(i: number): Alter_backup_collection_actionContext | null;
    public alter_backup_collection_action(i?: number): Alter_backup_collection_actionContext[] | Alter_backup_collection_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_backup_collection_actionContext);
        }

        return this.getRuleContext(i, Alter_backup_collection_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_backup_collection_actions;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_backup_collection_actions) {
            return visitor.visitAlter_backup_collection_actions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_backup_collection_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_backup_collection_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_backup_collection_action) {
            return visitor.visitAlter_backup_collection_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_backup_collection_entriesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_backup_collection_entry(): Alter_backup_collection_entryContext[];
    public alter_backup_collection_entry(i: number): Alter_backup_collection_entryContext | null;
    public alter_backup_collection_entry(i?: number): Alter_backup_collection_entryContext[] | Alter_backup_collection_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_backup_collection_entryContext);
        }

        return this.getRuleContext(i, Alter_backup_collection_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_backup_collection_entries;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_backup_collection_entries) {
            return visitor.visitAlter_backup_collection_entries(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_backup_collection_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ADD, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATABASE, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public an_id_table(): An_id_tableContext | null {
        return this.getRuleContext(0, An_id_tableContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_backup_collection_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_backup_collection_entry) {
            return visitor.visitAlter_backup_collection_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Backup_collectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BACKUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.BACKUP, 0)!;
    }
    public COLLECTION(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLLECTION, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_backup_collection;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBackup_collection) {
            return visitor.visitBackup_collection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Backup_collection_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public backup_collection_settings_entry(): Backup_collection_settings_entryContext[];
    public backup_collection_settings_entry(i: number): Backup_collection_settings_entryContext | null;
    public backup_collection_settings_entry(i?: number): Backup_collection_settings_entryContext[] | Backup_collection_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Backup_collection_settings_entryContext);
        }

        return this.getRuleContext(i, Backup_collection_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_backup_collection_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBackup_collection_settings) {
            return visitor.visitBackup_collection_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Backup_collection_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public table_setting_value(): Table_setting_valueContext {
        return this.getRuleContext(0, Table_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_backup_collection_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBackup_collection_settings_entry) {
            return visitor.visitBackup_collection_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Backup_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BACKUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.BACKUP, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public INCREMENTAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INCREMENTAL, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_backup_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBackup_stmt) {
            return visitor.visitBackup_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Restore_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTORE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESTORE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_restore_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRestore_stmt) {
            return visitor.visitRestore_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_inheritsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INHERITS(): antlr.TerminalNode {
        return this.getToken(YQLParser.INHERITS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext[];
    public simple_table_ref_core(i: number): Simple_table_ref_coreContext | null;
    public simple_table_ref_core(i?: number): Simple_table_ref_coreContext[] | Simple_table_ref_coreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Simple_table_ref_coreContext);
        }

        return this.getRuleContext(i, Simple_table_ref_coreContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_inherits;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_inherits) {
            return visitor.visitTable_inherits(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_partition_byContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(YQLParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public HASH(): antlr.TerminalNode {
        return this.getToken(YQLParser.HASH, 0)!;
    }
    public pure_column_list(): Pure_column_listContext {
        return this.getRuleContext(0, Pure_column_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_partition_by;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_partition_by) {
            return visitor.visitTable_partition_by(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class With_table_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public table_settings_entry(): Table_settings_entryContext[];
    public table_settings_entry(i: number): Table_settings_entryContext | null;
    public table_settings_entry(i?: number): Table_settings_entryContext[] | Table_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_settings_entryContext);
        }

        return this.getRuleContext(i, Table_settings_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_with_table_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWith_table_settings) {
            return visitor.visitWith_table_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_tablestoreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESTORE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLESTORE, 0)!;
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext {
        return this.getRuleContext(0, Simple_table_ref_coreContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_tablestore;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_tablestore) {
            return visitor.visitTable_tablestore(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public table_setting_value(): Table_setting_valueContext {
        return this.getRuleContext(0, Table_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_settings_entry) {
            return visitor.visitTable_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_as_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public values_source(): Values_sourceContext {
        return this.getRuleContext(0, Values_sourceContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_as_source;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_as_source) {
            return visitor.visitTable_as_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public alter_table_action(): Alter_table_actionContext[];
    public alter_table_action(i: number): Alter_table_actionContext | null;
    public alter_table_action(i?: number): Alter_table_actionContext[] | Alter_table_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_actionContext);
        }

        return this.getRuleContext(i, Alter_table_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_stmt) {
            return visitor.visitAlter_table_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_add_column(): Alter_table_add_columnContext | null {
        return this.getRuleContext(0, Alter_table_add_columnContext);
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext | null {
        return this.getRuleContext(0, Alter_table_drop_columnContext);
    }
    public alter_table_alter_column(): Alter_table_alter_columnContext | null {
        return this.getRuleContext(0, Alter_table_alter_columnContext);
    }
    public alter_table_add_column_family(): Alter_table_add_column_familyContext | null {
        return this.getRuleContext(0, Alter_table_add_column_familyContext);
    }
    public alter_table_alter_column_family(): Alter_table_alter_column_familyContext | null {
        return this.getRuleContext(0, Alter_table_alter_column_familyContext);
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_uncompatContext);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public alter_table_add_index(): Alter_table_add_indexContext | null {
        return this.getRuleContext(0, Alter_table_add_indexContext);
    }
    public alter_table_drop_index(): Alter_table_drop_indexContext | null {
        return this.getRuleContext(0, Alter_table_drop_indexContext);
    }
    public alter_table_rename_to(): Alter_table_rename_toContext | null {
        return this.getRuleContext(0, Alter_table_rename_toContext);
    }
    public alter_table_add_changefeed(): Alter_table_add_changefeedContext | null {
        return this.getRuleContext(0, Alter_table_add_changefeedContext);
    }
    public alter_table_alter_changefeed(): Alter_table_alter_changefeedContext | null {
        return this.getRuleContext(0, Alter_table_alter_changefeedContext);
    }
    public alter_table_drop_changefeed(): Alter_table_drop_changefeedContext | null {
        return this.getRuleContext(0, Alter_table_drop_changefeedContext);
    }
    public alter_table_rename_index_to(): Alter_table_rename_index_toContext | null {
        return this.getRuleContext(0, Alter_table_rename_index_toContext);
    }
    public alter_table_alter_index(): Alter_table_alter_indexContext | null {
        return this.getRuleContext(0, Alter_table_alter_indexContext);
    }
    public alter_table_alter_column_drop_not_null(): Alter_table_alter_column_drop_not_nullContext | null {
        return this.getRuleContext(0, Alter_table_alter_column_drop_not_nullContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_action) {
            return visitor.visitAlter_table_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_external_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public alter_external_table_action(): Alter_external_table_actionContext[];
    public alter_external_table_action(i: number): Alter_external_table_actionContext | null;
    public alter_external_table_action(i?: number): Alter_external_table_actionContext[] | Alter_external_table_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_external_table_actionContext);
        }

        return this.getRuleContext(i, Alter_external_table_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_table_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_external_table_stmt) {
            return visitor.visitAlter_external_table_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_external_table_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_add_column(): Alter_table_add_columnContext | null {
        return this.getRuleContext(0, Alter_table_add_columnContext);
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext | null {
        return this.getRuleContext(0, Alter_table_drop_columnContext);
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_uncompatContext);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_table_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_external_table_action) {
            return visitor.visitAlter_external_table_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_store_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public TABLESTORE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLESTORE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_table_store_action(): Alter_table_store_actionContext[];
    public alter_table_store_action(i: number): Alter_table_store_actionContext | null;
    public alter_table_store_action(i?: number): Alter_table_store_actionContext[] | Alter_table_store_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_store_actionContext);
        }

        return this.getRuleContext(i, Alter_table_store_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_store_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_store_stmt) {
            return visitor.visitAlter_table_store_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_store_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_add_column(): Alter_table_add_columnContext | null {
        return this.getRuleContext(0, Alter_table_add_columnContext);
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext | null {
        return this.getRuleContext(0, Alter_table_drop_columnContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_store_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_store_action) {
            return visitor.visitAlter_table_store_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_add_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public column_schema(): Column_schemaContext {
        return this.getRuleContext(0, Column_schemaContext)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_column;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_add_column) {
            return visitor.visitAlter_table_add_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_drop_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_drop_column;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_drop_column) {
            return visitor.visitAlter_table_drop_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_alter_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLUMN, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public family_relation(): Family_relationContext {
        return this.getRuleContext(0, Family_relationContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_column;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_alter_column) {
            return visitor.visitAlter_table_alter_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_alter_column_drop_not_nullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLUMN, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(YQLParser.NOT, 0)!;
    }
    public NULL(): antlr.TerminalNode {
        return this.getToken(YQLParser.NULL, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_column_drop_not_null;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_alter_column_drop_not_null) {
            return visitor.visitAlter_table_alter_column_drop_not_null(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_add_column_familyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public family_entry(): Family_entryContext {
        return this.getRuleContext(0, Family_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_column_family;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_add_column_family) {
            return visitor.visitAlter_table_add_column_family(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_alter_column_familyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(YQLParser.FAMILY, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public family_setting_value(): Family_setting_valueContext {
        return this.getRuleContext(0, Family_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_column_family;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_alter_column_family) {
            return visitor.visitAlter_table_alter_column_family(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_set_table_setting_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public table_setting_value(): Table_setting_valueContext {
        return this.getRuleContext(0, Table_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_set_table_setting_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_set_table_setting_uncompat) {
            return visitor.visitAlter_table_set_table_setting_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_set_table_setting_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public alter_table_setting_entry(): Alter_table_setting_entryContext[];
    public alter_table_setting_entry(i: number): Alter_table_setting_entryContext | null;
    public alter_table_setting_entry(i?: number): Alter_table_setting_entryContext[] | Alter_table_setting_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_setting_entryContext);
        }

        return this.getRuleContext(i, Alter_table_setting_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_set_table_setting_compat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_set_table_setting_compat) {
            return visitor.visitAlter_table_set_table_setting_compat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_reset_table_settingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_reset_table_setting;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_reset_table_setting) {
            return visitor.visitAlter_table_reset_table_setting(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_add_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public table_index(): Table_indexContext {
        return this.getRuleContext(0, Table_indexContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_index;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_add_index) {
            return visitor.visitAlter_table_add_index(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_drop_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(YQLParser.INDEX, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_drop_index;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_drop_index) {
            return visitor.visitAlter_table_drop_index(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_rename_toContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(YQLParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(YQLParser.TO, 0)!;
    }
    public an_id_table(): An_id_tableContext {
        return this.getRuleContext(0, An_id_tableContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_rename_to;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_rename_to) {
            return visitor.visitAlter_table_rename_to(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_rename_index_toContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(YQLParser.RENAME, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(YQLParser.INDEX, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(YQLParser.TO, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_rename_index_to;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_rename_index_to) {
            return visitor.visitAlter_table_rename_index_to(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_add_changefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public changefeed(): ChangefeedContext {
        return this.getRuleContext(0, ChangefeedContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_changefeed;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_add_changefeed) {
            return visitor.visitAlter_table_add_changefeed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_alter_changefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public CHANGEFEED(): antlr.TerminalNode {
        return this.getToken(YQLParser.CHANGEFEED, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public changefeed_alter_settings(): Changefeed_alter_settingsContext {
        return this.getRuleContext(0, Changefeed_alter_settingsContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_changefeed;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_alter_changefeed) {
            return visitor.visitAlter_table_alter_changefeed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_drop_changefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public CHANGEFEED(): antlr.TerminalNode {
        return this.getToken(YQLParser.CHANGEFEED, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_drop_changefeed;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_drop_changefeed) {
            return visitor.visitAlter_table_drop_changefeed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_alter_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(YQLParser.INDEX, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public alter_table_alter_index_action(): Alter_table_alter_index_actionContext {
        return this.getRuleContext(0, Alter_table_alter_index_actionContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_index;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_alter_index) {
            return visitor.visitAlter_table_alter_index(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_schema(): An_id_schemaContext {
        return this.getRuleContext(0, An_id_schemaContext)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public opt_column_constraints(): Opt_column_constraintsContext {
        return this.getRuleContext(0, Opt_column_constraintsContext)!;
    }
    public family_relation(): Family_relationContext | null {
        return this.getRuleContext(0, Family_relationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_schema;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitColumn_schema) {
            return visitor.visitColumn_schema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Family_relationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(YQLParser.FAMILY, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_relation;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFamily_relation) {
            return visitor.visitFamily_relation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_column_constraintsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_column_constraints;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOpt_column_constraints) {
            return visitor.visitOpt_column_constraints(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_order_by_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESC, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_order_by_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitColumn_order_by_specification) {
            return visitor.visitColumn_order_by_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_constraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIMARY, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.KEY, 0);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARTITION, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ORDER, 0);
    }
    public column_order_by_specification(): Column_order_by_specificationContext[];
    public column_order_by_specification(i: number): Column_order_by_specificationContext | null;
    public column_order_by_specification(i?: number): Column_order_by_specificationContext[] | Column_order_by_specificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_order_by_specificationContext);
        }

        return this.getRuleContext(i, Column_order_by_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_constraint;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_constraint) {
            return visitor.visitTable_constraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(YQLParser.INDEX, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public table_index_type(): Table_index_typeContext {
        return this.getRuleContext(0, Table_index_typeContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.LPAREN);
    	} else {
    		return this.getToken(YQLParser.LPAREN, i);
    	}
    }
    public an_id_schema(): An_id_schemaContext[];
    public an_id_schema(i: number): An_id_schemaContext | null;
    public an_id_schema(i?: number): An_id_schemaContext[] | An_id_schemaContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_schemaContext);
        }

        return this.getRuleContext(i, An_id_schemaContext);
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.RPAREN);
    	} else {
    		return this.getToken(YQLParser.RPAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public COVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COVER, 0);
    }
    public with_index_settings(): With_index_settingsContext | null {
        return this.getRuleContext(0, With_index_settingsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_index;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_index) {
            return visitor.visitTable_index(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_index_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public global_index(): Global_indexContext | null {
        return this.getRuleContext(0, Global_indexContext);
    }
    public local_index(): Local_indexContext | null {
        return this.getRuleContext(0, Local_indexContext);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USING, 0);
    }
    public index_subtype(): Index_subtypeContext | null {
        return this.getRuleContext(0, Index_subtypeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_index_type;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_index_type) {
            return visitor.visitTable_index_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Global_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GLOBAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.GLOBAL, 0)!;
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNIQUE, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYNC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYNC, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_global_index;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGlobal_index) {
            return visitor.visitGlobal_index(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Local_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.LOCAL, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_local_index;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLocal_index) {
            return visitor.visitLocal_index(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Index_subtypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_index_subtype;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIndex_subtype) {
            return visitor.visitIndex_subtype(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class With_index_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public index_setting_entry(): Index_setting_entryContext[];
    public index_setting_entry(i: number): Index_setting_entryContext | null;
    public index_setting_entry(i?: number): Index_setting_entryContext[] | Index_setting_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Index_setting_entryContext);
        }

        return this.getRuleContext(i, Index_setting_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_with_index_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWith_index_settings) {
            return visitor.visitWith_index_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Index_setting_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public index_setting_value(): Index_setting_valueContext {
        return this.getRuleContext(0, Index_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_index_setting_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIndex_setting_entry) {
            return visitor.visitIndex_setting_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Index_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_index_setting_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIndex_setting_value) {
            return visitor.visitIndex_setting_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHANGEFEED(): antlr.TerminalNode {
        return this.getToken(YQLParser.CHANGEFEED, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public changefeed_settings(): Changefeed_settingsContext {
        return this.getRuleContext(0, Changefeed_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitChangefeed) {
            return visitor.visitChangefeed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Changefeed_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public changefeed_settings_entry(): Changefeed_settings_entryContext[];
    public changefeed_settings_entry(i: number): Changefeed_settings_entryContext | null;
    public changefeed_settings_entry(i?: number): Changefeed_settings_entryContext[] | Changefeed_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Changefeed_settings_entryContext);
        }

        return this.getRuleContext(i, Changefeed_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitChangefeed_settings) {
            return visitor.visitChangefeed_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Changefeed_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public changefeed_setting_value(): Changefeed_setting_valueContext {
        return this.getRuleContext(0, Changefeed_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitChangefeed_settings_entry) {
            return visitor.visitChangefeed_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Changefeed_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_setting_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitChangefeed_setting_value) {
            return visitor.visitChangefeed_setting_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Changefeed_alter_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISABLE, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SET, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public changefeed_settings(): Changefeed_settingsContext | null {
        return this.getRuleContext(0, Changefeed_settingsContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_alter_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitChangefeed_alter_settings) {
            return visitor.visitChangefeed_alter_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_setting_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public table_setting_value(): Table_setting_valueContext {
        return this.getRuleContext(0, Table_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_setting_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_setting_entry) {
            return visitor.visitAlter_table_setting_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public split_boundaries(): Split_boundariesContext | null {
        return this.getRuleContext(0, Split_boundariesContext);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public SECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SECONDS, 0);
    }
    public MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MILLISECONDS, 0);
    }
    public MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MICROSECONDS, 0);
    }
    public NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NANOSECONDS, 0);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_setting_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_setting_value) {
            return visitor.visitTable_setting_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Family_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(YQLParser.FAMILY, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public family_settings(): Family_settingsContext {
        return this.getRuleContext(0, Family_settingsContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFamily_entry) {
            return visitor.visitFamily_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Family_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public family_settings_entry(): Family_settings_entryContext[];
    public family_settings_entry(i: number): Family_settings_entryContext | null;
    public family_settings_entry(i?: number): Family_settings_entryContext[] | Family_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Family_settings_entryContext);
        }

        return this.getRuleContext(i, Family_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFamily_settings) {
            return visitor.visitFamily_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Family_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public family_setting_value(): Family_setting_valueContext {
        return this.getRuleContext(0, Family_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFamily_settings_entry) {
            return visitor.visitFamily_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Family_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_setting_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFamily_setting_value) {
            return visitor.visitFamily_setting_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Split_boundariesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public literal_value_list(): Literal_value_listContext[];
    public literal_value_list(i: number): Literal_value_listContext | null;
    public literal_value_list(i?: number): Literal_value_listContext[] | Literal_value_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Literal_value_listContext);
        }

        return this.getRuleContext(i, Literal_value_listContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_split_boundaries;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSplit_boundaries) {
            return visitor.visitSplit_boundaries(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Literal_value_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public literal_value(): Literal_valueContext[];
    public literal_value(i: number): Literal_valueContext | null;
    public literal_value(i?: number): Literal_valueContext[] | Literal_valueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Literal_valueContext);
        }

        return this.getRuleContext(i, Literal_valueContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_literal_value_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitLiteral_value_list) {
            return visitor.visitLiteral_value_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_alter_index_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_uncompatContext);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_index_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_alter_index_action) {
            return visitor.visitAlter_table_alter_index_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public TABLESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESTORE, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_table_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_table_stmt) {
            return visitor.visitDrop_table_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_user_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(YQLParser.USER, 0)!;
    }
    public role_name(): Role_nameContext {
        return this.getRuleContext(0, Role_nameContext)!;
    }
    public create_user_option(): Create_user_optionContext | null {
        return this.getRuleContext(0, Create_user_optionContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_user_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_user_stmt) {
            return visitor.visitCreate_user_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_user_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(YQLParser.USER, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public create_user_option(): Create_user_optionContext | null {
        return this.getRuleContext(0, Create_user_optionContext);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RENAME, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_user_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_user_stmt) {
            return visitor.visitAlter_user_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_group_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUP, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_group_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_group_stmt) {
            return visitor.visitCreate_group_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_group_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUP, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RENAME, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ADD, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_group_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_group_stmt) {
            return visitor.visitAlter_group_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_role_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUP, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_role_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_role_stmt) {
            return visitor.visitDrop_role_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Role_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_role_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRole_name) {
            return visitor.visitRole_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_user_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD(): antlr.TerminalNode {
        return this.getToken(YQLParser.PASSWORD, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENCRYPTED, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_user_option;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_user_option) {
            return visitor.visitCreate_user_option(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Grant_permissions_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode[];
    public GRANT(i: number): antlr.TerminalNode | null;
    public GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GRANT);
    	} else {
    		return this.getToken(YQLParser.GRANT, i);
    	}
    }
    public permission_name_target(): Permission_name_targetContext {
        return this.getRuleContext(0, Permission_name_targetContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public an_id_schema(): An_id_schemaContext[];
    public an_id_schema(i: number): An_id_schemaContext | null;
    public an_id_schema(i?: number): An_id_schemaContext[] | An_id_schemaContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_schemaContext);
        }

        return this.getRuleContext(i, An_id_schemaContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(YQLParser.TO, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grant_permissions_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitGrant_permissions_stmt) {
            return visitor.visitGrant_permissions_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Revoke_permissions_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(YQLParser.REVOKE, 0)!;
    }
    public permission_name_target(): Permission_name_targetContext {
        return this.getRuleContext(0, Permission_name_targetContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public an_id_schema(): An_id_schemaContext[];
    public an_id_schema(i: number): An_id_schemaContext | null;
    public an_id_schema(i?: number): An_id_schemaContext[] | An_id_schemaContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_schemaContext);
        }

        return this.getRuleContext(i, An_id_schemaContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(YQLParser.FROM, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOR, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_revoke_permissions_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRevoke_permissions_stmt) {
            return visitor.visitRevoke_permissions_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Permission_idContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONNECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONNECT, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIST, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public MANAGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MANAGE, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MODIFY, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLES, 0);
    }
    public ATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTRIBUTES, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPDATE, 0);
    }
    public ERASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERASE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SCHEMA, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REMOVE, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESCRIBE, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALTER, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SELECT, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USE, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FULL, 0);
    }
    public LEGACY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEGACY, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CREATE, 0);
    }
    public DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIRECTORY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public QUEUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUEUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_permission_id;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPermission_id) {
            return visitor.visitPermission_id(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Permission_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public permission_id(): Permission_idContext | null {
        return this.getRuleContext(0, Permission_idContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_permission_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPermission_name) {
            return visitor.visitPermission_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Permission_name_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public permission_name(): Permission_nameContext[];
    public permission_name(i: number): Permission_nameContext | null;
    public permission_name(i?: number): Permission_nameContext[] | Permission_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Permission_nameContext);
        }

        return this.getRuleContext(i, Permission_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIVILEGES, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_permission_name_target;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitPermission_name_target) {
            return visitor.visitPermission_name_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_resource_pool_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public with_table_settings(): With_table_settingsContext {
        return this.getRuleContext(0, With_table_settingsContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_resource_pool_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_resource_pool_stmt) {
            return visitor.visitCreate_resource_pool_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_resource_pool_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_resource_pool_action(): Alter_resource_pool_actionContext[];
    public alter_resource_pool_action(i: number): Alter_resource_pool_actionContext | null;
    public alter_resource_pool_action(i?: number): Alter_resource_pool_actionContext[] | Alter_resource_pool_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_resource_pool_actionContext);
        }

        return this.getRuleContext(i, Alter_resource_pool_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_resource_pool_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_resource_pool_stmt) {
            return visitor.visitAlter_resource_pool_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_resource_pool_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_resource_pool_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_resource_pool_action) {
            return visitor.visitAlter_resource_pool_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_resource_pool_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_resource_pool_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_resource_pool_stmt) {
            return visitor.visitDrop_resource_pool_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_resource_pool_classifier_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public CLASSIFIER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CLASSIFIER, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public with_table_settings(): With_table_settingsContext {
        return this.getRuleContext(0, With_table_settingsContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_resource_pool_classifier_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_resource_pool_classifier_stmt) {
            return visitor.visitCreate_resource_pool_classifier_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_resource_pool_classifier_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public CLASSIFIER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CLASSIFIER, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_resource_pool_classifier_action(): Alter_resource_pool_classifier_actionContext[];
    public alter_resource_pool_classifier_action(i: number): Alter_resource_pool_classifier_actionContext | null;
    public alter_resource_pool_classifier_action(i?: number): Alter_resource_pool_classifier_actionContext[] | Alter_resource_pool_classifier_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_resource_pool_classifier_actionContext);
        }

        return this.getRuleContext(i, Alter_resource_pool_classifier_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_resource_pool_classifier_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_resource_pool_classifier_stmt) {
            return visitor.visitAlter_resource_pool_classifier_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_resource_pool_classifier_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_resource_pool_classifier_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_resource_pool_classifier_action) {
            return visitor.visitAlter_resource_pool_classifier_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_resource_pool_classifier_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public CLASSIFIER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CLASSIFIER, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_resource_pool_classifier_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_resource_pool_classifier_stmt) {
            return visitor.visitDrop_resource_pool_classifier_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_replication_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public ASYNC(): antlr.TerminalNode {
        return this.getToken(YQLParser.ASYNC, 0)!;
    }
    public REPLICATION(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPLICATION, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(YQLParser.FOR, 0)!;
    }
    public replication_target(): Replication_targetContext[];
    public replication_target(i: number): Replication_targetContext | null;
    public replication_target(i?: number): Replication_targetContext[] | Replication_targetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Replication_targetContext);
        }

        return this.getRuleContext(i, Replication_targetContext);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public replication_settings(): Replication_settingsContext {
        return this.getRuleContext(0, Replication_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_replication_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_replication_stmt) {
            return visitor.visitCreate_replication_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Replication_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public replication_name(): Replication_nameContext {
        return this.getRuleContext(0, Replication_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_replication_target;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReplication_target) {
            return visitor.visitReplication_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Replication_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public replication_settings_entry(): Replication_settings_entryContext[];
    public replication_settings_entry(i: number): Replication_settings_entryContext | null;
    public replication_settings_entry(i?: number): Replication_settings_entryContext[] | Replication_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Replication_settings_entryContext);
        }

        return this.getRuleContext(i, Replication_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_replication_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReplication_settings) {
            return visitor.visitReplication_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Replication_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public STRING_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRING_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_replication_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReplication_settings_entry) {
            return visitor.visitReplication_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_replication_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public ASYNC(): antlr.TerminalNode {
        return this.getToken(YQLParser.ASYNC, 0)!;
    }
    public REPLICATION(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPLICATION, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_replication_action(): Alter_replication_actionContext[];
    public alter_replication_action(i: number): Alter_replication_actionContext | null;
    public alter_replication_action(i?: number): Alter_replication_actionContext[] | Alter_replication_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_replication_actionContext);
        }

        return this.getRuleContext(i, Alter_replication_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_replication_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_replication_stmt) {
            return visitor.visitAlter_replication_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_replication_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_replication_set_setting(): Alter_replication_set_settingContext {
        return this.getRuleContext(0, Alter_replication_set_settingContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_replication_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_replication_action) {
            return visitor.visitAlter_replication_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_replication_set_settingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public replication_settings(): Replication_settingsContext {
        return this.getRuleContext(0, Replication_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_replication_set_setting;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_replication_set_setting) {
            return visitor.visitAlter_replication_set_setting(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_replication_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public ASYNC(): antlr.TerminalNode {
        return this.getToken(YQLParser.ASYNC, 0)!;
    }
    public REPLICATION(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPLICATION, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_replication_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_replication_stmt) {
            return visitor.visitDrop_replication_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Action_or_subquery_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_bind_parameter(): Opt_bind_parameterContext[];
    public opt_bind_parameter(i: number): Opt_bind_parameterContext | null;
    public opt_bind_parameter(i?: number): Opt_bind_parameterContext[] | Opt_bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_bind_parameterContext);
        }

        return this.getRuleContext(i, Opt_bind_parameterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_action_or_subquery_args;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAction_or_subquery_args) {
            return visitor.visitAction_or_subquery_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Define_action_or_subquery_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFINE(): antlr.TerminalNode[];
    public DEFINE(i: number): antlr.TerminalNode | null;
    public DEFINE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DEFINE);
    	} else {
    		return this.getToken(YQLParser.DEFINE, i);
    	}
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public define_action_or_subquery_body(): Define_action_or_subquery_bodyContext {
        return this.getRuleContext(0, Define_action_or_subquery_bodyContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(YQLParser.END, 0)!;
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ACTION, 0);
    }
    public SUBQUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBQUERY, 0);
    }
    public action_or_subquery_args(): Action_or_subquery_argsContext | null {
        return this.getRuleContext(0, Action_or_subquery_argsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_define_action_or_subquery_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDefine_action_or_subquery_stmt) {
            return visitor.visitDefine_action_or_subquery_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Define_action_or_subquery_bodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public sql_stmt_core(): Sql_stmt_coreContext[];
    public sql_stmt_core(i: number): Sql_stmt_coreContext | null;
    public sql_stmt_core(i?: number): Sql_stmt_coreContext[] | Sql_stmt_coreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_stmt_coreContext);
        }

        return this.getRuleContext(i, Sql_stmt_coreContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_define_action_or_subquery_body;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDefine_action_or_subquery_body) {
            return visitor.visitDefine_action_or_subquery_body(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class If_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF(): antlr.TerminalNode {
        return this.getToken(YQLParser.IF, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public do_stmt(): Do_stmtContext[];
    public do_stmt(i: number): Do_stmtContext | null;
    public do_stmt(i?: number): Do_stmtContext[] | Do_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Do_stmtContext);
        }

        return this.getRuleContext(i, Do_stmtContext);
    }
    public EVALUATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EVALUATE, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_if_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIf_stmt) {
            return visitor.visitIf_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class For_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(YQLParser.FOR, 0)!;
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(YQLParser.IN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public do_stmt(): Do_stmtContext[];
    public do_stmt(i: number): Do_stmtContext | null;
    public do_stmt(i?: number): Do_stmtContext[] | Do_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Do_stmtContext);
        }

        return this.getRuleContext(i, Do_stmtContext);
    }
    public EVALUATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EVALUATE, 0);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARALLEL, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_for_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFor_stmt) {
            return visitor.visitFor_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_key(): Table_keyContext | null {
        return this.getRuleContext(0, Table_keyContext);
    }
    public an_id_expr(): An_id_exprContext | null {
        return this.getRuleContext(0, An_id_exprContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public cluster_expr(): Cluster_exprContext | null {
        return this.getRuleContext(0, Cluster_exprContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public COMMAT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMAT, 0);
    }
    public table_hints(): Table_hintsContext | null {
        return this.getRuleContext(0, Table_hintsContext);
    }
    public table_arg(): Table_argContext[];
    public table_arg(i: number): Table_argContext | null;
    public table_arg(i?: number): Table_argContext[] | Table_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_argContext);
        }

        return this.getRuleContext(i, Table_argContext);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_ref) {
            return visitor.visitTable_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_keyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_table_or_type(): Id_table_or_typeContext {
        return this.getRuleContext(0, Id_table_or_typeContext)!;
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_key;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_key) {
            return visitor.visitTable_key(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_expr(): Named_exprContext {
        return this.getRuleContext(0, Named_exprContext)!;
    }
    public COMMAT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMAT, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_arg;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_arg) {
            return visitor.visitTable_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_hintsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public table_hint(): Table_hintContext[];
    public table_hint(i: number): Table_hintContext | null;
    public table_hint(i?: number): Table_hintContext[] | Table_hintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_hintContext);
        }

        return this.getRuleContext(i, Table_hintContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_hints;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_hints) {
            return visitor.visitTable_hints(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_hintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_hint(): An_id_hintContext | null {
        return this.getRuleContext(0, An_id_hintContext);
    }
    public EQUALS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EQUALS, 0);
    }
    public type_name_tag(): Type_name_tagContext[];
    public type_name_tag(i: number): Type_name_tagContext | null;
    public type_name_tag(i?: number): Type_name_tagContext[] | Type_name_tagContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_tagContext);
        }

        return this.getRuleContext(i, Type_name_tagContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public type_name_or_bind(): Type_name_or_bindContext | null {
        return this.getRuleContext(0, Type_name_or_bindContext);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SCHEMA, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMNS, 0);
    }
    public struct_arg_positional(): Struct_arg_positionalContext[];
    public struct_arg_positional(i: number): Struct_arg_positionalContext | null;
    public struct_arg_positional(i?: number): Struct_arg_positionalContext[] | Struct_arg_positionalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Struct_arg_positionalContext);
        }

        return this.getRuleContext(i, Struct_arg_positionalContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_hint;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTable_hint) {
            return visitor.visitTable_hint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_or_at(): Id_or_atContext {
        return this.getRuleContext(0, Id_or_atContext)!;
    }
    public cluster_expr(): Cluster_exprContext | null {
        return this.getRuleContext(0, Cluster_exprContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitObject_ref) {
            return visitor.visitObject_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Simple_table_ref_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_ref(): Object_refContext | null {
        return this.getRuleContext(0, Object_refContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public COMMAT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMAT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_simple_table_ref_core;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSimple_table_ref_core) {
            return visitor.visitSimple_table_ref_core(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Simple_table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext {
        return this.getRuleContext(0, Simple_table_ref_coreContext)!;
    }
    public table_hints(): Table_hintsContext | null {
        return this.getRuleContext(0, Table_hintsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_simple_table_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSimple_table_ref) {
            return visitor.visitSimple_table_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Into_simple_table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public ERASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERASE, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public pure_column_list(): Pure_column_listContext | null {
        return this.getRuleContext(0, Pure_column_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_into_simple_table_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInto_simple_table_ref) {
            return visitor.visitInto_simple_table_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Delete_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(YQLParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(YQLParser.FROM, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public where_expr(): Where_exprContext | null {
        return this.getRuleContext(0, Where_exprContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public into_values_source(): Into_values_sourceContext | null {
        return this.getRuleContext(0, Into_values_sourceContext);
    }
    public returning_columns_list(): Returning_columns_listContext | null {
        return this.getRuleContext(0, Returning_columns_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_delete_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDelete_stmt) {
            return visitor.visitDelete_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Update_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.UPDATE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SET, 0);
    }
    public set_clause_choice(): Set_clause_choiceContext | null {
        return this.getRuleContext(0, Set_clause_choiceContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public into_values_source(): Into_values_sourceContext | null {
        return this.getRuleContext(0, Into_values_sourceContext);
    }
    public returning_columns_list(): Returning_columns_listContext | null {
        return this.getRuleContext(0, Returning_columns_listContext);
    }
    public where_expr(): Where_exprContext | null {
        return this.getRuleContext(0, Where_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_update_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUpdate_stmt) {
            return visitor.visitUpdate_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_clause_choiceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_clause_list(): Set_clause_listContext | null {
        return this.getRuleContext(0, Set_clause_listContext);
    }
    public multiple_column_assignment(): Multiple_column_assignmentContext | null {
        return this.getRuleContext(0, Multiple_column_assignmentContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_clause_choice;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSet_clause_choice) {
            return visitor.visitSet_clause_choice(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_clause_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_clause(): Set_clauseContext[];
    public set_clause(i: number): Set_clauseContext | null;
    public set_clause(i?: number): Set_clauseContext[] | Set_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_clauseContext);
        }

        return this.getRuleContext(i, Set_clauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_clause_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSet_clause_list) {
            return visitor.visitSet_clause_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_target(): Set_targetContext {
        return this.getRuleContext(0, Set_targetContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSet_clause) {
            return visitor.visitSet_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_target;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSet_target) {
            return visitor.visitSet_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Multiple_column_assignmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_target_list(): Set_target_listContext {
        return this.getRuleContext(0, Set_target_listContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public simple_values_source(): Simple_values_sourceContext {
        return this.getRuleContext(0, Simple_values_sourceContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_multiple_column_assignment;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitMultiple_column_assignment) {
            return visitor.visitMultiple_column_assignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_target_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public set_target(): Set_targetContext[];
    public set_target(i: number): Set_targetContext | null;
    public set_target(i?: number): Set_targetContext[] | Set_targetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_targetContext);
        }

        return this.getRuleContext(i, Set_targetContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_target_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSet_target_list) {
            return visitor.visitSet_target_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_topic_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public TOPIC(): antlr.TerminalNode {
        return this.getToken(YQLParser.TOPIC, 0)!;
    }
    public topic_ref(): Topic_refContext {
        return this.getRuleContext(0, Topic_refContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public create_topic_entries(): Create_topic_entriesContext | null {
        return this.getRuleContext(0, Create_topic_entriesContext);
    }
    public with_topic_settings(): With_topic_settingsContext | null {
        return this.getRuleContext(0, With_topic_settingsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_topic_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_topic_stmt) {
            return visitor.visitCreate_topic_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_topic_entriesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public create_topic_entry(): Create_topic_entryContext[];
    public create_topic_entry(i: number): Create_topic_entryContext | null;
    public create_topic_entry(i?: number): Create_topic_entryContext[] | Create_topic_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Create_topic_entryContext);
        }

        return this.getRuleContext(i, Create_topic_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_topic_entries;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_topic_entries) {
            return visitor.visitCreate_topic_entries(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_topic_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_create_consumer_entry(): Topic_create_consumer_entryContext {
        return this.getRuleContext(0, Topic_create_consumer_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_topic_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCreate_topic_entry) {
            return visitor.visitCreate_topic_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class With_topic_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_settings(): Topic_settingsContext {
        return this.getRuleContext(0, Topic_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_with_topic_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWith_topic_settings) {
            return visitor.visitWith_topic_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public TOPIC(): antlr.TerminalNode {
        return this.getToken(YQLParser.TOPIC, 0)!;
    }
    public topic_ref(): Topic_refContext {
        return this.getRuleContext(0, Topic_refContext)!;
    }
    public alter_topic_action(): Alter_topic_actionContext[];
    public alter_topic_action(i: number): Alter_topic_actionContext | null;
    public alter_topic_action(i?: number): Alter_topic_actionContext[] | Alter_topic_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_topic_actionContext);
        }

        return this.getRuleContext(i, Alter_topic_actionContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_stmt) {
            return visitor.visitAlter_topic_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_topic_add_consumer(): Alter_topic_add_consumerContext | null {
        return this.getRuleContext(0, Alter_topic_add_consumerContext);
    }
    public alter_topic_alter_consumer(): Alter_topic_alter_consumerContext | null {
        return this.getRuleContext(0, Alter_topic_alter_consumerContext);
    }
    public alter_topic_drop_consumer(): Alter_topic_drop_consumerContext | null {
        return this.getRuleContext(0, Alter_topic_drop_consumerContext);
    }
    public alter_topic_set_settings(): Alter_topic_set_settingsContext | null {
        return this.getRuleContext(0, Alter_topic_set_settingsContext);
    }
    public alter_topic_reset_settings(): Alter_topic_reset_settingsContext | null {
        return this.getRuleContext(0, Alter_topic_reset_settingsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_action;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_action) {
            return visitor.visitAlter_topic_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_add_consumerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public topic_create_consumer_entry(): Topic_create_consumer_entryContext {
        return this.getRuleContext(0, Topic_create_consumer_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_add_consumer;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_add_consumer) {
            return visitor.visitAlter_topic_add_consumer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_create_consumer_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONSUMER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CONSUMER, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public topic_consumer_with_settings(): Topic_consumer_with_settingsContext | null {
        return this.getRuleContext(0, Topic_consumer_with_settingsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_create_consumer_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_create_consumer_entry) {
            return visitor.visitTopic_create_consumer_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_alter_consumerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public CONSUMER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CONSUMER, 0)!;
    }
    public topic_consumer_ref(): Topic_consumer_refContext {
        return this.getRuleContext(0, Topic_consumer_refContext)!;
    }
    public alter_topic_alter_consumer_entry(): Alter_topic_alter_consumer_entryContext {
        return this.getRuleContext(0, Alter_topic_alter_consumer_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_alter_consumer;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_alter_consumer) {
            return visitor.visitAlter_topic_alter_consumer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_alter_consumer_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_alter_consumer_set(): Topic_alter_consumer_setContext | null {
        return this.getRuleContext(0, Topic_alter_consumer_setContext);
    }
    public topic_alter_consumer_reset(): Topic_alter_consumer_resetContext | null {
        return this.getRuleContext(0, Topic_alter_consumer_resetContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_alter_consumer_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_alter_consumer_entry) {
            return visitor.visitAlter_topic_alter_consumer_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_drop_consumerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public CONSUMER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CONSUMER, 0)!;
    }
    public topic_consumer_ref(): Topic_consumer_refContext {
        return this.getRuleContext(0, Topic_consumer_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_drop_consumer;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_drop_consumer) {
            return visitor.visitAlter_topic_drop_consumer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_alter_consumer_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_consumer_settings(): Topic_consumer_settingsContext {
        return this.getRuleContext(0, Topic_consumer_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_alter_consumer_set;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_alter_consumer_set) {
            return visitor.visitTopic_alter_consumer_set(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_alter_consumer_resetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_alter_consumer_reset;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_alter_consumer_reset) {
            return visitor.visitTopic_alter_consumer_reset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_set_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_settings(): Topic_settingsContext {
        return this.getRuleContext(0, Topic_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_set_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_set_settings) {
            return visitor.visitAlter_topic_set_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_topic_reset_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public an_id_pure(): An_id_pureContext[];
    public an_id_pure(i: number): An_id_pureContext | null;
    public an_id_pure(i?: number): An_id_pureContext[] | An_id_pureContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_pureContext);
        }

        return this.getRuleContext(i, An_id_pureContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_reset_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_topic_reset_settings) {
            return visitor.visitAlter_topic_reset_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_topic_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public TOPIC(): antlr.TerminalNode {
        return this.getToken(YQLParser.TOPIC, 0)!;
    }
    public topic_ref(): Topic_refContext {
        return this.getRuleContext(0, Topic_refContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_topic_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitDrop_topic_stmt) {
            return visitor.visitDrop_topic_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_settings_entry(): Topic_settings_entryContext[];
    public topic_settings_entry(i: number): Topic_settings_entryContext | null;
    public topic_settings_entry(i?: number): Topic_settings_entryContext[] | Topic_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Topic_settings_entryContext);
        }

        return this.getRuleContext(i, Topic_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_settings) {
            return visitor.visitTopic_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public topic_setting_value(): Topic_setting_valueContext {
        return this.getRuleContext(0, Topic_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_settings_entry) {
            return visitor.visitTopic_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_setting_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_setting_value) {
            return visitor.visitTopic_setting_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_consumer_with_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_consumer_settings(): Topic_consumer_settingsContext {
        return this.getRuleContext(0, Topic_consumer_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_with_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_consumer_with_settings) {
            return visitor.visitTopic_consumer_with_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_consumer_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_consumer_settings_entry(): Topic_consumer_settings_entryContext[];
    public topic_consumer_settings_entry(i: number): Topic_consumer_settings_entryContext | null;
    public topic_consumer_settings_entry(i?: number): Topic_consumer_settings_entryContext[] | Topic_consumer_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Topic_consumer_settings_entryContext);
        }

        return this.getRuleContext(i, Topic_consumer_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_settings;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_consumer_settings) {
            return visitor.visitTopic_consumer_settings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_consumer_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public topic_consumer_setting_value(): Topic_consumer_setting_valueContext {
        return this.getRuleContext(0, Topic_consumer_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_settings_entry;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_consumer_settings_entry) {
            return visitor.visitTopic_consumer_settings_entry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_consumer_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_setting_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_consumer_setting_value) {
            return visitor.visitTopic_consumer_setting_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public cluster_expr(): Cluster_exprContext | null {
        return this.getRuleContext(0, Cluster_exprContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_ref) {
            return visitor.visitTopic_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Topic_consumer_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_pure(): An_id_pureContext {
        return this.getRuleContext(0, An_id_pureContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_ref;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitTopic_consumer_ref) {
            return visitor.visitTopic_consumer_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Null_treatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESPECT, 0);
    }
    public NULLS(): antlr.TerminalNode {
        return this.getToken(YQLParser.NULLS, 0)!;
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_null_treatment;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNull_treatment) {
            return visitor.visitNull_treatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Filter_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.FILTER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public where_expr(): Where_exprContext {
        return this.getRuleContext(0, Where_exprContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_filter_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFilter_clause) {
            return visitor.visitFilter_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_name_or_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_name(): Window_nameContext | null {
        return this.getRuleContext(0, Window_nameContext);
    }
    public window_specification(): Window_specificationContext | null {
        return this.getRuleContext(0, Window_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_name_or_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_name_or_specification) {
            return visitor.visitWindow_name_or_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_window(): An_id_windowContext {
        return this.getRuleContext(0, An_id_windowContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_name) {
            return visitor.visitWindow_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW(): antlr.TerminalNode {
        return this.getToken(YQLParser.WINDOW, 0)!;
    }
    public window_definition_list(): Window_definition_listContext {
        return this.getRuleContext(0, Window_definition_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_clause) {
            return visitor.visitWindow_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_definition_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_definition(): Window_definitionContext[];
    public window_definition(i: number): Window_definitionContext | null;
    public window_definition(i?: number): Window_definitionContext[] | Window_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_definitionContext);
        }

        return this.getRuleContext(i, Window_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_definition_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_definition_list) {
            return visitor.visitWindow_definition_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public new_window_name(): New_window_nameContext {
        return this.getRuleContext(0, New_window_nameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public window_specification(): Window_specificationContext {
        return this.getRuleContext(0, Window_specificationContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_definition;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_definition) {
            return visitor.visitWindow_definition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class New_window_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_name(): Window_nameContext {
        return this.getRuleContext(0, Window_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_new_window_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNew_window_name) {
            return visitor.visitNew_window_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public window_specification_details(): Window_specification_detailsContext {
        return this.getRuleContext(0, Window_specification_detailsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_specification;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_specification) {
            return visitor.visitWindow_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_specification_detailsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public existing_window_name(): Existing_window_nameContext | null {
        return this.getRuleContext(0, Existing_window_nameContext);
    }
    public window_partition_clause(): Window_partition_clauseContext | null {
        return this.getRuleContext(0, Window_partition_clauseContext);
    }
    public window_order_clause(): Window_order_clauseContext | null {
        return this.getRuleContext(0, Window_order_clauseContext);
    }
    public window_frame_clause(): Window_frame_clauseContext | null {
        return this.getRuleContext(0, Window_frame_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_specification_details;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_specification_details) {
            return visitor.visitWindow_specification_details(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Existing_window_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_name(): Window_nameContext {
        return this.getRuleContext(0, Window_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_existing_window_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitExisting_window_name) {
            return visitor.visitExisting_window_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_partition_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(YQLParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public named_expr_list(): Named_expr_listContext {
        return this.getRuleContext(0, Named_expr_listContext)!;
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMPACT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_partition_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_partition_clause) {
            return visitor.visitWindow_partition_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_order_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public order_by_clause(): Order_by_clauseContext {
        return this.getRuleContext(0, Order_by_clauseContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_order_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_order_clause) {
            return visitor.visitWindow_order_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_frame_units(): Window_frame_unitsContext {
        return this.getRuleContext(0, Window_frame_unitsContext)!;
    }
    public window_frame_extent(): Window_frame_extentContext {
        return this.getRuleContext(0, Window_frame_extentContext)!;
    }
    public window_frame_exclusion(): Window_frame_exclusionContext | null {
        return this.getRuleContext(0, Window_frame_exclusionContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_clause;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_clause) {
            return visitor.visitWindow_frame_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_unitsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RANGE, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUPS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_units;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_units) {
            return visitor.visitWindow_frame_units(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_extentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_frame_bound(): Window_frame_boundContext | null {
        return this.getRuleContext(0, Window_frame_boundContext);
    }
    public window_frame_between(): Window_frame_betweenContext | null {
        return this.getRuleContext(0, Window_frame_betweenContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_extent;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_extent) {
            return visitor.visitWindow_frame_extent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_betweenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.BETWEEN, 0)!;
    }
    public window_frame_bound(): Window_frame_boundContext[];
    public window_frame_bound(i: number): Window_frame_boundContext | null;
    public window_frame_bound(i?: number): Window_frame_boundContext[] | Window_frame_boundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_frame_boundContext);
        }

        return this.getRuleContext(i, Window_frame_boundContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(YQLParser.AND, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_between;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_between) {
            return visitor.visitWindow_frame_between(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_boundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOLLOWING, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNBOUNDED, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_bound;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_bound) {
            return visitor.visitWindow_frame_bound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_exclusionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCLUDE(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXCLUDE, 0)!;
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUP, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TIES, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NO, 0);
    }
    public OTHERS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OTHERS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_exclusion;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_exclusion) {
            return visitor.visitWindow_frame_exclusion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Use_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(YQLParser.USE, 0)!;
    }
    public cluster_expr(): Cluster_exprContext {
        return this.getRuleContext(0, Cluster_exprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_use_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitUse_stmt) {
            return visitor.visitUse_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Subselect_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public select_unparenthesized_stmt(): Select_unparenthesized_stmtContext | null {
        return this.getRuleContext(0, Select_unparenthesized_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_subselect_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSubselect_stmt) {
            return visitor.visitSubselect_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Named_nodes_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter_list(): Bind_parameter_listContext {
        return this.getRuleContext(0, Bind_parameter_listContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public subselect_stmt(): Subselect_stmtContext | null {
        return this.getRuleContext(0, Subselect_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_nodes_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitNamed_nodes_stmt) {
            return visitor.visitNamed_nodes_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Commit_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMIT(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMIT, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_commit_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCommit_stmt) {
            return visitor.visitCommit_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Rollback_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLLBACK(): antlr.TerminalNode {
        return this.getToken(YQLParser.ROLLBACK, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_rollback_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitRollback_stmt) {
            return visitor.visitRollback_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Analyze_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public column_list(): Column_listContext | null {
        return this.getRuleContext(0, Column_listContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_analyze_table;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAnalyze_table) {
            return visitor.visitAnalyze_table(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Analyze_table_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public analyze_table(): Analyze_tableContext[];
    public analyze_table(i: number): Analyze_tableContext | null;
    public analyze_table(i?: number): Analyze_tableContext[] | Analyze_tableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Analyze_tableContext);
        }

        return this.getRuleContext(i, Analyze_tableContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_analyze_table_list;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAnalyze_table_list) {
            return visitor.visitAnalyze_table_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Analyze_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(YQLParser.ANALYZE, 0)!;
    }
    public analyze_table_list(): Analyze_table_listContext {
        return this.getRuleContext(0, Analyze_table_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_analyze_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAnalyze_stmt) {
            return visitor.visitAnalyze_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ID_PLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ID_PLAIN, 0);
    }
    public ID_QUOTED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ID_QUOTED, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_identifier;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword(): KeywordContext | null {
        return this.getRuleContext(0, KeywordContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId) {
            return visitor.visitId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_schema;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_schema) {
            return visitor.visitId_schema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_expr) {
            return visitor.visitId_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_expr_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_expr_in;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_expr_in) {
            return visitor.visitId_expr_in(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_windowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_window;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_window) {
            return visitor.visitId_window(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_table;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_table) {
            return visitor.visitId_table(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_withoutContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_without;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_without) {
            return visitor.visitId_without(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_hintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_hint;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_hint) {
            return visitor.visitId_hint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_as_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_as_compat(): Keyword_as_compatContext | null {
        return this.getRuleContext(0, Keyword_as_compatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_as_compat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_as_compat) {
            return visitor.visitId_as_compat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_idContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id) {
            return visitor.visitAn_id(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_or_type;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_or_type) {
            return visitor.visitAn_id_or_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_schema(): Id_schemaContext | null {
        return this.getRuleContext(0, Id_schemaContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_schema;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_schema) {
            return visitor.visitAn_id_schema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_expr(): Id_exprContext | null {
        return this.getRuleContext(0, Id_exprContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_expr) {
            return visitor.visitAn_id_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_expr_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_expr_in(): Id_expr_inContext | null {
        return this.getRuleContext(0, Id_expr_inContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_expr_in;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_expr_in) {
            return visitor.visitAn_id_expr_in(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_windowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_window(): Id_windowContext | null {
        return this.getRuleContext(0, Id_windowContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_window;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_window) {
            return visitor.visitAn_id_window(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_table(): Id_tableContext | null {
        return this.getRuleContext(0, Id_tableContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_table;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_table) {
            return visitor.visitAn_id_table(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_withoutContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_without(): Id_withoutContext | null {
        return this.getRuleContext(0, Id_withoutContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_without;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_without) {
            return visitor.visitAn_id_without(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_hintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_hint(): Id_hintContext | null {
        return this.getRuleContext(0, Id_hintContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_hint;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_hint) {
            return visitor.visitAn_id_hint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_pureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_pure;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_pure) {
            return visitor.visitAn_id_pure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class An_id_as_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_as_compat(): Id_as_compatContext | null {
        return this.getRuleContext(0, Id_as_compatContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_as_compat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAn_id_as_compat) {
            return visitor.visitAn_id_as_compat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class View_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIMARY, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_view_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitView_name) {
            return visitor.visitView_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_id_prefixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_id_prefix;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOpt_id_prefix) {
            return visitor.visitOpt_id_prefix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cluster_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pure_column_or_named(): Pure_column_or_namedContext | null {
        return this.getRuleContext(0, Pure_column_or_namedContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cluster_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitCluster_expr) {
            return visitor.visitCluster_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public type_id(): Type_idContext | null {
        return this.getRuleContext(0, Type_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_or_type;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_or_type) {
            return visitor.visitId_or_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_id_prefix_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_id_prefix_or_type;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitOpt_id_prefix_or_type) {
            return visitor.visitOpt_id_prefix_or_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_or_atContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public COMMAT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMAT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_or_at;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_or_at) {
            return visitor.visitId_or_at(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_table_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_table(): An_id_tableContext | null {
        return this.getRuleContext(0, An_id_tableContext);
    }
    public type_id(): Type_idContext | null {
        return this.getRuleContext(0, Type_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_table_or_type;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_table_or_type) {
            return visitor.visitId_table_or_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_table_or_atContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_table_or_type(): Id_table_or_typeContext {
        return this.getRuleContext(0, Id_table_or_typeContext)!;
    }
    public COMMAT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMAT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_table_or_at;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitId_table_or_at) {
            return visitor.visitId_table_or_at(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword) {
            return visitor.visitKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_expr_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYMMETRIC, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BETWEEN, 0);
    }
    public BITCAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BITCAST, 0);
    }
    public CASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CASE, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CAST, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CUBE, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIME, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIMESTAMP, 0);
    }
    public EMPTY_ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY_ACTION, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FROM, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FULL, 0);
    }
    public HOP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HOP, 0);
    }
    public JSON_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JSON_EXISTS, 0);
    }
    public JSON_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JSON_VALUE, 0);
    }
    public JSON_QUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JSON_QUERY, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LOCAL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public PROCESS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PROCESS, 0);
    }
    public REDUCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REDUCE, 0);
    }
    public RETURN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RETURN, 0);
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RETURNING, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROLLUP, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SELECT, 0);
    }
    public SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYMMETRIC, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNBOUNDED, 0);
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WHEN, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WHERE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_expr_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_expr_uncompat) {
            return visitor.visitKeyword_expr_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_table_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANY, 0);
    }
    public ERASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERASE, 0);
    }
    public STREAM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STREAM, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_table_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_table_uncompat) {
            return visitor.visitKeyword_table_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_select_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISTINCT, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCEPT, 0);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTERSECT, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIMIT, 0);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNION, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WINDOW, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_select_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_select_uncompat) {
            return visitor.visitKeyword_select_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_alter_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLUMN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_alter_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_alter_uncompat) {
            return visitor.visitKeyword_alter_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_in_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMPACT(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMPACT, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_in_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_in_uncompat) {
            return visitor.visitKeyword_in_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_window_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUPS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RANGE, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_window_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_window_uncompat) {
            return visitor.visitKeyword_window_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_hint_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SCHEMA, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMNS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_hint_uncompat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_hint_uncompat) {
            return visitor.visitKeyword_hint_uncompat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_as_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ABORT, 0);
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ACTION, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ADD, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AFTER, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALTER, 0);
    }
    public ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANALYZE, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AND, 0);
    }
    public ANSI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANSI, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARRAY, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYNC, 0);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTACH, 0);
    }
    public ATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTRIBUTES, 0);
    }
    public AUTOINCREMENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AUTOINCREMENT, 0);
    }
    public BACKUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BACKUP, 0);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BEFORE, 0);
    }
    public BEGIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BEGIN, 0);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BERNOULLI, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CASCADE, 0);
    }
    public CHANGEFEED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CHANGEFEED, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CHECK, 0);
    }
    public CLASSIFIER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CLASSIFIER, 0);
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLLECTION, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMIT, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONDITIONAL, 0);
    }
    public CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONFLICT, 0);
    }
    public CONNECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONNECT, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONSTRAINT, 0);
    }
    public CONSUMER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONSUMER, 0);
    }
    public COVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COVER, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CREATE, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT, 0);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATA, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATABASE, 0);
    }
    public DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DECIMAL, 0);
    }
    public DECLARE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DECLARE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFERRABLE, 0);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFERRED, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DELETE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESC, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESCRIBE, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DETACH, 0);
    }
    public DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIRECTORY, 0);
    }
    public DISABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISABLE, 0);
    }
    public DISCARD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISCARD, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public EACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EACH, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENCRYPTED, 0);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.END, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ESCAPE, 0);
    }
    public EVALUATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EVALUATE, 0);
    }
    public EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUDE, 0);
    }
    public EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUSIVE, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPLAIN, 0);
    }
    public EXPORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPORT, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public FAIL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FAIL, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FAMILY, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FILTER, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FIRST, 0);
    }
    public FLATTEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FLATTEN, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOLLOWING, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOR, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOREIGN, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FUNCTION, 0);
    }
    public GLOB(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GLOB, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUP, 0);
    }
    public GROUPING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUPING, 0);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HASH, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ILIKE, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IMMEDIATE, 0);
    }
    public IMPORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IMPORT, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IN, 0);
    }
    public INCREMENTAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INCREMENTAL, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INDEX, 0);
    }
    public INDEXED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INDEXED, 0);
    }
    public INHERITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INHERITS, 0);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIAL, 0);
    }
    public INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIALLY, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSTEAD, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTO, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IS, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LAST, 0);
    }
    public LEGACY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEGACY, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIKE, 0);
    }
    public MANAGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MANAGE, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCHES, 0);
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MEASURES, 0);
    }
    public MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MICROSECONDS, 0);
    }
    public MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MILLISECONDS, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MODIFY, 0);
    }
    public NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NANOSECONDS, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NEXT, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NO, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULLS, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OBJECT, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OF, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OFFSET, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OMIT, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONE, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONLY, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public OTHERS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OTHERS, 0);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARALLEL, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARTITION, 0);
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSING, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSWORD, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PAST, 0);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PATTERN, 0);
    }
    public PER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PER, 0);
    }
    public PERMUTE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PERMUTE, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLAN, 0);
    }
    public POOL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.POOL, 0);
    }
    public PRAGMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRAGMA, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRECEDING, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIMARY, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIVILEGES, 0);
    }
    public QUEUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUEUE, 0);
    }
    public RAISE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RAISE, 0);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REFERENCES, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REGEXP, 0);
    }
    public REINDEX(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REINDEX, 0);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RELEASE, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REMOVE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RENAME, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLICATION, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESET, 0);
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESPECT, 0);
    }
    public RESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESTORE, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESTRICT, 0);
    }
    public REVERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVERT, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVOKE, 0);
    }
    public RLIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RLIKE, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROLLBACK, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SAVEPOINT, 0);
    }
    public SECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SECONDS, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEEK, 0);
    }
    public SETS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SETS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SHOW, 0);
    }
    public TSKIP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TSKIP, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SOURCE, 0);
    }
    public SUBQUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBQUERY, 0);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBSET, 0);
    }
    public SYMBOLS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYMBOLS, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYNC, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYSTEM, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLES, 0);
    }
    public TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESAMPLE, 0);
    }
    public TABLESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESTORE, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMP, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMPORARY, 0);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.THEN, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TIES, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public TOPIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TOPIC, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRANSACTION, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRIGGER, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TYPE, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNCONDITIONAL, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNIQUE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNKNOWN, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNMATCHED, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPDATE, 0);
    }
    public UPSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPSERT, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public VACUUM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VACUUM, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VALUES, 0);
    }
    public VIRTUAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIRTUAL, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WRAPPER, 0);
    }
    public XOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.XOR, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_as_compat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_as_compat) {
            return visitor.visitKeyword_as_compat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Keyword_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ABORT, 0);
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ACTION, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ADD, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AFTER, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALTER, 0);
    }
    public ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANALYZE, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AND, 0);
    }
    public ANSI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANSI, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARRAY, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYNC, 0);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTACH, 0);
    }
    public ATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTRIBUTES, 0);
    }
    public AUTOINCREMENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AUTOINCREMENT, 0);
    }
    public BACKUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BACKUP, 0);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BEFORE, 0);
    }
    public BEGIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BEGIN, 0);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BERNOULLI, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CASCADE, 0);
    }
    public CHANGEFEED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CHANGEFEED, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CHECK, 0);
    }
    public CLASSIFIER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CLASSIFIER, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLLATE, 0);
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLLECTION, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMIT, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONDITIONAL, 0);
    }
    public CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONFLICT, 0);
    }
    public CONNECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONNECT, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONSTRAINT, 0);
    }
    public CONSUMER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONSUMER, 0);
    }
    public COVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COVER, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CREATE, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CROSS, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT, 0);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATA, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATABASE, 0);
    }
    public DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DECIMAL, 0);
    }
    public DECLARE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DECLARE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFERRABLE, 0);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFERRED, 0);
    }
    public DEFINE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFINE, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DELETE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESC, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESCRIBE, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DETACH, 0);
    }
    public DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIRECTORY, 0);
    }
    public DISABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISABLE, 0);
    }
    public DISCARD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISCARD, 0);
    }
    public DO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DO, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public EACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EACH, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENCRYPTED, 0);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.END, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ESCAPE, 0);
    }
    public EVALUATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EVALUATE, 0);
    }
    public EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUDE, 0);
    }
    public EXCLUSION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUSION, 0);
    }
    public EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUSIVE, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPLAIN, 0);
    }
    public EXPORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPORT, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public FAIL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FAIL, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FAMILY, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FILTER, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FIRST, 0);
    }
    public FLATTEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FLATTEN, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOLLOWING, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOR, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOREIGN, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FUNCTION, 0);
    }
    public GLOB(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GLOB, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUP, 0);
    }
    public GROUPING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUPING, 0);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HASH, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ILIKE, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IMMEDIATE, 0);
    }
    public IMPORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IMPORT, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IN, 0);
    }
    public INCREMENTAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INCREMENTAL, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INDEX, 0);
    }
    public INDEXED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INDEXED, 0);
    }
    public INHERITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INHERITS, 0);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIAL, 0);
    }
    public INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIALLY, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INNER, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSTEAD, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTO, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IS, 0);
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ISNULL, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JOIN, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.KEY, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LAST, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEFT, 0);
    }
    public LEGACY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEGACY, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIKE, 0);
    }
    public MANAGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MANAGE, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCHES, 0);
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MEASURES, 0);
    }
    public MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MICROSECONDS, 0);
    }
    public MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MILLISECONDS, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MODIFY, 0);
    }
    public NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NANOSECONDS, 0);
    }
    public NATURAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NATURAL, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NEXT, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NO, 0);
    }
    public NOTNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOTNULL, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULLS, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OBJECT, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OF, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OFFSET, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OMIT, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONE, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONLY, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ORDER, 0);
    }
    public OTHERS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OTHERS, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OUTER, 0);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OVER, 0);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARALLEL, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARTITION, 0);
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSING, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSWORD, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PAST, 0);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PATTERN, 0);
    }
    public PER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PER, 0);
    }
    public PERMUTE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PERMUTE, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLAN, 0);
    }
    public POOL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.POOL, 0);
    }
    public PRAGMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRAGMA, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRECEDING, 0);
    }
    public PRESORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRESORT, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIMARY, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIVILEGES, 0);
    }
    public QUEUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUEUE, 0);
    }
    public RAISE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RAISE, 0);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REFERENCES, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REGEXP, 0);
    }
    public REINDEX(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REINDEX, 0);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RELEASE, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REMOVE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RENAME, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLICATION, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESET, 0);
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESPECT, 0);
    }
    public RESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESTORE, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESTRICT, 0);
    }
    public RESULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESULT, 0);
    }
    public REVERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVERT, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVOKE, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RIGHT, 0);
    }
    public RLIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RLIKE, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROLLBACK, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SAMPLE, 0);
    }
    public SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SAVEPOINT, 0);
    }
    public SECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SECONDS, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEEK, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEMI, 0);
    }
    public SETS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SETS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SHOW, 0);
    }
    public TSKIP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TSKIP, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SOURCE, 0);
    }
    public SUBQUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBQUERY, 0);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBSET, 0);
    }
    public SYMBOLS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYMBOLS, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYNC, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYSTEM, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLES, 0);
    }
    public TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESAMPLE, 0);
    }
    public TABLESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESTORE, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMP, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMPORARY, 0);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.THEN, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TIES, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public TOPIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TOPIC, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRANSACTION, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRIGGER, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TYPE, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNCONDITIONAL, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNIQUE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNKNOWN, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNMATCHED, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPDATE, 0);
    }
    public UPSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPSERT, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USING, 0);
    }
    public VACUUM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VACUUM, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VALUES, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public VIRTUAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIRTUAL, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WRAPPER, 0);
    }
    public XOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.XOR, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_compat;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitKeyword_compat) {
            return visitor.visitKeyword_compat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_idContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTIONAL, 0);
    }
    public TUPLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TUPLE, 0);
    }
    public STRUCT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRUCT, 0);
    }
    public VARIANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VARIANT, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIST, 0);
    }
    public FLOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FLOW, 0);
    }
    public DICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DICT, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SET, 0);
    }
    public ENUM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENUM, 0);
    }
    public RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESOURCE, 0);
    }
    public TAGGED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TAGGED, 0);
    }
    public CALLABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CALLABLE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_id;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitType_id) {
            return visitor.visitType_id(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Bool_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bool_value;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitBool_value) {
            return visitor.visitBool_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RealContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.REAL, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_real;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReal) {
            return visitor.visitReal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntegerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DIGITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIGITS, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTEGER_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_integer;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitInteger) {
            return visitor.visitInteger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_query_yqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_list_yq(): Sql_stmt_list_yqContext | null {
        return this.getRuleContext(0, Sql_stmt_list_yqContext);
    }
    public PRAGMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRAGMA, 0);
    }
    public ANSI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANSI, 0);
    }
    public DIGITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIGITS, 0);
    }
    public ansi_sql_stmt_list(): Ansi_sql_stmt_listContext | null {
        return this.getRuleContext(0, Ansi_sql_stmt_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_query_yq;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_query_yq) {
            return visitor.visitSql_query_yq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmt_list_yqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_yq(): Sql_stmt_yqContext[];
    public sql_stmt_yq(i: number): Sql_stmt_yqContext | null;
    public sql_stmt_yq(i?: number): Sql_stmt_yqContext[] | Sql_stmt_yqContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_stmt_yqContext);
        }

        return this.getRuleContext(i, Sql_stmt_yqContext);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(YQLParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_list_yq;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt_list_yq) {
            return visitor.visitSql_stmt_list_yq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmt_yqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_core_yq(): Sql_stmt_core_yqContext {
        return this.getRuleContext(0, Sql_stmt_core_yqContext)!;
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPLAIN, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUERY, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLAN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_yq;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt_yq) {
            return visitor.visitSql_stmt_yq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_stmt_core_yqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pragma_stmt(): Pragma_stmtContext | null {
        return this.getRuleContext(0, Pragma_stmtContext);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public named_nodes_stmt(): Named_nodes_stmtContext | null {
        return this.getRuleContext(0, Named_nodes_stmtContext);
    }
    public use_stmt(): Use_stmtContext | null {
        return this.getRuleContext(0, Use_stmtContext);
    }
    public into_table_stmt_yq(): Into_table_stmt_yqContext | null {
        return this.getRuleContext(0, Into_table_stmt_yqContext);
    }
    public declare_stmt(): Declare_stmtContext | null {
        return this.getRuleContext(0, Declare_stmtContext);
    }
    public import_stmt(): Import_stmtContext | null {
        return this.getRuleContext(0, Import_stmtContext);
    }
    public export_stmt(): Export_stmtContext | null {
        return this.getRuleContext(0, Export_stmtContext);
    }
    public do_stmt(): Do_stmtContext | null {
        return this.getRuleContext(0, Do_stmtContext);
    }
    public define_action_or_subquery_stmt(): Define_action_or_subquery_stmtContext | null {
        return this.getRuleContext(0, Define_action_or_subquery_stmtContext);
    }
    public if_stmt(): If_stmtContext | null {
        return this.getRuleContext(0, If_stmtContext);
    }
    public for_stmt(): For_stmtContext | null {
        return this.getRuleContext(0, For_stmtContext);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_core_yq;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitSql_stmt_core_yq) {
            return visitor.visitSql_stmt_core_yq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Replication_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_replication_name;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitReplication_name) {
            return visitor.visitReplication_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Where_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(YQLParser.WHERE, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_where_expr;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitWhere_expr) {
            return visitor.visitWhere_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class From_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(YQLParser.FROM, 0)!;
    }
    public join_source(): Join_sourceContext {
        return this.getRuleContext(0, Join_sourceContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_from_stmt;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitFrom_stmt) {
            return visitor.visitFrom_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_for_autocompleteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_stmt(): Alter_table_stmtContext | null {
        return this.getRuleContext(0, Alter_table_stmtContext);
    }
    public alter_table_store_stmt(): Alter_table_store_stmtContext | null {
        return this.getRuleContext(0, Alter_table_store_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_for_autocomplete;
    }
    public override accept<Result>(visitor: YQLVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_for_autocomplete) {
            return visitor.visitAlter_table_for_autocomplete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
