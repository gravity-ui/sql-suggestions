////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/mongo/grammar/MongoParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { MongoParserVisitor } from "./MongoParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class MongoParser extends antlr.Parser {
    public static readonly DB = 1;
    public static readonly FIND = 2;
    public static readonly FIND_ONE = 3;
    public static readonly FIND_ONE_AND_DELETE = 4;
    public static readonly FIND_ONE_AND_REPLACE = 5;
    public static readonly FIND_ONE_AND_UPDATE = 6;
    public static readonly SHOW_RECORD_ID = 7;
    public static readonly RETURN_KEY = 8;
    public static readonly FILTER = 9;
    public static readonly MIN = 10;
    public static readonly MAX = 11;
    public static readonly SORT = 12;
    public static readonly LIMIT = 13;
    public static readonly EXPLAIN = 14;
    public static readonly HINT = 15;
    public static readonly SKIP_ = 16;
    public static readonly INSERT_ONE = 17;
    public static readonly INSERT_MANY = 18;
    public static readonly BULK_WRITE = 19;
    public static readonly UPDATE_ONE = 20;
    public static readonly UPDATE_MANY = 21;
    public static readonly REPLACE_ONE = 22;
    public static readonly DELETE_ONE = 23;
    public static readonly DELETE_MANY = 24;
    public static readonly RENAME = 25;
    public static readonly DROP = 26;
    public static readonly IS_CAPPED = 27;
    public static readonly CREATE_INDEX = 28;
    public static readonly CREATE_INDEXES = 29;
    public static readonly DROP_INDEX = 30;
    public static readonly DROP_INDEXES = 31;
    public static readonly LIST_INDEXES = 32;
    public static readonly INDEXES = 33;
    public static readonly INDEX_EXISTS = 34;
    public static readonly INDEX_INFORMATION = 35;
    public static readonly ESTIMATED_DOCUMENT_COUNT = 36;
    public static readonly COUNT_DOCUMENTS = 37;
    public static readonly LBRACKET = 38;
    public static readonly RBRACKET = 39;
    public static readonly LPAREN = 40;
    public static readonly RPAREN = 41;
    public static readonly LBRACE = 42;
    public static readonly RBRACE = 43;
    public static readonly COLON = 44;
    public static readonly COMMA = 45;
    public static readonly SEMICOLON = 46;
    public static readonly DOT = 47;
    public static readonly TRUE = 48;
    public static readonly FALSE = 49;
    public static readonly NULL = 50;
    public static readonly STRING = 51;
    public static readonly NUMBER = 52;
    public static readonly NUMERIC_LITERAL = 53;
    public static readonly SYMBOL = 54;
    public static readonly IDENTIFIER = 55;
    public static readonly SINGLE_LINE_COMMENT = 56;
    public static readonly MULTI_LINE_COMMENT = 57;
    public static readonly WS = 58;
    public static readonly RULE_root = 0;
    public static readonly RULE_commands = 1;
    public static readonly RULE_command = 2;
    public static readonly RULE_collectionOperation = 3;
    public static readonly RULE_collectionName = 4;
    public static readonly RULE_collectionMethod = 5;
    public static readonly RULE_countDocumentsMethod = 6;
    public static readonly RULE_countDocumentsArgument2 = 7;
    public static readonly RULE_countDocumentsArgument1 = 8;
    public static readonly RULE_estimatedDocumentCountMethod = 9;
    public static readonly RULE_estimatedDocumentCountArgument = 10;
    public static readonly RULE_indexInformationMethod = 11;
    public static readonly RULE_indexInformationArgument = 12;
    public static readonly RULE_indexExistsMethod = 13;
    public static readonly RULE_indexExistsArgument2 = 14;
    public static readonly RULE_indexExistsArgument1 = 15;
    public static readonly RULE_indexesMethod = 16;
    public static readonly RULE_indexesArgument = 17;
    public static readonly RULE_listIndexesMethod = 18;
    public static readonly RULE_listIndexesArgument = 19;
    public static readonly RULE_dropIndexesMethod = 20;
    public static readonly RULE_dropIndexesArgument = 21;
    public static readonly RULE_dropIndexMethod = 22;
    public static readonly RULE_dropIndexArgument2 = 23;
    public static readonly RULE_dropIndexArgument1 = 24;
    public static readonly RULE_createIndexesMethod = 25;
    public static readonly RULE_createIndexesArgument2 = 26;
    public static readonly RULE_createIndexesArgument1 = 27;
    public static readonly RULE_createIndexMethod = 28;
    public static readonly RULE_createIndexArgument2 = 29;
    public static readonly RULE_createIndexArgument1 = 30;
    public static readonly RULE_isCappedMethod = 31;
    public static readonly RULE_isCappedArgument = 32;
    public static readonly RULE_dropMethod = 33;
    public static readonly RULE_dropArgument = 34;
    public static readonly RULE_renameMethod = 35;
    public static readonly RULE_renameArgument1 = 36;
    public static readonly RULE_renameArgument2 = 37;
    public static readonly RULE_deleteManyMethod = 38;
    public static readonly RULE_deleteManyArgument1 = 39;
    public static readonly RULE_deleteManyArgument2 = 40;
    public static readonly RULE_deleteOneMethod = 41;
    public static readonly RULE_deleteOneArgument1 = 42;
    public static readonly RULE_deleteOneArgument2 = 43;
    public static readonly RULE_replaceOneMethod = 44;
    public static readonly RULE_replaceOneArgument1 = 45;
    public static readonly RULE_replaceOneArgument2 = 46;
    public static readonly RULE_replaceOneArgument3 = 47;
    public static readonly RULE_updateManyMethod = 48;
    public static readonly RULE_updateManyArgument1 = 49;
    public static readonly RULE_updateManyArgument2 = 50;
    public static readonly RULE_updateManyArgument3 = 51;
    public static readonly RULE_updateOneMethod = 52;
    public static readonly RULE_updateOneArgument1 = 53;
    public static readonly RULE_updateOneArgument2 = 54;
    public static readonly RULE_updateOneArgument3 = 55;
    public static readonly RULE_bulkWriteMethod = 56;
    public static readonly RULE_bulkWriteArgument1 = 57;
    public static readonly RULE_bulkWriteArgument2 = 58;
    public static readonly RULE_insertManyMethod = 59;
    public static readonly RULE_insertManyArgument1 = 60;
    public static readonly RULE_insertManyArgument2 = 61;
    public static readonly RULE_insertOneMethod = 62;
    public static readonly RULE_insertOneArgument1 = 63;
    public static readonly RULE_insertOneArgument2 = 64;
    public static readonly RULE_documentToInsert = 65;
    public static readonly RULE_findOneAndUpdateMethod = 66;
    public static readonly RULE_findOneAndUpdateArgument1 = 67;
    public static readonly RULE_findOneAndUpdateArgument2 = 68;
    public static readonly RULE_findOneAndUpdateArgument3 = 69;
    public static readonly RULE_findOneAndReplaceMethod = 70;
    public static readonly RULE_findOneAndReplaceArgument1 = 71;
    public static readonly RULE_findOneAndReplaceArgument2 = 72;
    public static readonly RULE_findOneAndReplaceArgument3 = 73;
    public static readonly RULE_findOneAndDeleteMethod = 74;
    public static readonly RULE_findOneAndDeleteArgument1 = 75;
    public static readonly RULE_findOneAndDeleteArgument2 = 76;
    public static readonly RULE_findOneMethod = 77;
    public static readonly RULE_findOneArgument1 = 78;
    public static readonly RULE_findOneArgument2 = 79;
    public static readonly RULE_findMethod = 80;
    public static readonly RULE_findMethodArgument1 = 81;
    public static readonly RULE_findMethodArgument2 = 82;
    public static readonly RULE_explainMethod = 83;
    public static readonly RULE_explainMethodArgument = 84;
    public static readonly RULE_findMethodModifier = 85;
    public static readonly RULE_skipModifier = 86;
    public static readonly RULE_skipModifierArgument = 87;
    public static readonly RULE_limitModifier = 88;
    public static readonly RULE_limitModifierArgument = 89;
    public static readonly RULE_filterModifier = 90;
    public static readonly RULE_filterModifierArgument = 91;
    public static readonly RULE_minModifier = 92;
    public static readonly RULE_minModifierArgument = 93;
    public static readonly RULE_maxModifier = 94;
    public static readonly RULE_maxModifierArgument = 95;
    public static readonly RULE_hintModifier = 96;
    public static readonly RULE_hintModifierArgument = 97;
    public static readonly RULE_returnKeyModifier = 98;
    public static readonly RULE_returnKeyModifierArgument = 99;
    public static readonly RULE_showRecordIdModifier = 100;
    public static readonly RULE_showRecordIdModifierArgument = 101;
    public static readonly RULE_sortModifier = 102;
    public static readonly RULE_sortModifierArgument1 = 103;
    public static readonly RULE_sortModifierArgument2 = 104;
    public static readonly RULE_reservedKeyword = 105;
    public static readonly RULE_json5 = 106;
    public static readonly RULE_object = 107;
    public static readonly RULE_pair = 108;
    public static readonly RULE_boolean = 109;
    public static readonly RULE_key = 110;
    public static readonly RULE_identifier = 111;
    public static readonly RULE_value = 112;
    public static readonly RULE_array = 113;
    public static readonly RULE_number = 114;

    public static readonly literalNames = [
        null, "'db'", "'find'", "'findOne'", "'findOneAndDelete'", "'findOneAndReplace'", 
        "'findOneAndUpdate'", "'showRecordId'", "'returnKey'", "'filter'", 
        "'min'", "'max'", "'sort'", "'limit'", "'explain'", "'hint'", "'skip'", 
        "'insertOne'", "'insertMany'", "'bulkWrite'", "'updateOne'", "'updateMany'", 
        "'replaceOne'", "'deleteOne'", "'deleteMany'", "'rename'", "'drop'", 
        "'isCapped'", "'createIndex'", "'createIndexes'", "'dropIndex'", 
        "'dropIndexes'", "'listIndexes'", "'indexes'", "'indexExists'", 
        "'indexInformation'", "'estimatedDocumentCount'", "'countDocuments'", 
        "'['", "']'", "'('", "')'", "'{'", "'}'", "':'", "','", "';'", "'.'", 
        "'true'", "'false'", "'null'"
    ];

    public static readonly symbolicNames = [
        null, "DB", "FIND", "FIND_ONE", "FIND_ONE_AND_DELETE", "FIND_ONE_AND_REPLACE", 
        "FIND_ONE_AND_UPDATE", "SHOW_RECORD_ID", "RETURN_KEY", "FILTER", 
        "MIN", "MAX", "SORT", "LIMIT", "EXPLAIN", "HINT", "SKIP_", "INSERT_ONE", 
        "INSERT_MANY", "BULK_WRITE", "UPDATE_ONE", "UPDATE_MANY", "REPLACE_ONE", 
        "DELETE_ONE", "DELETE_MANY", "RENAME", "DROP", "IS_CAPPED", "CREATE_INDEX", 
        "CREATE_INDEXES", "DROP_INDEX", "DROP_INDEXES", "LIST_INDEXES", 
        "INDEXES", "INDEX_EXISTS", "INDEX_INFORMATION", "ESTIMATED_DOCUMENT_COUNT", 
        "COUNT_DOCUMENTS", "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "LBRACE", 
        "RBRACE", "COLON", "COMMA", "SEMICOLON", "DOT", "TRUE", "FALSE", 
        "NULL", "STRING", "NUMBER", "NUMERIC_LITERAL", "SYMBOL", "IDENTIFIER", 
        "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WS"
    ];
    public static readonly ruleNames = [
        "root", "commands", "command", "collectionOperation", "collectionName", 
        "collectionMethod", "countDocumentsMethod", "countDocumentsArgument2", 
        "countDocumentsArgument1", "estimatedDocumentCountMethod", "estimatedDocumentCountArgument", 
        "indexInformationMethod", "indexInformationArgument", "indexExistsMethod", 
        "indexExistsArgument2", "indexExistsArgument1", "indexesMethod", 
        "indexesArgument", "listIndexesMethod", "listIndexesArgument", "dropIndexesMethod", 
        "dropIndexesArgument", "dropIndexMethod", "dropIndexArgument2", 
        "dropIndexArgument1", "createIndexesMethod", "createIndexesArgument2", 
        "createIndexesArgument1", "createIndexMethod", "createIndexArgument2", 
        "createIndexArgument1", "isCappedMethod", "isCappedArgument", "dropMethod", 
        "dropArgument", "renameMethod", "renameArgument1", "renameArgument2", 
        "deleteManyMethod", "deleteManyArgument1", "deleteManyArgument2", 
        "deleteOneMethod", "deleteOneArgument1", "deleteOneArgument2", "replaceOneMethod", 
        "replaceOneArgument1", "replaceOneArgument2", "replaceOneArgument3", 
        "updateManyMethod", "updateManyArgument1", "updateManyArgument2", 
        "updateManyArgument3", "updateOneMethod", "updateOneArgument1", 
        "updateOneArgument2", "updateOneArgument3", "bulkWriteMethod", "bulkWriteArgument1", 
        "bulkWriteArgument2", "insertManyMethod", "insertManyArgument1", 
        "insertManyArgument2", "insertOneMethod", "insertOneArgument1", 
        "insertOneArgument2", "documentToInsert", "findOneAndUpdateMethod", 
        "findOneAndUpdateArgument1", "findOneAndUpdateArgument2", "findOneAndUpdateArgument3", 
        "findOneAndReplaceMethod", "findOneAndReplaceArgument1", "findOneAndReplaceArgument2", 
        "findOneAndReplaceArgument3", "findOneAndDeleteMethod", "findOneAndDeleteArgument1", 
        "findOneAndDeleteArgument2", "findOneMethod", "findOneArgument1", 
        "findOneArgument2", "findMethod", "findMethodArgument1", "findMethodArgument2", 
        "explainMethod", "explainMethodArgument", "findMethodModifier", 
        "skipModifier", "skipModifierArgument", "limitModifier", "limitModifierArgument", 
        "filterModifier", "filterModifierArgument", "minModifier", "minModifierArgument", 
        "maxModifier", "maxModifierArgument", "hintModifier", "hintModifierArgument", 
        "returnKeyModifier", "returnKeyModifierArgument", "showRecordIdModifier", 
        "showRecordIdModifierArgument", "sortModifier", "sortModifierArgument1", 
        "sortModifierArgument2", "reservedKeyword", "json5", "object", "pair", 
        "boolean", "key", "identifier", "value", "array", "number",
    ];

    public get grammarFileName(): string { return "MongoParser.g4"; }
    public get literalNames(): (string | null)[] { return MongoParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return MongoParser.symbolicNames; }
    public get ruleNames(): string[] { return MongoParser.ruleNames; }
    public get serializedATN(): number[] { return MongoParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, MongoParser._ATN, MongoParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, MongoParser.RULE_root);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 231;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1) {
                {
                this.state = 230;
                this.commands();
                }
            }

            this.state = 233;
            this.match(MongoParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commands(): CommandsContext {
        let localContext = new CommandsContext(this.context, this.state);
        this.enterRule(localContext, 2, MongoParser.RULE_commands);
        let _la: number;
        try {
            this.state = 243;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 235;
                this.command();
                this.state = 237;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46) {
                    {
                    this.state = 236;
                    this.match(MongoParser.SEMICOLON);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 239;
                this.command();
                this.state = 240;
                this.match(MongoParser.SEMICOLON);
                this.state = 241;
                this.commands();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public command(): CommandContext {
        let localContext = new CommandContext(this.context, this.state);
        this.enterRule(localContext, 4, MongoParser.RULE_command);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 245;
            this.collectionOperation();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionOperation(): CollectionOperationContext {
        let localContext = new CollectionOperationContext(this.context, this.state);
        this.enterRule(localContext, 6, MongoParser.RULE_collectionOperation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 247;
            this.match(MongoParser.DB);
            this.state = 248;
            this.match(MongoParser.DOT);
            this.state = 249;
            this.collectionName();
            this.state = 250;
            this.match(MongoParser.DOT);
            this.state = 251;
            this.collectionMethod();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionName(): CollectionNameContext {
        let localContext = new CollectionNameContext(this.context, this.state);
        this.enterRule(localContext, 8, MongoParser.RULE_collectionName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 253;
            this.match(MongoParser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionMethod(): CollectionMethodContext {
        let localContext = new CollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 10, MongoParser.RULE_collectionMethod);
        try {
            this.state = 281;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.FIND:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 255;
                this.findMethod();
                }
                break;
            case MongoParser.FIND_ONE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 256;
                this.findOneMethod();
                }
                break;
            case MongoParser.FIND_ONE_AND_DELETE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 257;
                this.findOneAndDeleteMethod();
                }
                break;
            case MongoParser.FIND_ONE_AND_REPLACE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 258;
                this.findOneAndReplaceMethod();
                }
                break;
            case MongoParser.FIND_ONE_AND_UPDATE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 259;
                this.findOneAndUpdateMethod();
                }
                break;
            case MongoParser.INSERT_ONE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 260;
                this.insertOneMethod();
                }
                break;
            case MongoParser.INSERT_MANY:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 261;
                this.insertManyMethod();
                }
                break;
            case MongoParser.BULK_WRITE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 262;
                this.bulkWriteMethod();
                }
                break;
            case MongoParser.UPDATE_ONE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 263;
                this.updateOneMethod();
                }
                break;
            case MongoParser.UPDATE_MANY:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 264;
                this.updateManyMethod();
                }
                break;
            case MongoParser.REPLACE_ONE:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 265;
                this.replaceOneMethod();
                }
                break;
            case MongoParser.DELETE_ONE:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 266;
                this.deleteOneMethod();
                }
                break;
            case MongoParser.DELETE_MANY:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 267;
                this.deleteManyMethod();
                }
                break;
            case MongoParser.RENAME:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 268;
                this.renameMethod();
                }
                break;
            case MongoParser.DROP:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 269;
                this.dropMethod();
                }
                break;
            case MongoParser.IS_CAPPED:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 270;
                this.isCappedMethod();
                }
                break;
            case MongoParser.CREATE_INDEX:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 271;
                this.createIndexMethod();
                }
                break;
            case MongoParser.CREATE_INDEXES:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 272;
                this.createIndexesMethod();
                }
                break;
            case MongoParser.DROP_INDEX:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 273;
                this.dropIndexMethod();
                }
                break;
            case MongoParser.DROP_INDEXES:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 274;
                this.dropIndexesMethod();
                }
                break;
            case MongoParser.LIST_INDEXES:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 275;
                this.listIndexesMethod();
                }
                break;
            case MongoParser.INDEXES:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 276;
                this.indexesMethod();
                }
                break;
            case MongoParser.INDEX_EXISTS:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 277;
                this.indexExistsMethod();
                }
                break;
            case MongoParser.INDEX_INFORMATION:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 278;
                this.indexInformationMethod();
                }
                break;
            case MongoParser.ESTIMATED_DOCUMENT_COUNT:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 279;
                this.estimatedDocumentCountMethod();
                }
                break;
            case MongoParser.COUNT_DOCUMENTS:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 280;
                this.countDocumentsMethod();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public countDocumentsMethod(): CountDocumentsMethodContext {
        let localContext = new CountDocumentsMethodContext(this.context, this.state);
        this.enterRule(localContext, 12, MongoParser.RULE_countDocumentsMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 283;
            this.match(MongoParser.COUNT_DOCUMENTS);
            this.state = 284;
            this.match(MongoParser.LPAREN);
            this.state = 290;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 285;
                this.countDocumentsArgument1();
                this.state = 288;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 286;
                    this.match(MongoParser.COMMA);
                    this.state = 287;
                    this.countDocumentsArgument2();
                    }
                }

                }
            }

            this.state = 292;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public countDocumentsArgument2(): CountDocumentsArgument2Context {
        let localContext = new CountDocumentsArgument2Context(this.context, this.state);
        this.enterRule(localContext, 14, MongoParser.RULE_countDocumentsArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 294;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public countDocumentsArgument1(): CountDocumentsArgument1Context {
        let localContext = new CountDocumentsArgument1Context(this.context, this.state);
        this.enterRule(localContext, 16, MongoParser.RULE_countDocumentsArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 296;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public estimatedDocumentCountMethod(): EstimatedDocumentCountMethodContext {
        let localContext = new EstimatedDocumentCountMethodContext(this.context, this.state);
        this.enterRule(localContext, 18, MongoParser.RULE_estimatedDocumentCountMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 298;
            this.match(MongoParser.ESTIMATED_DOCUMENT_COUNT);
            this.state = 299;
            this.match(MongoParser.LPAREN);
            this.state = 301;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 300;
                this.estimatedDocumentCountArgument();
                }
            }

            this.state = 303;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public estimatedDocumentCountArgument(): EstimatedDocumentCountArgumentContext {
        let localContext = new EstimatedDocumentCountArgumentContext(this.context, this.state);
        this.enterRule(localContext, 20, MongoParser.RULE_estimatedDocumentCountArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 305;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexInformationMethod(): IndexInformationMethodContext {
        let localContext = new IndexInformationMethodContext(this.context, this.state);
        this.enterRule(localContext, 22, MongoParser.RULE_indexInformationMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 307;
            this.match(MongoParser.INDEX_INFORMATION);
            this.state = 308;
            this.match(MongoParser.LPAREN);
            this.state = 310;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 309;
                this.indexInformationArgument();
                }
            }

            this.state = 312;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexInformationArgument(): IndexInformationArgumentContext {
        let localContext = new IndexInformationArgumentContext(this.context, this.state);
        this.enterRule(localContext, 24, MongoParser.RULE_indexInformationArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 314;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexExistsMethod(): IndexExistsMethodContext {
        let localContext = new IndexExistsMethodContext(this.context, this.state);
        this.enterRule(localContext, 26, MongoParser.RULE_indexExistsMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 316;
            this.match(MongoParser.INDEX_EXISTS);
            this.state = 317;
            this.match(MongoParser.LPAREN);
            this.state = 318;
            this.indexExistsArgument1();
            this.state = 321;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 319;
                this.match(MongoParser.COMMA);
                this.state = 320;
                this.indexExistsArgument2();
                }
            }

            this.state = 323;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexExistsArgument2(): IndexExistsArgument2Context {
        let localContext = new IndexExistsArgument2Context(this.context, this.state);
        this.enterRule(localContext, 28, MongoParser.RULE_indexExistsArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 325;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexExistsArgument1(): IndexExistsArgument1Context {
        let localContext = new IndexExistsArgument1Context(this.context, this.state);
        this.enterRule(localContext, 30, MongoParser.RULE_indexExistsArgument1);
        let _la: number;
        try {
            let alternative: number;
            this.state = 341;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 327;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 328;
                this.match(MongoParser.LBRACKET);
                this.state = 329;
                this.match(MongoParser.STRING);
                this.state = 334;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 9, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 330;
                        this.match(MongoParser.COMMA);
                        this.state = 331;
                        this.match(MongoParser.STRING);
                        }
                        }
                    }
                    this.state = 336;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 9, this.context);
                }
                this.state = 338;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 337;
                    this.match(MongoParser.COMMA);
                    }
                }

                this.state = 340;
                this.match(MongoParser.RBRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexesMethod(): IndexesMethodContext {
        let localContext = new IndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 32, MongoParser.RULE_indexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 343;
            this.match(MongoParser.INDEXES);
            this.state = 344;
            this.match(MongoParser.LPAREN);
            this.state = 346;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 345;
                this.indexesArgument();
                }
            }

            this.state = 348;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexesArgument(): IndexesArgumentContext {
        let localContext = new IndexesArgumentContext(this.context, this.state);
        this.enterRule(localContext, 34, MongoParser.RULE_indexesArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 350;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listIndexesMethod(): ListIndexesMethodContext {
        let localContext = new ListIndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 36, MongoParser.RULE_listIndexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 352;
            this.match(MongoParser.LIST_INDEXES);
            this.state = 353;
            this.match(MongoParser.LPAREN);
            this.state = 355;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 354;
                this.listIndexesArgument();
                }
            }

            this.state = 357;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listIndexesArgument(): ListIndexesArgumentContext {
        let localContext = new ListIndexesArgumentContext(this.context, this.state);
        this.enterRule(localContext, 38, MongoParser.RULE_listIndexesArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 359;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropIndexesMethod(): DropIndexesMethodContext {
        let localContext = new DropIndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 40, MongoParser.RULE_dropIndexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 361;
            this.match(MongoParser.DROP_INDEXES);
            this.state = 362;
            this.match(MongoParser.LPAREN);
            this.state = 364;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 363;
                this.dropIndexesArgument();
                }
            }

            this.state = 366;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropIndexesArgument(): DropIndexesArgumentContext {
        let localContext = new DropIndexesArgumentContext(this.context, this.state);
        this.enterRule(localContext, 42, MongoParser.RULE_dropIndexesArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 368;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropIndexMethod(): DropIndexMethodContext {
        let localContext = new DropIndexMethodContext(this.context, this.state);
        this.enterRule(localContext, 44, MongoParser.RULE_dropIndexMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 370;
            this.match(MongoParser.DROP_INDEX);
            this.state = 371;
            this.match(MongoParser.LPAREN);
            this.state = 372;
            this.dropIndexArgument1();
            this.state = 375;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 373;
                this.match(MongoParser.COMMA);
                this.state = 374;
                this.dropIndexArgument2();
                }
            }

            this.state = 377;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropIndexArgument2(): DropIndexArgument2Context {
        let localContext = new DropIndexArgument2Context(this.context, this.state);
        this.enterRule(localContext, 46, MongoParser.RULE_dropIndexArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 379;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropIndexArgument1(): DropIndexArgument1Context {
        let localContext = new DropIndexArgument1Context(this.context, this.state);
        this.enterRule(localContext, 48, MongoParser.RULE_dropIndexArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 381;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndexesMethod(): CreateIndexesMethodContext {
        let localContext = new CreateIndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 50, MongoParser.RULE_createIndexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 383;
            this.match(MongoParser.CREATE_INDEXES);
            this.state = 384;
            this.match(MongoParser.LPAREN);
            this.state = 385;
            this.createIndexesArgument1();
            this.state = 388;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 386;
                this.match(MongoParser.COMMA);
                this.state = 387;
                this.createIndexesArgument2();
                }
            }

            this.state = 390;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndexesArgument2(): CreateIndexesArgument2Context {
        let localContext = new CreateIndexesArgument2Context(this.context, this.state);
        this.enterRule(localContext, 52, MongoParser.RULE_createIndexesArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 392;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndexesArgument1(): CreateIndexesArgument1Context {
        let localContext = new CreateIndexesArgument1Context(this.context, this.state);
        this.enterRule(localContext, 54, MongoParser.RULE_createIndexesArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 394;
            this.array();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndexMethod(): CreateIndexMethodContext {
        let localContext = new CreateIndexMethodContext(this.context, this.state);
        this.enterRule(localContext, 56, MongoParser.RULE_createIndexMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 396;
            this.match(MongoParser.CREATE_INDEX);
            this.state = 397;
            this.match(MongoParser.LPAREN);
            this.state = 398;
            this.createIndexArgument1();
            this.state = 401;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 399;
                this.match(MongoParser.COMMA);
                this.state = 400;
                this.createIndexArgument2();
                }
            }

            this.state = 403;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndexArgument2(): CreateIndexArgument2Context {
        let localContext = new CreateIndexArgument2Context(this.context, this.state);
        this.enterRule(localContext, 58, MongoParser.RULE_createIndexArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 405;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndexArgument1(): CreateIndexArgument1Context {
        let localContext = new CreateIndexArgument1Context(this.context, this.state);
        this.enterRule(localContext, 60, MongoParser.RULE_createIndexArgument1);
        try {
            this.state = 410;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 407;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 408;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 409;
                this.array();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isCappedMethod(): IsCappedMethodContext {
        let localContext = new IsCappedMethodContext(this.context, this.state);
        this.enterRule(localContext, 62, MongoParser.RULE_isCappedMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 412;
            this.match(MongoParser.IS_CAPPED);
            this.state = 413;
            this.match(MongoParser.LPAREN);
            this.state = 415;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 414;
                this.isCappedArgument();
                }
            }

            this.state = 417;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isCappedArgument(): IsCappedArgumentContext {
        let localContext = new IsCappedArgumentContext(this.context, this.state);
        this.enterRule(localContext, 64, MongoParser.RULE_isCappedArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 419;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropMethod(): DropMethodContext {
        let localContext = new DropMethodContext(this.context, this.state);
        this.enterRule(localContext, 66, MongoParser.RULE_dropMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 421;
            this.match(MongoParser.DROP);
            this.state = 422;
            this.match(MongoParser.LPAREN);
            this.state = 424;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 423;
                this.dropArgument();
                }
            }

            this.state = 426;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropArgument(): DropArgumentContext {
        let localContext = new DropArgumentContext(this.context, this.state);
        this.enterRule(localContext, 68, MongoParser.RULE_dropArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 428;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameMethod(): RenameMethodContext {
        let localContext = new RenameMethodContext(this.context, this.state);
        this.enterRule(localContext, 70, MongoParser.RULE_renameMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 430;
            this.match(MongoParser.RENAME);
            this.state = 431;
            this.match(MongoParser.LPAREN);
            this.state = 432;
            this.renameArgument1();
            this.state = 435;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 433;
                this.match(MongoParser.COMMA);
                this.state = 434;
                this.renameArgument2();
                }
            }

            this.state = 437;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameArgument1(): RenameArgument1Context {
        let localContext = new RenameArgument1Context(this.context, this.state);
        this.enterRule(localContext, 72, MongoParser.RULE_renameArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 439;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameArgument2(): RenameArgument2Context {
        let localContext = new RenameArgument2Context(this.context, this.state);
        this.enterRule(localContext, 74, MongoParser.RULE_renameArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 441;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteManyMethod(): DeleteManyMethodContext {
        let localContext = new DeleteManyMethodContext(this.context, this.state);
        this.enterRule(localContext, 76, MongoParser.RULE_deleteManyMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 443;
            this.match(MongoParser.DELETE_MANY);
            this.state = 444;
            this.match(MongoParser.LPAREN);
            this.state = 450;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 445;
                this.deleteManyArgument1();
                this.state = 448;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 446;
                    this.match(MongoParser.COMMA);
                    this.state = 447;
                    this.deleteManyArgument2();
                    }
                }

                }
            }

            this.state = 452;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteManyArgument1(): DeleteManyArgument1Context {
        let localContext = new DeleteManyArgument1Context(this.context, this.state);
        this.enterRule(localContext, 78, MongoParser.RULE_deleteManyArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 454;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteManyArgument2(): DeleteManyArgument2Context {
        let localContext = new DeleteManyArgument2Context(this.context, this.state);
        this.enterRule(localContext, 80, MongoParser.RULE_deleteManyArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 456;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteOneMethod(): DeleteOneMethodContext {
        let localContext = new DeleteOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 82, MongoParser.RULE_deleteOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 458;
            this.match(MongoParser.DELETE_ONE);
            this.state = 459;
            this.match(MongoParser.LPAREN);
            this.state = 465;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 460;
                this.deleteOneArgument1();
                this.state = 463;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 461;
                    this.match(MongoParser.COMMA);
                    this.state = 462;
                    this.deleteOneArgument2();
                    }
                }

                }
            }

            this.state = 467;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteOneArgument1(): DeleteOneArgument1Context {
        let localContext = new DeleteOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 84, MongoParser.RULE_deleteOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 469;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteOneArgument2(): DeleteOneArgument2Context {
        let localContext = new DeleteOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 86, MongoParser.RULE_deleteOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 471;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceOneMethod(): ReplaceOneMethodContext {
        let localContext = new ReplaceOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 88, MongoParser.RULE_replaceOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 473;
            this.match(MongoParser.REPLACE_ONE);
            this.state = 474;
            this.match(MongoParser.LPAREN);
            this.state = 475;
            this.replaceOneArgument1();
            this.state = 476;
            this.match(MongoParser.COMMA);
            this.state = 477;
            this.replaceOneArgument2();
            this.state = 480;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 478;
                this.match(MongoParser.COMMA);
                this.state = 479;
                this.replaceOneArgument3();
                }
            }

            this.state = 482;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceOneArgument1(): ReplaceOneArgument1Context {
        let localContext = new ReplaceOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 90, MongoParser.RULE_replaceOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 484;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceOneArgument2(): ReplaceOneArgument2Context {
        let localContext = new ReplaceOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 92, MongoParser.RULE_replaceOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 486;
            this.documentToInsert();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceOneArgument3(): ReplaceOneArgument3Context {
        let localContext = new ReplaceOneArgument3Context(this.context, this.state);
        this.enterRule(localContext, 94, MongoParser.RULE_replaceOneArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 488;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateManyMethod(): UpdateManyMethodContext {
        let localContext = new UpdateManyMethodContext(this.context, this.state);
        this.enterRule(localContext, 96, MongoParser.RULE_updateManyMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 490;
            this.match(MongoParser.UPDATE_MANY);
            this.state = 491;
            this.match(MongoParser.LPAREN);
            this.state = 492;
            this.updateManyArgument1();
            this.state = 493;
            this.match(MongoParser.COMMA);
            this.state = 494;
            this.updateManyArgument2();
            this.state = 497;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 495;
                this.match(MongoParser.COMMA);
                this.state = 496;
                this.updateManyArgument3();
                }
            }

            this.state = 499;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateManyArgument1(): UpdateManyArgument1Context {
        let localContext = new UpdateManyArgument1Context(this.context, this.state);
        this.enterRule(localContext, 98, MongoParser.RULE_updateManyArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 501;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateManyArgument2(): UpdateManyArgument2Context {
        let localContext = new UpdateManyArgument2Context(this.context, this.state);
        this.enterRule(localContext, 100, MongoParser.RULE_updateManyArgument2);
        try {
            this.state = 505;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 503;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 504;
                this.array();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateManyArgument3(): UpdateManyArgument3Context {
        let localContext = new UpdateManyArgument3Context(this.context, this.state);
        this.enterRule(localContext, 102, MongoParser.RULE_updateManyArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 507;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateOneMethod(): UpdateOneMethodContext {
        let localContext = new UpdateOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 104, MongoParser.RULE_updateOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 509;
            this.match(MongoParser.UPDATE_ONE);
            this.state = 510;
            this.match(MongoParser.LPAREN);
            this.state = 511;
            this.updateOneArgument1();
            this.state = 512;
            this.match(MongoParser.COMMA);
            this.state = 513;
            this.updateOneArgument2();
            this.state = 516;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 514;
                this.match(MongoParser.COMMA);
                this.state = 515;
                this.updateOneArgument3();
                }
            }

            this.state = 518;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateOneArgument1(): UpdateOneArgument1Context {
        let localContext = new UpdateOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 106, MongoParser.RULE_updateOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 520;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateOneArgument2(): UpdateOneArgument2Context {
        let localContext = new UpdateOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 108, MongoParser.RULE_updateOneArgument2);
        try {
            this.state = 524;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 522;
                this.array();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 523;
                this.object();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateOneArgument3(): UpdateOneArgument3Context {
        let localContext = new UpdateOneArgument3Context(this.context, this.state);
        this.enterRule(localContext, 110, MongoParser.RULE_updateOneArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 526;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bulkWriteMethod(): BulkWriteMethodContext {
        let localContext = new BulkWriteMethodContext(this.context, this.state);
        this.enterRule(localContext, 112, MongoParser.RULE_bulkWriteMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 528;
            this.match(MongoParser.BULK_WRITE);
            this.state = 529;
            this.match(MongoParser.LPAREN);
            this.state = 530;
            this.bulkWriteArgument1();
            this.state = 533;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 531;
                this.match(MongoParser.COMMA);
                this.state = 532;
                this.bulkWriteArgument2();
                }
            }

            this.state = 535;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bulkWriteArgument1(): BulkWriteArgument1Context {
        let localContext = new BulkWriteArgument1Context(this.context, this.state);
        this.enterRule(localContext, 114, MongoParser.RULE_bulkWriteArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 537;
            this.array();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bulkWriteArgument2(): BulkWriteArgument2Context {
        let localContext = new BulkWriteArgument2Context(this.context, this.state);
        this.enterRule(localContext, 116, MongoParser.RULE_bulkWriteArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 539;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertManyMethod(): InsertManyMethodContext {
        let localContext = new InsertManyMethodContext(this.context, this.state);
        this.enterRule(localContext, 118, MongoParser.RULE_insertManyMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 541;
            this.match(MongoParser.INSERT_MANY);
            this.state = 542;
            this.match(MongoParser.LPAREN);
            this.state = 543;
            this.insertManyArgument1();
            this.state = 546;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 544;
                this.match(MongoParser.COMMA);
                this.state = 545;
                this.insertManyArgument2();
                }
            }

            this.state = 548;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertManyArgument1(): InsertManyArgument1Context {
        let localContext = new InsertManyArgument1Context(this.context, this.state);
        this.enterRule(localContext, 120, MongoParser.RULE_insertManyArgument1);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 550;
            this.match(MongoParser.LBRACKET);
            this.state = 551;
            this.documentToInsert();
            this.state = 556;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 33, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 552;
                    this.match(MongoParser.COMMA);
                    this.state = 553;
                    this.documentToInsert();
                    }
                    }
                }
                this.state = 558;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 33, this.context);
            }
            this.state = 560;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 559;
                this.match(MongoParser.COMMA);
                }
            }

            this.state = 562;
            this.match(MongoParser.RBRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertManyArgument2(): InsertManyArgument2Context {
        let localContext = new InsertManyArgument2Context(this.context, this.state);
        this.enterRule(localContext, 122, MongoParser.RULE_insertManyArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 564;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertOneMethod(): InsertOneMethodContext {
        let localContext = new InsertOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 124, MongoParser.RULE_insertOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 566;
            this.match(MongoParser.INSERT_ONE);
            this.state = 567;
            this.match(MongoParser.LPAREN);
            this.state = 568;
            this.insertOneArgument1();
            this.state = 571;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 569;
                this.match(MongoParser.COMMA);
                this.state = 570;
                this.insertOneArgument2();
                }
            }

            this.state = 573;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertOneArgument1(): InsertOneArgument1Context {
        let localContext = new InsertOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 126, MongoParser.RULE_insertOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 575;
            this.documentToInsert();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertOneArgument2(): InsertOneArgument2Context {
        let localContext = new InsertOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 128, MongoParser.RULE_insertOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 577;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public documentToInsert(): DocumentToInsertContext {
        let localContext = new DocumentToInsertContext(this.context, this.state);
        this.enterRule(localContext, 130, MongoParser.RULE_documentToInsert);
        try {
            this.state = 581;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 579;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 580;
                this.array();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneAndUpdateMethod(): FindOneAndUpdateMethodContext {
        let localContext = new FindOneAndUpdateMethodContext(this.context, this.state);
        this.enterRule(localContext, 132, MongoParser.RULE_findOneAndUpdateMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 583;
            this.match(MongoParser.FIND_ONE_AND_UPDATE);
            this.state = 584;
            this.match(MongoParser.LPAREN);
            this.state = 585;
            this.findOneAndUpdateArgument1();
            this.state = 586;
            this.match(MongoParser.COMMA);
            this.state = 587;
            this.findOneAndUpdateArgument2();
            this.state = 590;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 588;
                this.match(MongoParser.COMMA);
                this.state = 589;
                this.findOneAndUpdateArgument3();
                }
            }

            this.state = 592;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneAndUpdateArgument1(): FindOneAndUpdateArgument1Context {
        let localContext = new FindOneAndUpdateArgument1Context(this.context, this.state);
        this.enterRule(localContext, 134, MongoParser.RULE_findOneAndUpdateArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 594;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneAndUpdateArgument2(): FindOneAndUpdateArgument2Context {
        let localContext = new FindOneAndUpdateArgument2Context(this.context, this.state);
        this.enterRule(localContext, 136, MongoParser.RULE_findOneAndUpdateArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 596;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneAndUpdateArgument3(): FindOneAndUpdateArgument3Context {
        let localContext = new FindOneAndUpdateArgument3Context(this.context, this.state);
        this.enterRule(localContext, 138, MongoParser.RULE_findOneAndUpdateArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 598;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneAndReplaceMethod(): FindOneAndReplaceMethodContext {
        let localContext = new FindOneAndReplaceMethodContext(this.context, this.state);
        this.enterRule(localContext, 140, MongoParser.RULE_findOneAndReplaceMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 600;
            this.match(MongoParser.FIND_ONE_AND_REPLACE);
            this.state = 601;
            this.match(MongoParser.LPAREN);
            this.state = 602;
            this.findOneAndReplaceArgument1();
            this.state = 603;
            this.match(MongoParser.COMMA);
            this.state = 604;
            this.findOneAndReplaceArgument2();
            this.state = 607;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 605;
                this.match(MongoParser.COMMA);
                this.state = 606;
                this.findOneAndReplaceArgument3();
                }
            }

            this.state = 609;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneAndReplaceArgument1(): FindOneAndReplaceArgument1Context {
        let localContext = new FindOneAndReplaceArgument1Context(this.context, this.state);
        this.enterRule(localContext, 142, MongoParser.RULE_findOneAndReplaceArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 611;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneAndReplaceArgument2(): FindOneAndReplaceArgument2Context {
        let localContext = new FindOneAndReplaceArgument2Context(this.context, this.state);
        this.enterRule(localContext, 144, MongoParser.RULE_findOneAndReplaceArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 613;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneAndReplaceArgument3(): FindOneAndReplaceArgument3Context {
        let localContext = new FindOneAndReplaceArgument3Context(this.context, this.state);
        this.enterRule(localContext, 146, MongoParser.RULE_findOneAndReplaceArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 615;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneAndDeleteMethod(): FindOneAndDeleteMethodContext {
        let localContext = new FindOneAndDeleteMethodContext(this.context, this.state);
        this.enterRule(localContext, 148, MongoParser.RULE_findOneAndDeleteMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 617;
            this.match(MongoParser.FIND_ONE_AND_DELETE);
            this.state = 618;
            this.match(MongoParser.LPAREN);
            this.state = 619;
            this.findOneAndDeleteArgument1();
            this.state = 622;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 620;
                this.match(MongoParser.COMMA);
                this.state = 621;
                this.findOneAndDeleteArgument2();
                }
            }

            this.state = 624;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneAndDeleteArgument1(): FindOneAndDeleteArgument1Context {
        let localContext = new FindOneAndDeleteArgument1Context(this.context, this.state);
        this.enterRule(localContext, 150, MongoParser.RULE_findOneAndDeleteArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 626;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneAndDeleteArgument2(): FindOneAndDeleteArgument2Context {
        let localContext = new FindOneAndDeleteArgument2Context(this.context, this.state);
        this.enterRule(localContext, 152, MongoParser.RULE_findOneAndDeleteArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 628;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneMethod(): FindOneMethodContext {
        let localContext = new FindOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 154, MongoParser.RULE_findOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 630;
            this.match(MongoParser.FIND_ONE);
            this.state = 631;
            this.match(MongoParser.LPAREN);
            this.state = 637;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 632;
                this.findOneArgument1();
                this.state = 635;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 633;
                    this.match(MongoParser.COMMA);
                    this.state = 634;
                    this.findOneArgument2();
                    }
                }

                }
            }

            this.state = 639;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneArgument1(): FindOneArgument1Context {
        let localContext = new FindOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 156, MongoParser.RULE_findOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 641;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findOneArgument2(): FindOneArgument2Context {
        let localContext = new FindOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 158, MongoParser.RULE_findOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 643;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findMethod(): FindMethodContext {
        let localContext = new FindMethodContext(this.context, this.state);
        this.enterRule(localContext, 160, MongoParser.RULE_findMethod);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 645;
            this.match(MongoParser.FIND);
            this.state = 646;
            this.match(MongoParser.LPAREN);
            this.state = 652;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 647;
                this.findMethodArgument1();
                this.state = 650;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 648;
                    this.match(MongoParser.COMMA);
                    this.state = 649;
                    this.findMethodArgument2();
                    }
                }

                }
            }

            this.state = 654;
            this.match(MongoParser.RPAREN);
            this.state = 658;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 44, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 655;
                    this.findMethodModifier();
                    }
                    }
                }
                this.state = 660;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 44, this.context);
            }
            this.state = 662;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 661;
                this.explainMethod();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findMethodArgument1(): FindMethodArgument1Context {
        let localContext = new FindMethodArgument1Context(this.context, this.state);
        this.enterRule(localContext, 162, MongoParser.RULE_findMethodArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 664;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findMethodArgument2(): FindMethodArgument2Context {
        let localContext = new FindMethodArgument2Context(this.context, this.state);
        this.enterRule(localContext, 164, MongoParser.RULE_findMethodArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 666;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainMethod(): ExplainMethodContext {
        let localContext = new ExplainMethodContext(this.context, this.state);
        this.enterRule(localContext, 166, MongoParser.RULE_explainMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 668;
            this.match(MongoParser.DOT);
            this.state = 669;
            this.match(MongoParser.EXPLAIN);
            this.state = 670;
            this.match(MongoParser.LPAREN);
            this.state = 672;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & 705) !== 0)) {
                {
                this.state = 671;
                this.explainMethodArgument();
                }
            }

            this.state = 674;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainMethodArgument(): ExplainMethodArgumentContext {
        let localContext = new ExplainMethodArgumentContext(this.context, this.state);
        this.enterRule(localContext, 168, MongoParser.RULE_explainMethodArgument);
        try {
            this.state = 679;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 676;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.TRUE:
            case MongoParser.FALSE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 677;
                this.boolean_();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 678;
                this.object();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public findMethodModifier(): FindMethodModifierContext {
        let localContext = new FindMethodModifierContext(this.context, this.state);
        this.enterRule(localContext, 170, MongoParser.RULE_findMethodModifier);
        try {
            this.state = 699;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 48, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 681;
                this.match(MongoParser.DOT);
                this.state = 682;
                this.skipModifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 683;
                this.match(MongoParser.DOT);
                this.state = 684;
                this.limitModifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 685;
                this.match(MongoParser.DOT);
                this.state = 686;
                this.filterModifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 687;
                this.match(MongoParser.DOT);
                this.state = 688;
                this.minModifier();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 689;
                this.match(MongoParser.DOT);
                this.state = 690;
                this.maxModifier();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 691;
                this.match(MongoParser.DOT);
                this.state = 692;
                this.hintModifier();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 693;
                this.match(MongoParser.DOT);
                this.state = 694;
                this.returnKeyModifier();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 695;
                this.match(MongoParser.DOT);
                this.state = 696;
                this.showRecordIdModifier();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 697;
                this.match(MongoParser.DOT);
                this.state = 698;
                this.sortModifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipModifier(): SkipModifierContext {
        let localContext = new SkipModifierContext(this.context, this.state);
        this.enterRule(localContext, 172, MongoParser.RULE_skipModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 701;
            this.match(MongoParser.SKIP_);
            this.state = 702;
            this.match(MongoParser.LPAREN);
            this.state = 703;
            this.skipModifierArgument();
            this.state = 704;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipModifierArgument(): SkipModifierArgumentContext {
        let localContext = new SkipModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 174, MongoParser.RULE_skipModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 706;
            this.number_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitModifier(): LimitModifierContext {
        let localContext = new LimitModifierContext(this.context, this.state);
        this.enterRule(localContext, 176, MongoParser.RULE_limitModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 708;
            this.match(MongoParser.LIMIT);
            this.state = 709;
            this.match(MongoParser.LPAREN);
            this.state = 710;
            this.limitModifierArgument();
            this.state = 711;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitModifierArgument(): LimitModifierArgumentContext {
        let localContext = new LimitModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 178, MongoParser.RULE_limitModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 713;
            this.number_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterModifier(): FilterModifierContext {
        let localContext = new FilterModifierContext(this.context, this.state);
        this.enterRule(localContext, 180, MongoParser.RULE_filterModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 715;
            this.match(MongoParser.FILTER);
            this.state = 716;
            this.match(MongoParser.LPAREN);
            this.state = 717;
            this.filterModifierArgument();
            this.state = 718;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterModifierArgument(): FilterModifierArgumentContext {
        let localContext = new FilterModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 182, MongoParser.RULE_filterModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 720;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public minModifier(): MinModifierContext {
        let localContext = new MinModifierContext(this.context, this.state);
        this.enterRule(localContext, 184, MongoParser.RULE_minModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 722;
            this.match(MongoParser.MIN);
            this.state = 723;
            this.match(MongoParser.LPAREN);
            this.state = 724;
            this.minModifierArgument();
            this.state = 725;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public minModifierArgument(): MinModifierArgumentContext {
        let localContext = new MinModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 186, MongoParser.RULE_minModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 727;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public maxModifier(): MaxModifierContext {
        let localContext = new MaxModifierContext(this.context, this.state);
        this.enterRule(localContext, 188, MongoParser.RULE_maxModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 729;
            this.match(MongoParser.MAX);
            this.state = 730;
            this.match(MongoParser.LPAREN);
            this.state = 731;
            this.maxModifierArgument();
            this.state = 732;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public maxModifierArgument(): MaxModifierArgumentContext {
        let localContext = new MaxModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 190, MongoParser.RULE_maxModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 734;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintModifier(): HintModifierContext {
        let localContext = new HintModifierContext(this.context, this.state);
        this.enterRule(localContext, 192, MongoParser.RULE_hintModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 736;
            this.match(MongoParser.HINT);
            this.state = 737;
            this.match(MongoParser.LPAREN);
            this.state = 738;
            this.hintModifierArgument();
            this.state = 739;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintModifierArgument(): HintModifierArgumentContext {
        let localContext = new HintModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 194, MongoParser.RULE_hintModifierArgument);
        try {
            this.state = 743;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 741;
                this.object();
                }
                break;
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 742;
                this.match(MongoParser.STRING);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnKeyModifier(): ReturnKeyModifierContext {
        let localContext = new ReturnKeyModifierContext(this.context, this.state);
        this.enterRule(localContext, 196, MongoParser.RULE_returnKeyModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 745;
            this.match(MongoParser.RETURN_KEY);
            this.state = 746;
            this.match(MongoParser.LPAREN);
            this.state = 747;
            this.returnKeyModifierArgument();
            this.state = 748;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnKeyModifierArgument(): ReturnKeyModifierArgumentContext {
        let localContext = new ReturnKeyModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 198, MongoParser.RULE_returnKeyModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 750;
            this.boolean_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRecordIdModifier(): ShowRecordIdModifierContext {
        let localContext = new ShowRecordIdModifierContext(this.context, this.state);
        this.enterRule(localContext, 200, MongoParser.RULE_showRecordIdModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 752;
            this.match(MongoParser.SHOW_RECORD_ID);
            this.state = 753;
            this.match(MongoParser.LPAREN);
            this.state = 754;
            this.showRecordIdModifierArgument();
            this.state = 755;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRecordIdModifierArgument(): ShowRecordIdModifierArgumentContext {
        let localContext = new ShowRecordIdModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 202, MongoParser.RULE_showRecordIdModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 757;
            this.boolean_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortModifier(): SortModifierContext {
        let localContext = new SortModifierContext(this.context, this.state);
        this.enterRule(localContext, 204, MongoParser.RULE_sortModifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 759;
            this.match(MongoParser.SORT);
            this.state = 760;
            this.match(MongoParser.LPAREN);
            this.state = 761;
            this.sortModifierArgument1();
            this.state = 764;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 762;
                this.match(MongoParser.COMMA);
                this.state = 763;
                this.sortModifierArgument2();
                }
            }

            this.state = 766;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortModifierArgument1(): SortModifierArgument1Context {
        let localContext = new SortModifierArgument1Context(this.context, this.state);
        this.enterRule(localContext, 206, MongoParser.RULE_sortModifierArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 768;
            this.json5();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortModifierArgument2(): SortModifierArgument2Context {
        let localContext = new SortModifierArgument2Context(this.context, this.state);
        this.enterRule(localContext, 208, MongoParser.RULE_sortModifierArgument2);
        try {
            this.state = 773;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.NUMBER:
            case MongoParser.NUMERIC_LITERAL:
            case MongoParser.SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 770;
                this.number_();
                }
                break;
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 771;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 772;
                this.object();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reservedKeyword(): ReservedKeywordContext {
        let localContext = new ReservedKeywordContext(this.context, this.state);
        this.enterRule(localContext, 210, MongoParser.RULE_reservedKeyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 775;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 63) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json5(): Json5Context {
        let localContext = new Json5Context(this.context, this.state);
        this.enterRule(localContext, 212, MongoParser.RULE_json5);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 778;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 38)) & ~0x1F) === 0 && ((1 << (_la - 38)) & 130065) !== 0)) {
                {
                this.state = 777;
                this.value();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object(): ObjectContext {
        let localContext = new ObjectContext(this.context, this.state);
        this.enterRule(localContext, 214, MongoParser.RULE_object);
        let _la: number;
        try {
            let alternative: number;
            this.state = 796;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 780;
                this.match(MongoParser.LBRACE);
                this.state = 781;
                this.pair();
                this.state = 786;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 53, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 782;
                        this.match(MongoParser.COMMA);
                        this.state = 783;
                        this.pair();
                        }
                        }
                    }
                    this.state = 788;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 53, this.context);
                }
                this.state = 790;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 789;
                    this.match(MongoParser.COMMA);
                    }
                }

                this.state = 792;
                this.match(MongoParser.RBRACE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 794;
                this.match(MongoParser.LBRACE);
                this.state = 795;
                this.match(MongoParser.RBRACE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pair(): PairContext {
        let localContext = new PairContext(this.context, this.state);
        this.enterRule(localContext, 216, MongoParser.RULE_pair);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 798;
            this.key();
            this.state = 799;
            this.match(MongoParser.COLON);
            this.state = 800;
            this.value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public boolean_(): BooleanContext {
        let localContext = new BooleanContext(this.context, this.state);
        this.enterRule(localContext, 218, MongoParser.RULE_boolean);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 802;
            _la = this.tokenStream.LA(1);
            if(!(_la === 48 || _la === 49)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key(): KeyContext {
        let localContext = new KeyContext(this.context, this.state);
        this.enterRule(localContext, 220, MongoParser.RULE_key);
        try {
            this.state = 809;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 804;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.DB:
            case MongoParser.FIND:
            case MongoParser.FIND_ONE:
            case MongoParser.FIND_ONE_AND_DELETE:
            case MongoParser.FIND_ONE_AND_REPLACE:
            case MongoParser.FIND_ONE_AND_UPDATE:
            case MongoParser.SHOW_RECORD_ID:
            case MongoParser.RETURN_KEY:
            case MongoParser.FILTER:
            case MongoParser.MIN:
            case MongoParser.MAX:
            case MongoParser.SORT:
            case MongoParser.LIMIT:
            case MongoParser.EXPLAIN:
            case MongoParser.HINT:
            case MongoParser.SKIP_:
            case MongoParser.INSERT_ONE:
            case MongoParser.INSERT_MANY:
            case MongoParser.BULK_WRITE:
            case MongoParser.UPDATE_ONE:
            case MongoParser.UPDATE_MANY:
            case MongoParser.REPLACE_ONE:
            case MongoParser.DELETE_ONE:
            case MongoParser.DELETE_MANY:
            case MongoParser.RENAME:
            case MongoParser.DROP:
            case MongoParser.IS_CAPPED:
            case MongoParser.CREATE_INDEX:
            case MongoParser.CREATE_INDEXES:
            case MongoParser.DROP_INDEX:
            case MongoParser.DROP_INDEXES:
            case MongoParser.LIST_INDEXES:
            case MongoParser.INDEXES:
            case MongoParser.INDEX_EXISTS:
            case MongoParser.INDEX_INFORMATION:
            case MongoParser.ESTIMATED_DOCUMENT_COUNT:
            case MongoParser.COUNT_DOCUMENTS:
            case MongoParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 805;
                this.identifier();
                }
                break;
            case MongoParser.NUMERIC_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 806;
                this.match(MongoParser.NUMERIC_LITERAL);
                }
                break;
            case MongoParser.TRUE:
            case MongoParser.FALSE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 807;
                this.boolean_();
                }
                break;
            case MongoParser.NULL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 808;
                this.match(MongoParser.NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 222, MongoParser.RULE_identifier);
        try {
            this.state = 813;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 811;
                this.match(MongoParser.IDENTIFIER);
                }
                break;
            case MongoParser.DB:
            case MongoParser.FIND:
            case MongoParser.FIND_ONE:
            case MongoParser.FIND_ONE_AND_DELETE:
            case MongoParser.FIND_ONE_AND_REPLACE:
            case MongoParser.FIND_ONE_AND_UPDATE:
            case MongoParser.SHOW_RECORD_ID:
            case MongoParser.RETURN_KEY:
            case MongoParser.FILTER:
            case MongoParser.MIN:
            case MongoParser.MAX:
            case MongoParser.SORT:
            case MongoParser.LIMIT:
            case MongoParser.EXPLAIN:
            case MongoParser.HINT:
            case MongoParser.SKIP_:
            case MongoParser.INSERT_ONE:
            case MongoParser.INSERT_MANY:
            case MongoParser.BULK_WRITE:
            case MongoParser.UPDATE_ONE:
            case MongoParser.UPDATE_MANY:
            case MongoParser.REPLACE_ONE:
            case MongoParser.DELETE_ONE:
            case MongoParser.DELETE_MANY:
            case MongoParser.RENAME:
            case MongoParser.DROP:
            case MongoParser.IS_CAPPED:
            case MongoParser.CREATE_INDEX:
            case MongoParser.CREATE_INDEXES:
            case MongoParser.DROP_INDEX:
            case MongoParser.DROP_INDEXES:
            case MongoParser.LIST_INDEXES:
            case MongoParser.INDEXES:
            case MongoParser.INDEX_EXISTS:
            case MongoParser.INDEX_INFORMATION:
            case MongoParser.ESTIMATED_DOCUMENT_COUNT:
            case MongoParser.COUNT_DOCUMENTS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 812;
                this.reservedKeyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public value(): ValueContext {
        let localContext = new ValueContext(this.context, this.state);
        this.enterRule(localContext, 224, MongoParser.RULE_value);
        try {
            this.state = 821;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 815;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.NUMBER:
            case MongoParser.NUMERIC_LITERAL:
            case MongoParser.SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 816;
                this.number_();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 817;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 818;
                this.array();
                }
                break;
            case MongoParser.TRUE:
            case MongoParser.FALSE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 819;
                this.boolean_();
                }
                break;
            case MongoParser.NULL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 820;
                this.match(MongoParser.NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public array(): ArrayContext {
        let localContext = new ArrayContext(this.context, this.state);
        this.enterRule(localContext, 226, MongoParser.RULE_array);
        let _la: number;
        try {
            let alternative: number;
            this.state = 839;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 61, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 823;
                this.match(MongoParser.LBRACKET);
                this.state = 824;
                this.value();
                this.state = 829;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 59, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 825;
                        this.match(MongoParser.COMMA);
                        this.state = 826;
                        this.value();
                        }
                        }
                    }
                    this.state = 831;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 59, this.context);
                }
                this.state = 833;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 832;
                    this.match(MongoParser.COMMA);
                    }
                }

                this.state = 835;
                this.match(MongoParser.RBRACKET);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 837;
                this.match(MongoParser.LBRACKET);
                this.state = 838;
                this.match(MongoParser.RBRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 228, MongoParser.RULE_number);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 842;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 841;
                this.match(MongoParser.SYMBOL);
                }
            }

            this.state = 844;
            _la = this.tokenStream.LA(1);
            if(!(_la === 52 || _la === 53)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public static readonly _serializedATN: number[] = [
        4,1,58,847,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
        7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
        2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
        7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,
        104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        1,0,3,0,232,8,0,1,0,1,0,1,1,1,1,3,1,238,8,1,1,1,1,1,1,1,1,1,3,1,
        244,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,3,5,282,8,5,1,6,1,6,1,6,1,6,1,6,3,6,289,
        8,6,3,6,291,8,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,3,9,302,8,9,
        1,9,1,9,1,10,1,10,1,11,1,11,1,11,3,11,311,8,11,1,11,1,11,1,12,1,
        12,1,13,1,13,1,13,1,13,1,13,3,13,322,8,13,1,13,1,13,1,14,1,14,1,
        15,1,15,1,15,1,15,1,15,5,15,333,8,15,10,15,12,15,336,9,15,1,15,3,
        15,339,8,15,1,15,3,15,342,8,15,1,16,1,16,1,16,3,16,347,8,16,1,16,
        1,16,1,17,1,17,1,18,1,18,1,18,3,18,356,8,18,1,18,1,18,1,19,1,19,
        1,20,1,20,1,20,3,20,365,8,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,
        1,22,1,22,3,22,376,8,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
        1,25,1,25,1,25,3,25,389,8,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,
        1,28,1,28,1,28,1,28,3,28,402,8,28,1,28,1,28,1,29,1,29,1,30,1,30,
        1,30,3,30,411,8,30,1,31,1,31,1,31,3,31,416,8,31,1,31,1,31,1,32,1,
        32,1,33,1,33,1,33,3,33,425,8,33,1,33,1,33,1,34,1,34,1,35,1,35,1,
        35,1,35,1,35,3,35,436,8,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,
        38,1,38,1,38,1,38,3,38,449,8,38,3,38,451,8,38,1,38,1,38,1,39,1,39,
        1,40,1,40,1,41,1,41,1,41,1,41,1,41,3,41,464,8,41,3,41,466,8,41,1,
        41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,
        44,481,8,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,3,48,498,8,48,1,48,1,48,1,49,1,49,1,50,1,
        50,3,50,506,8,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,
        52,517,8,52,1,52,1,52,1,53,1,53,1,54,1,54,3,54,525,8,54,1,55,1,55,
        1,56,1,56,1,56,1,56,1,56,3,56,534,8,56,1,56,1,56,1,57,1,57,1,58,
        1,58,1,59,1,59,1,59,1,59,1,59,3,59,547,8,59,1,59,1,59,1,60,1,60,
        1,60,1,60,5,60,555,8,60,10,60,12,60,558,9,60,1,60,3,60,561,8,60,
        1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,62,1,62,3,62,572,8,62,1,62,
        1,62,1,63,1,63,1,64,1,64,1,65,1,65,3,65,582,8,65,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,3,66,591,8,66,1,66,1,66,1,67,1,67,1,68,1,68,
        1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,608,8,70,1,70,
        1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,74,1,74,3,74,
        623,8,74,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,77,1,77,
        3,77,636,8,77,3,77,638,8,77,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,
        80,1,80,1,80,1,80,3,80,651,8,80,3,80,653,8,80,1,80,1,80,5,80,657,
        8,80,10,80,12,80,660,9,80,1,80,3,80,663,8,80,1,81,1,81,1,82,1,82,
        1,83,1,83,1,83,1,83,3,83,673,8,83,1,83,1,83,1,84,1,84,1,84,3,84,
        680,8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,700,8,85,1,86,1,86,1,86,
        1,86,1,86,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,90,1,90,
        1,90,1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,94,
        1,94,1,94,1,94,1,94,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,97,1,97,
        3,97,744,8,97,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,100,1,100,1,100,
        1,100,1,100,1,101,1,101,1,102,1,102,1,102,1,102,1,102,3,102,765,
        8,102,1,102,1,102,1,103,1,103,1,104,1,104,1,104,3,104,774,8,104,
        1,105,1,105,1,106,3,106,779,8,106,1,107,1,107,1,107,1,107,5,107,
        785,8,107,10,107,12,107,788,9,107,1,107,3,107,791,8,107,1,107,1,
        107,1,107,1,107,3,107,797,8,107,1,108,1,108,1,108,1,108,1,109,1,
        109,1,110,1,110,1,110,1,110,1,110,3,110,810,8,110,1,111,1,111,3,
        111,814,8,111,1,112,1,112,1,112,1,112,1,112,1,112,3,112,822,8,112,
        1,113,1,113,1,113,1,113,5,113,828,8,113,10,113,12,113,831,9,113,
        1,113,3,113,834,8,113,1,113,1,113,1,113,1,113,3,113,840,8,113,1,
        114,3,114,843,8,114,1,114,1,114,1,114,0,0,115,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        0,3,1,0,1,37,1,0,48,49,1,0,52,53,835,0,231,1,0,0,0,2,243,1,0,0,0,
        4,245,1,0,0,0,6,247,1,0,0,0,8,253,1,0,0,0,10,281,1,0,0,0,12,283,
        1,0,0,0,14,294,1,0,0,0,16,296,1,0,0,0,18,298,1,0,0,0,20,305,1,0,
        0,0,22,307,1,0,0,0,24,314,1,0,0,0,26,316,1,0,0,0,28,325,1,0,0,0,
        30,341,1,0,0,0,32,343,1,0,0,0,34,350,1,0,0,0,36,352,1,0,0,0,38,359,
        1,0,0,0,40,361,1,0,0,0,42,368,1,0,0,0,44,370,1,0,0,0,46,379,1,0,
        0,0,48,381,1,0,0,0,50,383,1,0,0,0,52,392,1,0,0,0,54,394,1,0,0,0,
        56,396,1,0,0,0,58,405,1,0,0,0,60,410,1,0,0,0,62,412,1,0,0,0,64,419,
        1,0,0,0,66,421,1,0,0,0,68,428,1,0,0,0,70,430,1,0,0,0,72,439,1,0,
        0,0,74,441,1,0,0,0,76,443,1,0,0,0,78,454,1,0,0,0,80,456,1,0,0,0,
        82,458,1,0,0,0,84,469,1,0,0,0,86,471,1,0,0,0,88,473,1,0,0,0,90,484,
        1,0,0,0,92,486,1,0,0,0,94,488,1,0,0,0,96,490,1,0,0,0,98,501,1,0,
        0,0,100,505,1,0,0,0,102,507,1,0,0,0,104,509,1,0,0,0,106,520,1,0,
        0,0,108,524,1,0,0,0,110,526,1,0,0,0,112,528,1,0,0,0,114,537,1,0,
        0,0,116,539,1,0,0,0,118,541,1,0,0,0,120,550,1,0,0,0,122,564,1,0,
        0,0,124,566,1,0,0,0,126,575,1,0,0,0,128,577,1,0,0,0,130,581,1,0,
        0,0,132,583,1,0,0,0,134,594,1,0,0,0,136,596,1,0,0,0,138,598,1,0,
        0,0,140,600,1,0,0,0,142,611,1,0,0,0,144,613,1,0,0,0,146,615,1,0,
        0,0,148,617,1,0,0,0,150,626,1,0,0,0,152,628,1,0,0,0,154,630,1,0,
        0,0,156,641,1,0,0,0,158,643,1,0,0,0,160,645,1,0,0,0,162,664,1,0,
        0,0,164,666,1,0,0,0,166,668,1,0,0,0,168,679,1,0,0,0,170,699,1,0,
        0,0,172,701,1,0,0,0,174,706,1,0,0,0,176,708,1,0,0,0,178,713,1,0,
        0,0,180,715,1,0,0,0,182,720,1,0,0,0,184,722,1,0,0,0,186,727,1,0,
        0,0,188,729,1,0,0,0,190,734,1,0,0,0,192,736,1,0,0,0,194,743,1,0,
        0,0,196,745,1,0,0,0,198,750,1,0,0,0,200,752,1,0,0,0,202,757,1,0,
        0,0,204,759,1,0,0,0,206,768,1,0,0,0,208,773,1,0,0,0,210,775,1,0,
        0,0,212,778,1,0,0,0,214,796,1,0,0,0,216,798,1,0,0,0,218,802,1,0,
        0,0,220,809,1,0,0,0,222,813,1,0,0,0,224,821,1,0,0,0,226,839,1,0,
        0,0,228,842,1,0,0,0,230,232,3,2,1,0,231,230,1,0,0,0,231,232,1,0,
        0,0,232,233,1,0,0,0,233,234,5,0,0,1,234,1,1,0,0,0,235,237,3,4,2,
        0,236,238,5,46,0,0,237,236,1,0,0,0,237,238,1,0,0,0,238,244,1,0,0,
        0,239,240,3,4,2,0,240,241,5,46,0,0,241,242,3,2,1,0,242,244,1,0,0,
        0,243,235,1,0,0,0,243,239,1,0,0,0,244,3,1,0,0,0,245,246,3,6,3,0,
        246,5,1,0,0,0,247,248,5,1,0,0,248,249,5,47,0,0,249,250,3,8,4,0,250,
        251,5,47,0,0,251,252,3,10,5,0,252,7,1,0,0,0,253,254,5,55,0,0,254,
        9,1,0,0,0,255,282,3,160,80,0,256,282,3,154,77,0,257,282,3,148,74,
        0,258,282,3,140,70,0,259,282,3,132,66,0,260,282,3,124,62,0,261,282,
        3,118,59,0,262,282,3,112,56,0,263,282,3,104,52,0,264,282,3,96,48,
        0,265,282,3,88,44,0,266,282,3,82,41,0,267,282,3,76,38,0,268,282,
        3,70,35,0,269,282,3,66,33,0,270,282,3,62,31,0,271,282,3,56,28,0,
        272,282,3,50,25,0,273,282,3,44,22,0,274,282,3,40,20,0,275,282,3,
        36,18,0,276,282,3,32,16,0,277,282,3,26,13,0,278,282,3,22,11,0,279,
        282,3,18,9,0,280,282,3,12,6,0,281,255,1,0,0,0,281,256,1,0,0,0,281,
        257,1,0,0,0,281,258,1,0,0,0,281,259,1,0,0,0,281,260,1,0,0,0,281,
        261,1,0,0,0,281,262,1,0,0,0,281,263,1,0,0,0,281,264,1,0,0,0,281,
        265,1,0,0,0,281,266,1,0,0,0,281,267,1,0,0,0,281,268,1,0,0,0,281,
        269,1,0,0,0,281,270,1,0,0,0,281,271,1,0,0,0,281,272,1,0,0,0,281,
        273,1,0,0,0,281,274,1,0,0,0,281,275,1,0,0,0,281,276,1,0,0,0,281,
        277,1,0,0,0,281,278,1,0,0,0,281,279,1,0,0,0,281,280,1,0,0,0,282,
        11,1,0,0,0,283,284,5,37,0,0,284,290,5,40,0,0,285,288,3,16,8,0,286,
        287,5,45,0,0,287,289,3,14,7,0,288,286,1,0,0,0,288,289,1,0,0,0,289,
        291,1,0,0,0,290,285,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,
        293,5,41,0,0,293,13,1,0,0,0,294,295,3,214,107,0,295,15,1,0,0,0,296,
        297,3,214,107,0,297,17,1,0,0,0,298,299,5,36,0,0,299,301,5,40,0,0,
        300,302,3,20,10,0,301,300,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,
        0,303,304,5,41,0,0,304,19,1,0,0,0,305,306,3,214,107,0,306,21,1,0,
        0,0,307,308,5,35,0,0,308,310,5,40,0,0,309,311,3,24,12,0,310,309,
        1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,5,41,0,0,313,23,
        1,0,0,0,314,315,3,214,107,0,315,25,1,0,0,0,316,317,5,34,0,0,317,
        318,5,40,0,0,318,321,3,30,15,0,319,320,5,45,0,0,320,322,3,28,14,
        0,321,319,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,5,41,0,
        0,324,27,1,0,0,0,325,326,3,214,107,0,326,29,1,0,0,0,327,342,5,51,
        0,0,328,329,5,38,0,0,329,334,5,51,0,0,330,331,5,45,0,0,331,333,5,
        51,0,0,332,330,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,
        0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,337,339,5,45,0,0,338,337,1,
        0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,342,5,39,0,0,341,327,1,
        0,0,0,341,328,1,0,0,0,342,31,1,0,0,0,343,344,5,33,0,0,344,346,5,
        40,0,0,345,347,3,34,17,0,346,345,1,0,0,0,346,347,1,0,0,0,347,348,
        1,0,0,0,348,349,5,41,0,0,349,33,1,0,0,0,350,351,3,214,107,0,351,
        35,1,0,0,0,352,353,5,32,0,0,353,355,5,40,0,0,354,356,3,38,19,0,355,
        354,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,5,41,0,0,358,
        37,1,0,0,0,359,360,3,214,107,0,360,39,1,0,0,0,361,362,5,31,0,0,362,
        364,5,40,0,0,363,365,3,42,21,0,364,363,1,0,0,0,364,365,1,0,0,0,365,
        366,1,0,0,0,366,367,5,41,0,0,367,41,1,0,0,0,368,369,3,214,107,0,
        369,43,1,0,0,0,370,371,5,30,0,0,371,372,5,40,0,0,372,375,3,48,24,
        0,373,374,5,45,0,0,374,376,3,46,23,0,375,373,1,0,0,0,375,376,1,0,
        0,0,376,377,1,0,0,0,377,378,5,41,0,0,378,45,1,0,0,0,379,380,3,214,
        107,0,380,47,1,0,0,0,381,382,5,51,0,0,382,49,1,0,0,0,383,384,5,29,
        0,0,384,385,5,40,0,0,385,388,3,54,27,0,386,387,5,45,0,0,387,389,
        3,52,26,0,388,386,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,
        5,41,0,0,391,51,1,0,0,0,392,393,3,214,107,0,393,53,1,0,0,0,394,395,
        3,226,113,0,395,55,1,0,0,0,396,397,5,28,0,0,397,398,5,40,0,0,398,
        401,3,60,30,0,399,400,5,45,0,0,400,402,3,58,29,0,401,399,1,0,0,0,
        401,402,1,0,0,0,402,403,1,0,0,0,403,404,5,41,0,0,404,57,1,0,0,0,
        405,406,3,214,107,0,406,59,1,0,0,0,407,411,5,51,0,0,408,411,3,214,
        107,0,409,411,3,226,113,0,410,407,1,0,0,0,410,408,1,0,0,0,410,409,
        1,0,0,0,411,61,1,0,0,0,412,413,5,27,0,0,413,415,5,40,0,0,414,416,
        3,64,32,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,
        5,41,0,0,418,63,1,0,0,0,419,420,3,214,107,0,420,65,1,0,0,0,421,422,
        5,26,0,0,422,424,5,40,0,0,423,425,3,68,34,0,424,423,1,0,0,0,424,
        425,1,0,0,0,425,426,1,0,0,0,426,427,5,41,0,0,427,67,1,0,0,0,428,
        429,3,214,107,0,429,69,1,0,0,0,430,431,5,25,0,0,431,432,5,40,0,0,
        432,435,3,72,36,0,433,434,5,45,0,0,434,436,3,74,37,0,435,433,1,0,
        0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,438,5,41,0,0,438,71,1,0,
        0,0,439,440,5,51,0,0,440,73,1,0,0,0,441,442,3,214,107,0,442,75,1,
        0,0,0,443,444,5,24,0,0,444,450,5,40,0,0,445,448,3,78,39,0,446,447,
        5,45,0,0,447,449,3,80,40,0,448,446,1,0,0,0,448,449,1,0,0,0,449,451,
        1,0,0,0,450,445,1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,453,
        5,41,0,0,453,77,1,0,0,0,454,455,3,214,107,0,455,79,1,0,0,0,456,457,
        3,214,107,0,457,81,1,0,0,0,458,459,5,23,0,0,459,465,5,40,0,0,460,
        463,3,84,42,0,461,462,5,45,0,0,462,464,3,86,43,0,463,461,1,0,0,0,
        463,464,1,0,0,0,464,466,1,0,0,0,465,460,1,0,0,0,465,466,1,0,0,0,
        466,467,1,0,0,0,467,468,5,41,0,0,468,83,1,0,0,0,469,470,3,214,107,
        0,470,85,1,0,0,0,471,472,3,214,107,0,472,87,1,0,0,0,473,474,5,22,
        0,0,474,475,5,40,0,0,475,476,3,90,45,0,476,477,5,45,0,0,477,480,
        3,92,46,0,478,479,5,45,0,0,479,481,3,94,47,0,480,478,1,0,0,0,480,
        481,1,0,0,0,481,482,1,0,0,0,482,483,5,41,0,0,483,89,1,0,0,0,484,
        485,3,214,107,0,485,91,1,0,0,0,486,487,3,130,65,0,487,93,1,0,0,0,
        488,489,3,214,107,0,489,95,1,0,0,0,490,491,5,21,0,0,491,492,5,40,
        0,0,492,493,3,98,49,0,493,494,5,45,0,0,494,497,3,100,50,0,495,496,
        5,45,0,0,496,498,3,102,51,0,497,495,1,0,0,0,497,498,1,0,0,0,498,
        499,1,0,0,0,499,500,5,41,0,0,500,97,1,0,0,0,501,502,3,214,107,0,
        502,99,1,0,0,0,503,506,3,214,107,0,504,506,3,226,113,0,505,503,1,
        0,0,0,505,504,1,0,0,0,506,101,1,0,0,0,507,508,3,214,107,0,508,103,
        1,0,0,0,509,510,5,20,0,0,510,511,5,40,0,0,511,512,3,106,53,0,512,
        513,5,45,0,0,513,516,3,108,54,0,514,515,5,45,0,0,515,517,3,110,55,
        0,516,514,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,519,5,41,0,
        0,519,105,1,0,0,0,520,521,3,214,107,0,521,107,1,0,0,0,522,525,3,
        226,113,0,523,525,3,214,107,0,524,522,1,0,0,0,524,523,1,0,0,0,525,
        109,1,0,0,0,526,527,3,214,107,0,527,111,1,0,0,0,528,529,5,19,0,0,
        529,530,5,40,0,0,530,533,3,114,57,0,531,532,5,45,0,0,532,534,3,116,
        58,0,533,531,1,0,0,0,533,534,1,0,0,0,534,535,1,0,0,0,535,536,5,41,
        0,0,536,113,1,0,0,0,537,538,3,226,113,0,538,115,1,0,0,0,539,540,
        3,214,107,0,540,117,1,0,0,0,541,542,5,18,0,0,542,543,5,40,0,0,543,
        546,3,120,60,0,544,545,5,45,0,0,545,547,3,122,61,0,546,544,1,0,0,
        0,546,547,1,0,0,0,547,548,1,0,0,0,548,549,5,41,0,0,549,119,1,0,0,
        0,550,551,5,38,0,0,551,556,3,130,65,0,552,553,5,45,0,0,553,555,3,
        130,65,0,554,552,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,557,
        1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,559,561,5,45,0,0,560,559,
        1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,563,5,39,0,0,563,121,
        1,0,0,0,564,565,3,214,107,0,565,123,1,0,0,0,566,567,5,17,0,0,567,
        568,5,40,0,0,568,571,3,126,63,0,569,570,5,45,0,0,570,572,3,128,64,
        0,571,569,1,0,0,0,571,572,1,0,0,0,572,573,1,0,0,0,573,574,5,41,0,
        0,574,125,1,0,0,0,575,576,3,130,65,0,576,127,1,0,0,0,577,578,3,214,
        107,0,578,129,1,0,0,0,579,582,3,214,107,0,580,582,3,226,113,0,581,
        579,1,0,0,0,581,580,1,0,0,0,582,131,1,0,0,0,583,584,5,6,0,0,584,
        585,5,40,0,0,585,586,3,134,67,0,586,587,5,45,0,0,587,590,3,136,68,
        0,588,589,5,45,0,0,589,591,3,138,69,0,590,588,1,0,0,0,590,591,1,
        0,0,0,591,592,1,0,0,0,592,593,5,41,0,0,593,133,1,0,0,0,594,595,3,
        214,107,0,595,135,1,0,0,0,596,597,3,214,107,0,597,137,1,0,0,0,598,
        599,3,214,107,0,599,139,1,0,0,0,600,601,5,5,0,0,601,602,5,40,0,0,
        602,603,3,142,71,0,603,604,5,45,0,0,604,607,3,144,72,0,605,606,5,
        45,0,0,606,608,3,146,73,0,607,605,1,0,0,0,607,608,1,0,0,0,608,609,
        1,0,0,0,609,610,5,41,0,0,610,141,1,0,0,0,611,612,3,214,107,0,612,
        143,1,0,0,0,613,614,3,214,107,0,614,145,1,0,0,0,615,616,3,214,107,
        0,616,147,1,0,0,0,617,618,5,4,0,0,618,619,5,40,0,0,619,622,3,150,
        75,0,620,621,5,45,0,0,621,623,3,152,76,0,622,620,1,0,0,0,622,623,
        1,0,0,0,623,624,1,0,0,0,624,625,5,41,0,0,625,149,1,0,0,0,626,627,
        3,214,107,0,627,151,1,0,0,0,628,629,3,214,107,0,629,153,1,0,0,0,
        630,631,5,3,0,0,631,637,5,40,0,0,632,635,3,156,78,0,633,634,5,45,
        0,0,634,636,3,158,79,0,635,633,1,0,0,0,635,636,1,0,0,0,636,638,1,
        0,0,0,637,632,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,640,5,
        41,0,0,640,155,1,0,0,0,641,642,3,214,107,0,642,157,1,0,0,0,643,644,
        3,214,107,0,644,159,1,0,0,0,645,646,5,2,0,0,646,652,5,40,0,0,647,
        650,3,162,81,0,648,649,5,45,0,0,649,651,3,164,82,0,650,648,1,0,0,
        0,650,651,1,0,0,0,651,653,1,0,0,0,652,647,1,0,0,0,652,653,1,0,0,
        0,653,654,1,0,0,0,654,658,5,41,0,0,655,657,3,170,85,0,656,655,1,
        0,0,0,657,660,1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,662,1,
        0,0,0,660,658,1,0,0,0,661,663,3,166,83,0,662,661,1,0,0,0,662,663,
        1,0,0,0,663,161,1,0,0,0,664,665,3,214,107,0,665,163,1,0,0,0,666,
        667,3,214,107,0,667,165,1,0,0,0,668,669,5,47,0,0,669,670,5,14,0,
        0,670,672,5,40,0,0,671,673,3,168,84,0,672,671,1,0,0,0,672,673,1,
        0,0,0,673,674,1,0,0,0,674,675,5,41,0,0,675,167,1,0,0,0,676,680,5,
        51,0,0,677,680,3,218,109,0,678,680,3,214,107,0,679,676,1,0,0,0,679,
        677,1,0,0,0,679,678,1,0,0,0,680,169,1,0,0,0,681,682,5,47,0,0,682,
        700,3,172,86,0,683,684,5,47,0,0,684,700,3,176,88,0,685,686,5,47,
        0,0,686,700,3,180,90,0,687,688,5,47,0,0,688,700,3,184,92,0,689,690,
        5,47,0,0,690,700,3,188,94,0,691,692,5,47,0,0,692,700,3,192,96,0,
        693,694,5,47,0,0,694,700,3,196,98,0,695,696,5,47,0,0,696,700,3,200,
        100,0,697,698,5,47,0,0,698,700,3,204,102,0,699,681,1,0,0,0,699,683,
        1,0,0,0,699,685,1,0,0,0,699,687,1,0,0,0,699,689,1,0,0,0,699,691,
        1,0,0,0,699,693,1,0,0,0,699,695,1,0,0,0,699,697,1,0,0,0,700,171,
        1,0,0,0,701,702,5,16,0,0,702,703,5,40,0,0,703,704,3,174,87,0,704,
        705,5,41,0,0,705,173,1,0,0,0,706,707,3,228,114,0,707,175,1,0,0,0,
        708,709,5,13,0,0,709,710,5,40,0,0,710,711,3,178,89,0,711,712,5,41,
        0,0,712,177,1,0,0,0,713,714,3,228,114,0,714,179,1,0,0,0,715,716,
        5,9,0,0,716,717,5,40,0,0,717,718,3,182,91,0,718,719,5,41,0,0,719,
        181,1,0,0,0,720,721,3,214,107,0,721,183,1,0,0,0,722,723,5,10,0,0,
        723,724,5,40,0,0,724,725,3,186,93,0,725,726,5,41,0,0,726,185,1,0,
        0,0,727,728,3,214,107,0,728,187,1,0,0,0,729,730,5,11,0,0,730,731,
        5,40,0,0,731,732,3,190,95,0,732,733,5,41,0,0,733,189,1,0,0,0,734,
        735,3,214,107,0,735,191,1,0,0,0,736,737,5,15,0,0,737,738,5,40,0,
        0,738,739,3,194,97,0,739,740,5,41,0,0,740,193,1,0,0,0,741,744,3,
        214,107,0,742,744,5,51,0,0,743,741,1,0,0,0,743,742,1,0,0,0,744,195,
        1,0,0,0,745,746,5,8,0,0,746,747,5,40,0,0,747,748,3,198,99,0,748,
        749,5,41,0,0,749,197,1,0,0,0,750,751,3,218,109,0,751,199,1,0,0,0,
        752,753,5,7,0,0,753,754,5,40,0,0,754,755,3,202,101,0,755,756,5,41,
        0,0,756,201,1,0,0,0,757,758,3,218,109,0,758,203,1,0,0,0,759,760,
        5,12,0,0,760,761,5,40,0,0,761,764,3,206,103,0,762,763,5,45,0,0,763,
        765,3,208,104,0,764,762,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,
        766,767,5,41,0,0,767,205,1,0,0,0,768,769,3,212,106,0,769,207,1,0,
        0,0,770,774,3,228,114,0,771,774,5,51,0,0,772,774,3,214,107,0,773,
        770,1,0,0,0,773,771,1,0,0,0,773,772,1,0,0,0,774,209,1,0,0,0,775,
        776,7,0,0,0,776,211,1,0,0,0,777,779,3,224,112,0,778,777,1,0,0,0,
        778,779,1,0,0,0,779,213,1,0,0,0,780,781,5,42,0,0,781,786,3,216,108,
        0,782,783,5,45,0,0,783,785,3,216,108,0,784,782,1,0,0,0,785,788,1,
        0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,790,1,0,0,0,788,786,1,
        0,0,0,789,791,5,45,0,0,790,789,1,0,0,0,790,791,1,0,0,0,791,792,1,
        0,0,0,792,793,5,43,0,0,793,797,1,0,0,0,794,795,5,42,0,0,795,797,
        5,43,0,0,796,780,1,0,0,0,796,794,1,0,0,0,797,215,1,0,0,0,798,799,
        3,220,110,0,799,800,5,44,0,0,800,801,3,224,112,0,801,217,1,0,0,0,
        802,803,7,1,0,0,803,219,1,0,0,0,804,810,5,51,0,0,805,810,3,222,111,
        0,806,810,5,53,0,0,807,810,3,218,109,0,808,810,5,50,0,0,809,804,
        1,0,0,0,809,805,1,0,0,0,809,806,1,0,0,0,809,807,1,0,0,0,809,808,
        1,0,0,0,810,221,1,0,0,0,811,814,5,55,0,0,812,814,3,210,105,0,813,
        811,1,0,0,0,813,812,1,0,0,0,814,223,1,0,0,0,815,822,5,51,0,0,816,
        822,3,228,114,0,817,822,3,214,107,0,818,822,3,226,113,0,819,822,
        3,218,109,0,820,822,5,50,0,0,821,815,1,0,0,0,821,816,1,0,0,0,821,
        817,1,0,0,0,821,818,1,0,0,0,821,819,1,0,0,0,821,820,1,0,0,0,822,
        225,1,0,0,0,823,824,5,38,0,0,824,829,3,224,112,0,825,826,5,45,0,
        0,826,828,3,224,112,0,827,825,1,0,0,0,828,831,1,0,0,0,829,827,1,
        0,0,0,829,830,1,0,0,0,830,833,1,0,0,0,831,829,1,0,0,0,832,834,5,
        45,0,0,833,832,1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,836,5,
        39,0,0,836,840,1,0,0,0,837,838,5,38,0,0,838,840,5,39,0,0,839,823,
        1,0,0,0,839,837,1,0,0,0,840,227,1,0,0,0,841,843,5,54,0,0,842,841,
        1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,845,7,2,0,0,845,229,
        1,0,0,0,63,231,237,243,281,288,290,301,310,321,334,338,341,346,355,
        364,375,388,401,410,415,424,435,448,450,463,465,480,497,505,516,
        524,533,546,556,560,571,581,590,607,622,635,637,650,652,658,662,
        672,679,699,743,764,773,778,786,790,796,809,813,821,829,833,839,
        842
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!MongoParser.__ATN) {
            MongoParser.__ATN = new antlr.ATNDeserializer().deserialize(MongoParser._serializedATN);
        }

        return MongoParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(MongoParser.literalNames, MongoParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return MongoParser.vocabulary;
    }

    private static readonly decisionsToDFA = MongoParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(MongoParser.EOF, 0)!;
    }
    public commands(): CommandsContext | null {
        return this.getRuleContext(0, CommandsContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_root;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitRoot) {
            return visitor.visitRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public command(): CommandContext {
        return this.getRuleContext(0, CommandContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SEMICOLON, 0);
    }
    public commands(): CommandsContext | null {
        return this.getRuleContext(0, CommandsContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_commands;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCommands) {
            return visitor.visitCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collectionOperation(): CollectionOperationContext {
        return this.getRuleContext(0, CollectionOperationContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_command;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCommand) {
            return visitor.visitCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionOperationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DB(): antlr.TerminalNode {
        return this.getToken(MongoParser.DB, 0)!;
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.DOT);
    	} else {
    		return this.getToken(MongoParser.DOT, i);
    	}
    }
    public collectionName(): CollectionNameContext {
        return this.getRuleContext(0, CollectionNameContext)!;
    }
    public collectionMethod(): CollectionMethodContext {
        return this.getRuleContext(0, CollectionMethodContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionOperation;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionOperation) {
            return visitor.visitCollectionOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(MongoParser.IDENTIFIER, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionName;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionName) {
            return visitor.visitCollectionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public findMethod(): FindMethodContext | null {
        return this.getRuleContext(0, FindMethodContext);
    }
    public findOneMethod(): FindOneMethodContext | null {
        return this.getRuleContext(0, FindOneMethodContext);
    }
    public findOneAndDeleteMethod(): FindOneAndDeleteMethodContext | null {
        return this.getRuleContext(0, FindOneAndDeleteMethodContext);
    }
    public findOneAndReplaceMethod(): FindOneAndReplaceMethodContext | null {
        return this.getRuleContext(0, FindOneAndReplaceMethodContext);
    }
    public findOneAndUpdateMethod(): FindOneAndUpdateMethodContext | null {
        return this.getRuleContext(0, FindOneAndUpdateMethodContext);
    }
    public insertOneMethod(): InsertOneMethodContext | null {
        return this.getRuleContext(0, InsertOneMethodContext);
    }
    public insertManyMethod(): InsertManyMethodContext | null {
        return this.getRuleContext(0, InsertManyMethodContext);
    }
    public bulkWriteMethod(): BulkWriteMethodContext | null {
        return this.getRuleContext(0, BulkWriteMethodContext);
    }
    public updateOneMethod(): UpdateOneMethodContext | null {
        return this.getRuleContext(0, UpdateOneMethodContext);
    }
    public updateManyMethod(): UpdateManyMethodContext | null {
        return this.getRuleContext(0, UpdateManyMethodContext);
    }
    public replaceOneMethod(): ReplaceOneMethodContext | null {
        return this.getRuleContext(0, ReplaceOneMethodContext);
    }
    public deleteOneMethod(): DeleteOneMethodContext | null {
        return this.getRuleContext(0, DeleteOneMethodContext);
    }
    public deleteManyMethod(): DeleteManyMethodContext | null {
        return this.getRuleContext(0, DeleteManyMethodContext);
    }
    public renameMethod(): RenameMethodContext | null {
        return this.getRuleContext(0, RenameMethodContext);
    }
    public dropMethod(): DropMethodContext | null {
        return this.getRuleContext(0, DropMethodContext);
    }
    public isCappedMethod(): IsCappedMethodContext | null {
        return this.getRuleContext(0, IsCappedMethodContext);
    }
    public createIndexMethod(): CreateIndexMethodContext | null {
        return this.getRuleContext(0, CreateIndexMethodContext);
    }
    public createIndexesMethod(): CreateIndexesMethodContext | null {
        return this.getRuleContext(0, CreateIndexesMethodContext);
    }
    public dropIndexMethod(): DropIndexMethodContext | null {
        return this.getRuleContext(0, DropIndexMethodContext);
    }
    public dropIndexesMethod(): DropIndexesMethodContext | null {
        return this.getRuleContext(0, DropIndexesMethodContext);
    }
    public listIndexesMethod(): ListIndexesMethodContext | null {
        return this.getRuleContext(0, ListIndexesMethodContext);
    }
    public indexesMethod(): IndexesMethodContext | null {
        return this.getRuleContext(0, IndexesMethodContext);
    }
    public indexExistsMethod(): IndexExistsMethodContext | null {
        return this.getRuleContext(0, IndexExistsMethodContext);
    }
    public indexInformationMethod(): IndexInformationMethodContext | null {
        return this.getRuleContext(0, IndexInformationMethodContext);
    }
    public estimatedDocumentCountMethod(): EstimatedDocumentCountMethodContext | null {
        return this.getRuleContext(0, EstimatedDocumentCountMethodContext);
    }
    public countDocumentsMethod(): CountDocumentsMethodContext | null {
        return this.getRuleContext(0, CountDocumentsMethodContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionMethod) {
            return visitor.visitCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CountDocumentsMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COUNT_DOCUMENTS(): antlr.TerminalNode {
        return this.getToken(MongoParser.COUNT_DOCUMENTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public countDocumentsArgument1(): CountDocumentsArgument1Context | null {
        return this.getRuleContext(0, CountDocumentsArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public countDocumentsArgument2(): CountDocumentsArgument2Context | null {
        return this.getRuleContext(0, CountDocumentsArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_countDocumentsMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCountDocumentsMethod) {
            return visitor.visitCountDocumentsMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CountDocumentsArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_countDocumentsArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCountDocumentsArgument2) {
            return visitor.visitCountDocumentsArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CountDocumentsArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_countDocumentsArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCountDocumentsArgument1) {
            return visitor.visitCountDocumentsArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EstimatedDocumentCountMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ESTIMATED_DOCUMENT_COUNT(): antlr.TerminalNode {
        return this.getToken(MongoParser.ESTIMATED_DOCUMENT_COUNT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public estimatedDocumentCountArgument(): EstimatedDocumentCountArgumentContext | null {
        return this.getRuleContext(0, EstimatedDocumentCountArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_estimatedDocumentCountMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitEstimatedDocumentCountMethod) {
            return visitor.visitEstimatedDocumentCountMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EstimatedDocumentCountArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_estimatedDocumentCountArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitEstimatedDocumentCountArgument) {
            return visitor.visitEstimatedDocumentCountArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexInformationMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX_INFORMATION(): antlr.TerminalNode {
        return this.getToken(MongoParser.INDEX_INFORMATION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public indexInformationArgument(): IndexInformationArgumentContext | null {
        return this.getRuleContext(0, IndexInformationArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_indexInformationMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIndexInformationMethod) {
            return visitor.visitIndexInformationMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexInformationArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_indexInformationArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIndexInformationArgument) {
            return visitor.visitIndexInformationArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexExistsMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX_EXISTS(): antlr.TerminalNode {
        return this.getToken(MongoParser.INDEX_EXISTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public indexExistsArgument1(): IndexExistsArgument1Context {
        return this.getRuleContext(0, IndexExistsArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public indexExistsArgument2(): IndexExistsArgument2Context | null {
        return this.getRuleContext(0, IndexExistsArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_indexExistsMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIndexExistsMethod) {
            return visitor.visitIndexExistsMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexExistsArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_indexExistsArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIndexExistsArgument2) {
            return visitor.visitIndexExistsArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexExistsArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode[];
    public STRING(i: number): antlr.TerminalNode | null;
    public STRING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.STRING);
    	} else {
    		return this.getToken(MongoParser.STRING, i);
    	}
    }
    public LBRACKET(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LBRACKET, 0);
    }
    public RBRACKET(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RBRACKET, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_indexExistsArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIndexExistsArgument1) {
            return visitor.visitIndexExistsArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public indexesArgument(): IndexesArgumentContext | null {
        return this.getRuleContext(0, IndexesArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_indexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIndexesMethod) {
            return visitor.visitIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexesArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_indexesArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIndexesArgument) {
            return visitor.visitIndexesArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListIndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIST_INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.LIST_INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public listIndexesArgument(): ListIndexesArgumentContext | null {
        return this.getRuleContext(0, ListIndexesArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_listIndexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitListIndexesMethod) {
            return visitor.visitListIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListIndexesArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_listIndexesArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitListIndexesArgument) {
            return visitor.visitListIndexesArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropIndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP_INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public dropIndexesArgument(): DropIndexesArgumentContext | null {
        return this.getRuleContext(0, DropIndexesArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_dropIndexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndexesMethod) {
            return visitor.visitDropIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropIndexesArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_dropIndexesArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndexesArgument) {
            return visitor.visitDropIndexesArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropIndexMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_INDEX(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP_INDEX, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public dropIndexArgument1(): DropIndexArgument1Context {
        return this.getRuleContext(0, DropIndexArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public dropIndexArgument2(): DropIndexArgument2Context | null {
        return this.getRuleContext(0, DropIndexArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_dropIndexMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndexMethod) {
            return visitor.visitDropIndexMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropIndexArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_dropIndexArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndexArgument2) {
            return visitor.visitDropIndexArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropIndexArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_dropIndexArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndexArgument1) {
            return visitor.visitDropIndexArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.CREATE_INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public createIndexesArgument1(): CreateIndexesArgument1Context {
        return this.getRuleContext(0, CreateIndexesArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public createIndexesArgument2(): CreateIndexesArgument2Context | null {
        return this.getRuleContext(0, CreateIndexesArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_createIndexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndexesMethod) {
            return visitor.visitCreateIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexesArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_createIndexesArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndexesArgument2) {
            return visitor.visitCreateIndexesArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexesArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array(): ArrayContext {
        return this.getRuleContext(0, ArrayContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_createIndexesArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndexesArgument1) {
            return visitor.visitCreateIndexesArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_INDEX(): antlr.TerminalNode {
        return this.getToken(MongoParser.CREATE_INDEX, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public createIndexArgument1(): CreateIndexArgument1Context {
        return this.getRuleContext(0, CreateIndexArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public createIndexArgument2(): CreateIndexArgument2Context | null {
        return this.getRuleContext(0, CreateIndexArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_createIndexMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndexMethod) {
            return visitor.visitCreateIndexMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_createIndexArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndexArgument2) {
            return visitor.visitCreateIndexArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_createIndexArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndexArgument1) {
            return visitor.visitCreateIndexArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsCappedMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS_CAPPED(): antlr.TerminalNode {
        return this.getToken(MongoParser.IS_CAPPED, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public isCappedArgument(): IsCappedArgumentContext | null {
        return this.getRuleContext(0, IsCappedArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_isCappedMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIsCappedMethod) {
            return visitor.visitIsCappedMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsCappedArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_isCappedArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIsCappedArgument) {
            return visitor.visitIsCappedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public dropArgument(): DropArgumentContext | null {
        return this.getRuleContext(0, DropArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_dropMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDropMethod) {
            return visitor.visitDropMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_dropArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDropArgument) {
            return visitor.visitDropArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(MongoParser.RENAME, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public renameArgument1(): RenameArgument1Context {
        return this.getRuleContext(0, RenameArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public renameArgument2(): RenameArgument2Context | null {
        return this.getRuleContext(0, RenameArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_renameMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameMethod) {
            return visitor.visitRenameMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_renameArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameArgument1) {
            return visitor.visitRenameArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_renameArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameArgument2) {
            return visitor.visitRenameArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteManyMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE_MANY(): antlr.TerminalNode {
        return this.getToken(MongoParser.DELETE_MANY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public deleteManyArgument1(): DeleteManyArgument1Context | null {
        return this.getRuleContext(0, DeleteManyArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public deleteManyArgument2(): DeleteManyArgument2Context | null {
        return this.getRuleContext(0, DeleteManyArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_deleteManyMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteManyMethod) {
            return visitor.visitDeleteManyMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteManyArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_deleteManyArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteManyArgument1) {
            return visitor.visitDeleteManyArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteManyArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_deleteManyArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteManyArgument2) {
            return visitor.visitDeleteManyArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.DELETE_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public deleteOneArgument1(): DeleteOneArgument1Context | null {
        return this.getRuleContext(0, DeleteOneArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public deleteOneArgument2(): DeleteOneArgument2Context | null {
        return this.getRuleContext(0, DeleteOneArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_deleteOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteOneMethod) {
            return visitor.visitDeleteOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_deleteOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteOneArgument1) {
            return visitor.visitDeleteOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_deleteOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteOneArgument2) {
            return visitor.visitDeleteOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLACE_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.REPLACE_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public replaceOneArgument1(): ReplaceOneArgument1Context {
        return this.getRuleContext(0, ReplaceOneArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public replaceOneArgument2(): ReplaceOneArgument2Context {
        return this.getRuleContext(0, ReplaceOneArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public replaceOneArgument3(): ReplaceOneArgument3Context | null {
        return this.getRuleContext(0, ReplaceOneArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_replaceOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceOneMethod) {
            return visitor.visitReplaceOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_replaceOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceOneArgument1) {
            return visitor.visitReplaceOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public documentToInsert(): DocumentToInsertContext {
        return this.getRuleContext(0, DocumentToInsertContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_replaceOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceOneArgument2) {
            return visitor.visitReplaceOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceOneArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_replaceOneArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceOneArgument3) {
            return visitor.visitReplaceOneArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateManyMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_MANY(): antlr.TerminalNode {
        return this.getToken(MongoParser.UPDATE_MANY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public updateManyArgument1(): UpdateManyArgument1Context {
        return this.getRuleContext(0, UpdateManyArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public updateManyArgument2(): UpdateManyArgument2Context {
        return this.getRuleContext(0, UpdateManyArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public updateManyArgument3(): UpdateManyArgument3Context | null {
        return this.getRuleContext(0, UpdateManyArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_updateManyMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateManyMethod) {
            return visitor.visitUpdateManyMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateManyArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_updateManyArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateManyArgument1) {
            return visitor.visitUpdateManyArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateManyArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_updateManyArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateManyArgument2) {
            return visitor.visitUpdateManyArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateManyArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_updateManyArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateManyArgument3) {
            return visitor.visitUpdateManyArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.UPDATE_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public updateOneArgument1(): UpdateOneArgument1Context {
        return this.getRuleContext(0, UpdateOneArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public updateOneArgument2(): UpdateOneArgument2Context {
        return this.getRuleContext(0, UpdateOneArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public updateOneArgument3(): UpdateOneArgument3Context | null {
        return this.getRuleContext(0, UpdateOneArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_updateOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateOneMethod) {
            return visitor.visitUpdateOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_updateOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateOneArgument1) {
            return visitor.visitUpdateOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_updateOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateOneArgument2) {
            return visitor.visitUpdateOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateOneArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_updateOneArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateOneArgument3) {
            return visitor.visitUpdateOneArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BulkWriteMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BULK_WRITE(): antlr.TerminalNode {
        return this.getToken(MongoParser.BULK_WRITE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public bulkWriteArgument1(): BulkWriteArgument1Context {
        return this.getRuleContext(0, BulkWriteArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public bulkWriteArgument2(): BulkWriteArgument2Context | null {
        return this.getRuleContext(0, BulkWriteArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_bulkWriteMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitBulkWriteMethod) {
            return visitor.visitBulkWriteMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BulkWriteArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array(): ArrayContext {
        return this.getRuleContext(0, ArrayContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_bulkWriteArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitBulkWriteArgument1) {
            return visitor.visitBulkWriteArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BulkWriteArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_bulkWriteArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitBulkWriteArgument2) {
            return visitor.visitBulkWriteArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertManyMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT_MANY(): antlr.TerminalNode {
        return this.getToken(MongoParser.INSERT_MANY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public insertManyArgument1(): InsertManyArgument1Context {
        return this.getRuleContext(0, InsertManyArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public insertManyArgument2(): InsertManyArgument2Context | null {
        return this.getRuleContext(0, InsertManyArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_insertManyMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitInsertManyMethod) {
            return visitor.visitInsertManyMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertManyArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.LBRACKET, 0)!;
    }
    public documentToInsert(): DocumentToInsertContext[];
    public documentToInsert(i: number): DocumentToInsertContext | null;
    public documentToInsert(i?: number): DocumentToInsertContext[] | DocumentToInsertContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DocumentToInsertContext);
        }

        return this.getRuleContext(i, DocumentToInsertContext);
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.RBRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_insertManyArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitInsertManyArgument1) {
            return visitor.visitInsertManyArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertManyArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_insertManyArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitInsertManyArgument2) {
            return visitor.visitInsertManyArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.INSERT_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public insertOneArgument1(): InsertOneArgument1Context {
        return this.getRuleContext(0, InsertOneArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public insertOneArgument2(): InsertOneArgument2Context | null {
        return this.getRuleContext(0, InsertOneArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_insertOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitInsertOneMethod) {
            return visitor.visitInsertOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public documentToInsert(): DocumentToInsertContext {
        return this.getRuleContext(0, DocumentToInsertContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_insertOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitInsertOneArgument1) {
            return visitor.visitInsertOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_insertOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitInsertOneArgument2) {
            return visitor.visitInsertOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DocumentToInsertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_documentToInsert;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDocumentToInsert) {
            return visitor.visitDocumentToInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneAndUpdateMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE_AND_UPDATE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE_AND_UPDATE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public findOneAndUpdateArgument1(): FindOneAndUpdateArgument1Context {
        return this.getRuleContext(0, FindOneAndUpdateArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public findOneAndUpdateArgument2(): FindOneAndUpdateArgument2Context {
        return this.getRuleContext(0, FindOneAndUpdateArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public findOneAndUpdateArgument3(): FindOneAndUpdateArgument3Context | null {
        return this.getRuleContext(0, FindOneAndUpdateArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneAndUpdateMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneAndUpdateMethod) {
            return visitor.visitFindOneAndUpdateMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneAndUpdateArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneAndUpdateArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneAndUpdateArgument1) {
            return visitor.visitFindOneAndUpdateArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneAndUpdateArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneAndUpdateArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneAndUpdateArgument2) {
            return visitor.visitFindOneAndUpdateArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneAndUpdateArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneAndUpdateArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneAndUpdateArgument3) {
            return visitor.visitFindOneAndUpdateArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneAndReplaceMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE_AND_REPLACE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE_AND_REPLACE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public findOneAndReplaceArgument1(): FindOneAndReplaceArgument1Context {
        return this.getRuleContext(0, FindOneAndReplaceArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public findOneAndReplaceArgument2(): FindOneAndReplaceArgument2Context {
        return this.getRuleContext(0, FindOneAndReplaceArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public findOneAndReplaceArgument3(): FindOneAndReplaceArgument3Context | null {
        return this.getRuleContext(0, FindOneAndReplaceArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneAndReplaceMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneAndReplaceMethod) {
            return visitor.visitFindOneAndReplaceMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneAndReplaceArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneAndReplaceArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneAndReplaceArgument1) {
            return visitor.visitFindOneAndReplaceArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneAndReplaceArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneAndReplaceArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneAndReplaceArgument2) {
            return visitor.visitFindOneAndReplaceArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneAndReplaceArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneAndReplaceArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneAndReplaceArgument3) {
            return visitor.visitFindOneAndReplaceArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneAndDeleteMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE_AND_DELETE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE_AND_DELETE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public findOneAndDeleteArgument1(): FindOneAndDeleteArgument1Context {
        return this.getRuleContext(0, FindOneAndDeleteArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public findOneAndDeleteArgument2(): FindOneAndDeleteArgument2Context | null {
        return this.getRuleContext(0, FindOneAndDeleteArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneAndDeleteMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneAndDeleteMethod) {
            return visitor.visitFindOneAndDeleteMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneAndDeleteArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneAndDeleteArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneAndDeleteArgument1) {
            return visitor.visitFindOneAndDeleteArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneAndDeleteArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneAndDeleteArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneAndDeleteArgument2) {
            return visitor.visitFindOneAndDeleteArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public findOneArgument1(): FindOneArgument1Context | null {
        return this.getRuleContext(0, FindOneArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public findOneArgument2(): FindOneArgument2Context | null {
        return this.getRuleContext(0, FindOneArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneMethod) {
            return visitor.visitFindOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneArgument1) {
            return visitor.visitFindOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindOneArgument2) {
            return visitor.visitFindOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public findMethodArgument1(): FindMethodArgument1Context | null {
        return this.getRuleContext(0, FindMethodArgument1Context);
    }
    public findMethodModifier(): FindMethodModifierContext[];
    public findMethodModifier(i: number): FindMethodModifierContext | null;
    public findMethodModifier(i?: number): FindMethodModifierContext[] | FindMethodModifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FindMethodModifierContext);
        }

        return this.getRuleContext(i, FindMethodModifierContext);
    }
    public explainMethod(): ExplainMethodContext | null {
        return this.getRuleContext(0, ExplainMethodContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public findMethodArgument2(): FindMethodArgument2Context | null {
        return this.getRuleContext(0, FindMethodArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindMethod) {
            return visitor.visitFindMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindMethodArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findMethodArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindMethodArgument1) {
            return visitor.visitFindMethodArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindMethodArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findMethodArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindMethodArgument2) {
            return visitor.visitFindMethodArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DOT, 0)!;
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(MongoParser.EXPLAIN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public explainMethodArgument(): ExplainMethodArgumentContext | null {
        return this.getRuleContext(0, ExplainMethodArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_explainMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainMethod) {
            return visitor.visitExplainMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainMethodArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public boolean(): BooleanContext | null {
        return this.getRuleContext(0, BooleanContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_explainMethodArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainMethodArgument) {
            return visitor.visitExplainMethodArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FindMethodModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DOT, 0)!;
    }
    public skipModifier(): SkipModifierContext | null {
        return this.getRuleContext(0, SkipModifierContext);
    }
    public limitModifier(): LimitModifierContext | null {
        return this.getRuleContext(0, LimitModifierContext);
    }
    public filterModifier(): FilterModifierContext | null {
        return this.getRuleContext(0, FilterModifierContext);
    }
    public minModifier(): MinModifierContext | null {
        return this.getRuleContext(0, MinModifierContext);
    }
    public maxModifier(): MaxModifierContext | null {
        return this.getRuleContext(0, MaxModifierContext);
    }
    public hintModifier(): HintModifierContext | null {
        return this.getRuleContext(0, HintModifierContext);
    }
    public returnKeyModifier(): ReturnKeyModifierContext | null {
        return this.getRuleContext(0, ReturnKeyModifierContext);
    }
    public showRecordIdModifier(): ShowRecordIdModifierContext | null {
        return this.getRuleContext(0, ShowRecordIdModifierContext);
    }
    public sortModifier(): SortModifierContext | null {
        return this.getRuleContext(0, SortModifierContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_findMethodModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFindMethodModifier) {
            return visitor.visitFindMethodModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SKIP_(): antlr.TerminalNode {
        return this.getToken(MongoParser.SKIP_, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public skipModifierArgument(): SkipModifierArgumentContext {
        return this.getRuleContext(0, SkipModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_skipModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSkipModifier) {
            return visitor.visitSkipModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_skipModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSkipModifierArgument) {
            return visitor.visitSkipModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(MongoParser.LIMIT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public limitModifierArgument(): LimitModifierArgumentContext {
        return this.getRuleContext(0, LimitModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_limitModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitLimitModifier) {
            return visitor.visitLimitModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_limitModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitLimitModifierArgument) {
            return visitor.visitLimitModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(MongoParser.FILTER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public filterModifierArgument(): FilterModifierArgumentContext {
        return this.getRuleContext(0, FilterModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_filterModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFilterModifier) {
            return visitor.visitFilterModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_filterModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFilterModifierArgument) {
            return visitor.visitFilterModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MinModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MIN(): antlr.TerminalNode {
        return this.getToken(MongoParser.MIN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public minModifierArgument(): MinModifierArgumentContext {
        return this.getRuleContext(0, MinModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_minModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMinModifier) {
            return visitor.visitMinModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MinModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_minModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMinModifierArgument) {
            return visitor.visitMinModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaxModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX(): antlr.TerminalNode {
        return this.getToken(MongoParser.MAX, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public maxModifierArgument(): MaxModifierArgumentContext {
        return this.getRuleContext(0, MaxModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_maxModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMaxModifier) {
            return visitor.visitMaxModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaxModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_maxModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMaxModifierArgument) {
            return visitor.visitMaxModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HINT(): antlr.TerminalNode {
        return this.getToken(MongoParser.HINT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public hintModifierArgument(): HintModifierArgumentContext {
        return this.getRuleContext(0, HintModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_hintModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitHintModifier) {
            return visitor.visitHintModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_hintModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitHintModifierArgument) {
            return visitor.visitHintModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnKeyModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURN_KEY(): antlr.TerminalNode {
        return this.getToken(MongoParser.RETURN_KEY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public returnKeyModifierArgument(): ReturnKeyModifierArgumentContext {
        return this.getRuleContext(0, ReturnKeyModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_returnKeyModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnKeyModifier) {
            return visitor.visitReturnKeyModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnKeyModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean(): BooleanContext {
        return this.getRuleContext(0, BooleanContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_returnKeyModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnKeyModifierArgument) {
            return visitor.visitReturnKeyModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRecordIdModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_RECORD_ID(): antlr.TerminalNode {
        return this.getToken(MongoParser.SHOW_RECORD_ID, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public showRecordIdModifierArgument(): ShowRecordIdModifierArgumentContext {
        return this.getRuleContext(0, ShowRecordIdModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_showRecordIdModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitShowRecordIdModifier) {
            return visitor.visitShowRecordIdModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRecordIdModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean(): BooleanContext {
        return this.getRuleContext(0, BooleanContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_showRecordIdModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitShowRecordIdModifierArgument) {
            return visitor.visitShowRecordIdModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SORT(): antlr.TerminalNode {
        return this.getToken(MongoParser.SORT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public sortModifierArgument1(): SortModifierArgument1Context {
        return this.getRuleContext(0, SortModifierArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public sortModifierArgument2(): SortModifierArgument2Context | null {
        return this.getRuleContext(0, SortModifierArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_sortModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSortModifier) {
            return visitor.visitSortModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortModifierArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json5(): Json5Context {
        return this.getRuleContext(0, Json5Context)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_sortModifierArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSortModifierArgument1) {
            return visitor.visitSortModifierArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortModifierArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_sortModifierArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSortModifierArgument2) {
            return visitor.visitSortModifierArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReservedKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DB(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DB, 0);
    }
    public FIND(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND, 0);
    }
    public FIND_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE, 0);
    }
    public FIND_ONE_AND_DELETE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE_AND_DELETE, 0);
    }
    public FIND_ONE_AND_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE_AND_REPLACE, 0);
    }
    public FIND_ONE_AND_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE_AND_UPDATE, 0);
    }
    public SHOW_RECORD_ID(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SHOW_RECORD_ID, 0);
    }
    public RETURN_KEY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RETURN_KEY, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FILTER, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.MAX, 0);
    }
    public SORT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SORT, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LIMIT, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.EXPLAIN, 0);
    }
    public HINT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.HINT, 0);
    }
    public SKIP_(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SKIP_, 0);
    }
    public INSERT_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INSERT_ONE, 0);
    }
    public INSERT_MANY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INSERT_MANY, 0);
    }
    public BULK_WRITE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.BULK_WRITE, 0);
    }
    public UPDATE_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.UPDATE_ONE, 0);
    }
    public UPDATE_MANY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.UPDATE_MANY, 0);
    }
    public REPLACE_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.REPLACE_ONE, 0);
    }
    public DELETE_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DELETE_ONE, 0);
    }
    public DELETE_MANY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DELETE_MANY, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RENAME, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP, 0);
    }
    public IS_CAPPED(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.IS_CAPPED, 0);
    }
    public CREATE_INDEX(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.CREATE_INDEX, 0);
    }
    public CREATE_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.CREATE_INDEXES, 0);
    }
    public DROP_INDEX(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP_INDEX, 0);
    }
    public DROP_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP_INDEXES, 0);
    }
    public LIST_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LIST_INDEXES, 0);
    }
    public INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INDEXES, 0);
    }
    public INDEX_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INDEX_EXISTS, 0);
    }
    public INDEX_INFORMATION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INDEX_INFORMATION, 0);
    }
    public ESTIMATED_DOCUMENT_COUNT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.ESTIMATED_DOCUMENT_COUNT, 0);
    }
    public COUNT_DOCUMENTS(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COUNT_DOCUMENTS, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_reservedKeyword;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReservedKeyword) {
            return visitor.visitReservedKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json5Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public value(): ValueContext | null {
        return this.getRuleContext(0, ValueContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_json5;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitJson5) {
            return visitor.visitJson5(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE(): antlr.TerminalNode {
        return this.getToken(MongoParser.LBRACE, 0)!;
    }
    public pair(): PairContext[];
    public pair(i: number): PairContext | null;
    public pair(i?: number): PairContext[] | PairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PairContext);
        }

        return this.getRuleContext(i, PairContext);
    }
    public RBRACE(): antlr.TerminalNode {
        return this.getToken(MongoParser.RBRACE, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_object;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitObject) {
            return visitor.visitObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PairContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public key(): KeyContext {
        return this.getRuleContext(0, KeyContext)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(MongoParser.COLON, 0)!;
    }
    public value(): ValueContext {
        return this.getRuleContext(0, ValueContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_pair;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitPair) {
            return visitor.visitPair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_boolean;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitBoolean) {
            return visitor.visitBoolean(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public NUMERIC_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMERIC_LITERAL, 0);
    }
    public boolean(): BooleanContext | null {
        return this.getRuleContext(0, BooleanContext);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NULL, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_key;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitKey) {
            return visitor.visitKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.IDENTIFIER, 0);
    }
    public reservedKeyword(): ReservedKeywordContext | null {
        return this.getRuleContext(0, ReservedKeywordContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_identifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public boolean(): BooleanContext | null {
        return this.getRuleContext(0, BooleanContext);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NULL, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_value;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitValue) {
            return visitor.visitValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.LBRACKET, 0)!;
    }
    public value(): ValueContext[];
    public value(i: number): ValueContext | null;
    public value(i?: number): ValueContext[] | ValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueContext);
        }

        return this.getRuleContext(i, ValueContext);
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.RBRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_array;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitArray) {
            return visitor.visitArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NUMERIC_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMERIC_LITERAL, 0);
    }
    public NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMBER, 0);
    }
    public SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_number;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitNumber) {
            return visitor.visitNumber(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
