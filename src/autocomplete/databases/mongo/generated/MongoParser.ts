////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/mongo/grammar/MongoParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { MongoParserVisitor } from "./MongoParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class MongoParser extends antlr.Parser {
    public static readonly DB = 1;
    public static readonly FIND = 2;
    public static readonly FIND_ONE = 3;
    public static readonly FIND_ONE_AND_DELETE = 4;
    public static readonly FIND_ONE_AND_REPLACE = 5;
    public static readonly FIND_ONE_AND_UPDATE = 6;
    public static readonly SHOW_RECORD_ID = 7;
    public static readonly RETURN_KEY = 8;
    public static readonly FILTER = 9;
    public static readonly MIN = 10;
    public static readonly MAX = 11;
    public static readonly SORT = 12;
    public static readonly LIMIT = 13;
    public static readonly EXPLAIN = 14;
    public static readonly HINT = 15;
    public static readonly SKIP_ = 16;
    public static readonly INSERT_ONE = 17;
    public static readonly INSERT_MANY = 18;
    public static readonly BULK_WRITE = 19;
    public static readonly UPDATE_ONE = 20;
    public static readonly UPDATE_MANY = 21;
    public static readonly REPLACE_ONE = 22;
    public static readonly DELETE_ONE = 23;
    public static readonly DELETE_MANY = 24;
    public static readonly RENAME = 25;
    public static readonly DROP = 26;
    public static readonly IS_CAPPED = 27;
    public static readonly CREATE_INDEX = 28;
    public static readonly CREATE_INDEXES = 29;
    public static readonly DROP_INDEX = 30;
    public static readonly DROP_INDEXES = 31;
    public static readonly LIST_INDEXES = 32;
    public static readonly INDEXES = 33;
    public static readonly INDEX_EXISTS = 34;
    public static readonly INDEX_INFORMATION = 35;
    public static readonly ESTIMATED_DOCUMENT_COUNT = 36;
    public static readonly COUNT_DOCUMENTS = 37;
    public static readonly DISTINCT = 38;
    public static readonly AGGREGATE = 39;
    public static readonly COLLECTION = 40;
    public static readonly CREATE_COLLECTION = 41;
    public static readonly COMMAND = 42;
    public static readonly LIST_COLLECTIONS = 43;
    public static readonly RENAME_COLLECTION = 44;
    public static readonly DROP_COLLECTION = 45;
    public static readonly DROP_DATABASE = 46;
    public static readonly LBRACKET = 47;
    public static readonly RBRACKET = 48;
    public static readonly LPAREN = 49;
    public static readonly RPAREN = 50;
    public static readonly LBRACE = 51;
    public static readonly RBRACE = 52;
    public static readonly COLON = 53;
    public static readonly COMMA = 54;
    public static readonly SEMICOLON = 55;
    public static readonly DOT = 56;
    public static readonly TRUE = 57;
    public static readonly FALSE = 58;
    public static readonly NULL = 59;
    public static readonly STRING = 60;
    public static readonly NUMBER = 61;
    public static readonly NUMERIC_LITERAL = 62;
    public static readonly SYMBOL = 63;
    public static readonly IDENTIFIER = 64;
    public static readonly SINGLE_LINE_COMMENT = 65;
    public static readonly MULTI_LINE_COMMENT = 66;
    public static readonly WS = 67;
    public static readonly RULE_root = 0;
    public static readonly RULE_commands = 1;
    public static readonly RULE_command = 2;
    public static readonly RULE_databaseOperation = 3;
    public static readonly RULE_databaseMethod = 4;
    public static readonly RULE_databaseCreateIndexMethod = 5;
    public static readonly RULE_databaseCreateIndexArgument3 = 6;
    public static readonly RULE_databaseCreateIndexArgument2 = 7;
    public static readonly RULE_databaseCreateIndexArgument1 = 8;
    public static readonly RULE_databaseDropDatabaseMethod = 9;
    public static readonly RULE_databaseDropDatabaseArgument = 10;
    public static readonly RULE_databaseDropCollectionMethod = 11;
    public static readonly RULE_databaseDropCollectionArgument1 = 12;
    public static readonly RULE_databaseDropCollectionArgument2 = 13;
    public static readonly RULE_databaseRenameCollectionMethod = 14;
    public static readonly RULE_databaseRenameCollectionArgument1 = 15;
    public static readonly RULE_databaseRenameCollectionArgument2 = 16;
    public static readonly RULE_databaseRenameCollectionArgument3 = 17;
    public static readonly RULE_databaseListCollectionsMethod = 18;
    public static readonly RULE_databaseListCollectionsArgument1 = 19;
    public static readonly RULE_databaseListCollectionsArgument2 = 20;
    public static readonly RULE_databaseCommandMethod = 21;
    public static readonly RULE_databaseCommandArgument1 = 22;
    public static readonly RULE_databaseCommandArgument2 = 23;
    public static readonly RULE_databaseCreateCollectionMethod = 24;
    public static readonly RULE_databaseCreateCollectionArgument1 = 25;
    public static readonly RULE_databaseCreateCollectionArgument2 = 26;
    public static readonly RULE_databaseCollectionMethod = 27;
    public static readonly RULE_quotedCollectionName = 28;
    public static readonly RULE_collectionOperation = 29;
    public static readonly RULE_collectionName = 30;
    public static readonly RULE_collectionMethod = 31;
    public static readonly RULE_aggregateMethod = 32;
    public static readonly RULE_aggregateArgument2 = 33;
    public static readonly RULE_aggregateArgument1 = 34;
    public static readonly RULE_collectionDistinctMethod = 35;
    public static readonly RULE_collectionDistinctArgument1 = 36;
    public static readonly RULE_collectionDistinctArgument2 = 37;
    public static readonly RULE_collectionDistinctArgument3 = 38;
    public static readonly RULE_collectionCountDocumentsMethod = 39;
    public static readonly RULE_collectionCountDocumentsArgument2 = 40;
    public static readonly RULE_collectionCountDocumentsArgument1 = 41;
    public static readonly RULE_collectionEstimatedDocumentCountMethod = 42;
    public static readonly RULE_collectionEstimatedDocumentCountArgument = 43;
    public static readonly RULE_collectionIndexInformationMethod = 44;
    public static readonly RULE_collectionIndexInformationArgument = 45;
    public static readonly RULE_collectionIndexExistsMethod = 46;
    public static readonly RULE_collectionIndexExistsArgument2 = 47;
    public static readonly RULE_collectionIndexExistsArgument1 = 48;
    public static readonly RULE_collectionIndexesMethod = 49;
    public static readonly RULE_collectionIndexesArgument = 50;
    public static readonly RULE_collectionListIndexesMethod = 51;
    public static readonly RULE_collectionListIndexesArgument = 52;
    public static readonly RULE_collectionDropIndexesMethod = 53;
    public static readonly RULE_collectionDropIndexesArgument = 54;
    public static readonly RULE_collectionDropIndexMethod = 55;
    public static readonly RULE_collectionDropIndexArgument2 = 56;
    public static readonly RULE_collectionDropIndexArgument1 = 57;
    public static readonly RULE_collectionCreateIndexesMethod = 58;
    public static readonly RULE_collectionCreateIndexesArgument2 = 59;
    public static readonly RULE_collectionCreateIndexesArgument1 = 60;
    public static readonly RULE_collectionCreateIndexMethod = 61;
    public static readonly RULE_collectionCreateIndexArgument2 = 62;
    public static readonly RULE_collectionCreateIndexArgument1 = 63;
    public static readonly RULE_collectionIsCappedMethod = 64;
    public static readonly RULE_collectionIsCappedArgument = 65;
    public static readonly RULE_collectionDropMethod = 66;
    public static readonly RULE_collectionDropArgument = 67;
    public static readonly RULE_collectionRenameMethod = 68;
    public static readonly RULE_collectionRenameArgument1 = 69;
    public static readonly RULE_collectionRenameArgument2 = 70;
    public static readonly RULE_collectionDeleteManyMethod = 71;
    public static readonly RULE_collectionDeleteManyArgument1 = 72;
    public static readonly RULE_collectionDeleteManyArgument2 = 73;
    public static readonly RULE_collectionDeleteOneMethod = 74;
    public static readonly RULE_collectionDeleteOneArgument1 = 75;
    public static readonly RULE_collectionDeleteOneArgument2 = 76;
    public static readonly RULE_collectionReplaceOneMethod = 77;
    public static readonly RULE_collectionReplaceOneArgument1 = 78;
    public static readonly RULE_collectionReplaceOneArgument2 = 79;
    public static readonly RULE_collectionReplaceOneArgument3 = 80;
    public static readonly RULE_collectionUpdateManyMethod = 81;
    public static readonly RULE_collectionUpdateManyArgument1 = 82;
    public static readonly RULE_collectionUpdateManyArgument2 = 83;
    public static readonly RULE_collectionUpdateManyArgument3 = 84;
    public static readonly RULE_collectionUpdateOneMethod = 85;
    public static readonly RULE_collectionUpdateOneArgument1 = 86;
    public static readonly RULE_collectionUpdateOneArgument2 = 87;
    public static readonly RULE_collectionUpdateOneArgument3 = 88;
    public static readonly RULE_collectionBulkWriteMethod = 89;
    public static readonly RULE_collectionBulkWriteArgument1 = 90;
    public static readonly RULE_collectionBulkWriteArgument2 = 91;
    public static readonly RULE_collectionInsertManyMethod = 92;
    public static readonly RULE_collectionInsertManyArgument1 = 93;
    public static readonly RULE_collectionInsertManyArgument2 = 94;
    public static readonly RULE_collectionInsertOneMethod = 95;
    public static readonly RULE_collectionInsertOneArgument1 = 96;
    public static readonly RULE_collectionInsertOneArgument2 = 97;
    public static readonly RULE_documentToInsert = 98;
    public static readonly RULE_collectionFindOneAndUpdateMethod = 99;
    public static readonly RULE_collectionFindOneAndUpdateArgument1 = 100;
    public static readonly RULE_collectionFindOneAndUpdateArgument2 = 101;
    public static readonly RULE_collectionFindOneAndUpdateArgument3 = 102;
    public static readonly RULE_collectionFindOneAndReplaceMethod = 103;
    public static readonly RULE_collectionFindOneAndReplaceArgument1 = 104;
    public static readonly RULE_collectionFindOneAndReplaceArgument2 = 105;
    public static readonly RULE_collectionFindOneAndReplaceArgument3 = 106;
    public static readonly RULE_collectionFindOneAndDeleteMethod = 107;
    public static readonly RULE_collectionFindOneAndDeleteArgument1 = 108;
    public static readonly RULE_collectionFindOneAndDeleteArgument2 = 109;
    public static readonly RULE_collectionFindOneMethod = 110;
    public static readonly RULE_collectionFindOneArgument1 = 111;
    public static readonly RULE_collectionFindOneArgument2 = 112;
    public static readonly RULE_collectionFindMethod = 113;
    public static readonly RULE_collectionFindMethodArgument1 = 114;
    public static readonly RULE_collectionFindMethodArgument2 = 115;
    public static readonly RULE_explainMethod = 116;
    public static readonly RULE_explainMethodArgument = 117;
    public static readonly RULE_collectionFindMethodModifier = 118;
    public static readonly RULE_skipModifier = 119;
    public static readonly RULE_skipModifierArgument = 120;
    public static readonly RULE_limitModifier = 121;
    public static readonly RULE_limitModifierArgument = 122;
    public static readonly RULE_filterModifier = 123;
    public static readonly RULE_filterModifierArgument = 124;
    public static readonly RULE_minModifier = 125;
    public static readonly RULE_minModifierArgument = 126;
    public static readonly RULE_maxModifier = 127;
    public static readonly RULE_maxModifierArgument = 128;
    public static readonly RULE_hintModifier = 129;
    public static readonly RULE_hintModifierArgument = 130;
    public static readonly RULE_returnKeyModifier = 131;
    public static readonly RULE_returnKeyModifierArgument = 132;
    public static readonly RULE_showRecordIdModifier = 133;
    public static readonly RULE_showRecordIdModifierArgument = 134;
    public static readonly RULE_sortModifier = 135;
    public static readonly RULE_sortModifierArgument1 = 136;
    public static readonly RULE_sortModifierArgument2 = 137;
    public static readonly RULE_reservedKeyword = 138;
    public static readonly RULE_json5 = 139;
    public static readonly RULE_object = 140;
    public static readonly RULE_pair = 141;
    public static readonly RULE_boolean = 142;
    public static readonly RULE_key = 143;
    public static readonly RULE_identifier = 144;
    public static readonly RULE_value = 145;
    public static readonly RULE_array = 146;
    public static readonly RULE_number = 147;

    public static readonly literalNames = [
        null, "'db'", "'find'", "'findOne'", "'findOneAndDelete'", "'findOneAndReplace'", 
        "'findOneAndUpdate'", "'showRecordId'", "'returnKey'", "'filter'", 
        "'min'", "'max'", "'sort'", "'limit'", "'explain'", "'hint'", "'skip'", 
        "'insertOne'", "'insertMany'", "'bulkWrite'", "'updateOne'", "'updateMany'", 
        "'replaceOne'", "'deleteOne'", "'deleteMany'", "'rename'", "'drop'", 
        "'isCapped'", "'createIndex'", "'createIndexes'", "'dropIndex'", 
        "'dropIndexes'", "'listIndexes'", "'indexes'", "'indexExists'", 
        "'indexInformation'", "'estimatedDocumentCount'", "'countDocuments'", 
        "'distinct'", "'aggregate'", "'collection'", "'createCollection'", 
        "'command'", "'listCollections'", "'renameCollection'", "'dropCollection'", 
        "'dropDatabase'", "'['", "']'", "'('", "')'", "'{'", "'}'", "':'", 
        "','", "';'", "'.'", "'true'", "'false'", "'null'"
    ];

    public static readonly symbolicNames = [
        null, "DB", "FIND", "FIND_ONE", "FIND_ONE_AND_DELETE", "FIND_ONE_AND_REPLACE", 
        "FIND_ONE_AND_UPDATE", "SHOW_RECORD_ID", "RETURN_KEY", "FILTER", 
        "MIN", "MAX", "SORT", "LIMIT", "EXPLAIN", "HINT", "SKIP_", "INSERT_ONE", 
        "INSERT_MANY", "BULK_WRITE", "UPDATE_ONE", "UPDATE_MANY", "REPLACE_ONE", 
        "DELETE_ONE", "DELETE_MANY", "RENAME", "DROP", "IS_CAPPED", "CREATE_INDEX", 
        "CREATE_INDEXES", "DROP_INDEX", "DROP_INDEXES", "LIST_INDEXES", 
        "INDEXES", "INDEX_EXISTS", "INDEX_INFORMATION", "ESTIMATED_DOCUMENT_COUNT", 
        "COUNT_DOCUMENTS", "DISTINCT", "AGGREGATE", "COLLECTION", "CREATE_COLLECTION", 
        "COMMAND", "LIST_COLLECTIONS", "RENAME_COLLECTION", "DROP_COLLECTION", 
        "DROP_DATABASE", "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "LBRACE", 
        "RBRACE", "COLON", "COMMA", "SEMICOLON", "DOT", "TRUE", "FALSE", 
        "NULL", "STRING", "NUMBER", "NUMERIC_LITERAL", "SYMBOL", "IDENTIFIER", 
        "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WS"
    ];
    public static readonly ruleNames = [
        "root", "commands", "command", "databaseOperation", "databaseMethod", 
        "databaseCreateIndexMethod", "databaseCreateIndexArgument3", "databaseCreateIndexArgument2", 
        "databaseCreateIndexArgument1", "databaseDropDatabaseMethod", "databaseDropDatabaseArgument", 
        "databaseDropCollectionMethod", "databaseDropCollectionArgument1", 
        "databaseDropCollectionArgument2", "databaseRenameCollectionMethod", 
        "databaseRenameCollectionArgument1", "databaseRenameCollectionArgument2", 
        "databaseRenameCollectionArgument3", "databaseListCollectionsMethod", 
        "databaseListCollectionsArgument1", "databaseListCollectionsArgument2", 
        "databaseCommandMethod", "databaseCommandArgument1", "databaseCommandArgument2", 
        "databaseCreateCollectionMethod", "databaseCreateCollectionArgument1", 
        "databaseCreateCollectionArgument2", "databaseCollectionMethod", 
        "quotedCollectionName", "collectionOperation", "collectionName", 
        "collectionMethod", "aggregateMethod", "aggregateArgument2", "aggregateArgument1", 
        "collectionDistinctMethod", "collectionDistinctArgument1", "collectionDistinctArgument2", 
        "collectionDistinctArgument3", "collectionCountDocumentsMethod", 
        "collectionCountDocumentsArgument2", "collectionCountDocumentsArgument1", 
        "collectionEstimatedDocumentCountMethod", "collectionEstimatedDocumentCountArgument", 
        "collectionIndexInformationMethod", "collectionIndexInformationArgument", 
        "collectionIndexExistsMethod", "collectionIndexExistsArgument2", 
        "collectionIndexExistsArgument1", "collectionIndexesMethod", "collectionIndexesArgument", 
        "collectionListIndexesMethod", "collectionListIndexesArgument", 
        "collectionDropIndexesMethod", "collectionDropIndexesArgument", 
        "collectionDropIndexMethod", "collectionDropIndexArgument2", "collectionDropIndexArgument1", 
        "collectionCreateIndexesMethod", "collectionCreateIndexesArgument2", 
        "collectionCreateIndexesArgument1", "collectionCreateIndexMethod", 
        "collectionCreateIndexArgument2", "collectionCreateIndexArgument1", 
        "collectionIsCappedMethod", "collectionIsCappedArgument", "collectionDropMethod", 
        "collectionDropArgument", "collectionRenameMethod", "collectionRenameArgument1", 
        "collectionRenameArgument2", "collectionDeleteManyMethod", "collectionDeleteManyArgument1", 
        "collectionDeleteManyArgument2", "collectionDeleteOneMethod", "collectionDeleteOneArgument1", 
        "collectionDeleteOneArgument2", "collectionReplaceOneMethod", "collectionReplaceOneArgument1", 
        "collectionReplaceOneArgument2", "collectionReplaceOneArgument3", 
        "collectionUpdateManyMethod", "collectionUpdateManyArgument1", "collectionUpdateManyArgument2", 
        "collectionUpdateManyArgument3", "collectionUpdateOneMethod", "collectionUpdateOneArgument1", 
        "collectionUpdateOneArgument2", "collectionUpdateOneArgument3", 
        "collectionBulkWriteMethod", "collectionBulkWriteArgument1", "collectionBulkWriteArgument2", 
        "collectionInsertManyMethod", "collectionInsertManyArgument1", "collectionInsertManyArgument2", 
        "collectionInsertOneMethod", "collectionInsertOneArgument1", "collectionInsertOneArgument2", 
        "documentToInsert", "collectionFindOneAndUpdateMethod", "collectionFindOneAndUpdateArgument1", 
        "collectionFindOneAndUpdateArgument2", "collectionFindOneAndUpdateArgument3", 
        "collectionFindOneAndReplaceMethod", "collectionFindOneAndReplaceArgument1", 
        "collectionFindOneAndReplaceArgument2", "collectionFindOneAndReplaceArgument3", 
        "collectionFindOneAndDeleteMethod", "collectionFindOneAndDeleteArgument1", 
        "collectionFindOneAndDeleteArgument2", "collectionFindOneMethod", 
        "collectionFindOneArgument1", "collectionFindOneArgument2", "collectionFindMethod", 
        "collectionFindMethodArgument1", "collectionFindMethodArgument2", 
        "explainMethod", "explainMethodArgument", "collectionFindMethodModifier", 
        "skipModifier", "skipModifierArgument", "limitModifier", "limitModifierArgument", 
        "filterModifier", "filterModifierArgument", "minModifier", "minModifierArgument", 
        "maxModifier", "maxModifierArgument", "hintModifier", "hintModifierArgument", 
        "returnKeyModifier", "returnKeyModifierArgument", "showRecordIdModifier", 
        "showRecordIdModifierArgument", "sortModifier", "sortModifierArgument1", 
        "sortModifierArgument2", "reservedKeyword", "json5", "object", "pair", 
        "boolean", "key", "identifier", "value", "array", "number",
    ];

    public get grammarFileName(): string { return "MongoParser.g4"; }
    public get literalNames(): (string | null)[] { return MongoParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return MongoParser.symbolicNames; }
    public get ruleNames(): string[] { return MongoParser.ruleNames; }
    public get serializedATN(): number[] { return MongoParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, MongoParser._ATN, MongoParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, MongoParser.RULE_root);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 297;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1) {
                {
                this.state = 296;
                this.commands();
                }
            }

            this.state = 299;
            this.match(MongoParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commands(): CommandsContext {
        let localContext = new CommandsContext(this.context, this.state);
        this.enterRule(localContext, 2, MongoParser.RULE_commands);
        let _la: number;
        try {
            this.state = 309;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 301;
                this.command();
                this.state = 303;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 55) {
                    {
                    this.state = 302;
                    this.match(MongoParser.SEMICOLON);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 305;
                this.command();
                this.state = 306;
                this.match(MongoParser.SEMICOLON);
                this.state = 307;
                this.commands();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public command(): CommandContext {
        let localContext = new CommandContext(this.context, this.state);
        this.enterRule(localContext, 4, MongoParser.RULE_command);
        try {
            this.state = 313;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 311;
                this.collectionOperation();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 312;
                this.databaseOperation();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseOperation(): DatabaseOperationContext {
        let localContext = new DatabaseOperationContext(this.context, this.state);
        this.enterRule(localContext, 6, MongoParser.RULE_databaseOperation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 315;
            this.match(MongoParser.DB);
            this.state = 316;
            this.match(MongoParser.DOT);
            this.state = 317;
            this.databaseMethod();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseMethod(): DatabaseMethodContext {
        let localContext = new DatabaseMethodContext(this.context, this.state);
        this.enterRule(localContext, 8, MongoParser.RULE_databaseMethod);
        try {
            this.state = 328;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.COLLECTION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 319;
                this.databaseCollectionMethod();
                }
                break;
            case MongoParser.CREATE_COLLECTION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 320;
                this.databaseCreateCollectionMethod();
                }
                break;
            case MongoParser.COMMAND:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 321;
                this.databaseCommandMethod();
                }
                break;
            case MongoParser.AGGREGATE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 322;
                this.aggregateMethod();
                }
                break;
            case MongoParser.LIST_COLLECTIONS:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 323;
                this.databaseListCollectionsMethod();
                }
                break;
            case MongoParser.RENAME_COLLECTION:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 324;
                this.databaseRenameCollectionMethod();
                }
                break;
            case MongoParser.DROP_COLLECTION:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 325;
                this.databaseDropCollectionMethod();
                }
                break;
            case MongoParser.DROP_DATABASE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 326;
                this.databaseDropDatabaseMethod();
                }
                break;
            case MongoParser.CREATE_INDEX:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 327;
                this.databaseCreateIndexMethod();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateIndexMethod(): DatabaseCreateIndexMethodContext {
        let localContext = new DatabaseCreateIndexMethodContext(this.context, this.state);
        this.enterRule(localContext, 10, MongoParser.RULE_databaseCreateIndexMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 330;
            this.match(MongoParser.CREATE_INDEX);
            this.state = 331;
            this.match(MongoParser.LPAREN);
            this.state = 332;
            this.databaseCreateIndexArgument1();
            this.state = 333;
            this.match(MongoParser.COMMA);
            this.state = 334;
            this.databaseCreateIndexArgument2();
            this.state = 337;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 335;
                this.match(MongoParser.COMMA);
                this.state = 336;
                this.databaseCreateIndexArgument3();
                }
            }

            this.state = 339;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateIndexArgument3(): DatabaseCreateIndexArgument3Context {
        let localContext = new DatabaseCreateIndexArgument3Context(this.context, this.state);
        this.enterRule(localContext, 12, MongoParser.RULE_databaseCreateIndexArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 341;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateIndexArgument2(): DatabaseCreateIndexArgument2Context {
        let localContext = new DatabaseCreateIndexArgument2Context(this.context, this.state);
        this.enterRule(localContext, 14, MongoParser.RULE_databaseCreateIndexArgument2);
        try {
            this.state = 346;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 343;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 344;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 345;
                this.array();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateIndexArgument1(): DatabaseCreateIndexArgument1Context {
        let localContext = new DatabaseCreateIndexArgument1Context(this.context, this.state);
        this.enterRule(localContext, 16, MongoParser.RULE_databaseCreateIndexArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 348;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseDropDatabaseMethod(): DatabaseDropDatabaseMethodContext {
        let localContext = new DatabaseDropDatabaseMethodContext(this.context, this.state);
        this.enterRule(localContext, 18, MongoParser.RULE_databaseDropDatabaseMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 350;
            this.match(MongoParser.DROP_DATABASE);
            this.state = 351;
            this.match(MongoParser.LPAREN);
            this.state = 353;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 352;
                this.databaseDropDatabaseArgument();
                }
            }

            this.state = 355;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseDropDatabaseArgument(): DatabaseDropDatabaseArgumentContext {
        let localContext = new DatabaseDropDatabaseArgumentContext(this.context, this.state);
        this.enterRule(localContext, 20, MongoParser.RULE_databaseDropDatabaseArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 357;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseDropCollectionMethod(): DatabaseDropCollectionMethodContext {
        let localContext = new DatabaseDropCollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 22, MongoParser.RULE_databaseDropCollectionMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 359;
            this.match(MongoParser.DROP_COLLECTION);
            this.state = 360;
            this.match(MongoParser.LPAREN);
            this.state = 361;
            this.databaseDropCollectionArgument1();
            this.state = 364;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 362;
                this.match(MongoParser.COMMA);
                this.state = 363;
                this.databaseDropCollectionArgument2();
                }
            }

            this.state = 366;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseDropCollectionArgument1(): DatabaseDropCollectionArgument1Context {
        let localContext = new DatabaseDropCollectionArgument1Context(this.context, this.state);
        this.enterRule(localContext, 24, MongoParser.RULE_databaseDropCollectionArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 368;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseDropCollectionArgument2(): DatabaseDropCollectionArgument2Context {
        let localContext = new DatabaseDropCollectionArgument2Context(this.context, this.state);
        this.enterRule(localContext, 26, MongoParser.RULE_databaseDropCollectionArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 370;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRenameCollectionMethod(): DatabaseRenameCollectionMethodContext {
        let localContext = new DatabaseRenameCollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 28, MongoParser.RULE_databaseRenameCollectionMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 372;
            this.match(MongoParser.RENAME_COLLECTION);
            this.state = 373;
            this.match(MongoParser.LPAREN);
            this.state = 374;
            this.databaseRenameCollectionArgument1();
            this.state = 375;
            this.match(MongoParser.COMMA);
            this.state = 376;
            this.databaseRenameCollectionArgument2();
            this.state = 379;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 377;
                this.match(MongoParser.COMMA);
                this.state = 378;
                this.databaseRenameCollectionArgument3();
                }
            }

            this.state = 381;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRenameCollectionArgument1(): DatabaseRenameCollectionArgument1Context {
        let localContext = new DatabaseRenameCollectionArgument1Context(this.context, this.state);
        this.enterRule(localContext, 30, MongoParser.RULE_databaseRenameCollectionArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 383;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRenameCollectionArgument2(): DatabaseRenameCollectionArgument2Context {
        let localContext = new DatabaseRenameCollectionArgument2Context(this.context, this.state);
        this.enterRule(localContext, 32, MongoParser.RULE_databaseRenameCollectionArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 385;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRenameCollectionArgument3(): DatabaseRenameCollectionArgument3Context {
        let localContext = new DatabaseRenameCollectionArgument3Context(this.context, this.state);
        this.enterRule(localContext, 34, MongoParser.RULE_databaseRenameCollectionArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 387;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseListCollectionsMethod(): DatabaseListCollectionsMethodContext {
        let localContext = new DatabaseListCollectionsMethodContext(this.context, this.state);
        this.enterRule(localContext, 36, MongoParser.RULE_databaseListCollectionsMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 389;
            this.match(MongoParser.LIST_COLLECTIONS);
            this.state = 390;
            this.match(MongoParser.LPAREN);
            this.state = 395;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 391;
                this.databaseListCollectionsArgument1();
                {
                this.state = 392;
                this.match(MongoParser.COMMA);
                this.state = 393;
                this.databaseListCollectionsArgument2();
                }
                }
            }

            this.state = 397;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseListCollectionsArgument1(): DatabaseListCollectionsArgument1Context {
        let localContext = new DatabaseListCollectionsArgument1Context(this.context, this.state);
        this.enterRule(localContext, 38, MongoParser.RULE_databaseListCollectionsArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 399;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseListCollectionsArgument2(): DatabaseListCollectionsArgument2Context {
        let localContext = new DatabaseListCollectionsArgument2Context(this.context, this.state);
        this.enterRule(localContext, 40, MongoParser.RULE_databaseListCollectionsArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 401;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCommandMethod(): DatabaseCommandMethodContext {
        let localContext = new DatabaseCommandMethodContext(this.context, this.state);
        this.enterRule(localContext, 42, MongoParser.RULE_databaseCommandMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 403;
            this.match(MongoParser.COMMAND);
            this.state = 404;
            this.match(MongoParser.LPAREN);
            this.state = 405;
            this.databaseCommandArgument1();
            this.state = 408;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 406;
                this.match(MongoParser.COMMA);
                this.state = 407;
                this.databaseCommandArgument2();
                }
            }

            this.state = 410;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCommandArgument1(): DatabaseCommandArgument1Context {
        let localContext = new DatabaseCommandArgument1Context(this.context, this.state);
        this.enterRule(localContext, 44, MongoParser.RULE_databaseCommandArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 412;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCommandArgument2(): DatabaseCommandArgument2Context {
        let localContext = new DatabaseCommandArgument2Context(this.context, this.state);
        this.enterRule(localContext, 46, MongoParser.RULE_databaseCommandArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 414;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateCollectionMethod(): DatabaseCreateCollectionMethodContext {
        let localContext = new DatabaseCreateCollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 48, MongoParser.RULE_databaseCreateCollectionMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 416;
            this.match(MongoParser.CREATE_COLLECTION);
            this.state = 417;
            this.match(MongoParser.LPAREN);
            this.state = 418;
            this.databaseCreateCollectionArgument1();
            this.state = 421;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 419;
                this.match(MongoParser.COMMA);
                this.state = 420;
                this.databaseCreateCollectionArgument2();
                }
            }

            this.state = 423;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateCollectionArgument1(): DatabaseCreateCollectionArgument1Context {
        let localContext = new DatabaseCreateCollectionArgument1Context(this.context, this.state);
        this.enterRule(localContext, 50, MongoParser.RULE_databaseCreateCollectionArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 425;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateCollectionArgument2(): DatabaseCreateCollectionArgument2Context {
        let localContext = new DatabaseCreateCollectionArgument2Context(this.context, this.state);
        this.enterRule(localContext, 52, MongoParser.RULE_databaseCreateCollectionArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 427;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCollectionMethod(): DatabaseCollectionMethodContext {
        let localContext = new DatabaseCollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 54, MongoParser.RULE_databaseCollectionMethod);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 429;
            this.match(MongoParser.COLLECTION);
            this.state = 430;
            this.match(MongoParser.LPAREN);
            this.state = 431;
            this.quotedCollectionName();
            this.state = 432;
            this.match(MongoParser.RPAREN);
            this.state = 433;
            this.match(MongoParser.DOT);
            this.state = 434;
            this.collectionMethod();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotedCollectionName(): QuotedCollectionNameContext {
        let localContext = new QuotedCollectionNameContext(this.context, this.state);
        this.enterRule(localContext, 56, MongoParser.RULE_quotedCollectionName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 436;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionOperation(): CollectionOperationContext {
        let localContext = new CollectionOperationContext(this.context, this.state);
        this.enterRule(localContext, 58, MongoParser.RULE_collectionOperation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 438;
            this.match(MongoParser.DB);
            this.state = 439;
            this.match(MongoParser.DOT);
            this.state = 440;
            this.collectionName();
            this.state = 441;
            this.match(MongoParser.DOT);
            this.state = 442;
            this.collectionMethod();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionName(): CollectionNameContext {
        let localContext = new CollectionNameContext(this.context, this.state);
        this.enterRule(localContext, 60, MongoParser.RULE_collectionName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 444;
            this.match(MongoParser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionMethod(): CollectionMethodContext {
        let localContext = new CollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 62, MongoParser.RULE_collectionMethod);
        try {
            this.state = 474;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.FIND:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 446;
                this.collectionFindMethod();
                }
                break;
            case MongoParser.FIND_ONE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 447;
                this.collectionFindOneMethod();
                }
                break;
            case MongoParser.FIND_ONE_AND_DELETE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 448;
                this.collectionFindOneAndDeleteMethod();
                }
                break;
            case MongoParser.FIND_ONE_AND_REPLACE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 449;
                this.collectionFindOneAndReplaceMethod();
                }
                break;
            case MongoParser.FIND_ONE_AND_UPDATE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 450;
                this.collectionFindOneAndUpdateMethod();
                }
                break;
            case MongoParser.INSERT_ONE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 451;
                this.collectionInsertOneMethod();
                }
                break;
            case MongoParser.INSERT_MANY:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 452;
                this.collectionInsertManyMethod();
                }
                break;
            case MongoParser.BULK_WRITE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 453;
                this.collectionBulkWriteMethod();
                }
                break;
            case MongoParser.UPDATE_ONE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 454;
                this.collectionUpdateOneMethod();
                }
                break;
            case MongoParser.UPDATE_MANY:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 455;
                this.collectionUpdateManyMethod();
                }
                break;
            case MongoParser.REPLACE_ONE:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 456;
                this.collectionReplaceOneMethod();
                }
                break;
            case MongoParser.DELETE_ONE:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 457;
                this.collectionDeleteOneMethod();
                }
                break;
            case MongoParser.DELETE_MANY:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 458;
                this.collectionDeleteManyMethod();
                }
                break;
            case MongoParser.RENAME:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 459;
                this.collectionRenameMethod();
                }
                break;
            case MongoParser.DROP:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 460;
                this.collectionDropMethod();
                }
                break;
            case MongoParser.IS_CAPPED:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 461;
                this.collectionIsCappedMethod();
                }
                break;
            case MongoParser.CREATE_INDEX:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 462;
                this.collectionCreateIndexMethod();
                }
                break;
            case MongoParser.CREATE_INDEXES:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 463;
                this.collectionCreateIndexesMethod();
                }
                break;
            case MongoParser.DROP_INDEX:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 464;
                this.collectionDropIndexMethod();
                }
                break;
            case MongoParser.DROP_INDEXES:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 465;
                this.collectionDropIndexesMethod();
                }
                break;
            case MongoParser.LIST_INDEXES:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 466;
                this.collectionListIndexesMethod();
                }
                break;
            case MongoParser.INDEXES:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 467;
                this.collectionIndexesMethod();
                }
                break;
            case MongoParser.INDEX_EXISTS:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 468;
                this.collectionIndexExistsMethod();
                }
                break;
            case MongoParser.INDEX_INFORMATION:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 469;
                this.collectionIndexInformationMethod();
                }
                break;
            case MongoParser.ESTIMATED_DOCUMENT_COUNT:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 470;
                this.collectionEstimatedDocumentCountMethod();
                }
                break;
            case MongoParser.COUNT_DOCUMENTS:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 471;
                this.collectionCountDocumentsMethod();
                }
                break;
            case MongoParser.DISTINCT:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 472;
                this.collectionDistinctMethod();
                }
                break;
            case MongoParser.AGGREGATE:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 473;
                this.aggregateMethod();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregateMethod(): AggregateMethodContext {
        let localContext = new AggregateMethodContext(this.context, this.state);
        this.enterRule(localContext, 64, MongoParser.RULE_aggregateMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 476;
            this.match(MongoParser.AGGREGATE);
            this.state = 477;
            this.match(MongoParser.LPAREN);
            this.state = 483;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 478;
                this.aggregateArgument1();
                this.state = 481;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 479;
                    this.match(MongoParser.COMMA);
                    this.state = 480;
                    this.aggregateArgument2();
                    }
                }

                }
            }

            this.state = 485;
            this.match(MongoParser.RPAREN);
            this.state = 487;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56) {
                {
                this.state = 486;
                this.explainMethod();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregateArgument2(): AggregateArgument2Context {
        let localContext = new AggregateArgument2Context(this.context, this.state);
        this.enterRule(localContext, 66, MongoParser.RULE_aggregateArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 489;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregateArgument1(): AggregateArgument1Context {
        let localContext = new AggregateArgument1Context(this.context, this.state);
        this.enterRule(localContext, 68, MongoParser.RULE_aggregateArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 491;
            this.array();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDistinctMethod(): CollectionDistinctMethodContext {
        let localContext = new CollectionDistinctMethodContext(this.context, this.state);
        this.enterRule(localContext, 70, MongoParser.RULE_collectionDistinctMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 493;
            this.match(MongoParser.DISTINCT);
            this.state = 494;
            this.match(MongoParser.LPAREN);
            this.state = 495;
            this.collectionDistinctArgument1();
            this.state = 502;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 496;
                this.match(MongoParser.COMMA);
                this.state = 497;
                this.collectionDistinctArgument2();
                this.state = 500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 498;
                    this.match(MongoParser.COMMA);
                    this.state = 499;
                    this.collectionDistinctArgument3();
                    }
                }

                }
            }

            this.state = 504;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDistinctArgument1(): CollectionDistinctArgument1Context {
        let localContext = new CollectionDistinctArgument1Context(this.context, this.state);
        this.enterRule(localContext, 72, MongoParser.RULE_collectionDistinctArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 506;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDistinctArgument2(): CollectionDistinctArgument2Context {
        let localContext = new CollectionDistinctArgument2Context(this.context, this.state);
        this.enterRule(localContext, 74, MongoParser.RULE_collectionDistinctArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 508;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDistinctArgument3(): CollectionDistinctArgument3Context {
        let localContext = new CollectionDistinctArgument3Context(this.context, this.state);
        this.enterRule(localContext, 76, MongoParser.RULE_collectionDistinctArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 510;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCountDocumentsMethod(): CollectionCountDocumentsMethodContext {
        let localContext = new CollectionCountDocumentsMethodContext(this.context, this.state);
        this.enterRule(localContext, 78, MongoParser.RULE_collectionCountDocumentsMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 512;
            this.match(MongoParser.COUNT_DOCUMENTS);
            this.state = 513;
            this.match(MongoParser.LPAREN);
            this.state = 519;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 514;
                this.collectionCountDocumentsArgument1();
                this.state = 517;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 515;
                    this.match(MongoParser.COMMA);
                    this.state = 516;
                    this.collectionCountDocumentsArgument2();
                    }
                }

                }
            }

            this.state = 521;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCountDocumentsArgument2(): CollectionCountDocumentsArgument2Context {
        let localContext = new CollectionCountDocumentsArgument2Context(this.context, this.state);
        this.enterRule(localContext, 80, MongoParser.RULE_collectionCountDocumentsArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 523;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCountDocumentsArgument1(): CollectionCountDocumentsArgument1Context {
        let localContext = new CollectionCountDocumentsArgument1Context(this.context, this.state);
        this.enterRule(localContext, 82, MongoParser.RULE_collectionCountDocumentsArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 525;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionEstimatedDocumentCountMethod(): CollectionEstimatedDocumentCountMethodContext {
        let localContext = new CollectionEstimatedDocumentCountMethodContext(this.context, this.state);
        this.enterRule(localContext, 84, MongoParser.RULE_collectionEstimatedDocumentCountMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 527;
            this.match(MongoParser.ESTIMATED_DOCUMENT_COUNT);
            this.state = 528;
            this.match(MongoParser.LPAREN);
            this.state = 530;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 529;
                this.collectionEstimatedDocumentCountArgument();
                }
            }

            this.state = 532;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionEstimatedDocumentCountArgument(): CollectionEstimatedDocumentCountArgumentContext {
        let localContext = new CollectionEstimatedDocumentCountArgumentContext(this.context, this.state);
        this.enterRule(localContext, 86, MongoParser.RULE_collectionEstimatedDocumentCountArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 534;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexInformationMethod(): CollectionIndexInformationMethodContext {
        let localContext = new CollectionIndexInformationMethodContext(this.context, this.state);
        this.enterRule(localContext, 88, MongoParser.RULE_collectionIndexInformationMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 536;
            this.match(MongoParser.INDEX_INFORMATION);
            this.state = 537;
            this.match(MongoParser.LPAREN);
            this.state = 539;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 538;
                this.collectionIndexInformationArgument();
                }
            }

            this.state = 541;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexInformationArgument(): CollectionIndexInformationArgumentContext {
        let localContext = new CollectionIndexInformationArgumentContext(this.context, this.state);
        this.enterRule(localContext, 90, MongoParser.RULE_collectionIndexInformationArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 543;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexExistsMethod(): CollectionIndexExistsMethodContext {
        let localContext = new CollectionIndexExistsMethodContext(this.context, this.state);
        this.enterRule(localContext, 92, MongoParser.RULE_collectionIndexExistsMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 545;
            this.match(MongoParser.INDEX_EXISTS);
            this.state = 546;
            this.match(MongoParser.LPAREN);
            this.state = 547;
            this.collectionIndexExistsArgument1();
            this.state = 550;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 548;
                this.match(MongoParser.COMMA);
                this.state = 549;
                this.collectionIndexExistsArgument2();
                }
            }

            this.state = 552;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexExistsArgument2(): CollectionIndexExistsArgument2Context {
        let localContext = new CollectionIndexExistsArgument2Context(this.context, this.state);
        this.enterRule(localContext, 94, MongoParser.RULE_collectionIndexExistsArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 554;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexExistsArgument1(): CollectionIndexExistsArgument1Context {
        let localContext = new CollectionIndexExistsArgument1Context(this.context, this.state);
        this.enterRule(localContext, 96, MongoParser.RULE_collectionIndexExistsArgument1);
        let _la: number;
        try {
            let alternative: number;
            this.state = 570;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 556;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 557;
                this.match(MongoParser.LBRACKET);
                this.state = 558;
                this.match(MongoParser.STRING);
                this.state = 563;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 24, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 559;
                        this.match(MongoParser.COMMA);
                        this.state = 560;
                        this.match(MongoParser.STRING);
                        }
                        }
                    }
                    this.state = 565;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 24, this.context);
                }
                this.state = 567;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 566;
                    this.match(MongoParser.COMMA);
                    }
                }

                this.state = 569;
                this.match(MongoParser.RBRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexesMethod(): CollectionIndexesMethodContext {
        let localContext = new CollectionIndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 98, MongoParser.RULE_collectionIndexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 572;
            this.match(MongoParser.INDEXES);
            this.state = 573;
            this.match(MongoParser.LPAREN);
            this.state = 575;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 574;
                this.collectionIndexesArgument();
                }
            }

            this.state = 577;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexesArgument(): CollectionIndexesArgumentContext {
        let localContext = new CollectionIndexesArgumentContext(this.context, this.state);
        this.enterRule(localContext, 100, MongoParser.RULE_collectionIndexesArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 579;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionListIndexesMethod(): CollectionListIndexesMethodContext {
        let localContext = new CollectionListIndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 102, MongoParser.RULE_collectionListIndexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 581;
            this.match(MongoParser.LIST_INDEXES);
            this.state = 582;
            this.match(MongoParser.LPAREN);
            this.state = 584;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 583;
                this.collectionListIndexesArgument();
                }
            }

            this.state = 586;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionListIndexesArgument(): CollectionListIndexesArgumentContext {
        let localContext = new CollectionListIndexesArgumentContext(this.context, this.state);
        this.enterRule(localContext, 104, MongoParser.RULE_collectionListIndexesArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 588;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropIndexesMethod(): CollectionDropIndexesMethodContext {
        let localContext = new CollectionDropIndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 106, MongoParser.RULE_collectionDropIndexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 590;
            this.match(MongoParser.DROP_INDEXES);
            this.state = 591;
            this.match(MongoParser.LPAREN);
            this.state = 593;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 592;
                this.collectionDropIndexesArgument();
                }
            }

            this.state = 595;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropIndexesArgument(): CollectionDropIndexesArgumentContext {
        let localContext = new CollectionDropIndexesArgumentContext(this.context, this.state);
        this.enterRule(localContext, 108, MongoParser.RULE_collectionDropIndexesArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 597;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropIndexMethod(): CollectionDropIndexMethodContext {
        let localContext = new CollectionDropIndexMethodContext(this.context, this.state);
        this.enterRule(localContext, 110, MongoParser.RULE_collectionDropIndexMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 599;
            this.match(MongoParser.DROP_INDEX);
            this.state = 600;
            this.match(MongoParser.LPAREN);
            this.state = 601;
            this.collectionDropIndexArgument1();
            this.state = 604;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 602;
                this.match(MongoParser.COMMA);
                this.state = 603;
                this.collectionDropIndexArgument2();
                }
            }

            this.state = 606;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropIndexArgument2(): CollectionDropIndexArgument2Context {
        let localContext = new CollectionDropIndexArgument2Context(this.context, this.state);
        this.enterRule(localContext, 112, MongoParser.RULE_collectionDropIndexArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 608;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropIndexArgument1(): CollectionDropIndexArgument1Context {
        let localContext = new CollectionDropIndexArgument1Context(this.context, this.state);
        this.enterRule(localContext, 114, MongoParser.RULE_collectionDropIndexArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 610;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexesMethod(): CollectionCreateIndexesMethodContext {
        let localContext = new CollectionCreateIndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 116, MongoParser.RULE_collectionCreateIndexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 612;
            this.match(MongoParser.CREATE_INDEXES);
            this.state = 613;
            this.match(MongoParser.LPAREN);
            this.state = 614;
            this.collectionCreateIndexesArgument1();
            this.state = 617;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 615;
                this.match(MongoParser.COMMA);
                this.state = 616;
                this.collectionCreateIndexesArgument2();
                }
            }

            this.state = 619;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexesArgument2(): CollectionCreateIndexesArgument2Context {
        let localContext = new CollectionCreateIndexesArgument2Context(this.context, this.state);
        this.enterRule(localContext, 118, MongoParser.RULE_collectionCreateIndexesArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 621;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexesArgument1(): CollectionCreateIndexesArgument1Context {
        let localContext = new CollectionCreateIndexesArgument1Context(this.context, this.state);
        this.enterRule(localContext, 120, MongoParser.RULE_collectionCreateIndexesArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 623;
            this.array();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexMethod(): CollectionCreateIndexMethodContext {
        let localContext = new CollectionCreateIndexMethodContext(this.context, this.state);
        this.enterRule(localContext, 122, MongoParser.RULE_collectionCreateIndexMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 625;
            this.match(MongoParser.CREATE_INDEX);
            this.state = 626;
            this.match(MongoParser.LPAREN);
            this.state = 627;
            this.collectionCreateIndexArgument1();
            this.state = 630;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 628;
                this.match(MongoParser.COMMA);
                this.state = 629;
                this.collectionCreateIndexArgument2();
                }
            }

            this.state = 632;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexArgument2(): CollectionCreateIndexArgument2Context {
        let localContext = new CollectionCreateIndexArgument2Context(this.context, this.state);
        this.enterRule(localContext, 124, MongoParser.RULE_collectionCreateIndexArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 634;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexArgument1(): CollectionCreateIndexArgument1Context {
        let localContext = new CollectionCreateIndexArgument1Context(this.context, this.state);
        this.enterRule(localContext, 126, MongoParser.RULE_collectionCreateIndexArgument1);
        try {
            this.state = 639;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 636;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 637;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 638;
                this.array();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIsCappedMethod(): CollectionIsCappedMethodContext {
        let localContext = new CollectionIsCappedMethodContext(this.context, this.state);
        this.enterRule(localContext, 128, MongoParser.RULE_collectionIsCappedMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 641;
            this.match(MongoParser.IS_CAPPED);
            this.state = 642;
            this.match(MongoParser.LPAREN);
            this.state = 644;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 643;
                this.collectionIsCappedArgument();
                }
            }

            this.state = 646;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIsCappedArgument(): CollectionIsCappedArgumentContext {
        let localContext = new CollectionIsCappedArgumentContext(this.context, this.state);
        this.enterRule(localContext, 130, MongoParser.RULE_collectionIsCappedArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 648;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropMethod(): CollectionDropMethodContext {
        let localContext = new CollectionDropMethodContext(this.context, this.state);
        this.enterRule(localContext, 132, MongoParser.RULE_collectionDropMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 650;
            this.match(MongoParser.DROP);
            this.state = 651;
            this.match(MongoParser.LPAREN);
            this.state = 653;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 652;
                this.collectionDropArgument();
                }
            }

            this.state = 655;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropArgument(): CollectionDropArgumentContext {
        let localContext = new CollectionDropArgumentContext(this.context, this.state);
        this.enterRule(localContext, 134, MongoParser.RULE_collectionDropArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 657;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionRenameMethod(): CollectionRenameMethodContext {
        let localContext = new CollectionRenameMethodContext(this.context, this.state);
        this.enterRule(localContext, 136, MongoParser.RULE_collectionRenameMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 659;
            this.match(MongoParser.RENAME);
            this.state = 660;
            this.match(MongoParser.LPAREN);
            this.state = 661;
            this.collectionRenameArgument1();
            this.state = 664;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 662;
                this.match(MongoParser.COMMA);
                this.state = 663;
                this.collectionRenameArgument2();
                }
            }

            this.state = 666;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionRenameArgument1(): CollectionRenameArgument1Context {
        let localContext = new CollectionRenameArgument1Context(this.context, this.state);
        this.enterRule(localContext, 138, MongoParser.RULE_collectionRenameArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 668;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionRenameArgument2(): CollectionRenameArgument2Context {
        let localContext = new CollectionRenameArgument2Context(this.context, this.state);
        this.enterRule(localContext, 140, MongoParser.RULE_collectionRenameArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 670;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteManyMethod(): CollectionDeleteManyMethodContext {
        let localContext = new CollectionDeleteManyMethodContext(this.context, this.state);
        this.enterRule(localContext, 142, MongoParser.RULE_collectionDeleteManyMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 672;
            this.match(MongoParser.DELETE_MANY);
            this.state = 673;
            this.match(MongoParser.LPAREN);
            this.state = 679;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 674;
                this.collectionDeleteManyArgument1();
                this.state = 677;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 675;
                    this.match(MongoParser.COMMA);
                    this.state = 676;
                    this.collectionDeleteManyArgument2();
                    }
                }

                }
            }

            this.state = 681;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteManyArgument1(): CollectionDeleteManyArgument1Context {
        let localContext = new CollectionDeleteManyArgument1Context(this.context, this.state);
        this.enterRule(localContext, 144, MongoParser.RULE_collectionDeleteManyArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 683;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteManyArgument2(): CollectionDeleteManyArgument2Context {
        let localContext = new CollectionDeleteManyArgument2Context(this.context, this.state);
        this.enterRule(localContext, 146, MongoParser.RULE_collectionDeleteManyArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 685;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteOneMethod(): CollectionDeleteOneMethodContext {
        let localContext = new CollectionDeleteOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 148, MongoParser.RULE_collectionDeleteOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 687;
            this.match(MongoParser.DELETE_ONE);
            this.state = 688;
            this.match(MongoParser.LPAREN);
            this.state = 694;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 689;
                this.collectionDeleteOneArgument1();
                this.state = 692;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 690;
                    this.match(MongoParser.COMMA);
                    this.state = 691;
                    this.collectionDeleteOneArgument2();
                    }
                }

                }
            }

            this.state = 696;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteOneArgument1(): CollectionDeleteOneArgument1Context {
        let localContext = new CollectionDeleteOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 150, MongoParser.RULE_collectionDeleteOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 698;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteOneArgument2(): CollectionDeleteOneArgument2Context {
        let localContext = new CollectionDeleteOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 152, MongoParser.RULE_collectionDeleteOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 700;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionReplaceOneMethod(): CollectionReplaceOneMethodContext {
        let localContext = new CollectionReplaceOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 154, MongoParser.RULE_collectionReplaceOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 702;
            this.match(MongoParser.REPLACE_ONE);
            this.state = 703;
            this.match(MongoParser.LPAREN);
            this.state = 704;
            this.collectionReplaceOneArgument1();
            this.state = 705;
            this.match(MongoParser.COMMA);
            this.state = 706;
            this.collectionReplaceOneArgument2();
            this.state = 709;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 707;
                this.match(MongoParser.COMMA);
                this.state = 708;
                this.collectionReplaceOneArgument3();
                }
            }

            this.state = 711;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionReplaceOneArgument1(): CollectionReplaceOneArgument1Context {
        let localContext = new CollectionReplaceOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 156, MongoParser.RULE_collectionReplaceOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 713;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionReplaceOneArgument2(): CollectionReplaceOneArgument2Context {
        let localContext = new CollectionReplaceOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 158, MongoParser.RULE_collectionReplaceOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 715;
            this.documentToInsert();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionReplaceOneArgument3(): CollectionReplaceOneArgument3Context {
        let localContext = new CollectionReplaceOneArgument3Context(this.context, this.state);
        this.enterRule(localContext, 160, MongoParser.RULE_collectionReplaceOneArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 717;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateManyMethod(): CollectionUpdateManyMethodContext {
        let localContext = new CollectionUpdateManyMethodContext(this.context, this.state);
        this.enterRule(localContext, 162, MongoParser.RULE_collectionUpdateManyMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 719;
            this.match(MongoParser.UPDATE_MANY);
            this.state = 720;
            this.match(MongoParser.LPAREN);
            this.state = 721;
            this.collectionUpdateManyArgument1();
            this.state = 722;
            this.match(MongoParser.COMMA);
            this.state = 723;
            this.collectionUpdateManyArgument2();
            this.state = 726;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 724;
                this.match(MongoParser.COMMA);
                this.state = 725;
                this.collectionUpdateManyArgument3();
                }
            }

            this.state = 728;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateManyArgument1(): CollectionUpdateManyArgument1Context {
        let localContext = new CollectionUpdateManyArgument1Context(this.context, this.state);
        this.enterRule(localContext, 164, MongoParser.RULE_collectionUpdateManyArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 730;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateManyArgument2(): CollectionUpdateManyArgument2Context {
        let localContext = new CollectionUpdateManyArgument2Context(this.context, this.state);
        this.enterRule(localContext, 166, MongoParser.RULE_collectionUpdateManyArgument2);
        try {
            this.state = 734;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 732;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 733;
                this.array();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateManyArgument3(): CollectionUpdateManyArgument3Context {
        let localContext = new CollectionUpdateManyArgument3Context(this.context, this.state);
        this.enterRule(localContext, 168, MongoParser.RULE_collectionUpdateManyArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 736;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateOneMethod(): CollectionUpdateOneMethodContext {
        let localContext = new CollectionUpdateOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 170, MongoParser.RULE_collectionUpdateOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 738;
            this.match(MongoParser.UPDATE_ONE);
            this.state = 739;
            this.match(MongoParser.LPAREN);
            this.state = 740;
            this.collectionUpdateOneArgument1();
            this.state = 741;
            this.match(MongoParser.COMMA);
            this.state = 742;
            this.collectionUpdateOneArgument2();
            this.state = 745;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 743;
                this.match(MongoParser.COMMA);
                this.state = 744;
                this.collectionUpdateOneArgument3();
                }
            }

            this.state = 747;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateOneArgument1(): CollectionUpdateOneArgument1Context {
        let localContext = new CollectionUpdateOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 172, MongoParser.RULE_collectionUpdateOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 749;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateOneArgument2(): CollectionUpdateOneArgument2Context {
        let localContext = new CollectionUpdateOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 174, MongoParser.RULE_collectionUpdateOneArgument2);
        try {
            this.state = 753;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 751;
                this.array();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 752;
                this.object();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateOneArgument3(): CollectionUpdateOneArgument3Context {
        let localContext = new CollectionUpdateOneArgument3Context(this.context, this.state);
        this.enterRule(localContext, 176, MongoParser.RULE_collectionUpdateOneArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 755;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionBulkWriteMethod(): CollectionBulkWriteMethodContext {
        let localContext = new CollectionBulkWriteMethodContext(this.context, this.state);
        this.enterRule(localContext, 178, MongoParser.RULE_collectionBulkWriteMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 757;
            this.match(MongoParser.BULK_WRITE);
            this.state = 758;
            this.match(MongoParser.LPAREN);
            this.state = 759;
            this.collectionBulkWriteArgument1();
            this.state = 762;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 760;
                this.match(MongoParser.COMMA);
                this.state = 761;
                this.collectionBulkWriteArgument2();
                }
            }

            this.state = 764;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionBulkWriteArgument1(): CollectionBulkWriteArgument1Context {
        let localContext = new CollectionBulkWriteArgument1Context(this.context, this.state);
        this.enterRule(localContext, 180, MongoParser.RULE_collectionBulkWriteArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 766;
            this.array();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionBulkWriteArgument2(): CollectionBulkWriteArgument2Context {
        let localContext = new CollectionBulkWriteArgument2Context(this.context, this.state);
        this.enterRule(localContext, 182, MongoParser.RULE_collectionBulkWriteArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 768;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertManyMethod(): CollectionInsertManyMethodContext {
        let localContext = new CollectionInsertManyMethodContext(this.context, this.state);
        this.enterRule(localContext, 184, MongoParser.RULE_collectionInsertManyMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 770;
            this.match(MongoParser.INSERT_MANY);
            this.state = 771;
            this.match(MongoParser.LPAREN);
            this.state = 772;
            this.collectionInsertManyArgument1();
            this.state = 775;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 773;
                this.match(MongoParser.COMMA);
                this.state = 774;
                this.collectionInsertManyArgument2();
                }
            }

            this.state = 777;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertManyArgument1(): CollectionInsertManyArgument1Context {
        let localContext = new CollectionInsertManyArgument1Context(this.context, this.state);
        this.enterRule(localContext, 186, MongoParser.RULE_collectionInsertManyArgument1);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 779;
            this.match(MongoParser.LBRACKET);
            this.state = 780;
            this.documentToInsert();
            this.state = 785;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 48, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 781;
                    this.match(MongoParser.COMMA);
                    this.state = 782;
                    this.documentToInsert();
                    }
                    }
                }
                this.state = 787;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 48, this.context);
            }
            this.state = 789;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 788;
                this.match(MongoParser.COMMA);
                }
            }

            this.state = 791;
            this.match(MongoParser.RBRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertManyArgument2(): CollectionInsertManyArgument2Context {
        let localContext = new CollectionInsertManyArgument2Context(this.context, this.state);
        this.enterRule(localContext, 188, MongoParser.RULE_collectionInsertManyArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 793;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertOneMethod(): CollectionInsertOneMethodContext {
        let localContext = new CollectionInsertOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 190, MongoParser.RULE_collectionInsertOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 795;
            this.match(MongoParser.INSERT_ONE);
            this.state = 796;
            this.match(MongoParser.LPAREN);
            this.state = 797;
            this.collectionInsertOneArgument1();
            this.state = 800;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 798;
                this.match(MongoParser.COMMA);
                this.state = 799;
                this.collectionInsertOneArgument2();
                }
            }

            this.state = 802;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertOneArgument1(): CollectionInsertOneArgument1Context {
        let localContext = new CollectionInsertOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 192, MongoParser.RULE_collectionInsertOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 804;
            this.documentToInsert();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertOneArgument2(): CollectionInsertOneArgument2Context {
        let localContext = new CollectionInsertOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 194, MongoParser.RULE_collectionInsertOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 806;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public documentToInsert(): DocumentToInsertContext {
        let localContext = new DocumentToInsertContext(this.context, this.state);
        this.enterRule(localContext, 196, MongoParser.RULE_documentToInsert);
        try {
            this.state = 810;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 808;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 809;
                this.array();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndUpdateMethod(): CollectionFindOneAndUpdateMethodContext {
        let localContext = new CollectionFindOneAndUpdateMethodContext(this.context, this.state);
        this.enterRule(localContext, 198, MongoParser.RULE_collectionFindOneAndUpdateMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 812;
            this.match(MongoParser.FIND_ONE_AND_UPDATE);
            this.state = 813;
            this.match(MongoParser.LPAREN);
            this.state = 814;
            this.collectionFindOneAndUpdateArgument1();
            this.state = 815;
            this.match(MongoParser.COMMA);
            this.state = 816;
            this.collectionFindOneAndUpdateArgument2();
            this.state = 819;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 817;
                this.match(MongoParser.COMMA);
                this.state = 818;
                this.collectionFindOneAndUpdateArgument3();
                }
            }

            this.state = 821;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndUpdateArgument1(): CollectionFindOneAndUpdateArgument1Context {
        let localContext = new CollectionFindOneAndUpdateArgument1Context(this.context, this.state);
        this.enterRule(localContext, 200, MongoParser.RULE_collectionFindOneAndUpdateArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 823;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndUpdateArgument2(): CollectionFindOneAndUpdateArgument2Context {
        let localContext = new CollectionFindOneAndUpdateArgument2Context(this.context, this.state);
        this.enterRule(localContext, 202, MongoParser.RULE_collectionFindOneAndUpdateArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 825;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndUpdateArgument3(): CollectionFindOneAndUpdateArgument3Context {
        let localContext = new CollectionFindOneAndUpdateArgument3Context(this.context, this.state);
        this.enterRule(localContext, 204, MongoParser.RULE_collectionFindOneAndUpdateArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 827;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndReplaceMethod(): CollectionFindOneAndReplaceMethodContext {
        let localContext = new CollectionFindOneAndReplaceMethodContext(this.context, this.state);
        this.enterRule(localContext, 206, MongoParser.RULE_collectionFindOneAndReplaceMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 829;
            this.match(MongoParser.FIND_ONE_AND_REPLACE);
            this.state = 830;
            this.match(MongoParser.LPAREN);
            this.state = 831;
            this.collectionFindOneAndReplaceArgument1();
            this.state = 832;
            this.match(MongoParser.COMMA);
            this.state = 833;
            this.collectionFindOneAndReplaceArgument2();
            this.state = 836;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 834;
                this.match(MongoParser.COMMA);
                this.state = 835;
                this.collectionFindOneAndReplaceArgument3();
                }
            }

            this.state = 838;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndReplaceArgument1(): CollectionFindOneAndReplaceArgument1Context {
        let localContext = new CollectionFindOneAndReplaceArgument1Context(this.context, this.state);
        this.enterRule(localContext, 208, MongoParser.RULE_collectionFindOneAndReplaceArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 840;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndReplaceArgument2(): CollectionFindOneAndReplaceArgument2Context {
        let localContext = new CollectionFindOneAndReplaceArgument2Context(this.context, this.state);
        this.enterRule(localContext, 210, MongoParser.RULE_collectionFindOneAndReplaceArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 842;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndReplaceArgument3(): CollectionFindOneAndReplaceArgument3Context {
        let localContext = new CollectionFindOneAndReplaceArgument3Context(this.context, this.state);
        this.enterRule(localContext, 212, MongoParser.RULE_collectionFindOneAndReplaceArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 844;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndDeleteMethod(): CollectionFindOneAndDeleteMethodContext {
        let localContext = new CollectionFindOneAndDeleteMethodContext(this.context, this.state);
        this.enterRule(localContext, 214, MongoParser.RULE_collectionFindOneAndDeleteMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 846;
            this.match(MongoParser.FIND_ONE_AND_DELETE);
            this.state = 847;
            this.match(MongoParser.LPAREN);
            this.state = 848;
            this.collectionFindOneAndDeleteArgument1();
            this.state = 851;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 849;
                this.match(MongoParser.COMMA);
                this.state = 850;
                this.collectionFindOneAndDeleteArgument2();
                }
            }

            this.state = 853;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndDeleteArgument1(): CollectionFindOneAndDeleteArgument1Context {
        let localContext = new CollectionFindOneAndDeleteArgument1Context(this.context, this.state);
        this.enterRule(localContext, 216, MongoParser.RULE_collectionFindOneAndDeleteArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 855;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndDeleteArgument2(): CollectionFindOneAndDeleteArgument2Context {
        let localContext = new CollectionFindOneAndDeleteArgument2Context(this.context, this.state);
        this.enterRule(localContext, 218, MongoParser.RULE_collectionFindOneAndDeleteArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 857;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneMethod(): CollectionFindOneMethodContext {
        let localContext = new CollectionFindOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 220, MongoParser.RULE_collectionFindOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 859;
            this.match(MongoParser.FIND_ONE);
            this.state = 860;
            this.match(MongoParser.LPAREN);
            this.state = 866;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 861;
                this.collectionFindOneArgument1();
                this.state = 864;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 862;
                    this.match(MongoParser.COMMA);
                    this.state = 863;
                    this.collectionFindOneArgument2();
                    }
                }

                }
            }

            this.state = 868;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneArgument1(): CollectionFindOneArgument1Context {
        let localContext = new CollectionFindOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 222, MongoParser.RULE_collectionFindOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 870;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneArgument2(): CollectionFindOneArgument2Context {
        let localContext = new CollectionFindOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 224, MongoParser.RULE_collectionFindOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 872;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindMethod(): CollectionFindMethodContext {
        let localContext = new CollectionFindMethodContext(this.context, this.state);
        this.enterRule(localContext, 226, MongoParser.RULE_collectionFindMethod);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 874;
            this.match(MongoParser.FIND);
            this.state = 875;
            this.match(MongoParser.LPAREN);
            this.state = 881;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 876;
                this.collectionFindMethodArgument1();
                this.state = 879;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 877;
                    this.match(MongoParser.COMMA);
                    this.state = 878;
                    this.collectionFindMethodArgument2();
                    }
                }

                }
            }

            this.state = 883;
            this.match(MongoParser.RPAREN);
            this.state = 887;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 59, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 884;
                    this.collectionFindMethodModifier();
                    }
                    }
                }
                this.state = 889;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 59, this.context);
            }
            this.state = 891;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56) {
                {
                this.state = 890;
                this.explainMethod();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindMethodArgument1(): CollectionFindMethodArgument1Context {
        let localContext = new CollectionFindMethodArgument1Context(this.context, this.state);
        this.enterRule(localContext, 228, MongoParser.RULE_collectionFindMethodArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 893;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindMethodArgument2(): CollectionFindMethodArgument2Context {
        let localContext = new CollectionFindMethodArgument2Context(this.context, this.state);
        this.enterRule(localContext, 230, MongoParser.RULE_collectionFindMethodArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 895;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainMethod(): ExplainMethodContext {
        let localContext = new ExplainMethodContext(this.context, this.state);
        this.enterRule(localContext, 232, MongoParser.RULE_explainMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 897;
            this.match(MongoParser.DOT);
            this.state = 898;
            this.match(MongoParser.EXPLAIN);
            this.state = 899;
            this.match(MongoParser.LPAREN);
            this.state = 901;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 705) !== 0)) {
                {
                this.state = 900;
                this.explainMethodArgument();
                }
            }

            this.state = 903;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainMethodArgument(): ExplainMethodArgumentContext {
        let localContext = new ExplainMethodArgumentContext(this.context, this.state);
        this.enterRule(localContext, 234, MongoParser.RULE_explainMethodArgument);
        try {
            this.state = 908;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 905;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.TRUE:
            case MongoParser.FALSE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 906;
                this.boolean_();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 907;
                this.object();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindMethodModifier(): CollectionFindMethodModifierContext {
        let localContext = new CollectionFindMethodModifierContext(this.context, this.state);
        this.enterRule(localContext, 236, MongoParser.RULE_collectionFindMethodModifier);
        try {
            this.state = 928;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 63, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 910;
                this.match(MongoParser.DOT);
                this.state = 911;
                this.skipModifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 912;
                this.match(MongoParser.DOT);
                this.state = 913;
                this.limitModifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 914;
                this.match(MongoParser.DOT);
                this.state = 915;
                this.filterModifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 916;
                this.match(MongoParser.DOT);
                this.state = 917;
                this.minModifier();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 918;
                this.match(MongoParser.DOT);
                this.state = 919;
                this.maxModifier();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 920;
                this.match(MongoParser.DOT);
                this.state = 921;
                this.hintModifier();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 922;
                this.match(MongoParser.DOT);
                this.state = 923;
                this.returnKeyModifier();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 924;
                this.match(MongoParser.DOT);
                this.state = 925;
                this.showRecordIdModifier();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 926;
                this.match(MongoParser.DOT);
                this.state = 927;
                this.sortModifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipModifier(): SkipModifierContext {
        let localContext = new SkipModifierContext(this.context, this.state);
        this.enterRule(localContext, 238, MongoParser.RULE_skipModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 930;
            this.match(MongoParser.SKIP_);
            this.state = 931;
            this.match(MongoParser.LPAREN);
            this.state = 932;
            this.skipModifierArgument();
            this.state = 933;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipModifierArgument(): SkipModifierArgumentContext {
        let localContext = new SkipModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 240, MongoParser.RULE_skipModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 935;
            this.number_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitModifier(): LimitModifierContext {
        let localContext = new LimitModifierContext(this.context, this.state);
        this.enterRule(localContext, 242, MongoParser.RULE_limitModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 937;
            this.match(MongoParser.LIMIT);
            this.state = 938;
            this.match(MongoParser.LPAREN);
            this.state = 939;
            this.limitModifierArgument();
            this.state = 940;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitModifierArgument(): LimitModifierArgumentContext {
        let localContext = new LimitModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 244, MongoParser.RULE_limitModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 942;
            this.number_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterModifier(): FilterModifierContext {
        let localContext = new FilterModifierContext(this.context, this.state);
        this.enterRule(localContext, 246, MongoParser.RULE_filterModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 944;
            this.match(MongoParser.FILTER);
            this.state = 945;
            this.match(MongoParser.LPAREN);
            this.state = 946;
            this.filterModifierArgument();
            this.state = 947;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterModifierArgument(): FilterModifierArgumentContext {
        let localContext = new FilterModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 248, MongoParser.RULE_filterModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 949;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public minModifier(): MinModifierContext {
        let localContext = new MinModifierContext(this.context, this.state);
        this.enterRule(localContext, 250, MongoParser.RULE_minModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 951;
            this.match(MongoParser.MIN);
            this.state = 952;
            this.match(MongoParser.LPAREN);
            this.state = 953;
            this.minModifierArgument();
            this.state = 954;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public minModifierArgument(): MinModifierArgumentContext {
        let localContext = new MinModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 252, MongoParser.RULE_minModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 956;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public maxModifier(): MaxModifierContext {
        let localContext = new MaxModifierContext(this.context, this.state);
        this.enterRule(localContext, 254, MongoParser.RULE_maxModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 958;
            this.match(MongoParser.MAX);
            this.state = 959;
            this.match(MongoParser.LPAREN);
            this.state = 960;
            this.maxModifierArgument();
            this.state = 961;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public maxModifierArgument(): MaxModifierArgumentContext {
        let localContext = new MaxModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 256, MongoParser.RULE_maxModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 963;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintModifier(): HintModifierContext {
        let localContext = new HintModifierContext(this.context, this.state);
        this.enterRule(localContext, 258, MongoParser.RULE_hintModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 965;
            this.match(MongoParser.HINT);
            this.state = 966;
            this.match(MongoParser.LPAREN);
            this.state = 967;
            this.hintModifierArgument();
            this.state = 968;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintModifierArgument(): HintModifierArgumentContext {
        let localContext = new HintModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 260, MongoParser.RULE_hintModifierArgument);
        try {
            this.state = 972;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 970;
                this.object();
                }
                break;
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 971;
                this.match(MongoParser.STRING);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnKeyModifier(): ReturnKeyModifierContext {
        let localContext = new ReturnKeyModifierContext(this.context, this.state);
        this.enterRule(localContext, 262, MongoParser.RULE_returnKeyModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 974;
            this.match(MongoParser.RETURN_KEY);
            this.state = 975;
            this.match(MongoParser.LPAREN);
            this.state = 976;
            this.returnKeyModifierArgument();
            this.state = 977;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnKeyModifierArgument(): ReturnKeyModifierArgumentContext {
        let localContext = new ReturnKeyModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 264, MongoParser.RULE_returnKeyModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 979;
            this.boolean_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRecordIdModifier(): ShowRecordIdModifierContext {
        let localContext = new ShowRecordIdModifierContext(this.context, this.state);
        this.enterRule(localContext, 266, MongoParser.RULE_showRecordIdModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 981;
            this.match(MongoParser.SHOW_RECORD_ID);
            this.state = 982;
            this.match(MongoParser.LPAREN);
            this.state = 983;
            this.showRecordIdModifierArgument();
            this.state = 984;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRecordIdModifierArgument(): ShowRecordIdModifierArgumentContext {
        let localContext = new ShowRecordIdModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 268, MongoParser.RULE_showRecordIdModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 986;
            this.boolean_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortModifier(): SortModifierContext {
        let localContext = new SortModifierContext(this.context, this.state);
        this.enterRule(localContext, 270, MongoParser.RULE_sortModifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 988;
            this.match(MongoParser.SORT);
            this.state = 989;
            this.match(MongoParser.LPAREN);
            this.state = 990;
            this.sortModifierArgument1();
            this.state = 993;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 991;
                this.match(MongoParser.COMMA);
                this.state = 992;
                this.sortModifierArgument2();
                }
            }

            this.state = 995;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortModifierArgument1(): SortModifierArgument1Context {
        let localContext = new SortModifierArgument1Context(this.context, this.state);
        this.enterRule(localContext, 272, MongoParser.RULE_sortModifierArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 997;
            this.json5();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortModifierArgument2(): SortModifierArgument2Context {
        let localContext = new SortModifierArgument2Context(this.context, this.state);
        this.enterRule(localContext, 274, MongoParser.RULE_sortModifierArgument2);
        try {
            this.state = 1002;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.NUMBER:
            case MongoParser.NUMERIC_LITERAL:
            case MongoParser.SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 999;
                this.number_();
                }
                break;
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1000;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1001;
                this.object();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reservedKeyword(): ReservedKeywordContext {
        let localContext = new ReservedKeywordContext(this.context, this.state);
        this.enterRule(localContext, 276, MongoParser.RULE_reservedKeyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1004;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 32767) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json5(): Json5Context {
        let localContext = new Json5Context(this.context, this.state);
        this.enterRule(localContext, 278, MongoParser.RULE_json5);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1007;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 130065) !== 0)) {
                {
                this.state = 1006;
                this.value();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object(): ObjectContext {
        let localContext = new ObjectContext(this.context, this.state);
        this.enterRule(localContext, 280, MongoParser.RULE_object);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1025;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 70, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1009;
                this.match(MongoParser.LBRACE);
                this.state = 1010;
                this.pair();
                this.state = 1015;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 68, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1011;
                        this.match(MongoParser.COMMA);
                        this.state = 1012;
                        this.pair();
                        }
                        }
                    }
                    this.state = 1017;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 68, this.context);
                }
                this.state = 1019;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 1018;
                    this.match(MongoParser.COMMA);
                    }
                }

                this.state = 1021;
                this.match(MongoParser.RBRACE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1023;
                this.match(MongoParser.LBRACE);
                this.state = 1024;
                this.match(MongoParser.RBRACE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pair(): PairContext {
        let localContext = new PairContext(this.context, this.state);
        this.enterRule(localContext, 282, MongoParser.RULE_pair);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1027;
            this.key();
            this.state = 1028;
            this.match(MongoParser.COLON);
            this.state = 1029;
            this.value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public boolean_(): BooleanContext {
        let localContext = new BooleanContext(this.context, this.state);
        this.enterRule(localContext, 284, MongoParser.RULE_boolean);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1031;
            _la = this.tokenStream.LA(1);
            if(!(_la === 57 || _la === 58)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key(): KeyContext {
        let localContext = new KeyContext(this.context, this.state);
        this.enterRule(localContext, 286, MongoParser.RULE_key);
        try {
            this.state = 1038;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1033;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.DB:
            case MongoParser.FIND:
            case MongoParser.FIND_ONE:
            case MongoParser.FIND_ONE_AND_DELETE:
            case MongoParser.FIND_ONE_AND_REPLACE:
            case MongoParser.FIND_ONE_AND_UPDATE:
            case MongoParser.SHOW_RECORD_ID:
            case MongoParser.RETURN_KEY:
            case MongoParser.FILTER:
            case MongoParser.MIN:
            case MongoParser.MAX:
            case MongoParser.SORT:
            case MongoParser.LIMIT:
            case MongoParser.EXPLAIN:
            case MongoParser.HINT:
            case MongoParser.SKIP_:
            case MongoParser.INSERT_ONE:
            case MongoParser.INSERT_MANY:
            case MongoParser.BULK_WRITE:
            case MongoParser.UPDATE_ONE:
            case MongoParser.UPDATE_MANY:
            case MongoParser.REPLACE_ONE:
            case MongoParser.DELETE_ONE:
            case MongoParser.DELETE_MANY:
            case MongoParser.RENAME:
            case MongoParser.DROP:
            case MongoParser.IS_CAPPED:
            case MongoParser.CREATE_INDEX:
            case MongoParser.CREATE_INDEXES:
            case MongoParser.DROP_INDEX:
            case MongoParser.DROP_INDEXES:
            case MongoParser.LIST_INDEXES:
            case MongoParser.INDEXES:
            case MongoParser.INDEX_EXISTS:
            case MongoParser.INDEX_INFORMATION:
            case MongoParser.ESTIMATED_DOCUMENT_COUNT:
            case MongoParser.COUNT_DOCUMENTS:
            case MongoParser.DISTINCT:
            case MongoParser.AGGREGATE:
            case MongoParser.COLLECTION:
            case MongoParser.CREATE_COLLECTION:
            case MongoParser.COMMAND:
            case MongoParser.LIST_COLLECTIONS:
            case MongoParser.RENAME_COLLECTION:
            case MongoParser.DROP_COLLECTION:
            case MongoParser.DROP_DATABASE:
            case MongoParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1034;
                this.identifier();
                }
                break;
            case MongoParser.NUMERIC_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1035;
                this.match(MongoParser.NUMERIC_LITERAL);
                }
                break;
            case MongoParser.TRUE:
            case MongoParser.FALSE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1036;
                this.boolean_();
                }
                break;
            case MongoParser.NULL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1037;
                this.match(MongoParser.NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 288, MongoParser.RULE_identifier);
        try {
            this.state = 1042;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1040;
                this.match(MongoParser.IDENTIFIER);
                }
                break;
            case MongoParser.DB:
            case MongoParser.FIND:
            case MongoParser.FIND_ONE:
            case MongoParser.FIND_ONE_AND_DELETE:
            case MongoParser.FIND_ONE_AND_REPLACE:
            case MongoParser.FIND_ONE_AND_UPDATE:
            case MongoParser.SHOW_RECORD_ID:
            case MongoParser.RETURN_KEY:
            case MongoParser.FILTER:
            case MongoParser.MIN:
            case MongoParser.MAX:
            case MongoParser.SORT:
            case MongoParser.LIMIT:
            case MongoParser.EXPLAIN:
            case MongoParser.HINT:
            case MongoParser.SKIP_:
            case MongoParser.INSERT_ONE:
            case MongoParser.INSERT_MANY:
            case MongoParser.BULK_WRITE:
            case MongoParser.UPDATE_ONE:
            case MongoParser.UPDATE_MANY:
            case MongoParser.REPLACE_ONE:
            case MongoParser.DELETE_ONE:
            case MongoParser.DELETE_MANY:
            case MongoParser.RENAME:
            case MongoParser.DROP:
            case MongoParser.IS_CAPPED:
            case MongoParser.CREATE_INDEX:
            case MongoParser.CREATE_INDEXES:
            case MongoParser.DROP_INDEX:
            case MongoParser.DROP_INDEXES:
            case MongoParser.LIST_INDEXES:
            case MongoParser.INDEXES:
            case MongoParser.INDEX_EXISTS:
            case MongoParser.INDEX_INFORMATION:
            case MongoParser.ESTIMATED_DOCUMENT_COUNT:
            case MongoParser.COUNT_DOCUMENTS:
            case MongoParser.DISTINCT:
            case MongoParser.AGGREGATE:
            case MongoParser.COLLECTION:
            case MongoParser.CREATE_COLLECTION:
            case MongoParser.COMMAND:
            case MongoParser.LIST_COLLECTIONS:
            case MongoParser.RENAME_COLLECTION:
            case MongoParser.DROP_COLLECTION:
            case MongoParser.DROP_DATABASE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1041;
                this.reservedKeyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public value(): ValueContext {
        let localContext = new ValueContext(this.context, this.state);
        this.enterRule(localContext, 290, MongoParser.RULE_value);
        try {
            this.state = 1050;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1044;
                this.match(MongoParser.STRING);
                }
                break;
            case MongoParser.NUMBER:
            case MongoParser.NUMERIC_LITERAL:
            case MongoParser.SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1045;
                this.number_();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1046;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1047;
                this.array();
                }
                break;
            case MongoParser.TRUE:
            case MongoParser.FALSE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1048;
                this.boolean_();
                }
                break;
            case MongoParser.NULL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1049;
                this.match(MongoParser.NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public array(): ArrayContext {
        let localContext = new ArrayContext(this.context, this.state);
        this.enterRule(localContext, 292, MongoParser.RULE_array);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1068;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 76, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1052;
                this.match(MongoParser.LBRACKET);
                this.state = 1053;
                this.value();
                this.state = 1058;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 74, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1054;
                        this.match(MongoParser.COMMA);
                        this.state = 1055;
                        this.value();
                        }
                        }
                    }
                    this.state = 1060;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 74, this.context);
                }
                this.state = 1062;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 1061;
                    this.match(MongoParser.COMMA);
                    }
                }

                this.state = 1064;
                this.match(MongoParser.RBRACKET);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1066;
                this.match(MongoParser.LBRACKET);
                this.state = 1067;
                this.match(MongoParser.RBRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 294, MongoParser.RULE_number);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1071;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 63) {
                {
                this.state = 1070;
                this.match(MongoParser.SYMBOL);
                }
            }

            this.state = 1073;
            _la = this.tokenStream.LA(1);
            if(!(_la === 61 || _la === 62)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public static readonly _serializedATN: number[] = [
        4,1,67,1076,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        1,0,3,0,298,8,0,1,0,1,0,1,1,1,1,3,1,304,8,1,1,1,1,1,1,1,1,1,3,1,
        310,8,1,1,2,1,2,3,2,314,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,3,4,329,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,338,
        8,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,3,7,347,8,7,1,8,1,8,1,9,1,9,1,9,
        3,9,354,8,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,365,
        8,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,3,14,380,8,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,18,3,18,396,8,18,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,3,21,409,8,21,1,21,1,21,1,22,1,22,
        1,23,1,23,1,24,1,24,1,24,1,24,1,24,3,24,422,8,24,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,475,8,31,1,32,
        1,32,1,32,1,32,1,32,3,32,482,8,32,3,32,484,8,32,1,32,1,32,3,32,488,
        8,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,
        501,8,35,3,35,503,8,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,
        39,1,39,1,39,1,39,1,39,3,39,518,8,39,3,39,520,8,39,1,39,1,39,1,40,
        1,40,1,41,1,41,1,42,1,42,1,42,3,42,531,8,42,1,42,1,42,1,43,1,43,
        1,44,1,44,1,44,3,44,540,8,44,1,44,1,44,1,45,1,45,1,46,1,46,1,46,
        1,46,1,46,3,46,551,8,46,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,
        1,48,5,48,562,8,48,10,48,12,48,565,9,48,1,48,3,48,568,8,48,1,48,
        3,48,571,8,48,1,49,1,49,1,49,3,49,576,8,49,1,49,1,49,1,50,1,50,1,
        51,1,51,1,51,3,51,585,8,51,1,51,1,51,1,52,1,52,1,53,1,53,1,53,3,
        53,594,8,53,1,53,1,53,1,54,1,54,1,55,1,55,1,55,1,55,1,55,3,55,605,
        8,55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,3,58,
        618,8,58,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,61,1,61,
        3,61,631,8,61,1,61,1,61,1,62,1,62,1,63,1,63,1,63,3,63,640,8,63,1,
        64,1,64,1,64,3,64,645,8,64,1,64,1,64,1,65,1,65,1,66,1,66,1,66,3,
        66,654,8,66,1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,68,1,68,3,68,665,
        8,68,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,71,1,71,1,71,3,71,
        678,8,71,3,71,680,8,71,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,
        74,1,74,1,74,3,74,693,8,74,3,74,695,8,74,1,74,1,74,1,75,1,75,1,76,
        1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,710,8,77,1,77,1,77,
        1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        3,81,727,8,81,1,81,1,81,1,82,1,82,1,83,1,83,3,83,735,8,83,1,84,1,
        84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,746,8,85,1,85,1,85,1,
        86,1,86,1,87,1,87,3,87,754,8,87,1,88,1,88,1,89,1,89,1,89,1,89,1,
        89,3,89,763,8,89,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,
        92,1,92,3,92,776,8,92,1,92,1,92,1,93,1,93,1,93,1,93,5,93,784,8,93,
        10,93,12,93,787,9,93,1,93,3,93,790,8,93,1,93,1,93,1,94,1,94,1,95,
        1,95,1,95,1,95,1,95,3,95,801,8,95,1,95,1,95,1,96,1,96,1,97,1,97,
        1,98,1,98,3,98,811,8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,
        820,8,99,1,99,1,99,1,100,1,100,1,101,1,101,1,102,1,102,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,3,103,837,8,103,1,103,1,103,1,104,
        1,104,1,105,1,105,1,106,1,106,1,107,1,107,1,107,1,107,1,107,3,107,
        852,8,107,1,107,1,107,1,108,1,108,1,109,1,109,1,110,1,110,1,110,
        1,110,1,110,3,110,865,8,110,3,110,867,8,110,1,110,1,110,1,111,1,
        111,1,112,1,112,1,113,1,113,1,113,1,113,1,113,3,113,880,8,113,3,
        113,882,8,113,1,113,1,113,5,113,886,8,113,10,113,12,113,889,9,113,
        1,113,3,113,892,8,113,1,114,1,114,1,115,1,115,1,116,1,116,1,116,
        1,116,3,116,902,8,116,1,116,1,116,1,117,1,117,1,117,3,117,909,8,
        117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,929,8,118,
        1,119,1,119,1,119,1,119,1,119,1,120,1,120,1,121,1,121,1,121,1,121,
        1,121,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,124,1,124,1,125,
        1,125,1,125,1,125,1,125,1,126,1,126,1,127,1,127,1,127,1,127,1,127,
        1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,130,1,130,3,130,973,
        8,130,1,131,1,131,1,131,1,131,1,131,1,132,1,132,1,133,1,133,1,133,
        1,133,1,133,1,134,1,134,1,135,1,135,1,135,1,135,1,135,3,135,994,
        8,135,1,135,1,135,1,136,1,136,1,137,1,137,1,137,3,137,1003,8,137,
        1,138,1,138,1,139,3,139,1008,8,139,1,140,1,140,1,140,1,140,5,140,
        1014,8,140,10,140,12,140,1017,9,140,1,140,3,140,1020,8,140,1,140,
        1,140,1,140,1,140,3,140,1026,8,140,1,141,1,141,1,141,1,141,1,142,
        1,142,1,143,1,143,1,143,1,143,1,143,3,143,1039,8,143,1,144,1,144,
        3,144,1043,8,144,1,145,1,145,1,145,1,145,1,145,1,145,3,145,1051,
        8,145,1,146,1,146,1,146,1,146,5,146,1057,8,146,10,146,12,146,1060,
        9,146,1,146,3,146,1063,8,146,1,146,1,146,1,146,1,146,3,146,1069,
        8,146,1,147,3,147,1072,8,147,1,147,1,147,1,147,0,0,148,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,0,3,1,0,1,46,1,0,57,58,1,0,61,62,1056,0,297,1,0,0,0,2,309,
        1,0,0,0,4,313,1,0,0,0,6,315,1,0,0,0,8,328,1,0,0,0,10,330,1,0,0,0,
        12,341,1,0,0,0,14,346,1,0,0,0,16,348,1,0,0,0,18,350,1,0,0,0,20,357,
        1,0,0,0,22,359,1,0,0,0,24,368,1,0,0,0,26,370,1,0,0,0,28,372,1,0,
        0,0,30,383,1,0,0,0,32,385,1,0,0,0,34,387,1,0,0,0,36,389,1,0,0,0,
        38,399,1,0,0,0,40,401,1,0,0,0,42,403,1,0,0,0,44,412,1,0,0,0,46,414,
        1,0,0,0,48,416,1,0,0,0,50,425,1,0,0,0,52,427,1,0,0,0,54,429,1,0,
        0,0,56,436,1,0,0,0,58,438,1,0,0,0,60,444,1,0,0,0,62,474,1,0,0,0,
        64,476,1,0,0,0,66,489,1,0,0,0,68,491,1,0,0,0,70,493,1,0,0,0,72,506,
        1,0,0,0,74,508,1,0,0,0,76,510,1,0,0,0,78,512,1,0,0,0,80,523,1,0,
        0,0,82,525,1,0,0,0,84,527,1,0,0,0,86,534,1,0,0,0,88,536,1,0,0,0,
        90,543,1,0,0,0,92,545,1,0,0,0,94,554,1,0,0,0,96,570,1,0,0,0,98,572,
        1,0,0,0,100,579,1,0,0,0,102,581,1,0,0,0,104,588,1,0,0,0,106,590,
        1,0,0,0,108,597,1,0,0,0,110,599,1,0,0,0,112,608,1,0,0,0,114,610,
        1,0,0,0,116,612,1,0,0,0,118,621,1,0,0,0,120,623,1,0,0,0,122,625,
        1,0,0,0,124,634,1,0,0,0,126,639,1,0,0,0,128,641,1,0,0,0,130,648,
        1,0,0,0,132,650,1,0,0,0,134,657,1,0,0,0,136,659,1,0,0,0,138,668,
        1,0,0,0,140,670,1,0,0,0,142,672,1,0,0,0,144,683,1,0,0,0,146,685,
        1,0,0,0,148,687,1,0,0,0,150,698,1,0,0,0,152,700,1,0,0,0,154,702,
        1,0,0,0,156,713,1,0,0,0,158,715,1,0,0,0,160,717,1,0,0,0,162,719,
        1,0,0,0,164,730,1,0,0,0,166,734,1,0,0,0,168,736,1,0,0,0,170,738,
        1,0,0,0,172,749,1,0,0,0,174,753,1,0,0,0,176,755,1,0,0,0,178,757,
        1,0,0,0,180,766,1,0,0,0,182,768,1,0,0,0,184,770,1,0,0,0,186,779,
        1,0,0,0,188,793,1,0,0,0,190,795,1,0,0,0,192,804,1,0,0,0,194,806,
        1,0,0,0,196,810,1,0,0,0,198,812,1,0,0,0,200,823,1,0,0,0,202,825,
        1,0,0,0,204,827,1,0,0,0,206,829,1,0,0,0,208,840,1,0,0,0,210,842,
        1,0,0,0,212,844,1,0,0,0,214,846,1,0,0,0,216,855,1,0,0,0,218,857,
        1,0,0,0,220,859,1,0,0,0,222,870,1,0,0,0,224,872,1,0,0,0,226,874,
        1,0,0,0,228,893,1,0,0,0,230,895,1,0,0,0,232,897,1,0,0,0,234,908,
        1,0,0,0,236,928,1,0,0,0,238,930,1,0,0,0,240,935,1,0,0,0,242,937,
        1,0,0,0,244,942,1,0,0,0,246,944,1,0,0,0,248,949,1,0,0,0,250,951,
        1,0,0,0,252,956,1,0,0,0,254,958,1,0,0,0,256,963,1,0,0,0,258,965,
        1,0,0,0,260,972,1,0,0,0,262,974,1,0,0,0,264,979,1,0,0,0,266,981,
        1,0,0,0,268,986,1,0,0,0,270,988,1,0,0,0,272,997,1,0,0,0,274,1002,
        1,0,0,0,276,1004,1,0,0,0,278,1007,1,0,0,0,280,1025,1,0,0,0,282,1027,
        1,0,0,0,284,1031,1,0,0,0,286,1038,1,0,0,0,288,1042,1,0,0,0,290,1050,
        1,0,0,0,292,1068,1,0,0,0,294,1071,1,0,0,0,296,298,3,2,1,0,297,296,
        1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,300,5,0,0,1,300,1,1,
        0,0,0,301,303,3,4,2,0,302,304,5,55,0,0,303,302,1,0,0,0,303,304,1,
        0,0,0,304,310,1,0,0,0,305,306,3,4,2,0,306,307,5,55,0,0,307,308,3,
        2,1,0,308,310,1,0,0,0,309,301,1,0,0,0,309,305,1,0,0,0,310,3,1,0,
        0,0,311,314,3,58,29,0,312,314,3,6,3,0,313,311,1,0,0,0,313,312,1,
        0,0,0,314,5,1,0,0,0,315,316,5,1,0,0,316,317,5,56,0,0,317,318,3,8,
        4,0,318,7,1,0,0,0,319,329,3,54,27,0,320,329,3,48,24,0,321,329,3,
        42,21,0,322,329,3,64,32,0,323,329,3,36,18,0,324,329,3,28,14,0,325,
        329,3,22,11,0,326,329,3,18,9,0,327,329,3,10,5,0,328,319,1,0,0,0,
        328,320,1,0,0,0,328,321,1,0,0,0,328,322,1,0,0,0,328,323,1,0,0,0,
        328,324,1,0,0,0,328,325,1,0,0,0,328,326,1,0,0,0,328,327,1,0,0,0,
        329,9,1,0,0,0,330,331,5,28,0,0,331,332,5,49,0,0,332,333,3,16,8,0,
        333,334,5,54,0,0,334,337,3,14,7,0,335,336,5,54,0,0,336,338,3,12,
        6,0,337,335,1,0,0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,340,5,50,
        0,0,340,11,1,0,0,0,341,342,3,280,140,0,342,13,1,0,0,0,343,347,5,
        60,0,0,344,347,3,280,140,0,345,347,3,292,146,0,346,343,1,0,0,0,346,
        344,1,0,0,0,346,345,1,0,0,0,347,15,1,0,0,0,348,349,5,60,0,0,349,
        17,1,0,0,0,350,351,5,46,0,0,351,353,5,49,0,0,352,354,3,20,10,0,353,
        352,1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,5,50,0,0,356,
        19,1,0,0,0,357,358,3,280,140,0,358,21,1,0,0,0,359,360,5,45,0,0,360,
        361,5,49,0,0,361,364,3,24,12,0,362,363,5,54,0,0,363,365,3,26,13,
        0,364,362,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,367,5,50,0,
        0,367,23,1,0,0,0,368,369,5,60,0,0,369,25,1,0,0,0,370,371,3,280,140,
        0,371,27,1,0,0,0,372,373,5,44,0,0,373,374,5,49,0,0,374,375,3,30,
        15,0,375,376,5,54,0,0,376,379,3,32,16,0,377,378,5,54,0,0,378,380,
        3,34,17,0,379,377,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,
        5,50,0,0,382,29,1,0,0,0,383,384,5,60,0,0,384,31,1,0,0,0,385,386,
        5,60,0,0,386,33,1,0,0,0,387,388,3,280,140,0,388,35,1,0,0,0,389,390,
        5,43,0,0,390,395,5,49,0,0,391,392,3,38,19,0,392,393,5,54,0,0,393,
        394,3,40,20,0,394,396,1,0,0,0,395,391,1,0,0,0,395,396,1,0,0,0,396,
        397,1,0,0,0,397,398,5,50,0,0,398,37,1,0,0,0,399,400,3,280,140,0,
        400,39,1,0,0,0,401,402,3,280,140,0,402,41,1,0,0,0,403,404,5,42,0,
        0,404,405,5,49,0,0,405,408,3,44,22,0,406,407,5,54,0,0,407,409,3,
        46,23,0,408,406,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,411,
        5,50,0,0,411,43,1,0,0,0,412,413,3,280,140,0,413,45,1,0,0,0,414,415,
        3,280,140,0,415,47,1,0,0,0,416,417,5,41,0,0,417,418,5,49,0,0,418,
        421,3,50,25,0,419,420,5,54,0,0,420,422,3,52,26,0,421,419,1,0,0,0,
        421,422,1,0,0,0,422,423,1,0,0,0,423,424,5,50,0,0,424,49,1,0,0,0,
        425,426,5,60,0,0,426,51,1,0,0,0,427,428,3,280,140,0,428,53,1,0,0,
        0,429,430,5,40,0,0,430,431,5,49,0,0,431,432,3,56,28,0,432,433,5,
        50,0,0,433,434,5,56,0,0,434,435,3,62,31,0,435,55,1,0,0,0,436,437,
        5,60,0,0,437,57,1,0,0,0,438,439,5,1,0,0,439,440,5,56,0,0,440,441,
        3,60,30,0,441,442,5,56,0,0,442,443,3,62,31,0,443,59,1,0,0,0,444,
        445,5,64,0,0,445,61,1,0,0,0,446,475,3,226,113,0,447,475,3,220,110,
        0,448,475,3,214,107,0,449,475,3,206,103,0,450,475,3,198,99,0,451,
        475,3,190,95,0,452,475,3,184,92,0,453,475,3,178,89,0,454,475,3,170,
        85,0,455,475,3,162,81,0,456,475,3,154,77,0,457,475,3,148,74,0,458,
        475,3,142,71,0,459,475,3,136,68,0,460,475,3,132,66,0,461,475,3,128,
        64,0,462,475,3,122,61,0,463,475,3,116,58,0,464,475,3,110,55,0,465,
        475,3,106,53,0,466,475,3,102,51,0,467,475,3,98,49,0,468,475,3,92,
        46,0,469,475,3,88,44,0,470,475,3,84,42,0,471,475,3,78,39,0,472,475,
        3,70,35,0,473,475,3,64,32,0,474,446,1,0,0,0,474,447,1,0,0,0,474,
        448,1,0,0,0,474,449,1,0,0,0,474,450,1,0,0,0,474,451,1,0,0,0,474,
        452,1,0,0,0,474,453,1,0,0,0,474,454,1,0,0,0,474,455,1,0,0,0,474,
        456,1,0,0,0,474,457,1,0,0,0,474,458,1,0,0,0,474,459,1,0,0,0,474,
        460,1,0,0,0,474,461,1,0,0,0,474,462,1,0,0,0,474,463,1,0,0,0,474,
        464,1,0,0,0,474,465,1,0,0,0,474,466,1,0,0,0,474,467,1,0,0,0,474,
        468,1,0,0,0,474,469,1,0,0,0,474,470,1,0,0,0,474,471,1,0,0,0,474,
        472,1,0,0,0,474,473,1,0,0,0,475,63,1,0,0,0,476,477,5,39,0,0,477,
        483,5,49,0,0,478,481,3,68,34,0,479,480,5,54,0,0,480,482,3,66,33,
        0,481,479,1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,478,1,0,0,
        0,483,484,1,0,0,0,484,485,1,0,0,0,485,487,5,50,0,0,486,488,3,232,
        116,0,487,486,1,0,0,0,487,488,1,0,0,0,488,65,1,0,0,0,489,490,3,280,
        140,0,490,67,1,0,0,0,491,492,3,292,146,0,492,69,1,0,0,0,493,494,
        5,38,0,0,494,495,5,49,0,0,495,502,3,72,36,0,496,497,5,54,0,0,497,
        500,3,74,37,0,498,499,5,54,0,0,499,501,3,76,38,0,500,498,1,0,0,0,
        500,501,1,0,0,0,501,503,1,0,0,0,502,496,1,0,0,0,502,503,1,0,0,0,
        503,504,1,0,0,0,504,505,5,50,0,0,505,71,1,0,0,0,506,507,5,60,0,0,
        507,73,1,0,0,0,508,509,3,280,140,0,509,75,1,0,0,0,510,511,3,280,
        140,0,511,77,1,0,0,0,512,513,5,37,0,0,513,519,5,49,0,0,514,517,3,
        82,41,0,515,516,5,54,0,0,516,518,3,80,40,0,517,515,1,0,0,0,517,518,
        1,0,0,0,518,520,1,0,0,0,519,514,1,0,0,0,519,520,1,0,0,0,520,521,
        1,0,0,0,521,522,5,50,0,0,522,79,1,0,0,0,523,524,3,280,140,0,524,
        81,1,0,0,0,525,526,3,280,140,0,526,83,1,0,0,0,527,528,5,36,0,0,528,
        530,5,49,0,0,529,531,3,86,43,0,530,529,1,0,0,0,530,531,1,0,0,0,531,
        532,1,0,0,0,532,533,5,50,0,0,533,85,1,0,0,0,534,535,3,280,140,0,
        535,87,1,0,0,0,536,537,5,35,0,0,537,539,5,49,0,0,538,540,3,90,45,
        0,539,538,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,5,50,0,
        0,542,89,1,0,0,0,543,544,3,280,140,0,544,91,1,0,0,0,545,546,5,34,
        0,0,546,547,5,49,0,0,547,550,3,96,48,0,548,549,5,54,0,0,549,551,
        3,94,47,0,550,548,1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,552,553,
        5,50,0,0,553,93,1,0,0,0,554,555,3,280,140,0,555,95,1,0,0,0,556,571,
        5,60,0,0,557,558,5,47,0,0,558,563,5,60,0,0,559,560,5,54,0,0,560,
        562,5,60,0,0,561,559,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,563,
        564,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,566,568,5,54,0,0,567,
        566,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,571,5,48,0,0,570,
        556,1,0,0,0,570,557,1,0,0,0,571,97,1,0,0,0,572,573,5,33,0,0,573,
        575,5,49,0,0,574,576,3,100,50,0,575,574,1,0,0,0,575,576,1,0,0,0,
        576,577,1,0,0,0,577,578,5,50,0,0,578,99,1,0,0,0,579,580,3,280,140,
        0,580,101,1,0,0,0,581,582,5,32,0,0,582,584,5,49,0,0,583,585,3,104,
        52,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,5,50,
        0,0,587,103,1,0,0,0,588,589,3,280,140,0,589,105,1,0,0,0,590,591,
        5,31,0,0,591,593,5,49,0,0,592,594,3,108,54,0,593,592,1,0,0,0,593,
        594,1,0,0,0,594,595,1,0,0,0,595,596,5,50,0,0,596,107,1,0,0,0,597,
        598,3,280,140,0,598,109,1,0,0,0,599,600,5,30,0,0,600,601,5,49,0,
        0,601,604,3,114,57,0,602,603,5,54,0,0,603,605,3,112,56,0,604,602,
        1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,607,5,50,0,0,607,111,
        1,0,0,0,608,609,3,280,140,0,609,113,1,0,0,0,610,611,5,60,0,0,611,
        115,1,0,0,0,612,613,5,29,0,0,613,614,5,49,0,0,614,617,3,120,60,0,
        615,616,5,54,0,0,616,618,3,118,59,0,617,615,1,0,0,0,617,618,1,0,
        0,0,618,619,1,0,0,0,619,620,5,50,0,0,620,117,1,0,0,0,621,622,3,280,
        140,0,622,119,1,0,0,0,623,624,3,292,146,0,624,121,1,0,0,0,625,626,
        5,28,0,0,626,627,5,49,0,0,627,630,3,126,63,0,628,629,5,54,0,0,629,
        631,3,124,62,0,630,628,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,
        633,5,50,0,0,633,123,1,0,0,0,634,635,3,280,140,0,635,125,1,0,0,0,
        636,640,5,60,0,0,637,640,3,280,140,0,638,640,3,292,146,0,639,636,
        1,0,0,0,639,637,1,0,0,0,639,638,1,0,0,0,640,127,1,0,0,0,641,642,
        5,27,0,0,642,644,5,49,0,0,643,645,3,130,65,0,644,643,1,0,0,0,644,
        645,1,0,0,0,645,646,1,0,0,0,646,647,5,50,0,0,647,129,1,0,0,0,648,
        649,3,280,140,0,649,131,1,0,0,0,650,651,5,26,0,0,651,653,5,49,0,
        0,652,654,3,134,67,0,653,652,1,0,0,0,653,654,1,0,0,0,654,655,1,0,
        0,0,655,656,5,50,0,0,656,133,1,0,0,0,657,658,3,280,140,0,658,135,
        1,0,0,0,659,660,5,25,0,0,660,661,5,49,0,0,661,664,3,138,69,0,662,
        663,5,54,0,0,663,665,3,140,70,0,664,662,1,0,0,0,664,665,1,0,0,0,
        665,666,1,0,0,0,666,667,5,50,0,0,667,137,1,0,0,0,668,669,5,60,0,
        0,669,139,1,0,0,0,670,671,3,280,140,0,671,141,1,0,0,0,672,673,5,
        24,0,0,673,679,5,49,0,0,674,677,3,144,72,0,675,676,5,54,0,0,676,
        678,3,146,73,0,677,675,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,
        674,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,682,5,50,0,0,682,
        143,1,0,0,0,683,684,3,280,140,0,684,145,1,0,0,0,685,686,3,280,140,
        0,686,147,1,0,0,0,687,688,5,23,0,0,688,694,5,49,0,0,689,692,3,150,
        75,0,690,691,5,54,0,0,691,693,3,152,76,0,692,690,1,0,0,0,692,693,
        1,0,0,0,693,695,1,0,0,0,694,689,1,0,0,0,694,695,1,0,0,0,695,696,
        1,0,0,0,696,697,5,50,0,0,697,149,1,0,0,0,698,699,3,280,140,0,699,
        151,1,0,0,0,700,701,3,280,140,0,701,153,1,0,0,0,702,703,5,22,0,0,
        703,704,5,49,0,0,704,705,3,156,78,0,705,706,5,54,0,0,706,709,3,158,
        79,0,707,708,5,54,0,0,708,710,3,160,80,0,709,707,1,0,0,0,709,710,
        1,0,0,0,710,711,1,0,0,0,711,712,5,50,0,0,712,155,1,0,0,0,713,714,
        3,280,140,0,714,157,1,0,0,0,715,716,3,196,98,0,716,159,1,0,0,0,717,
        718,3,280,140,0,718,161,1,0,0,0,719,720,5,21,0,0,720,721,5,49,0,
        0,721,722,3,164,82,0,722,723,5,54,0,0,723,726,3,166,83,0,724,725,
        5,54,0,0,725,727,3,168,84,0,726,724,1,0,0,0,726,727,1,0,0,0,727,
        728,1,0,0,0,728,729,5,50,0,0,729,163,1,0,0,0,730,731,3,280,140,0,
        731,165,1,0,0,0,732,735,3,280,140,0,733,735,3,292,146,0,734,732,
        1,0,0,0,734,733,1,0,0,0,735,167,1,0,0,0,736,737,3,280,140,0,737,
        169,1,0,0,0,738,739,5,20,0,0,739,740,5,49,0,0,740,741,3,172,86,0,
        741,742,5,54,0,0,742,745,3,174,87,0,743,744,5,54,0,0,744,746,3,176,
        88,0,745,743,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,748,5,50,
        0,0,748,171,1,0,0,0,749,750,3,280,140,0,750,173,1,0,0,0,751,754,
        3,292,146,0,752,754,3,280,140,0,753,751,1,0,0,0,753,752,1,0,0,0,
        754,175,1,0,0,0,755,756,3,280,140,0,756,177,1,0,0,0,757,758,5,19,
        0,0,758,759,5,49,0,0,759,762,3,180,90,0,760,761,5,54,0,0,761,763,
        3,182,91,0,762,760,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,765,
        5,50,0,0,765,179,1,0,0,0,766,767,3,292,146,0,767,181,1,0,0,0,768,
        769,3,280,140,0,769,183,1,0,0,0,770,771,5,18,0,0,771,772,5,49,0,
        0,772,775,3,186,93,0,773,774,5,54,0,0,774,776,3,188,94,0,775,773,
        1,0,0,0,775,776,1,0,0,0,776,777,1,0,0,0,777,778,5,50,0,0,778,185,
        1,0,0,0,779,780,5,47,0,0,780,785,3,196,98,0,781,782,5,54,0,0,782,
        784,3,196,98,0,783,781,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,
        786,1,0,0,0,786,789,1,0,0,0,787,785,1,0,0,0,788,790,5,54,0,0,789,
        788,1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,792,5,48,0,0,792,
        187,1,0,0,0,793,794,3,280,140,0,794,189,1,0,0,0,795,796,5,17,0,0,
        796,797,5,49,0,0,797,800,3,192,96,0,798,799,5,54,0,0,799,801,3,194,
        97,0,800,798,1,0,0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,803,5,50,
        0,0,803,191,1,0,0,0,804,805,3,196,98,0,805,193,1,0,0,0,806,807,3,
        280,140,0,807,195,1,0,0,0,808,811,3,280,140,0,809,811,3,292,146,
        0,810,808,1,0,0,0,810,809,1,0,0,0,811,197,1,0,0,0,812,813,5,6,0,
        0,813,814,5,49,0,0,814,815,3,200,100,0,815,816,5,54,0,0,816,819,
        3,202,101,0,817,818,5,54,0,0,818,820,3,204,102,0,819,817,1,0,0,0,
        819,820,1,0,0,0,820,821,1,0,0,0,821,822,5,50,0,0,822,199,1,0,0,0,
        823,824,3,280,140,0,824,201,1,0,0,0,825,826,3,280,140,0,826,203,
        1,0,0,0,827,828,3,280,140,0,828,205,1,0,0,0,829,830,5,5,0,0,830,
        831,5,49,0,0,831,832,3,208,104,0,832,833,5,54,0,0,833,836,3,210,
        105,0,834,835,5,54,0,0,835,837,3,212,106,0,836,834,1,0,0,0,836,837,
        1,0,0,0,837,838,1,0,0,0,838,839,5,50,0,0,839,207,1,0,0,0,840,841,
        3,280,140,0,841,209,1,0,0,0,842,843,3,280,140,0,843,211,1,0,0,0,
        844,845,3,280,140,0,845,213,1,0,0,0,846,847,5,4,0,0,847,848,5,49,
        0,0,848,851,3,216,108,0,849,850,5,54,0,0,850,852,3,218,109,0,851,
        849,1,0,0,0,851,852,1,0,0,0,852,853,1,0,0,0,853,854,5,50,0,0,854,
        215,1,0,0,0,855,856,3,280,140,0,856,217,1,0,0,0,857,858,3,280,140,
        0,858,219,1,0,0,0,859,860,5,3,0,0,860,866,5,49,0,0,861,864,3,222,
        111,0,862,863,5,54,0,0,863,865,3,224,112,0,864,862,1,0,0,0,864,865,
        1,0,0,0,865,867,1,0,0,0,866,861,1,0,0,0,866,867,1,0,0,0,867,868,
        1,0,0,0,868,869,5,50,0,0,869,221,1,0,0,0,870,871,3,280,140,0,871,
        223,1,0,0,0,872,873,3,280,140,0,873,225,1,0,0,0,874,875,5,2,0,0,
        875,881,5,49,0,0,876,879,3,228,114,0,877,878,5,54,0,0,878,880,3,
        230,115,0,879,877,1,0,0,0,879,880,1,0,0,0,880,882,1,0,0,0,881,876,
        1,0,0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,887,5,50,0,0,884,886,
        3,236,118,0,885,884,1,0,0,0,886,889,1,0,0,0,887,885,1,0,0,0,887,
        888,1,0,0,0,888,891,1,0,0,0,889,887,1,0,0,0,890,892,3,232,116,0,
        891,890,1,0,0,0,891,892,1,0,0,0,892,227,1,0,0,0,893,894,3,280,140,
        0,894,229,1,0,0,0,895,896,3,280,140,0,896,231,1,0,0,0,897,898,5,
        56,0,0,898,899,5,14,0,0,899,901,5,49,0,0,900,902,3,234,117,0,901,
        900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,904,5,50,0,0,904,
        233,1,0,0,0,905,909,5,60,0,0,906,909,3,284,142,0,907,909,3,280,140,
        0,908,905,1,0,0,0,908,906,1,0,0,0,908,907,1,0,0,0,909,235,1,0,0,
        0,910,911,5,56,0,0,911,929,3,238,119,0,912,913,5,56,0,0,913,929,
        3,242,121,0,914,915,5,56,0,0,915,929,3,246,123,0,916,917,5,56,0,
        0,917,929,3,250,125,0,918,919,5,56,0,0,919,929,3,254,127,0,920,921,
        5,56,0,0,921,929,3,258,129,0,922,923,5,56,0,0,923,929,3,262,131,
        0,924,925,5,56,0,0,925,929,3,266,133,0,926,927,5,56,0,0,927,929,
        3,270,135,0,928,910,1,0,0,0,928,912,1,0,0,0,928,914,1,0,0,0,928,
        916,1,0,0,0,928,918,1,0,0,0,928,920,1,0,0,0,928,922,1,0,0,0,928,
        924,1,0,0,0,928,926,1,0,0,0,929,237,1,0,0,0,930,931,5,16,0,0,931,
        932,5,49,0,0,932,933,3,240,120,0,933,934,5,50,0,0,934,239,1,0,0,
        0,935,936,3,294,147,0,936,241,1,0,0,0,937,938,5,13,0,0,938,939,5,
        49,0,0,939,940,3,244,122,0,940,941,5,50,0,0,941,243,1,0,0,0,942,
        943,3,294,147,0,943,245,1,0,0,0,944,945,5,9,0,0,945,946,5,49,0,0,
        946,947,3,248,124,0,947,948,5,50,0,0,948,247,1,0,0,0,949,950,3,280,
        140,0,950,249,1,0,0,0,951,952,5,10,0,0,952,953,5,49,0,0,953,954,
        3,252,126,0,954,955,5,50,0,0,955,251,1,0,0,0,956,957,3,280,140,0,
        957,253,1,0,0,0,958,959,5,11,0,0,959,960,5,49,0,0,960,961,3,256,
        128,0,961,962,5,50,0,0,962,255,1,0,0,0,963,964,3,280,140,0,964,257,
        1,0,0,0,965,966,5,15,0,0,966,967,5,49,0,0,967,968,3,260,130,0,968,
        969,5,50,0,0,969,259,1,0,0,0,970,973,3,280,140,0,971,973,5,60,0,
        0,972,970,1,0,0,0,972,971,1,0,0,0,973,261,1,0,0,0,974,975,5,8,0,
        0,975,976,5,49,0,0,976,977,3,264,132,0,977,978,5,50,0,0,978,263,
        1,0,0,0,979,980,3,284,142,0,980,265,1,0,0,0,981,982,5,7,0,0,982,
        983,5,49,0,0,983,984,3,268,134,0,984,985,5,50,0,0,985,267,1,0,0,
        0,986,987,3,284,142,0,987,269,1,0,0,0,988,989,5,12,0,0,989,990,5,
        49,0,0,990,993,3,272,136,0,991,992,5,54,0,0,992,994,3,274,137,0,
        993,991,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,996,5,50,0,0,
        996,271,1,0,0,0,997,998,3,278,139,0,998,273,1,0,0,0,999,1003,3,294,
        147,0,1000,1003,5,60,0,0,1001,1003,3,280,140,0,1002,999,1,0,0,0,
        1002,1000,1,0,0,0,1002,1001,1,0,0,0,1003,275,1,0,0,0,1004,1005,7,
        0,0,0,1005,277,1,0,0,0,1006,1008,3,290,145,0,1007,1006,1,0,0,0,1007,
        1008,1,0,0,0,1008,279,1,0,0,0,1009,1010,5,51,0,0,1010,1015,3,282,
        141,0,1011,1012,5,54,0,0,1012,1014,3,282,141,0,1013,1011,1,0,0,0,
        1014,1017,1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,1019,
        1,0,0,0,1017,1015,1,0,0,0,1018,1020,5,54,0,0,1019,1018,1,0,0,0,1019,
        1020,1,0,0,0,1020,1021,1,0,0,0,1021,1022,5,52,0,0,1022,1026,1,0,
        0,0,1023,1024,5,51,0,0,1024,1026,5,52,0,0,1025,1009,1,0,0,0,1025,
        1023,1,0,0,0,1026,281,1,0,0,0,1027,1028,3,286,143,0,1028,1029,5,
        53,0,0,1029,1030,3,290,145,0,1030,283,1,0,0,0,1031,1032,7,1,0,0,
        1032,285,1,0,0,0,1033,1039,5,60,0,0,1034,1039,3,288,144,0,1035,1039,
        5,62,0,0,1036,1039,3,284,142,0,1037,1039,5,59,0,0,1038,1033,1,0,
        0,0,1038,1034,1,0,0,0,1038,1035,1,0,0,0,1038,1036,1,0,0,0,1038,1037,
        1,0,0,0,1039,287,1,0,0,0,1040,1043,5,64,0,0,1041,1043,3,276,138,
        0,1042,1040,1,0,0,0,1042,1041,1,0,0,0,1043,289,1,0,0,0,1044,1051,
        5,60,0,0,1045,1051,3,294,147,0,1046,1051,3,280,140,0,1047,1051,3,
        292,146,0,1048,1051,3,284,142,0,1049,1051,5,59,0,0,1050,1044,1,0,
        0,0,1050,1045,1,0,0,0,1050,1046,1,0,0,0,1050,1047,1,0,0,0,1050,1048,
        1,0,0,0,1050,1049,1,0,0,0,1051,291,1,0,0,0,1052,1053,5,47,0,0,1053,
        1058,3,290,145,0,1054,1055,5,54,0,0,1055,1057,3,290,145,0,1056,1054,
        1,0,0,0,1057,1060,1,0,0,0,1058,1056,1,0,0,0,1058,1059,1,0,0,0,1059,
        1062,1,0,0,0,1060,1058,1,0,0,0,1061,1063,5,54,0,0,1062,1061,1,0,
        0,0,1062,1063,1,0,0,0,1063,1064,1,0,0,0,1064,1065,5,48,0,0,1065,
        1069,1,0,0,0,1066,1067,5,47,0,0,1067,1069,5,48,0,0,1068,1052,1,0,
        0,0,1068,1066,1,0,0,0,1069,293,1,0,0,0,1070,1072,5,63,0,0,1071,1070,
        1,0,0,0,1071,1072,1,0,0,0,1072,1073,1,0,0,0,1073,1074,7,2,0,0,1074,
        295,1,0,0,0,78,297,303,309,313,328,337,346,353,364,379,395,408,421,
        474,481,483,487,500,502,517,519,530,539,550,563,567,570,575,584,
        593,604,617,630,639,644,653,664,677,679,692,694,709,726,734,745,
        753,762,775,785,789,800,810,819,836,851,864,866,879,881,887,891,
        901,908,928,972,993,1002,1007,1015,1019,1025,1038,1042,1050,1058,
        1062,1068,1071
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!MongoParser.__ATN) {
            MongoParser.__ATN = new antlr.ATNDeserializer().deserialize(MongoParser._serializedATN);
        }

        return MongoParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(MongoParser.literalNames, MongoParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return MongoParser.vocabulary;
    }

    private static readonly decisionsToDFA = MongoParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(MongoParser.EOF, 0)!;
    }
    public commands(): CommandsContext | null {
        return this.getRuleContext(0, CommandsContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_root;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitRoot) {
            return visitor.visitRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public command(): CommandContext {
        return this.getRuleContext(0, CommandContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SEMICOLON, 0);
    }
    public commands(): CommandsContext | null {
        return this.getRuleContext(0, CommandsContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_commands;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCommands) {
            return visitor.visitCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collectionOperation(): CollectionOperationContext | null {
        return this.getRuleContext(0, CollectionOperationContext);
    }
    public databaseOperation(): DatabaseOperationContext | null {
        return this.getRuleContext(0, DatabaseOperationContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_command;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCommand) {
            return visitor.visitCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseOperationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DB(): antlr.TerminalNode {
        return this.getToken(MongoParser.DB, 0)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DOT, 0)!;
    }
    public databaseMethod(): DatabaseMethodContext {
        return this.getRuleContext(0, DatabaseMethodContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseOperation;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseOperation) {
            return visitor.visitDatabaseOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public databaseCollectionMethod(): DatabaseCollectionMethodContext | null {
        return this.getRuleContext(0, DatabaseCollectionMethodContext);
    }
    public databaseCreateCollectionMethod(): DatabaseCreateCollectionMethodContext | null {
        return this.getRuleContext(0, DatabaseCreateCollectionMethodContext);
    }
    public databaseCommandMethod(): DatabaseCommandMethodContext | null {
        return this.getRuleContext(0, DatabaseCommandMethodContext);
    }
    public aggregateMethod(): AggregateMethodContext | null {
        return this.getRuleContext(0, AggregateMethodContext);
    }
    public databaseListCollectionsMethod(): DatabaseListCollectionsMethodContext | null {
        return this.getRuleContext(0, DatabaseListCollectionsMethodContext);
    }
    public databaseRenameCollectionMethod(): DatabaseRenameCollectionMethodContext | null {
        return this.getRuleContext(0, DatabaseRenameCollectionMethodContext);
    }
    public databaseDropCollectionMethod(): DatabaseDropCollectionMethodContext | null {
        return this.getRuleContext(0, DatabaseDropCollectionMethodContext);
    }
    public databaseDropDatabaseMethod(): DatabaseDropDatabaseMethodContext | null {
        return this.getRuleContext(0, DatabaseDropDatabaseMethodContext);
    }
    public databaseCreateIndexMethod(): DatabaseCreateIndexMethodContext | null {
        return this.getRuleContext(0, DatabaseCreateIndexMethodContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseMethod) {
            return visitor.visitDatabaseMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateIndexMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_INDEX(): antlr.TerminalNode {
        return this.getToken(MongoParser.CREATE_INDEX, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseCreateIndexArgument1(): DatabaseCreateIndexArgument1Context {
        return this.getRuleContext(0, DatabaseCreateIndexArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public databaseCreateIndexArgument2(): DatabaseCreateIndexArgument2Context {
        return this.getRuleContext(0, DatabaseCreateIndexArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public databaseCreateIndexArgument3(): DatabaseCreateIndexArgument3Context | null {
        return this.getRuleContext(0, DatabaseCreateIndexArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateIndexMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateIndexMethod) {
            return visitor.visitDatabaseCreateIndexMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateIndexArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateIndexArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateIndexArgument3) {
            return visitor.visitDatabaseCreateIndexArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateIndexArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateIndexArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateIndexArgument2) {
            return visitor.visitDatabaseCreateIndexArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateIndexArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateIndexArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateIndexArgument1) {
            return visitor.visitDatabaseCreateIndexArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseDropDatabaseMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_DATABASE(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP_DATABASE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public databaseDropDatabaseArgument(): DatabaseDropDatabaseArgumentContext | null {
        return this.getRuleContext(0, DatabaseDropDatabaseArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseDropDatabaseMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseDropDatabaseMethod) {
            return visitor.visitDatabaseDropDatabaseMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseDropDatabaseArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseDropDatabaseArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseDropDatabaseArgument) {
            return visitor.visitDatabaseDropDatabaseArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseDropCollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_COLLECTION(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP_COLLECTION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseDropCollectionArgument1(): DatabaseDropCollectionArgument1Context {
        return this.getRuleContext(0, DatabaseDropCollectionArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseDropCollectionArgument2(): DatabaseDropCollectionArgument2Context | null {
        return this.getRuleContext(0, DatabaseDropCollectionArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseDropCollectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseDropCollectionMethod) {
            return visitor.visitDatabaseDropCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseDropCollectionArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseDropCollectionArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseDropCollectionArgument1) {
            return visitor.visitDatabaseDropCollectionArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseDropCollectionArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseDropCollectionArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseDropCollectionArgument2) {
            return visitor.visitDatabaseDropCollectionArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRenameCollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME_COLLECTION(): antlr.TerminalNode {
        return this.getToken(MongoParser.RENAME_COLLECTION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseRenameCollectionArgument1(): DatabaseRenameCollectionArgument1Context {
        return this.getRuleContext(0, DatabaseRenameCollectionArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public databaseRenameCollectionArgument2(): DatabaseRenameCollectionArgument2Context {
        return this.getRuleContext(0, DatabaseRenameCollectionArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public databaseRenameCollectionArgument3(): DatabaseRenameCollectionArgument3Context | null {
        return this.getRuleContext(0, DatabaseRenameCollectionArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRenameCollectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRenameCollectionMethod) {
            return visitor.visitDatabaseRenameCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRenameCollectionArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRenameCollectionArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRenameCollectionArgument1) {
            return visitor.visitDatabaseRenameCollectionArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRenameCollectionArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRenameCollectionArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRenameCollectionArgument2) {
            return visitor.visitDatabaseRenameCollectionArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRenameCollectionArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRenameCollectionArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRenameCollectionArgument3) {
            return visitor.visitDatabaseRenameCollectionArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseListCollectionsMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIST_COLLECTIONS(): antlr.TerminalNode {
        return this.getToken(MongoParser.LIST_COLLECTIONS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public databaseListCollectionsArgument1(): DatabaseListCollectionsArgument1Context | null {
        return this.getRuleContext(0, DatabaseListCollectionsArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseListCollectionsArgument2(): DatabaseListCollectionsArgument2Context | null {
        return this.getRuleContext(0, DatabaseListCollectionsArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseListCollectionsMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseListCollectionsMethod) {
            return visitor.visitDatabaseListCollectionsMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseListCollectionsArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseListCollectionsArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseListCollectionsArgument1) {
            return visitor.visitDatabaseListCollectionsArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseListCollectionsArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseListCollectionsArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseListCollectionsArgument2) {
            return visitor.visitDatabaseListCollectionsArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCommandMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMAND(): antlr.TerminalNode {
        return this.getToken(MongoParser.COMMAND, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseCommandArgument1(): DatabaseCommandArgument1Context {
        return this.getRuleContext(0, DatabaseCommandArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseCommandArgument2(): DatabaseCommandArgument2Context | null {
        return this.getRuleContext(0, DatabaseCommandArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCommandMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCommandMethod) {
            return visitor.visitDatabaseCommandMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCommandArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCommandArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCommandArgument1) {
            return visitor.visitDatabaseCommandArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCommandArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCommandArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCommandArgument2) {
            return visitor.visitDatabaseCommandArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateCollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_COLLECTION(): antlr.TerminalNode {
        return this.getToken(MongoParser.CREATE_COLLECTION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseCreateCollectionArgument1(): DatabaseCreateCollectionArgument1Context {
        return this.getRuleContext(0, DatabaseCreateCollectionArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseCreateCollectionArgument2(): DatabaseCreateCollectionArgument2Context | null {
        return this.getRuleContext(0, DatabaseCreateCollectionArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateCollectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateCollectionMethod) {
            return visitor.visitDatabaseCreateCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateCollectionArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateCollectionArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateCollectionArgument1) {
            return visitor.visitDatabaseCreateCollectionArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateCollectionArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateCollectionArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateCollectionArgument2) {
            return visitor.visitDatabaseCreateCollectionArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLECTION(): antlr.TerminalNode {
        return this.getToken(MongoParser.COLLECTION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public quotedCollectionName(): QuotedCollectionNameContext {
        return this.getRuleContext(0, QuotedCollectionNameContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DOT, 0)!;
    }
    public collectionMethod(): CollectionMethodContext {
        return this.getRuleContext(0, CollectionMethodContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCollectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCollectionMethod) {
            return visitor.visitDatabaseCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotedCollectionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_quotedCollectionName;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitQuotedCollectionName) {
            return visitor.visitQuotedCollectionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionOperationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DB(): antlr.TerminalNode {
        return this.getToken(MongoParser.DB, 0)!;
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.DOT);
    	} else {
    		return this.getToken(MongoParser.DOT, i);
    	}
    }
    public collectionName(): CollectionNameContext {
        return this.getRuleContext(0, CollectionNameContext)!;
    }
    public collectionMethod(): CollectionMethodContext {
        return this.getRuleContext(0, CollectionMethodContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionOperation;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionOperation) {
            return visitor.visitCollectionOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(MongoParser.IDENTIFIER, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionName;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionName) {
            return visitor.visitCollectionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collectionFindMethod(): CollectionFindMethodContext | null {
        return this.getRuleContext(0, CollectionFindMethodContext);
    }
    public collectionFindOneMethod(): CollectionFindOneMethodContext | null {
        return this.getRuleContext(0, CollectionFindOneMethodContext);
    }
    public collectionFindOneAndDeleteMethod(): CollectionFindOneAndDeleteMethodContext | null {
        return this.getRuleContext(0, CollectionFindOneAndDeleteMethodContext);
    }
    public collectionFindOneAndReplaceMethod(): CollectionFindOneAndReplaceMethodContext | null {
        return this.getRuleContext(0, CollectionFindOneAndReplaceMethodContext);
    }
    public collectionFindOneAndUpdateMethod(): CollectionFindOneAndUpdateMethodContext | null {
        return this.getRuleContext(0, CollectionFindOneAndUpdateMethodContext);
    }
    public collectionInsertOneMethod(): CollectionInsertOneMethodContext | null {
        return this.getRuleContext(0, CollectionInsertOneMethodContext);
    }
    public collectionInsertManyMethod(): CollectionInsertManyMethodContext | null {
        return this.getRuleContext(0, CollectionInsertManyMethodContext);
    }
    public collectionBulkWriteMethod(): CollectionBulkWriteMethodContext | null {
        return this.getRuleContext(0, CollectionBulkWriteMethodContext);
    }
    public collectionUpdateOneMethod(): CollectionUpdateOneMethodContext | null {
        return this.getRuleContext(0, CollectionUpdateOneMethodContext);
    }
    public collectionUpdateManyMethod(): CollectionUpdateManyMethodContext | null {
        return this.getRuleContext(0, CollectionUpdateManyMethodContext);
    }
    public collectionReplaceOneMethod(): CollectionReplaceOneMethodContext | null {
        return this.getRuleContext(0, CollectionReplaceOneMethodContext);
    }
    public collectionDeleteOneMethod(): CollectionDeleteOneMethodContext | null {
        return this.getRuleContext(0, CollectionDeleteOneMethodContext);
    }
    public collectionDeleteManyMethod(): CollectionDeleteManyMethodContext | null {
        return this.getRuleContext(0, CollectionDeleteManyMethodContext);
    }
    public collectionRenameMethod(): CollectionRenameMethodContext | null {
        return this.getRuleContext(0, CollectionRenameMethodContext);
    }
    public collectionDropMethod(): CollectionDropMethodContext | null {
        return this.getRuleContext(0, CollectionDropMethodContext);
    }
    public collectionIsCappedMethod(): CollectionIsCappedMethodContext | null {
        return this.getRuleContext(0, CollectionIsCappedMethodContext);
    }
    public collectionCreateIndexMethod(): CollectionCreateIndexMethodContext | null {
        return this.getRuleContext(0, CollectionCreateIndexMethodContext);
    }
    public collectionCreateIndexesMethod(): CollectionCreateIndexesMethodContext | null {
        return this.getRuleContext(0, CollectionCreateIndexesMethodContext);
    }
    public collectionDropIndexMethod(): CollectionDropIndexMethodContext | null {
        return this.getRuleContext(0, CollectionDropIndexMethodContext);
    }
    public collectionDropIndexesMethod(): CollectionDropIndexesMethodContext | null {
        return this.getRuleContext(0, CollectionDropIndexesMethodContext);
    }
    public collectionListIndexesMethod(): CollectionListIndexesMethodContext | null {
        return this.getRuleContext(0, CollectionListIndexesMethodContext);
    }
    public collectionIndexesMethod(): CollectionIndexesMethodContext | null {
        return this.getRuleContext(0, CollectionIndexesMethodContext);
    }
    public collectionIndexExistsMethod(): CollectionIndexExistsMethodContext | null {
        return this.getRuleContext(0, CollectionIndexExistsMethodContext);
    }
    public collectionIndexInformationMethod(): CollectionIndexInformationMethodContext | null {
        return this.getRuleContext(0, CollectionIndexInformationMethodContext);
    }
    public collectionEstimatedDocumentCountMethod(): CollectionEstimatedDocumentCountMethodContext | null {
        return this.getRuleContext(0, CollectionEstimatedDocumentCountMethodContext);
    }
    public collectionCountDocumentsMethod(): CollectionCountDocumentsMethodContext | null {
        return this.getRuleContext(0, CollectionCountDocumentsMethodContext);
    }
    public collectionDistinctMethod(): CollectionDistinctMethodContext | null {
        return this.getRuleContext(0, CollectionDistinctMethodContext);
    }
    public aggregateMethod(): AggregateMethodContext | null {
        return this.getRuleContext(0, AggregateMethodContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionMethod) {
            return visitor.visitCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregateMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AGGREGATE(): antlr.TerminalNode {
        return this.getToken(MongoParser.AGGREGATE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public aggregateArgument1(): AggregateArgument1Context | null {
        return this.getRuleContext(0, AggregateArgument1Context);
    }
    public explainMethod(): ExplainMethodContext | null {
        return this.getRuleContext(0, ExplainMethodContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public aggregateArgument2(): AggregateArgument2Context | null {
        return this.getRuleContext(0, AggregateArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_aggregateMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitAggregateMethod) {
            return visitor.visitAggregateMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregateArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_aggregateArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitAggregateArgument2) {
            return visitor.visitAggregateArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregateArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array(): ArrayContext {
        return this.getRuleContext(0, ArrayContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_aggregateArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitAggregateArgument1) {
            return visitor.visitAggregateArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDistinctMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DISTINCT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionDistinctArgument1(): CollectionDistinctArgument1Context {
        return this.getRuleContext(0, CollectionDistinctArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionDistinctArgument2(): CollectionDistinctArgument2Context | null {
        return this.getRuleContext(0, CollectionDistinctArgument2Context);
    }
    public collectionDistinctArgument3(): CollectionDistinctArgument3Context | null {
        return this.getRuleContext(0, CollectionDistinctArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDistinctMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDistinctMethod) {
            return visitor.visitCollectionDistinctMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDistinctArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDistinctArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDistinctArgument1) {
            return visitor.visitCollectionDistinctArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDistinctArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDistinctArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDistinctArgument2) {
            return visitor.visitCollectionDistinctArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDistinctArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDistinctArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDistinctArgument3) {
            return visitor.visitCollectionDistinctArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCountDocumentsMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COUNT_DOCUMENTS(): antlr.TerminalNode {
        return this.getToken(MongoParser.COUNT_DOCUMENTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionCountDocumentsArgument1(): CollectionCountDocumentsArgument1Context | null {
        return this.getRuleContext(0, CollectionCountDocumentsArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionCountDocumentsArgument2(): CollectionCountDocumentsArgument2Context | null {
        return this.getRuleContext(0, CollectionCountDocumentsArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCountDocumentsMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCountDocumentsMethod) {
            return visitor.visitCollectionCountDocumentsMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCountDocumentsArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCountDocumentsArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCountDocumentsArgument2) {
            return visitor.visitCollectionCountDocumentsArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCountDocumentsArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCountDocumentsArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCountDocumentsArgument1) {
            return visitor.visitCollectionCountDocumentsArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionEstimatedDocumentCountMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ESTIMATED_DOCUMENT_COUNT(): antlr.TerminalNode {
        return this.getToken(MongoParser.ESTIMATED_DOCUMENT_COUNT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionEstimatedDocumentCountArgument(): CollectionEstimatedDocumentCountArgumentContext | null {
        return this.getRuleContext(0, CollectionEstimatedDocumentCountArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionEstimatedDocumentCountMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionEstimatedDocumentCountMethod) {
            return visitor.visitCollectionEstimatedDocumentCountMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionEstimatedDocumentCountArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionEstimatedDocumentCountArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionEstimatedDocumentCountArgument) {
            return visitor.visitCollectionEstimatedDocumentCountArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexInformationMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX_INFORMATION(): antlr.TerminalNode {
        return this.getToken(MongoParser.INDEX_INFORMATION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionIndexInformationArgument(): CollectionIndexInformationArgumentContext | null {
        return this.getRuleContext(0, CollectionIndexInformationArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexInformationMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexInformationMethod) {
            return visitor.visitCollectionIndexInformationMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexInformationArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexInformationArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexInformationArgument) {
            return visitor.visitCollectionIndexInformationArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexExistsMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX_EXISTS(): antlr.TerminalNode {
        return this.getToken(MongoParser.INDEX_EXISTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionIndexExistsArgument1(): CollectionIndexExistsArgument1Context {
        return this.getRuleContext(0, CollectionIndexExistsArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionIndexExistsArgument2(): CollectionIndexExistsArgument2Context | null {
        return this.getRuleContext(0, CollectionIndexExistsArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexExistsMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexExistsMethod) {
            return visitor.visitCollectionIndexExistsMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexExistsArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexExistsArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexExistsArgument2) {
            return visitor.visitCollectionIndexExistsArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexExistsArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode[];
    public STRING(i: number): antlr.TerminalNode | null;
    public STRING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.STRING);
    	} else {
    		return this.getToken(MongoParser.STRING, i);
    	}
    }
    public LBRACKET(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LBRACKET, 0);
    }
    public RBRACKET(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RBRACKET, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexExistsArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexExistsArgument1) {
            return visitor.visitCollectionIndexExistsArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionIndexesArgument(): CollectionIndexesArgumentContext | null {
        return this.getRuleContext(0, CollectionIndexesArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexesMethod) {
            return visitor.visitCollectionIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexesArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexesArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexesArgument) {
            return visitor.visitCollectionIndexesArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionListIndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIST_INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.LIST_INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionListIndexesArgument(): CollectionListIndexesArgumentContext | null {
        return this.getRuleContext(0, CollectionListIndexesArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionListIndexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionListIndexesMethod) {
            return visitor.visitCollectionListIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionListIndexesArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionListIndexesArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionListIndexesArgument) {
            return visitor.visitCollectionListIndexesArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropIndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP_INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionDropIndexesArgument(): CollectionDropIndexesArgumentContext | null {
        return this.getRuleContext(0, CollectionDropIndexesArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropIndexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropIndexesMethod) {
            return visitor.visitCollectionDropIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropIndexesArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropIndexesArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropIndexesArgument) {
            return visitor.visitCollectionDropIndexesArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropIndexMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_INDEX(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP_INDEX, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionDropIndexArgument1(): CollectionDropIndexArgument1Context {
        return this.getRuleContext(0, CollectionDropIndexArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionDropIndexArgument2(): CollectionDropIndexArgument2Context | null {
        return this.getRuleContext(0, CollectionDropIndexArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropIndexMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropIndexMethod) {
            return visitor.visitCollectionDropIndexMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropIndexArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropIndexArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropIndexArgument2) {
            return visitor.visitCollectionDropIndexArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropIndexArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropIndexArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropIndexArgument1) {
            return visitor.visitCollectionDropIndexArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.CREATE_INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionCreateIndexesArgument1(): CollectionCreateIndexesArgument1Context {
        return this.getRuleContext(0, CollectionCreateIndexesArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionCreateIndexesArgument2(): CollectionCreateIndexesArgument2Context | null {
        return this.getRuleContext(0, CollectionCreateIndexesArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexesMethod) {
            return visitor.visitCollectionCreateIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexesArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexesArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexesArgument2) {
            return visitor.visitCollectionCreateIndexesArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexesArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array(): ArrayContext {
        return this.getRuleContext(0, ArrayContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexesArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexesArgument1) {
            return visitor.visitCollectionCreateIndexesArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_INDEX(): antlr.TerminalNode {
        return this.getToken(MongoParser.CREATE_INDEX, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionCreateIndexArgument1(): CollectionCreateIndexArgument1Context {
        return this.getRuleContext(0, CollectionCreateIndexArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionCreateIndexArgument2(): CollectionCreateIndexArgument2Context | null {
        return this.getRuleContext(0, CollectionCreateIndexArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexMethod) {
            return visitor.visitCollectionCreateIndexMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexArgument2) {
            return visitor.visitCollectionCreateIndexArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexArgument1) {
            return visitor.visitCollectionCreateIndexArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIsCappedMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS_CAPPED(): antlr.TerminalNode {
        return this.getToken(MongoParser.IS_CAPPED, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionIsCappedArgument(): CollectionIsCappedArgumentContext | null {
        return this.getRuleContext(0, CollectionIsCappedArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIsCappedMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIsCappedMethod) {
            return visitor.visitCollectionIsCappedMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIsCappedArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIsCappedArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIsCappedArgument) {
            return visitor.visitCollectionIsCappedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionDropArgument(): CollectionDropArgumentContext | null {
        return this.getRuleContext(0, CollectionDropArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropMethod) {
            return visitor.visitCollectionDropMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropArgument) {
            return visitor.visitCollectionDropArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionRenameMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(MongoParser.RENAME, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionRenameArgument1(): CollectionRenameArgument1Context {
        return this.getRuleContext(0, CollectionRenameArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionRenameArgument2(): CollectionRenameArgument2Context | null {
        return this.getRuleContext(0, CollectionRenameArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionRenameMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionRenameMethod) {
            return visitor.visitCollectionRenameMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionRenameArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionRenameArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionRenameArgument1) {
            return visitor.visitCollectionRenameArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionRenameArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionRenameArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionRenameArgument2) {
            return visitor.visitCollectionRenameArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteManyMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE_MANY(): antlr.TerminalNode {
        return this.getToken(MongoParser.DELETE_MANY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionDeleteManyArgument1(): CollectionDeleteManyArgument1Context | null {
        return this.getRuleContext(0, CollectionDeleteManyArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionDeleteManyArgument2(): CollectionDeleteManyArgument2Context | null {
        return this.getRuleContext(0, CollectionDeleteManyArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteManyMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteManyMethod) {
            return visitor.visitCollectionDeleteManyMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteManyArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteManyArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteManyArgument1) {
            return visitor.visitCollectionDeleteManyArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteManyArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteManyArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteManyArgument2) {
            return visitor.visitCollectionDeleteManyArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.DELETE_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionDeleteOneArgument1(): CollectionDeleteOneArgument1Context | null {
        return this.getRuleContext(0, CollectionDeleteOneArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionDeleteOneArgument2(): CollectionDeleteOneArgument2Context | null {
        return this.getRuleContext(0, CollectionDeleteOneArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteOneMethod) {
            return visitor.visitCollectionDeleteOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteOneArgument1) {
            return visitor.visitCollectionDeleteOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteOneArgument2) {
            return visitor.visitCollectionDeleteOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionReplaceOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLACE_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.REPLACE_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionReplaceOneArgument1(): CollectionReplaceOneArgument1Context {
        return this.getRuleContext(0, CollectionReplaceOneArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionReplaceOneArgument2(): CollectionReplaceOneArgument2Context {
        return this.getRuleContext(0, CollectionReplaceOneArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionReplaceOneArgument3(): CollectionReplaceOneArgument3Context | null {
        return this.getRuleContext(0, CollectionReplaceOneArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionReplaceOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionReplaceOneMethod) {
            return visitor.visitCollectionReplaceOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionReplaceOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionReplaceOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionReplaceOneArgument1) {
            return visitor.visitCollectionReplaceOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionReplaceOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public documentToInsert(): DocumentToInsertContext {
        return this.getRuleContext(0, DocumentToInsertContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionReplaceOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionReplaceOneArgument2) {
            return visitor.visitCollectionReplaceOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionReplaceOneArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionReplaceOneArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionReplaceOneArgument3) {
            return visitor.visitCollectionReplaceOneArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateManyMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_MANY(): antlr.TerminalNode {
        return this.getToken(MongoParser.UPDATE_MANY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionUpdateManyArgument1(): CollectionUpdateManyArgument1Context {
        return this.getRuleContext(0, CollectionUpdateManyArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionUpdateManyArgument2(): CollectionUpdateManyArgument2Context {
        return this.getRuleContext(0, CollectionUpdateManyArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionUpdateManyArgument3(): CollectionUpdateManyArgument3Context | null {
        return this.getRuleContext(0, CollectionUpdateManyArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateManyMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateManyMethod) {
            return visitor.visitCollectionUpdateManyMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateManyArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateManyArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateManyArgument1) {
            return visitor.visitCollectionUpdateManyArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateManyArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateManyArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateManyArgument2) {
            return visitor.visitCollectionUpdateManyArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateManyArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateManyArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateManyArgument3) {
            return visitor.visitCollectionUpdateManyArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.UPDATE_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionUpdateOneArgument1(): CollectionUpdateOneArgument1Context {
        return this.getRuleContext(0, CollectionUpdateOneArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionUpdateOneArgument2(): CollectionUpdateOneArgument2Context {
        return this.getRuleContext(0, CollectionUpdateOneArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionUpdateOneArgument3(): CollectionUpdateOneArgument3Context | null {
        return this.getRuleContext(0, CollectionUpdateOneArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateOneMethod) {
            return visitor.visitCollectionUpdateOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateOneArgument1) {
            return visitor.visitCollectionUpdateOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateOneArgument2) {
            return visitor.visitCollectionUpdateOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateOneArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateOneArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateOneArgument3) {
            return visitor.visitCollectionUpdateOneArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionBulkWriteMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BULK_WRITE(): antlr.TerminalNode {
        return this.getToken(MongoParser.BULK_WRITE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionBulkWriteArgument1(): CollectionBulkWriteArgument1Context {
        return this.getRuleContext(0, CollectionBulkWriteArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionBulkWriteArgument2(): CollectionBulkWriteArgument2Context | null {
        return this.getRuleContext(0, CollectionBulkWriteArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionBulkWriteMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionBulkWriteMethod) {
            return visitor.visitCollectionBulkWriteMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionBulkWriteArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array(): ArrayContext {
        return this.getRuleContext(0, ArrayContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionBulkWriteArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionBulkWriteArgument1) {
            return visitor.visitCollectionBulkWriteArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionBulkWriteArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionBulkWriteArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionBulkWriteArgument2) {
            return visitor.visitCollectionBulkWriteArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertManyMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT_MANY(): antlr.TerminalNode {
        return this.getToken(MongoParser.INSERT_MANY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionInsertManyArgument1(): CollectionInsertManyArgument1Context {
        return this.getRuleContext(0, CollectionInsertManyArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionInsertManyArgument2(): CollectionInsertManyArgument2Context | null {
        return this.getRuleContext(0, CollectionInsertManyArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertManyMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertManyMethod) {
            return visitor.visitCollectionInsertManyMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertManyArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.LBRACKET, 0)!;
    }
    public documentToInsert(): DocumentToInsertContext[];
    public documentToInsert(i: number): DocumentToInsertContext | null;
    public documentToInsert(i?: number): DocumentToInsertContext[] | DocumentToInsertContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DocumentToInsertContext);
        }

        return this.getRuleContext(i, DocumentToInsertContext);
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.RBRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertManyArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertManyArgument1) {
            return visitor.visitCollectionInsertManyArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertManyArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertManyArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertManyArgument2) {
            return visitor.visitCollectionInsertManyArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.INSERT_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionInsertOneArgument1(): CollectionInsertOneArgument1Context {
        return this.getRuleContext(0, CollectionInsertOneArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionInsertOneArgument2(): CollectionInsertOneArgument2Context | null {
        return this.getRuleContext(0, CollectionInsertOneArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertOneMethod) {
            return visitor.visitCollectionInsertOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public documentToInsert(): DocumentToInsertContext {
        return this.getRuleContext(0, DocumentToInsertContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertOneArgument1) {
            return visitor.visitCollectionInsertOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertOneArgument2) {
            return visitor.visitCollectionInsertOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DocumentToInsertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_documentToInsert;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDocumentToInsert) {
            return visitor.visitDocumentToInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndUpdateMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE_AND_UPDATE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE_AND_UPDATE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionFindOneAndUpdateArgument1(): CollectionFindOneAndUpdateArgument1Context {
        return this.getRuleContext(0, CollectionFindOneAndUpdateArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionFindOneAndUpdateArgument2(): CollectionFindOneAndUpdateArgument2Context {
        return this.getRuleContext(0, CollectionFindOneAndUpdateArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionFindOneAndUpdateArgument3(): CollectionFindOneAndUpdateArgument3Context | null {
        return this.getRuleContext(0, CollectionFindOneAndUpdateArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndUpdateMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndUpdateMethod) {
            return visitor.visitCollectionFindOneAndUpdateMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndUpdateArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndUpdateArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndUpdateArgument1) {
            return visitor.visitCollectionFindOneAndUpdateArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndUpdateArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndUpdateArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndUpdateArgument2) {
            return visitor.visitCollectionFindOneAndUpdateArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndUpdateArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndUpdateArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndUpdateArgument3) {
            return visitor.visitCollectionFindOneAndUpdateArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndReplaceMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE_AND_REPLACE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE_AND_REPLACE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionFindOneAndReplaceArgument1(): CollectionFindOneAndReplaceArgument1Context {
        return this.getRuleContext(0, CollectionFindOneAndReplaceArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionFindOneAndReplaceArgument2(): CollectionFindOneAndReplaceArgument2Context {
        return this.getRuleContext(0, CollectionFindOneAndReplaceArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionFindOneAndReplaceArgument3(): CollectionFindOneAndReplaceArgument3Context | null {
        return this.getRuleContext(0, CollectionFindOneAndReplaceArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndReplaceMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndReplaceMethod) {
            return visitor.visitCollectionFindOneAndReplaceMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndReplaceArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndReplaceArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndReplaceArgument1) {
            return visitor.visitCollectionFindOneAndReplaceArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndReplaceArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndReplaceArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndReplaceArgument2) {
            return visitor.visitCollectionFindOneAndReplaceArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndReplaceArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndReplaceArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndReplaceArgument3) {
            return visitor.visitCollectionFindOneAndReplaceArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndDeleteMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE_AND_DELETE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE_AND_DELETE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionFindOneAndDeleteArgument1(): CollectionFindOneAndDeleteArgument1Context {
        return this.getRuleContext(0, CollectionFindOneAndDeleteArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionFindOneAndDeleteArgument2(): CollectionFindOneAndDeleteArgument2Context | null {
        return this.getRuleContext(0, CollectionFindOneAndDeleteArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndDeleteMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndDeleteMethod) {
            return visitor.visitCollectionFindOneAndDeleteMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndDeleteArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndDeleteArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndDeleteArgument1) {
            return visitor.visitCollectionFindOneAndDeleteArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndDeleteArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndDeleteArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndDeleteArgument2) {
            return visitor.visitCollectionFindOneAndDeleteArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionFindOneArgument1(): CollectionFindOneArgument1Context | null {
        return this.getRuleContext(0, CollectionFindOneArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionFindOneArgument2(): CollectionFindOneArgument2Context | null {
        return this.getRuleContext(0, CollectionFindOneArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneMethod) {
            return visitor.visitCollectionFindOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneArgument1) {
            return visitor.visitCollectionFindOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneArgument2) {
            return visitor.visitCollectionFindOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionFindMethodArgument1(): CollectionFindMethodArgument1Context | null {
        return this.getRuleContext(0, CollectionFindMethodArgument1Context);
    }
    public collectionFindMethodModifier(): CollectionFindMethodModifierContext[];
    public collectionFindMethodModifier(i: number): CollectionFindMethodModifierContext | null;
    public collectionFindMethodModifier(i?: number): CollectionFindMethodModifierContext[] | CollectionFindMethodModifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CollectionFindMethodModifierContext);
        }

        return this.getRuleContext(i, CollectionFindMethodModifierContext);
    }
    public explainMethod(): ExplainMethodContext | null {
        return this.getRuleContext(0, ExplainMethodContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionFindMethodArgument2(): CollectionFindMethodArgument2Context | null {
        return this.getRuleContext(0, CollectionFindMethodArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindMethod) {
            return visitor.visitCollectionFindMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindMethodArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindMethodArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindMethodArgument1) {
            return visitor.visitCollectionFindMethodArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindMethodArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindMethodArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindMethodArgument2) {
            return visitor.visitCollectionFindMethodArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DOT, 0)!;
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(MongoParser.EXPLAIN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public explainMethodArgument(): ExplainMethodArgumentContext | null {
        return this.getRuleContext(0, ExplainMethodArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_explainMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainMethod) {
            return visitor.visitExplainMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainMethodArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public boolean(): BooleanContext | null {
        return this.getRuleContext(0, BooleanContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_explainMethodArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainMethodArgument) {
            return visitor.visitExplainMethodArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindMethodModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DOT, 0)!;
    }
    public skipModifier(): SkipModifierContext | null {
        return this.getRuleContext(0, SkipModifierContext);
    }
    public limitModifier(): LimitModifierContext | null {
        return this.getRuleContext(0, LimitModifierContext);
    }
    public filterModifier(): FilterModifierContext | null {
        return this.getRuleContext(0, FilterModifierContext);
    }
    public minModifier(): MinModifierContext | null {
        return this.getRuleContext(0, MinModifierContext);
    }
    public maxModifier(): MaxModifierContext | null {
        return this.getRuleContext(0, MaxModifierContext);
    }
    public hintModifier(): HintModifierContext | null {
        return this.getRuleContext(0, HintModifierContext);
    }
    public returnKeyModifier(): ReturnKeyModifierContext | null {
        return this.getRuleContext(0, ReturnKeyModifierContext);
    }
    public showRecordIdModifier(): ShowRecordIdModifierContext | null {
        return this.getRuleContext(0, ShowRecordIdModifierContext);
    }
    public sortModifier(): SortModifierContext | null {
        return this.getRuleContext(0, SortModifierContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindMethodModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindMethodModifier) {
            return visitor.visitCollectionFindMethodModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SKIP_(): antlr.TerminalNode {
        return this.getToken(MongoParser.SKIP_, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public skipModifierArgument(): SkipModifierArgumentContext {
        return this.getRuleContext(0, SkipModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_skipModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSkipModifier) {
            return visitor.visitSkipModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_skipModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSkipModifierArgument) {
            return visitor.visitSkipModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(MongoParser.LIMIT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public limitModifierArgument(): LimitModifierArgumentContext {
        return this.getRuleContext(0, LimitModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_limitModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitLimitModifier) {
            return visitor.visitLimitModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_limitModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitLimitModifierArgument) {
            return visitor.visitLimitModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(MongoParser.FILTER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public filterModifierArgument(): FilterModifierArgumentContext {
        return this.getRuleContext(0, FilterModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_filterModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFilterModifier) {
            return visitor.visitFilterModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_filterModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFilterModifierArgument) {
            return visitor.visitFilterModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MinModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MIN(): antlr.TerminalNode {
        return this.getToken(MongoParser.MIN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public minModifierArgument(): MinModifierArgumentContext {
        return this.getRuleContext(0, MinModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_minModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMinModifier) {
            return visitor.visitMinModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MinModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_minModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMinModifierArgument) {
            return visitor.visitMinModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaxModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX(): antlr.TerminalNode {
        return this.getToken(MongoParser.MAX, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public maxModifierArgument(): MaxModifierArgumentContext {
        return this.getRuleContext(0, MaxModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_maxModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMaxModifier) {
            return visitor.visitMaxModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaxModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_maxModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMaxModifierArgument) {
            return visitor.visitMaxModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HINT(): antlr.TerminalNode {
        return this.getToken(MongoParser.HINT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public hintModifierArgument(): HintModifierArgumentContext {
        return this.getRuleContext(0, HintModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_hintModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitHintModifier) {
            return visitor.visitHintModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_hintModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitHintModifierArgument) {
            return visitor.visitHintModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnKeyModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURN_KEY(): antlr.TerminalNode {
        return this.getToken(MongoParser.RETURN_KEY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public returnKeyModifierArgument(): ReturnKeyModifierArgumentContext {
        return this.getRuleContext(0, ReturnKeyModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_returnKeyModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnKeyModifier) {
            return visitor.visitReturnKeyModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnKeyModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean(): BooleanContext {
        return this.getRuleContext(0, BooleanContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_returnKeyModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnKeyModifierArgument) {
            return visitor.visitReturnKeyModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRecordIdModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_RECORD_ID(): antlr.TerminalNode {
        return this.getToken(MongoParser.SHOW_RECORD_ID, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public showRecordIdModifierArgument(): ShowRecordIdModifierArgumentContext {
        return this.getRuleContext(0, ShowRecordIdModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_showRecordIdModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitShowRecordIdModifier) {
            return visitor.visitShowRecordIdModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRecordIdModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean(): BooleanContext {
        return this.getRuleContext(0, BooleanContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_showRecordIdModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitShowRecordIdModifierArgument) {
            return visitor.visitShowRecordIdModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SORT(): antlr.TerminalNode {
        return this.getToken(MongoParser.SORT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public sortModifierArgument1(): SortModifierArgument1Context {
        return this.getRuleContext(0, SortModifierArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public sortModifierArgument2(): SortModifierArgument2Context | null {
        return this.getRuleContext(0, SortModifierArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_sortModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSortModifier) {
            return visitor.visitSortModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortModifierArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json5(): Json5Context {
        return this.getRuleContext(0, Json5Context)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_sortModifierArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSortModifierArgument1) {
            return visitor.visitSortModifierArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortModifierArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_sortModifierArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSortModifierArgument2) {
            return visitor.visitSortModifierArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReservedKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DB(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DB, 0);
    }
    public FIND(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND, 0);
    }
    public FIND_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE, 0);
    }
    public FIND_ONE_AND_DELETE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE_AND_DELETE, 0);
    }
    public FIND_ONE_AND_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE_AND_REPLACE, 0);
    }
    public FIND_ONE_AND_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE_AND_UPDATE, 0);
    }
    public SHOW_RECORD_ID(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SHOW_RECORD_ID, 0);
    }
    public RETURN_KEY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RETURN_KEY, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FILTER, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.MAX, 0);
    }
    public SORT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SORT, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LIMIT, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.EXPLAIN, 0);
    }
    public HINT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.HINT, 0);
    }
    public SKIP_(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SKIP_, 0);
    }
    public INSERT_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INSERT_ONE, 0);
    }
    public INSERT_MANY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INSERT_MANY, 0);
    }
    public BULK_WRITE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.BULK_WRITE, 0);
    }
    public UPDATE_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.UPDATE_ONE, 0);
    }
    public UPDATE_MANY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.UPDATE_MANY, 0);
    }
    public REPLACE_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.REPLACE_ONE, 0);
    }
    public DELETE_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DELETE_ONE, 0);
    }
    public DELETE_MANY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DELETE_MANY, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RENAME, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP, 0);
    }
    public IS_CAPPED(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.IS_CAPPED, 0);
    }
    public CREATE_INDEX(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.CREATE_INDEX, 0);
    }
    public CREATE_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.CREATE_INDEXES, 0);
    }
    public DROP_INDEX(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP_INDEX, 0);
    }
    public DROP_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP_INDEXES, 0);
    }
    public LIST_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LIST_INDEXES, 0);
    }
    public INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INDEXES, 0);
    }
    public INDEX_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INDEX_EXISTS, 0);
    }
    public INDEX_INFORMATION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INDEX_INFORMATION, 0);
    }
    public ESTIMATED_DOCUMENT_COUNT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.ESTIMATED_DOCUMENT_COUNT, 0);
    }
    public COUNT_DOCUMENTS(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COUNT_DOCUMENTS, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DISTINCT, 0);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.AGGREGATE, 0);
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COLLECTION, 0);
    }
    public CREATE_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.CREATE_COLLECTION, 0);
    }
    public COMMAND(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMAND, 0);
    }
    public LIST_COLLECTIONS(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LIST_COLLECTIONS, 0);
    }
    public RENAME_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RENAME_COLLECTION, 0);
    }
    public DROP_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP_COLLECTION, 0);
    }
    public DROP_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP_DATABASE, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_reservedKeyword;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReservedKeyword) {
            return visitor.visitReservedKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Json5Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public value(): ValueContext | null {
        return this.getRuleContext(0, ValueContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_json5;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitJson5) {
            return visitor.visitJson5(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE(): antlr.TerminalNode {
        return this.getToken(MongoParser.LBRACE, 0)!;
    }
    public pair(): PairContext[];
    public pair(i: number): PairContext | null;
    public pair(i?: number): PairContext[] | PairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PairContext);
        }

        return this.getRuleContext(i, PairContext);
    }
    public RBRACE(): antlr.TerminalNode {
        return this.getToken(MongoParser.RBRACE, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_object;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitObject) {
            return visitor.visitObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PairContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public key(): KeyContext {
        return this.getRuleContext(0, KeyContext)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(MongoParser.COLON, 0)!;
    }
    public value(): ValueContext {
        return this.getRuleContext(0, ValueContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_pair;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitPair) {
            return visitor.visitPair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_boolean;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitBoolean) {
            return visitor.visitBoolean(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public NUMERIC_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMERIC_LITERAL, 0);
    }
    public boolean(): BooleanContext | null {
        return this.getRuleContext(0, BooleanContext);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NULL, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_key;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitKey) {
            return visitor.visitKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.IDENTIFIER, 0);
    }
    public reservedKeyword(): ReservedKeywordContext | null {
        return this.getRuleContext(0, ReservedKeywordContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_identifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STRING, 0);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public boolean(): BooleanContext | null {
        return this.getRuleContext(0, BooleanContext);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NULL, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_value;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitValue) {
            return visitor.visitValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.LBRACKET, 0)!;
    }
    public value(): ValueContext[];
    public value(i: number): ValueContext | null;
    public value(i?: number): ValueContext[] | ValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueContext);
        }

        return this.getRuleContext(i, ValueContext);
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.RBRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_array;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitArray) {
            return visitor.visitArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NUMERIC_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMERIC_LITERAL, 0);
    }
    public NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMBER, 0);
    }
    public SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_number;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitNumber) {
            return visitor.visitNumber(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
