////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/mongo/grammar/MongoParser.g4 by ANTLR 4.13.1

import { AbstractParseTreeVisitor } from "antlr4ng";


import { RootContext } from "./MongoParser.js";
import { StatementsContext } from "./MongoParser.js";
import { StatementContext } from "./MongoParser.js";
import { CollectionOperationContext } from "./MongoParser.js";
import { CollectionNameContext } from "./MongoParser.js";
import { CollectionMethodContext } from "./MongoParser.js";
import { InsertOneMethodContext } from "./MongoParser.js";
import { InsertOneParamContext } from "./MongoParser.js";
import { FindMethodContext } from "./MongoParser.js";
import { FindModifierContext } from "./MongoParser.js";
import { SkipContext } from "./MongoParser.js";
import { OffsetContext } from "./MongoParser.js";
import { FindParamContext } from "./MongoParser.js";
import { Json5Context } from "./MongoParser.js";
import { ObjContext } from "./MongoParser.js";
import { PairContext } from "./MongoParser.js";
import { KeyContext } from "./MongoParser.js";
import { ValueContext } from "./MongoParser.js";
import { ArrContext } from "./MongoParser.js";
import { NumberContext } from "./MongoParser.js";


/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by `MongoParser`.
 *
 * @param <Result> The return type of the visit operation. Use `void` for
 * operations with no return type.
 */
export class MongoParserVisitor<Result> extends AbstractParseTreeVisitor<Result> {
    /**
     * Visit a parse tree produced by `MongoParser.root`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRoot?: (ctx: RootContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.statements`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatements?: (ctx: StatementsContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.statement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatement?: (ctx: StatementContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionOperation`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionOperation?: (ctx: CollectionOperationContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionName?: (ctx: CollectionNameContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionMethod?: (ctx: CollectionMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.insertOneMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInsertOneMethod?: (ctx: InsertOneMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.insertOneParam`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInsertOneParam?: (ctx: InsertOneParamContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.findMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFindMethod?: (ctx: FindMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.findModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFindModifier?: (ctx: FindModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.skip`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSkip?: (ctx: SkipContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.offset`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOffset?: (ctx: OffsetContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.findParam`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFindParam?: (ctx: FindParamContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.json5`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitJson5?: (ctx: Json5Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.obj`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObj?: (ctx: ObjContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.pair`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPair?: (ctx: PairContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.key`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitKey?: (ctx: KeyContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.value`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitValue?: (ctx: ValueContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.arr`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitArr?: (ctx: ArrContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.number`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumber?: (ctx: NumberContext) => Result;
}
