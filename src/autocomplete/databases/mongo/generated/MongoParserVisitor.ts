////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/mongo/grammar/MongoParser.g4 by ANTLR 4.13.1

import { AbstractParseTreeVisitor } from "antlr4ng";


import { RootContext } from "./MongoParser.js";
import { CommandsContext } from "./MongoParser.js";
import { CommandContext } from "./MongoParser.js";
import { CollectionOperationContext } from "./MongoParser.js";
import { CollectionNameContext } from "./MongoParser.js";
import { CollectionMethodContext } from "./MongoParser.js";
import { InsertOneMethodContext } from "./MongoParser.js";
import { InsertOneArgument1Context } from "./MongoParser.js";
import { InsertOneArgument2Context } from "./MongoParser.js";
import { FindMethodContext } from "./MongoParser.js";
import { FindMethodArgument1Context } from "./MongoParser.js";
import { FindMethodArgument2Context } from "./MongoParser.js";
import { ExplainMethodContext } from "./MongoParser.js";
import { ExplainMethodArgumentContext } from "./MongoParser.js";
import { FindMethodModifierContext } from "./MongoParser.js";
import { SkipModifierContext } from "./MongoParser.js";
import { SkipModifierArgumentContext } from "./MongoParser.js";
import { LimitModifierContext } from "./MongoParser.js";
import { LimitModifierArgumentContext } from "./MongoParser.js";
import { FilterModifierContext } from "./MongoParser.js";
import { FilterModifierArgumentContext } from "./MongoParser.js";
import { MinModifierContext } from "./MongoParser.js";
import { MinModifierArgumentContext } from "./MongoParser.js";
import { MaxModifierContext } from "./MongoParser.js";
import { MaxModifierArgumentContext } from "./MongoParser.js";
import { HintModifierContext } from "./MongoParser.js";
import { HintModifierArgumentContext } from "./MongoParser.js";
import { ReturnKeyModifierContext } from "./MongoParser.js";
import { ReturnKeyModifierArgumentContext } from "./MongoParser.js";
import { ShowRecordIdModifierContext } from "./MongoParser.js";
import { ShowRecordIdModifierArgumentContext } from "./MongoParser.js";
import { SortModifierContext } from "./MongoParser.js";
import { SortModifierArgument1Context } from "./MongoParser.js";
import { SortModifierArgument2Context } from "./MongoParser.js";
import { ReservedKeywordContext } from "./MongoParser.js";
import { Json5Context } from "./MongoParser.js";
import { ObjectContext } from "./MongoParser.js";
import { PairContext } from "./MongoParser.js";
import { BooleanContext } from "./MongoParser.js";
import { KeyContext } from "./MongoParser.js";
import { IdentifierContext } from "./MongoParser.js";
import { ValueContext } from "./MongoParser.js";
import { ArrayContext } from "./MongoParser.js";
import { NumberContext } from "./MongoParser.js";


/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by `MongoParser`.
 *
 * @param <Result> The return type of the visit operation. Use `void` for
 * operations with no return type.
 */
export class MongoParserVisitor<Result> extends AbstractParseTreeVisitor<Result> {
    /**
     * Visit a parse tree produced by `MongoParser.root`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRoot?: (ctx: RootContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.commands`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommands?: (ctx: CommandsContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.command`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommand?: (ctx: CommandContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionOperation`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionOperation?: (ctx: CollectionOperationContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionName?: (ctx: CollectionNameContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionMethod?: (ctx: CollectionMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.insertOneMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInsertOneMethod?: (ctx: InsertOneMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.insertOneArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInsertOneArgument1?: (ctx: InsertOneArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.insertOneArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInsertOneArgument2?: (ctx: InsertOneArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.findMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFindMethod?: (ctx: FindMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.findMethodArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFindMethodArgument1?: (ctx: FindMethodArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.findMethodArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFindMethodArgument2?: (ctx: FindMethodArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.explainMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExplainMethod?: (ctx: ExplainMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.explainMethodArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExplainMethodArgument?: (ctx: ExplainMethodArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.findMethodModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFindMethodModifier?: (ctx: FindMethodModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.skipModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSkipModifier?: (ctx: SkipModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.skipModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSkipModifierArgument?: (ctx: SkipModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.limitModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLimitModifier?: (ctx: LimitModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.limitModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLimitModifierArgument?: (ctx: LimitModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.filterModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFilterModifier?: (ctx: FilterModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.filterModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFilterModifierArgument?: (ctx: FilterModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.minModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMinModifier?: (ctx: MinModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.minModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMinModifierArgument?: (ctx: MinModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.maxModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMaxModifier?: (ctx: MaxModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.maxModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMaxModifierArgument?: (ctx: MaxModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.hintModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitHintModifier?: (ctx: HintModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.hintModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitHintModifierArgument?: (ctx: HintModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.returnKeyModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReturnKeyModifier?: (ctx: ReturnKeyModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.returnKeyModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReturnKeyModifierArgument?: (ctx: ReturnKeyModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.showRecordIdModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitShowRecordIdModifier?: (ctx: ShowRecordIdModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.showRecordIdModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitShowRecordIdModifierArgument?: (ctx: ShowRecordIdModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.sortModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSortModifier?: (ctx: SortModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.sortModifierArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSortModifierArgument1?: (ctx: SortModifierArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.sortModifierArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSortModifierArgument2?: (ctx: SortModifierArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.reservedKeyword`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReservedKeyword?: (ctx: ReservedKeywordContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.json5`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitJson5?: (ctx: Json5Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.object`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObject?: (ctx: ObjectContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.pair`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPair?: (ctx: PairContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.boolean`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBoolean?: (ctx: BooleanContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.key`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitKey?: (ctx: KeyContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.identifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIdentifier?: (ctx: IdentifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.value`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitValue?: (ctx: ValueContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.array`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitArray?: (ctx: ArrayContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.number`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumber?: (ctx: NumberContext) => Result;
}
