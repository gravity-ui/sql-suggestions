////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/redis/grammar/RedisParser.g4 by ANTLR 4.13.1

import { AbstractParseTreeVisitor } from "antlr4ng";


import { RootContext } from "./RedisParser.js";
import { CommandsContext } from "./RedisParser.js";
import { CommandContext } from "./RedisParser.js";
import { CommonCommandContext } from "./RedisParser.js";
import { StringCommandContext } from "./RedisParser.js";
import { ListCommandContext } from "./RedisParser.js";
import { LmoveCommandContext } from "./RedisParser.js";
import { LeftOrRightClauseContext } from "./RedisParser.js";
import { BlmoveCommandContext } from "./RedisParser.js";
import { LmpopCommandContext } from "./RedisParser.js";
import { BlmpopCommandContext } from "./RedisParser.js";
import { LpopCommandContext } from "./RedisParser.js";
import { BlpopCommandContext } from "./RedisParser.js";
import { RpopCommandContext } from "./RedisParser.js";
import { BrpopCommandContext } from "./RedisParser.js";
import { RpopLpushCommandContext } from "./RedisParser.js";
import { BrpopLpushCommandContext } from "./RedisParser.js";
import { LindexCommandContext } from "./RedisParser.js";
import { LinsertCommandContext } from "./RedisParser.js";
import { BeforeOrAfterClauseContext } from "./RedisParser.js";
import { LlenCommandContext } from "./RedisParser.js";
import { LposCommandContext } from "./RedisParser.js";
import { RankClauseContext } from "./RedisParser.js";
import { MaxLenClauseContext } from "./RedisParser.js";
import { LpushCommandContext } from "./RedisParser.js";
import { LpushxCommandContext } from "./RedisParser.js";
import { RpushCommandContext } from "./RedisParser.js";
import { RpushxCommandContext } from "./RedisParser.js";
import { LrangeCommandContext } from "./RedisParser.js";
import { LremCommandContext } from "./RedisParser.js";
import { LsetCommandContext } from "./RedisParser.js";
import { LtrimCommandContext } from "./RedisParser.js";
import { CopyCommandContext } from "./RedisParser.js";
import { DbClauseContext } from "./RedisParser.js";
import { DatabaseNameContext } from "./RedisParser.js";
import { DeleteCommandContext } from "./RedisParser.js";
import { UnlinkCommandContext } from "./RedisParser.js";
import { DumpCommandContext } from "./RedisParser.js";
import { ExistsCommandContext } from "./RedisParser.js";
import { ExpireCommandContext } from "./RedisParser.js";
import { ExpireAtCommandContext } from "./RedisParser.js";
import { PExpireCommandContext } from "./RedisParser.js";
import { PExpireAtCommandContext } from "./RedisParser.js";
import { ExpireOptionsContext } from "./RedisParser.js";
import { ExpireTimeCommandContext } from "./RedisParser.js";
import { PExpireTimeCommandContext } from "./RedisParser.js";
import { KeysCommandContext } from "./RedisParser.js";
import { MoveCommandContext } from "./RedisParser.js";
import { ObjectCommandContext } from "./RedisParser.js";
import { ObjectOptionsContext } from "./RedisParser.js";
import { PersistCommandContext } from "./RedisParser.js";
import { TtlCommandContext } from "./RedisParser.js";
import { PTtlCommandContext } from "./RedisParser.js";
import { RandomKeyCommandContext } from "./RedisParser.js";
import { RenameCommandContext } from "./RedisParser.js";
import { RenameNxCommandContext } from "./RedisParser.js";
import { ScanCommandContext } from "./RedisParser.js";
import { MatchClauseContext } from "./RedisParser.js";
import { CountClauseContext } from "./RedisParser.js";
import { TypeClauseContext } from "./RedisParser.js";
import { TouchCommandContext } from "./RedisParser.js";
import { TypeCommandContext } from "./RedisParser.js";
import { WaitCommandContext } from "./RedisParser.js";
import { SetCommandContext } from "./RedisParser.js";
import { KeyExistenceClauseContext } from "./RedisParser.js";
import { ExpirationClauseContext } from "./RedisParser.js";
import { GetCommandContext } from "./RedisParser.js";
import { IncrementCommandContext } from "./RedisParser.js";
import { IncrementByCommandContext } from "./RedisParser.js";
import { DecrementCommandContext } from "./RedisParser.js";
import { DecrementByCommandContext } from "./RedisParser.js";
import { AppendCommandContext } from "./RedisParser.js";
import { GetDeleteCommandContext } from "./RedisParser.js";
import { GetExCommandContext } from "./RedisParser.js";
import { GetRangeCommandContext } from "./RedisParser.js";
import { GetSetCommandContext } from "./RedisParser.js";
import { MGetCommandContext } from "./RedisParser.js";
import { MSetCommandContext } from "./RedisParser.js";
import { MSetNxCommandContext } from "./RedisParser.js";
import { PSetExCommandContext } from "./RedisParser.js";
import { SetExCommandContext } from "./RedisParser.js";
import { SetNxCommandContext } from "./RedisParser.js";
import { SetRangeCommandContext } from "./RedisParser.js";
import { StringLengthCommandContext } from "./RedisParser.js";
import { SubstringCommandContext } from "./RedisParser.js";
import { DecimalContext } from "./RedisParser.js";
import { IdentifierContext } from "./RedisParser.js";
import { StringKeyNameContext } from "./RedisParser.js";
import { ListKeyNameContext } from "./RedisParser.js";
import { KeyNameContext } from "./RedisParser.js";
import { NotProperPatternContext } from "./RedisParser.js";


/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by `RedisParser`.
 *
 * @param <Result> The return type of the visit operation. Use `void` for
 * operations with no return type.
 */
export class RedisParserVisitor<Result> extends AbstractParseTreeVisitor<Result> {
    /**
     * Visit a parse tree produced by `RedisParser.root`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRoot?: (ctx: RootContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.commands`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommands?: (ctx: CommandsContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.command`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommand?: (ctx: CommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.commonCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommonCommand?: (ctx: CommonCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.stringCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStringCommand?: (ctx: StringCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.listCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitListCommand?: (ctx: ListCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.lmoveCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLmoveCommand?: (ctx: LmoveCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.leftOrRightClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLeftOrRightClause?: (ctx: LeftOrRightClauseContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.blmoveCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBlmoveCommand?: (ctx: BlmoveCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.lmpopCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLmpopCommand?: (ctx: LmpopCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.blmpopCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBlmpopCommand?: (ctx: BlmpopCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.lpopCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLpopCommand?: (ctx: LpopCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.blpopCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBlpopCommand?: (ctx: BlpopCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.rpopCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRpopCommand?: (ctx: RpopCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.brpopCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBrpopCommand?: (ctx: BrpopCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.rpopLpushCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRpopLpushCommand?: (ctx: RpopLpushCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.brpopLpushCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBrpopLpushCommand?: (ctx: BrpopLpushCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.lindexCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLindexCommand?: (ctx: LindexCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.linsertCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLinsertCommand?: (ctx: LinsertCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.beforeOrAfterClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBeforeOrAfterClause?: (ctx: BeforeOrAfterClauseContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.llenCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLlenCommand?: (ctx: LlenCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.lposCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLposCommand?: (ctx: LposCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.rankClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRankClause?: (ctx: RankClauseContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.maxLenClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMaxLenClause?: (ctx: MaxLenClauseContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.lpushCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLpushCommand?: (ctx: LpushCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.lpushxCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLpushxCommand?: (ctx: LpushxCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.rpushCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRpushCommand?: (ctx: RpushCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.rpushxCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRpushxCommand?: (ctx: RpushxCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.lrangeCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLrangeCommand?: (ctx: LrangeCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.lremCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLremCommand?: (ctx: LremCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.lsetCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLsetCommand?: (ctx: LsetCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.ltrimCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLtrimCommand?: (ctx: LtrimCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.copyCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCopyCommand?: (ctx: CopyCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.dbClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDbClause?: (ctx: DbClauseContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.databaseName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseName?: (ctx: DatabaseNameContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.deleteCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeleteCommand?: (ctx: DeleteCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.unlinkCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitUnlinkCommand?: (ctx: UnlinkCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.dumpCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDumpCommand?: (ctx: DumpCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.existsCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExistsCommand?: (ctx: ExistsCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.expireCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpireCommand?: (ctx: ExpireCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.expireAtCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpireAtCommand?: (ctx: ExpireAtCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.pExpireCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPExpireCommand?: (ctx: PExpireCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.pExpireAtCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPExpireAtCommand?: (ctx: PExpireAtCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.expireOptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpireOptions?: (ctx: ExpireOptionsContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.expireTimeCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpireTimeCommand?: (ctx: ExpireTimeCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.pExpireTimeCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPExpireTimeCommand?: (ctx: PExpireTimeCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.keysCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitKeysCommand?: (ctx: KeysCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.moveCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMoveCommand?: (ctx: MoveCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.objectCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObjectCommand?: (ctx: ObjectCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.objectOptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObjectOptions?: (ctx: ObjectOptionsContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.persistCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPersistCommand?: (ctx: PersistCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.ttlCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTtlCommand?: (ctx: TtlCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.pTtlCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPTtlCommand?: (ctx: PTtlCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.randomKeyCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRandomKeyCommand?: (ctx: RandomKeyCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.renameCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRenameCommand?: (ctx: RenameCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.renameNxCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRenameNxCommand?: (ctx: RenameNxCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.scanCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitScanCommand?: (ctx: ScanCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.matchClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMatchClause?: (ctx: MatchClauseContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.countClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCountClause?: (ctx: CountClauseContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.typeClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeClause?: (ctx: TypeClauseContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.touchCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTouchCommand?: (ctx: TouchCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.typeCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeCommand?: (ctx: TypeCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.waitCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWaitCommand?: (ctx: WaitCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.setCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetCommand?: (ctx: SetCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.keyExistenceClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitKeyExistenceClause?: (ctx: KeyExistenceClauseContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.expirationClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpirationClause?: (ctx: ExpirationClauseContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.getCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGetCommand?: (ctx: GetCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.incrementCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIncrementCommand?: (ctx: IncrementCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.incrementByCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIncrementByCommand?: (ctx: IncrementByCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.decrementCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDecrementCommand?: (ctx: DecrementCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.decrementByCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDecrementByCommand?: (ctx: DecrementByCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.appendCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAppendCommand?: (ctx: AppendCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.getDeleteCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGetDeleteCommand?: (ctx: GetDeleteCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.getExCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGetExCommand?: (ctx: GetExCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.getRangeCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGetRangeCommand?: (ctx: GetRangeCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.getSetCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGetSetCommand?: (ctx: GetSetCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.mGetCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMGetCommand?: (ctx: MGetCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.mSetCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMSetCommand?: (ctx: MSetCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.mSetNxCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMSetNxCommand?: (ctx: MSetNxCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.pSetExCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPSetExCommand?: (ctx: PSetExCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.setExCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetExCommand?: (ctx: SetExCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.setNxCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetNxCommand?: (ctx: SetNxCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.setRangeCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetRangeCommand?: (ctx: SetRangeCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.stringLengthCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStringLengthCommand?: (ctx: StringLengthCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.substringCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSubstringCommand?: (ctx: SubstringCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.decimal`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDecimal?: (ctx: DecimalContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.identifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIdentifier?: (ctx: IdentifierContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.stringKeyName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStringKeyName?: (ctx: StringKeyNameContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.listKeyName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitListKeyName?: (ctx: ListKeyNameContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.keyName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitKeyName?: (ctx: KeyNameContext) => Result;
    /**
     * Visit a parse tree produced by the `notProperPattern`
     * labeled alternative in `RedisParser.keyPattern`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNotProperPattern?: (ctx: NotProperPatternContext) => Result;
}
