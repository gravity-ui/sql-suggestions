////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/redis/grammar/RedisParser.g4 by ANTLR 4.13.1

import { AbstractParseTreeVisitor } from "antlr4ng";


import { RootContext } from "./RedisParser.js";
import { CommandsContext } from "./RedisParser.js";
import { CommandContext } from "./RedisParser.js";
import { SetCommandContext } from "./RedisParser.js";
import { ExpirationClauseContext } from "./RedisParser.js";
import { GetCommandContext } from "./RedisParser.js";
import { IncrementCommandContext } from "./RedisParser.js";
import { DecrementCommandContext } from "./RedisParser.js";
import { IdentifierContext } from "./RedisParser.js";
import { KeyNameContext } from "./RedisParser.js";


/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by `RedisParser`.
 *
 * @param <Result> The return type of the visit operation. Use `void` for
 * operations with no return type.
 */
export class RedisParserVisitor<Result> extends AbstractParseTreeVisitor<Result> {
    /**
     * Visit a parse tree produced by `RedisParser.root`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRoot?: (ctx: RootContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.commands`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommands?: (ctx: CommandsContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.command`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommand?: (ctx: CommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.setCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetCommand?: (ctx: SetCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.expirationClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpirationClause?: (ctx: ExpirationClauseContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.getCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGetCommand?: (ctx: GetCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.incrementCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIncrementCommand?: (ctx: IncrementCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.decrementCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDecrementCommand?: (ctx: DecrementCommandContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.identifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIdentifier?: (ctx: IdentifierContext) => Result;
    /**
     * Visit a parse tree produced by `RedisParser.keyName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitKeyName?: (ctx: KeyNameContext) => Result;
}
