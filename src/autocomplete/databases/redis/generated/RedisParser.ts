////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/redis/grammar/RedisParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { RedisParserVisitor } from "./RedisParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class RedisParser extends antlr.Parser {
    public static readonly SPACE = 1;
    public static readonly NEWLINE = 2;
    public static readonly COPY = 3;
    public static readonly DB = 4;
    public static readonly REPLACE = 5;
    public static readonly DEL = 6;
    public static readonly UNLINK = 7;
    public static readonly DUMP = 8;
    public static readonly EXISTS = 9;
    public static readonly EXPIRE = 10;
    public static readonly GT = 11;
    public static readonly LT = 12;
    public static readonly NX = 13;
    public static readonly XX = 14;
    public static readonly EXPIREAT = 15;
    public static readonly EXPIRETIME = 16;
    public static readonly PEXPIRE = 17;
    public static readonly PEXPIREAT = 18;
    public static readonly PEXPIRETIME = 19;
    public static readonly KEYS = 20;
    public static readonly MOVE = 21;
    public static readonly OBJECT = 22;
    public static readonly ENCODING = 23;
    public static readonly FREQ = 24;
    public static readonly IDLETIME = 25;
    public static readonly REFCOUNT = 26;
    public static readonly PERSIST = 27;
    public static readonly TTL = 28;
    public static readonly PTTL = 29;
    public static readonly RANDOMKEY = 30;
    public static readonly RENAME = 31;
    public static readonly RENAMENX = 32;
    public static readonly SCAN = 33;
    public static readonly MATCH = 34;
    public static readonly COUNT = 35;
    public static readonly TYPE = 36;
    public static readonly TOUCH = 37;
    public static readonly WAIT = 38;
    public static readonly LEFT = 39;
    public static readonly RIGHT = 40;
    public static readonly BEFORE = 41;
    public static readonly AFTER = 42;
    public static readonly RANK = 43;
    public static readonly MAXLEN = 44;
    public static readonly LIMIT = 45;
    public static readonly MIN = 46;
    public static readonly MAX = 47;
    public static readonly CH = 48;
    public static readonly WITHSCORE = 49;
    public static readonly WITHSCORES = 50;
    public static readonly WEIGHTS = 51;
    public static readonly AGGREGATE = 52;
    public static readonly SUM = 53;
    public static readonly BYSCORE = 54;
    public static readonly BYLEX = 55;
    public static readonly REV = 56;
    public static readonly SET = 57;
    public static readonly GET = 58;
    public static readonly INCR = 59;
    public static readonly INCRBY = 60;
    public static readonly DECR = 61;
    public static readonly DECRBY = 62;
    public static readonly EX = 63;
    public static readonly PX = 64;
    public static readonly EXAT = 65;
    public static readonly PXAT = 66;
    public static readonly KEEPTTL = 67;
    public static readonly APPEND = 68;
    public static readonly GETDEL = 69;
    public static readonly GETEX = 70;
    public static readonly GETRANGE = 71;
    public static readonly GETSET = 72;
    public static readonly MGET = 73;
    public static readonly MSET = 74;
    public static readonly MSETNX = 75;
    public static readonly PSETEX = 76;
    public static readonly SETEX = 77;
    public static readonly SETNX = 78;
    public static readonly SETRANGE = 79;
    public static readonly STRLEN = 80;
    public static readonly SUBSTR = 81;
    public static readonly LMOVE = 82;
    public static readonly BLMOVE = 83;
    public static readonly LMPOP = 84;
    public static readonly BLMPOP = 85;
    public static readonly LPOP = 86;
    public static readonly BLPOP = 87;
    public static readonly RPOP = 88;
    public static readonly BRPOP = 89;
    public static readonly RPOPLPUSH = 90;
    public static readonly BRPOPLPUSH = 91;
    public static readonly LINDEX = 92;
    public static readonly LINSERT = 93;
    public static readonly LLEN = 94;
    public static readonly LPOS = 95;
    public static readonly LPUSH = 96;
    public static readonly LPUSHX = 97;
    public static readonly RPUSH = 98;
    public static readonly RPUSHX = 99;
    public static readonly LRANGE = 100;
    public static readonly LREM = 101;
    public static readonly LSET = 102;
    public static readonly LTRIM = 103;
    public static readonly SADD = 104;
    public static readonly SCARD = 105;
    public static readonly SDIFF = 106;
    public static readonly SDIFFSTORE = 107;
    public static readonly SINTER = 108;
    public static readonly SINTERCARD = 109;
    public static readonly SINTERSTORE = 110;
    public static readonly SISMEMBER = 111;
    public static readonly SMISMEMBER = 112;
    public static readonly SMEMBERS = 113;
    public static readonly SMOVE = 114;
    public static readonly SPOP = 115;
    public static readonly SRANDMEMBER = 116;
    public static readonly SREM = 117;
    public static readonly SSCAN = 118;
    public static readonly SUNION = 119;
    public static readonly SUNIONSTORE = 120;
    public static readonly ZMPOP = 121;
    public static readonly BZMPOP = 122;
    public static readonly ZPOPMAX = 123;
    public static readonly BZPOPMAX = 124;
    public static readonly ZPOPMIN = 125;
    public static readonly BZPOPMIN = 126;
    public static readonly ZADD = 127;
    public static readonly ZCARD = 128;
    public static readonly ZCOUNT = 129;
    public static readonly ZDIFF = 130;
    public static readonly ZDIFFSTORE = 131;
    public static readonly ZINCRBY = 132;
    public static readonly ZINTER = 133;
    public static readonly ZINTERCARD = 134;
    public static readonly ZINTERSTORE = 135;
    public static readonly ZLEXCOUNT = 136;
    public static readonly ZSCORE = 137;
    public static readonly ZMSCORE = 138;
    public static readonly ZRANDMEMBER = 139;
    public static readonly ZRANGE = 140;
    public static readonly ZRANGEBYLEX = 141;
    public static readonly ZRANGEBYSCORE = 142;
    public static readonly ZRANGESTORE = 143;
    public static readonly ZRANK = 144;
    public static readonly ZREM = 145;
    public static readonly ZREMRANGEBYLEX = 146;
    public static readonly ZREMRANGEBYRANK = 147;
    public static readonly ZREMRANGEBYSCORE = 148;
    public static readonly ZREVRANGE = 149;
    public static readonly ZREVRANGEBYLEX = 150;
    public static readonly ZREVRANGEBYSCORE = 151;
    public static readonly ZREVRANK = 152;
    public static readonly ZSCAN = 153;
    public static readonly ZUNION = 154;
    public static readonly ZUNIONSTORE = 155;
    public static readonly SINGLE_QUOTE = 156;
    public static readonly DOUBLE_QUOTE = 157;
    public static readonly POSITIVE_DECIMAL_LITERAL = 158;
    public static readonly DECIMAL_LITERAL = 159;
    public static readonly DECIMAL_SCORE_LITERAL = 160;
    public static readonly IDENTIFIER = 161;
    public static readonly RULE_root = 0;
    public static readonly RULE_commands = 1;
    public static readonly RULE_command = 2;
    public static readonly RULE_commonCommand = 3;
    public static readonly RULE_stringCommand = 4;
    public static readonly RULE_listCommand = 5;
    public static readonly RULE_setCommand = 6;
    public static readonly RULE_sortedSetCommand = 7;
    public static readonly RULE_zmpopCommand = 8;
    public static readonly RULE_bzmpopCommand = 9;
    public static readonly RULE_zpopmaxCommand = 10;
    public static readonly RULE_bzpopmaxCommand = 11;
    public static readonly RULE_zpopminCommand = 12;
    public static readonly RULE_bzpopminCommand = 13;
    public static readonly RULE_minMaxClause = 14;
    public static readonly RULE_zaddCommand = 15;
    public static readonly RULE_keyUpdateClause = 16;
    public static readonly RULE_scoreMemberClause = 17;
    public static readonly RULE_zcardCommand = 18;
    public static readonly RULE_zcountCommand = 19;
    public static readonly RULE_zdiffCommand = 20;
    public static readonly RULE_zdiffstoreCommand = 21;
    public static readonly RULE_zincrbyCommand = 22;
    public static readonly RULE_zinterCommand = 23;
    public static readonly RULE_zintercardCommand = 24;
    public static readonly RULE_zinterstoreCommand = 25;
    public static readonly RULE_weightsClause = 26;
    public static readonly RULE_aggregateClause = 27;
    public static readonly RULE_zlexcountCommand = 28;
    public static readonly RULE_zscoreCommand = 29;
    public static readonly RULE_zmscoreCommand = 30;
    public static readonly RULE_zrandmemberCommand = 31;
    public static readonly RULE_zrangeCommand = 32;
    public static readonly RULE_zrangebylexCommand = 33;
    public static readonly RULE_zrangebyscoreCommand = 34;
    public static readonly RULE_zrangestoreCommand = 35;
    public static readonly RULE_rangeTypeClause = 36;
    public static readonly RULE_limitOffsetClause = 37;
    public static readonly RULE_zrankCommand = 38;
    public static readonly RULE_zrevrankCommand = 39;
    public static readonly RULE_zremCommand = 40;
    public static readonly RULE_zremrangebylexCommand = 41;
    public static readonly RULE_zremrangebyrankCommand = 42;
    public static readonly RULE_zremrangebyscoreCommand = 43;
    public static readonly RULE_zrevrangeCommand = 44;
    public static readonly RULE_zrevrangebylexCommand = 45;
    public static readonly RULE_zrevrangebyscoreCommand = 46;
    public static readonly RULE_zscanCommand = 47;
    public static readonly RULE_zunionCommand = 48;
    public static readonly RULE_zunionstoreCommand = 49;
    public static readonly RULE_saddCommand = 50;
    public static readonly RULE_scardCommand = 51;
    public static readonly RULE_sdiffCommand = 52;
    public static readonly RULE_sdiffstoreCommand = 53;
    public static readonly RULE_sinterCommand = 54;
    public static readonly RULE_sintercardCommand = 55;
    public static readonly RULE_limitClause = 56;
    public static readonly RULE_sinterstoreCommand = 57;
    public static readonly RULE_sismemberCommand = 58;
    public static readonly RULE_smismemberCommand = 59;
    public static readonly RULE_smembersCommand = 60;
    public static readonly RULE_smoveCommand = 61;
    public static readonly RULE_spopCommand = 62;
    public static readonly RULE_srandmemberCommand = 63;
    public static readonly RULE_sremCommand = 64;
    public static readonly RULE_sscanComman = 65;
    public static readonly RULE_sunionCommand = 66;
    public static readonly RULE_sunionstoreCommand = 67;
    public static readonly RULE_lmoveCommand = 68;
    public static readonly RULE_leftOrRightClause = 69;
    public static readonly RULE_blmoveCommand = 70;
    public static readonly RULE_lmpopCommand = 71;
    public static readonly RULE_blmpopCommand = 72;
    public static readonly RULE_lpopCommand = 73;
    public static readonly RULE_blpopCommand = 74;
    public static readonly RULE_rpopCommand = 75;
    public static readonly RULE_brpopCommand = 76;
    public static readonly RULE_rpopLpushCommand = 77;
    public static readonly RULE_brpopLpushCommand = 78;
    public static readonly RULE_lindexCommand = 79;
    public static readonly RULE_linsertCommand = 80;
    public static readonly RULE_beforeOrAfterClause = 81;
    public static readonly RULE_llenCommand = 82;
    public static readonly RULE_lposCommand = 83;
    public static readonly RULE_rankClause = 84;
    public static readonly RULE_maxLenClause = 85;
    public static readonly RULE_lpushCommand = 86;
    public static readonly RULE_lpushxCommand = 87;
    public static readonly RULE_rpushCommand = 88;
    public static readonly RULE_rpushxCommand = 89;
    public static readonly RULE_lrangeCommand = 90;
    public static readonly RULE_lremCommand = 91;
    public static readonly RULE_lsetCommand = 92;
    public static readonly RULE_ltrimCommand = 93;
    public static readonly RULE_copyCommand = 94;
    public static readonly RULE_dbClause = 95;
    public static readonly RULE_databaseName = 96;
    public static readonly RULE_deleteCommand = 97;
    public static readonly RULE_unlinkCommand = 98;
    public static readonly RULE_dumpCommand = 99;
    public static readonly RULE_existsCommand = 100;
    public static readonly RULE_expireCommand = 101;
    public static readonly RULE_expireAtCommand = 102;
    public static readonly RULE_pExpireCommand = 103;
    public static readonly RULE_pExpireAtCommand = 104;
    public static readonly RULE_expireOptions = 105;
    public static readonly RULE_expireTimeCommand = 106;
    public static readonly RULE_pExpireTimeCommand = 107;
    public static readonly RULE_keysCommand = 108;
    public static readonly RULE_moveCommand = 109;
    public static readonly RULE_objectCommand = 110;
    public static readonly RULE_objectOptions = 111;
    public static readonly RULE_persistCommand = 112;
    public static readonly RULE_ttlCommand = 113;
    public static readonly RULE_pTtlCommand = 114;
    public static readonly RULE_randomKeyCommand = 115;
    public static readonly RULE_renameCommand = 116;
    public static readonly RULE_renameNxCommand = 117;
    public static readonly RULE_scanCommand = 118;
    public static readonly RULE_matchClause = 119;
    public static readonly RULE_countClause = 120;
    public static readonly RULE_typeClause = 121;
    public static readonly RULE_touchCommand = 122;
    public static readonly RULE_typeCommand = 123;
    public static readonly RULE_waitCommand = 124;
    public static readonly RULE_stringSetCommand = 125;
    public static readonly RULE_keyExistenceClause = 126;
    public static readonly RULE_expirationClause = 127;
    public static readonly RULE_getCommand = 128;
    public static readonly RULE_incrementCommand = 129;
    public static readonly RULE_incrementByCommand = 130;
    public static readonly RULE_decrementCommand = 131;
    public static readonly RULE_decrementByCommand = 132;
    public static readonly RULE_appendCommand = 133;
    public static readonly RULE_getDeleteCommand = 134;
    public static readonly RULE_getExCommand = 135;
    public static readonly RULE_getRangeCommand = 136;
    public static readonly RULE_getSetCommand = 137;
    public static readonly RULE_mGetCommand = 138;
    public static readonly RULE_mSetCommand = 139;
    public static readonly RULE_mSetNxCommand = 140;
    public static readonly RULE_pSetExCommand = 141;
    public static readonly RULE_setExCommand = 142;
    public static readonly RULE_setNxCommand = 143;
    public static readonly RULE_setRangeCommand = 144;
    public static readonly RULE_stringLengthCommand = 145;
    public static readonly RULE_substringCommand = 146;
    public static readonly RULE_decimal = 147;
    public static readonly RULE_decimalScore = 148;
    public static readonly RULE_identifier = 149;
    public static readonly RULE_lexicalScore = 150;
    public static readonly RULE_stringKeyName = 151;
    public static readonly RULE_listKeyName = 152;
    public static readonly RULE_setKeyName = 153;
    public static readonly RULE_sortedSetKeyName = 154;
    public static readonly RULE_keyName = 155;
    public static readonly RULE_keyPattern = 156;

    public static readonly literalNames = [
        null, null, null, "'COPY'", "'DB'", "'REPLACE'", "'DEL'", "'UNLINK'", 
        "'DUMP'", "'EXISTS'", "'EXPIRE'", "'GT'", "'LT'", "'NX'", "'XX'", 
        "'EXPIREAT'", "'EXPIRETIME'", "'PEXPIRE'", "'PEXPIREAT'", "'PEXPIRETIME'", 
        "'KEYS'", "'MOVE'", "'OBJECT'", "'ENCODING'", "'FREQ'", "'IDLETIME'", 
        "'REFCOUNT'", "'PERSIST'", "'TTL'", "'PTTL'", "'RANDOMKEY'", "'RENAME'", 
        "'RENAMENX'", "'SCAN'", "'MATCH'", "'COUNT'", "'TYPE'", "'TOUCH'", 
        "'WAIT'", "'LEFT'", "'RIGHT'", "'BEFORE'", "'AFTER'", "'RANK'", 
        "'MAXLEN'", "'LIMIT'", "'MIN'", "'MAX'", "'CH'", "'WITHSCORE'", 
        "'WITHSCORES'", "'WEIGHTS'", "'AGGREGATE'", "'SUM'", "'BYSCORE'", 
        "'BYLEX'", "'REV'", "'SET'", "'GET'", "'INCR'", "'INCRBY'", "'DECR'", 
        "'DECRBY'", "'EX'", "'PX'", "'EXAT'", "'PXAT'", "'KEEPTTL'", "'APPEND'", 
        "'GETDEL'", "'GETEX'", "'GETRANGE'", "'GETSET'", "'MGET'", "'MSET'", 
        "'MSETNX'", "'PSETEX'", "'SETEX'", "'SETNX'", "'SETRANGE'", "'STRLEN'", 
        "'SUBSTR'", "'LMOVE'", "'BLMOVE'", "'LMPOP'", "'BLMPOP'", "'LPOP'", 
        "'BLPOP'", "'RPOP'", "'BRPOP'", "'RPOPLPUSH'", "'BRPOPLPUSH'", "'LINDEX'", 
        "'LINSERT'", "'LLEN'", "'LPOS'", "'LPUSH'", "'LPUSHX'", "'RPUSH'", 
        "'RPUSHX'", "'LRANGE'", "'LREM'", "'LSET'", "'LTRIM'", "'SADD'", 
        "'SCARD'", "'SDIFF'", "'SDIFFSTORE'", "'SINTER'", "'SINTERCARD'", 
        "'SINTERSTORE'", "'SISMEMBER'", "'SMISMEMBER'", "'SMEMBERS'", "'SMOVE'", 
        "'SPOP'", "'SRANDMEMBER'", "'SREM'", "'SSCAN'", "'SUNION'", "'SUNIONSTORE'", 
        "'ZMPOP'", "'BZMPOP'", "'ZPOPMAX'", "'BZPOPMAX'", "'ZPOPMIN'", "'BZPOPMIN'", 
        "'ZADD'", "'ZCARD'", "'ZCOUNT'", "'ZDIFF'", "'ZDIFFSTORE'", "'ZINCRBY'", 
        "'ZINTER'", "'ZINTERCARD'", "'ZINTERSTORE'", "'ZLEXCOUNT'", "'ZSCORE'", 
        "'ZMSCORE'", "'ZRANDMEMBER'", "'ZRANGE'", "'ZRANGEBYLEX'", "'ZRANGEBYSCORE'", 
        "'ZRANGESTORE'", "'ZRANK'", "'ZREM'", "'ZREMRANGEBYLEX'", "'ZREMRANGEBYRANK'", 
        "'ZREMRANGEBYSCORE'", "'ZREVRANGE'", "'ZREVRANGEBYLEX'", "'ZREVRANGEBYSCORE'", 
        "'ZREVRANK'", "'ZSCAN'", "'ZUNION'", "'ZUNIONSTORE'", "'''", "'\"'"
    ];

    public static readonly symbolicNames = [
        null, "SPACE", "NEWLINE", "COPY", "DB", "REPLACE", "DEL", "UNLINK", 
        "DUMP", "EXISTS", "EXPIRE", "GT", "LT", "NX", "XX", "EXPIREAT", 
        "EXPIRETIME", "PEXPIRE", "PEXPIREAT", "PEXPIRETIME", "KEYS", "MOVE", 
        "OBJECT", "ENCODING", "FREQ", "IDLETIME", "REFCOUNT", "PERSIST", 
        "TTL", "PTTL", "RANDOMKEY", "RENAME", "RENAMENX", "SCAN", "MATCH", 
        "COUNT", "TYPE", "TOUCH", "WAIT", "LEFT", "RIGHT", "BEFORE", "AFTER", 
        "RANK", "MAXLEN", "LIMIT", "MIN", "MAX", "CH", "WITHSCORE", "WITHSCORES", 
        "WEIGHTS", "AGGREGATE", "SUM", "BYSCORE", "BYLEX", "REV", "SET", 
        "GET", "INCR", "INCRBY", "DECR", "DECRBY", "EX", "PX", "EXAT", "PXAT", 
        "KEEPTTL", "APPEND", "GETDEL", "GETEX", "GETRANGE", "GETSET", "MGET", 
        "MSET", "MSETNX", "PSETEX", "SETEX", "SETNX", "SETRANGE", "STRLEN", 
        "SUBSTR", "LMOVE", "BLMOVE", "LMPOP", "BLMPOP", "LPOP", "BLPOP", 
        "RPOP", "BRPOP", "RPOPLPUSH", "BRPOPLPUSH", "LINDEX", "LINSERT", 
        "LLEN", "LPOS", "LPUSH", "LPUSHX", "RPUSH", "RPUSHX", "LRANGE", 
        "LREM", "LSET", "LTRIM", "SADD", "SCARD", "SDIFF", "SDIFFSTORE", 
        "SINTER", "SINTERCARD", "SINTERSTORE", "SISMEMBER", "SMISMEMBER", 
        "SMEMBERS", "SMOVE", "SPOP", "SRANDMEMBER", "SREM", "SSCAN", "SUNION", 
        "SUNIONSTORE", "ZMPOP", "BZMPOP", "ZPOPMAX", "BZPOPMAX", "ZPOPMIN", 
        "BZPOPMIN", "ZADD", "ZCARD", "ZCOUNT", "ZDIFF", "ZDIFFSTORE", "ZINCRBY", 
        "ZINTER", "ZINTERCARD", "ZINTERSTORE", "ZLEXCOUNT", "ZSCORE", "ZMSCORE", 
        "ZRANDMEMBER", "ZRANGE", "ZRANGEBYLEX", "ZRANGEBYSCORE", "ZRANGESTORE", 
        "ZRANK", "ZREM", "ZREMRANGEBYLEX", "ZREMRANGEBYRANK", "ZREMRANGEBYSCORE", 
        "ZREVRANGE", "ZREVRANGEBYLEX", "ZREVRANGEBYSCORE", "ZREVRANK", "ZSCAN", 
        "ZUNION", "ZUNIONSTORE", "SINGLE_QUOTE", "DOUBLE_QUOTE", "POSITIVE_DECIMAL_LITERAL", 
        "DECIMAL_LITERAL", "DECIMAL_SCORE_LITERAL", "IDENTIFIER"
    ];
    public static readonly ruleNames = [
        "root", "commands", "command", "commonCommand", "stringCommand", 
        "listCommand", "setCommand", "sortedSetCommand", "zmpopCommand", 
        "bzmpopCommand", "zpopmaxCommand", "bzpopmaxCommand", "zpopminCommand", 
        "bzpopminCommand", "minMaxClause", "zaddCommand", "keyUpdateClause", 
        "scoreMemberClause", "zcardCommand", "zcountCommand", "zdiffCommand", 
        "zdiffstoreCommand", "zincrbyCommand", "zinterCommand", "zintercardCommand", 
        "zinterstoreCommand", "weightsClause", "aggregateClause", "zlexcountCommand", 
        "zscoreCommand", "zmscoreCommand", "zrandmemberCommand", "zrangeCommand", 
        "zrangebylexCommand", "zrangebyscoreCommand", "zrangestoreCommand", 
        "rangeTypeClause", "limitOffsetClause", "zrankCommand", "zrevrankCommand", 
        "zremCommand", "zremrangebylexCommand", "zremrangebyrankCommand", 
        "zremrangebyscoreCommand", "zrevrangeCommand", "zrevrangebylexCommand", 
        "zrevrangebyscoreCommand", "zscanCommand", "zunionCommand", "zunionstoreCommand", 
        "saddCommand", "scardCommand", "sdiffCommand", "sdiffstoreCommand", 
        "sinterCommand", "sintercardCommand", "limitClause", "sinterstoreCommand", 
        "sismemberCommand", "smismemberCommand", "smembersCommand", "smoveCommand", 
        "spopCommand", "srandmemberCommand", "sremCommand", "sscanComman", 
        "sunionCommand", "sunionstoreCommand", "lmoveCommand", "leftOrRightClause", 
        "blmoveCommand", "lmpopCommand", "blmpopCommand", "lpopCommand", 
        "blpopCommand", "rpopCommand", "brpopCommand", "rpopLpushCommand", 
        "brpopLpushCommand", "lindexCommand", "linsertCommand", "beforeOrAfterClause", 
        "llenCommand", "lposCommand", "rankClause", "maxLenClause", "lpushCommand", 
        "lpushxCommand", "rpushCommand", "rpushxCommand", "lrangeCommand", 
        "lremCommand", "lsetCommand", "ltrimCommand", "copyCommand", "dbClause", 
        "databaseName", "deleteCommand", "unlinkCommand", "dumpCommand", 
        "existsCommand", "expireCommand", "expireAtCommand", "pExpireCommand", 
        "pExpireAtCommand", "expireOptions", "expireTimeCommand", "pExpireTimeCommand", 
        "keysCommand", "moveCommand", "objectCommand", "objectOptions", 
        "persistCommand", "ttlCommand", "pTtlCommand", "randomKeyCommand", 
        "renameCommand", "renameNxCommand", "scanCommand", "matchClause", 
        "countClause", "typeClause", "touchCommand", "typeCommand", "waitCommand", 
        "stringSetCommand", "keyExistenceClause", "expirationClause", "getCommand", 
        "incrementCommand", "incrementByCommand", "decrementCommand", "decrementByCommand", 
        "appendCommand", "getDeleteCommand", "getExCommand", "getRangeCommand", 
        "getSetCommand", "mGetCommand", "mSetCommand", "mSetNxCommand", 
        "pSetExCommand", "setExCommand", "setNxCommand", "setRangeCommand", 
        "stringLengthCommand", "substringCommand", "decimal", "decimalScore", 
        "identifier", "lexicalScore", "stringKeyName", "listKeyName", "setKeyName", 
        "sortedSetKeyName", "keyName", "keyPattern",
    ];

    public get grammarFileName(): string { return "RedisParser.g4"; }
    public get literalNames(): (string | null)[] { return RedisParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return RedisParser.symbolicNames; }
    public get ruleNames(): string[] { return RedisParser.ruleNames; }
    public get serializedATN(): number[] { return RedisParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, RedisParser._ATN, RedisParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, RedisParser.RULE_root);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 315;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4169107400) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2113929331) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 4294967295) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & 4294967295) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 16777215) !== 0)) {
                {
                this.state = 314;
                this.commands();
                }
            }

            this.state = 317;
            this.match(RedisParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commands(): CommandsContext {
        let localContext = new CommandsContext(this.context, this.state);
        this.enterRule(localContext, 2, RedisParser.RULE_commands);
        let _la: number;
        try {
            this.state = 334;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 319;
                this.command();
                this.state = 323;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 2) {
                    {
                    {
                    this.state = 320;
                    this.match(RedisParser.NEWLINE);
                    }
                    }
                    this.state = 325;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 326;
                this.command();
                this.state = 328;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 327;
                    this.match(RedisParser.NEWLINE);
                    }
                    }
                    this.state = 330;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 2);
                this.state = 332;
                this.commands();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public command(): CommandContext {
        let localContext = new CommandContext(this.context, this.state);
        this.enterRule(localContext, 4, RedisParser.RULE_command);
        try {
            this.state = 341;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.COPY:
            case RedisParser.DEL:
            case RedisParser.UNLINK:
            case RedisParser.DUMP:
            case RedisParser.EXISTS:
            case RedisParser.EXPIRE:
            case RedisParser.EXPIREAT:
            case RedisParser.EXPIRETIME:
            case RedisParser.PEXPIRE:
            case RedisParser.PEXPIREAT:
            case RedisParser.PEXPIRETIME:
            case RedisParser.KEYS:
            case RedisParser.MOVE:
            case RedisParser.OBJECT:
            case RedisParser.PERSIST:
            case RedisParser.TTL:
            case RedisParser.PTTL:
            case RedisParser.RANDOMKEY:
            case RedisParser.RENAME:
            case RedisParser.RENAMENX:
            case RedisParser.SCAN:
            case RedisParser.TYPE:
            case RedisParser.TOUCH:
            case RedisParser.WAIT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 336;
                this.commonCommand();
                }
                break;
            case RedisParser.SET:
            case RedisParser.GET:
            case RedisParser.INCR:
            case RedisParser.INCRBY:
            case RedisParser.DECR:
            case RedisParser.DECRBY:
            case RedisParser.APPEND:
            case RedisParser.GETDEL:
            case RedisParser.GETEX:
            case RedisParser.GETRANGE:
            case RedisParser.GETSET:
            case RedisParser.MGET:
            case RedisParser.MSET:
            case RedisParser.MSETNX:
            case RedisParser.PSETEX:
            case RedisParser.SETEX:
            case RedisParser.SETNX:
            case RedisParser.SETRANGE:
            case RedisParser.STRLEN:
            case RedisParser.SUBSTR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 337;
                this.stringCommand();
                }
                break;
            case RedisParser.LMOVE:
            case RedisParser.BLMOVE:
            case RedisParser.LMPOP:
            case RedisParser.BLMPOP:
            case RedisParser.LPOP:
            case RedisParser.BLPOP:
            case RedisParser.RPOP:
            case RedisParser.BRPOP:
            case RedisParser.RPOPLPUSH:
            case RedisParser.BRPOPLPUSH:
            case RedisParser.LINDEX:
            case RedisParser.LINSERT:
            case RedisParser.LLEN:
            case RedisParser.LPOS:
            case RedisParser.LPUSH:
            case RedisParser.LPUSHX:
            case RedisParser.RPUSH:
            case RedisParser.RPUSHX:
            case RedisParser.LRANGE:
            case RedisParser.LREM:
            case RedisParser.LSET:
            case RedisParser.LTRIM:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 338;
                this.listCommand();
                }
                break;
            case RedisParser.SADD:
            case RedisParser.SCARD:
            case RedisParser.SDIFF:
            case RedisParser.SDIFFSTORE:
            case RedisParser.SINTER:
            case RedisParser.SINTERCARD:
            case RedisParser.SINTERSTORE:
            case RedisParser.SISMEMBER:
            case RedisParser.SMISMEMBER:
            case RedisParser.SMEMBERS:
            case RedisParser.SMOVE:
            case RedisParser.SPOP:
            case RedisParser.SRANDMEMBER:
            case RedisParser.SREM:
            case RedisParser.SSCAN:
            case RedisParser.SUNION:
            case RedisParser.SUNIONSTORE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 339;
                this.setCommand();
                }
                break;
            case RedisParser.ZMPOP:
            case RedisParser.BZMPOP:
            case RedisParser.ZPOPMAX:
            case RedisParser.BZPOPMAX:
            case RedisParser.ZPOPMIN:
            case RedisParser.BZPOPMIN:
            case RedisParser.ZADD:
            case RedisParser.ZCARD:
            case RedisParser.ZCOUNT:
            case RedisParser.ZDIFF:
            case RedisParser.ZDIFFSTORE:
            case RedisParser.ZINCRBY:
            case RedisParser.ZINTER:
            case RedisParser.ZINTERCARD:
            case RedisParser.ZINTERSTORE:
            case RedisParser.ZLEXCOUNT:
            case RedisParser.ZSCORE:
            case RedisParser.ZMSCORE:
            case RedisParser.ZRANDMEMBER:
            case RedisParser.ZRANGE:
            case RedisParser.ZRANGEBYLEX:
            case RedisParser.ZRANGEBYSCORE:
            case RedisParser.ZRANGESTORE:
            case RedisParser.ZRANK:
            case RedisParser.ZREM:
            case RedisParser.ZREMRANGEBYLEX:
            case RedisParser.ZREMRANGEBYRANK:
            case RedisParser.ZREMRANGEBYSCORE:
            case RedisParser.ZREVRANGE:
            case RedisParser.ZREVRANGEBYLEX:
            case RedisParser.ZREVRANGEBYSCORE:
            case RedisParser.ZREVRANK:
            case RedisParser.ZSCAN:
            case RedisParser.ZUNION:
            case RedisParser.ZUNIONSTORE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 340;
                this.sortedSetCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonCommand(): CommonCommandContext {
        let localContext = new CommonCommandContext(this.context, this.state);
        this.enterRule(localContext, 6, RedisParser.RULE_commonCommand);
        try {
            this.state = 367;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.COPY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 343;
                this.copyCommand();
                }
                break;
            case RedisParser.DEL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 344;
                this.deleteCommand();
                }
                break;
            case RedisParser.UNLINK:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 345;
                this.unlinkCommand();
                }
                break;
            case RedisParser.DUMP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 346;
                this.dumpCommand();
                }
                break;
            case RedisParser.EXISTS:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 347;
                this.existsCommand();
                }
                break;
            case RedisParser.EXPIRE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 348;
                this.expireCommand();
                }
                break;
            case RedisParser.EXPIREAT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 349;
                this.expireAtCommand();
                }
                break;
            case RedisParser.EXPIRETIME:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 350;
                this.expireTimeCommand();
                }
                break;
            case RedisParser.PEXPIRE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 351;
                this.pExpireCommand();
                }
                break;
            case RedisParser.PEXPIREAT:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 352;
                this.pExpireAtCommand();
                }
                break;
            case RedisParser.PEXPIRETIME:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 353;
                this.pExpireTimeCommand();
                }
                break;
            case RedisParser.KEYS:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 354;
                this.keysCommand();
                }
                break;
            case RedisParser.MOVE:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 355;
                this.moveCommand();
                }
                break;
            case RedisParser.OBJECT:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 356;
                this.objectCommand();
                }
                break;
            case RedisParser.PERSIST:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 357;
                this.persistCommand();
                }
                break;
            case RedisParser.TTL:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 358;
                this.ttlCommand();
                }
                break;
            case RedisParser.PTTL:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 359;
                this.pTtlCommand();
                }
                break;
            case RedisParser.RANDOMKEY:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 360;
                this.randomKeyCommand();
                }
                break;
            case RedisParser.RENAME:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 361;
                this.renameCommand();
                }
                break;
            case RedisParser.RENAMENX:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 362;
                this.renameNxCommand();
                }
                break;
            case RedisParser.SCAN:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 363;
                this.scanCommand();
                }
                break;
            case RedisParser.TOUCH:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 364;
                this.touchCommand();
                }
                break;
            case RedisParser.TYPE:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 365;
                this.typeCommand();
                }
                break;
            case RedisParser.WAIT:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 366;
                this.waitCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringCommand(): StringCommandContext {
        let localContext = new StringCommandContext(this.context, this.state);
        this.enterRule(localContext, 8, RedisParser.RULE_stringCommand);
        try {
            this.state = 389;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 369;
                this.stringSetCommand();
                }
                break;
            case RedisParser.GET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 370;
                this.getCommand();
                }
                break;
            case RedisParser.INCR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 371;
                this.incrementCommand();
                }
                break;
            case RedisParser.INCRBY:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 372;
                this.incrementByCommand();
                }
                break;
            case RedisParser.DECR:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 373;
                this.decrementCommand();
                }
                break;
            case RedisParser.DECRBY:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 374;
                this.decrementByCommand();
                }
                break;
            case RedisParser.APPEND:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 375;
                this.appendCommand();
                }
                break;
            case RedisParser.GETDEL:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 376;
                this.getDeleteCommand();
                }
                break;
            case RedisParser.GETEX:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 377;
                this.getExCommand();
                }
                break;
            case RedisParser.GETRANGE:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 378;
                this.getRangeCommand();
                }
                break;
            case RedisParser.GETSET:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 379;
                this.getSetCommand();
                }
                break;
            case RedisParser.MGET:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 380;
                this.mGetCommand();
                }
                break;
            case RedisParser.MSET:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 381;
                this.mSetCommand();
                }
                break;
            case RedisParser.MSETNX:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 382;
                this.mSetNxCommand();
                }
                break;
            case RedisParser.PSETEX:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 383;
                this.pSetExCommand();
                }
                break;
            case RedisParser.SETEX:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 384;
                this.setExCommand();
                }
                break;
            case RedisParser.SETNX:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 385;
                this.setNxCommand();
                }
                break;
            case RedisParser.SETRANGE:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 386;
                this.setRangeCommand();
                }
                break;
            case RedisParser.STRLEN:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 387;
                this.stringLengthCommand();
                }
                break;
            case RedisParser.SUBSTR:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 388;
                this.substringCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listCommand(): ListCommandContext {
        let localContext = new ListCommandContext(this.context, this.state);
        this.enterRule(localContext, 10, RedisParser.RULE_listCommand);
        try {
            this.state = 413;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.LMOVE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 391;
                this.lmoveCommand();
                }
                break;
            case RedisParser.BLMOVE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 392;
                this.blmoveCommand();
                }
                break;
            case RedisParser.LMPOP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 393;
                this.lmpopCommand();
                }
                break;
            case RedisParser.BLMPOP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 394;
                this.blmpopCommand();
                }
                break;
            case RedisParser.LPOP:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 395;
                this.lpopCommand();
                }
                break;
            case RedisParser.BLPOP:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 396;
                this.blpopCommand();
                }
                break;
            case RedisParser.RPOP:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 397;
                this.rpopCommand();
                }
                break;
            case RedisParser.BRPOP:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 398;
                this.brpopCommand();
                }
                break;
            case RedisParser.RPOPLPUSH:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 399;
                this.rpopLpushCommand();
                }
                break;
            case RedisParser.BRPOPLPUSH:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 400;
                this.brpopLpushCommand();
                }
                break;
            case RedisParser.LINDEX:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 401;
                this.lindexCommand();
                }
                break;
            case RedisParser.LINSERT:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 402;
                this.linsertCommand();
                }
                break;
            case RedisParser.LLEN:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 403;
                this.llenCommand();
                }
                break;
            case RedisParser.LPOS:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 404;
                this.lposCommand();
                }
                break;
            case RedisParser.LPUSH:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 405;
                this.lpushCommand();
                }
                break;
            case RedisParser.LPUSHX:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 406;
                this.lpushxCommand();
                }
                break;
            case RedisParser.RPUSH:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 407;
                this.rpushCommand();
                }
                break;
            case RedisParser.RPUSHX:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 408;
                this.rpushxCommand();
                }
                break;
            case RedisParser.LRANGE:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 409;
                this.lrangeCommand();
                }
                break;
            case RedisParser.LREM:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 410;
                this.lremCommand();
                }
                break;
            case RedisParser.LSET:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 411;
                this.lsetCommand();
                }
                break;
            case RedisParser.LTRIM:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 412;
                this.ltrimCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setCommand(): SetCommandContext {
        let localContext = new SetCommandContext(this.context, this.state);
        this.enterRule(localContext, 12, RedisParser.RULE_setCommand);
        try {
            this.state = 432;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.SADD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 415;
                this.saddCommand();
                }
                break;
            case RedisParser.SCARD:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 416;
                this.scardCommand();
                }
                break;
            case RedisParser.SDIFF:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 417;
                this.sdiffCommand();
                }
                break;
            case RedisParser.SDIFFSTORE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 418;
                this.sdiffstoreCommand();
                }
                break;
            case RedisParser.SINTER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 419;
                this.sinterCommand();
                }
                break;
            case RedisParser.SINTERCARD:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 420;
                this.sintercardCommand();
                }
                break;
            case RedisParser.SINTERSTORE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 421;
                this.sinterstoreCommand();
                }
                break;
            case RedisParser.SISMEMBER:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 422;
                this.sismemberCommand();
                }
                break;
            case RedisParser.SMISMEMBER:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 423;
                this.smismemberCommand();
                }
                break;
            case RedisParser.SMEMBERS:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 424;
                this.smembersCommand();
                }
                break;
            case RedisParser.SMOVE:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 425;
                this.smoveCommand();
                }
                break;
            case RedisParser.SPOP:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 426;
                this.spopCommand();
                }
                break;
            case RedisParser.SRANDMEMBER:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 427;
                this.srandmemberCommand();
                }
                break;
            case RedisParser.SREM:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 428;
                this.sremCommand();
                }
                break;
            case RedisParser.SSCAN:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 429;
                this.sscanComman();
                }
                break;
            case RedisParser.SUNION:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 430;
                this.sunionCommand();
                }
                break;
            case RedisParser.SUNIONSTORE:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 431;
                this.sunionstoreCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortedSetCommand(): SortedSetCommandContext {
        let localContext = new SortedSetCommandContext(this.context, this.state);
        this.enterRule(localContext, 14, RedisParser.RULE_sortedSetCommand);
        try {
            this.state = 469;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.ZMPOP:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 434;
                this.zmpopCommand();
                }
                break;
            case RedisParser.BZMPOP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 435;
                this.bzmpopCommand();
                }
                break;
            case RedisParser.ZPOPMAX:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 436;
                this.zpopmaxCommand();
                }
                break;
            case RedisParser.BZPOPMAX:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 437;
                this.bzpopmaxCommand();
                }
                break;
            case RedisParser.ZPOPMIN:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 438;
                this.zpopminCommand();
                }
                break;
            case RedisParser.BZPOPMIN:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 439;
                this.bzpopminCommand();
                }
                break;
            case RedisParser.ZADD:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 440;
                this.zaddCommand();
                }
                break;
            case RedisParser.ZCARD:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 441;
                this.zcardCommand();
                }
                break;
            case RedisParser.ZCOUNT:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 442;
                this.zcountCommand();
                }
                break;
            case RedisParser.ZDIFF:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 443;
                this.zdiffCommand();
                }
                break;
            case RedisParser.ZDIFFSTORE:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 444;
                this.zdiffstoreCommand();
                }
                break;
            case RedisParser.ZINCRBY:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 445;
                this.zincrbyCommand();
                }
                break;
            case RedisParser.ZINTER:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 446;
                this.zinterCommand();
                }
                break;
            case RedisParser.ZINTERCARD:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 447;
                this.zintercardCommand();
                }
                break;
            case RedisParser.ZINTERSTORE:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 448;
                this.zinterstoreCommand();
                }
                break;
            case RedisParser.ZLEXCOUNT:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 449;
                this.zlexcountCommand();
                }
                break;
            case RedisParser.ZSCORE:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 450;
                this.zscoreCommand();
                }
                break;
            case RedisParser.ZMSCORE:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 451;
                this.zmscoreCommand();
                }
                break;
            case RedisParser.ZRANDMEMBER:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 452;
                this.zrandmemberCommand();
                }
                break;
            case RedisParser.ZRANGE:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 453;
                this.zrangeCommand();
                }
                break;
            case RedisParser.ZRANGEBYLEX:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 454;
                this.zrangebylexCommand();
                }
                break;
            case RedisParser.ZRANGEBYSCORE:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 455;
                this.zrangebyscoreCommand();
                }
                break;
            case RedisParser.ZRANGESTORE:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 456;
                this.zrangestoreCommand();
                }
                break;
            case RedisParser.ZRANK:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 457;
                this.zrankCommand();
                }
                break;
            case RedisParser.ZREVRANK:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 458;
                this.zrevrankCommand();
                }
                break;
            case RedisParser.ZREM:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 459;
                this.zremCommand();
                }
                break;
            case RedisParser.ZREMRANGEBYLEX:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 460;
                this.zremrangebylexCommand();
                }
                break;
            case RedisParser.ZREMRANGEBYRANK:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 461;
                this.zremrangebyrankCommand();
                }
                break;
            case RedisParser.ZREMRANGEBYSCORE:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 462;
                this.zremrangebyscoreCommand();
                }
                break;
            case RedisParser.ZREVRANGE:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 463;
                this.zrevrangeCommand();
                }
                break;
            case RedisParser.ZREVRANGEBYLEX:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 464;
                this.zrevrangebylexCommand();
                }
                break;
            case RedisParser.ZREVRANGEBYSCORE:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 465;
                this.zrevrangebyscoreCommand();
                }
                break;
            case RedisParser.ZSCAN:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 466;
                this.zscanCommand();
                }
                break;
            case RedisParser.ZUNION:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 467;
                this.zunionCommand();
                }
                break;
            case RedisParser.ZUNIONSTORE:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 468;
                this.zunionstoreCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zmpopCommand(): ZmpopCommandContext {
        let localContext = new ZmpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 16, RedisParser.RULE_zmpopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 471;
            this.match(RedisParser.ZMPOP);
            this.state = 472;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 474;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 473;
                this.sortedSetKeyName();
                }
                }
                this.state = 476;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            this.state = 478;
            this.minMaxClause();
            this.state = 480;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 479;
                this.countClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bzmpopCommand(): BzmpopCommandContext {
        let localContext = new BzmpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 18, RedisParser.RULE_bzmpopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 482;
            this.match(RedisParser.BZMPOP);
            this.state = 483;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 484;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 486;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 485;
                this.sortedSetKeyName();
                }
                }
                this.state = 488;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            this.state = 490;
            this.minMaxClause();
            this.state = 492;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 491;
                this.countClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zpopmaxCommand(): ZpopmaxCommandContext {
        let localContext = new ZpopmaxCommandContext(this.context, this.state);
        this.enterRule(localContext, 20, RedisParser.RULE_zpopmaxCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 494;
            this.match(RedisParser.ZPOPMAX);
            this.state = 495;
            this.sortedSetKeyName();
            this.state = 497;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 158) {
                {
                this.state = 496;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bzpopmaxCommand(): BzpopmaxCommandContext {
        let localContext = new BzpopmaxCommandContext(this.context, this.state);
        this.enterRule(localContext, 22, RedisParser.RULE_bzpopmaxCommand);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 499;
            this.match(RedisParser.BZPOPMAX);
            this.state = 501;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 500;
                    this.sortedSetKeyName();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 503;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 15, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 505;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zpopminCommand(): ZpopminCommandContext {
        let localContext = new ZpopminCommandContext(this.context, this.state);
        this.enterRule(localContext, 24, RedisParser.RULE_zpopminCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 507;
            this.match(RedisParser.ZPOPMIN);
            this.state = 508;
            this.sortedSetKeyName();
            this.state = 510;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 158) {
                {
                this.state = 509;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bzpopminCommand(): BzpopminCommandContext {
        let localContext = new BzpopminCommandContext(this.context, this.state);
        this.enterRule(localContext, 26, RedisParser.RULE_bzpopminCommand);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 512;
            this.match(RedisParser.BZPOPMIN);
            this.state = 514;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 513;
                    this.sortedSetKeyName();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 516;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 17, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 518;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public minMaxClause(): MinMaxClauseContext {
        let localContext = new MinMaxClauseContext(this.context, this.state);
        this.enterRule(localContext, 28, RedisParser.RULE_minMaxClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 520;
            _la = this.tokenStream.LA(1);
            if(!(_la === 46 || _la === 47)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zaddCommand(): ZaddCommandContext {
        let localContext = new ZaddCommandContext(this.context, this.state);
        this.enterRule(localContext, 30, RedisParser.RULE_zaddCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 522;
            this.match(RedisParser.ZADD);
            this.state = 523;
            this.sortedSetKeyName();
            this.state = 525;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 13 || _la === 14) {
                {
                this.state = 524;
                this.keyExistenceClause();
                }
            }

            this.state = 528;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 11 || _la === 12) {
                {
                this.state = 527;
                this.keyUpdateClause();
                }
            }

            this.state = 531;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 48) {
                {
                this.state = 530;
                this.match(RedisParser.CH);
                }
            }

            this.state = 534;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 59) {
                {
                this.state = 533;
                this.match(RedisParser.INCR);
                }
            }

            this.state = 537;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 536;
                this.scoreMemberClause();
                }
                }
                this.state = 539;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 158 || _la === 159);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyUpdateClause(): KeyUpdateClauseContext {
        let localContext = new KeyUpdateClauseContext(this.context, this.state);
        this.enterRule(localContext, 32, RedisParser.RULE_keyUpdateClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 541;
            _la = this.tokenStream.LA(1);
            if(!(_la === 11 || _la === 12)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scoreMemberClause(): ScoreMemberClauseContext {
        let localContext = new ScoreMemberClauseContext(this.context, this.state);
        this.enterRule(localContext, 34, RedisParser.RULE_scoreMemberClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 543;
            this.decimal();
            this.state = 544;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zcardCommand(): ZcardCommandContext {
        let localContext = new ZcardCommandContext(this.context, this.state);
        this.enterRule(localContext, 36, RedisParser.RULE_zcardCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 546;
            this.match(RedisParser.ZCARD);
            this.state = 547;
            this.sortedSetKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zcountCommand(): ZcountCommandContext {
        let localContext = new ZcountCommandContext(this.context, this.state);
        this.enterRule(localContext, 38, RedisParser.RULE_zcountCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 549;
            this.match(RedisParser.ZCOUNT);
            this.state = 550;
            this.sortedSetKeyName();
            this.state = 551;
            this.decimalScore();
            this.state = 552;
            this.decimalScore();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zdiffCommand(): ZdiffCommandContext {
        let localContext = new ZdiffCommandContext(this.context, this.state);
        this.enterRule(localContext, 40, RedisParser.RULE_zdiffCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 554;
            this.match(RedisParser.ZDIFF);
            this.state = 555;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 557;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 556;
                this.sortedSetKeyName();
                }
                }
                this.state = 559;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            this.state = 562;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 50) {
                {
                this.state = 561;
                this.match(RedisParser.WITHSCORES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zdiffstoreCommand(): ZdiffstoreCommandContext {
        let localContext = new ZdiffstoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 42, RedisParser.RULE_zdiffstoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 564;
            this.match(RedisParser.ZDIFFSTORE);
            this.state = 565;
            this.identifier();
            this.state = 566;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 568;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 567;
                this.sortedSetKeyName();
                }
                }
                this.state = 570;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zincrbyCommand(): ZincrbyCommandContext {
        let localContext = new ZincrbyCommandContext(this.context, this.state);
        this.enterRule(localContext, 44, RedisParser.RULE_zincrbyCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 572;
            this.match(RedisParser.ZINCRBY);
            this.state = 573;
            this.sortedSetKeyName();
            this.state = 574;
            this.decimal();
            this.state = 575;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zinterCommand(): ZinterCommandContext {
        let localContext = new ZinterCommandContext(this.context, this.state);
        this.enterRule(localContext, 46, RedisParser.RULE_zinterCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 577;
            this.match(RedisParser.ZINTER);
            this.state = 578;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 580;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 579;
                this.sortedSetKeyName();
                }
                }
                this.state = 582;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            this.state = 585;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 584;
                this.weightsClause();
                }
            }

            this.state = 588;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 52) {
                {
                this.state = 587;
                this.aggregateClause();
                }
            }

            this.state = 591;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 50) {
                {
                this.state = 590;
                this.match(RedisParser.WITHSCORES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zintercardCommand(): ZintercardCommandContext {
        let localContext = new ZintercardCommandContext(this.context, this.state);
        this.enterRule(localContext, 48, RedisParser.RULE_zintercardCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 593;
            this.match(RedisParser.ZINTERCARD);
            this.state = 594;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 596;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 595;
                this.sortedSetKeyName();
                }
                }
                this.state = 598;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            this.state = 601;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 600;
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zinterstoreCommand(): ZinterstoreCommandContext {
        let localContext = new ZinterstoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 50, RedisParser.RULE_zinterstoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 603;
            this.match(RedisParser.ZINTERSTORE);
            this.state = 604;
            this.identifier();
            this.state = 605;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 607;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 606;
                this.sortedSetKeyName();
                }
                }
                this.state = 609;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            this.state = 612;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 611;
                this.weightsClause();
                }
            }

            this.state = 615;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 52) {
                {
                this.state = 614;
                this.aggregateClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public weightsClause(): WeightsClauseContext {
        let localContext = new WeightsClauseContext(this.context, this.state);
        this.enterRule(localContext, 52, RedisParser.RULE_weightsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 617;
            this.match(RedisParser.WEIGHTS);
            this.state = 619;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 618;
                this.decimal();
                }
                }
                this.state = 621;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 158 || _la === 159);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregateClause(): AggregateClauseContext {
        let localContext = new AggregateClauseContext(this.context, this.state);
        this.enterRule(localContext, 54, RedisParser.RULE_aggregateClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 623;
            this.match(RedisParser.AGGREGATE);
            this.state = 624;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 131) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zlexcountCommand(): ZlexcountCommandContext {
        let localContext = new ZlexcountCommandContext(this.context, this.state);
        this.enterRule(localContext, 56, RedisParser.RULE_zlexcountCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 626;
            this.match(RedisParser.ZLEXCOUNT);
            this.state = 627;
            this.sortedSetKeyName();
            this.state = 628;
            this.lexicalScore();
            this.state = 629;
            this.lexicalScore();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zscoreCommand(): ZscoreCommandContext {
        let localContext = new ZscoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 58, RedisParser.RULE_zscoreCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 631;
            this.match(RedisParser.ZSCORE);
            this.state = 632;
            this.sortedSetKeyName();
            this.state = 633;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zmscoreCommand(): ZmscoreCommandContext {
        let localContext = new ZmscoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 60, RedisParser.RULE_zmscoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 635;
            this.match(RedisParser.ZMSCORE);
            this.state = 636;
            this.sortedSetKeyName();
            this.state = 638;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 637;
                this.identifier();
                }
                }
                this.state = 640;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zrandmemberCommand(): ZrandmemberCommandContext {
        let localContext = new ZrandmemberCommandContext(this.context, this.state);
        this.enterRule(localContext, 62, RedisParser.RULE_zrandmemberCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 642;
            this.match(RedisParser.ZRANDMEMBER);
            this.state = 643;
            this.sortedSetKeyName();
            this.state = 648;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 158 || _la === 159) {
                {
                this.state = 644;
                this.decimal();
                this.state = 646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 50) {
                    {
                    this.state = 645;
                    this.match(RedisParser.WITHSCORES);
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zrangeCommand(): ZrangeCommandContext {
        let localContext = new ZrangeCommandContext(this.context, this.state);
        this.enterRule(localContext, 64, RedisParser.RULE_zrangeCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 650;
            this.match(RedisParser.ZRANGE);
            this.state = 651;
            this.sortedSetKeyName();
            this.state = 652;
            this.lexicalScore();
            this.state = 653;
            this.lexicalScore();
            this.state = 655;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54 || _la === 55) {
                {
                this.state = 654;
                this.rangeTypeClause();
                }
            }

            this.state = 658;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56) {
                {
                this.state = 657;
                this.match(RedisParser.REV);
                }
            }

            this.state = 661;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 660;
                this.limitOffsetClause();
                }
            }

            this.state = 664;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 50) {
                {
                this.state = 663;
                this.match(RedisParser.WITHSCORES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zrangebylexCommand(): ZrangebylexCommandContext {
        let localContext = new ZrangebylexCommandContext(this.context, this.state);
        this.enterRule(localContext, 66, RedisParser.RULE_zrangebylexCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 666;
            this.match(RedisParser.ZRANGEBYLEX);
            this.state = 667;
            this.sortedSetKeyName();
            this.state = 668;
            this.lexicalScore();
            this.state = 669;
            this.lexicalScore();
            this.state = 671;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 670;
                this.limitOffsetClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zrangebyscoreCommand(): ZrangebyscoreCommandContext {
        let localContext = new ZrangebyscoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 68, RedisParser.RULE_zrangebyscoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 673;
            this.match(RedisParser.ZRANGEBYSCORE);
            this.state = 674;
            this.sortedSetKeyName();
            this.state = 675;
            this.decimalScore();
            this.state = 676;
            this.decimalScore();
            this.state = 678;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 50) {
                {
                this.state = 677;
                this.match(RedisParser.WITHSCORES);
                }
            }

            this.state = 681;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 680;
                this.limitOffsetClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zrangestoreCommand(): ZrangestoreCommandContext {
        let localContext = new ZrangestoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 70, RedisParser.RULE_zrangestoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 683;
            this.match(RedisParser.ZRANGESTORE);
            this.state = 684;
            this.identifier();
            this.state = 685;
            this.sortedSetKeyName();
            this.state = 686;
            this.lexicalScore();
            this.state = 687;
            this.lexicalScore();
            this.state = 689;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54 || _la === 55) {
                {
                this.state = 688;
                this.rangeTypeClause();
                }
            }

            this.state = 692;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56) {
                {
                this.state = 691;
                this.match(RedisParser.REV);
                }
            }

            this.state = 695;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 694;
                this.limitOffsetClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangeTypeClause(): RangeTypeClauseContext {
        let localContext = new RangeTypeClauseContext(this.context, this.state);
        this.enterRule(localContext, 72, RedisParser.RULE_rangeTypeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 697;
            _la = this.tokenStream.LA(1);
            if(!(_la === 54 || _la === 55)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitOffsetClause(): LimitOffsetClauseContext {
        let localContext = new LimitOffsetClauseContext(this.context, this.state);
        this.enterRule(localContext, 74, RedisParser.RULE_limitOffsetClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 699;
            this.match(RedisParser.LIMIT);
            this.state = 700;
            this.decimal();
            this.state = 701;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zrankCommand(): ZrankCommandContext {
        let localContext = new ZrankCommandContext(this.context, this.state);
        this.enterRule(localContext, 76, RedisParser.RULE_zrankCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 703;
            this.match(RedisParser.ZRANK);
            this.state = 704;
            this.sortedSetKeyName();
            this.state = 705;
            this.identifier();
            this.state = 707;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 49) {
                {
                this.state = 706;
                this.match(RedisParser.WITHSCORE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zrevrankCommand(): ZrevrankCommandContext {
        let localContext = new ZrevrankCommandContext(this.context, this.state);
        this.enterRule(localContext, 78, RedisParser.RULE_zrevrankCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 709;
            this.match(RedisParser.ZREVRANK);
            this.state = 710;
            this.sortedSetKeyName();
            this.state = 711;
            this.identifier();
            this.state = 713;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 49) {
                {
                this.state = 712;
                this.match(RedisParser.WITHSCORE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zremCommand(): ZremCommandContext {
        let localContext = new ZremCommandContext(this.context, this.state);
        this.enterRule(localContext, 80, RedisParser.RULE_zremCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 715;
            this.match(RedisParser.ZREM);
            this.state = 716;
            this.sortedSetKeyName();
            this.state = 718;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 717;
                this.identifier();
                }
                }
                this.state = 720;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zremrangebylexCommand(): ZremrangebylexCommandContext {
        let localContext = new ZremrangebylexCommandContext(this.context, this.state);
        this.enterRule(localContext, 82, RedisParser.RULE_zremrangebylexCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 722;
            this.match(RedisParser.ZREMRANGEBYLEX);
            this.state = 723;
            this.sortedSetKeyName();
            this.state = 724;
            this.lexicalScore();
            this.state = 725;
            this.lexicalScore();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zremrangebyrankCommand(): ZremrangebyrankCommandContext {
        let localContext = new ZremrangebyrankCommandContext(this.context, this.state);
        this.enterRule(localContext, 84, RedisParser.RULE_zremrangebyrankCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 727;
            this.match(RedisParser.ZREMRANGEBYRANK);
            this.state = 728;
            this.sortedSetKeyName();
            this.state = 729;
            this.decimal();
            this.state = 730;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zremrangebyscoreCommand(): ZremrangebyscoreCommandContext {
        let localContext = new ZremrangebyscoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 86, RedisParser.RULE_zremrangebyscoreCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 732;
            this.match(RedisParser.ZREMRANGEBYSCORE);
            this.state = 733;
            this.sortedSetKeyName();
            this.state = 734;
            this.decimalScore();
            this.state = 735;
            this.decimalScore();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zrevrangeCommand(): ZrevrangeCommandContext {
        let localContext = new ZrevrangeCommandContext(this.context, this.state);
        this.enterRule(localContext, 88, RedisParser.RULE_zrevrangeCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 737;
            this.match(RedisParser.ZREVRANGE);
            this.state = 738;
            this.sortedSetKeyName();
            this.state = 739;
            this.decimal();
            this.state = 740;
            this.decimal();
            this.state = 742;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 50) {
                {
                this.state = 741;
                this.match(RedisParser.WITHSCORES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zrevrangebylexCommand(): ZrevrangebylexCommandContext {
        let localContext = new ZrevrangebylexCommandContext(this.context, this.state);
        this.enterRule(localContext, 90, RedisParser.RULE_zrevrangebylexCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 744;
            this.match(RedisParser.ZREVRANGEBYLEX);
            this.state = 745;
            this.sortedSetKeyName();
            this.state = 746;
            this.lexicalScore();
            this.state = 747;
            this.lexicalScore();
            this.state = 749;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 748;
                this.limitOffsetClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zrevrangebyscoreCommand(): ZrevrangebyscoreCommandContext {
        let localContext = new ZrevrangebyscoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 92, RedisParser.RULE_zrevrangebyscoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 751;
            this.match(RedisParser.ZREVRANGEBYSCORE);
            this.state = 752;
            this.sortedSetKeyName();
            this.state = 753;
            this.decimalScore();
            this.state = 754;
            this.decimalScore();
            this.state = 756;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 50) {
                {
                this.state = 755;
                this.match(RedisParser.WITHSCORES);
                }
            }

            this.state = 759;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 758;
                this.limitOffsetClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zscanCommand(): ZscanCommandContext {
        let localContext = new ZscanCommandContext(this.context, this.state);
        this.enterRule(localContext, 94, RedisParser.RULE_zscanCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 761;
            this.match(RedisParser.ZSCAN);
            this.state = 762;
            this.sortedSetKeyName();
            this.state = 763;
            this.decimal();
            this.state = 765;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34) {
                {
                this.state = 764;
                this.matchClause();
                }
            }

            this.state = 768;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 767;
                this.countClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zunionCommand(): ZunionCommandContext {
        let localContext = new ZunionCommandContext(this.context, this.state);
        this.enterRule(localContext, 96, RedisParser.RULE_zunionCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 770;
            this.match(RedisParser.ZUNION);
            this.state = 771;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 773;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 772;
                this.sortedSetKeyName();
                }
                }
                this.state = 775;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            this.state = 778;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 777;
                this.weightsClause();
                }
            }

            this.state = 781;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 52) {
                {
                this.state = 780;
                this.aggregateClause();
                }
            }

            this.state = 784;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 50) {
                {
                this.state = 783;
                this.match(RedisParser.WITHSCORES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zunionstoreCommand(): ZunionstoreCommandContext {
        let localContext = new ZunionstoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 98, RedisParser.RULE_zunionstoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 786;
            this.match(RedisParser.ZUNIONSTORE);
            this.state = 787;
            this.identifier();
            this.state = 788;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 790;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 789;
                this.sortedSetKeyName();
                }
                }
                this.state = 792;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            this.state = 795;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 794;
                this.weightsClause();
                }
            }

            this.state = 798;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 52) {
                {
                this.state = 797;
                this.aggregateClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public saddCommand(): SaddCommandContext {
        let localContext = new SaddCommandContext(this.context, this.state);
        this.enterRule(localContext, 100, RedisParser.RULE_saddCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 800;
            this.match(RedisParser.SADD);
            this.state = 801;
            this.setKeyName();
            this.state = 803;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 802;
                this.identifier();
                }
                }
                this.state = 805;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scardCommand(): ScardCommandContext {
        let localContext = new ScardCommandContext(this.context, this.state);
        this.enterRule(localContext, 102, RedisParser.RULE_scardCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 807;
            this.match(RedisParser.SCARD);
            this.state = 808;
            this.setKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sdiffCommand(): SdiffCommandContext {
        let localContext = new SdiffCommandContext(this.context, this.state);
        this.enterRule(localContext, 104, RedisParser.RULE_sdiffCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 810;
            this.match(RedisParser.SDIFF);
            this.state = 812;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 811;
                this.setKeyName();
                }
                }
                this.state = 814;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sdiffstoreCommand(): SdiffstoreCommandContext {
        let localContext = new SdiffstoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 106, RedisParser.RULE_sdiffstoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 816;
            this.match(RedisParser.SDIFFSTORE);
            this.state = 817;
            this.identifier();
            this.state = 819;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 818;
                this.setKeyName();
                }
                }
                this.state = 821;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sinterCommand(): SinterCommandContext {
        let localContext = new SinterCommandContext(this.context, this.state);
        this.enterRule(localContext, 108, RedisParser.RULE_sinterCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 823;
            this.match(RedisParser.SINTER);
            this.state = 825;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 824;
                this.setKeyName();
                }
                }
                this.state = 827;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sintercardCommand(): SintercardCommandContext {
        let localContext = new SintercardCommandContext(this.context, this.state);
        this.enterRule(localContext, 110, RedisParser.RULE_sintercardCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 829;
            this.match(RedisParser.SINTERCARD);
            this.state = 830;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 832;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 831;
                this.setKeyName();
                }
                }
                this.state = 834;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            this.state = 837;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 836;
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 112, RedisParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 839;
            this.match(RedisParser.LIMIT);
            this.state = 840;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sinterstoreCommand(): SinterstoreCommandContext {
        let localContext = new SinterstoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 114, RedisParser.RULE_sinterstoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 842;
            this.match(RedisParser.SINTERSTORE);
            this.state = 843;
            this.identifier();
            this.state = 845;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 844;
                this.setKeyName();
                }
                }
                this.state = 847;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sismemberCommand(): SismemberCommandContext {
        let localContext = new SismemberCommandContext(this.context, this.state);
        this.enterRule(localContext, 116, RedisParser.RULE_sismemberCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 849;
            this.match(RedisParser.SISMEMBER);
            this.state = 850;
            this.setKeyName();
            this.state = 851;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public smismemberCommand(): SmismemberCommandContext {
        let localContext = new SmismemberCommandContext(this.context, this.state);
        this.enterRule(localContext, 118, RedisParser.RULE_smismemberCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 853;
            this.match(RedisParser.SMISMEMBER);
            this.state = 854;
            this.setKeyName();
            this.state = 856;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 855;
                this.identifier();
                }
                }
                this.state = 858;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public smembersCommand(): SmembersCommandContext {
        let localContext = new SmembersCommandContext(this.context, this.state);
        this.enterRule(localContext, 120, RedisParser.RULE_smembersCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 860;
            this.match(RedisParser.SMEMBERS);
            this.state = 861;
            this.setKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public smoveCommand(): SmoveCommandContext {
        let localContext = new SmoveCommandContext(this.context, this.state);
        this.enterRule(localContext, 122, RedisParser.RULE_smoveCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 863;
            this.match(RedisParser.SMOVE);
            this.state = 864;
            this.setKeyName();
            this.state = 865;
            this.setKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public spopCommand(): SpopCommandContext {
        let localContext = new SpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 124, RedisParser.RULE_spopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 867;
            this.match(RedisParser.SPOP);
            this.state = 868;
            this.setKeyName();
            this.state = 870;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 158) {
                {
                this.state = 869;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public srandmemberCommand(): SrandmemberCommandContext {
        let localContext = new SrandmemberCommandContext(this.context, this.state);
        this.enterRule(localContext, 126, RedisParser.RULE_srandmemberCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 872;
            this.match(RedisParser.SRANDMEMBER);
            this.state = 873;
            this.setKeyName();
            this.state = 875;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 158 || _la === 159) {
                {
                this.state = 874;
                this.decimal();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sremCommand(): SremCommandContext {
        let localContext = new SremCommandContext(this.context, this.state);
        this.enterRule(localContext, 128, RedisParser.RULE_sremCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 877;
            this.match(RedisParser.SREM);
            this.state = 878;
            this.setKeyName();
            this.state = 880;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 879;
                this.identifier();
                }
                }
                this.state = 882;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sscanComman(): SscanCommanContext {
        let localContext = new SscanCommanContext(this.context, this.state);
        this.enterRule(localContext, 130, RedisParser.RULE_sscanComman);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 884;
            this.match(RedisParser.SSCAN);
            this.state = 885;
            this.setKeyName();
            this.state = 886;
            this.decimal();
            this.state = 888;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34) {
                {
                this.state = 887;
                this.matchClause();
                }
            }

            this.state = 891;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 890;
                this.countClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sunionCommand(): SunionCommandContext {
        let localContext = new SunionCommandContext(this.context, this.state);
        this.enterRule(localContext, 132, RedisParser.RULE_sunionCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 893;
            this.match(RedisParser.SUNION);
            this.state = 895;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 894;
                this.setKeyName();
                }
                }
                this.state = 897;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sunionstoreCommand(): SunionstoreCommandContext {
        let localContext = new SunionstoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 134, RedisParser.RULE_sunionstoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 899;
            this.match(RedisParser.SUNIONSTORE);
            this.state = 900;
            this.identifier();
            this.state = 902;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 901;
                this.setKeyName();
                }
                }
                this.state = 904;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lmoveCommand(): LmoveCommandContext {
        let localContext = new LmoveCommandContext(this.context, this.state);
        this.enterRule(localContext, 136, RedisParser.RULE_lmoveCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 906;
            this.match(RedisParser.LMOVE);
            this.state = 907;
            this.listKeyName();
            this.state = 908;
            this.listKeyName();
            this.state = 909;
            this.leftOrRightClause();
            this.state = 910;
            this.leftOrRightClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public leftOrRightClause(): LeftOrRightClauseContext {
        let localContext = new LeftOrRightClauseContext(this.context, this.state);
        this.enterRule(localContext, 138, RedisParser.RULE_leftOrRightClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 912;
            _la = this.tokenStream.LA(1);
            if(!(_la === 39 || _la === 40)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public blmoveCommand(): BlmoveCommandContext {
        let localContext = new BlmoveCommandContext(this.context, this.state);
        this.enterRule(localContext, 140, RedisParser.RULE_blmoveCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 914;
            this.match(RedisParser.BLMOVE);
            this.state = 915;
            this.listKeyName();
            this.state = 916;
            this.listKeyName();
            this.state = 917;
            this.leftOrRightClause();
            this.state = 918;
            this.leftOrRightClause();
            this.state = 919;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lmpopCommand(): LmpopCommandContext {
        let localContext = new LmpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 142, RedisParser.RULE_lmpopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 921;
            this.match(RedisParser.LMPOP);
            this.state = 922;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 924;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 923;
                this.listKeyName();
                }
                }
                this.state = 926;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            this.state = 928;
            this.leftOrRightClause();
            this.state = 930;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 929;
                this.countClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public blmpopCommand(): BlmpopCommandContext {
        let localContext = new BlmpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 144, RedisParser.RULE_blmpopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 932;
            this.match(RedisParser.BLMPOP);
            this.state = 933;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 934;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 936;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 935;
                this.listKeyName();
                }
                }
                this.state = 938;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            this.state = 940;
            this.leftOrRightClause();
            this.state = 942;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 941;
                this.countClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lpopCommand(): LpopCommandContext {
        let localContext = new LpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 146, RedisParser.RULE_lpopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 944;
            this.match(RedisParser.LPOP);
            this.state = 945;
            this.listKeyName();
            this.state = 947;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 158) {
                {
                this.state = 946;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public blpopCommand(): BlpopCommandContext {
        let localContext = new BlpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 148, RedisParser.RULE_blpopCommand);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 949;
            this.match(RedisParser.BLPOP);
            this.state = 951;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 950;
                    this.listKeyName();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 953;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 85, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 955;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpopCommand(): RpopCommandContext {
        let localContext = new RpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 150, RedisParser.RULE_rpopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 957;
            this.match(RedisParser.RPOP);
            this.state = 958;
            this.listKeyName();
            this.state = 960;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 158) {
                {
                this.state = 959;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public brpopCommand(): BrpopCommandContext {
        let localContext = new BrpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 152, RedisParser.RULE_brpopCommand);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 962;
            this.match(RedisParser.BRPOP);
            this.state = 964;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 963;
                    this.listKeyName();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 966;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 87, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 968;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpopLpushCommand(): RpopLpushCommandContext {
        let localContext = new RpopLpushCommandContext(this.context, this.state);
        this.enterRule(localContext, 154, RedisParser.RULE_rpopLpushCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 970;
            this.match(RedisParser.RPOPLPUSH);
            this.state = 971;
            this.listKeyName();
            this.state = 972;
            this.listKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public brpopLpushCommand(): BrpopLpushCommandContext {
        let localContext = new BrpopLpushCommandContext(this.context, this.state);
        this.enterRule(localContext, 156, RedisParser.RULE_brpopLpushCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 974;
            this.match(RedisParser.BRPOPLPUSH);
            this.state = 975;
            this.listKeyName();
            this.state = 976;
            this.listKeyName();
            this.state = 977;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lindexCommand(): LindexCommandContext {
        let localContext = new LindexCommandContext(this.context, this.state);
        this.enterRule(localContext, 158, RedisParser.RULE_lindexCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 979;
            this.match(RedisParser.LINDEX);
            this.state = 980;
            this.listKeyName();
            this.state = 981;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public linsertCommand(): LinsertCommandContext {
        let localContext = new LinsertCommandContext(this.context, this.state);
        this.enterRule(localContext, 160, RedisParser.RULE_linsertCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 983;
            this.match(RedisParser.LINSERT);
            this.state = 984;
            this.listKeyName();
            this.state = 985;
            this.beforeOrAfterClause();
            this.state = 986;
            this.identifier();
            this.state = 987;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public beforeOrAfterClause(): BeforeOrAfterClauseContext {
        let localContext = new BeforeOrAfterClauseContext(this.context, this.state);
        this.enterRule(localContext, 162, RedisParser.RULE_beforeOrAfterClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 989;
            _la = this.tokenStream.LA(1);
            if(!(_la === 41 || _la === 42)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public llenCommand(): LlenCommandContext {
        let localContext = new LlenCommandContext(this.context, this.state);
        this.enterRule(localContext, 164, RedisParser.RULE_llenCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 991;
            this.match(RedisParser.LLEN);
            this.state = 992;
            this.listKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lposCommand(): LposCommandContext {
        let localContext = new LposCommandContext(this.context, this.state);
        this.enterRule(localContext, 166, RedisParser.RULE_lposCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 994;
            this.match(RedisParser.LPOS);
            this.state = 995;
            this.listKeyName();
            this.state = 996;
            this.identifier();
            this.state = 998;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43) {
                {
                this.state = 997;
                this.rankClause();
                }
            }

            this.state = 1001;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 1000;
                this.countClause();
                }
            }

            this.state = 1004;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 44) {
                {
                this.state = 1003;
                this.maxLenClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rankClause(): RankClauseContext {
        let localContext = new RankClauseContext(this.context, this.state);
        this.enterRule(localContext, 168, RedisParser.RULE_rankClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1006;
            this.match(RedisParser.RANK);
            this.state = 1007;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public maxLenClause(): MaxLenClauseContext {
        let localContext = new MaxLenClauseContext(this.context, this.state);
        this.enterRule(localContext, 170, RedisParser.RULE_maxLenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1009;
            this.match(RedisParser.MAXLEN);
            this.state = 1010;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lpushCommand(): LpushCommandContext {
        let localContext = new LpushCommandContext(this.context, this.state);
        this.enterRule(localContext, 172, RedisParser.RULE_lpushCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1012;
            this.match(RedisParser.LPUSH);
            this.state = 1013;
            this.listKeyName();
            this.state = 1015;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1014;
                this.identifier();
                }
                }
                this.state = 1017;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lpushxCommand(): LpushxCommandContext {
        let localContext = new LpushxCommandContext(this.context, this.state);
        this.enterRule(localContext, 174, RedisParser.RULE_lpushxCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1019;
            this.match(RedisParser.LPUSHX);
            this.state = 1020;
            this.listKeyName();
            this.state = 1022;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1021;
                this.identifier();
                }
                }
                this.state = 1024;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpushCommand(): RpushCommandContext {
        let localContext = new RpushCommandContext(this.context, this.state);
        this.enterRule(localContext, 176, RedisParser.RULE_rpushCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1026;
            this.match(RedisParser.RPUSH);
            this.state = 1027;
            this.listKeyName();
            this.state = 1029;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1028;
                this.identifier();
                }
                }
                this.state = 1031;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpushxCommand(): RpushxCommandContext {
        let localContext = new RpushxCommandContext(this.context, this.state);
        this.enterRule(localContext, 178, RedisParser.RULE_rpushxCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1033;
            this.match(RedisParser.RPUSHX);
            this.state = 1034;
            this.listKeyName();
            this.state = 1036;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1035;
                this.identifier();
                }
                }
                this.state = 1038;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lrangeCommand(): LrangeCommandContext {
        let localContext = new LrangeCommandContext(this.context, this.state);
        this.enterRule(localContext, 180, RedisParser.RULE_lrangeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1040;
            this.match(RedisParser.LRANGE);
            this.state = 1041;
            this.listKeyName();
            this.state = 1042;
            this.decimal();
            this.state = 1043;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lremCommand(): LremCommandContext {
        let localContext = new LremCommandContext(this.context, this.state);
        this.enterRule(localContext, 182, RedisParser.RULE_lremCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1045;
            this.match(RedisParser.LREM);
            this.state = 1046;
            this.listKeyName();
            this.state = 1047;
            this.decimal();
            this.state = 1048;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lsetCommand(): LsetCommandContext {
        let localContext = new LsetCommandContext(this.context, this.state);
        this.enterRule(localContext, 184, RedisParser.RULE_lsetCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1050;
            this.match(RedisParser.LSET);
            this.state = 1051;
            this.listKeyName();
            this.state = 1052;
            this.decimal();
            this.state = 1053;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ltrimCommand(): LtrimCommandContext {
        let localContext = new LtrimCommandContext(this.context, this.state);
        this.enterRule(localContext, 186, RedisParser.RULE_ltrimCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1055;
            this.match(RedisParser.LTRIM);
            this.state = 1056;
            this.listKeyName();
            this.state = 1057;
            this.decimal();
            this.state = 1058;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copyCommand(): CopyCommandContext {
        let localContext = new CopyCommandContext(this.context, this.state);
        this.enterRule(localContext, 188, RedisParser.RULE_copyCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1060;
            this.match(RedisParser.COPY);
            this.state = 1061;
            this.keyName();
            this.state = 1062;
            this.identifier();
            this.state = 1064;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 4) {
                {
                this.state = 1063;
                this.dbClause();
                }
            }

            this.state = 1067;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 5) {
                {
                this.state = 1066;
                this.match(RedisParser.REPLACE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbClause(): DbClauseContext {
        let localContext = new DbClauseContext(this.context, this.state);
        this.enterRule(localContext, 190, RedisParser.RULE_dbClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1069;
            this.match(RedisParser.DB);
            this.state = 1070;
            this.databaseName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseName(): DatabaseNameContext {
        let localContext = new DatabaseNameContext(this.context, this.state);
        this.enterRule(localContext, 192, RedisParser.RULE_databaseName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1072;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteCommand(): DeleteCommandContext {
        let localContext = new DeleteCommandContext(this.context, this.state);
        this.enterRule(localContext, 194, RedisParser.RULE_deleteCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1074;
            this.match(RedisParser.DEL);
            this.state = 1076;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1075;
                this.keyName();
                }
                }
                this.state = 1078;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlinkCommand(): UnlinkCommandContext {
        let localContext = new UnlinkCommandContext(this.context, this.state);
        this.enterRule(localContext, 196, RedisParser.RULE_unlinkCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1080;
            this.match(RedisParser.UNLINK);
            this.state = 1082;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1081;
                this.keyName();
                }
                }
                this.state = 1084;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dumpCommand(): DumpCommandContext {
        let localContext = new DumpCommandContext(this.context, this.state);
        this.enterRule(localContext, 198, RedisParser.RULE_dumpCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1086;
            this.match(RedisParser.DUMP);
            this.state = 1087;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existsCommand(): ExistsCommandContext {
        let localContext = new ExistsCommandContext(this.context, this.state);
        this.enterRule(localContext, 200, RedisParser.RULE_existsCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1089;
            this.match(RedisParser.EXISTS);
            this.state = 1091;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1090;
                this.keyName();
                }
                }
                this.state = 1093;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expireCommand(): ExpireCommandContext {
        let localContext = new ExpireCommandContext(this.context, this.state);
        this.enterRule(localContext, 202, RedisParser.RULE_expireCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1095;
            this.match(RedisParser.EXPIRE);
            this.state = 1096;
            this.keyName();
            this.state = 1097;
            this.decimal();
            this.state = 1099;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 30720) !== 0)) {
                {
                this.state = 1098;
                this.expireOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expireAtCommand(): ExpireAtCommandContext {
        let localContext = new ExpireAtCommandContext(this.context, this.state);
        this.enterRule(localContext, 204, RedisParser.RULE_expireAtCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1101;
            this.match(RedisParser.EXPIREAT);
            this.state = 1102;
            this.keyName();
            this.state = 1103;
            this.decimal();
            this.state = 1105;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 30720) !== 0)) {
                {
                this.state = 1104;
                this.expireOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pExpireCommand(): PExpireCommandContext {
        let localContext = new PExpireCommandContext(this.context, this.state);
        this.enterRule(localContext, 206, RedisParser.RULE_pExpireCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1107;
            this.match(RedisParser.PEXPIRE);
            this.state = 1108;
            this.keyName();
            this.state = 1109;
            this.decimal();
            this.state = 1111;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 30720) !== 0)) {
                {
                this.state = 1110;
                this.expireOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pExpireAtCommand(): PExpireAtCommandContext {
        let localContext = new PExpireAtCommandContext(this.context, this.state);
        this.enterRule(localContext, 208, RedisParser.RULE_pExpireAtCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1113;
            this.match(RedisParser.PEXPIREAT);
            this.state = 1114;
            this.keyName();
            this.state = 1115;
            this.decimal();
            this.state = 1117;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 30720) !== 0)) {
                {
                this.state = 1116;
                this.expireOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expireOptions(): ExpireOptionsContext {
        let localContext = new ExpireOptionsContext(this.context, this.state);
        this.enterRule(localContext, 210, RedisParser.RULE_expireOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1119;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 30720) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expireTimeCommand(): ExpireTimeCommandContext {
        let localContext = new ExpireTimeCommandContext(this.context, this.state);
        this.enterRule(localContext, 212, RedisParser.RULE_expireTimeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1121;
            this.match(RedisParser.EXPIRETIME);
            this.state = 1122;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pExpireTimeCommand(): PExpireTimeCommandContext {
        let localContext = new PExpireTimeCommandContext(this.context, this.state);
        this.enterRule(localContext, 214, RedisParser.RULE_pExpireTimeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1124;
            this.match(RedisParser.PEXPIRETIME);
            this.state = 1125;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keysCommand(): KeysCommandContext {
        let localContext = new KeysCommandContext(this.context, this.state);
        this.enterRule(localContext, 216, RedisParser.RULE_keysCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1127;
            this.match(RedisParser.KEYS);
            this.state = 1128;
            this.keyPattern();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public moveCommand(): MoveCommandContext {
        let localContext = new MoveCommandContext(this.context, this.state);
        this.enterRule(localContext, 218, RedisParser.RULE_moveCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1130;
            this.match(RedisParser.MOVE);
            this.state = 1131;
            this.keyName();
            this.state = 1132;
            this.databaseName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public objectCommand(): ObjectCommandContext {
        let localContext = new ObjectCommandContext(this.context, this.state);
        this.enterRule(localContext, 220, RedisParser.RULE_objectCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1134;
            this.match(RedisParser.OBJECT);
            this.state = 1135;
            this.objectOptions();
            this.state = 1136;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public objectOptions(): ObjectOptionsContext {
        let localContext = new ObjectOptionsContext(this.context, this.state);
        this.enterRule(localContext, 222, RedisParser.RULE_objectOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1138;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 125829120) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public persistCommand(): PersistCommandContext {
        let localContext = new PersistCommandContext(this.context, this.state);
        this.enterRule(localContext, 224, RedisParser.RULE_persistCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1140;
            this.match(RedisParser.PERSIST);
            this.state = 1141;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ttlCommand(): TtlCommandContext {
        let localContext = new TtlCommandContext(this.context, this.state);
        this.enterRule(localContext, 226, RedisParser.RULE_ttlCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1143;
            this.match(RedisParser.TTL);
            this.state = 1144;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pTtlCommand(): PTtlCommandContext {
        let localContext = new PTtlCommandContext(this.context, this.state);
        this.enterRule(localContext, 228, RedisParser.RULE_pTtlCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1146;
            this.match(RedisParser.PTTL);
            this.state = 1147;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public randomKeyCommand(): RandomKeyCommandContext {
        let localContext = new RandomKeyCommandContext(this.context, this.state);
        this.enterRule(localContext, 230, RedisParser.RULE_randomKeyCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1149;
            this.match(RedisParser.RANDOMKEY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameCommand(): RenameCommandContext {
        let localContext = new RenameCommandContext(this.context, this.state);
        this.enterRule(localContext, 232, RedisParser.RULE_renameCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1151;
            this.match(RedisParser.RENAME);
            this.state = 1152;
            this.keyName();
            this.state = 1153;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameNxCommand(): RenameNxCommandContext {
        let localContext = new RenameNxCommandContext(this.context, this.state);
        this.enterRule(localContext, 234, RedisParser.RULE_renameNxCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1155;
            this.match(RedisParser.RENAMENX);
            this.state = 1156;
            this.keyName();
            this.state = 1157;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scanCommand(): ScanCommandContext {
        let localContext = new ScanCommandContext(this.context, this.state);
        this.enterRule(localContext, 236, RedisParser.RULE_scanCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1159;
            this.match(RedisParser.SCAN);
            this.state = 1160;
            this.decimal();
            this.state = 1162;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34) {
                {
                this.state = 1161;
                this.matchClause();
                }
            }

            this.state = 1165;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 1164;
                this.countClause();
                }
            }

            this.state = 1168;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 1167;
                this.typeClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchClause(): MatchClauseContext {
        let localContext = new MatchClauseContext(this.context, this.state);
        this.enterRule(localContext, 238, RedisParser.RULE_matchClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1170;
            this.match(RedisParser.MATCH);
            this.state = 1171;
            this.keyPattern();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public countClause(): CountClauseContext {
        let localContext = new CountClauseContext(this.context, this.state);
        this.enterRule(localContext, 240, RedisParser.RULE_countClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1173;
            this.match(RedisParser.COUNT);
            this.state = 1174;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeClause(): TypeClauseContext {
        let localContext = new TypeClauseContext(this.context, this.state);
        this.enterRule(localContext, 242, RedisParser.RULE_typeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1176;
            this.match(RedisParser.TYPE);
            this.state = 1177;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public touchCommand(): TouchCommandContext {
        let localContext = new TouchCommandContext(this.context, this.state);
        this.enterRule(localContext, 244, RedisParser.RULE_touchCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1179;
            this.match(RedisParser.TOUCH);
            this.state = 1181;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1180;
                this.keyName();
                }
                }
                this.state = 1183;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeCommand(): TypeCommandContext {
        let localContext = new TypeCommandContext(this.context, this.state);
        this.enterRule(localContext, 246, RedisParser.RULE_typeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1185;
            this.match(RedisParser.TYPE);
            this.state = 1186;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public waitCommand(): WaitCommandContext {
        let localContext = new WaitCommandContext(this.context, this.state);
        this.enterRule(localContext, 248, RedisParser.RULE_waitCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1188;
            this.match(RedisParser.WAIT);
            this.state = 1189;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 1190;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringSetCommand(): StringSetCommandContext {
        let localContext = new StringSetCommandContext(this.context, this.state);
        this.enterRule(localContext, 250, RedisParser.RULE_stringSetCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1192;
            this.match(RedisParser.SET);
            this.state = 1193;
            this.stringKeyName();
            this.state = 1194;
            this.identifier();
            this.state = 1196;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 13 || _la === 14) {
                {
                this.state = 1195;
                this.keyExistenceClause();
                }
            }

            this.state = 1199;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 58) {
                {
                this.state = 1198;
                this.match(RedisParser.GET);
                }
            }

            this.state = 1203;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.EX:
            case RedisParser.PX:
            case RedisParser.EXAT:
            case RedisParser.PXAT:
                {
                this.state = 1201;
                this.expirationClause();
                }
                break;
            case RedisParser.KEEPTTL:
                {
                this.state = 1202;
                this.match(RedisParser.KEEPTTL);
                }
                break;
            case RedisParser.EOF:
            case RedisParser.NEWLINE:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyExistenceClause(): KeyExistenceClauseContext {
        let localContext = new KeyExistenceClauseContext(this.context, this.state);
        this.enterRule(localContext, 252, RedisParser.RULE_keyExistenceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1205;
            _la = this.tokenStream.LA(1);
            if(!(_la === 13 || _la === 14)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expirationClause(): ExpirationClauseContext {
        let localContext = new ExpirationClauseContext(this.context, this.state);
        this.enterRule(localContext, 254, RedisParser.RULE_expirationClause);
        try {
            this.state = 1215;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.EX:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1207;
                this.match(RedisParser.EX);
                this.state = 1208;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
                break;
            case RedisParser.PX:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1209;
                this.match(RedisParser.PX);
                this.state = 1210;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
                break;
            case RedisParser.EXAT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1211;
                this.match(RedisParser.EXAT);
                this.state = 1212;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
                break;
            case RedisParser.PXAT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1213;
                this.match(RedisParser.PXAT);
                this.state = 1214;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getCommand(): GetCommandContext {
        let localContext = new GetCommandContext(this.context, this.state);
        this.enterRule(localContext, 256, RedisParser.RULE_getCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1217;
            this.match(RedisParser.GET);
            this.state = 1218;
            this.stringKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public incrementCommand(): IncrementCommandContext {
        let localContext = new IncrementCommandContext(this.context, this.state);
        this.enterRule(localContext, 258, RedisParser.RULE_incrementCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1220;
            this.match(RedisParser.INCR);
            this.state = 1221;
            this.stringKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public incrementByCommand(): IncrementByCommandContext {
        let localContext = new IncrementByCommandContext(this.context, this.state);
        this.enterRule(localContext, 260, RedisParser.RULE_incrementByCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1223;
            this.match(RedisParser.INCRBY);
            this.state = 1224;
            this.stringKeyName();
            this.state = 1225;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decrementCommand(): DecrementCommandContext {
        let localContext = new DecrementCommandContext(this.context, this.state);
        this.enterRule(localContext, 262, RedisParser.RULE_decrementCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1227;
            this.match(RedisParser.DECR);
            this.state = 1228;
            this.stringKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decrementByCommand(): DecrementByCommandContext {
        let localContext = new DecrementByCommandContext(this.context, this.state);
        this.enterRule(localContext, 264, RedisParser.RULE_decrementByCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1230;
            this.match(RedisParser.DECRBY);
            this.state = 1231;
            this.stringKeyName();
            this.state = 1232;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public appendCommand(): AppendCommandContext {
        let localContext = new AppendCommandContext(this.context, this.state);
        this.enterRule(localContext, 266, RedisParser.RULE_appendCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1234;
            this.match(RedisParser.APPEND);
            this.state = 1235;
            this.stringKeyName();
            this.state = 1236;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getDeleteCommand(): GetDeleteCommandContext {
        let localContext = new GetDeleteCommandContext(this.context, this.state);
        this.enterRule(localContext, 268, RedisParser.RULE_getDeleteCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1238;
            this.match(RedisParser.GETDEL);
            this.state = 1239;
            this.stringKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getExCommand(): GetExCommandContext {
        let localContext = new GetExCommandContext(this.context, this.state);
        this.enterRule(localContext, 270, RedisParser.RULE_getExCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1241;
            this.match(RedisParser.GETEX);
            this.state = 1242;
            this.stringKeyName();
            this.state = 1245;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.EX:
            case RedisParser.PX:
            case RedisParser.EXAT:
            case RedisParser.PXAT:
                {
                this.state = 1243;
                this.expirationClause();
                }
                break;
            case RedisParser.PERSIST:
                {
                this.state = 1244;
                this.match(RedisParser.PERSIST);
                }
                break;
            case RedisParser.EOF:
            case RedisParser.NEWLINE:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getRangeCommand(): GetRangeCommandContext {
        let localContext = new GetRangeCommandContext(this.context, this.state);
        this.enterRule(localContext, 272, RedisParser.RULE_getRangeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1247;
            this.match(RedisParser.GETRANGE);
            this.state = 1248;
            this.stringKeyName();
            this.state = 1249;
            this.decimal();
            this.state = 1250;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getSetCommand(): GetSetCommandContext {
        let localContext = new GetSetCommandContext(this.context, this.state);
        this.enterRule(localContext, 274, RedisParser.RULE_getSetCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1252;
            this.match(RedisParser.GETSET);
            this.state = 1253;
            this.stringKeyName();
            this.state = 1254;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mGetCommand(): MGetCommandContext {
        let localContext = new MGetCommandContext(this.context, this.state);
        this.enterRule(localContext, 276, RedisParser.RULE_mGetCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1256;
            this.match(RedisParser.MGET);
            this.state = 1258;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1257;
                this.stringKeyName();
                }
                }
                this.state = 1260;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mSetCommand(): MSetCommandContext {
        let localContext = new MSetCommandContext(this.context, this.state);
        this.enterRule(localContext, 278, RedisParser.RULE_mSetCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1262;
            this.match(RedisParser.MSET);
            this.state = 1266;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1263;
                this.stringKeyName();
                this.state = 1264;
                this.identifier();
                }
                }
                this.state = 1268;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mSetNxCommand(): MSetNxCommandContext {
        let localContext = new MSetNxCommandContext(this.context, this.state);
        this.enterRule(localContext, 280, RedisParser.RULE_mSetNxCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1270;
            this.match(RedisParser.MSETNX);
            this.state = 1274;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1271;
                this.stringKeyName();
                this.state = 1272;
                this.identifier();
                }
                }
                this.state = 1276;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pSetExCommand(): PSetExCommandContext {
        let localContext = new PSetExCommandContext(this.context, this.state);
        this.enterRule(localContext, 282, RedisParser.RULE_pSetExCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1278;
            this.match(RedisParser.PSETEX);
            this.state = 1279;
            this.stringKeyName();
            this.state = 1280;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 1281;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setExCommand(): SetExCommandContext {
        let localContext = new SetExCommandContext(this.context, this.state);
        this.enterRule(localContext, 284, RedisParser.RULE_setExCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1283;
            this.match(RedisParser.SETEX);
            this.state = 1284;
            this.stringKeyName();
            this.state = 1285;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 1286;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setNxCommand(): SetNxCommandContext {
        let localContext = new SetNxCommandContext(this.context, this.state);
        this.enterRule(localContext, 286, RedisParser.RULE_setNxCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1288;
            this.match(RedisParser.SETNX);
            this.state = 1289;
            this.stringKeyName();
            this.state = 1290;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setRangeCommand(): SetRangeCommandContext {
        let localContext = new SetRangeCommandContext(this.context, this.state);
        this.enterRule(localContext, 288, RedisParser.RULE_setRangeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1292;
            this.match(RedisParser.SETRANGE);
            this.state = 1293;
            this.stringKeyName();
            this.state = 1294;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 1295;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringLengthCommand(): StringLengthCommandContext {
        let localContext = new StringLengthCommandContext(this.context, this.state);
        this.enterRule(localContext, 290, RedisParser.RULE_stringLengthCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1297;
            this.match(RedisParser.STRLEN);
            this.state = 1298;
            this.stringKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public substringCommand(): SubstringCommandContext {
        let localContext = new SubstringCommandContext(this.context, this.state);
        this.enterRule(localContext, 292, RedisParser.RULE_substringCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1300;
            this.match(RedisParser.SUBSTR);
            this.state = 1301;
            this.stringKeyName();
            this.state = 1302;
            this.decimal();
            this.state = 1303;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decimal(): DecimalContext {
        let localContext = new DecimalContext(this.context, this.state);
        this.enterRule(localContext, 294, RedisParser.RULE_decimal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1305;
            _la = this.tokenStream.LA(1);
            if(!(_la === 158 || _la === 159)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decimalScore(): DecimalScoreContext {
        let localContext = new DecimalScoreContext(this.context, this.state);
        this.enterRule(localContext, 296, RedisParser.RULE_decimalScore);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1307;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 7) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 298, RedisParser.RULE_identifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1309;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lexicalScore(): LexicalScoreContext {
        let localContext = new LexicalScoreContext(this.context, this.state);
        this.enterRule(localContext, 300, RedisParser.RULE_lexicalScore);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1311;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringKeyName(): StringKeyNameContext {
        let localContext = new StringKeyNameContext(this.context, this.state);
        this.enterRule(localContext, 302, RedisParser.RULE_stringKeyName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1313;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listKeyName(): ListKeyNameContext {
        let localContext = new ListKeyNameContext(this.context, this.state);
        this.enterRule(localContext, 304, RedisParser.RULE_listKeyName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1315;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setKeyName(): SetKeyNameContext {
        let localContext = new SetKeyNameContext(this.context, this.state);
        this.enterRule(localContext, 306, RedisParser.RULE_setKeyName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1317;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        let localContext = new SortedSetKeyNameContext(this.context, this.state);
        this.enterRule(localContext, 308, RedisParser.RULE_sortedSetKeyName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1319;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyName(): KeyNameContext {
        let localContext = new KeyNameContext(this.context, this.state);
        this.enterRule(localContext, 310, RedisParser.RULE_keyName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1321;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyPattern(): KeyPatternContext {
        let localContext = new KeyPatternContext(this.context, this.state);
        this.enterRule(localContext, 312, RedisParser.RULE_keyPattern);
        try {
            localContext = new NotProperPatternContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1323;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public static readonly _serializedATN: number[] = [
        4,1,161,1326,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,1,0,3,0,316,8,0,1,0,1,
        0,1,1,1,1,5,1,322,8,1,10,1,12,1,325,9,1,1,1,1,1,4,1,329,8,1,11,1,
        12,1,330,1,1,1,1,3,1,335,8,1,1,2,1,2,1,2,1,2,1,2,3,2,342,8,2,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,368,8,3,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,390,
        8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,414,8,5,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,433,8,6,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,3,7,470,8,7,1,8,1,8,1,8,4,8,475,8,8,11,8,12,8,476,1,8,1,8,3,
        8,481,8,8,1,9,1,9,1,9,1,9,4,9,487,8,9,11,9,12,9,488,1,9,1,9,3,9,
        493,8,9,1,10,1,10,1,10,3,10,498,8,10,1,11,1,11,4,11,502,8,11,11,
        11,12,11,503,1,11,1,11,1,12,1,12,1,12,3,12,511,8,12,1,13,1,13,4,
        13,515,8,13,11,13,12,13,516,1,13,1,13,1,14,1,14,1,15,1,15,1,15,3,
        15,526,8,15,1,15,3,15,529,8,15,1,15,3,15,532,8,15,1,15,3,15,535,
        8,15,1,15,4,15,538,8,15,11,15,12,15,539,1,16,1,16,1,17,1,17,1,17,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,4,20,558,
        8,20,11,20,12,20,559,1,20,3,20,563,8,20,1,21,1,21,1,21,1,21,4,21,
        569,8,21,11,21,12,21,570,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
        4,23,581,8,23,11,23,12,23,582,1,23,3,23,586,8,23,1,23,3,23,589,8,
        23,1,23,3,23,592,8,23,1,24,1,24,1,24,4,24,597,8,24,11,24,12,24,598,
        1,24,3,24,602,8,24,1,25,1,25,1,25,1,25,4,25,608,8,25,11,25,12,25,
        609,1,25,3,25,613,8,25,1,25,3,25,616,8,25,1,26,1,26,4,26,620,8,26,
        11,26,12,26,621,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,
        1,29,1,29,1,30,1,30,1,30,4,30,639,8,30,11,30,12,30,640,1,31,1,31,
        1,31,1,31,3,31,647,8,31,3,31,649,8,31,1,32,1,32,1,32,1,32,1,32,3,
        32,656,8,32,1,32,3,32,659,8,32,1,32,3,32,662,8,32,1,32,3,32,665,
        8,32,1,33,1,33,1,33,1,33,1,33,3,33,672,8,33,1,34,1,34,1,34,1,34,
        1,34,3,34,679,8,34,1,34,3,34,682,8,34,1,35,1,35,1,35,1,35,1,35,1,
        35,3,35,690,8,35,1,35,3,35,693,8,35,1,35,3,35,696,8,35,1,36,1,36,
        1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,708,8,38,1,39,1,39,
        1,39,1,39,3,39,714,8,39,1,40,1,40,1,40,4,40,719,8,40,11,40,12,40,
        720,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,
        1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,3,44,743,8,44,1,45,1,45,
        1,45,1,45,1,45,3,45,750,8,45,1,46,1,46,1,46,1,46,1,46,3,46,757,8,
        46,1,46,3,46,760,8,46,1,47,1,47,1,47,1,47,3,47,766,8,47,1,47,3,47,
        769,8,47,1,48,1,48,1,48,4,48,774,8,48,11,48,12,48,775,1,48,3,48,
        779,8,48,1,48,3,48,782,8,48,1,48,3,48,785,8,48,1,49,1,49,1,49,1,
        49,4,49,791,8,49,11,49,12,49,792,1,49,3,49,796,8,49,1,49,3,49,799,
        8,49,1,50,1,50,1,50,4,50,804,8,50,11,50,12,50,805,1,51,1,51,1,51,
        1,52,1,52,4,52,813,8,52,11,52,12,52,814,1,53,1,53,1,53,4,53,820,
        8,53,11,53,12,53,821,1,54,1,54,4,54,826,8,54,11,54,12,54,827,1,55,
        1,55,1,55,4,55,833,8,55,11,55,12,55,834,1,55,3,55,838,8,55,1,56,
        1,56,1,56,1,57,1,57,1,57,4,57,846,8,57,11,57,12,57,847,1,58,1,58,
        1,58,1,58,1,59,1,59,1,59,4,59,857,8,59,11,59,12,59,858,1,60,1,60,
        1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,3,62,871,8,62,1,63,1,63,
        1,63,3,63,876,8,63,1,64,1,64,1,64,4,64,881,8,64,11,64,12,64,882,
        1,65,1,65,1,65,1,65,3,65,889,8,65,1,65,3,65,892,8,65,1,66,1,66,4,
        66,896,8,66,11,66,12,66,897,1,67,1,67,1,67,4,67,903,8,67,11,67,12,
        67,904,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,71,1,71,1,71,4,71,925,8,71,11,71,12,71,926,1,
        71,1,71,3,71,931,8,71,1,72,1,72,1,72,1,72,4,72,937,8,72,11,72,12,
        72,938,1,72,1,72,3,72,943,8,72,1,73,1,73,1,73,3,73,948,8,73,1,74,
        1,74,4,74,952,8,74,11,74,12,74,953,1,74,1,74,1,75,1,75,1,75,3,75,
        961,8,75,1,76,1,76,4,76,965,8,76,11,76,12,76,966,1,76,1,76,1,77,
        1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,80,
        1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,
        1,83,3,83,999,8,83,1,83,3,83,1002,8,83,1,83,3,83,1005,8,83,1,84,
        1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,86,4,86,1016,8,86,11,86,12,
        86,1017,1,87,1,87,1,87,4,87,1023,8,87,11,87,12,87,1024,1,88,1,88,
        1,88,4,88,1030,8,88,11,88,12,88,1031,1,89,1,89,1,89,4,89,1037,8,
        89,11,89,12,89,1038,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,
        1,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,94,1,94,
        1,94,1,94,3,94,1065,8,94,1,94,3,94,1068,8,94,1,95,1,95,1,95,1,96,
        1,96,1,97,1,97,4,97,1077,8,97,11,97,12,97,1078,1,98,1,98,4,98,1083,
        8,98,11,98,12,98,1084,1,99,1,99,1,99,1,100,1,100,4,100,1092,8,100,
        11,100,12,100,1093,1,101,1,101,1,101,1,101,3,101,1100,8,101,1,102,
        1,102,1,102,1,102,3,102,1106,8,102,1,103,1,103,1,103,1,103,3,103,
        1112,8,103,1,104,1,104,1,104,1,104,3,104,1118,8,104,1,105,1,105,
        1,106,1,106,1,106,1,107,1,107,1,107,1,108,1,108,1,108,1,109,1,109,
        1,109,1,109,1,110,1,110,1,110,1,110,1,111,1,111,1,112,1,112,1,112,
        1,113,1,113,1,113,1,114,1,114,1,114,1,115,1,115,1,116,1,116,1,116,
        1,116,1,117,1,117,1,117,1,117,1,118,1,118,1,118,3,118,1163,8,118,
        1,118,3,118,1166,8,118,1,118,3,118,1169,8,118,1,119,1,119,1,119,
        1,120,1,120,1,120,1,121,1,121,1,121,1,122,1,122,4,122,1182,8,122,
        11,122,12,122,1183,1,123,1,123,1,123,1,124,1,124,1,124,1,124,1,125,
        1,125,1,125,1,125,3,125,1197,8,125,1,125,3,125,1200,8,125,1,125,
        1,125,3,125,1204,8,125,1,126,1,126,1,127,1,127,1,127,1,127,1,127,
        1,127,1,127,1,127,3,127,1216,8,127,1,128,1,128,1,128,1,129,1,129,
        1,129,1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,132,1,132,1,132,
        1,132,1,133,1,133,1,133,1,133,1,134,1,134,1,134,1,135,1,135,1,135,
        1,135,3,135,1246,8,135,1,136,1,136,1,136,1,136,1,136,1,137,1,137,
        1,137,1,137,1,138,1,138,4,138,1259,8,138,11,138,12,138,1260,1,139,
        1,139,1,139,1,139,4,139,1267,8,139,11,139,12,139,1268,1,140,1,140,
        1,140,1,140,4,140,1275,8,140,11,140,12,140,1276,1,141,1,141,1,141,
        1,141,1,141,1,142,1,142,1,142,1,142,1,142,1,143,1,143,1,143,1,143,
        1,144,1,144,1,144,1,144,1,144,1,145,1,145,1,145,1,146,1,146,1,146,
        1,146,1,146,1,147,1,147,1,148,1,148,1,149,1,149,1,150,1,150,1,151,
        1,151,1,152,1,152,1,153,1,153,1,154,1,154,1,155,1,155,1,156,1,156,
        1,156,0,0,157,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,0,12,1,0,46,47,1,0,11,12,2,0,46,47,53,53,1,0,54,55,1,0,39,40,
        1,0,41,42,1,0,11,14,1,0,23,26,1,0,13,14,1,0,158,159,1,0,158,160,
        1,0,158,161,1399,0,315,1,0,0,0,2,334,1,0,0,0,4,341,1,0,0,0,6,367,
        1,0,0,0,8,389,1,0,0,0,10,413,1,0,0,0,12,432,1,0,0,0,14,469,1,0,0,
        0,16,471,1,0,0,0,18,482,1,0,0,0,20,494,1,0,0,0,22,499,1,0,0,0,24,
        507,1,0,0,0,26,512,1,0,0,0,28,520,1,0,0,0,30,522,1,0,0,0,32,541,
        1,0,0,0,34,543,1,0,0,0,36,546,1,0,0,0,38,549,1,0,0,0,40,554,1,0,
        0,0,42,564,1,0,0,0,44,572,1,0,0,0,46,577,1,0,0,0,48,593,1,0,0,0,
        50,603,1,0,0,0,52,617,1,0,0,0,54,623,1,0,0,0,56,626,1,0,0,0,58,631,
        1,0,0,0,60,635,1,0,0,0,62,642,1,0,0,0,64,650,1,0,0,0,66,666,1,0,
        0,0,68,673,1,0,0,0,70,683,1,0,0,0,72,697,1,0,0,0,74,699,1,0,0,0,
        76,703,1,0,0,0,78,709,1,0,0,0,80,715,1,0,0,0,82,722,1,0,0,0,84,727,
        1,0,0,0,86,732,1,0,0,0,88,737,1,0,0,0,90,744,1,0,0,0,92,751,1,0,
        0,0,94,761,1,0,0,0,96,770,1,0,0,0,98,786,1,0,0,0,100,800,1,0,0,0,
        102,807,1,0,0,0,104,810,1,0,0,0,106,816,1,0,0,0,108,823,1,0,0,0,
        110,829,1,0,0,0,112,839,1,0,0,0,114,842,1,0,0,0,116,849,1,0,0,0,
        118,853,1,0,0,0,120,860,1,0,0,0,122,863,1,0,0,0,124,867,1,0,0,0,
        126,872,1,0,0,0,128,877,1,0,0,0,130,884,1,0,0,0,132,893,1,0,0,0,
        134,899,1,0,0,0,136,906,1,0,0,0,138,912,1,0,0,0,140,914,1,0,0,0,
        142,921,1,0,0,0,144,932,1,0,0,0,146,944,1,0,0,0,148,949,1,0,0,0,
        150,957,1,0,0,0,152,962,1,0,0,0,154,970,1,0,0,0,156,974,1,0,0,0,
        158,979,1,0,0,0,160,983,1,0,0,0,162,989,1,0,0,0,164,991,1,0,0,0,
        166,994,1,0,0,0,168,1006,1,0,0,0,170,1009,1,0,0,0,172,1012,1,0,0,
        0,174,1019,1,0,0,0,176,1026,1,0,0,0,178,1033,1,0,0,0,180,1040,1,
        0,0,0,182,1045,1,0,0,0,184,1050,1,0,0,0,186,1055,1,0,0,0,188,1060,
        1,0,0,0,190,1069,1,0,0,0,192,1072,1,0,0,0,194,1074,1,0,0,0,196,1080,
        1,0,0,0,198,1086,1,0,0,0,200,1089,1,0,0,0,202,1095,1,0,0,0,204,1101,
        1,0,0,0,206,1107,1,0,0,0,208,1113,1,0,0,0,210,1119,1,0,0,0,212,1121,
        1,0,0,0,214,1124,1,0,0,0,216,1127,1,0,0,0,218,1130,1,0,0,0,220,1134,
        1,0,0,0,222,1138,1,0,0,0,224,1140,1,0,0,0,226,1143,1,0,0,0,228,1146,
        1,0,0,0,230,1149,1,0,0,0,232,1151,1,0,0,0,234,1155,1,0,0,0,236,1159,
        1,0,0,0,238,1170,1,0,0,0,240,1173,1,0,0,0,242,1176,1,0,0,0,244,1179,
        1,0,0,0,246,1185,1,0,0,0,248,1188,1,0,0,0,250,1192,1,0,0,0,252,1205,
        1,0,0,0,254,1215,1,0,0,0,256,1217,1,0,0,0,258,1220,1,0,0,0,260,1223,
        1,0,0,0,262,1227,1,0,0,0,264,1230,1,0,0,0,266,1234,1,0,0,0,268,1238,
        1,0,0,0,270,1241,1,0,0,0,272,1247,1,0,0,0,274,1252,1,0,0,0,276,1256,
        1,0,0,0,278,1262,1,0,0,0,280,1270,1,0,0,0,282,1278,1,0,0,0,284,1283,
        1,0,0,0,286,1288,1,0,0,0,288,1292,1,0,0,0,290,1297,1,0,0,0,292,1300,
        1,0,0,0,294,1305,1,0,0,0,296,1307,1,0,0,0,298,1309,1,0,0,0,300,1311,
        1,0,0,0,302,1313,1,0,0,0,304,1315,1,0,0,0,306,1317,1,0,0,0,308,1319,
        1,0,0,0,310,1321,1,0,0,0,312,1323,1,0,0,0,314,316,3,2,1,0,315,314,
        1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,318,5,0,0,1,318,1,1,
        0,0,0,319,323,3,4,2,0,320,322,5,2,0,0,321,320,1,0,0,0,322,325,1,
        0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,335,1,0,0,0,325,323,1,
        0,0,0,326,328,3,4,2,0,327,329,5,2,0,0,328,327,1,0,0,0,329,330,1,
        0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,333,3,
        2,1,0,333,335,1,0,0,0,334,319,1,0,0,0,334,326,1,0,0,0,335,3,1,0,
        0,0,336,342,3,6,3,0,337,342,3,8,4,0,338,342,3,10,5,0,339,342,3,12,
        6,0,340,342,3,14,7,0,341,336,1,0,0,0,341,337,1,0,0,0,341,338,1,0,
        0,0,341,339,1,0,0,0,341,340,1,0,0,0,342,5,1,0,0,0,343,368,3,188,
        94,0,344,368,3,194,97,0,345,368,3,196,98,0,346,368,3,198,99,0,347,
        368,3,200,100,0,348,368,3,202,101,0,349,368,3,204,102,0,350,368,
        3,212,106,0,351,368,3,206,103,0,352,368,3,208,104,0,353,368,3,214,
        107,0,354,368,3,216,108,0,355,368,3,218,109,0,356,368,3,220,110,
        0,357,368,3,224,112,0,358,368,3,226,113,0,359,368,3,228,114,0,360,
        368,3,230,115,0,361,368,3,232,116,0,362,368,3,234,117,0,363,368,
        3,236,118,0,364,368,3,244,122,0,365,368,3,246,123,0,366,368,3,248,
        124,0,367,343,1,0,0,0,367,344,1,0,0,0,367,345,1,0,0,0,367,346,1,
        0,0,0,367,347,1,0,0,0,367,348,1,0,0,0,367,349,1,0,0,0,367,350,1,
        0,0,0,367,351,1,0,0,0,367,352,1,0,0,0,367,353,1,0,0,0,367,354,1,
        0,0,0,367,355,1,0,0,0,367,356,1,0,0,0,367,357,1,0,0,0,367,358,1,
        0,0,0,367,359,1,0,0,0,367,360,1,0,0,0,367,361,1,0,0,0,367,362,1,
        0,0,0,367,363,1,0,0,0,367,364,1,0,0,0,367,365,1,0,0,0,367,366,1,
        0,0,0,368,7,1,0,0,0,369,390,3,250,125,0,370,390,3,256,128,0,371,
        390,3,258,129,0,372,390,3,260,130,0,373,390,3,262,131,0,374,390,
        3,264,132,0,375,390,3,266,133,0,376,390,3,268,134,0,377,390,3,270,
        135,0,378,390,3,272,136,0,379,390,3,274,137,0,380,390,3,276,138,
        0,381,390,3,278,139,0,382,390,3,280,140,0,383,390,3,282,141,0,384,
        390,3,284,142,0,385,390,3,286,143,0,386,390,3,288,144,0,387,390,
        3,290,145,0,388,390,3,292,146,0,389,369,1,0,0,0,389,370,1,0,0,0,
        389,371,1,0,0,0,389,372,1,0,0,0,389,373,1,0,0,0,389,374,1,0,0,0,
        389,375,1,0,0,0,389,376,1,0,0,0,389,377,1,0,0,0,389,378,1,0,0,0,
        389,379,1,0,0,0,389,380,1,0,0,0,389,381,1,0,0,0,389,382,1,0,0,0,
        389,383,1,0,0,0,389,384,1,0,0,0,389,385,1,0,0,0,389,386,1,0,0,0,
        389,387,1,0,0,0,389,388,1,0,0,0,390,9,1,0,0,0,391,414,3,136,68,0,
        392,414,3,140,70,0,393,414,3,142,71,0,394,414,3,144,72,0,395,414,
        3,146,73,0,396,414,3,148,74,0,397,414,3,150,75,0,398,414,3,152,76,
        0,399,414,3,154,77,0,400,414,3,156,78,0,401,414,3,158,79,0,402,414,
        3,160,80,0,403,414,3,164,82,0,404,414,3,166,83,0,405,414,3,172,86,
        0,406,414,3,174,87,0,407,414,3,176,88,0,408,414,3,178,89,0,409,414,
        3,180,90,0,410,414,3,182,91,0,411,414,3,184,92,0,412,414,3,186,93,
        0,413,391,1,0,0,0,413,392,1,0,0,0,413,393,1,0,0,0,413,394,1,0,0,
        0,413,395,1,0,0,0,413,396,1,0,0,0,413,397,1,0,0,0,413,398,1,0,0,
        0,413,399,1,0,0,0,413,400,1,0,0,0,413,401,1,0,0,0,413,402,1,0,0,
        0,413,403,1,0,0,0,413,404,1,0,0,0,413,405,1,0,0,0,413,406,1,0,0,
        0,413,407,1,0,0,0,413,408,1,0,0,0,413,409,1,0,0,0,413,410,1,0,0,
        0,413,411,1,0,0,0,413,412,1,0,0,0,414,11,1,0,0,0,415,433,3,100,50,
        0,416,433,3,102,51,0,417,433,3,104,52,0,418,433,3,106,53,0,419,433,
        3,108,54,0,420,433,3,110,55,0,421,433,3,114,57,0,422,433,3,116,58,
        0,423,433,3,118,59,0,424,433,3,120,60,0,425,433,3,122,61,0,426,433,
        3,124,62,0,427,433,3,126,63,0,428,433,3,128,64,0,429,433,3,130,65,
        0,430,433,3,132,66,0,431,433,3,134,67,0,432,415,1,0,0,0,432,416,
        1,0,0,0,432,417,1,0,0,0,432,418,1,0,0,0,432,419,1,0,0,0,432,420,
        1,0,0,0,432,421,1,0,0,0,432,422,1,0,0,0,432,423,1,0,0,0,432,424,
        1,0,0,0,432,425,1,0,0,0,432,426,1,0,0,0,432,427,1,0,0,0,432,428,
        1,0,0,0,432,429,1,0,0,0,432,430,1,0,0,0,432,431,1,0,0,0,433,13,1,
        0,0,0,434,470,3,16,8,0,435,470,3,18,9,0,436,470,3,20,10,0,437,470,
        3,22,11,0,438,470,3,24,12,0,439,470,3,26,13,0,440,470,3,30,15,0,
        441,470,3,36,18,0,442,470,3,38,19,0,443,470,3,40,20,0,444,470,3,
        42,21,0,445,470,3,44,22,0,446,470,3,46,23,0,447,470,3,48,24,0,448,
        470,3,50,25,0,449,470,3,56,28,0,450,470,3,58,29,0,451,470,3,60,30,
        0,452,470,3,62,31,0,453,470,3,64,32,0,454,470,3,66,33,0,455,470,
        3,68,34,0,456,470,3,70,35,0,457,470,3,76,38,0,458,470,3,78,39,0,
        459,470,3,80,40,0,460,470,3,82,41,0,461,470,3,84,42,0,462,470,3,
        86,43,0,463,470,3,88,44,0,464,470,3,90,45,0,465,470,3,92,46,0,466,
        470,3,94,47,0,467,470,3,96,48,0,468,470,3,98,49,0,469,434,1,0,0,
        0,469,435,1,0,0,0,469,436,1,0,0,0,469,437,1,0,0,0,469,438,1,0,0,
        0,469,439,1,0,0,0,469,440,1,0,0,0,469,441,1,0,0,0,469,442,1,0,0,
        0,469,443,1,0,0,0,469,444,1,0,0,0,469,445,1,0,0,0,469,446,1,0,0,
        0,469,447,1,0,0,0,469,448,1,0,0,0,469,449,1,0,0,0,469,450,1,0,0,
        0,469,451,1,0,0,0,469,452,1,0,0,0,469,453,1,0,0,0,469,454,1,0,0,
        0,469,455,1,0,0,0,469,456,1,0,0,0,469,457,1,0,0,0,469,458,1,0,0,
        0,469,459,1,0,0,0,469,460,1,0,0,0,469,461,1,0,0,0,469,462,1,0,0,
        0,469,463,1,0,0,0,469,464,1,0,0,0,469,465,1,0,0,0,469,466,1,0,0,
        0,469,467,1,0,0,0,469,468,1,0,0,0,470,15,1,0,0,0,471,472,5,121,0,
        0,472,474,5,158,0,0,473,475,3,308,154,0,474,473,1,0,0,0,475,476,
        1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,480,
        3,28,14,0,479,481,3,240,120,0,480,479,1,0,0,0,480,481,1,0,0,0,481,
        17,1,0,0,0,482,483,5,122,0,0,483,484,5,158,0,0,484,486,5,158,0,0,
        485,487,3,308,154,0,486,485,1,0,0,0,487,488,1,0,0,0,488,486,1,0,
        0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,492,3,28,14,0,491,493,3,
        240,120,0,492,491,1,0,0,0,492,493,1,0,0,0,493,19,1,0,0,0,494,495,
        5,123,0,0,495,497,3,308,154,0,496,498,5,158,0,0,497,496,1,0,0,0,
        497,498,1,0,0,0,498,21,1,0,0,0,499,501,5,124,0,0,500,502,3,308,154,
        0,501,500,1,0,0,0,502,503,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,
        0,504,505,1,0,0,0,505,506,5,158,0,0,506,23,1,0,0,0,507,508,5,125,
        0,0,508,510,3,308,154,0,509,511,5,158,0,0,510,509,1,0,0,0,510,511,
        1,0,0,0,511,25,1,0,0,0,512,514,5,126,0,0,513,515,3,308,154,0,514,
        513,1,0,0,0,515,516,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,
        518,1,0,0,0,518,519,5,158,0,0,519,27,1,0,0,0,520,521,7,0,0,0,521,
        29,1,0,0,0,522,523,5,127,0,0,523,525,3,308,154,0,524,526,3,252,126,
        0,525,524,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,529,3,32,16,
        0,528,527,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,532,5,48,0,
        0,531,530,1,0,0,0,531,532,1,0,0,0,532,534,1,0,0,0,533,535,5,59,0,
        0,534,533,1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,536,538,3,34,17,
        0,537,536,1,0,0,0,538,539,1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,
        0,540,31,1,0,0,0,541,542,7,1,0,0,542,33,1,0,0,0,543,544,3,294,147,
        0,544,545,3,298,149,0,545,35,1,0,0,0,546,547,5,128,0,0,547,548,3,
        308,154,0,548,37,1,0,0,0,549,550,5,129,0,0,550,551,3,308,154,0,551,
        552,3,296,148,0,552,553,3,296,148,0,553,39,1,0,0,0,554,555,5,130,
        0,0,555,557,5,158,0,0,556,558,3,308,154,0,557,556,1,0,0,0,558,559,
        1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,563,
        5,50,0,0,562,561,1,0,0,0,562,563,1,0,0,0,563,41,1,0,0,0,564,565,
        5,131,0,0,565,566,3,298,149,0,566,568,5,158,0,0,567,569,3,308,154,
        0,568,567,1,0,0,0,569,570,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,
        0,571,43,1,0,0,0,572,573,5,132,0,0,573,574,3,308,154,0,574,575,3,
        294,147,0,575,576,3,298,149,0,576,45,1,0,0,0,577,578,5,133,0,0,578,
        580,5,158,0,0,579,581,3,308,154,0,580,579,1,0,0,0,581,582,1,0,0,
        0,582,580,1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,0,584,586,3,52,26,
        0,585,584,1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,589,3,54,27,
        0,588,587,1,0,0,0,588,589,1,0,0,0,589,591,1,0,0,0,590,592,5,50,0,
        0,591,590,1,0,0,0,591,592,1,0,0,0,592,47,1,0,0,0,593,594,5,134,0,
        0,594,596,5,158,0,0,595,597,3,308,154,0,596,595,1,0,0,0,597,598,
        1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,601,1,0,0,0,600,602,
        3,112,56,0,601,600,1,0,0,0,601,602,1,0,0,0,602,49,1,0,0,0,603,604,
        5,135,0,0,604,605,3,298,149,0,605,607,5,158,0,0,606,608,3,308,154,
        0,607,606,1,0,0,0,608,609,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,
        0,610,612,1,0,0,0,611,613,3,52,26,0,612,611,1,0,0,0,612,613,1,0,
        0,0,613,615,1,0,0,0,614,616,3,54,27,0,615,614,1,0,0,0,615,616,1,
        0,0,0,616,51,1,0,0,0,617,619,5,51,0,0,618,620,3,294,147,0,619,618,
        1,0,0,0,620,621,1,0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,53,1,
        0,0,0,623,624,5,52,0,0,624,625,7,2,0,0,625,55,1,0,0,0,626,627,5,
        136,0,0,627,628,3,308,154,0,628,629,3,300,150,0,629,630,3,300,150,
        0,630,57,1,0,0,0,631,632,5,137,0,0,632,633,3,308,154,0,633,634,3,
        298,149,0,634,59,1,0,0,0,635,636,5,138,0,0,636,638,3,308,154,0,637,
        639,3,298,149,0,638,637,1,0,0,0,639,640,1,0,0,0,640,638,1,0,0,0,
        640,641,1,0,0,0,641,61,1,0,0,0,642,643,5,139,0,0,643,648,3,308,154,
        0,644,646,3,294,147,0,645,647,5,50,0,0,646,645,1,0,0,0,646,647,1,
        0,0,0,647,649,1,0,0,0,648,644,1,0,0,0,648,649,1,0,0,0,649,63,1,0,
        0,0,650,651,5,140,0,0,651,652,3,308,154,0,652,653,3,300,150,0,653,
        655,3,300,150,0,654,656,3,72,36,0,655,654,1,0,0,0,655,656,1,0,0,
        0,656,658,1,0,0,0,657,659,5,56,0,0,658,657,1,0,0,0,658,659,1,0,0,
        0,659,661,1,0,0,0,660,662,3,74,37,0,661,660,1,0,0,0,661,662,1,0,
        0,0,662,664,1,0,0,0,663,665,5,50,0,0,664,663,1,0,0,0,664,665,1,0,
        0,0,665,65,1,0,0,0,666,667,5,141,0,0,667,668,3,308,154,0,668,669,
        3,300,150,0,669,671,3,300,150,0,670,672,3,74,37,0,671,670,1,0,0,
        0,671,672,1,0,0,0,672,67,1,0,0,0,673,674,5,142,0,0,674,675,3,308,
        154,0,675,676,3,296,148,0,676,678,3,296,148,0,677,679,5,50,0,0,678,
        677,1,0,0,0,678,679,1,0,0,0,679,681,1,0,0,0,680,682,3,74,37,0,681,
        680,1,0,0,0,681,682,1,0,0,0,682,69,1,0,0,0,683,684,5,143,0,0,684,
        685,3,298,149,0,685,686,3,308,154,0,686,687,3,300,150,0,687,689,
        3,300,150,0,688,690,3,72,36,0,689,688,1,0,0,0,689,690,1,0,0,0,690,
        692,1,0,0,0,691,693,5,56,0,0,692,691,1,0,0,0,692,693,1,0,0,0,693,
        695,1,0,0,0,694,696,3,74,37,0,695,694,1,0,0,0,695,696,1,0,0,0,696,
        71,1,0,0,0,697,698,7,3,0,0,698,73,1,0,0,0,699,700,5,45,0,0,700,701,
        3,294,147,0,701,702,3,294,147,0,702,75,1,0,0,0,703,704,5,144,0,0,
        704,705,3,308,154,0,705,707,3,298,149,0,706,708,5,49,0,0,707,706,
        1,0,0,0,707,708,1,0,0,0,708,77,1,0,0,0,709,710,5,152,0,0,710,711,
        3,308,154,0,711,713,3,298,149,0,712,714,5,49,0,0,713,712,1,0,0,0,
        713,714,1,0,0,0,714,79,1,0,0,0,715,716,5,145,0,0,716,718,3,308,154,
        0,717,719,3,298,149,0,718,717,1,0,0,0,719,720,1,0,0,0,720,718,1,
        0,0,0,720,721,1,0,0,0,721,81,1,0,0,0,722,723,5,146,0,0,723,724,3,
        308,154,0,724,725,3,300,150,0,725,726,3,300,150,0,726,83,1,0,0,0,
        727,728,5,147,0,0,728,729,3,308,154,0,729,730,3,294,147,0,730,731,
        3,294,147,0,731,85,1,0,0,0,732,733,5,148,0,0,733,734,3,308,154,0,
        734,735,3,296,148,0,735,736,3,296,148,0,736,87,1,0,0,0,737,738,5,
        149,0,0,738,739,3,308,154,0,739,740,3,294,147,0,740,742,3,294,147,
        0,741,743,5,50,0,0,742,741,1,0,0,0,742,743,1,0,0,0,743,89,1,0,0,
        0,744,745,5,150,0,0,745,746,3,308,154,0,746,747,3,300,150,0,747,
        749,3,300,150,0,748,750,3,74,37,0,749,748,1,0,0,0,749,750,1,0,0,
        0,750,91,1,0,0,0,751,752,5,151,0,0,752,753,3,308,154,0,753,754,3,
        296,148,0,754,756,3,296,148,0,755,757,5,50,0,0,756,755,1,0,0,0,756,
        757,1,0,0,0,757,759,1,0,0,0,758,760,3,74,37,0,759,758,1,0,0,0,759,
        760,1,0,0,0,760,93,1,0,0,0,761,762,5,153,0,0,762,763,3,308,154,0,
        763,765,3,294,147,0,764,766,3,238,119,0,765,764,1,0,0,0,765,766,
        1,0,0,0,766,768,1,0,0,0,767,769,3,240,120,0,768,767,1,0,0,0,768,
        769,1,0,0,0,769,95,1,0,0,0,770,771,5,154,0,0,771,773,5,158,0,0,772,
        774,3,308,154,0,773,772,1,0,0,0,774,775,1,0,0,0,775,773,1,0,0,0,
        775,776,1,0,0,0,776,778,1,0,0,0,777,779,3,52,26,0,778,777,1,0,0,
        0,778,779,1,0,0,0,779,781,1,0,0,0,780,782,3,54,27,0,781,780,1,0,
        0,0,781,782,1,0,0,0,782,784,1,0,0,0,783,785,5,50,0,0,784,783,1,0,
        0,0,784,785,1,0,0,0,785,97,1,0,0,0,786,787,5,155,0,0,787,788,3,298,
        149,0,788,790,5,158,0,0,789,791,3,308,154,0,790,789,1,0,0,0,791,
        792,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,794,
        796,3,52,26,0,795,794,1,0,0,0,795,796,1,0,0,0,796,798,1,0,0,0,797,
        799,3,54,27,0,798,797,1,0,0,0,798,799,1,0,0,0,799,99,1,0,0,0,800,
        801,5,104,0,0,801,803,3,306,153,0,802,804,3,298,149,0,803,802,1,
        0,0,0,804,805,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,806,101,1,
        0,0,0,807,808,5,105,0,0,808,809,3,306,153,0,809,103,1,0,0,0,810,
        812,5,106,0,0,811,813,3,306,153,0,812,811,1,0,0,0,813,814,1,0,0,
        0,814,812,1,0,0,0,814,815,1,0,0,0,815,105,1,0,0,0,816,817,5,107,
        0,0,817,819,3,298,149,0,818,820,3,306,153,0,819,818,1,0,0,0,820,
        821,1,0,0,0,821,819,1,0,0,0,821,822,1,0,0,0,822,107,1,0,0,0,823,
        825,5,108,0,0,824,826,3,306,153,0,825,824,1,0,0,0,826,827,1,0,0,
        0,827,825,1,0,0,0,827,828,1,0,0,0,828,109,1,0,0,0,829,830,5,109,
        0,0,830,832,5,158,0,0,831,833,3,306,153,0,832,831,1,0,0,0,833,834,
        1,0,0,0,834,832,1,0,0,0,834,835,1,0,0,0,835,837,1,0,0,0,836,838,
        3,112,56,0,837,836,1,0,0,0,837,838,1,0,0,0,838,111,1,0,0,0,839,840,
        5,45,0,0,840,841,5,158,0,0,841,113,1,0,0,0,842,843,5,110,0,0,843,
        845,3,298,149,0,844,846,3,306,153,0,845,844,1,0,0,0,846,847,1,0,
        0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,115,1,0,0,0,849,850,5,111,
        0,0,850,851,3,306,153,0,851,852,3,298,149,0,852,117,1,0,0,0,853,
        854,5,112,0,0,854,856,3,306,153,0,855,857,3,298,149,0,856,855,1,
        0,0,0,857,858,1,0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,119,1,
        0,0,0,860,861,5,113,0,0,861,862,3,306,153,0,862,121,1,0,0,0,863,
        864,5,114,0,0,864,865,3,306,153,0,865,866,3,306,153,0,866,123,1,
        0,0,0,867,868,5,115,0,0,868,870,3,306,153,0,869,871,5,158,0,0,870,
        869,1,0,0,0,870,871,1,0,0,0,871,125,1,0,0,0,872,873,5,116,0,0,873,
        875,3,306,153,0,874,876,3,294,147,0,875,874,1,0,0,0,875,876,1,0,
        0,0,876,127,1,0,0,0,877,878,5,117,0,0,878,880,3,306,153,0,879,881,
        3,298,149,0,880,879,1,0,0,0,881,882,1,0,0,0,882,880,1,0,0,0,882,
        883,1,0,0,0,883,129,1,0,0,0,884,885,5,118,0,0,885,886,3,306,153,
        0,886,888,3,294,147,0,887,889,3,238,119,0,888,887,1,0,0,0,888,889,
        1,0,0,0,889,891,1,0,0,0,890,892,3,240,120,0,891,890,1,0,0,0,891,
        892,1,0,0,0,892,131,1,0,0,0,893,895,5,119,0,0,894,896,3,306,153,
        0,895,894,1,0,0,0,896,897,1,0,0,0,897,895,1,0,0,0,897,898,1,0,0,
        0,898,133,1,0,0,0,899,900,5,120,0,0,900,902,3,298,149,0,901,903,
        3,306,153,0,902,901,1,0,0,0,903,904,1,0,0,0,904,902,1,0,0,0,904,
        905,1,0,0,0,905,135,1,0,0,0,906,907,5,82,0,0,907,908,3,304,152,0,
        908,909,3,304,152,0,909,910,3,138,69,0,910,911,3,138,69,0,911,137,
        1,0,0,0,912,913,7,4,0,0,913,139,1,0,0,0,914,915,5,83,0,0,915,916,
        3,304,152,0,916,917,3,304,152,0,917,918,3,138,69,0,918,919,3,138,
        69,0,919,920,5,158,0,0,920,141,1,0,0,0,921,922,5,84,0,0,922,924,
        5,158,0,0,923,925,3,304,152,0,924,923,1,0,0,0,925,926,1,0,0,0,926,
        924,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,930,3,138,69,0,929,
        931,3,240,120,0,930,929,1,0,0,0,930,931,1,0,0,0,931,143,1,0,0,0,
        932,933,5,85,0,0,933,934,5,158,0,0,934,936,5,158,0,0,935,937,3,304,
        152,0,936,935,1,0,0,0,937,938,1,0,0,0,938,936,1,0,0,0,938,939,1,
        0,0,0,939,940,1,0,0,0,940,942,3,138,69,0,941,943,3,240,120,0,942,
        941,1,0,0,0,942,943,1,0,0,0,943,145,1,0,0,0,944,945,5,86,0,0,945,
        947,3,304,152,0,946,948,5,158,0,0,947,946,1,0,0,0,947,948,1,0,0,
        0,948,147,1,0,0,0,949,951,5,87,0,0,950,952,3,304,152,0,951,950,1,
        0,0,0,952,953,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,955,1,
        0,0,0,955,956,5,158,0,0,956,149,1,0,0,0,957,958,5,88,0,0,958,960,
        3,304,152,0,959,961,5,158,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,
        151,1,0,0,0,962,964,5,89,0,0,963,965,3,304,152,0,964,963,1,0,0,0,
        965,966,1,0,0,0,966,964,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,
        968,969,5,158,0,0,969,153,1,0,0,0,970,971,5,90,0,0,971,972,3,304,
        152,0,972,973,3,304,152,0,973,155,1,0,0,0,974,975,5,91,0,0,975,976,
        3,304,152,0,976,977,3,304,152,0,977,978,5,158,0,0,978,157,1,0,0,
        0,979,980,5,92,0,0,980,981,3,304,152,0,981,982,3,294,147,0,982,159,
        1,0,0,0,983,984,5,93,0,0,984,985,3,304,152,0,985,986,3,162,81,0,
        986,987,3,298,149,0,987,988,3,298,149,0,988,161,1,0,0,0,989,990,
        7,5,0,0,990,163,1,0,0,0,991,992,5,94,0,0,992,993,3,304,152,0,993,
        165,1,0,0,0,994,995,5,95,0,0,995,996,3,304,152,0,996,998,3,298,149,
        0,997,999,3,168,84,0,998,997,1,0,0,0,998,999,1,0,0,0,999,1001,1,
        0,0,0,1000,1002,3,240,120,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,
        1002,1004,1,0,0,0,1003,1005,3,170,85,0,1004,1003,1,0,0,0,1004,1005,
        1,0,0,0,1005,167,1,0,0,0,1006,1007,5,43,0,0,1007,1008,3,294,147,
        0,1008,169,1,0,0,0,1009,1010,5,44,0,0,1010,1011,5,158,0,0,1011,171,
        1,0,0,0,1012,1013,5,96,0,0,1013,1015,3,304,152,0,1014,1016,3,298,
        149,0,1015,1014,1,0,0,0,1016,1017,1,0,0,0,1017,1015,1,0,0,0,1017,
        1018,1,0,0,0,1018,173,1,0,0,0,1019,1020,5,97,0,0,1020,1022,3,304,
        152,0,1021,1023,3,298,149,0,1022,1021,1,0,0,0,1023,1024,1,0,0,0,
        1024,1022,1,0,0,0,1024,1025,1,0,0,0,1025,175,1,0,0,0,1026,1027,5,
        98,0,0,1027,1029,3,304,152,0,1028,1030,3,298,149,0,1029,1028,1,0,
        0,0,1030,1031,1,0,0,0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,1032,177,
        1,0,0,0,1033,1034,5,99,0,0,1034,1036,3,304,152,0,1035,1037,3,298,
        149,0,1036,1035,1,0,0,0,1037,1038,1,0,0,0,1038,1036,1,0,0,0,1038,
        1039,1,0,0,0,1039,179,1,0,0,0,1040,1041,5,100,0,0,1041,1042,3,304,
        152,0,1042,1043,3,294,147,0,1043,1044,3,294,147,0,1044,181,1,0,0,
        0,1045,1046,5,101,0,0,1046,1047,3,304,152,0,1047,1048,3,294,147,
        0,1048,1049,3,298,149,0,1049,183,1,0,0,0,1050,1051,5,102,0,0,1051,
        1052,3,304,152,0,1052,1053,3,294,147,0,1053,1054,3,298,149,0,1054,
        185,1,0,0,0,1055,1056,5,103,0,0,1056,1057,3,304,152,0,1057,1058,
        3,294,147,0,1058,1059,3,294,147,0,1059,187,1,0,0,0,1060,1061,5,3,
        0,0,1061,1062,3,310,155,0,1062,1064,3,298,149,0,1063,1065,3,190,
        95,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1067,1,0,0,0,1066,
        1068,5,5,0,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,189,1,0,0,
        0,1069,1070,5,4,0,0,1070,1071,3,192,96,0,1071,191,1,0,0,0,1072,1073,
        5,158,0,0,1073,193,1,0,0,0,1074,1076,5,6,0,0,1075,1077,3,310,155,
        0,1076,1075,1,0,0,0,1077,1078,1,0,0,0,1078,1076,1,0,0,0,1078,1079,
        1,0,0,0,1079,195,1,0,0,0,1080,1082,5,7,0,0,1081,1083,3,310,155,0,
        1082,1081,1,0,0,0,1083,1084,1,0,0,0,1084,1082,1,0,0,0,1084,1085,
        1,0,0,0,1085,197,1,0,0,0,1086,1087,5,8,0,0,1087,1088,3,310,155,0,
        1088,199,1,0,0,0,1089,1091,5,9,0,0,1090,1092,3,310,155,0,1091,1090,
        1,0,0,0,1092,1093,1,0,0,0,1093,1091,1,0,0,0,1093,1094,1,0,0,0,1094,
        201,1,0,0,0,1095,1096,5,10,0,0,1096,1097,3,310,155,0,1097,1099,3,
        294,147,0,1098,1100,3,210,105,0,1099,1098,1,0,0,0,1099,1100,1,0,
        0,0,1100,203,1,0,0,0,1101,1102,5,15,0,0,1102,1103,3,310,155,0,1103,
        1105,3,294,147,0,1104,1106,3,210,105,0,1105,1104,1,0,0,0,1105,1106,
        1,0,0,0,1106,205,1,0,0,0,1107,1108,5,17,0,0,1108,1109,3,310,155,
        0,1109,1111,3,294,147,0,1110,1112,3,210,105,0,1111,1110,1,0,0,0,
        1111,1112,1,0,0,0,1112,207,1,0,0,0,1113,1114,5,18,0,0,1114,1115,
        3,310,155,0,1115,1117,3,294,147,0,1116,1118,3,210,105,0,1117,1116,
        1,0,0,0,1117,1118,1,0,0,0,1118,209,1,0,0,0,1119,1120,7,6,0,0,1120,
        211,1,0,0,0,1121,1122,5,16,0,0,1122,1123,3,310,155,0,1123,213,1,
        0,0,0,1124,1125,5,19,0,0,1125,1126,3,310,155,0,1126,215,1,0,0,0,
        1127,1128,5,20,0,0,1128,1129,3,312,156,0,1129,217,1,0,0,0,1130,1131,
        5,21,0,0,1131,1132,3,310,155,0,1132,1133,3,192,96,0,1133,219,1,0,
        0,0,1134,1135,5,22,0,0,1135,1136,3,222,111,0,1136,1137,3,310,155,
        0,1137,221,1,0,0,0,1138,1139,7,7,0,0,1139,223,1,0,0,0,1140,1141,
        5,27,0,0,1141,1142,3,310,155,0,1142,225,1,0,0,0,1143,1144,5,28,0,
        0,1144,1145,3,310,155,0,1145,227,1,0,0,0,1146,1147,5,29,0,0,1147,
        1148,3,310,155,0,1148,229,1,0,0,0,1149,1150,5,30,0,0,1150,231,1,
        0,0,0,1151,1152,5,31,0,0,1152,1153,3,310,155,0,1153,1154,3,298,149,
        0,1154,233,1,0,0,0,1155,1156,5,32,0,0,1156,1157,3,310,155,0,1157,
        1158,3,298,149,0,1158,235,1,0,0,0,1159,1160,5,33,0,0,1160,1162,3,
        294,147,0,1161,1163,3,238,119,0,1162,1161,1,0,0,0,1162,1163,1,0,
        0,0,1163,1165,1,0,0,0,1164,1166,3,240,120,0,1165,1164,1,0,0,0,1165,
        1166,1,0,0,0,1166,1168,1,0,0,0,1167,1169,3,242,121,0,1168,1167,1,
        0,0,0,1168,1169,1,0,0,0,1169,237,1,0,0,0,1170,1171,5,34,0,0,1171,
        1172,3,312,156,0,1172,239,1,0,0,0,1173,1174,5,35,0,0,1174,1175,5,
        158,0,0,1175,241,1,0,0,0,1176,1177,5,36,0,0,1177,1178,3,298,149,
        0,1178,243,1,0,0,0,1179,1181,5,37,0,0,1180,1182,3,310,155,0,1181,
        1180,1,0,0,0,1182,1183,1,0,0,0,1183,1181,1,0,0,0,1183,1184,1,0,0,
        0,1184,245,1,0,0,0,1185,1186,5,36,0,0,1186,1187,3,310,155,0,1187,
        247,1,0,0,0,1188,1189,5,38,0,0,1189,1190,5,158,0,0,1190,1191,5,158,
        0,0,1191,249,1,0,0,0,1192,1193,5,57,0,0,1193,1194,3,302,151,0,1194,
        1196,3,298,149,0,1195,1197,3,252,126,0,1196,1195,1,0,0,0,1196,1197,
        1,0,0,0,1197,1199,1,0,0,0,1198,1200,5,58,0,0,1199,1198,1,0,0,0,1199,
        1200,1,0,0,0,1200,1203,1,0,0,0,1201,1204,3,254,127,0,1202,1204,5,
        67,0,0,1203,1201,1,0,0,0,1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,
        251,1,0,0,0,1205,1206,7,8,0,0,1206,253,1,0,0,0,1207,1208,5,63,0,
        0,1208,1216,5,158,0,0,1209,1210,5,64,0,0,1210,1216,5,158,0,0,1211,
        1212,5,65,0,0,1212,1216,5,158,0,0,1213,1214,5,66,0,0,1214,1216,5,
        158,0,0,1215,1207,1,0,0,0,1215,1209,1,0,0,0,1215,1211,1,0,0,0,1215,
        1213,1,0,0,0,1216,255,1,0,0,0,1217,1218,5,58,0,0,1218,1219,3,302,
        151,0,1219,257,1,0,0,0,1220,1221,5,59,0,0,1221,1222,3,302,151,0,
        1222,259,1,0,0,0,1223,1224,5,60,0,0,1224,1225,3,302,151,0,1225,1226,
        3,294,147,0,1226,261,1,0,0,0,1227,1228,5,61,0,0,1228,1229,3,302,
        151,0,1229,263,1,0,0,0,1230,1231,5,62,0,0,1231,1232,3,302,151,0,
        1232,1233,3,294,147,0,1233,265,1,0,0,0,1234,1235,5,68,0,0,1235,1236,
        3,302,151,0,1236,1237,3,298,149,0,1237,267,1,0,0,0,1238,1239,5,69,
        0,0,1239,1240,3,302,151,0,1240,269,1,0,0,0,1241,1242,5,70,0,0,1242,
        1245,3,302,151,0,1243,1246,3,254,127,0,1244,1246,5,27,0,0,1245,1243,
        1,0,0,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,271,1,0,0,0,1247,
        1248,5,71,0,0,1248,1249,3,302,151,0,1249,1250,3,294,147,0,1250,1251,
        3,294,147,0,1251,273,1,0,0,0,1252,1253,5,72,0,0,1253,1254,3,302,
        151,0,1254,1255,3,298,149,0,1255,275,1,0,0,0,1256,1258,5,73,0,0,
        1257,1259,3,302,151,0,1258,1257,1,0,0,0,1259,1260,1,0,0,0,1260,1258,
        1,0,0,0,1260,1261,1,0,0,0,1261,277,1,0,0,0,1262,1266,5,74,0,0,1263,
        1264,3,302,151,0,1264,1265,3,298,149,0,1265,1267,1,0,0,0,1266,1263,
        1,0,0,0,1267,1268,1,0,0,0,1268,1266,1,0,0,0,1268,1269,1,0,0,0,1269,
        279,1,0,0,0,1270,1274,5,75,0,0,1271,1272,3,302,151,0,1272,1273,3,
        298,149,0,1273,1275,1,0,0,0,1274,1271,1,0,0,0,1275,1276,1,0,0,0,
        1276,1274,1,0,0,0,1276,1277,1,0,0,0,1277,281,1,0,0,0,1278,1279,5,
        76,0,0,1279,1280,3,302,151,0,1280,1281,5,158,0,0,1281,1282,3,298,
        149,0,1282,283,1,0,0,0,1283,1284,5,77,0,0,1284,1285,3,302,151,0,
        1285,1286,5,158,0,0,1286,1287,3,298,149,0,1287,285,1,0,0,0,1288,
        1289,5,78,0,0,1289,1290,3,302,151,0,1290,1291,3,298,149,0,1291,287,
        1,0,0,0,1292,1293,5,79,0,0,1293,1294,3,302,151,0,1294,1295,5,158,
        0,0,1295,1296,3,298,149,0,1296,289,1,0,0,0,1297,1298,5,80,0,0,1298,
        1299,3,302,151,0,1299,291,1,0,0,0,1300,1301,5,81,0,0,1301,1302,3,
        302,151,0,1302,1303,3,294,147,0,1303,1304,3,294,147,0,1304,293,1,
        0,0,0,1305,1306,7,9,0,0,1306,295,1,0,0,0,1307,1308,7,10,0,0,1308,
        297,1,0,0,0,1309,1310,7,11,0,0,1310,299,1,0,0,0,1311,1312,3,298,
        149,0,1312,301,1,0,0,0,1313,1314,3,298,149,0,1314,303,1,0,0,0,1315,
        1316,3,298,149,0,1316,305,1,0,0,0,1317,1318,3,298,149,0,1318,307,
        1,0,0,0,1319,1320,3,298,149,0,1320,309,1,0,0,0,1321,1322,3,298,149,
        0,1322,311,1,0,0,0,1323,1324,3,298,149,0,1324,313,1,0,0,0,116,315,
        323,330,334,341,367,389,413,432,469,476,480,488,492,497,503,510,
        516,525,528,531,534,539,559,562,570,582,585,588,591,598,601,609,
        612,615,621,640,646,648,655,658,661,664,671,678,681,689,692,695,
        707,713,720,742,749,756,759,765,768,775,778,781,784,792,795,798,
        805,814,821,827,834,837,847,858,870,875,882,888,891,897,904,926,
        930,938,942,947,953,960,966,998,1001,1004,1017,1024,1031,1038,1064,
        1067,1078,1084,1093,1099,1105,1111,1117,1162,1165,1168,1183,1196,
        1199,1203,1215,1245,1260,1268,1276
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!RedisParser.__ATN) {
            RedisParser.__ATN = new antlr.ATNDeserializer().deserialize(RedisParser._serializedATN);
        }

        return RedisParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(RedisParser.literalNames, RedisParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return RedisParser.vocabulary;
    }

    private static readonly decisionsToDFA = RedisParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(RedisParser.EOF, 0)!;
    }
    public commands(): CommandsContext | null {
        return this.getRuleContext(0, CommandsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_root;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRoot) {
            return visitor.visitRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public command(): CommandContext {
        return this.getRuleContext(0, CommandContext)!;
    }
    public NEWLINE(): antlr.TerminalNode[];
    public NEWLINE(i: number): antlr.TerminalNode | null;
    public NEWLINE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(RedisParser.NEWLINE);
    	} else {
    		return this.getToken(RedisParser.NEWLINE, i);
    	}
    }
    public commands(): CommandsContext | null {
        return this.getRuleContext(0, CommandsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_commands;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitCommands) {
            return visitor.visitCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commonCommand(): CommonCommandContext | null {
        return this.getRuleContext(0, CommonCommandContext);
    }
    public stringCommand(): StringCommandContext | null {
        return this.getRuleContext(0, StringCommandContext);
    }
    public listCommand(): ListCommandContext | null {
        return this.getRuleContext(0, ListCommandContext);
    }
    public setCommand(): SetCommandContext | null {
        return this.getRuleContext(0, SetCommandContext);
    }
    public sortedSetCommand(): SortedSetCommandContext | null {
        return this.getRuleContext(0, SortedSetCommandContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_command;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitCommand) {
            return visitor.visitCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public copyCommand(): CopyCommandContext | null {
        return this.getRuleContext(0, CopyCommandContext);
    }
    public deleteCommand(): DeleteCommandContext | null {
        return this.getRuleContext(0, DeleteCommandContext);
    }
    public unlinkCommand(): UnlinkCommandContext | null {
        return this.getRuleContext(0, UnlinkCommandContext);
    }
    public dumpCommand(): DumpCommandContext | null {
        return this.getRuleContext(0, DumpCommandContext);
    }
    public existsCommand(): ExistsCommandContext | null {
        return this.getRuleContext(0, ExistsCommandContext);
    }
    public expireCommand(): ExpireCommandContext | null {
        return this.getRuleContext(0, ExpireCommandContext);
    }
    public expireAtCommand(): ExpireAtCommandContext | null {
        return this.getRuleContext(0, ExpireAtCommandContext);
    }
    public expireTimeCommand(): ExpireTimeCommandContext | null {
        return this.getRuleContext(0, ExpireTimeCommandContext);
    }
    public pExpireCommand(): PExpireCommandContext | null {
        return this.getRuleContext(0, PExpireCommandContext);
    }
    public pExpireAtCommand(): PExpireAtCommandContext | null {
        return this.getRuleContext(0, PExpireAtCommandContext);
    }
    public pExpireTimeCommand(): PExpireTimeCommandContext | null {
        return this.getRuleContext(0, PExpireTimeCommandContext);
    }
    public keysCommand(): KeysCommandContext | null {
        return this.getRuleContext(0, KeysCommandContext);
    }
    public moveCommand(): MoveCommandContext | null {
        return this.getRuleContext(0, MoveCommandContext);
    }
    public objectCommand(): ObjectCommandContext | null {
        return this.getRuleContext(0, ObjectCommandContext);
    }
    public persistCommand(): PersistCommandContext | null {
        return this.getRuleContext(0, PersistCommandContext);
    }
    public ttlCommand(): TtlCommandContext | null {
        return this.getRuleContext(0, TtlCommandContext);
    }
    public pTtlCommand(): PTtlCommandContext | null {
        return this.getRuleContext(0, PTtlCommandContext);
    }
    public randomKeyCommand(): RandomKeyCommandContext | null {
        return this.getRuleContext(0, RandomKeyCommandContext);
    }
    public renameCommand(): RenameCommandContext | null {
        return this.getRuleContext(0, RenameCommandContext);
    }
    public renameNxCommand(): RenameNxCommandContext | null {
        return this.getRuleContext(0, RenameNxCommandContext);
    }
    public scanCommand(): ScanCommandContext | null {
        return this.getRuleContext(0, ScanCommandContext);
    }
    public touchCommand(): TouchCommandContext | null {
        return this.getRuleContext(0, TouchCommandContext);
    }
    public typeCommand(): TypeCommandContext | null {
        return this.getRuleContext(0, TypeCommandContext);
    }
    public waitCommand(): WaitCommandContext | null {
        return this.getRuleContext(0, WaitCommandContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_commonCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitCommonCommand) {
            return visitor.visitCommonCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringSetCommand(): StringSetCommandContext | null {
        return this.getRuleContext(0, StringSetCommandContext);
    }
    public getCommand(): GetCommandContext | null {
        return this.getRuleContext(0, GetCommandContext);
    }
    public incrementCommand(): IncrementCommandContext | null {
        return this.getRuleContext(0, IncrementCommandContext);
    }
    public incrementByCommand(): IncrementByCommandContext | null {
        return this.getRuleContext(0, IncrementByCommandContext);
    }
    public decrementCommand(): DecrementCommandContext | null {
        return this.getRuleContext(0, DecrementCommandContext);
    }
    public decrementByCommand(): DecrementByCommandContext | null {
        return this.getRuleContext(0, DecrementByCommandContext);
    }
    public appendCommand(): AppendCommandContext | null {
        return this.getRuleContext(0, AppendCommandContext);
    }
    public getDeleteCommand(): GetDeleteCommandContext | null {
        return this.getRuleContext(0, GetDeleteCommandContext);
    }
    public getExCommand(): GetExCommandContext | null {
        return this.getRuleContext(0, GetExCommandContext);
    }
    public getRangeCommand(): GetRangeCommandContext | null {
        return this.getRuleContext(0, GetRangeCommandContext);
    }
    public getSetCommand(): GetSetCommandContext | null {
        return this.getRuleContext(0, GetSetCommandContext);
    }
    public mGetCommand(): MGetCommandContext | null {
        return this.getRuleContext(0, MGetCommandContext);
    }
    public mSetCommand(): MSetCommandContext | null {
        return this.getRuleContext(0, MSetCommandContext);
    }
    public mSetNxCommand(): MSetNxCommandContext | null {
        return this.getRuleContext(0, MSetNxCommandContext);
    }
    public pSetExCommand(): PSetExCommandContext | null {
        return this.getRuleContext(0, PSetExCommandContext);
    }
    public setExCommand(): SetExCommandContext | null {
        return this.getRuleContext(0, SetExCommandContext);
    }
    public setNxCommand(): SetNxCommandContext | null {
        return this.getRuleContext(0, SetNxCommandContext);
    }
    public setRangeCommand(): SetRangeCommandContext | null {
        return this.getRuleContext(0, SetRangeCommandContext);
    }
    public stringLengthCommand(): StringLengthCommandContext | null {
        return this.getRuleContext(0, StringLengthCommandContext);
    }
    public substringCommand(): SubstringCommandContext | null {
        return this.getRuleContext(0, SubstringCommandContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_stringCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitStringCommand) {
            return visitor.visitStringCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lmoveCommand(): LmoveCommandContext | null {
        return this.getRuleContext(0, LmoveCommandContext);
    }
    public blmoveCommand(): BlmoveCommandContext | null {
        return this.getRuleContext(0, BlmoveCommandContext);
    }
    public lmpopCommand(): LmpopCommandContext | null {
        return this.getRuleContext(0, LmpopCommandContext);
    }
    public blmpopCommand(): BlmpopCommandContext | null {
        return this.getRuleContext(0, BlmpopCommandContext);
    }
    public lpopCommand(): LpopCommandContext | null {
        return this.getRuleContext(0, LpopCommandContext);
    }
    public blpopCommand(): BlpopCommandContext | null {
        return this.getRuleContext(0, BlpopCommandContext);
    }
    public rpopCommand(): RpopCommandContext | null {
        return this.getRuleContext(0, RpopCommandContext);
    }
    public brpopCommand(): BrpopCommandContext | null {
        return this.getRuleContext(0, BrpopCommandContext);
    }
    public rpopLpushCommand(): RpopLpushCommandContext | null {
        return this.getRuleContext(0, RpopLpushCommandContext);
    }
    public brpopLpushCommand(): BrpopLpushCommandContext | null {
        return this.getRuleContext(0, BrpopLpushCommandContext);
    }
    public lindexCommand(): LindexCommandContext | null {
        return this.getRuleContext(0, LindexCommandContext);
    }
    public linsertCommand(): LinsertCommandContext | null {
        return this.getRuleContext(0, LinsertCommandContext);
    }
    public llenCommand(): LlenCommandContext | null {
        return this.getRuleContext(0, LlenCommandContext);
    }
    public lposCommand(): LposCommandContext | null {
        return this.getRuleContext(0, LposCommandContext);
    }
    public lpushCommand(): LpushCommandContext | null {
        return this.getRuleContext(0, LpushCommandContext);
    }
    public lpushxCommand(): LpushxCommandContext | null {
        return this.getRuleContext(0, LpushxCommandContext);
    }
    public rpushCommand(): RpushCommandContext | null {
        return this.getRuleContext(0, RpushCommandContext);
    }
    public rpushxCommand(): RpushxCommandContext | null {
        return this.getRuleContext(0, RpushxCommandContext);
    }
    public lrangeCommand(): LrangeCommandContext | null {
        return this.getRuleContext(0, LrangeCommandContext);
    }
    public lremCommand(): LremCommandContext | null {
        return this.getRuleContext(0, LremCommandContext);
    }
    public lsetCommand(): LsetCommandContext | null {
        return this.getRuleContext(0, LsetCommandContext);
    }
    public ltrimCommand(): LtrimCommandContext | null {
        return this.getRuleContext(0, LtrimCommandContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_listCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitListCommand) {
            return visitor.visitListCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public saddCommand(): SaddCommandContext | null {
        return this.getRuleContext(0, SaddCommandContext);
    }
    public scardCommand(): ScardCommandContext | null {
        return this.getRuleContext(0, ScardCommandContext);
    }
    public sdiffCommand(): SdiffCommandContext | null {
        return this.getRuleContext(0, SdiffCommandContext);
    }
    public sdiffstoreCommand(): SdiffstoreCommandContext | null {
        return this.getRuleContext(0, SdiffstoreCommandContext);
    }
    public sinterCommand(): SinterCommandContext | null {
        return this.getRuleContext(0, SinterCommandContext);
    }
    public sintercardCommand(): SintercardCommandContext | null {
        return this.getRuleContext(0, SintercardCommandContext);
    }
    public sinterstoreCommand(): SinterstoreCommandContext | null {
        return this.getRuleContext(0, SinterstoreCommandContext);
    }
    public sismemberCommand(): SismemberCommandContext | null {
        return this.getRuleContext(0, SismemberCommandContext);
    }
    public smismemberCommand(): SmismemberCommandContext | null {
        return this.getRuleContext(0, SmismemberCommandContext);
    }
    public smembersCommand(): SmembersCommandContext | null {
        return this.getRuleContext(0, SmembersCommandContext);
    }
    public smoveCommand(): SmoveCommandContext | null {
        return this.getRuleContext(0, SmoveCommandContext);
    }
    public spopCommand(): SpopCommandContext | null {
        return this.getRuleContext(0, SpopCommandContext);
    }
    public srandmemberCommand(): SrandmemberCommandContext | null {
        return this.getRuleContext(0, SrandmemberCommandContext);
    }
    public sremCommand(): SremCommandContext | null {
        return this.getRuleContext(0, SremCommandContext);
    }
    public sscanComman(): SscanCommanContext | null {
        return this.getRuleContext(0, SscanCommanContext);
    }
    public sunionCommand(): SunionCommandContext | null {
        return this.getRuleContext(0, SunionCommandContext);
    }
    public sunionstoreCommand(): SunionstoreCommandContext | null {
        return this.getRuleContext(0, SunionstoreCommandContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_setCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSetCommand) {
            return visitor.visitSetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortedSetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public zmpopCommand(): ZmpopCommandContext | null {
        return this.getRuleContext(0, ZmpopCommandContext);
    }
    public bzmpopCommand(): BzmpopCommandContext | null {
        return this.getRuleContext(0, BzmpopCommandContext);
    }
    public zpopmaxCommand(): ZpopmaxCommandContext | null {
        return this.getRuleContext(0, ZpopmaxCommandContext);
    }
    public bzpopmaxCommand(): BzpopmaxCommandContext | null {
        return this.getRuleContext(0, BzpopmaxCommandContext);
    }
    public zpopminCommand(): ZpopminCommandContext | null {
        return this.getRuleContext(0, ZpopminCommandContext);
    }
    public bzpopminCommand(): BzpopminCommandContext | null {
        return this.getRuleContext(0, BzpopminCommandContext);
    }
    public zaddCommand(): ZaddCommandContext | null {
        return this.getRuleContext(0, ZaddCommandContext);
    }
    public zcardCommand(): ZcardCommandContext | null {
        return this.getRuleContext(0, ZcardCommandContext);
    }
    public zcountCommand(): ZcountCommandContext | null {
        return this.getRuleContext(0, ZcountCommandContext);
    }
    public zdiffCommand(): ZdiffCommandContext | null {
        return this.getRuleContext(0, ZdiffCommandContext);
    }
    public zdiffstoreCommand(): ZdiffstoreCommandContext | null {
        return this.getRuleContext(0, ZdiffstoreCommandContext);
    }
    public zincrbyCommand(): ZincrbyCommandContext | null {
        return this.getRuleContext(0, ZincrbyCommandContext);
    }
    public zinterCommand(): ZinterCommandContext | null {
        return this.getRuleContext(0, ZinterCommandContext);
    }
    public zintercardCommand(): ZintercardCommandContext | null {
        return this.getRuleContext(0, ZintercardCommandContext);
    }
    public zinterstoreCommand(): ZinterstoreCommandContext | null {
        return this.getRuleContext(0, ZinterstoreCommandContext);
    }
    public zlexcountCommand(): ZlexcountCommandContext | null {
        return this.getRuleContext(0, ZlexcountCommandContext);
    }
    public zscoreCommand(): ZscoreCommandContext | null {
        return this.getRuleContext(0, ZscoreCommandContext);
    }
    public zmscoreCommand(): ZmscoreCommandContext | null {
        return this.getRuleContext(0, ZmscoreCommandContext);
    }
    public zrandmemberCommand(): ZrandmemberCommandContext | null {
        return this.getRuleContext(0, ZrandmemberCommandContext);
    }
    public zrangeCommand(): ZrangeCommandContext | null {
        return this.getRuleContext(0, ZrangeCommandContext);
    }
    public zrangebylexCommand(): ZrangebylexCommandContext | null {
        return this.getRuleContext(0, ZrangebylexCommandContext);
    }
    public zrangebyscoreCommand(): ZrangebyscoreCommandContext | null {
        return this.getRuleContext(0, ZrangebyscoreCommandContext);
    }
    public zrangestoreCommand(): ZrangestoreCommandContext | null {
        return this.getRuleContext(0, ZrangestoreCommandContext);
    }
    public zrankCommand(): ZrankCommandContext | null {
        return this.getRuleContext(0, ZrankCommandContext);
    }
    public zrevrankCommand(): ZrevrankCommandContext | null {
        return this.getRuleContext(0, ZrevrankCommandContext);
    }
    public zremCommand(): ZremCommandContext | null {
        return this.getRuleContext(0, ZremCommandContext);
    }
    public zremrangebylexCommand(): ZremrangebylexCommandContext | null {
        return this.getRuleContext(0, ZremrangebylexCommandContext);
    }
    public zremrangebyrankCommand(): ZremrangebyrankCommandContext | null {
        return this.getRuleContext(0, ZremrangebyrankCommandContext);
    }
    public zremrangebyscoreCommand(): ZremrangebyscoreCommandContext | null {
        return this.getRuleContext(0, ZremrangebyscoreCommandContext);
    }
    public zrevrangeCommand(): ZrevrangeCommandContext | null {
        return this.getRuleContext(0, ZrevrangeCommandContext);
    }
    public zrevrangebylexCommand(): ZrevrangebylexCommandContext | null {
        return this.getRuleContext(0, ZrevrangebylexCommandContext);
    }
    public zrevrangebyscoreCommand(): ZrevrangebyscoreCommandContext | null {
        return this.getRuleContext(0, ZrevrangebyscoreCommandContext);
    }
    public zscanCommand(): ZscanCommandContext | null {
        return this.getRuleContext(0, ZscanCommandContext);
    }
    public zunionCommand(): ZunionCommandContext | null {
        return this.getRuleContext(0, ZunionCommandContext);
    }
    public zunionstoreCommand(): ZunionstoreCommandContext | null {
        return this.getRuleContext(0, ZunionstoreCommandContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sortedSetCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSortedSetCommand) {
            return visitor.visitSortedSetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZmpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZMPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZMPOP, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public minMaxClause(): MinMaxClauseContext {
        return this.getRuleContext(0, MinMaxClauseContext)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext[];
    public sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    public sortedSetKeyName(i?: number): SortedSetKeyNameContext[] | SortedSetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortedSetKeyNameContext);
        }

        return this.getRuleContext(i, SortedSetKeyNameContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zmpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZmpopCommand) {
            return visitor.visitZmpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BzmpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BZMPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.BZMPOP, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode[];
    public POSITIVE_DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public POSITIVE_DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(RedisParser.POSITIVE_DECIMAL_LITERAL);
    	} else {
    		return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, i);
    	}
    }
    public minMaxClause(): MinMaxClauseContext {
        return this.getRuleContext(0, MinMaxClauseContext)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext[];
    public sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    public sortedSetKeyName(i?: number): SortedSetKeyNameContext[] | SortedSetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortedSetKeyNameContext);
        }

        return this.getRuleContext(i, SortedSetKeyNameContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_bzmpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBzmpopCommand) {
            return visitor.visitBzmpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZpopmaxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZPOPMAX(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZPOPMAX, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zpopmaxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZpopmaxCommand) {
            return visitor.visitZpopmaxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BzpopmaxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BZPOPMAX(): antlr.TerminalNode {
        return this.getToken(RedisParser.BZPOPMAX, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext[];
    public sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    public sortedSetKeyName(i?: number): SortedSetKeyNameContext[] | SortedSetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortedSetKeyNameContext);
        }

        return this.getRuleContext(i, SortedSetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_bzpopmaxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBzpopmaxCommand) {
            return visitor.visitBzpopmaxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZpopminCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZPOPMIN(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZPOPMIN, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zpopminCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZpopminCommand) {
            return visitor.visitZpopminCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BzpopminCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BZPOPMIN(): antlr.TerminalNode {
        return this.getToken(RedisParser.BZPOPMIN, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext[];
    public sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    public sortedSetKeyName(i?: number): SortedSetKeyNameContext[] | SortedSetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortedSetKeyNameContext);
        }

        return this.getRuleContext(i, SortedSetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_bzpopminCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBzpopminCommand) {
            return visitor.visitBzpopminCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MinMaxClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.MAX, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_minMaxClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMinMaxClause) {
            return visitor.visitMinMaxClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZaddCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZADD(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZADD, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public keyExistenceClause(): KeyExistenceClauseContext | null {
        return this.getRuleContext(0, KeyExistenceClauseContext);
    }
    public keyUpdateClause(): KeyUpdateClauseContext | null {
        return this.getRuleContext(0, KeyUpdateClauseContext);
    }
    public CH(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.CH, 0);
    }
    public INCR(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.INCR, 0);
    }
    public scoreMemberClause(): ScoreMemberClauseContext[];
    public scoreMemberClause(i: number): ScoreMemberClauseContext | null;
    public scoreMemberClause(i?: number): ScoreMemberClauseContext[] | ScoreMemberClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ScoreMemberClauseContext);
        }

        return this.getRuleContext(i, ScoreMemberClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zaddCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZaddCommand) {
            return visitor.visitZaddCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyUpdateClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.GT, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.LT, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_keyUpdateClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitKeyUpdateClause) {
            return visitor.visitKeyUpdateClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScoreMemberClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_scoreMemberClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitScoreMemberClause) {
            return visitor.visitScoreMemberClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZcardCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZCARD(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZCARD, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zcardCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZcardCommand) {
            return visitor.visitZcardCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZcountCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZCOUNT(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZCOUNT, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public decimalScore(): DecimalScoreContext[];
    public decimalScore(i: number): DecimalScoreContext | null;
    public decimalScore(i?: number): DecimalScoreContext[] | DecimalScoreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalScoreContext);
        }

        return this.getRuleContext(i, DecimalScoreContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zcountCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZcountCommand) {
            return visitor.visitZcountCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZdiffCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZDIFF(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZDIFF, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext[];
    public sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    public sortedSetKeyName(i?: number): SortedSetKeyNameContext[] | SortedSetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortedSetKeyNameContext);
        }

        return this.getRuleContext(i, SortedSetKeyNameContext);
    }
    public WITHSCORES(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.WITHSCORES, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zdiffCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZdiffCommand) {
            return visitor.visitZdiffCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZdiffstoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZDIFFSTORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZDIFFSTORE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext[];
    public sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    public sortedSetKeyName(i?: number): SortedSetKeyNameContext[] | SortedSetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortedSetKeyNameContext);
        }

        return this.getRuleContext(i, SortedSetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zdiffstoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZdiffstoreCommand) {
            return visitor.visitZdiffstoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZincrbyCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZINCRBY(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZINCRBY, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zincrbyCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZincrbyCommand) {
            return visitor.visitZincrbyCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZinterCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZINTER(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZINTER, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext[];
    public sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    public sortedSetKeyName(i?: number): SortedSetKeyNameContext[] | SortedSetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortedSetKeyNameContext);
        }

        return this.getRuleContext(i, SortedSetKeyNameContext);
    }
    public weightsClause(): WeightsClauseContext | null {
        return this.getRuleContext(0, WeightsClauseContext);
    }
    public aggregateClause(): AggregateClauseContext | null {
        return this.getRuleContext(0, AggregateClauseContext);
    }
    public WITHSCORES(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.WITHSCORES, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zinterCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZinterCommand) {
            return visitor.visitZinterCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZintercardCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZINTERCARD(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZINTERCARD, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext[];
    public sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    public sortedSetKeyName(i?: number): SortedSetKeyNameContext[] | SortedSetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortedSetKeyNameContext);
        }

        return this.getRuleContext(i, SortedSetKeyNameContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zintercardCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZintercardCommand) {
            return visitor.visitZintercardCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZinterstoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZINTERSTORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZINTERSTORE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext[];
    public sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    public sortedSetKeyName(i?: number): SortedSetKeyNameContext[] | SortedSetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortedSetKeyNameContext);
        }

        return this.getRuleContext(i, SortedSetKeyNameContext);
    }
    public weightsClause(): WeightsClauseContext | null {
        return this.getRuleContext(0, WeightsClauseContext);
    }
    public aggregateClause(): AggregateClauseContext | null {
        return this.getRuleContext(0, AggregateClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zinterstoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZinterstoreCommand) {
            return visitor.visitZinterstoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WeightsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WEIGHTS(): antlr.TerminalNode {
        return this.getToken(RedisParser.WEIGHTS, 0)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_weightsClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitWeightsClause) {
            return visitor.visitWeightsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregateClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AGGREGATE(): antlr.TerminalNode {
        return this.getToken(RedisParser.AGGREGATE, 0)!;
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.MAX, 0);
    }
    public SUM(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.SUM, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_aggregateClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitAggregateClause) {
            return visitor.visitAggregateClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZlexcountCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZLEXCOUNT(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZLEXCOUNT, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public lexicalScore(): LexicalScoreContext[];
    public lexicalScore(i: number): LexicalScoreContext | null;
    public lexicalScore(i?: number): LexicalScoreContext[] | LexicalScoreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LexicalScoreContext);
        }

        return this.getRuleContext(i, LexicalScoreContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zlexcountCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZlexcountCommand) {
            return visitor.visitZlexcountCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZscoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZSCORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZSCORE, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zscoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZscoreCommand) {
            return visitor.visitZscoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZmscoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZMSCORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZMSCORE, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zmscoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZmscoreCommand) {
            return visitor.visitZmscoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZrandmemberCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZRANDMEMBER(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZRANDMEMBER, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public decimal(): DecimalContext | null {
        return this.getRuleContext(0, DecimalContext);
    }
    public WITHSCORES(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.WITHSCORES, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zrandmemberCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZrandmemberCommand) {
            return visitor.visitZrandmemberCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZrangeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZRANGE(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZRANGE, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public lexicalScore(): LexicalScoreContext[];
    public lexicalScore(i: number): LexicalScoreContext | null;
    public lexicalScore(i?: number): LexicalScoreContext[] | LexicalScoreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LexicalScoreContext);
        }

        return this.getRuleContext(i, LexicalScoreContext);
    }
    public rangeTypeClause(): RangeTypeClauseContext | null {
        return this.getRuleContext(0, RangeTypeClauseContext);
    }
    public REV(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.REV, 0);
    }
    public limitOffsetClause(): LimitOffsetClauseContext | null {
        return this.getRuleContext(0, LimitOffsetClauseContext);
    }
    public WITHSCORES(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.WITHSCORES, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zrangeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZrangeCommand) {
            return visitor.visitZrangeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZrangebylexCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZRANGEBYLEX(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZRANGEBYLEX, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public lexicalScore(): LexicalScoreContext[];
    public lexicalScore(i: number): LexicalScoreContext | null;
    public lexicalScore(i?: number): LexicalScoreContext[] | LexicalScoreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LexicalScoreContext);
        }

        return this.getRuleContext(i, LexicalScoreContext);
    }
    public limitOffsetClause(): LimitOffsetClauseContext | null {
        return this.getRuleContext(0, LimitOffsetClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zrangebylexCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZrangebylexCommand) {
            return visitor.visitZrangebylexCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZrangebyscoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZRANGEBYSCORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZRANGEBYSCORE, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public decimalScore(): DecimalScoreContext[];
    public decimalScore(i: number): DecimalScoreContext | null;
    public decimalScore(i?: number): DecimalScoreContext[] | DecimalScoreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalScoreContext);
        }

        return this.getRuleContext(i, DecimalScoreContext);
    }
    public WITHSCORES(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.WITHSCORES, 0);
    }
    public limitOffsetClause(): LimitOffsetClauseContext | null {
        return this.getRuleContext(0, LimitOffsetClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zrangebyscoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZrangebyscoreCommand) {
            return visitor.visitZrangebyscoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZrangestoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZRANGESTORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZRANGESTORE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public lexicalScore(): LexicalScoreContext[];
    public lexicalScore(i: number): LexicalScoreContext | null;
    public lexicalScore(i?: number): LexicalScoreContext[] | LexicalScoreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LexicalScoreContext);
        }

        return this.getRuleContext(i, LexicalScoreContext);
    }
    public rangeTypeClause(): RangeTypeClauseContext | null {
        return this.getRuleContext(0, RangeTypeClauseContext);
    }
    public REV(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.REV, 0);
    }
    public limitOffsetClause(): LimitOffsetClauseContext | null {
        return this.getRuleContext(0, LimitOffsetClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zrangestoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZrangestoreCommand) {
            return visitor.visitZrangestoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangeTypeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BYSCORE(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.BYSCORE, 0);
    }
    public BYLEX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.BYLEX, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_rangeTypeClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRangeTypeClause) {
            return visitor.visitRangeTypeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitOffsetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(RedisParser.LIMIT, 0)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_limitOffsetClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLimitOffsetClause) {
            return visitor.visitLimitOffsetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZrankCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZRANK(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZRANK, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public WITHSCORE(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.WITHSCORE, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zrankCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZrankCommand) {
            return visitor.visitZrankCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZrevrankCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZREVRANK(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZREVRANK, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public WITHSCORE(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.WITHSCORE, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zrevrankCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZrevrankCommand) {
            return visitor.visitZrevrankCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZremCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZREM(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZREM, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zremCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZremCommand) {
            return visitor.visitZremCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZremrangebylexCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZREMRANGEBYLEX(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZREMRANGEBYLEX, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public lexicalScore(): LexicalScoreContext[];
    public lexicalScore(i: number): LexicalScoreContext | null;
    public lexicalScore(i?: number): LexicalScoreContext[] | LexicalScoreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LexicalScoreContext);
        }

        return this.getRuleContext(i, LexicalScoreContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zremrangebylexCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZremrangebylexCommand) {
            return visitor.visitZremrangebylexCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZremrangebyrankCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZREMRANGEBYRANK(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZREMRANGEBYRANK, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zremrangebyrankCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZremrangebyrankCommand) {
            return visitor.visitZremrangebyrankCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZremrangebyscoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZREMRANGEBYSCORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZREMRANGEBYSCORE, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public decimalScore(): DecimalScoreContext[];
    public decimalScore(i: number): DecimalScoreContext | null;
    public decimalScore(i?: number): DecimalScoreContext[] | DecimalScoreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalScoreContext);
        }

        return this.getRuleContext(i, DecimalScoreContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zremrangebyscoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZremrangebyscoreCommand) {
            return visitor.visitZremrangebyscoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZrevrangeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZREVRANGE(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZREVRANGE, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public WITHSCORES(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.WITHSCORES, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zrevrangeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZrevrangeCommand) {
            return visitor.visitZrevrangeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZrevrangebylexCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZREVRANGEBYLEX(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZREVRANGEBYLEX, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public lexicalScore(): LexicalScoreContext[];
    public lexicalScore(i: number): LexicalScoreContext | null;
    public lexicalScore(i?: number): LexicalScoreContext[] | LexicalScoreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LexicalScoreContext);
        }

        return this.getRuleContext(i, LexicalScoreContext);
    }
    public limitOffsetClause(): LimitOffsetClauseContext | null {
        return this.getRuleContext(0, LimitOffsetClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zrevrangebylexCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZrevrangebylexCommand) {
            return visitor.visitZrevrangebylexCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZrevrangebyscoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZREVRANGEBYSCORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZREVRANGEBYSCORE, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public decimalScore(): DecimalScoreContext[];
    public decimalScore(i: number): DecimalScoreContext | null;
    public decimalScore(i?: number): DecimalScoreContext[] | DecimalScoreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalScoreContext);
        }

        return this.getRuleContext(i, DecimalScoreContext);
    }
    public WITHSCORES(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.WITHSCORES, 0);
    }
    public limitOffsetClause(): LimitOffsetClauseContext | null {
        return this.getRuleContext(0, LimitOffsetClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zrevrangebyscoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZrevrangebyscoreCommand) {
            return visitor.visitZrevrangebyscoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZscanCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZSCAN(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZSCAN, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext {
        return this.getRuleContext(0, SortedSetKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public matchClause(): MatchClauseContext | null {
        return this.getRuleContext(0, MatchClauseContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zscanCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZscanCommand) {
            return visitor.visitZscanCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZunionCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZUNION(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZUNION, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext[];
    public sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    public sortedSetKeyName(i?: number): SortedSetKeyNameContext[] | SortedSetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortedSetKeyNameContext);
        }

        return this.getRuleContext(i, SortedSetKeyNameContext);
    }
    public weightsClause(): WeightsClauseContext | null {
        return this.getRuleContext(0, WeightsClauseContext);
    }
    public aggregateClause(): AggregateClauseContext | null {
        return this.getRuleContext(0, AggregateClauseContext);
    }
    public WITHSCORES(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.WITHSCORES, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zunionCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZunionCommand) {
            return visitor.visitZunionCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZunionstoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZUNIONSTORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.ZUNIONSTORE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public sortedSetKeyName(): SortedSetKeyNameContext[];
    public sortedSetKeyName(i: number): SortedSetKeyNameContext | null;
    public sortedSetKeyName(i?: number): SortedSetKeyNameContext[] | SortedSetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortedSetKeyNameContext);
        }

        return this.getRuleContext(i, SortedSetKeyNameContext);
    }
    public weightsClause(): WeightsClauseContext | null {
        return this.getRuleContext(0, WeightsClauseContext);
    }
    public aggregateClause(): AggregateClauseContext | null {
        return this.getRuleContext(0, AggregateClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_zunionstoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitZunionstoreCommand) {
            return visitor.visitZunionstoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SaddCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SADD(): antlr.TerminalNode {
        return this.getToken(RedisParser.SADD, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_saddCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSaddCommand) {
            return visitor.visitSaddCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScardCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SCARD(): antlr.TerminalNode {
        return this.getToken(RedisParser.SCARD, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_scardCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitScardCommand) {
            return visitor.visitScardCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SdiffCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SDIFF(): antlr.TerminalNode {
        return this.getToken(RedisParser.SDIFF, 0)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sdiffCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSdiffCommand) {
            return visitor.visitSdiffCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SdiffstoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SDIFFSTORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.SDIFFSTORE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sdiffstoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSdiffstoreCommand) {
            return visitor.visitSdiffstoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SinterCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SINTER(): antlr.TerminalNode {
        return this.getToken(RedisParser.SINTER, 0)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sinterCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSinterCommand) {
            return visitor.visitSinterCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SintercardCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SINTERCARD(): antlr.TerminalNode {
        return this.getToken(RedisParser.SINTERCARD, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sintercardCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSintercardCommand) {
            return visitor.visitSintercardCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(RedisParser.LIMIT, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_limitClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SinterstoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SINTERSTORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.SINTERSTORE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sinterstoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSinterstoreCommand) {
            return visitor.visitSinterstoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SismemberCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SISMEMBER(): antlr.TerminalNode {
        return this.getToken(RedisParser.SISMEMBER, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sismemberCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSismemberCommand) {
            return visitor.visitSismemberCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SmismemberCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SMISMEMBER(): antlr.TerminalNode {
        return this.getToken(RedisParser.SMISMEMBER, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_smismemberCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSmismemberCommand) {
            return visitor.visitSmismemberCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SmembersCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SMEMBERS(): antlr.TerminalNode {
        return this.getToken(RedisParser.SMEMBERS, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_smembersCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSmembersCommand) {
            return visitor.visitSmembersCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SmoveCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SMOVE(): antlr.TerminalNode {
        return this.getToken(RedisParser.SMOVE, 0)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_smoveCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSmoveCommand) {
            return visitor.visitSmoveCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.SPOP, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_spopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSpopCommand) {
            return visitor.visitSpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SrandmemberCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SRANDMEMBER(): antlr.TerminalNode {
        return this.getToken(RedisParser.SRANDMEMBER, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public decimal(): DecimalContext | null {
        return this.getRuleContext(0, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_srandmemberCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSrandmemberCommand) {
            return visitor.visitSrandmemberCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SremCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SREM(): antlr.TerminalNode {
        return this.getToken(RedisParser.SREM, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sremCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSremCommand) {
            return visitor.visitSremCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SscanCommanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SSCAN(): antlr.TerminalNode {
        return this.getToken(RedisParser.SSCAN, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public matchClause(): MatchClauseContext | null {
        return this.getRuleContext(0, MatchClauseContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sscanComman;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSscanComman) {
            return visitor.visitSscanComman(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SunionCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUNION(): antlr.TerminalNode {
        return this.getToken(RedisParser.SUNION, 0)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sunionCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSunionCommand) {
            return visitor.visitSunionCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SunionstoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUNIONSTORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.SUNIONSTORE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sunionstoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSunionstoreCommand) {
            return visitor.visitSunionstoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LmoveCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LMOVE(): antlr.TerminalNode {
        return this.getToken(RedisParser.LMOVE, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public leftOrRightClause(): LeftOrRightClauseContext[];
    public leftOrRightClause(i: number): LeftOrRightClauseContext | null;
    public leftOrRightClause(i?: number): LeftOrRightClauseContext[] | LeftOrRightClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LeftOrRightClauseContext);
        }

        return this.getRuleContext(i, LeftOrRightClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lmoveCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLmoveCommand) {
            return visitor.visitLmoveCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LeftOrRightClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.RIGHT, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_leftOrRightClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLeftOrRightClause) {
            return visitor.visitLeftOrRightClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BlmoveCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BLMOVE(): antlr.TerminalNode {
        return this.getToken(RedisParser.BLMOVE, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public leftOrRightClause(): LeftOrRightClauseContext[];
    public leftOrRightClause(i: number): LeftOrRightClauseContext | null;
    public leftOrRightClause(i?: number): LeftOrRightClauseContext[] | LeftOrRightClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LeftOrRightClauseContext);
        }

        return this.getRuleContext(i, LeftOrRightClauseContext);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_blmoveCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBlmoveCommand) {
            return visitor.visitBlmoveCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LmpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LMPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.LMPOP, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public leftOrRightClause(): LeftOrRightClauseContext {
        return this.getRuleContext(0, LeftOrRightClauseContext)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lmpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLmpopCommand) {
            return visitor.visitLmpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BlmpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BLMPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.BLMPOP, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode[];
    public POSITIVE_DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public POSITIVE_DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(RedisParser.POSITIVE_DECIMAL_LITERAL);
    	} else {
    		return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, i);
    	}
    }
    public leftOrRightClause(): LeftOrRightClauseContext {
        return this.getRuleContext(0, LeftOrRightClauseContext)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_blmpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBlmpopCommand) {
            return visitor.visitBlmpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.LPOP, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLpopCommand) {
            return visitor.visitLpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BlpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BLPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.BLPOP, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_blpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBlpopCommand) {
            return visitor.visitBlpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.RPOP, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_rpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRpopCommand) {
            return visitor.visitRpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BrpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BRPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.BRPOP, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_brpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBrpopCommand) {
            return visitor.visitBrpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpopLpushCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RPOPLPUSH(): antlr.TerminalNode {
        return this.getToken(RedisParser.RPOPLPUSH, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_rpopLpushCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRpopLpushCommand) {
            return visitor.visitRpopLpushCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BrpopLpushCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BRPOPLPUSH(): antlr.TerminalNode {
        return this.getToken(RedisParser.BRPOPLPUSH, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_brpopLpushCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBrpopLpushCommand) {
            return visitor.visitBrpopLpushCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LindexCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LINDEX(): antlr.TerminalNode {
        return this.getToken(RedisParser.LINDEX, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lindexCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLindexCommand) {
            return visitor.visitLindexCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LinsertCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LINSERT(): antlr.TerminalNode {
        return this.getToken(RedisParser.LINSERT, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public beforeOrAfterClause(): BeforeOrAfterClauseContext {
        return this.getRuleContext(0, BeforeOrAfterClauseContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_linsertCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLinsertCommand) {
            return visitor.visitLinsertCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BeforeOrAfterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.BEFORE, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.AFTER, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_beforeOrAfterClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBeforeOrAfterClause) {
            return visitor.visitBeforeOrAfterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LlenCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LLEN(): antlr.TerminalNode {
        return this.getToken(RedisParser.LLEN, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_llenCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLlenCommand) {
            return visitor.visitLlenCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LposCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPOS(): antlr.TerminalNode {
        return this.getToken(RedisParser.LPOS, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public rankClause(): RankClauseContext | null {
        return this.getRuleContext(0, RankClauseContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public maxLenClause(): MaxLenClauseContext | null {
        return this.getRuleContext(0, MaxLenClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lposCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLposCommand) {
            return visitor.visitLposCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RankClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANK(): antlr.TerminalNode {
        return this.getToken(RedisParser.RANK, 0)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_rankClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRankClause) {
            return visitor.visitRankClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaxLenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAXLEN(): antlr.TerminalNode {
        return this.getToken(RedisParser.MAXLEN, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_maxLenClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMaxLenClause) {
            return visitor.visitMaxLenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LpushCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPUSH(): antlr.TerminalNode {
        return this.getToken(RedisParser.LPUSH, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lpushCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLpushCommand) {
            return visitor.visitLpushCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LpushxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPUSHX(): antlr.TerminalNode {
        return this.getToken(RedisParser.LPUSHX, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lpushxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLpushxCommand) {
            return visitor.visitLpushxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpushCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RPUSH(): antlr.TerminalNode {
        return this.getToken(RedisParser.RPUSH, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_rpushCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRpushCommand) {
            return visitor.visitRpushCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpushxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RPUSHX(): antlr.TerminalNode {
        return this.getToken(RedisParser.RPUSHX, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_rpushxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRpushxCommand) {
            return visitor.visitRpushxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LrangeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LRANGE(): antlr.TerminalNode {
        return this.getToken(RedisParser.LRANGE, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lrangeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLrangeCommand) {
            return visitor.visitLrangeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LremCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LREM(): antlr.TerminalNode {
        return this.getToken(RedisParser.LREM, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lremCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLremCommand) {
            return visitor.visitLremCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LsetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LSET(): antlr.TerminalNode {
        return this.getToken(RedisParser.LSET, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lsetCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLsetCommand) {
            return visitor.visitLsetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LtrimCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LTRIM(): antlr.TerminalNode {
        return this.getToken(RedisParser.LTRIM, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_ltrimCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLtrimCommand) {
            return visitor.visitLtrimCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopyCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COPY(): antlr.TerminalNode {
        return this.getToken(RedisParser.COPY, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public dbClause(): DbClauseContext | null {
        return this.getRuleContext(0, DbClauseContext);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.REPLACE, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_copyCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitCopyCommand) {
            return visitor.visitCopyCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DB(): antlr.TerminalNode {
        return this.getToken(RedisParser.DB, 0)!;
    }
    public databaseName(): DatabaseNameContext {
        return this.getRuleContext(0, DatabaseNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_dbClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDbClause) {
            return visitor.visitDbClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_databaseName;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseName) {
            return visitor.visitDatabaseName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEL(): antlr.TerminalNode {
        return this.getToken(RedisParser.DEL, 0)!;
    }
    public keyName(): KeyNameContext[];
    public keyName(i: number): KeyNameContext | null;
    public keyName(i?: number): KeyNameContext[] | KeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyNameContext);
        }

        return this.getRuleContext(i, KeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_deleteCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteCommand) {
            return visitor.visitDeleteCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlinkCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNLINK(): antlr.TerminalNode {
        return this.getToken(RedisParser.UNLINK, 0)!;
    }
    public keyName(): KeyNameContext[];
    public keyName(i: number): KeyNameContext | null;
    public keyName(i?: number): KeyNameContext[] | KeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyNameContext);
        }

        return this.getRuleContext(i, KeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_unlinkCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitUnlinkCommand) {
            return visitor.visitUnlinkCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DumpCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DUMP(): antlr.TerminalNode {
        return this.getToken(RedisParser.DUMP, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_dumpCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDumpCommand) {
            return visitor.visitDumpCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExistsCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(RedisParser.EXISTS, 0)!;
    }
    public keyName(): KeyNameContext[];
    public keyName(i: number): KeyNameContext | null;
    public keyName(i?: number): KeyNameContext[] | KeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyNameContext);
        }

        return this.getRuleContext(i, KeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_existsCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExistsCommand) {
            return visitor.visitExistsCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpireCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPIRE(): antlr.TerminalNode {
        return this.getToken(RedisParser.EXPIRE, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public expireOptions(): ExpireOptionsContext | null {
        return this.getRuleContext(0, ExpireOptionsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_expireCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExpireCommand) {
            return visitor.visitExpireCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpireAtCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPIREAT(): antlr.TerminalNode {
        return this.getToken(RedisParser.EXPIREAT, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public expireOptions(): ExpireOptionsContext | null {
        return this.getRuleContext(0, ExpireOptionsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_expireAtCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExpireAtCommand) {
            return visitor.visitExpireAtCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PExpireCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PEXPIRE(): antlr.TerminalNode {
        return this.getToken(RedisParser.PEXPIRE, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public expireOptions(): ExpireOptionsContext | null {
        return this.getRuleContext(0, ExpireOptionsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_pExpireCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPExpireCommand) {
            return visitor.visitPExpireCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PExpireAtCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PEXPIREAT(): antlr.TerminalNode {
        return this.getToken(RedisParser.PEXPIREAT, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public expireOptions(): ExpireOptionsContext | null {
        return this.getRuleContext(0, ExpireOptionsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_pExpireAtCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPExpireAtCommand) {
            return visitor.visitPExpireAtCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpireOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.NX, 0);
    }
    public XX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.XX, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.GT, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.LT, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_expireOptions;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExpireOptions) {
            return visitor.visitExpireOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpireTimeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPIRETIME(): antlr.TerminalNode {
        return this.getToken(RedisParser.EXPIRETIME, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_expireTimeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExpireTimeCommand) {
            return visitor.visitExpireTimeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PExpireTimeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PEXPIRETIME(): antlr.TerminalNode {
        return this.getToken(RedisParser.PEXPIRETIME, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_pExpireTimeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPExpireTimeCommand) {
            return visitor.visitPExpireTimeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeysCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEYS(): antlr.TerminalNode {
        return this.getToken(RedisParser.KEYS, 0)!;
    }
    public keyPattern(): KeyPatternContext {
        return this.getRuleContext(0, KeyPatternContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_keysCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitKeysCommand) {
            return visitor.visitKeysCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MoveCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MOVE(): antlr.TerminalNode {
        return this.getToken(RedisParser.MOVE, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public databaseName(): DatabaseNameContext {
        return this.getRuleContext(0, DatabaseNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_moveCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMoveCommand) {
            return visitor.visitMoveCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(RedisParser.OBJECT, 0)!;
    }
    public objectOptions(): ObjectOptionsContext {
        return this.getRuleContext(0, ObjectOptionsContext)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_objectCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitObjectCommand) {
            return visitor.visitObjectCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENCODING(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.ENCODING, 0);
    }
    public FREQ(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.FREQ, 0);
    }
    public IDLETIME(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.IDLETIME, 0);
    }
    public REFCOUNT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.REFCOUNT, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_objectOptions;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitObjectOptions) {
            return visitor.visitObjectOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PersistCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PERSIST(): antlr.TerminalNode {
        return this.getToken(RedisParser.PERSIST, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_persistCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPersistCommand) {
            return visitor.visitPersistCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TtlCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TTL(): antlr.TerminalNode {
        return this.getToken(RedisParser.TTL, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_ttlCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitTtlCommand) {
            return visitor.visitTtlCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PTtlCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PTTL(): antlr.TerminalNode {
        return this.getToken(RedisParser.PTTL, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_pTtlCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPTtlCommand) {
            return visitor.visitPTtlCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RandomKeyCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANDOMKEY(): antlr.TerminalNode {
        return this.getToken(RedisParser.RANDOMKEY, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_randomKeyCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRandomKeyCommand) {
            return visitor.visitRandomKeyCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(RedisParser.RENAME, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_renameCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRenameCommand) {
            return visitor.visitRenameCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameNxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAMENX(): antlr.TerminalNode {
        return this.getToken(RedisParser.RENAMENX, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_renameNxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRenameNxCommand) {
            return visitor.visitRenameNxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScanCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SCAN(): antlr.TerminalNode {
        return this.getToken(RedisParser.SCAN, 0)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public matchClause(): MatchClauseContext | null {
        return this.getRuleContext(0, MatchClauseContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public typeClause(): TypeClauseContext | null {
        return this.getRuleContext(0, TypeClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_scanCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitScanCommand) {
            return visitor.visitScanCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATCH(): antlr.TerminalNode {
        return this.getToken(RedisParser.MATCH, 0)!;
    }
    public keyPattern(): KeyPatternContext {
        return this.getRuleContext(0, KeyPatternContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_matchClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMatchClause) {
            return visitor.visitMatchClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CountClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COUNT(): antlr.TerminalNode {
        return this.getToken(RedisParser.COUNT, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_countClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitCountClause) {
            return visitor.visitCountClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(RedisParser.TYPE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_typeClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitTypeClause) {
            return visitor.visitTypeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TouchCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TOUCH(): antlr.TerminalNode {
        return this.getToken(RedisParser.TOUCH, 0)!;
    }
    public keyName(): KeyNameContext[];
    public keyName(i: number): KeyNameContext | null;
    public keyName(i?: number): KeyNameContext[] | KeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyNameContext);
        }

        return this.getRuleContext(i, KeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_touchCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitTouchCommand) {
            return visitor.visitTouchCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(RedisParser.TYPE, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_typeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitTypeCommand) {
            return visitor.visitTypeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WaitCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WAIT(): antlr.TerminalNode {
        return this.getToken(RedisParser.WAIT, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode[];
    public POSITIVE_DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public POSITIVE_DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(RedisParser.POSITIVE_DECIMAL_LITERAL);
    	} else {
    		return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, i);
    	}
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_waitCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitWaitCommand) {
            return visitor.visitWaitCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringSetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(RedisParser.SET, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public keyExistenceClause(): KeyExistenceClauseContext | null {
        return this.getRuleContext(0, KeyExistenceClauseContext);
    }
    public GET(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.GET, 0);
    }
    public expirationClause(): ExpirationClauseContext | null {
        return this.getRuleContext(0, ExpirationClauseContext);
    }
    public KEEPTTL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.KEEPTTL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_stringSetCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitStringSetCommand) {
            return visitor.visitStringSetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyExistenceClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.NX, 0);
    }
    public XX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.XX, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_keyExistenceClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitKeyExistenceClause) {
            return visitor.visitKeyExistenceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpirationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.EX, 0);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public PX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.PX, 0);
    }
    public EXAT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.EXAT, 0);
    }
    public PXAT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.PXAT, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_expirationClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExpirationClause) {
            return visitor.visitExpirationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GET(): antlr.TerminalNode {
        return this.getToken(RedisParser.GET, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_getCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitGetCommand) {
            return visitor.visitGetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IncrementCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INCR(): antlr.TerminalNode {
        return this.getToken(RedisParser.INCR, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_incrementCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitIncrementCommand) {
            return visitor.visitIncrementCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IncrementByCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INCRBY(): antlr.TerminalNode {
        return this.getToken(RedisParser.INCRBY, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_incrementByCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitIncrementByCommand) {
            return visitor.visitIncrementByCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecrementCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECR(): antlr.TerminalNode {
        return this.getToken(RedisParser.DECR, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_decrementCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDecrementCommand) {
            return visitor.visitDecrementCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecrementByCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECRBY(): antlr.TerminalNode {
        return this.getToken(RedisParser.DECRBY, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_decrementByCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDecrementByCommand) {
            return visitor.visitDecrementByCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AppendCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public APPEND(): antlr.TerminalNode {
        return this.getToken(RedisParser.APPEND, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_appendCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitAppendCommand) {
            return visitor.visitAppendCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetDeleteCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GETDEL(): antlr.TerminalNode {
        return this.getToken(RedisParser.GETDEL, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_getDeleteCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitGetDeleteCommand) {
            return visitor.visitGetDeleteCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetExCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GETEX(): antlr.TerminalNode {
        return this.getToken(RedisParser.GETEX, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public expirationClause(): ExpirationClauseContext | null {
        return this.getRuleContext(0, ExpirationClauseContext);
    }
    public PERSIST(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.PERSIST, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_getExCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitGetExCommand) {
            return visitor.visitGetExCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetRangeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GETRANGE(): antlr.TerminalNode {
        return this.getToken(RedisParser.GETRANGE, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_getRangeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitGetRangeCommand) {
            return visitor.visitGetRangeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetSetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GETSET(): antlr.TerminalNode {
        return this.getToken(RedisParser.GETSET, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_getSetCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitGetSetCommand) {
            return visitor.visitGetSetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MGetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MGET(): antlr.TerminalNode {
        return this.getToken(RedisParser.MGET, 0)!;
    }
    public stringKeyName(): StringKeyNameContext[];
    public stringKeyName(i: number): StringKeyNameContext | null;
    public stringKeyName(i?: number): StringKeyNameContext[] | StringKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringKeyNameContext);
        }

        return this.getRuleContext(i, StringKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_mGetCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMGetCommand) {
            return visitor.visitMGetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MSetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MSET(): antlr.TerminalNode {
        return this.getToken(RedisParser.MSET, 0)!;
    }
    public stringKeyName(): StringKeyNameContext[];
    public stringKeyName(i: number): StringKeyNameContext | null;
    public stringKeyName(i?: number): StringKeyNameContext[] | StringKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringKeyNameContext);
        }

        return this.getRuleContext(i, StringKeyNameContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_mSetCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMSetCommand) {
            return visitor.visitMSetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MSetNxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MSETNX(): antlr.TerminalNode {
        return this.getToken(RedisParser.MSETNX, 0)!;
    }
    public stringKeyName(): StringKeyNameContext[];
    public stringKeyName(i: number): StringKeyNameContext | null;
    public stringKeyName(i?: number): StringKeyNameContext[] | StringKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringKeyNameContext);
        }

        return this.getRuleContext(i, StringKeyNameContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_mSetNxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMSetNxCommand) {
            return visitor.visitMSetNxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PSetExCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PSETEX(): antlr.TerminalNode {
        return this.getToken(RedisParser.PSETEX, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_pSetExCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPSetExCommand) {
            return visitor.visitPSetExCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetExCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETEX(): antlr.TerminalNode {
        return this.getToken(RedisParser.SETEX, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_setExCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSetExCommand) {
            return visitor.visitSetExCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetNxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETNX(): antlr.TerminalNode {
        return this.getToken(RedisParser.SETNX, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_setNxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSetNxCommand) {
            return visitor.visitSetNxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetRangeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETRANGE(): antlr.TerminalNode {
        return this.getToken(RedisParser.SETRANGE, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_setRangeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSetRangeCommand) {
            return visitor.visitSetRangeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringLengthCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRLEN(): antlr.TerminalNode {
        return this.getToken(RedisParser.STRLEN, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_stringLengthCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitStringLengthCommand) {
            return visitor.visitStringLengthCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubstringCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBSTR(): antlr.TerminalNode {
        return this.getToken(RedisParser.SUBSTR, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_substringCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSubstringCommand) {
            return visitor.visitSubstringCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecimalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_decimal;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDecimal) {
            return visitor.visitDecimal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecimalScoreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.DECIMAL_LITERAL, 0);
    }
    public DECIMAL_SCORE_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.DECIMAL_SCORE_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_decimalScore;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDecimalScore) {
            return visitor.visitDecimalScore(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.IDENTIFIER, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.DECIMAL_LITERAL, 0);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public DECIMAL_SCORE_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.DECIMAL_SCORE_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_identifier;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LexicalScoreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lexicalScore;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLexicalScore) {
            return visitor.visitLexicalScore(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringKeyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_stringKeyName;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitStringKeyName) {
            return visitor.visitStringKeyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListKeyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_listKeyName;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitListKeyName) {
            return visitor.visitListKeyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetKeyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_setKeyName;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSetKeyName) {
            return visitor.visitSetKeyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortedSetKeyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sortedSetKeyName;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSortedSetKeyName) {
            return visitor.visitSortedSetKeyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_keyName;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitKeyName) {
            return visitor.visitKeyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_keyPattern;
    }
    public override copyFrom(ctx: KeyPatternContext): void {
        super.copyFrom(ctx);
    }
}
export class NotProperPatternContext extends KeyPatternContext {
    public constructor(ctx: KeyPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitNotProperPattern) {
            return visitor.visitNotProperPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
