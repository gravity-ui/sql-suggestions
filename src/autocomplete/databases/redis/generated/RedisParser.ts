////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/redis/grammar/RedisParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { RedisParserVisitor } from "./RedisParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class RedisParser extends antlr.Parser {
    public static readonly SPACE = 1;
    public static readonly NEWLINE = 2;
    public static readonly COPY = 3;
    public static readonly DB = 4;
    public static readonly REPLACE = 5;
    public static readonly DEL = 6;
    public static readonly UNLINK = 7;
    public static readonly DUMP = 8;
    public static readonly EXISTS = 9;
    public static readonly EXPIRE = 10;
    public static readonly GT = 11;
    public static readonly LT = 12;
    public static readonly NX = 13;
    public static readonly XX = 14;
    public static readonly EXPIREAT = 15;
    public static readonly EXPIRETIME = 16;
    public static readonly PEXPIRE = 17;
    public static readonly PEXPIREAT = 18;
    public static readonly PEXPIRETIME = 19;
    public static readonly KEYS = 20;
    public static readonly MOVE = 21;
    public static readonly OBJECT = 22;
    public static readonly ENCODING = 23;
    public static readonly FREQ = 24;
    public static readonly IDLETIME = 25;
    public static readonly REFCOUNT = 26;
    public static readonly PERSIST = 27;
    public static readonly TTL = 28;
    public static readonly PTTL = 29;
    public static readonly RANDOMKEY = 30;
    public static readonly RENAME = 31;
    public static readonly RENAMENX = 32;
    public static readonly SCAN = 33;
    public static readonly MATCH = 34;
    public static readonly COUNT = 35;
    public static readonly TYPE = 36;
    public static readonly TOUCH = 37;
    public static readonly WAIT = 38;
    public static readonly LEFT = 39;
    public static readonly RIGHT = 40;
    public static readonly BEFORE = 41;
    public static readonly AFTER = 42;
    public static readonly RANK = 43;
    public static readonly MAXLEN = 44;
    public static readonly LIMIT = 45;
    public static readonly SET = 46;
    public static readonly GET = 47;
    public static readonly INCR = 48;
    public static readonly INCRBY = 49;
    public static readonly DECR = 50;
    public static readonly DECRBY = 51;
    public static readonly EX = 52;
    public static readonly PX = 53;
    public static readonly EXAT = 54;
    public static readonly PXAT = 55;
    public static readonly KEEPTTL = 56;
    public static readonly APPEND = 57;
    public static readonly GETDEL = 58;
    public static readonly GETEX = 59;
    public static readonly GETRANGE = 60;
    public static readonly GETSET = 61;
    public static readonly MGET = 62;
    public static readonly MSET = 63;
    public static readonly MSETNX = 64;
    public static readonly PSETEX = 65;
    public static readonly SETEX = 66;
    public static readonly SETNX = 67;
    public static readonly SETRANGE = 68;
    public static readonly STRLEN = 69;
    public static readonly SUBSTR = 70;
    public static readonly LMOVE = 71;
    public static readonly BLMOVE = 72;
    public static readonly LMPOP = 73;
    public static readonly BLMPOP = 74;
    public static readonly LPOP = 75;
    public static readonly BLPOP = 76;
    public static readonly RPOP = 77;
    public static readonly BRPOP = 78;
    public static readonly RPOPLPUSH = 79;
    public static readonly BRPOPLPUSH = 80;
    public static readonly LINDEX = 81;
    public static readonly LINSERT = 82;
    public static readonly LLEN = 83;
    public static readonly LPOS = 84;
    public static readonly LPUSH = 85;
    public static readonly LPUSHX = 86;
    public static readonly RPUSH = 87;
    public static readonly RPUSHX = 88;
    public static readonly LRANGE = 89;
    public static readonly LREM = 90;
    public static readonly LSET = 91;
    public static readonly LTRIM = 92;
    public static readonly SADD = 93;
    public static readonly SCARD = 94;
    public static readonly SDIFF = 95;
    public static readonly SDIFFSTORE = 96;
    public static readonly SINTER = 97;
    public static readonly SINTERCARD = 98;
    public static readonly SINTERSTORE = 99;
    public static readonly SISMEMBER = 100;
    public static readonly SMISMEMBER = 101;
    public static readonly SMEMBERS = 102;
    public static readonly SMOVE = 103;
    public static readonly SPOP = 104;
    public static readonly SRANDMEMBER = 105;
    public static readonly SREM = 106;
    public static readonly SSCAN = 107;
    public static readonly SUNION = 108;
    public static readonly SUNIONSTORE = 109;
    public static readonly SINGLE_QUOTE = 110;
    public static readonly DOUBLE_QUOTE = 111;
    public static readonly POSITIVE_DECIMAL_LITERAL = 112;
    public static readonly DECIMAL_LITERAL = 113;
    public static readonly IDENTIFIER = 114;
    public static readonly RULE_root = 0;
    public static readonly RULE_commands = 1;
    public static readonly RULE_command = 2;
    public static readonly RULE_commonCommand = 3;
    public static readonly RULE_stringCommand = 4;
    public static readonly RULE_listCommand = 5;
    public static readonly RULE_setCommand = 6;
    public static readonly RULE_saddCommand = 7;
    public static readonly RULE_scardCommand = 8;
    public static readonly RULE_sdiffCommand = 9;
    public static readonly RULE_sdiffstoreCommand = 10;
    public static readonly RULE_sinterCommand = 11;
    public static readonly RULE_sintercardCommand = 12;
    public static readonly RULE_limitClause = 13;
    public static readonly RULE_sinterstoreCommand = 14;
    public static readonly RULE_sismemberCommand = 15;
    public static readonly RULE_smismemberCommand = 16;
    public static readonly RULE_smembersCommand = 17;
    public static readonly RULE_smoveCommand = 18;
    public static readonly RULE_spopCommand = 19;
    public static readonly RULE_srandmemberCommand = 20;
    public static readonly RULE_sremCommand = 21;
    public static readonly RULE_sscanComman = 22;
    public static readonly RULE_sunionCommand = 23;
    public static readonly RULE_sunionstoreCommand = 24;
    public static readonly RULE_lmoveCommand = 25;
    public static readonly RULE_leftOrRightClause = 26;
    public static readonly RULE_blmoveCommand = 27;
    public static readonly RULE_lmpopCommand = 28;
    public static readonly RULE_blmpopCommand = 29;
    public static readonly RULE_lpopCommand = 30;
    public static readonly RULE_blpopCommand = 31;
    public static readonly RULE_rpopCommand = 32;
    public static readonly RULE_brpopCommand = 33;
    public static readonly RULE_rpopLpushCommand = 34;
    public static readonly RULE_brpopLpushCommand = 35;
    public static readonly RULE_lindexCommand = 36;
    public static readonly RULE_linsertCommand = 37;
    public static readonly RULE_beforeOrAfterClause = 38;
    public static readonly RULE_llenCommand = 39;
    public static readonly RULE_lposCommand = 40;
    public static readonly RULE_rankClause = 41;
    public static readonly RULE_maxLenClause = 42;
    public static readonly RULE_lpushCommand = 43;
    public static readonly RULE_lpushxCommand = 44;
    public static readonly RULE_rpushCommand = 45;
    public static readonly RULE_rpushxCommand = 46;
    public static readonly RULE_lrangeCommand = 47;
    public static readonly RULE_lremCommand = 48;
    public static readonly RULE_lsetCommand = 49;
    public static readonly RULE_ltrimCommand = 50;
    public static readonly RULE_copyCommand = 51;
    public static readonly RULE_dbClause = 52;
    public static readonly RULE_databaseName = 53;
    public static readonly RULE_deleteCommand = 54;
    public static readonly RULE_unlinkCommand = 55;
    public static readonly RULE_dumpCommand = 56;
    public static readonly RULE_existsCommand = 57;
    public static readonly RULE_expireCommand = 58;
    public static readonly RULE_expireAtCommand = 59;
    public static readonly RULE_pExpireCommand = 60;
    public static readonly RULE_pExpireAtCommand = 61;
    public static readonly RULE_expireOptions = 62;
    public static readonly RULE_expireTimeCommand = 63;
    public static readonly RULE_pExpireTimeCommand = 64;
    public static readonly RULE_keysCommand = 65;
    public static readonly RULE_moveCommand = 66;
    public static readonly RULE_objectCommand = 67;
    public static readonly RULE_objectOptions = 68;
    public static readonly RULE_persistCommand = 69;
    public static readonly RULE_ttlCommand = 70;
    public static readonly RULE_pTtlCommand = 71;
    public static readonly RULE_randomKeyCommand = 72;
    public static readonly RULE_renameCommand = 73;
    public static readonly RULE_renameNxCommand = 74;
    public static readonly RULE_scanCommand = 75;
    public static readonly RULE_matchClause = 76;
    public static readonly RULE_countClause = 77;
    public static readonly RULE_typeClause = 78;
    public static readonly RULE_touchCommand = 79;
    public static readonly RULE_typeCommand = 80;
    public static readonly RULE_waitCommand = 81;
    public static readonly RULE_stringSetCommand = 82;
    public static readonly RULE_keyExistenceClause = 83;
    public static readonly RULE_expirationClause = 84;
    public static readonly RULE_getCommand = 85;
    public static readonly RULE_incrementCommand = 86;
    public static readonly RULE_incrementByCommand = 87;
    public static readonly RULE_decrementCommand = 88;
    public static readonly RULE_decrementByCommand = 89;
    public static readonly RULE_appendCommand = 90;
    public static readonly RULE_getDeleteCommand = 91;
    public static readonly RULE_getExCommand = 92;
    public static readonly RULE_getRangeCommand = 93;
    public static readonly RULE_getSetCommand = 94;
    public static readonly RULE_mGetCommand = 95;
    public static readonly RULE_mSetCommand = 96;
    public static readonly RULE_mSetNxCommand = 97;
    public static readonly RULE_pSetExCommand = 98;
    public static readonly RULE_setExCommand = 99;
    public static readonly RULE_setNxCommand = 100;
    public static readonly RULE_setRangeCommand = 101;
    public static readonly RULE_stringLengthCommand = 102;
    public static readonly RULE_substringCommand = 103;
    public static readonly RULE_decimal = 104;
    public static readonly RULE_identifier = 105;
    public static readonly RULE_stringKeyName = 106;
    public static readonly RULE_listKeyName = 107;
    public static readonly RULE_setKeyName = 108;
    public static readonly RULE_keyName = 109;
    public static readonly RULE_keyPattern = 110;

    public static readonly literalNames = [
        null, null, null, "'COPY'", "'DB'", "'REPLACE'", "'DEL'", "'UNLINK'", 
        "'DUMP'", "'EXISTS'", "'EXPIRE'", "'GT'", "'LT'", "'NX'", "'XX'", 
        "'EXPIREAT'", "'EXPIRETIME'", "'PEXPIRE'", "'PEXPIREAT'", "'PEXPIRETIME'", 
        "'KEYS'", "'MOVE'", "'OBJECT'", "'ENCODING'", "'FREQ'", "'IDLETIME'", 
        "'REFCOUNT'", "'PERSIST'", "'TTL'", "'PTTL'", "'RANDOMKEY'", "'RENAME'", 
        "'RENAMENX'", "'SCAN'", "'MATCH'", "'COUNT'", "'TYPE'", "'TOUCH'", 
        "'WAIT'", "'LEFT'", "'RIGHT'", "'BEFORE'", "'AFTER'", "'RANK'", 
        "'MAXLEN'", "'LIMIT'", "'SET'", "'GET'", "'INCR'", "'INCRBY'", "'DECR'", 
        "'DECRBY'", "'EX'", "'PX'", "'EXAT'", "'PXAT'", "'KEEPTTL'", "'APPEND'", 
        "'GETDEL'", "'GETEX'", "'GETRANGE'", "'GETSET'", "'MGET'", "'MSET'", 
        "'MSETNX'", "'PSETEX'", "'SETEX'", "'SETNX'", "'SETRANGE'", "'STRLEN'", 
        "'SUBSTR'", "'LMOVE'", "'BLMOVE'", "'LMPOP'", "'BLMPOP'", "'LPOP'", 
        "'BLPOP'", "'RPOP'", "'BRPOP'", "'RPOPLPUSH'", "'BRPOPLPUSH'", "'LINDEX'", 
        "'LINSERT'", "'LLEN'", "'LPOS'", "'LPUSH'", "'LPUSHX'", "'RPUSH'", 
        "'RPUSHX'", "'LRANGE'", "'LREM'", "'LSET'", "'LTRIM'", "'SADD'", 
        "'SCARD'", "'SDIFF'", "'SDIFFSTORE'", "'SINTER'", "'SINTERCARD'", 
        "'SINTERSTORE'", "'SISMEMBER'", "'SMISMEMBER'", "'SMEMBERS'", "'SMOVE'", 
        "'SPOP'", "'SRANDMEMBER'", "'SREM'", "'SSCAN'", "'SUNION'", "'SUNIONSTORE'", 
        "'''", "'\"'"
    ];

    public static readonly symbolicNames = [
        null, "SPACE", "NEWLINE", "COPY", "DB", "REPLACE", "DEL", "UNLINK", 
        "DUMP", "EXISTS", "EXPIRE", "GT", "LT", "NX", "XX", "EXPIREAT", 
        "EXPIRETIME", "PEXPIRE", "PEXPIREAT", "PEXPIRETIME", "KEYS", "MOVE", 
        "OBJECT", "ENCODING", "FREQ", "IDLETIME", "REFCOUNT", "PERSIST", 
        "TTL", "PTTL", "RANDOMKEY", "RENAME", "RENAMENX", "SCAN", "MATCH", 
        "COUNT", "TYPE", "TOUCH", "WAIT", "LEFT", "RIGHT", "BEFORE", "AFTER", 
        "RANK", "MAXLEN", "LIMIT", "SET", "GET", "INCR", "INCRBY", "DECR", 
        "DECRBY", "EX", "PX", "EXAT", "PXAT", "KEEPTTL", "APPEND", "GETDEL", 
        "GETEX", "GETRANGE", "GETSET", "MGET", "MSET", "MSETNX", "PSETEX", 
        "SETEX", "SETNX", "SETRANGE", "STRLEN", "SUBSTR", "LMOVE", "BLMOVE", 
        "LMPOP", "BLMPOP", "LPOP", "BLPOP", "RPOP", "BRPOP", "RPOPLPUSH", 
        "BRPOPLPUSH", "LINDEX", "LINSERT", "LLEN", "LPOS", "LPUSH", "LPUSHX", 
        "RPUSH", "RPUSHX", "LRANGE", "LREM", "LSET", "LTRIM", "SADD", "SCARD", 
        "SDIFF", "SDIFFSTORE", "SINTER", "SINTERCARD", "SINTERSTORE", "SISMEMBER", 
        "SMISMEMBER", "SMEMBERS", "SMOVE", "SPOP", "SRANDMEMBER", "SREM", 
        "SSCAN", "SUNION", "SUNIONSTORE", "SINGLE_QUOTE", "DOUBLE_QUOTE", 
        "POSITIVE_DECIMAL_LITERAL", "DECIMAL_LITERAL", "IDENTIFIER"
    ];
    public static readonly ruleNames = [
        "root", "commands", "command", "commonCommand", "stringCommand", 
        "listCommand", "setCommand", "saddCommand", "scardCommand", "sdiffCommand", 
        "sdiffstoreCommand", "sinterCommand", "sintercardCommand", "limitClause", 
        "sinterstoreCommand", "sismemberCommand", "smismemberCommand", "smembersCommand", 
        "smoveCommand", "spopCommand", "srandmemberCommand", "sremCommand", 
        "sscanComman", "sunionCommand", "sunionstoreCommand", "lmoveCommand", 
        "leftOrRightClause", "blmoveCommand", "lmpopCommand", "blmpopCommand", 
        "lpopCommand", "blpopCommand", "rpopCommand", "brpopCommand", "rpopLpushCommand", 
        "brpopLpushCommand", "lindexCommand", "linsertCommand", "beforeOrAfterClause", 
        "llenCommand", "lposCommand", "rankClause", "maxLenClause", "lpushCommand", 
        "lpushxCommand", "rpushCommand", "rpushxCommand", "lrangeCommand", 
        "lremCommand", "lsetCommand", "ltrimCommand", "copyCommand", "dbClause", 
        "databaseName", "deleteCommand", "unlinkCommand", "dumpCommand", 
        "existsCommand", "expireCommand", "expireAtCommand", "pExpireCommand", 
        "pExpireAtCommand", "expireOptions", "expireTimeCommand", "pExpireTimeCommand", 
        "keysCommand", "moveCommand", "objectCommand", "objectOptions", 
        "persistCommand", "ttlCommand", "pTtlCommand", "randomKeyCommand", 
        "renameCommand", "renameNxCommand", "scanCommand", "matchClause", 
        "countClause", "typeClause", "touchCommand", "typeCommand", "waitCommand", 
        "stringSetCommand", "keyExistenceClause", "expirationClause", "getCommand", 
        "incrementCommand", "incrementByCommand", "decrementCommand", "decrementByCommand", 
        "appendCommand", "getDeleteCommand", "getExCommand", "getRangeCommand", 
        "getSetCommand", "mGetCommand", "mSetCommand", "mSetNxCommand", 
        "pSetExCommand", "setExCommand", "setNxCommand", "setRangeCommand", 
        "stringLengthCommand", "substringCommand", "decimal", "identifier", 
        "stringKeyName", "listKeyName", "setKeyName", "keyName", "keyPattern",
    ];

    public get grammarFileName(): string { return "RedisParser.g4"; }
    public get literalNames(): (string | null)[] { return RedisParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return RedisParser.symbolicNames; }
    public get ruleNames(): string[] { return RedisParser.ruleNames; }
    public get serializedATN(): number[] { return RedisParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, RedisParser._ATN, RedisParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, RedisParser.RULE_root);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 223;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4169107400) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4262445171) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 16383) !== 0)) {
                {
                this.state = 222;
                this.commands();
                }
            }

            this.state = 225;
            this.match(RedisParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commands(): CommandsContext {
        let localContext = new CommandsContext(this.context, this.state);
        this.enterRule(localContext, 2, RedisParser.RULE_commands);
        let _la: number;
        try {
            this.state = 242;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 227;
                this.command();
                this.state = 231;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 2) {
                    {
                    {
                    this.state = 228;
                    this.match(RedisParser.NEWLINE);
                    }
                    }
                    this.state = 233;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 234;
                this.command();
                this.state = 236;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 235;
                    this.match(RedisParser.NEWLINE);
                    }
                    }
                    this.state = 238;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 2);
                this.state = 240;
                this.commands();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public command(): CommandContext {
        let localContext = new CommandContext(this.context, this.state);
        this.enterRule(localContext, 4, RedisParser.RULE_command);
        try {
            this.state = 248;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.COPY:
            case RedisParser.DEL:
            case RedisParser.UNLINK:
            case RedisParser.DUMP:
            case RedisParser.EXISTS:
            case RedisParser.EXPIRE:
            case RedisParser.EXPIREAT:
            case RedisParser.EXPIRETIME:
            case RedisParser.PEXPIRE:
            case RedisParser.PEXPIREAT:
            case RedisParser.PEXPIRETIME:
            case RedisParser.KEYS:
            case RedisParser.MOVE:
            case RedisParser.OBJECT:
            case RedisParser.PERSIST:
            case RedisParser.TTL:
            case RedisParser.PTTL:
            case RedisParser.RANDOMKEY:
            case RedisParser.RENAME:
            case RedisParser.RENAMENX:
            case RedisParser.SCAN:
            case RedisParser.TYPE:
            case RedisParser.TOUCH:
            case RedisParser.WAIT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 244;
                this.commonCommand();
                }
                break;
            case RedisParser.SET:
            case RedisParser.GET:
            case RedisParser.INCR:
            case RedisParser.INCRBY:
            case RedisParser.DECR:
            case RedisParser.DECRBY:
            case RedisParser.APPEND:
            case RedisParser.GETDEL:
            case RedisParser.GETEX:
            case RedisParser.GETRANGE:
            case RedisParser.GETSET:
            case RedisParser.MGET:
            case RedisParser.MSET:
            case RedisParser.MSETNX:
            case RedisParser.PSETEX:
            case RedisParser.SETEX:
            case RedisParser.SETNX:
            case RedisParser.SETRANGE:
            case RedisParser.STRLEN:
            case RedisParser.SUBSTR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 245;
                this.stringCommand();
                }
                break;
            case RedisParser.LMOVE:
            case RedisParser.BLMOVE:
            case RedisParser.LMPOP:
            case RedisParser.BLMPOP:
            case RedisParser.LPOP:
            case RedisParser.BLPOP:
            case RedisParser.RPOP:
            case RedisParser.BRPOP:
            case RedisParser.RPOPLPUSH:
            case RedisParser.BRPOPLPUSH:
            case RedisParser.LINDEX:
            case RedisParser.LINSERT:
            case RedisParser.LLEN:
            case RedisParser.LPOS:
            case RedisParser.LPUSH:
            case RedisParser.LPUSHX:
            case RedisParser.RPUSH:
            case RedisParser.RPUSHX:
            case RedisParser.LRANGE:
            case RedisParser.LREM:
            case RedisParser.LSET:
            case RedisParser.LTRIM:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 246;
                this.listCommand();
                }
                break;
            case RedisParser.SADD:
            case RedisParser.SCARD:
            case RedisParser.SDIFF:
            case RedisParser.SDIFFSTORE:
            case RedisParser.SINTER:
            case RedisParser.SINTERCARD:
            case RedisParser.SINTERSTORE:
            case RedisParser.SISMEMBER:
            case RedisParser.SMISMEMBER:
            case RedisParser.SMEMBERS:
            case RedisParser.SMOVE:
            case RedisParser.SPOP:
            case RedisParser.SRANDMEMBER:
            case RedisParser.SREM:
            case RedisParser.SSCAN:
            case RedisParser.SUNION:
            case RedisParser.SUNIONSTORE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 247;
                this.setCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonCommand(): CommonCommandContext {
        let localContext = new CommonCommandContext(this.context, this.state);
        this.enterRule(localContext, 6, RedisParser.RULE_commonCommand);
        try {
            this.state = 274;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.COPY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 250;
                this.copyCommand();
                }
                break;
            case RedisParser.DEL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 251;
                this.deleteCommand();
                }
                break;
            case RedisParser.UNLINK:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 252;
                this.unlinkCommand();
                }
                break;
            case RedisParser.DUMP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 253;
                this.dumpCommand();
                }
                break;
            case RedisParser.EXISTS:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 254;
                this.existsCommand();
                }
                break;
            case RedisParser.EXPIRE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 255;
                this.expireCommand();
                }
                break;
            case RedisParser.EXPIREAT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 256;
                this.expireAtCommand();
                }
                break;
            case RedisParser.EXPIRETIME:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 257;
                this.expireTimeCommand();
                }
                break;
            case RedisParser.PEXPIRE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 258;
                this.pExpireCommand();
                }
                break;
            case RedisParser.PEXPIREAT:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 259;
                this.pExpireAtCommand();
                }
                break;
            case RedisParser.PEXPIRETIME:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 260;
                this.pExpireTimeCommand();
                }
                break;
            case RedisParser.KEYS:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 261;
                this.keysCommand();
                }
                break;
            case RedisParser.MOVE:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 262;
                this.moveCommand();
                }
                break;
            case RedisParser.OBJECT:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 263;
                this.objectCommand();
                }
                break;
            case RedisParser.PERSIST:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 264;
                this.persistCommand();
                }
                break;
            case RedisParser.TTL:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 265;
                this.ttlCommand();
                }
                break;
            case RedisParser.PTTL:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 266;
                this.pTtlCommand();
                }
                break;
            case RedisParser.RANDOMKEY:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 267;
                this.randomKeyCommand();
                }
                break;
            case RedisParser.RENAME:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 268;
                this.renameCommand();
                }
                break;
            case RedisParser.RENAMENX:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 269;
                this.renameNxCommand();
                }
                break;
            case RedisParser.SCAN:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 270;
                this.scanCommand();
                }
                break;
            case RedisParser.TOUCH:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 271;
                this.touchCommand();
                }
                break;
            case RedisParser.TYPE:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 272;
                this.typeCommand();
                }
                break;
            case RedisParser.WAIT:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 273;
                this.waitCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringCommand(): StringCommandContext {
        let localContext = new StringCommandContext(this.context, this.state);
        this.enterRule(localContext, 8, RedisParser.RULE_stringCommand);
        try {
            this.state = 296;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 276;
                this.stringSetCommand();
                }
                break;
            case RedisParser.GET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 277;
                this.getCommand();
                }
                break;
            case RedisParser.INCR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 278;
                this.incrementCommand();
                }
                break;
            case RedisParser.INCRBY:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 279;
                this.incrementByCommand();
                }
                break;
            case RedisParser.DECR:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 280;
                this.decrementCommand();
                }
                break;
            case RedisParser.DECRBY:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 281;
                this.decrementByCommand();
                }
                break;
            case RedisParser.APPEND:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 282;
                this.appendCommand();
                }
                break;
            case RedisParser.GETDEL:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 283;
                this.getDeleteCommand();
                }
                break;
            case RedisParser.GETEX:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 284;
                this.getExCommand();
                }
                break;
            case RedisParser.GETRANGE:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 285;
                this.getRangeCommand();
                }
                break;
            case RedisParser.GETSET:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 286;
                this.getSetCommand();
                }
                break;
            case RedisParser.MGET:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 287;
                this.mGetCommand();
                }
                break;
            case RedisParser.MSET:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 288;
                this.mSetCommand();
                }
                break;
            case RedisParser.MSETNX:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 289;
                this.mSetNxCommand();
                }
                break;
            case RedisParser.PSETEX:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 290;
                this.pSetExCommand();
                }
                break;
            case RedisParser.SETEX:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 291;
                this.setExCommand();
                }
                break;
            case RedisParser.SETNX:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 292;
                this.setNxCommand();
                }
                break;
            case RedisParser.SETRANGE:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 293;
                this.setRangeCommand();
                }
                break;
            case RedisParser.STRLEN:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 294;
                this.stringLengthCommand();
                }
                break;
            case RedisParser.SUBSTR:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 295;
                this.substringCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listCommand(): ListCommandContext {
        let localContext = new ListCommandContext(this.context, this.state);
        this.enterRule(localContext, 10, RedisParser.RULE_listCommand);
        try {
            this.state = 320;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.LMOVE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 298;
                this.lmoveCommand();
                }
                break;
            case RedisParser.BLMOVE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 299;
                this.blmoveCommand();
                }
                break;
            case RedisParser.LMPOP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 300;
                this.lmpopCommand();
                }
                break;
            case RedisParser.BLMPOP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 301;
                this.blmpopCommand();
                }
                break;
            case RedisParser.LPOP:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 302;
                this.lpopCommand();
                }
                break;
            case RedisParser.BLPOP:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 303;
                this.blpopCommand();
                }
                break;
            case RedisParser.RPOP:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 304;
                this.rpopCommand();
                }
                break;
            case RedisParser.BRPOP:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 305;
                this.brpopCommand();
                }
                break;
            case RedisParser.RPOPLPUSH:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 306;
                this.rpopLpushCommand();
                }
                break;
            case RedisParser.BRPOPLPUSH:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 307;
                this.brpopLpushCommand();
                }
                break;
            case RedisParser.LINDEX:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 308;
                this.lindexCommand();
                }
                break;
            case RedisParser.LINSERT:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 309;
                this.linsertCommand();
                }
                break;
            case RedisParser.LLEN:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 310;
                this.llenCommand();
                }
                break;
            case RedisParser.LPOS:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 311;
                this.lposCommand();
                }
                break;
            case RedisParser.LPUSH:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 312;
                this.lpushCommand();
                }
                break;
            case RedisParser.LPUSHX:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 313;
                this.lpushxCommand();
                }
                break;
            case RedisParser.RPUSH:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 314;
                this.rpushCommand();
                }
                break;
            case RedisParser.RPUSHX:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 315;
                this.rpushxCommand();
                }
                break;
            case RedisParser.LRANGE:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 316;
                this.lrangeCommand();
                }
                break;
            case RedisParser.LREM:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 317;
                this.lremCommand();
                }
                break;
            case RedisParser.LSET:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 318;
                this.lsetCommand();
                }
                break;
            case RedisParser.LTRIM:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 319;
                this.ltrimCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setCommand(): SetCommandContext {
        let localContext = new SetCommandContext(this.context, this.state);
        this.enterRule(localContext, 12, RedisParser.RULE_setCommand);
        try {
            this.state = 339;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.SADD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 322;
                this.saddCommand();
                }
                break;
            case RedisParser.SCARD:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 323;
                this.scardCommand();
                }
                break;
            case RedisParser.SDIFF:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 324;
                this.sdiffCommand();
                }
                break;
            case RedisParser.SDIFFSTORE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 325;
                this.sdiffstoreCommand();
                }
                break;
            case RedisParser.SINTER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 326;
                this.sinterCommand();
                }
                break;
            case RedisParser.SINTERCARD:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 327;
                this.sintercardCommand();
                }
                break;
            case RedisParser.SINTERSTORE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 328;
                this.sinterstoreCommand();
                }
                break;
            case RedisParser.SISMEMBER:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 329;
                this.sismemberCommand();
                }
                break;
            case RedisParser.SMISMEMBER:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 330;
                this.smismemberCommand();
                }
                break;
            case RedisParser.SMEMBERS:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 331;
                this.smembersCommand();
                }
                break;
            case RedisParser.SMOVE:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 332;
                this.smoveCommand();
                }
                break;
            case RedisParser.SPOP:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 333;
                this.spopCommand();
                }
                break;
            case RedisParser.SRANDMEMBER:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 334;
                this.srandmemberCommand();
                }
                break;
            case RedisParser.SREM:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 335;
                this.sremCommand();
                }
                break;
            case RedisParser.SSCAN:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 336;
                this.sscanComman();
                }
                break;
            case RedisParser.SUNION:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 337;
                this.sunionCommand();
                }
                break;
            case RedisParser.SUNIONSTORE:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 338;
                this.sunionstoreCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public saddCommand(): SaddCommandContext {
        let localContext = new SaddCommandContext(this.context, this.state);
        this.enterRule(localContext, 14, RedisParser.RULE_saddCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 341;
            this.match(RedisParser.SADD);
            this.state = 342;
            this.setKeyName();
            this.state = 344;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 343;
                this.identifier();
                }
                }
                this.state = 346;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scardCommand(): ScardCommandContext {
        let localContext = new ScardCommandContext(this.context, this.state);
        this.enterRule(localContext, 16, RedisParser.RULE_scardCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 348;
            this.match(RedisParser.SCARD);
            this.state = 349;
            this.setKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sdiffCommand(): SdiffCommandContext {
        let localContext = new SdiffCommandContext(this.context, this.state);
        this.enterRule(localContext, 18, RedisParser.RULE_sdiffCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 351;
            this.match(RedisParser.SDIFF);
            this.state = 353;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 352;
                this.setKeyName();
                }
                }
                this.state = 355;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sdiffstoreCommand(): SdiffstoreCommandContext {
        let localContext = new SdiffstoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 20, RedisParser.RULE_sdiffstoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 357;
            this.match(RedisParser.SDIFFSTORE);
            this.state = 358;
            this.identifier();
            this.state = 360;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 359;
                this.setKeyName();
                }
                }
                this.state = 362;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sinterCommand(): SinterCommandContext {
        let localContext = new SinterCommandContext(this.context, this.state);
        this.enterRule(localContext, 22, RedisParser.RULE_sinterCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 364;
            this.match(RedisParser.SINTER);
            this.state = 366;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 365;
                this.setKeyName();
                }
                }
                this.state = 368;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sintercardCommand(): SintercardCommandContext {
        let localContext = new SintercardCommandContext(this.context, this.state);
        this.enterRule(localContext, 24, RedisParser.RULE_sintercardCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 370;
            this.match(RedisParser.SINTERCARD);
            this.state = 371;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 373;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 372;
                this.setKeyName();
                }
                }
                this.state = 375;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            this.state = 378;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 377;
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 26, RedisParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 380;
            this.match(RedisParser.LIMIT);
            this.state = 381;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sinterstoreCommand(): SinterstoreCommandContext {
        let localContext = new SinterstoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 28, RedisParser.RULE_sinterstoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 383;
            this.match(RedisParser.SINTERSTORE);
            this.state = 384;
            this.identifier();
            this.state = 386;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 385;
                this.setKeyName();
                }
                }
                this.state = 388;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sismemberCommand(): SismemberCommandContext {
        let localContext = new SismemberCommandContext(this.context, this.state);
        this.enterRule(localContext, 30, RedisParser.RULE_sismemberCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 390;
            this.match(RedisParser.SISMEMBER);
            this.state = 391;
            this.setKeyName();
            this.state = 392;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public smismemberCommand(): SmismemberCommandContext {
        let localContext = new SmismemberCommandContext(this.context, this.state);
        this.enterRule(localContext, 32, RedisParser.RULE_smismemberCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 394;
            this.match(RedisParser.SMISMEMBER);
            this.state = 395;
            this.setKeyName();
            this.state = 397;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 396;
                this.identifier();
                }
                }
                this.state = 399;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public smembersCommand(): SmembersCommandContext {
        let localContext = new SmembersCommandContext(this.context, this.state);
        this.enterRule(localContext, 34, RedisParser.RULE_smembersCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 401;
            this.match(RedisParser.SMEMBERS);
            this.state = 402;
            this.setKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public smoveCommand(): SmoveCommandContext {
        let localContext = new SmoveCommandContext(this.context, this.state);
        this.enterRule(localContext, 36, RedisParser.RULE_smoveCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 404;
            this.match(RedisParser.SMOVE);
            this.state = 405;
            this.setKeyName();
            this.state = 406;
            this.setKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public spopCommand(): SpopCommandContext {
        let localContext = new SpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 38, RedisParser.RULE_spopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 408;
            this.match(RedisParser.SPOP);
            this.state = 409;
            this.setKeyName();
            this.state = 411;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 112) {
                {
                this.state = 410;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public srandmemberCommand(): SrandmemberCommandContext {
        let localContext = new SrandmemberCommandContext(this.context, this.state);
        this.enterRule(localContext, 40, RedisParser.RULE_srandmemberCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 413;
            this.match(RedisParser.SRANDMEMBER);
            this.state = 414;
            this.setKeyName();
            this.state = 416;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 112 || _la === 113) {
                {
                this.state = 415;
                this.decimal();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sremCommand(): SremCommandContext {
        let localContext = new SremCommandContext(this.context, this.state);
        this.enterRule(localContext, 42, RedisParser.RULE_sremCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 418;
            this.match(RedisParser.SREM);
            this.state = 419;
            this.setKeyName();
            this.state = 421;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 420;
                this.identifier();
                }
                }
                this.state = 423;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sscanComman(): SscanCommanContext {
        let localContext = new SscanCommanContext(this.context, this.state);
        this.enterRule(localContext, 44, RedisParser.RULE_sscanComman);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 425;
            this.match(RedisParser.SSCAN);
            this.state = 426;
            this.setKeyName();
            this.state = 427;
            this.decimal();
            this.state = 429;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34) {
                {
                this.state = 428;
                this.matchClause();
                }
            }

            this.state = 432;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 431;
                this.countClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sunionCommand(): SunionCommandContext {
        let localContext = new SunionCommandContext(this.context, this.state);
        this.enterRule(localContext, 46, RedisParser.RULE_sunionCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 434;
            this.match(RedisParser.SUNION);
            this.state = 436;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 435;
                this.setKeyName();
                }
                }
                this.state = 438;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sunionstoreCommand(): SunionstoreCommandContext {
        let localContext = new SunionstoreCommandContext(this.context, this.state);
        this.enterRule(localContext, 48, RedisParser.RULE_sunionstoreCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 440;
            this.match(RedisParser.SUNIONSTORE);
            this.state = 441;
            this.identifier();
            this.state = 443;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 442;
                this.setKeyName();
                }
                }
                this.state = 445;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lmoveCommand(): LmoveCommandContext {
        let localContext = new LmoveCommandContext(this.context, this.state);
        this.enterRule(localContext, 50, RedisParser.RULE_lmoveCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 447;
            this.match(RedisParser.LMOVE);
            this.state = 448;
            this.listKeyName();
            this.state = 449;
            this.listKeyName();
            this.state = 450;
            this.leftOrRightClause();
            this.state = 451;
            this.leftOrRightClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public leftOrRightClause(): LeftOrRightClauseContext {
        let localContext = new LeftOrRightClauseContext(this.context, this.state);
        this.enterRule(localContext, 52, RedisParser.RULE_leftOrRightClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 453;
            _la = this.tokenStream.LA(1);
            if(!(_la === 39 || _la === 40)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public blmoveCommand(): BlmoveCommandContext {
        let localContext = new BlmoveCommandContext(this.context, this.state);
        this.enterRule(localContext, 54, RedisParser.RULE_blmoveCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 455;
            this.match(RedisParser.BLMOVE);
            this.state = 456;
            this.listKeyName();
            this.state = 457;
            this.listKeyName();
            this.state = 458;
            this.leftOrRightClause();
            this.state = 459;
            this.leftOrRightClause();
            this.state = 460;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lmpopCommand(): LmpopCommandContext {
        let localContext = new LmpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 56, RedisParser.RULE_lmpopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 462;
            this.match(RedisParser.LMPOP);
            this.state = 463;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 465;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 464;
                this.listKeyName();
                }
                }
                this.state = 467;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            this.state = 469;
            this.leftOrRightClause();
            this.state = 471;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 470;
                this.countClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public blmpopCommand(): BlmpopCommandContext {
        let localContext = new BlmpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 58, RedisParser.RULE_blmpopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 473;
            this.match(RedisParser.BLMPOP);
            this.state = 474;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 475;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 477;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 476;
                this.listKeyName();
                }
                }
                this.state = 479;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            this.state = 481;
            this.leftOrRightClause();
            this.state = 483;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 482;
                this.countClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lpopCommand(): LpopCommandContext {
        let localContext = new LpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 60, RedisParser.RULE_lpopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 485;
            this.match(RedisParser.LPOP);
            this.state = 486;
            this.listKeyName();
            this.state = 488;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 112) {
                {
                this.state = 487;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public blpopCommand(): BlpopCommandContext {
        let localContext = new BlpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 62, RedisParser.RULE_blpopCommand);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 490;
            this.match(RedisParser.BLPOP);
            this.state = 492;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 491;
                    this.listKeyName();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 494;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 29, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 496;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpopCommand(): RpopCommandContext {
        let localContext = new RpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 64, RedisParser.RULE_rpopCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 498;
            this.match(RedisParser.RPOP);
            this.state = 499;
            this.listKeyName();
            this.state = 501;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 112) {
                {
                this.state = 500;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public brpopCommand(): BrpopCommandContext {
        let localContext = new BrpopCommandContext(this.context, this.state);
        this.enterRule(localContext, 66, RedisParser.RULE_brpopCommand);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 503;
            this.match(RedisParser.BRPOP);
            this.state = 505;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 504;
                    this.listKeyName();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 507;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 31, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 509;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpopLpushCommand(): RpopLpushCommandContext {
        let localContext = new RpopLpushCommandContext(this.context, this.state);
        this.enterRule(localContext, 68, RedisParser.RULE_rpopLpushCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 511;
            this.match(RedisParser.RPOPLPUSH);
            this.state = 512;
            this.listKeyName();
            this.state = 513;
            this.listKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public brpopLpushCommand(): BrpopLpushCommandContext {
        let localContext = new BrpopLpushCommandContext(this.context, this.state);
        this.enterRule(localContext, 70, RedisParser.RULE_brpopLpushCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 515;
            this.match(RedisParser.BRPOPLPUSH);
            this.state = 516;
            this.listKeyName();
            this.state = 517;
            this.listKeyName();
            this.state = 518;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lindexCommand(): LindexCommandContext {
        let localContext = new LindexCommandContext(this.context, this.state);
        this.enterRule(localContext, 72, RedisParser.RULE_lindexCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 520;
            this.match(RedisParser.LINDEX);
            this.state = 521;
            this.listKeyName();
            this.state = 522;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public linsertCommand(): LinsertCommandContext {
        let localContext = new LinsertCommandContext(this.context, this.state);
        this.enterRule(localContext, 74, RedisParser.RULE_linsertCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 524;
            this.match(RedisParser.LINSERT);
            this.state = 525;
            this.listKeyName();
            this.state = 526;
            this.beforeOrAfterClause();
            this.state = 527;
            this.identifier();
            this.state = 528;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public beforeOrAfterClause(): BeforeOrAfterClauseContext {
        let localContext = new BeforeOrAfterClauseContext(this.context, this.state);
        this.enterRule(localContext, 76, RedisParser.RULE_beforeOrAfterClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 530;
            _la = this.tokenStream.LA(1);
            if(!(_la === 41 || _la === 42)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public llenCommand(): LlenCommandContext {
        let localContext = new LlenCommandContext(this.context, this.state);
        this.enterRule(localContext, 78, RedisParser.RULE_llenCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 532;
            this.match(RedisParser.LLEN);
            this.state = 533;
            this.listKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lposCommand(): LposCommandContext {
        let localContext = new LposCommandContext(this.context, this.state);
        this.enterRule(localContext, 80, RedisParser.RULE_lposCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 535;
            this.match(RedisParser.LPOS);
            this.state = 536;
            this.listKeyName();
            this.state = 537;
            this.identifier();
            this.state = 539;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43) {
                {
                this.state = 538;
                this.rankClause();
                }
            }

            this.state = 542;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 541;
                this.countClause();
                }
            }

            this.state = 545;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 44) {
                {
                this.state = 544;
                this.maxLenClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rankClause(): RankClauseContext {
        let localContext = new RankClauseContext(this.context, this.state);
        this.enterRule(localContext, 82, RedisParser.RULE_rankClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 547;
            this.match(RedisParser.RANK);
            this.state = 548;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public maxLenClause(): MaxLenClauseContext {
        let localContext = new MaxLenClauseContext(this.context, this.state);
        this.enterRule(localContext, 84, RedisParser.RULE_maxLenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 550;
            this.match(RedisParser.MAXLEN);
            this.state = 551;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lpushCommand(): LpushCommandContext {
        let localContext = new LpushCommandContext(this.context, this.state);
        this.enterRule(localContext, 86, RedisParser.RULE_lpushCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 553;
            this.match(RedisParser.LPUSH);
            this.state = 554;
            this.listKeyName();
            this.state = 556;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 555;
                this.identifier();
                }
                }
                this.state = 558;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lpushxCommand(): LpushxCommandContext {
        let localContext = new LpushxCommandContext(this.context, this.state);
        this.enterRule(localContext, 88, RedisParser.RULE_lpushxCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 560;
            this.match(RedisParser.LPUSHX);
            this.state = 561;
            this.listKeyName();
            this.state = 563;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 562;
                this.identifier();
                }
                }
                this.state = 565;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpushCommand(): RpushCommandContext {
        let localContext = new RpushCommandContext(this.context, this.state);
        this.enterRule(localContext, 90, RedisParser.RULE_rpushCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 567;
            this.match(RedisParser.RPUSH);
            this.state = 568;
            this.listKeyName();
            this.state = 570;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 569;
                this.identifier();
                }
                }
                this.state = 572;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpushxCommand(): RpushxCommandContext {
        let localContext = new RpushxCommandContext(this.context, this.state);
        this.enterRule(localContext, 92, RedisParser.RULE_rpushxCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 574;
            this.match(RedisParser.RPUSHX);
            this.state = 575;
            this.listKeyName();
            this.state = 577;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 576;
                this.identifier();
                }
                }
                this.state = 579;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lrangeCommand(): LrangeCommandContext {
        let localContext = new LrangeCommandContext(this.context, this.state);
        this.enterRule(localContext, 94, RedisParser.RULE_lrangeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 581;
            this.match(RedisParser.LRANGE);
            this.state = 582;
            this.listKeyName();
            this.state = 583;
            this.decimal();
            this.state = 584;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lremCommand(): LremCommandContext {
        let localContext = new LremCommandContext(this.context, this.state);
        this.enterRule(localContext, 96, RedisParser.RULE_lremCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 586;
            this.match(RedisParser.LREM);
            this.state = 587;
            this.listKeyName();
            this.state = 588;
            this.decimal();
            this.state = 589;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lsetCommand(): LsetCommandContext {
        let localContext = new LsetCommandContext(this.context, this.state);
        this.enterRule(localContext, 98, RedisParser.RULE_lsetCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 591;
            this.match(RedisParser.LSET);
            this.state = 592;
            this.listKeyName();
            this.state = 593;
            this.decimal();
            this.state = 594;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ltrimCommand(): LtrimCommandContext {
        let localContext = new LtrimCommandContext(this.context, this.state);
        this.enterRule(localContext, 100, RedisParser.RULE_ltrimCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 596;
            this.match(RedisParser.LTRIM);
            this.state = 597;
            this.listKeyName();
            this.state = 598;
            this.decimal();
            this.state = 599;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copyCommand(): CopyCommandContext {
        let localContext = new CopyCommandContext(this.context, this.state);
        this.enterRule(localContext, 102, RedisParser.RULE_copyCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 601;
            this.match(RedisParser.COPY);
            this.state = 602;
            this.keyName();
            this.state = 603;
            this.identifier();
            this.state = 605;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 4) {
                {
                this.state = 604;
                this.dbClause();
                }
            }

            this.state = 608;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 5) {
                {
                this.state = 607;
                this.match(RedisParser.REPLACE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbClause(): DbClauseContext {
        let localContext = new DbClauseContext(this.context, this.state);
        this.enterRule(localContext, 104, RedisParser.RULE_dbClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 610;
            this.match(RedisParser.DB);
            this.state = 611;
            this.databaseName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseName(): DatabaseNameContext {
        let localContext = new DatabaseNameContext(this.context, this.state);
        this.enterRule(localContext, 106, RedisParser.RULE_databaseName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 613;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteCommand(): DeleteCommandContext {
        let localContext = new DeleteCommandContext(this.context, this.state);
        this.enterRule(localContext, 108, RedisParser.RULE_deleteCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 615;
            this.match(RedisParser.DEL);
            this.state = 617;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 616;
                this.keyName();
                }
                }
                this.state = 619;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlinkCommand(): UnlinkCommandContext {
        let localContext = new UnlinkCommandContext(this.context, this.state);
        this.enterRule(localContext, 110, RedisParser.RULE_unlinkCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 621;
            this.match(RedisParser.UNLINK);
            this.state = 623;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 622;
                this.keyName();
                }
                }
                this.state = 625;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dumpCommand(): DumpCommandContext {
        let localContext = new DumpCommandContext(this.context, this.state);
        this.enterRule(localContext, 112, RedisParser.RULE_dumpCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 627;
            this.match(RedisParser.DUMP);
            this.state = 628;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existsCommand(): ExistsCommandContext {
        let localContext = new ExistsCommandContext(this.context, this.state);
        this.enterRule(localContext, 114, RedisParser.RULE_existsCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 630;
            this.match(RedisParser.EXISTS);
            this.state = 632;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 631;
                this.keyName();
                }
                }
                this.state = 634;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expireCommand(): ExpireCommandContext {
        let localContext = new ExpireCommandContext(this.context, this.state);
        this.enterRule(localContext, 116, RedisParser.RULE_expireCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 636;
            this.match(RedisParser.EXPIRE);
            this.state = 637;
            this.keyName();
            this.state = 638;
            this.decimal();
            this.state = 640;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 30720) !== 0)) {
                {
                this.state = 639;
                this.expireOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expireAtCommand(): ExpireAtCommandContext {
        let localContext = new ExpireAtCommandContext(this.context, this.state);
        this.enterRule(localContext, 118, RedisParser.RULE_expireAtCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 642;
            this.match(RedisParser.EXPIREAT);
            this.state = 643;
            this.keyName();
            this.state = 644;
            this.decimal();
            this.state = 646;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 30720) !== 0)) {
                {
                this.state = 645;
                this.expireOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pExpireCommand(): PExpireCommandContext {
        let localContext = new PExpireCommandContext(this.context, this.state);
        this.enterRule(localContext, 120, RedisParser.RULE_pExpireCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 648;
            this.match(RedisParser.PEXPIRE);
            this.state = 649;
            this.keyName();
            this.state = 650;
            this.decimal();
            this.state = 652;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 30720) !== 0)) {
                {
                this.state = 651;
                this.expireOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pExpireAtCommand(): PExpireAtCommandContext {
        let localContext = new PExpireAtCommandContext(this.context, this.state);
        this.enterRule(localContext, 122, RedisParser.RULE_pExpireAtCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 654;
            this.match(RedisParser.PEXPIREAT);
            this.state = 655;
            this.keyName();
            this.state = 656;
            this.decimal();
            this.state = 658;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 30720) !== 0)) {
                {
                this.state = 657;
                this.expireOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expireOptions(): ExpireOptionsContext {
        let localContext = new ExpireOptionsContext(this.context, this.state);
        this.enterRule(localContext, 124, RedisParser.RULE_expireOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 660;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 30720) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expireTimeCommand(): ExpireTimeCommandContext {
        let localContext = new ExpireTimeCommandContext(this.context, this.state);
        this.enterRule(localContext, 126, RedisParser.RULE_expireTimeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 662;
            this.match(RedisParser.EXPIRETIME);
            this.state = 663;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pExpireTimeCommand(): PExpireTimeCommandContext {
        let localContext = new PExpireTimeCommandContext(this.context, this.state);
        this.enterRule(localContext, 128, RedisParser.RULE_pExpireTimeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 665;
            this.match(RedisParser.PEXPIRETIME);
            this.state = 666;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keysCommand(): KeysCommandContext {
        let localContext = new KeysCommandContext(this.context, this.state);
        this.enterRule(localContext, 130, RedisParser.RULE_keysCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 668;
            this.match(RedisParser.KEYS);
            this.state = 669;
            this.keyPattern();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public moveCommand(): MoveCommandContext {
        let localContext = new MoveCommandContext(this.context, this.state);
        this.enterRule(localContext, 132, RedisParser.RULE_moveCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 671;
            this.match(RedisParser.MOVE);
            this.state = 672;
            this.keyName();
            this.state = 673;
            this.databaseName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public objectCommand(): ObjectCommandContext {
        let localContext = new ObjectCommandContext(this.context, this.state);
        this.enterRule(localContext, 134, RedisParser.RULE_objectCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 675;
            this.match(RedisParser.OBJECT);
            this.state = 676;
            this.objectOptions();
            this.state = 677;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public objectOptions(): ObjectOptionsContext {
        let localContext = new ObjectOptionsContext(this.context, this.state);
        this.enterRule(localContext, 136, RedisParser.RULE_objectOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 679;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 125829120) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public persistCommand(): PersistCommandContext {
        let localContext = new PersistCommandContext(this.context, this.state);
        this.enterRule(localContext, 138, RedisParser.RULE_persistCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 681;
            this.match(RedisParser.PERSIST);
            this.state = 682;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ttlCommand(): TtlCommandContext {
        let localContext = new TtlCommandContext(this.context, this.state);
        this.enterRule(localContext, 140, RedisParser.RULE_ttlCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 684;
            this.match(RedisParser.TTL);
            this.state = 685;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pTtlCommand(): PTtlCommandContext {
        let localContext = new PTtlCommandContext(this.context, this.state);
        this.enterRule(localContext, 142, RedisParser.RULE_pTtlCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 687;
            this.match(RedisParser.PTTL);
            this.state = 688;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public randomKeyCommand(): RandomKeyCommandContext {
        let localContext = new RandomKeyCommandContext(this.context, this.state);
        this.enterRule(localContext, 144, RedisParser.RULE_randomKeyCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 690;
            this.match(RedisParser.RANDOMKEY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameCommand(): RenameCommandContext {
        let localContext = new RenameCommandContext(this.context, this.state);
        this.enterRule(localContext, 146, RedisParser.RULE_renameCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 692;
            this.match(RedisParser.RENAME);
            this.state = 693;
            this.keyName();
            this.state = 694;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameNxCommand(): RenameNxCommandContext {
        let localContext = new RenameNxCommandContext(this.context, this.state);
        this.enterRule(localContext, 148, RedisParser.RULE_renameNxCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 696;
            this.match(RedisParser.RENAMENX);
            this.state = 697;
            this.keyName();
            this.state = 698;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scanCommand(): ScanCommandContext {
        let localContext = new ScanCommandContext(this.context, this.state);
        this.enterRule(localContext, 150, RedisParser.RULE_scanCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 700;
            this.match(RedisParser.SCAN);
            this.state = 701;
            this.decimal();
            this.state = 703;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34) {
                {
                this.state = 702;
                this.matchClause();
                }
            }

            this.state = 706;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 705;
                this.countClause();
                }
            }

            this.state = 709;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 708;
                this.typeClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchClause(): MatchClauseContext {
        let localContext = new MatchClauseContext(this.context, this.state);
        this.enterRule(localContext, 152, RedisParser.RULE_matchClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 711;
            this.match(RedisParser.MATCH);
            this.state = 712;
            this.keyPattern();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public countClause(): CountClauseContext {
        let localContext = new CountClauseContext(this.context, this.state);
        this.enterRule(localContext, 154, RedisParser.RULE_countClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 714;
            this.match(RedisParser.COUNT);
            this.state = 715;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeClause(): TypeClauseContext {
        let localContext = new TypeClauseContext(this.context, this.state);
        this.enterRule(localContext, 156, RedisParser.RULE_typeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 717;
            this.match(RedisParser.TYPE);
            this.state = 718;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public touchCommand(): TouchCommandContext {
        let localContext = new TouchCommandContext(this.context, this.state);
        this.enterRule(localContext, 158, RedisParser.RULE_touchCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 720;
            this.match(RedisParser.TOUCH);
            this.state = 722;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 721;
                this.keyName();
                }
                }
                this.state = 724;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeCommand(): TypeCommandContext {
        let localContext = new TypeCommandContext(this.context, this.state);
        this.enterRule(localContext, 160, RedisParser.RULE_typeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 726;
            this.match(RedisParser.TYPE);
            this.state = 727;
            this.keyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public waitCommand(): WaitCommandContext {
        let localContext = new WaitCommandContext(this.context, this.state);
        this.enterRule(localContext, 162, RedisParser.RULE_waitCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 729;
            this.match(RedisParser.WAIT);
            this.state = 730;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 731;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringSetCommand(): StringSetCommandContext {
        let localContext = new StringSetCommandContext(this.context, this.state);
        this.enterRule(localContext, 164, RedisParser.RULE_stringSetCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 733;
            this.match(RedisParser.SET);
            this.state = 734;
            this.stringKeyName();
            this.state = 735;
            this.identifier();
            this.state = 737;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 13 || _la === 14) {
                {
                this.state = 736;
                this.keyExistenceClause();
                }
            }

            this.state = 740;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 739;
                this.match(RedisParser.GET);
                }
            }

            this.state = 744;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.EX:
            case RedisParser.PX:
            case RedisParser.EXAT:
            case RedisParser.PXAT:
                {
                this.state = 742;
                this.expirationClause();
                }
                break;
            case RedisParser.KEEPTTL:
                {
                this.state = 743;
                this.match(RedisParser.KEEPTTL);
                }
                break;
            case RedisParser.EOF:
            case RedisParser.NEWLINE:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyExistenceClause(): KeyExistenceClauseContext {
        let localContext = new KeyExistenceClauseContext(this.context, this.state);
        this.enterRule(localContext, 166, RedisParser.RULE_keyExistenceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 746;
            _la = this.tokenStream.LA(1);
            if(!(_la === 13 || _la === 14)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expirationClause(): ExpirationClauseContext {
        let localContext = new ExpirationClauseContext(this.context, this.state);
        this.enterRule(localContext, 168, RedisParser.RULE_expirationClause);
        try {
            this.state = 756;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.EX:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 748;
                this.match(RedisParser.EX);
                this.state = 749;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
                break;
            case RedisParser.PX:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 750;
                this.match(RedisParser.PX);
                this.state = 751;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
                break;
            case RedisParser.EXAT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 752;
                this.match(RedisParser.EXAT);
                this.state = 753;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
                break;
            case RedisParser.PXAT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 754;
                this.match(RedisParser.PXAT);
                this.state = 755;
                this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getCommand(): GetCommandContext {
        let localContext = new GetCommandContext(this.context, this.state);
        this.enterRule(localContext, 170, RedisParser.RULE_getCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 758;
            this.match(RedisParser.GET);
            this.state = 759;
            this.stringKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public incrementCommand(): IncrementCommandContext {
        let localContext = new IncrementCommandContext(this.context, this.state);
        this.enterRule(localContext, 172, RedisParser.RULE_incrementCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 761;
            this.match(RedisParser.INCR);
            this.state = 762;
            this.stringKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public incrementByCommand(): IncrementByCommandContext {
        let localContext = new IncrementByCommandContext(this.context, this.state);
        this.enterRule(localContext, 174, RedisParser.RULE_incrementByCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 764;
            this.match(RedisParser.INCRBY);
            this.state = 765;
            this.stringKeyName();
            this.state = 766;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decrementCommand(): DecrementCommandContext {
        let localContext = new DecrementCommandContext(this.context, this.state);
        this.enterRule(localContext, 176, RedisParser.RULE_decrementCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 768;
            this.match(RedisParser.DECR);
            this.state = 769;
            this.stringKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decrementByCommand(): DecrementByCommandContext {
        let localContext = new DecrementByCommandContext(this.context, this.state);
        this.enterRule(localContext, 178, RedisParser.RULE_decrementByCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 771;
            this.match(RedisParser.DECRBY);
            this.state = 772;
            this.stringKeyName();
            this.state = 773;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public appendCommand(): AppendCommandContext {
        let localContext = new AppendCommandContext(this.context, this.state);
        this.enterRule(localContext, 180, RedisParser.RULE_appendCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 775;
            this.match(RedisParser.APPEND);
            this.state = 776;
            this.stringKeyName();
            this.state = 777;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getDeleteCommand(): GetDeleteCommandContext {
        let localContext = new GetDeleteCommandContext(this.context, this.state);
        this.enterRule(localContext, 182, RedisParser.RULE_getDeleteCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 779;
            this.match(RedisParser.GETDEL);
            this.state = 780;
            this.stringKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getExCommand(): GetExCommandContext {
        let localContext = new GetExCommandContext(this.context, this.state);
        this.enterRule(localContext, 184, RedisParser.RULE_getExCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 782;
            this.match(RedisParser.GETEX);
            this.state = 783;
            this.stringKeyName();
            this.state = 786;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case RedisParser.EX:
            case RedisParser.PX:
            case RedisParser.EXAT:
            case RedisParser.PXAT:
                {
                this.state = 784;
                this.expirationClause();
                }
                break;
            case RedisParser.PERSIST:
                {
                this.state = 785;
                this.match(RedisParser.PERSIST);
                }
                break;
            case RedisParser.EOF:
            case RedisParser.NEWLINE:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getRangeCommand(): GetRangeCommandContext {
        let localContext = new GetRangeCommandContext(this.context, this.state);
        this.enterRule(localContext, 186, RedisParser.RULE_getRangeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 788;
            this.match(RedisParser.GETRANGE);
            this.state = 789;
            this.stringKeyName();
            this.state = 790;
            this.decimal();
            this.state = 791;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getSetCommand(): GetSetCommandContext {
        let localContext = new GetSetCommandContext(this.context, this.state);
        this.enterRule(localContext, 188, RedisParser.RULE_getSetCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 793;
            this.match(RedisParser.GETSET);
            this.state = 794;
            this.stringKeyName();
            this.state = 795;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mGetCommand(): MGetCommandContext {
        let localContext = new MGetCommandContext(this.context, this.state);
        this.enterRule(localContext, 190, RedisParser.RULE_mGetCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 797;
            this.match(RedisParser.MGET);
            this.state = 799;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 798;
                this.stringKeyName();
                }
                }
                this.state = 801;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mSetCommand(): MSetCommandContext {
        let localContext = new MSetCommandContext(this.context, this.state);
        this.enterRule(localContext, 192, RedisParser.RULE_mSetCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 803;
            this.match(RedisParser.MSET);
            this.state = 807;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 804;
                this.stringKeyName();
                this.state = 805;
                this.identifier();
                }
                }
                this.state = 809;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mSetNxCommand(): MSetNxCommandContext {
        let localContext = new MSetNxCommandContext(this.context, this.state);
        this.enterRule(localContext, 194, RedisParser.RULE_mSetNxCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 811;
            this.match(RedisParser.MSETNX);
            this.state = 815;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 812;
                this.stringKeyName();
                this.state = 813;
                this.identifier();
                }
                }
                this.state = 817;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pSetExCommand(): PSetExCommandContext {
        let localContext = new PSetExCommandContext(this.context, this.state);
        this.enterRule(localContext, 196, RedisParser.RULE_pSetExCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 819;
            this.match(RedisParser.PSETEX);
            this.state = 820;
            this.stringKeyName();
            this.state = 821;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 822;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setExCommand(): SetExCommandContext {
        let localContext = new SetExCommandContext(this.context, this.state);
        this.enterRule(localContext, 198, RedisParser.RULE_setExCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 824;
            this.match(RedisParser.SETEX);
            this.state = 825;
            this.stringKeyName();
            this.state = 826;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 827;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setNxCommand(): SetNxCommandContext {
        let localContext = new SetNxCommandContext(this.context, this.state);
        this.enterRule(localContext, 200, RedisParser.RULE_setNxCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 829;
            this.match(RedisParser.SETNX);
            this.state = 830;
            this.stringKeyName();
            this.state = 831;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setRangeCommand(): SetRangeCommandContext {
        let localContext = new SetRangeCommandContext(this.context, this.state);
        this.enterRule(localContext, 202, RedisParser.RULE_setRangeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 833;
            this.match(RedisParser.SETRANGE);
            this.state = 834;
            this.stringKeyName();
            this.state = 835;
            this.match(RedisParser.POSITIVE_DECIMAL_LITERAL);
            this.state = 836;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringLengthCommand(): StringLengthCommandContext {
        let localContext = new StringLengthCommandContext(this.context, this.state);
        this.enterRule(localContext, 204, RedisParser.RULE_stringLengthCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 838;
            this.match(RedisParser.STRLEN);
            this.state = 839;
            this.stringKeyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public substringCommand(): SubstringCommandContext {
        let localContext = new SubstringCommandContext(this.context, this.state);
        this.enterRule(localContext, 206, RedisParser.RULE_substringCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 841;
            this.match(RedisParser.SUBSTR);
            this.state = 842;
            this.stringKeyName();
            this.state = 843;
            this.decimal();
            this.state = 844;
            this.decimal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decimal(): DecimalContext {
        let localContext = new DecimalContext(this.context, this.state);
        this.enterRule(localContext, 208, RedisParser.RULE_decimal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 846;
            _la = this.tokenStream.LA(1);
            if(!(_la === 112 || _la === 113)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 210, RedisParser.RULE_identifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 848;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 7) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringKeyName(): StringKeyNameContext {
        let localContext = new StringKeyNameContext(this.context, this.state);
        this.enterRule(localContext, 212, RedisParser.RULE_stringKeyName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 850;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listKeyName(): ListKeyNameContext {
        let localContext = new ListKeyNameContext(this.context, this.state);
        this.enterRule(localContext, 214, RedisParser.RULE_listKeyName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 852;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setKeyName(): SetKeyNameContext {
        let localContext = new SetKeyNameContext(this.context, this.state);
        this.enterRule(localContext, 216, RedisParser.RULE_setKeyName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 854;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyName(): KeyNameContext {
        let localContext = new KeyNameContext(this.context, this.state);
        this.enterRule(localContext, 218, RedisParser.RULE_keyName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 856;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyPattern(): KeyPatternContext {
        let localContext = new KeyPatternContext(this.context, this.state);
        this.enterRule(localContext, 220, RedisParser.RULE_keyPattern);
        try {
            localContext = new NotProperPatternContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 858;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public static readonly _serializedATN: number[] = [
        4,1,114,861,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,1,0,3,0,224,8,0,1,0,1,0,1,1,1,1,5,1,230,8,1,10,
        1,12,1,233,9,1,1,1,1,1,4,1,237,8,1,11,1,12,1,238,1,1,1,1,3,1,243,
        8,1,1,2,1,2,1,2,1,2,3,2,249,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        3,3,275,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,297,8,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        3,5,321,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,3,6,340,8,6,1,7,1,7,1,7,4,7,345,8,7,11,7,12,7,346,
        1,8,1,8,1,8,1,9,1,9,4,9,354,8,9,11,9,12,9,355,1,10,1,10,1,10,4,10,
        361,8,10,11,10,12,10,362,1,11,1,11,4,11,367,8,11,11,11,12,11,368,
        1,12,1,12,1,12,4,12,374,8,12,11,12,12,12,375,1,12,3,12,379,8,12,
        1,13,1,13,1,13,1,14,1,14,1,14,4,14,387,8,14,11,14,12,14,388,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,4,16,398,8,16,11,16,12,16,399,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,3,19,412,8,19,1,20,
        1,20,1,20,3,20,417,8,20,1,21,1,21,1,21,4,21,422,8,21,11,21,12,21,
        423,1,22,1,22,1,22,1,22,3,22,430,8,22,1,22,3,22,433,8,22,1,23,1,
        23,4,23,437,8,23,11,23,12,23,438,1,24,1,24,1,24,4,24,444,8,24,11,
        24,12,24,445,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,4,28,466,8,28,11,28,12,28,
        467,1,28,1,28,3,28,472,8,28,1,29,1,29,1,29,1,29,4,29,478,8,29,11,
        29,12,29,479,1,29,1,29,3,29,484,8,29,1,30,1,30,1,30,3,30,489,8,30,
        1,31,1,31,4,31,493,8,31,11,31,12,31,494,1,31,1,31,1,32,1,32,1,32,
        3,32,502,8,32,1,33,1,33,4,33,506,8,33,11,33,12,33,507,1,33,1,33,
        1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
        1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,
        1,40,1,40,3,40,540,8,40,1,40,3,40,543,8,40,1,40,3,40,546,8,40,1,
        41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,4,43,557,8,43,11,43,12,
        43,558,1,44,1,44,1,44,4,44,564,8,44,11,44,12,44,565,1,45,1,45,1,
        45,4,45,571,8,45,11,45,12,45,572,1,46,1,46,1,46,4,46,578,8,46,11,
        46,12,46,579,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,
        49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,
        51,3,51,606,8,51,1,51,3,51,609,8,51,1,52,1,52,1,52,1,53,1,53,1,54,
        1,54,4,54,618,8,54,11,54,12,54,619,1,55,1,55,4,55,624,8,55,11,55,
        12,55,625,1,56,1,56,1,56,1,57,1,57,4,57,633,8,57,11,57,12,57,634,
        1,58,1,58,1,58,1,58,3,58,641,8,58,1,59,1,59,1,59,1,59,3,59,647,8,
        59,1,60,1,60,1,60,1,60,3,60,653,8,60,1,61,1,61,1,61,1,61,3,61,659,
        8,61,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,
        1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,70,
        1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,
        1,74,1,74,1,75,1,75,1,75,3,75,704,8,75,1,75,3,75,707,8,75,1,75,3,
        75,710,8,75,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,
        79,4,79,723,8,79,11,79,12,79,724,1,80,1,80,1,80,1,81,1,81,1,81,1,
        81,1,82,1,82,1,82,1,82,3,82,738,8,82,1,82,3,82,741,8,82,1,82,1,82,
        3,82,745,8,82,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        3,84,757,8,84,1,85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,87,1,87,
        1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,
        1,91,1,92,1,92,1,92,1,92,3,92,787,8,92,1,93,1,93,1,93,1,93,1,93,
        1,94,1,94,1,94,1,94,1,95,1,95,4,95,800,8,95,11,95,12,95,801,1,96,
        1,96,1,96,1,96,4,96,808,8,96,11,96,12,96,809,1,97,1,97,1,97,1,97,
        4,97,816,8,97,11,97,12,97,817,1,98,1,98,1,98,1,98,1,98,1,99,1,99,
        1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,
        101,1,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,104,1,104,
        1,105,1,105,1,106,1,106,1,107,1,107,1,108,1,108,1,109,1,109,1,110,
        1,110,1,110,0,0,111,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
        212,214,216,218,220,0,7,1,0,39,40,1,0,41,42,1,0,11,14,1,0,23,26,
        1,0,13,14,1,0,112,113,1,0,112,114,890,0,223,1,0,0,0,2,242,1,0,0,
        0,4,248,1,0,0,0,6,274,1,0,0,0,8,296,1,0,0,0,10,320,1,0,0,0,12,339,
        1,0,0,0,14,341,1,0,0,0,16,348,1,0,0,0,18,351,1,0,0,0,20,357,1,0,
        0,0,22,364,1,0,0,0,24,370,1,0,0,0,26,380,1,0,0,0,28,383,1,0,0,0,
        30,390,1,0,0,0,32,394,1,0,0,0,34,401,1,0,0,0,36,404,1,0,0,0,38,408,
        1,0,0,0,40,413,1,0,0,0,42,418,1,0,0,0,44,425,1,0,0,0,46,434,1,0,
        0,0,48,440,1,0,0,0,50,447,1,0,0,0,52,453,1,0,0,0,54,455,1,0,0,0,
        56,462,1,0,0,0,58,473,1,0,0,0,60,485,1,0,0,0,62,490,1,0,0,0,64,498,
        1,0,0,0,66,503,1,0,0,0,68,511,1,0,0,0,70,515,1,0,0,0,72,520,1,0,
        0,0,74,524,1,0,0,0,76,530,1,0,0,0,78,532,1,0,0,0,80,535,1,0,0,0,
        82,547,1,0,0,0,84,550,1,0,0,0,86,553,1,0,0,0,88,560,1,0,0,0,90,567,
        1,0,0,0,92,574,1,0,0,0,94,581,1,0,0,0,96,586,1,0,0,0,98,591,1,0,
        0,0,100,596,1,0,0,0,102,601,1,0,0,0,104,610,1,0,0,0,106,613,1,0,
        0,0,108,615,1,0,0,0,110,621,1,0,0,0,112,627,1,0,0,0,114,630,1,0,
        0,0,116,636,1,0,0,0,118,642,1,0,0,0,120,648,1,0,0,0,122,654,1,0,
        0,0,124,660,1,0,0,0,126,662,1,0,0,0,128,665,1,0,0,0,130,668,1,0,
        0,0,132,671,1,0,0,0,134,675,1,0,0,0,136,679,1,0,0,0,138,681,1,0,
        0,0,140,684,1,0,0,0,142,687,1,0,0,0,144,690,1,0,0,0,146,692,1,0,
        0,0,148,696,1,0,0,0,150,700,1,0,0,0,152,711,1,0,0,0,154,714,1,0,
        0,0,156,717,1,0,0,0,158,720,1,0,0,0,160,726,1,0,0,0,162,729,1,0,
        0,0,164,733,1,0,0,0,166,746,1,0,0,0,168,756,1,0,0,0,170,758,1,0,
        0,0,172,761,1,0,0,0,174,764,1,0,0,0,176,768,1,0,0,0,178,771,1,0,
        0,0,180,775,1,0,0,0,182,779,1,0,0,0,184,782,1,0,0,0,186,788,1,0,
        0,0,188,793,1,0,0,0,190,797,1,0,0,0,192,803,1,0,0,0,194,811,1,0,
        0,0,196,819,1,0,0,0,198,824,1,0,0,0,200,829,1,0,0,0,202,833,1,0,
        0,0,204,838,1,0,0,0,206,841,1,0,0,0,208,846,1,0,0,0,210,848,1,0,
        0,0,212,850,1,0,0,0,214,852,1,0,0,0,216,854,1,0,0,0,218,856,1,0,
        0,0,220,858,1,0,0,0,222,224,3,2,1,0,223,222,1,0,0,0,223,224,1,0,
        0,0,224,225,1,0,0,0,225,226,5,0,0,1,226,1,1,0,0,0,227,231,3,4,2,
        0,228,230,5,2,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,
        0,231,232,1,0,0,0,232,243,1,0,0,0,233,231,1,0,0,0,234,236,3,4,2,
        0,235,237,5,2,0,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,1,0,0,
        0,238,239,1,0,0,0,239,240,1,0,0,0,240,241,3,2,1,0,241,243,1,0,0,
        0,242,227,1,0,0,0,242,234,1,0,0,0,243,3,1,0,0,0,244,249,3,6,3,0,
        245,249,3,8,4,0,246,249,3,10,5,0,247,249,3,12,6,0,248,244,1,0,0,
        0,248,245,1,0,0,0,248,246,1,0,0,0,248,247,1,0,0,0,249,5,1,0,0,0,
        250,275,3,102,51,0,251,275,3,108,54,0,252,275,3,110,55,0,253,275,
        3,112,56,0,254,275,3,114,57,0,255,275,3,116,58,0,256,275,3,118,59,
        0,257,275,3,126,63,0,258,275,3,120,60,0,259,275,3,122,61,0,260,275,
        3,128,64,0,261,275,3,130,65,0,262,275,3,132,66,0,263,275,3,134,67,
        0,264,275,3,138,69,0,265,275,3,140,70,0,266,275,3,142,71,0,267,275,
        3,144,72,0,268,275,3,146,73,0,269,275,3,148,74,0,270,275,3,150,75,
        0,271,275,3,158,79,0,272,275,3,160,80,0,273,275,3,162,81,0,274,250,
        1,0,0,0,274,251,1,0,0,0,274,252,1,0,0,0,274,253,1,0,0,0,274,254,
        1,0,0,0,274,255,1,0,0,0,274,256,1,0,0,0,274,257,1,0,0,0,274,258,
        1,0,0,0,274,259,1,0,0,0,274,260,1,0,0,0,274,261,1,0,0,0,274,262,
        1,0,0,0,274,263,1,0,0,0,274,264,1,0,0,0,274,265,1,0,0,0,274,266,
        1,0,0,0,274,267,1,0,0,0,274,268,1,0,0,0,274,269,1,0,0,0,274,270,
        1,0,0,0,274,271,1,0,0,0,274,272,1,0,0,0,274,273,1,0,0,0,275,7,1,
        0,0,0,276,297,3,164,82,0,277,297,3,170,85,0,278,297,3,172,86,0,279,
        297,3,174,87,0,280,297,3,176,88,0,281,297,3,178,89,0,282,297,3,180,
        90,0,283,297,3,182,91,0,284,297,3,184,92,0,285,297,3,186,93,0,286,
        297,3,188,94,0,287,297,3,190,95,0,288,297,3,192,96,0,289,297,3,194,
        97,0,290,297,3,196,98,0,291,297,3,198,99,0,292,297,3,200,100,0,293,
        297,3,202,101,0,294,297,3,204,102,0,295,297,3,206,103,0,296,276,
        1,0,0,0,296,277,1,0,0,0,296,278,1,0,0,0,296,279,1,0,0,0,296,280,
        1,0,0,0,296,281,1,0,0,0,296,282,1,0,0,0,296,283,1,0,0,0,296,284,
        1,0,0,0,296,285,1,0,0,0,296,286,1,0,0,0,296,287,1,0,0,0,296,288,
        1,0,0,0,296,289,1,0,0,0,296,290,1,0,0,0,296,291,1,0,0,0,296,292,
        1,0,0,0,296,293,1,0,0,0,296,294,1,0,0,0,296,295,1,0,0,0,297,9,1,
        0,0,0,298,321,3,50,25,0,299,321,3,54,27,0,300,321,3,56,28,0,301,
        321,3,58,29,0,302,321,3,60,30,0,303,321,3,62,31,0,304,321,3,64,32,
        0,305,321,3,66,33,0,306,321,3,68,34,0,307,321,3,70,35,0,308,321,
        3,72,36,0,309,321,3,74,37,0,310,321,3,78,39,0,311,321,3,80,40,0,
        312,321,3,86,43,0,313,321,3,88,44,0,314,321,3,90,45,0,315,321,3,
        92,46,0,316,321,3,94,47,0,317,321,3,96,48,0,318,321,3,98,49,0,319,
        321,3,100,50,0,320,298,1,0,0,0,320,299,1,0,0,0,320,300,1,0,0,0,320,
        301,1,0,0,0,320,302,1,0,0,0,320,303,1,0,0,0,320,304,1,0,0,0,320,
        305,1,0,0,0,320,306,1,0,0,0,320,307,1,0,0,0,320,308,1,0,0,0,320,
        309,1,0,0,0,320,310,1,0,0,0,320,311,1,0,0,0,320,312,1,0,0,0,320,
        313,1,0,0,0,320,314,1,0,0,0,320,315,1,0,0,0,320,316,1,0,0,0,320,
        317,1,0,0,0,320,318,1,0,0,0,320,319,1,0,0,0,321,11,1,0,0,0,322,340,
        3,14,7,0,323,340,3,16,8,0,324,340,3,18,9,0,325,340,3,20,10,0,326,
        340,3,22,11,0,327,340,3,24,12,0,328,340,3,28,14,0,329,340,3,30,15,
        0,330,340,3,32,16,0,331,340,3,34,17,0,332,340,3,36,18,0,333,340,
        3,38,19,0,334,340,3,40,20,0,335,340,3,42,21,0,336,340,3,44,22,0,
        337,340,3,46,23,0,338,340,3,48,24,0,339,322,1,0,0,0,339,323,1,0,
        0,0,339,324,1,0,0,0,339,325,1,0,0,0,339,326,1,0,0,0,339,327,1,0,
        0,0,339,328,1,0,0,0,339,329,1,0,0,0,339,330,1,0,0,0,339,331,1,0,
        0,0,339,332,1,0,0,0,339,333,1,0,0,0,339,334,1,0,0,0,339,335,1,0,
        0,0,339,336,1,0,0,0,339,337,1,0,0,0,339,338,1,0,0,0,340,13,1,0,0,
        0,341,342,5,93,0,0,342,344,3,216,108,0,343,345,3,210,105,0,344,343,
        1,0,0,0,345,346,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,15,1,
        0,0,0,348,349,5,94,0,0,349,350,3,216,108,0,350,17,1,0,0,0,351,353,
        5,95,0,0,352,354,3,216,108,0,353,352,1,0,0,0,354,355,1,0,0,0,355,
        353,1,0,0,0,355,356,1,0,0,0,356,19,1,0,0,0,357,358,5,96,0,0,358,
        360,3,210,105,0,359,361,3,216,108,0,360,359,1,0,0,0,361,362,1,0,
        0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,21,1,0,0,0,364,366,5,97,
        0,0,365,367,3,216,108,0,366,365,1,0,0,0,367,368,1,0,0,0,368,366,
        1,0,0,0,368,369,1,0,0,0,369,23,1,0,0,0,370,371,5,98,0,0,371,373,
        5,112,0,0,372,374,3,216,108,0,373,372,1,0,0,0,374,375,1,0,0,0,375,
        373,1,0,0,0,375,376,1,0,0,0,376,378,1,0,0,0,377,379,3,26,13,0,378,
        377,1,0,0,0,378,379,1,0,0,0,379,25,1,0,0,0,380,381,5,45,0,0,381,
        382,5,112,0,0,382,27,1,0,0,0,383,384,5,99,0,0,384,386,3,210,105,
        0,385,387,3,216,108,0,386,385,1,0,0,0,387,388,1,0,0,0,388,386,1,
        0,0,0,388,389,1,0,0,0,389,29,1,0,0,0,390,391,5,100,0,0,391,392,3,
        216,108,0,392,393,3,210,105,0,393,31,1,0,0,0,394,395,5,101,0,0,395,
        397,3,216,108,0,396,398,3,210,105,0,397,396,1,0,0,0,398,399,1,0,
        0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,33,1,0,0,0,401,402,5,102,
        0,0,402,403,3,216,108,0,403,35,1,0,0,0,404,405,5,103,0,0,405,406,
        3,216,108,0,406,407,3,216,108,0,407,37,1,0,0,0,408,409,5,104,0,0,
        409,411,3,216,108,0,410,412,5,112,0,0,411,410,1,0,0,0,411,412,1,
        0,0,0,412,39,1,0,0,0,413,414,5,105,0,0,414,416,3,216,108,0,415,417,
        3,208,104,0,416,415,1,0,0,0,416,417,1,0,0,0,417,41,1,0,0,0,418,419,
        5,106,0,0,419,421,3,216,108,0,420,422,3,210,105,0,421,420,1,0,0,
        0,422,423,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,43,1,0,0,0,
        425,426,5,107,0,0,426,427,3,216,108,0,427,429,3,208,104,0,428,430,
        3,152,76,0,429,428,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,433,
        3,154,77,0,432,431,1,0,0,0,432,433,1,0,0,0,433,45,1,0,0,0,434,436,
        5,108,0,0,435,437,3,216,108,0,436,435,1,0,0,0,437,438,1,0,0,0,438,
        436,1,0,0,0,438,439,1,0,0,0,439,47,1,0,0,0,440,441,5,109,0,0,441,
        443,3,210,105,0,442,444,3,216,108,0,443,442,1,0,0,0,444,445,1,0,
        0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,49,1,0,0,0,447,448,5,71,
        0,0,448,449,3,214,107,0,449,450,3,214,107,0,450,451,3,52,26,0,451,
        452,3,52,26,0,452,51,1,0,0,0,453,454,7,0,0,0,454,53,1,0,0,0,455,
        456,5,72,0,0,456,457,3,214,107,0,457,458,3,214,107,0,458,459,3,52,
        26,0,459,460,3,52,26,0,460,461,5,112,0,0,461,55,1,0,0,0,462,463,
        5,73,0,0,463,465,5,112,0,0,464,466,3,214,107,0,465,464,1,0,0,0,466,
        467,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,469,1,0,0,0,469,
        471,3,52,26,0,470,472,3,154,77,0,471,470,1,0,0,0,471,472,1,0,0,0,
        472,57,1,0,0,0,473,474,5,74,0,0,474,475,5,112,0,0,475,477,5,112,
        0,0,476,478,3,214,107,0,477,476,1,0,0,0,478,479,1,0,0,0,479,477,
        1,0,0,0,479,480,1,0,0,0,480,481,1,0,0,0,481,483,3,52,26,0,482,484,
        3,154,77,0,483,482,1,0,0,0,483,484,1,0,0,0,484,59,1,0,0,0,485,486,
        5,75,0,0,486,488,3,214,107,0,487,489,5,112,0,0,488,487,1,0,0,0,488,
        489,1,0,0,0,489,61,1,0,0,0,490,492,5,76,0,0,491,493,3,214,107,0,
        492,491,1,0,0,0,493,494,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,
        495,496,1,0,0,0,496,497,5,112,0,0,497,63,1,0,0,0,498,499,5,77,0,
        0,499,501,3,214,107,0,500,502,5,112,0,0,501,500,1,0,0,0,501,502,
        1,0,0,0,502,65,1,0,0,0,503,505,5,78,0,0,504,506,3,214,107,0,505,
        504,1,0,0,0,506,507,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,
        509,1,0,0,0,509,510,5,112,0,0,510,67,1,0,0,0,511,512,5,79,0,0,512,
        513,3,214,107,0,513,514,3,214,107,0,514,69,1,0,0,0,515,516,5,80,
        0,0,516,517,3,214,107,0,517,518,3,214,107,0,518,519,5,112,0,0,519,
        71,1,0,0,0,520,521,5,81,0,0,521,522,3,214,107,0,522,523,3,208,104,
        0,523,73,1,0,0,0,524,525,5,82,0,0,525,526,3,214,107,0,526,527,3,
        76,38,0,527,528,3,210,105,0,528,529,3,210,105,0,529,75,1,0,0,0,530,
        531,7,1,0,0,531,77,1,0,0,0,532,533,5,83,0,0,533,534,3,214,107,0,
        534,79,1,0,0,0,535,536,5,84,0,0,536,537,3,214,107,0,537,539,3,210,
        105,0,538,540,3,82,41,0,539,538,1,0,0,0,539,540,1,0,0,0,540,542,
        1,0,0,0,541,543,3,154,77,0,542,541,1,0,0,0,542,543,1,0,0,0,543,545,
        1,0,0,0,544,546,3,84,42,0,545,544,1,0,0,0,545,546,1,0,0,0,546,81,
        1,0,0,0,547,548,5,43,0,0,548,549,3,208,104,0,549,83,1,0,0,0,550,
        551,5,44,0,0,551,552,5,112,0,0,552,85,1,0,0,0,553,554,5,85,0,0,554,
        556,3,214,107,0,555,557,3,210,105,0,556,555,1,0,0,0,557,558,1,0,
        0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,87,1,0,0,0,560,561,5,86,
        0,0,561,563,3,214,107,0,562,564,3,210,105,0,563,562,1,0,0,0,564,
        565,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,89,1,0,0,0,567,568,
        5,87,0,0,568,570,3,214,107,0,569,571,3,210,105,0,570,569,1,0,0,0,
        571,572,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,91,1,0,0,0,574,
        575,5,88,0,0,575,577,3,214,107,0,576,578,3,210,105,0,577,576,1,0,
        0,0,578,579,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,93,1,0,0,
        0,581,582,5,89,0,0,582,583,3,214,107,0,583,584,3,208,104,0,584,585,
        3,208,104,0,585,95,1,0,0,0,586,587,5,90,0,0,587,588,3,214,107,0,
        588,589,3,208,104,0,589,590,3,210,105,0,590,97,1,0,0,0,591,592,5,
        91,0,0,592,593,3,214,107,0,593,594,3,208,104,0,594,595,3,210,105,
        0,595,99,1,0,0,0,596,597,5,92,0,0,597,598,3,214,107,0,598,599,3,
        208,104,0,599,600,3,208,104,0,600,101,1,0,0,0,601,602,5,3,0,0,602,
        603,3,218,109,0,603,605,3,210,105,0,604,606,3,104,52,0,605,604,1,
        0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,609,5,5,0,0,608,607,1,
        0,0,0,608,609,1,0,0,0,609,103,1,0,0,0,610,611,5,4,0,0,611,612,3,
        106,53,0,612,105,1,0,0,0,613,614,5,112,0,0,614,107,1,0,0,0,615,617,
        5,6,0,0,616,618,3,218,109,0,617,616,1,0,0,0,618,619,1,0,0,0,619,
        617,1,0,0,0,619,620,1,0,0,0,620,109,1,0,0,0,621,623,5,7,0,0,622,
        624,3,218,109,0,623,622,1,0,0,0,624,625,1,0,0,0,625,623,1,0,0,0,
        625,626,1,0,0,0,626,111,1,0,0,0,627,628,5,8,0,0,628,629,3,218,109,
        0,629,113,1,0,0,0,630,632,5,9,0,0,631,633,3,218,109,0,632,631,1,
        0,0,0,633,634,1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,115,1,
        0,0,0,636,637,5,10,0,0,637,638,3,218,109,0,638,640,3,208,104,0,639,
        641,3,124,62,0,640,639,1,0,0,0,640,641,1,0,0,0,641,117,1,0,0,0,642,
        643,5,15,0,0,643,644,3,218,109,0,644,646,3,208,104,0,645,647,3,124,
        62,0,646,645,1,0,0,0,646,647,1,0,0,0,647,119,1,0,0,0,648,649,5,17,
        0,0,649,650,3,218,109,0,650,652,3,208,104,0,651,653,3,124,62,0,652,
        651,1,0,0,0,652,653,1,0,0,0,653,121,1,0,0,0,654,655,5,18,0,0,655,
        656,3,218,109,0,656,658,3,208,104,0,657,659,3,124,62,0,658,657,1,
        0,0,0,658,659,1,0,0,0,659,123,1,0,0,0,660,661,7,2,0,0,661,125,1,
        0,0,0,662,663,5,16,0,0,663,664,3,218,109,0,664,127,1,0,0,0,665,666,
        5,19,0,0,666,667,3,218,109,0,667,129,1,0,0,0,668,669,5,20,0,0,669,
        670,3,220,110,0,670,131,1,0,0,0,671,672,5,21,0,0,672,673,3,218,109,
        0,673,674,3,106,53,0,674,133,1,0,0,0,675,676,5,22,0,0,676,677,3,
        136,68,0,677,678,3,218,109,0,678,135,1,0,0,0,679,680,7,3,0,0,680,
        137,1,0,0,0,681,682,5,27,0,0,682,683,3,218,109,0,683,139,1,0,0,0,
        684,685,5,28,0,0,685,686,3,218,109,0,686,141,1,0,0,0,687,688,5,29,
        0,0,688,689,3,218,109,0,689,143,1,0,0,0,690,691,5,30,0,0,691,145,
        1,0,0,0,692,693,5,31,0,0,693,694,3,218,109,0,694,695,3,210,105,0,
        695,147,1,0,0,0,696,697,5,32,0,0,697,698,3,218,109,0,698,699,3,210,
        105,0,699,149,1,0,0,0,700,701,5,33,0,0,701,703,3,208,104,0,702,704,
        3,152,76,0,703,702,1,0,0,0,703,704,1,0,0,0,704,706,1,0,0,0,705,707,
        3,154,77,0,706,705,1,0,0,0,706,707,1,0,0,0,707,709,1,0,0,0,708,710,
        3,156,78,0,709,708,1,0,0,0,709,710,1,0,0,0,710,151,1,0,0,0,711,712,
        5,34,0,0,712,713,3,220,110,0,713,153,1,0,0,0,714,715,5,35,0,0,715,
        716,5,112,0,0,716,155,1,0,0,0,717,718,5,36,0,0,718,719,3,210,105,
        0,719,157,1,0,0,0,720,722,5,37,0,0,721,723,3,218,109,0,722,721,1,
        0,0,0,723,724,1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,159,1,
        0,0,0,726,727,5,36,0,0,727,728,3,218,109,0,728,161,1,0,0,0,729,730,
        5,38,0,0,730,731,5,112,0,0,731,732,5,112,0,0,732,163,1,0,0,0,733,
        734,5,46,0,0,734,735,3,212,106,0,735,737,3,210,105,0,736,738,3,166,
        83,0,737,736,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,741,5,47,
        0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,744,1,0,0,0,742,745,3,168,
        84,0,743,745,5,56,0,0,744,742,1,0,0,0,744,743,1,0,0,0,744,745,1,
        0,0,0,745,165,1,0,0,0,746,747,7,4,0,0,747,167,1,0,0,0,748,749,5,
        52,0,0,749,757,5,112,0,0,750,751,5,53,0,0,751,757,5,112,0,0,752,
        753,5,54,0,0,753,757,5,112,0,0,754,755,5,55,0,0,755,757,5,112,0,
        0,756,748,1,0,0,0,756,750,1,0,0,0,756,752,1,0,0,0,756,754,1,0,0,
        0,757,169,1,0,0,0,758,759,5,47,0,0,759,760,3,212,106,0,760,171,1,
        0,0,0,761,762,5,48,0,0,762,763,3,212,106,0,763,173,1,0,0,0,764,765,
        5,49,0,0,765,766,3,212,106,0,766,767,3,208,104,0,767,175,1,0,0,0,
        768,769,5,50,0,0,769,770,3,212,106,0,770,177,1,0,0,0,771,772,5,51,
        0,0,772,773,3,212,106,0,773,774,3,208,104,0,774,179,1,0,0,0,775,
        776,5,57,0,0,776,777,3,212,106,0,777,778,3,210,105,0,778,181,1,0,
        0,0,779,780,5,58,0,0,780,781,3,212,106,0,781,183,1,0,0,0,782,783,
        5,59,0,0,783,786,3,212,106,0,784,787,3,168,84,0,785,787,5,27,0,0,
        786,784,1,0,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,185,1,0,0,0,
        788,789,5,60,0,0,789,790,3,212,106,0,790,791,3,208,104,0,791,792,
        3,208,104,0,792,187,1,0,0,0,793,794,5,61,0,0,794,795,3,212,106,0,
        795,796,3,210,105,0,796,189,1,0,0,0,797,799,5,62,0,0,798,800,3,212,
        106,0,799,798,1,0,0,0,800,801,1,0,0,0,801,799,1,0,0,0,801,802,1,
        0,0,0,802,191,1,0,0,0,803,807,5,63,0,0,804,805,3,212,106,0,805,806,
        3,210,105,0,806,808,1,0,0,0,807,804,1,0,0,0,808,809,1,0,0,0,809,
        807,1,0,0,0,809,810,1,0,0,0,810,193,1,0,0,0,811,815,5,64,0,0,812,
        813,3,212,106,0,813,814,3,210,105,0,814,816,1,0,0,0,815,812,1,0,
        0,0,816,817,1,0,0,0,817,815,1,0,0,0,817,818,1,0,0,0,818,195,1,0,
        0,0,819,820,5,65,0,0,820,821,3,212,106,0,821,822,5,112,0,0,822,823,
        3,210,105,0,823,197,1,0,0,0,824,825,5,66,0,0,825,826,3,212,106,0,
        826,827,5,112,0,0,827,828,3,210,105,0,828,199,1,0,0,0,829,830,5,
        67,0,0,830,831,3,212,106,0,831,832,3,210,105,0,832,201,1,0,0,0,833,
        834,5,68,0,0,834,835,3,212,106,0,835,836,5,112,0,0,836,837,3,210,
        105,0,837,203,1,0,0,0,838,839,5,69,0,0,839,840,3,212,106,0,840,205,
        1,0,0,0,841,842,5,70,0,0,842,843,3,212,106,0,843,844,3,208,104,0,
        844,845,3,208,104,0,845,207,1,0,0,0,846,847,7,5,0,0,847,209,1,0,
        0,0,848,849,7,6,0,0,849,211,1,0,0,0,850,851,3,210,105,0,851,213,
        1,0,0,0,852,853,3,210,105,0,853,215,1,0,0,0,854,855,3,210,105,0,
        855,217,1,0,0,0,856,857,3,210,105,0,857,219,1,0,0,0,858,859,3,210,
        105,0,859,221,1,0,0,0,60,223,231,238,242,248,274,296,320,339,346,
        355,362,368,375,378,388,399,411,416,423,429,432,438,445,467,471,
        479,483,488,494,501,507,539,542,545,558,565,572,579,605,608,619,
        625,634,640,646,652,658,703,706,709,724,737,740,744,756,786,801,
        809,817
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!RedisParser.__ATN) {
            RedisParser.__ATN = new antlr.ATNDeserializer().deserialize(RedisParser._serializedATN);
        }

        return RedisParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(RedisParser.literalNames, RedisParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return RedisParser.vocabulary;
    }

    private static readonly decisionsToDFA = RedisParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(RedisParser.EOF, 0)!;
    }
    public commands(): CommandsContext | null {
        return this.getRuleContext(0, CommandsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_root;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRoot) {
            return visitor.visitRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public command(): CommandContext {
        return this.getRuleContext(0, CommandContext)!;
    }
    public NEWLINE(): antlr.TerminalNode[];
    public NEWLINE(i: number): antlr.TerminalNode | null;
    public NEWLINE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(RedisParser.NEWLINE);
    	} else {
    		return this.getToken(RedisParser.NEWLINE, i);
    	}
    }
    public commands(): CommandsContext | null {
        return this.getRuleContext(0, CommandsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_commands;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitCommands) {
            return visitor.visitCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commonCommand(): CommonCommandContext | null {
        return this.getRuleContext(0, CommonCommandContext);
    }
    public stringCommand(): StringCommandContext | null {
        return this.getRuleContext(0, StringCommandContext);
    }
    public listCommand(): ListCommandContext | null {
        return this.getRuleContext(0, ListCommandContext);
    }
    public setCommand(): SetCommandContext | null {
        return this.getRuleContext(0, SetCommandContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_command;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitCommand) {
            return visitor.visitCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public copyCommand(): CopyCommandContext | null {
        return this.getRuleContext(0, CopyCommandContext);
    }
    public deleteCommand(): DeleteCommandContext | null {
        return this.getRuleContext(0, DeleteCommandContext);
    }
    public unlinkCommand(): UnlinkCommandContext | null {
        return this.getRuleContext(0, UnlinkCommandContext);
    }
    public dumpCommand(): DumpCommandContext | null {
        return this.getRuleContext(0, DumpCommandContext);
    }
    public existsCommand(): ExistsCommandContext | null {
        return this.getRuleContext(0, ExistsCommandContext);
    }
    public expireCommand(): ExpireCommandContext | null {
        return this.getRuleContext(0, ExpireCommandContext);
    }
    public expireAtCommand(): ExpireAtCommandContext | null {
        return this.getRuleContext(0, ExpireAtCommandContext);
    }
    public expireTimeCommand(): ExpireTimeCommandContext | null {
        return this.getRuleContext(0, ExpireTimeCommandContext);
    }
    public pExpireCommand(): PExpireCommandContext | null {
        return this.getRuleContext(0, PExpireCommandContext);
    }
    public pExpireAtCommand(): PExpireAtCommandContext | null {
        return this.getRuleContext(0, PExpireAtCommandContext);
    }
    public pExpireTimeCommand(): PExpireTimeCommandContext | null {
        return this.getRuleContext(0, PExpireTimeCommandContext);
    }
    public keysCommand(): KeysCommandContext | null {
        return this.getRuleContext(0, KeysCommandContext);
    }
    public moveCommand(): MoveCommandContext | null {
        return this.getRuleContext(0, MoveCommandContext);
    }
    public objectCommand(): ObjectCommandContext | null {
        return this.getRuleContext(0, ObjectCommandContext);
    }
    public persistCommand(): PersistCommandContext | null {
        return this.getRuleContext(0, PersistCommandContext);
    }
    public ttlCommand(): TtlCommandContext | null {
        return this.getRuleContext(0, TtlCommandContext);
    }
    public pTtlCommand(): PTtlCommandContext | null {
        return this.getRuleContext(0, PTtlCommandContext);
    }
    public randomKeyCommand(): RandomKeyCommandContext | null {
        return this.getRuleContext(0, RandomKeyCommandContext);
    }
    public renameCommand(): RenameCommandContext | null {
        return this.getRuleContext(0, RenameCommandContext);
    }
    public renameNxCommand(): RenameNxCommandContext | null {
        return this.getRuleContext(0, RenameNxCommandContext);
    }
    public scanCommand(): ScanCommandContext | null {
        return this.getRuleContext(0, ScanCommandContext);
    }
    public touchCommand(): TouchCommandContext | null {
        return this.getRuleContext(0, TouchCommandContext);
    }
    public typeCommand(): TypeCommandContext | null {
        return this.getRuleContext(0, TypeCommandContext);
    }
    public waitCommand(): WaitCommandContext | null {
        return this.getRuleContext(0, WaitCommandContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_commonCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitCommonCommand) {
            return visitor.visitCommonCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringSetCommand(): StringSetCommandContext | null {
        return this.getRuleContext(0, StringSetCommandContext);
    }
    public getCommand(): GetCommandContext | null {
        return this.getRuleContext(0, GetCommandContext);
    }
    public incrementCommand(): IncrementCommandContext | null {
        return this.getRuleContext(0, IncrementCommandContext);
    }
    public incrementByCommand(): IncrementByCommandContext | null {
        return this.getRuleContext(0, IncrementByCommandContext);
    }
    public decrementCommand(): DecrementCommandContext | null {
        return this.getRuleContext(0, DecrementCommandContext);
    }
    public decrementByCommand(): DecrementByCommandContext | null {
        return this.getRuleContext(0, DecrementByCommandContext);
    }
    public appendCommand(): AppendCommandContext | null {
        return this.getRuleContext(0, AppendCommandContext);
    }
    public getDeleteCommand(): GetDeleteCommandContext | null {
        return this.getRuleContext(0, GetDeleteCommandContext);
    }
    public getExCommand(): GetExCommandContext | null {
        return this.getRuleContext(0, GetExCommandContext);
    }
    public getRangeCommand(): GetRangeCommandContext | null {
        return this.getRuleContext(0, GetRangeCommandContext);
    }
    public getSetCommand(): GetSetCommandContext | null {
        return this.getRuleContext(0, GetSetCommandContext);
    }
    public mGetCommand(): MGetCommandContext | null {
        return this.getRuleContext(0, MGetCommandContext);
    }
    public mSetCommand(): MSetCommandContext | null {
        return this.getRuleContext(0, MSetCommandContext);
    }
    public mSetNxCommand(): MSetNxCommandContext | null {
        return this.getRuleContext(0, MSetNxCommandContext);
    }
    public pSetExCommand(): PSetExCommandContext | null {
        return this.getRuleContext(0, PSetExCommandContext);
    }
    public setExCommand(): SetExCommandContext | null {
        return this.getRuleContext(0, SetExCommandContext);
    }
    public setNxCommand(): SetNxCommandContext | null {
        return this.getRuleContext(0, SetNxCommandContext);
    }
    public setRangeCommand(): SetRangeCommandContext | null {
        return this.getRuleContext(0, SetRangeCommandContext);
    }
    public stringLengthCommand(): StringLengthCommandContext | null {
        return this.getRuleContext(0, StringLengthCommandContext);
    }
    public substringCommand(): SubstringCommandContext | null {
        return this.getRuleContext(0, SubstringCommandContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_stringCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitStringCommand) {
            return visitor.visitStringCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lmoveCommand(): LmoveCommandContext | null {
        return this.getRuleContext(0, LmoveCommandContext);
    }
    public blmoveCommand(): BlmoveCommandContext | null {
        return this.getRuleContext(0, BlmoveCommandContext);
    }
    public lmpopCommand(): LmpopCommandContext | null {
        return this.getRuleContext(0, LmpopCommandContext);
    }
    public blmpopCommand(): BlmpopCommandContext | null {
        return this.getRuleContext(0, BlmpopCommandContext);
    }
    public lpopCommand(): LpopCommandContext | null {
        return this.getRuleContext(0, LpopCommandContext);
    }
    public blpopCommand(): BlpopCommandContext | null {
        return this.getRuleContext(0, BlpopCommandContext);
    }
    public rpopCommand(): RpopCommandContext | null {
        return this.getRuleContext(0, RpopCommandContext);
    }
    public brpopCommand(): BrpopCommandContext | null {
        return this.getRuleContext(0, BrpopCommandContext);
    }
    public rpopLpushCommand(): RpopLpushCommandContext | null {
        return this.getRuleContext(0, RpopLpushCommandContext);
    }
    public brpopLpushCommand(): BrpopLpushCommandContext | null {
        return this.getRuleContext(0, BrpopLpushCommandContext);
    }
    public lindexCommand(): LindexCommandContext | null {
        return this.getRuleContext(0, LindexCommandContext);
    }
    public linsertCommand(): LinsertCommandContext | null {
        return this.getRuleContext(0, LinsertCommandContext);
    }
    public llenCommand(): LlenCommandContext | null {
        return this.getRuleContext(0, LlenCommandContext);
    }
    public lposCommand(): LposCommandContext | null {
        return this.getRuleContext(0, LposCommandContext);
    }
    public lpushCommand(): LpushCommandContext | null {
        return this.getRuleContext(0, LpushCommandContext);
    }
    public lpushxCommand(): LpushxCommandContext | null {
        return this.getRuleContext(0, LpushxCommandContext);
    }
    public rpushCommand(): RpushCommandContext | null {
        return this.getRuleContext(0, RpushCommandContext);
    }
    public rpushxCommand(): RpushxCommandContext | null {
        return this.getRuleContext(0, RpushxCommandContext);
    }
    public lrangeCommand(): LrangeCommandContext | null {
        return this.getRuleContext(0, LrangeCommandContext);
    }
    public lremCommand(): LremCommandContext | null {
        return this.getRuleContext(0, LremCommandContext);
    }
    public lsetCommand(): LsetCommandContext | null {
        return this.getRuleContext(0, LsetCommandContext);
    }
    public ltrimCommand(): LtrimCommandContext | null {
        return this.getRuleContext(0, LtrimCommandContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_listCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitListCommand) {
            return visitor.visitListCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public saddCommand(): SaddCommandContext | null {
        return this.getRuleContext(0, SaddCommandContext);
    }
    public scardCommand(): ScardCommandContext | null {
        return this.getRuleContext(0, ScardCommandContext);
    }
    public sdiffCommand(): SdiffCommandContext | null {
        return this.getRuleContext(0, SdiffCommandContext);
    }
    public sdiffstoreCommand(): SdiffstoreCommandContext | null {
        return this.getRuleContext(0, SdiffstoreCommandContext);
    }
    public sinterCommand(): SinterCommandContext | null {
        return this.getRuleContext(0, SinterCommandContext);
    }
    public sintercardCommand(): SintercardCommandContext | null {
        return this.getRuleContext(0, SintercardCommandContext);
    }
    public sinterstoreCommand(): SinterstoreCommandContext | null {
        return this.getRuleContext(0, SinterstoreCommandContext);
    }
    public sismemberCommand(): SismemberCommandContext | null {
        return this.getRuleContext(0, SismemberCommandContext);
    }
    public smismemberCommand(): SmismemberCommandContext | null {
        return this.getRuleContext(0, SmismemberCommandContext);
    }
    public smembersCommand(): SmembersCommandContext | null {
        return this.getRuleContext(0, SmembersCommandContext);
    }
    public smoveCommand(): SmoveCommandContext | null {
        return this.getRuleContext(0, SmoveCommandContext);
    }
    public spopCommand(): SpopCommandContext | null {
        return this.getRuleContext(0, SpopCommandContext);
    }
    public srandmemberCommand(): SrandmemberCommandContext | null {
        return this.getRuleContext(0, SrandmemberCommandContext);
    }
    public sremCommand(): SremCommandContext | null {
        return this.getRuleContext(0, SremCommandContext);
    }
    public sscanComman(): SscanCommanContext | null {
        return this.getRuleContext(0, SscanCommanContext);
    }
    public sunionCommand(): SunionCommandContext | null {
        return this.getRuleContext(0, SunionCommandContext);
    }
    public sunionstoreCommand(): SunionstoreCommandContext | null {
        return this.getRuleContext(0, SunionstoreCommandContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_setCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSetCommand) {
            return visitor.visitSetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SaddCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SADD(): antlr.TerminalNode {
        return this.getToken(RedisParser.SADD, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_saddCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSaddCommand) {
            return visitor.visitSaddCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScardCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SCARD(): antlr.TerminalNode {
        return this.getToken(RedisParser.SCARD, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_scardCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitScardCommand) {
            return visitor.visitScardCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SdiffCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SDIFF(): antlr.TerminalNode {
        return this.getToken(RedisParser.SDIFF, 0)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sdiffCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSdiffCommand) {
            return visitor.visitSdiffCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SdiffstoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SDIFFSTORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.SDIFFSTORE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sdiffstoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSdiffstoreCommand) {
            return visitor.visitSdiffstoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SinterCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SINTER(): antlr.TerminalNode {
        return this.getToken(RedisParser.SINTER, 0)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sinterCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSinterCommand) {
            return visitor.visitSinterCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SintercardCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SINTERCARD(): antlr.TerminalNode {
        return this.getToken(RedisParser.SINTERCARD, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sintercardCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSintercardCommand) {
            return visitor.visitSintercardCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(RedisParser.LIMIT, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_limitClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SinterstoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SINTERSTORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.SINTERSTORE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sinterstoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSinterstoreCommand) {
            return visitor.visitSinterstoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SismemberCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SISMEMBER(): antlr.TerminalNode {
        return this.getToken(RedisParser.SISMEMBER, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sismemberCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSismemberCommand) {
            return visitor.visitSismemberCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SmismemberCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SMISMEMBER(): antlr.TerminalNode {
        return this.getToken(RedisParser.SMISMEMBER, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_smismemberCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSmismemberCommand) {
            return visitor.visitSmismemberCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SmembersCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SMEMBERS(): antlr.TerminalNode {
        return this.getToken(RedisParser.SMEMBERS, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_smembersCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSmembersCommand) {
            return visitor.visitSmembersCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SmoveCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SMOVE(): antlr.TerminalNode {
        return this.getToken(RedisParser.SMOVE, 0)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_smoveCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSmoveCommand) {
            return visitor.visitSmoveCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.SPOP, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_spopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSpopCommand) {
            return visitor.visitSpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SrandmemberCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SRANDMEMBER(): antlr.TerminalNode {
        return this.getToken(RedisParser.SRANDMEMBER, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public decimal(): DecimalContext | null {
        return this.getRuleContext(0, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_srandmemberCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSrandmemberCommand) {
            return visitor.visitSrandmemberCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SremCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SREM(): antlr.TerminalNode {
        return this.getToken(RedisParser.SREM, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sremCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSremCommand) {
            return visitor.visitSremCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SscanCommanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SSCAN(): antlr.TerminalNode {
        return this.getToken(RedisParser.SSCAN, 0)!;
    }
    public setKeyName(): SetKeyNameContext {
        return this.getRuleContext(0, SetKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public matchClause(): MatchClauseContext | null {
        return this.getRuleContext(0, MatchClauseContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sscanComman;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSscanComman) {
            return visitor.visitSscanComman(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SunionCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUNION(): antlr.TerminalNode {
        return this.getToken(RedisParser.SUNION, 0)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sunionCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSunionCommand) {
            return visitor.visitSunionCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SunionstoreCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUNIONSTORE(): antlr.TerminalNode {
        return this.getToken(RedisParser.SUNIONSTORE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public setKeyName(): SetKeyNameContext[];
    public setKeyName(i: number): SetKeyNameContext | null;
    public setKeyName(i?: number): SetKeyNameContext[] | SetKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetKeyNameContext);
        }

        return this.getRuleContext(i, SetKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_sunionstoreCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSunionstoreCommand) {
            return visitor.visitSunionstoreCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LmoveCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LMOVE(): antlr.TerminalNode {
        return this.getToken(RedisParser.LMOVE, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public leftOrRightClause(): LeftOrRightClauseContext[];
    public leftOrRightClause(i: number): LeftOrRightClauseContext | null;
    public leftOrRightClause(i?: number): LeftOrRightClauseContext[] | LeftOrRightClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LeftOrRightClauseContext);
        }

        return this.getRuleContext(i, LeftOrRightClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lmoveCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLmoveCommand) {
            return visitor.visitLmoveCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LeftOrRightClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.RIGHT, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_leftOrRightClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLeftOrRightClause) {
            return visitor.visitLeftOrRightClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BlmoveCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BLMOVE(): antlr.TerminalNode {
        return this.getToken(RedisParser.BLMOVE, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public leftOrRightClause(): LeftOrRightClauseContext[];
    public leftOrRightClause(i: number): LeftOrRightClauseContext | null;
    public leftOrRightClause(i?: number): LeftOrRightClauseContext[] | LeftOrRightClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LeftOrRightClauseContext);
        }

        return this.getRuleContext(i, LeftOrRightClauseContext);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_blmoveCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBlmoveCommand) {
            return visitor.visitBlmoveCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LmpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LMPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.LMPOP, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public leftOrRightClause(): LeftOrRightClauseContext {
        return this.getRuleContext(0, LeftOrRightClauseContext)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lmpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLmpopCommand) {
            return visitor.visitLmpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BlmpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BLMPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.BLMPOP, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode[];
    public POSITIVE_DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public POSITIVE_DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(RedisParser.POSITIVE_DECIMAL_LITERAL);
    	} else {
    		return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, i);
    	}
    }
    public leftOrRightClause(): LeftOrRightClauseContext {
        return this.getRuleContext(0, LeftOrRightClauseContext)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_blmpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBlmpopCommand) {
            return visitor.visitBlmpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.LPOP, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLpopCommand) {
            return visitor.visitLpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BlpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BLPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.BLPOP, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_blpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBlpopCommand) {
            return visitor.visitBlpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.RPOP, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_rpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRpopCommand) {
            return visitor.visitRpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BrpopCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BRPOP(): antlr.TerminalNode {
        return this.getToken(RedisParser.BRPOP, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_brpopCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBrpopCommand) {
            return visitor.visitBrpopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpopLpushCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RPOPLPUSH(): antlr.TerminalNode {
        return this.getToken(RedisParser.RPOPLPUSH, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_rpopLpushCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRpopLpushCommand) {
            return visitor.visitRpopLpushCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BrpopLpushCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BRPOPLPUSH(): antlr.TerminalNode {
        return this.getToken(RedisParser.BRPOPLPUSH, 0)!;
    }
    public listKeyName(): ListKeyNameContext[];
    public listKeyName(i: number): ListKeyNameContext | null;
    public listKeyName(i?: number): ListKeyNameContext[] | ListKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListKeyNameContext);
        }

        return this.getRuleContext(i, ListKeyNameContext);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_brpopLpushCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBrpopLpushCommand) {
            return visitor.visitBrpopLpushCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LindexCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LINDEX(): antlr.TerminalNode {
        return this.getToken(RedisParser.LINDEX, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lindexCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLindexCommand) {
            return visitor.visitLindexCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LinsertCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LINSERT(): antlr.TerminalNode {
        return this.getToken(RedisParser.LINSERT, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public beforeOrAfterClause(): BeforeOrAfterClauseContext {
        return this.getRuleContext(0, BeforeOrAfterClauseContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_linsertCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLinsertCommand) {
            return visitor.visitLinsertCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BeforeOrAfterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.BEFORE, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.AFTER, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_beforeOrAfterClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitBeforeOrAfterClause) {
            return visitor.visitBeforeOrAfterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LlenCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LLEN(): antlr.TerminalNode {
        return this.getToken(RedisParser.LLEN, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_llenCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLlenCommand) {
            return visitor.visitLlenCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LposCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPOS(): antlr.TerminalNode {
        return this.getToken(RedisParser.LPOS, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public rankClause(): RankClauseContext | null {
        return this.getRuleContext(0, RankClauseContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public maxLenClause(): MaxLenClauseContext | null {
        return this.getRuleContext(0, MaxLenClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lposCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLposCommand) {
            return visitor.visitLposCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RankClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANK(): antlr.TerminalNode {
        return this.getToken(RedisParser.RANK, 0)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_rankClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRankClause) {
            return visitor.visitRankClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaxLenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAXLEN(): antlr.TerminalNode {
        return this.getToken(RedisParser.MAXLEN, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_maxLenClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMaxLenClause) {
            return visitor.visitMaxLenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LpushCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPUSH(): antlr.TerminalNode {
        return this.getToken(RedisParser.LPUSH, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lpushCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLpushCommand) {
            return visitor.visitLpushCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LpushxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPUSHX(): antlr.TerminalNode {
        return this.getToken(RedisParser.LPUSHX, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lpushxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLpushxCommand) {
            return visitor.visitLpushxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpushCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RPUSH(): antlr.TerminalNode {
        return this.getToken(RedisParser.RPUSH, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_rpushCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRpushCommand) {
            return visitor.visitRpushCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpushxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RPUSHX(): antlr.TerminalNode {
        return this.getToken(RedisParser.RPUSHX, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_rpushxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRpushxCommand) {
            return visitor.visitRpushxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LrangeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LRANGE(): antlr.TerminalNode {
        return this.getToken(RedisParser.LRANGE, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lrangeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLrangeCommand) {
            return visitor.visitLrangeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LremCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LREM(): antlr.TerminalNode {
        return this.getToken(RedisParser.LREM, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lremCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLremCommand) {
            return visitor.visitLremCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LsetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LSET(): antlr.TerminalNode {
        return this.getToken(RedisParser.LSET, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_lsetCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLsetCommand) {
            return visitor.visitLsetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LtrimCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LTRIM(): antlr.TerminalNode {
        return this.getToken(RedisParser.LTRIM, 0)!;
    }
    public listKeyName(): ListKeyNameContext {
        return this.getRuleContext(0, ListKeyNameContext)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_ltrimCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitLtrimCommand) {
            return visitor.visitLtrimCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopyCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COPY(): antlr.TerminalNode {
        return this.getToken(RedisParser.COPY, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public dbClause(): DbClauseContext | null {
        return this.getRuleContext(0, DbClauseContext);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.REPLACE, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_copyCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitCopyCommand) {
            return visitor.visitCopyCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DB(): antlr.TerminalNode {
        return this.getToken(RedisParser.DB, 0)!;
    }
    public databaseName(): DatabaseNameContext {
        return this.getRuleContext(0, DatabaseNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_dbClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDbClause) {
            return visitor.visitDbClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_databaseName;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseName) {
            return visitor.visitDatabaseName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEL(): antlr.TerminalNode {
        return this.getToken(RedisParser.DEL, 0)!;
    }
    public keyName(): KeyNameContext[];
    public keyName(i: number): KeyNameContext | null;
    public keyName(i?: number): KeyNameContext[] | KeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyNameContext);
        }

        return this.getRuleContext(i, KeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_deleteCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteCommand) {
            return visitor.visitDeleteCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlinkCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNLINK(): antlr.TerminalNode {
        return this.getToken(RedisParser.UNLINK, 0)!;
    }
    public keyName(): KeyNameContext[];
    public keyName(i: number): KeyNameContext | null;
    public keyName(i?: number): KeyNameContext[] | KeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyNameContext);
        }

        return this.getRuleContext(i, KeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_unlinkCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitUnlinkCommand) {
            return visitor.visitUnlinkCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DumpCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DUMP(): antlr.TerminalNode {
        return this.getToken(RedisParser.DUMP, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_dumpCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDumpCommand) {
            return visitor.visitDumpCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExistsCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(RedisParser.EXISTS, 0)!;
    }
    public keyName(): KeyNameContext[];
    public keyName(i: number): KeyNameContext | null;
    public keyName(i?: number): KeyNameContext[] | KeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyNameContext);
        }

        return this.getRuleContext(i, KeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_existsCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExistsCommand) {
            return visitor.visitExistsCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpireCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPIRE(): antlr.TerminalNode {
        return this.getToken(RedisParser.EXPIRE, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public expireOptions(): ExpireOptionsContext | null {
        return this.getRuleContext(0, ExpireOptionsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_expireCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExpireCommand) {
            return visitor.visitExpireCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpireAtCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPIREAT(): antlr.TerminalNode {
        return this.getToken(RedisParser.EXPIREAT, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public expireOptions(): ExpireOptionsContext | null {
        return this.getRuleContext(0, ExpireOptionsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_expireAtCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExpireAtCommand) {
            return visitor.visitExpireAtCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PExpireCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PEXPIRE(): antlr.TerminalNode {
        return this.getToken(RedisParser.PEXPIRE, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public expireOptions(): ExpireOptionsContext | null {
        return this.getRuleContext(0, ExpireOptionsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_pExpireCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPExpireCommand) {
            return visitor.visitPExpireCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PExpireAtCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PEXPIREAT(): antlr.TerminalNode {
        return this.getToken(RedisParser.PEXPIREAT, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public expireOptions(): ExpireOptionsContext | null {
        return this.getRuleContext(0, ExpireOptionsContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_pExpireAtCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPExpireAtCommand) {
            return visitor.visitPExpireAtCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpireOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.NX, 0);
    }
    public XX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.XX, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.GT, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.LT, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_expireOptions;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExpireOptions) {
            return visitor.visitExpireOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpireTimeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPIRETIME(): antlr.TerminalNode {
        return this.getToken(RedisParser.EXPIRETIME, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_expireTimeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExpireTimeCommand) {
            return visitor.visitExpireTimeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PExpireTimeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PEXPIRETIME(): antlr.TerminalNode {
        return this.getToken(RedisParser.PEXPIRETIME, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_pExpireTimeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPExpireTimeCommand) {
            return visitor.visitPExpireTimeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeysCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEYS(): antlr.TerminalNode {
        return this.getToken(RedisParser.KEYS, 0)!;
    }
    public keyPattern(): KeyPatternContext {
        return this.getRuleContext(0, KeyPatternContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_keysCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitKeysCommand) {
            return visitor.visitKeysCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MoveCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MOVE(): antlr.TerminalNode {
        return this.getToken(RedisParser.MOVE, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public databaseName(): DatabaseNameContext {
        return this.getRuleContext(0, DatabaseNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_moveCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMoveCommand) {
            return visitor.visitMoveCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(RedisParser.OBJECT, 0)!;
    }
    public objectOptions(): ObjectOptionsContext {
        return this.getRuleContext(0, ObjectOptionsContext)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_objectCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitObjectCommand) {
            return visitor.visitObjectCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENCODING(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.ENCODING, 0);
    }
    public FREQ(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.FREQ, 0);
    }
    public IDLETIME(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.IDLETIME, 0);
    }
    public REFCOUNT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.REFCOUNT, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_objectOptions;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitObjectOptions) {
            return visitor.visitObjectOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PersistCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PERSIST(): antlr.TerminalNode {
        return this.getToken(RedisParser.PERSIST, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_persistCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPersistCommand) {
            return visitor.visitPersistCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TtlCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TTL(): antlr.TerminalNode {
        return this.getToken(RedisParser.TTL, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_ttlCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitTtlCommand) {
            return visitor.visitTtlCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PTtlCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PTTL(): antlr.TerminalNode {
        return this.getToken(RedisParser.PTTL, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_pTtlCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPTtlCommand) {
            return visitor.visitPTtlCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RandomKeyCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANDOMKEY(): antlr.TerminalNode {
        return this.getToken(RedisParser.RANDOMKEY, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_randomKeyCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRandomKeyCommand) {
            return visitor.visitRandomKeyCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(RedisParser.RENAME, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_renameCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRenameCommand) {
            return visitor.visitRenameCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameNxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAMENX(): antlr.TerminalNode {
        return this.getToken(RedisParser.RENAMENX, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_renameNxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitRenameNxCommand) {
            return visitor.visitRenameNxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScanCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SCAN(): antlr.TerminalNode {
        return this.getToken(RedisParser.SCAN, 0)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public matchClause(): MatchClauseContext | null {
        return this.getRuleContext(0, MatchClauseContext);
    }
    public countClause(): CountClauseContext | null {
        return this.getRuleContext(0, CountClauseContext);
    }
    public typeClause(): TypeClauseContext | null {
        return this.getRuleContext(0, TypeClauseContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_scanCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitScanCommand) {
            return visitor.visitScanCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATCH(): antlr.TerminalNode {
        return this.getToken(RedisParser.MATCH, 0)!;
    }
    public keyPattern(): KeyPatternContext {
        return this.getRuleContext(0, KeyPatternContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_matchClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMatchClause) {
            return visitor.visitMatchClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CountClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COUNT(): antlr.TerminalNode {
        return this.getToken(RedisParser.COUNT, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_countClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitCountClause) {
            return visitor.visitCountClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(RedisParser.TYPE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_typeClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitTypeClause) {
            return visitor.visitTypeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TouchCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TOUCH(): antlr.TerminalNode {
        return this.getToken(RedisParser.TOUCH, 0)!;
    }
    public keyName(): KeyNameContext[];
    public keyName(i: number): KeyNameContext | null;
    public keyName(i?: number): KeyNameContext[] | KeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyNameContext);
        }

        return this.getRuleContext(i, KeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_touchCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitTouchCommand) {
            return visitor.visitTouchCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(RedisParser.TYPE, 0)!;
    }
    public keyName(): KeyNameContext {
        return this.getRuleContext(0, KeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_typeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitTypeCommand) {
            return visitor.visitTypeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WaitCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WAIT(): antlr.TerminalNode {
        return this.getToken(RedisParser.WAIT, 0)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode[];
    public POSITIVE_DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public POSITIVE_DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(RedisParser.POSITIVE_DECIMAL_LITERAL);
    	} else {
    		return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, i);
    	}
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_waitCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitWaitCommand) {
            return visitor.visitWaitCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringSetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(RedisParser.SET, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public keyExistenceClause(): KeyExistenceClauseContext | null {
        return this.getRuleContext(0, KeyExistenceClauseContext);
    }
    public GET(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.GET, 0);
    }
    public expirationClause(): ExpirationClauseContext | null {
        return this.getRuleContext(0, ExpirationClauseContext);
    }
    public KEEPTTL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.KEEPTTL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_stringSetCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitStringSetCommand) {
            return visitor.visitStringSetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyExistenceClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.NX, 0);
    }
    public XX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.XX, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_keyExistenceClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitKeyExistenceClause) {
            return visitor.visitKeyExistenceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpirationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.EX, 0);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public PX(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.PX, 0);
    }
    public EXAT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.EXAT, 0);
    }
    public PXAT(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.PXAT, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_expirationClause;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitExpirationClause) {
            return visitor.visitExpirationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GET(): antlr.TerminalNode {
        return this.getToken(RedisParser.GET, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_getCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitGetCommand) {
            return visitor.visitGetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IncrementCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INCR(): antlr.TerminalNode {
        return this.getToken(RedisParser.INCR, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_incrementCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitIncrementCommand) {
            return visitor.visitIncrementCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IncrementByCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INCRBY(): antlr.TerminalNode {
        return this.getToken(RedisParser.INCRBY, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_incrementByCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitIncrementByCommand) {
            return visitor.visitIncrementByCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecrementCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECR(): antlr.TerminalNode {
        return this.getToken(RedisParser.DECR, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_decrementCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDecrementCommand) {
            return visitor.visitDecrementCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecrementByCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECRBY(): antlr.TerminalNode {
        return this.getToken(RedisParser.DECRBY, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public decimal(): DecimalContext {
        return this.getRuleContext(0, DecimalContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_decrementByCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDecrementByCommand) {
            return visitor.visitDecrementByCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AppendCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public APPEND(): antlr.TerminalNode {
        return this.getToken(RedisParser.APPEND, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_appendCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitAppendCommand) {
            return visitor.visitAppendCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetDeleteCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GETDEL(): antlr.TerminalNode {
        return this.getToken(RedisParser.GETDEL, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_getDeleteCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitGetDeleteCommand) {
            return visitor.visitGetDeleteCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetExCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GETEX(): antlr.TerminalNode {
        return this.getToken(RedisParser.GETEX, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public expirationClause(): ExpirationClauseContext | null {
        return this.getRuleContext(0, ExpirationClauseContext);
    }
    public PERSIST(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.PERSIST, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_getExCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitGetExCommand) {
            return visitor.visitGetExCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetRangeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GETRANGE(): antlr.TerminalNode {
        return this.getToken(RedisParser.GETRANGE, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_getRangeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitGetRangeCommand) {
            return visitor.visitGetRangeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetSetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GETSET(): antlr.TerminalNode {
        return this.getToken(RedisParser.GETSET, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_getSetCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitGetSetCommand) {
            return visitor.visitGetSetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MGetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MGET(): antlr.TerminalNode {
        return this.getToken(RedisParser.MGET, 0)!;
    }
    public stringKeyName(): StringKeyNameContext[];
    public stringKeyName(i: number): StringKeyNameContext | null;
    public stringKeyName(i?: number): StringKeyNameContext[] | StringKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringKeyNameContext);
        }

        return this.getRuleContext(i, StringKeyNameContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_mGetCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMGetCommand) {
            return visitor.visitMGetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MSetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MSET(): antlr.TerminalNode {
        return this.getToken(RedisParser.MSET, 0)!;
    }
    public stringKeyName(): StringKeyNameContext[];
    public stringKeyName(i: number): StringKeyNameContext | null;
    public stringKeyName(i?: number): StringKeyNameContext[] | StringKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringKeyNameContext);
        }

        return this.getRuleContext(i, StringKeyNameContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_mSetCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMSetCommand) {
            return visitor.visitMSetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MSetNxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MSETNX(): antlr.TerminalNode {
        return this.getToken(RedisParser.MSETNX, 0)!;
    }
    public stringKeyName(): StringKeyNameContext[];
    public stringKeyName(i: number): StringKeyNameContext | null;
    public stringKeyName(i?: number): StringKeyNameContext[] | StringKeyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringKeyNameContext);
        }

        return this.getRuleContext(i, StringKeyNameContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_mSetNxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitMSetNxCommand) {
            return visitor.visitMSetNxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PSetExCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PSETEX(): antlr.TerminalNode {
        return this.getToken(RedisParser.PSETEX, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_pSetExCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitPSetExCommand) {
            return visitor.visitPSetExCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetExCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETEX(): antlr.TerminalNode {
        return this.getToken(RedisParser.SETEX, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_setExCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSetExCommand) {
            return visitor.visitSetExCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetNxCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETNX(): antlr.TerminalNode {
        return this.getToken(RedisParser.SETNX, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_setNxCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSetNxCommand) {
            return visitor.visitSetNxCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetRangeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETRANGE(): antlr.TerminalNode {
        return this.getToken(RedisParser.SETRANGE, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_setRangeCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSetRangeCommand) {
            return visitor.visitSetRangeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringLengthCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRLEN(): antlr.TerminalNode {
        return this.getToken(RedisParser.STRLEN, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_stringLengthCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitStringLengthCommand) {
            return visitor.visitStringLengthCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubstringCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBSTR(): antlr.TerminalNode {
        return this.getToken(RedisParser.SUBSTR, 0)!;
    }
    public stringKeyName(): StringKeyNameContext {
        return this.getRuleContext(0, StringKeyNameContext)!;
    }
    public decimal(): DecimalContext[];
    public decimal(i: number): DecimalContext | null;
    public decimal(i?: number): DecimalContext[] | DecimalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalContext);
        }

        return this.getRuleContext(i, DecimalContext);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_substringCommand;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSubstringCommand) {
            return visitor.visitSubstringCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecimalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_decimal;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitDecimal) {
            return visitor.visitDecimal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.IDENTIFIER, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.DECIMAL_LITERAL, 0);
    }
    public POSITIVE_DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(RedisParser.POSITIVE_DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_identifier;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringKeyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_stringKeyName;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitStringKeyName) {
            return visitor.visitStringKeyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListKeyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_listKeyName;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitListKeyName) {
            return visitor.visitListKeyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetKeyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_setKeyName;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitSetKeyName) {
            return visitor.visitSetKeyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_keyName;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitKeyName) {
            return visitor.visitKeyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return RedisParser.RULE_keyPattern;
    }
    public override copyFrom(ctx: KeyPatternContext): void {
        super.copyFrom(ctx);
    }
}
export class NotProperPatternContext extends KeyPatternContext {
    public constructor(ctx: KeyPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: RedisParserVisitor<Result>): Result | null {
        if (visitor.visitNotProperPattern) {
            return visitor.visitNotProperPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
