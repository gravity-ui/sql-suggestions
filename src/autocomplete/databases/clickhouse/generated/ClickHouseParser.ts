////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/clickhouse/grammar/ClickHouseParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { ClickHouseParserVisitor } from "./ClickHouseParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class ClickHouseParser extends antlr.Parser {
    public static readonly ADD = 1;
    public static readonly AFTER = 2;
    public static readonly ALIAS = 3;
    public static readonly ALL = 4;
    public static readonly ALTER = 5;
    public static readonly AND = 6;
    public static readonly ANTI = 7;
    public static readonly ANY = 8;
    public static readonly ARRAY = 9;
    public static readonly AS = 10;
    public static readonly ASCENDING = 11;
    public static readonly ASOF = 12;
    public static readonly AST = 13;
    public static readonly ASYNC = 14;
    public static readonly ATTACH = 15;
    public static readonly BETWEEN = 16;
    public static readonly BOTH = 17;
    public static readonly BY = 18;
    public static readonly CASE = 19;
    public static readonly CAST = 20;
    public static readonly CHECK = 21;
    public static readonly CLEAR = 22;
    public static readonly CLUSTER = 23;
    public static readonly CODEC = 24;
    public static readonly COLLATE = 25;
    public static readonly COLUMN = 26;
    public static readonly COMMENT = 27;
    public static readonly CONSTRAINT = 28;
    public static readonly CREATE = 29;
    public static readonly CROSS = 30;
    public static readonly CUBE = 31;
    public static readonly CURRENT = 32;
    public static readonly DATABASE = 33;
    public static readonly DATABASES = 34;
    public static readonly DATE = 35;
    public static readonly DAY = 36;
    public static readonly DEDUPLICATE = 37;
    public static readonly DEFAULT = 38;
    public static readonly DELAY = 39;
    public static readonly DELETE = 40;
    public static readonly DESC = 41;
    public static readonly DESCENDING = 42;
    public static readonly DESCRIBE = 43;
    public static readonly DETACH = 44;
    public static readonly DICTIONARIES = 45;
    public static readonly DICTIONARY = 46;
    public static readonly DISK = 47;
    public static readonly DISTINCT = 48;
    public static readonly DISTRIBUTED = 49;
    public static readonly DROP = 50;
    public static readonly ELSE = 51;
    public static readonly END = 52;
    public static readonly ENGINE = 53;
    public static readonly ESTIMATE = 54;
    public static readonly EVENTS = 55;
    public static readonly EXISTS = 56;
    public static readonly EXPLAIN = 57;
    public static readonly EXPRESSION = 58;
    public static readonly EXTRACT = 59;
    public static readonly FETCHES = 60;
    public static readonly FINAL = 61;
    public static readonly FIRST = 62;
    public static readonly FLUSH = 63;
    public static readonly FOLLOWING = 64;
    public static readonly FOR = 65;
    public static readonly FORMAT = 66;
    public static readonly FREEZE = 67;
    public static readonly FROM = 68;
    public static readonly FULL = 69;
    public static readonly FUNCTION = 70;
    public static readonly GLOBAL = 71;
    public static readonly GRANULARITY = 72;
    public static readonly GROUP = 73;
    public static readonly HAVING = 74;
    public static readonly HIERARCHICAL = 75;
    public static readonly HOUR = 76;
    public static readonly ID = 77;
    public static readonly IF = 78;
    public static readonly ILIKE = 79;
    public static readonly IN = 80;
    public static readonly INDEX = 81;
    public static readonly INF = 82;
    public static readonly INJECTIVE = 83;
    public static readonly INNER = 84;
    public static readonly INSERT = 85;
    public static readonly INTERVAL = 86;
    public static readonly INTO = 87;
    public static readonly IS = 88;
    public static readonly IS_OBJECT_ID = 89;
    public static readonly JOIN = 90;
    public static readonly KEY = 91;
    public static readonly KILL = 92;
    public static readonly LAST = 93;
    public static readonly LAYOUT = 94;
    public static readonly LEADING = 95;
    public static readonly LEFT = 96;
    public static readonly LIFETIME = 97;
    public static readonly LIKE = 98;
    public static readonly LIMIT = 99;
    public static readonly LIVE = 100;
    public static readonly LOCAL = 101;
    public static readonly LOGS = 102;
    public static readonly MATERIALIZE = 103;
    public static readonly MATERIALIZED = 104;
    public static readonly MAX = 105;
    public static readonly MERGES = 106;
    public static readonly MIN = 107;
    public static readonly MINUTE = 108;
    public static readonly MODIFY = 109;
    public static readonly MONTH = 110;
    public static readonly MOVE = 111;
    public static readonly MUTATION = 112;
    public static readonly NAN_SQL = 113;
    public static readonly NO = 114;
    public static readonly NOT = 115;
    public static readonly NULL_SQL = 116;
    public static readonly NULLS = 117;
    public static readonly OFFSET = 118;
    public static readonly ON = 119;
    public static readonly OPTIMIZE = 120;
    public static readonly OR = 121;
    public static readonly ORDER = 122;
    public static readonly OUTER = 123;
    public static readonly OUTFILE = 124;
    public static readonly OVER = 125;
    public static readonly PARTITION = 126;
    public static readonly PIPELINE = 127;
    public static readonly PLAN = 128;
    public static readonly POPULATE = 129;
    public static readonly PRECEDING = 130;
    public static readonly PREWHERE = 131;
    public static readonly PRIMARY = 132;
    public static readonly PROJECTION = 133;
    public static readonly QUARTER = 134;
    public static readonly QUERY = 135;
    public static readonly RANGE = 136;
    public static readonly RELOAD = 137;
    public static readonly REMOVE = 138;
    public static readonly RENAME = 139;
    public static readonly REPLACE = 140;
    public static readonly REPLICA = 141;
    public static readonly REPLICATED = 142;
    public static readonly RIGHT = 143;
    public static readonly ROLLUP = 144;
    public static readonly ROW = 145;
    public static readonly ROWS = 146;
    public static readonly SAMPLE = 147;
    public static readonly SECOND = 148;
    public static readonly SELECT = 149;
    public static readonly SEMI = 150;
    public static readonly SENDS = 151;
    public static readonly SET = 152;
    public static readonly SETTINGS = 153;
    public static readonly SHOW = 154;
    public static readonly SOURCE = 155;
    public static readonly START = 156;
    public static readonly STOP = 157;
    public static readonly SUBSTRING = 158;
    public static readonly SYNC = 159;
    public static readonly SYNTAX = 160;
    public static readonly SYSTEM = 161;
    public static readonly TABLE = 162;
    public static readonly TABLES = 163;
    public static readonly TEMPORARY = 164;
    public static readonly TEST = 165;
    public static readonly THEN = 166;
    public static readonly TIES = 167;
    public static readonly TIMEOUT = 168;
    public static readonly TIMESTAMP = 169;
    public static readonly TO = 170;
    public static readonly TOP = 171;
    public static readonly TOTALS = 172;
    public static readonly TRAILING = 173;
    public static readonly TRIM = 174;
    public static readonly TREE = 175;
    public static readonly TRUNCATE = 176;
    public static readonly TTL = 177;
    public static readonly TYPE = 178;
    public static readonly UNBOUNDED = 179;
    public static readonly UNION = 180;
    public static readonly UPDATE = 181;
    public static readonly USE = 182;
    public static readonly USING = 183;
    public static readonly UUID = 184;
    public static readonly VALUES = 185;
    public static readonly VIEW = 186;
    public static readonly VOLUME = 187;
    public static readonly WATCH = 188;
    public static readonly WEEK = 189;
    public static readonly WHEN = 190;
    public static readonly WHERE = 191;
    public static readonly WINDOW = 192;
    public static readonly WITH = 193;
    public static readonly YEAR = 194;
    public static readonly GRANT = 195;
    public static readonly USER = 196;
    public static readonly FETCH = 197;
    public static readonly REFRESH = 198;
    public static readonly POLICY = 199;
    public static readonly QUOTA = 200;
    public static readonly ROLE = 201;
    public static readonly PROFILE = 202;
    public static readonly ARBITRARY = 203;
    public static readonly COLUMNS = 204;
    public static readonly CURRENT_USER = 205;
    public static readonly ACCESS = 206;
    public static readonly SHOW_USERS = 207;
    public static readonly SHOW_ROLES = 208;
    public static readonly SHOW_ROW_POLICIES = 209;
    public static readonly SHOW_QUOTAS = 210;
    public static readonly SHOW_SETTINGS_PROFILES = 211;
    public static readonly SHUTDOWN = 212;
    public static readonly CACHE = 213;
    public static readonly DNS = 214;
    public static readonly MARK = 215;
    public static readonly PART = 216;
    public static readonly UNCOMPRESSED = 217;
    public static readonly CONFIG = 218;
    public static readonly EMBEDDED = 219;
    public static readonly FUNCTIONS = 220;
    public static readonly MOVES = 221;
    public static readonly REPLICATION = 222;
    public static readonly QUEUES = 223;
    public static readonly RESTART = 224;
    public static readonly DICTGET = 225;
    public static readonly DICTGETHIERARCHY = 226;
    public static readonly DICTHAS = 227;
    public static readonly DICTISIN = 228;
    public static readonly MANAGEMENT = 229;
    public static readonly ADMIN = 230;
    public static readonly INTROSPECTION = 231;
    public static readonly ADDRESSTOLINE = 232;
    public static readonly ADDRESSTOSYMBOL = 233;
    public static readonly DEMANGLE = 234;
    public static readonly SOURCES = 235;
    public static readonly FILE = 236;
    public static readonly URL = 237;
    public static readonly REMOTE = 238;
    public static readonly MYSQL = 239;
    public static readonly ODBC = 240;
    public static readonly JDBC = 241;
    public static readonly HDFS = 242;
    public static readonly S3 = 243;
    public static readonly SETTING = 244;
    public static readonly OPTION = 245;
    public static readonly NONE = 246;
    public static readonly AZURE = 247;
    public static readonly HIVE = 248;
    public static readonly MONGO = 249;
    public static readonly POSTGRES = 250;
    public static readonly REDIS = 251;
    public static readonly SQLITE = 252;
    public static readonly ADDRESSTOLINEWITHINLINES = 253;
    public static readonly SQL = 254;
    public static readonly SECURITY = 255;
    public static readonly DISPLAYSECRETSINSHOWANDSELECT = 256;
    public static readonly POLICIES = 257;
    public static readonly PROFILES = 258;
    public static readonly ALLOW = 259;
    public static readonly JSON_FALSE = 260;
    public static readonly JSON_TRUE = 261;
    public static readonly IDENTIFIER = 262;
    public static readonly FLOATING_LITERAL = 263;
    public static readonly OCTAL_LITERAL = 264;
    public static readonly DECIMAL_LITERAL = 265;
    public static readonly HEXADECIMAL_LITERAL = 266;
    public static readonly STRING_LITERAL = 267;
    public static readonly ARROW = 268;
    public static readonly ASTERISK = 269;
    public static readonly BACKQUOTE = 270;
    public static readonly BACKSLASH = 271;
    public static readonly COLON = 272;
    public static readonly COMMA = 273;
    public static readonly CONCAT = 274;
    public static readonly DASH = 275;
    public static readonly DOT = 276;
    public static readonly EQ_DOUBLE = 277;
    public static readonly EQ_SINGLE = 278;
    public static readonly GE = 279;
    public static readonly GT = 280;
    public static readonly LBRACE = 281;
    public static readonly LBRACKET = 282;
    public static readonly LE = 283;
    public static readonly LPAREN = 284;
    public static readonly LT = 285;
    public static readonly NOT_EQ = 286;
    public static readonly PERCENT = 287;
    public static readonly PLUS = 288;
    public static readonly QUESTIONMARK = 289;
    public static readonly QUOTE_DOUBLE = 290;
    public static readonly QUOTE_SINGLE = 291;
    public static readonly RBRACE = 292;
    public static readonly RBRACKET = 293;
    public static readonly RPAREN = 294;
    public static readonly SEMICOLON = 295;
    public static readonly SLASH = 296;
    public static readonly UNDERSCORE = 297;
    public static readonly MULTI_LINE_COMMENT = 298;
    public static readonly SINGLE_LINE_COMMENT = 299;
    public static readonly WHITESPACE = 300;
    public static readonly RULE_root = 0;
    public static readonly RULE_statements = 1;
    public static readonly RULE_statement = 2;
    public static readonly RULE_notInsertStatement = 3;
    public static readonly RULE_commonTableExpressionStatement = 4;
    public static readonly RULE_namedQuery = 5;
    public static readonly RULE_columnAliases = 6;
    public static readonly RULE_alterStatement = 7;
    public static readonly RULE_alterTableClause = 8;
    public static readonly RULE_assignmentExpressionList = 9;
    public static readonly RULE_assignmentExpression = 10;
    public static readonly RULE_tableColumnPropertyType = 11;
    public static readonly RULE_partitionClause = 12;
    public static readonly RULE_attachStatement = 13;
    public static readonly RULE_checkStatement = 14;
    public static readonly RULE_deleteStatement = 15;
    public static readonly RULE_createTableStatement = 16;
    public static readonly RULE_createDatabaseStatement = 17;
    public static readonly RULE_createDictionaryStatement = 18;
    public static readonly RULE_createLiveViewStatement = 19;
    public static readonly RULE_createMaterializedViewStatement = 20;
    public static readonly RULE_createViewStatement = 21;
    public static readonly RULE_createStatement = 22;
    public static readonly RULE_dictionarySchemaClause = 23;
    public static readonly RULE_dictionaryAttributeDefinition = 24;
    public static readonly RULE_dictionaryEngineClause = 25;
    public static readonly RULE_dictionaryPrimaryKeyClause = 26;
    public static readonly RULE_dictionaryArgumentExpression = 27;
    public static readonly RULE_sourceClause = 28;
    public static readonly RULE_lifetimeClause = 29;
    public static readonly RULE_layoutClause = 30;
    public static readonly RULE_rangeClause = 31;
    public static readonly RULE_dictionarySettingsClause = 32;
    public static readonly RULE_clusterClause = 33;
    public static readonly RULE_uuidClause = 34;
    public static readonly RULE_destinationClause = 35;
    public static readonly RULE_subqueryClause = 36;
    public static readonly RULE_tableSchemaClause = 37;
    public static readonly RULE_engineClause = 38;
    public static readonly RULE_partitionByClause = 39;
    public static readonly RULE_primaryKeyClause = 40;
    public static readonly RULE_sampleByClause = 41;
    public static readonly RULE_ttlClause = 42;
    public static readonly RULE_engineExpression = 43;
    public static readonly RULE_tableElementExpression = 44;
    public static readonly RULE_tableColumnDefinition = 45;
    public static readonly RULE_tableColumnPropertyExpression = 46;
    public static readonly RULE_tableIndexDefinition = 47;
    public static readonly RULE_tableProjectionDefinition = 48;
    public static readonly RULE_codecExpression = 49;
    public static readonly RULE_codecArgExpression = 50;
    public static readonly RULE_ttlExpression = 51;
    public static readonly RULE_describeStatement = 52;
    public static readonly RULE_dropStatement = 53;
    public static readonly RULE_existsStatement = 54;
    public static readonly RULE_explainStatement = 55;
    public static readonly RULE_grantStatement = 56;
    public static readonly RULE_userExpressionList = 57;
    public static readonly RULE_userIdentifier = 58;
    public static readonly RULE_selectPrivilege = 59;
    public static readonly RULE_insertPrivilege = 60;
    public static readonly RULE_createPrivilege = 61;
    public static readonly RULE_dropPrivilege = 62;
    public static readonly RULE_showPrivilege = 63;
    public static readonly RULE_introspectionPrivilege = 64;
    public static readonly RULE_sourcePrivilege = 65;
    public static readonly RULE_dictPrivilege = 66;
    public static readonly RULE_alterPrivilege = 67;
    public static readonly RULE_accessManagementPrivilege = 68;
    public static readonly RULE_privilege = 69;
    public static readonly RULE_insertStatement = 70;
    public static readonly RULE_columnsClause = 71;
    public static readonly RULE_dataClause = 72;
    public static readonly RULE_valuesStatement = 73;
    public static readonly RULE_killStatement = 74;
    public static readonly RULE_optimizeStatement = 75;
    public static readonly RULE_renameStatement = 76;
    public static readonly RULE_projectionSelectStatement = 77;
    public static readonly RULE_selectUnionStatement = 78;
    public static readonly RULE_selectStatementWithParentheses = 79;
    public static readonly RULE_selectStatement = 80;
    public static readonly RULE_withClause = 81;
    public static readonly RULE_topClause = 82;
    public static readonly RULE_fromClause = 83;
    public static readonly RULE_arrayJoinClause = 84;
    public static readonly RULE_windowClause = 85;
    public static readonly RULE_prewhereClause = 86;
    public static readonly RULE_whereClause = 87;
    public static readonly RULE_groupByClause = 88;
    public static readonly RULE_havingClause = 89;
    public static readonly RULE_orderByClause = 90;
    public static readonly RULE_projectionOrderByClause = 91;
    public static readonly RULE_limitByClause = 92;
    public static readonly RULE_limitClause = 93;
    public static readonly RULE_settingsClause = 94;
    public static readonly RULE_joinExpression = 95;
    public static readonly RULE_joinOperator = 96;
    public static readonly RULE_joinOperatorCross = 97;
    public static readonly RULE_joinConstraintClause = 98;
    public static readonly RULE_sampleClause = 99;
    public static readonly RULE_limitExpression = 100;
    public static readonly RULE_orderExpressionList = 101;
    public static readonly RULE_orderExpression = 102;
    public static readonly RULE_ratioExpression = 103;
    public static readonly RULE_settingExpressionList = 104;
    public static readonly RULE_settingExpression = 105;
    public static readonly RULE_windowExpression = 106;
    public static readonly RULE_windowPartitionByClause = 107;
    public static readonly RULE_windowOrderByClause = 108;
    public static readonly RULE_windowFrameClause = 109;
    public static readonly RULE_windowFrameExtend = 110;
    public static readonly RULE_windowFrameBound = 111;
    public static readonly RULE_setStatement = 112;
    public static readonly RULE_showStatement = 113;
    public static readonly RULE_systemStatement = 114;
    public static readonly RULE_truncateStatement = 115;
    public static readonly RULE_useStatement = 116;
    public static readonly RULE_watchStatement = 117;
    public static readonly RULE_columnTypeExpression = 118;
    public static readonly RULE_columnExpressionList = 119;
    public static readonly RULE_columnsExpression = 120;
    public static readonly RULE_columnExpression = 121;
    public static readonly RULE_columnArgumentList = 122;
    public static readonly RULE_columnArgumentExpression = 123;
    public static readonly RULE_columnLambdaExpression = 124;
    public static readonly RULE_columnIdentifier = 125;
    public static readonly RULE_tableExpression = 126;
    public static readonly RULE_tableFunctionExpression = 127;
    public static readonly RULE_tableIdentifier = 128;
    public static readonly RULE_tableArgList = 129;
    public static readonly RULE_tableArgExpression = 130;
    public static readonly RULE_databaseIdentifier = 131;
    public static readonly RULE_floatingLiteral = 132;
    public static readonly RULE_numberLiteral = 133;
    public static readonly RULE_literal = 134;
    public static readonly RULE_interval = 135;
    public static readonly RULE_keyword = 136;
    public static readonly RULE_keywordForAlias = 137;
    public static readonly RULE_alias = 138;
    public static readonly RULE_identifier = 139;
    public static readonly RULE_identifierOrNull = 140;
    public static readonly RULE_enumValue = 141;

    public static readonly literalNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, "'false'", "'true'", null, 
        null, null, null, null, null, "'->'", "'*'", "'`'", "'\'", "':'", 
        "','", "'||'", "'-'", "'.'", "'=='", "'='", "'>='", "'>'", "'{'", 
        "'['", "'<='", "'('", "'<'", null, "'%'", "'+'", "'?'", "'\"'", 
        "'''", "'}'", "']'", "')'", "';'", "'/'", "'_'"
    ];

    public static readonly symbolicNames = [
        null, "ADD", "AFTER", "ALIAS", "ALL", "ALTER", "AND", "ANTI", "ANY", 
        "ARRAY", "AS", "ASCENDING", "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", 
        "BOTH", "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", "CODEC", 
        "COLLATE", "COLUMN", "COMMENT", "CONSTRAINT", "CREATE", "CROSS", 
        "CUBE", "CURRENT", "DATABASE", "DATABASES", "DATE", "DAY", "DEDUPLICATE", 
        "DEFAULT", "DELAY", "DELETE", "DESC", "DESCENDING", "DESCRIBE", 
        "DETACH", "DICTIONARIES", "DICTIONARY", "DISK", "DISTINCT", "DISTRIBUTED", 
        "DROP", "ELSE", "END", "ENGINE", "ESTIMATE", "EVENTS", "EXISTS", 
        "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES", "FINAL", "FIRST", 
        "FLUSH", "FOLLOWING", "FOR", "FORMAT", "FREEZE", "FROM", "FULL", 
        "FUNCTION", "GLOBAL", "GRANULARITY", "GROUP", "HAVING", "HIERARCHICAL", 
        "HOUR", "ID", "IF", "ILIKE", "IN", "INDEX", "INF", "INJECTIVE", 
        "INNER", "INSERT", "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", "JOIN", 
        "KEY", "KILL", "LAST", "LAYOUT", "LEADING", "LEFT", "LIFETIME", 
        "LIKE", "LIMIT", "LIVE", "LOCAL", "LOGS", "MATERIALIZE", "MATERIALIZED", 
        "MAX", "MERGES", "MIN", "MINUTE", "MODIFY", "MONTH", "MOVE", "MUTATION", 
        "NAN_SQL", "NO", "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", "OPTIMIZE", 
        "OR", "ORDER", "OUTER", "OUTFILE", "OVER", "PARTITION", "PIPELINE", 
        "PLAN", "POPULATE", "PRECEDING", "PREWHERE", "PRIMARY", "PROJECTION", 
        "QUARTER", "QUERY", "RANGE", "RELOAD", "REMOVE", "RENAME", "REPLACE", 
        "REPLICA", "REPLICATED", "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", 
        "SECOND", "SELECT", "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", 
        "SOURCE", "START", "STOP", "SUBSTRING", "SYNC", "SYNTAX", "SYSTEM", 
        "TABLE", "TABLES", "TEMPORARY", "TEST", "THEN", "TIES", "TIMEOUT", 
        "TIMESTAMP", "TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TREE", 
        "TRUNCATE", "TTL", "TYPE", "UNBOUNDED", "UNION", "UPDATE", "USE", 
        "USING", "UUID", "VALUES", "VIEW", "VOLUME", "WATCH", "WEEK", "WHEN", 
        "WHERE", "WINDOW", "WITH", "YEAR", "GRANT", "USER", "FETCH", "REFRESH", 
        "POLICY", "QUOTA", "ROLE", "PROFILE", "ARBITRARY", "COLUMNS", "CURRENT_USER", 
        "ACCESS", "SHOW_USERS", "SHOW_ROLES", "SHOW_ROW_POLICIES", "SHOW_QUOTAS", 
        "SHOW_SETTINGS_PROFILES", "SHUTDOWN", "CACHE", "DNS", "MARK", "PART", 
        "UNCOMPRESSED", "CONFIG", "EMBEDDED", "FUNCTIONS", "MOVES", "REPLICATION", 
        "QUEUES", "RESTART", "DICTGET", "DICTGETHIERARCHY", "DICTHAS", "DICTISIN", 
        "MANAGEMENT", "ADMIN", "INTROSPECTION", "ADDRESSTOLINE", "ADDRESSTOSYMBOL", 
        "DEMANGLE", "SOURCES", "FILE", "URL", "REMOTE", "MYSQL", "ODBC", 
        "JDBC", "HDFS", "S3", "SETTING", "OPTION", "NONE", "AZURE", "HIVE", 
        "MONGO", "POSTGRES", "REDIS", "SQLITE", "ADDRESSTOLINEWITHINLINES", 
        "SQL", "SECURITY", "DISPLAYSECRETSINSHOWANDSELECT", "POLICIES", 
        "PROFILES", "ALLOW", "JSON_FALSE", "JSON_TRUE", "IDENTIFIER", "FLOATING_LITERAL", 
        "OCTAL_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
        "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", 
        "CONCAT", "DASH", "DOT", "EQ_DOUBLE", "EQ_SINGLE", "GE", "GT", "LBRACE", 
        "LBRACKET", "LE", "LPAREN", "LT", "NOT_EQ", "PERCENT", "PLUS", "QUESTIONMARK", 
        "QUOTE_DOUBLE", "QUOTE_SINGLE", "RBRACE", "RBRACKET", "RPAREN", 
        "SEMICOLON", "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
        "WHITESPACE"
    ];
    public static readonly ruleNames = [
        "root", "statements", "statement", "notInsertStatement", "commonTableExpressionStatement", 
        "namedQuery", "columnAliases", "alterStatement", "alterTableClause", 
        "assignmentExpressionList", "assignmentExpression", "tableColumnPropertyType", 
        "partitionClause", "attachStatement", "checkStatement", "deleteStatement", 
        "createTableStatement", "createDatabaseStatement", "createDictionaryStatement", 
        "createLiveViewStatement", "createMaterializedViewStatement", "createViewStatement", 
        "createStatement", "dictionarySchemaClause", "dictionaryAttributeDefinition", 
        "dictionaryEngineClause", "dictionaryPrimaryKeyClause", "dictionaryArgumentExpression", 
        "sourceClause", "lifetimeClause", "layoutClause", "rangeClause", 
        "dictionarySettingsClause", "clusterClause", "uuidClause", "destinationClause", 
        "subqueryClause", "tableSchemaClause", "engineClause", "partitionByClause", 
        "primaryKeyClause", "sampleByClause", "ttlClause", "engineExpression", 
        "tableElementExpression", "tableColumnDefinition", "tableColumnPropertyExpression", 
        "tableIndexDefinition", "tableProjectionDefinition", "codecExpression", 
        "codecArgExpression", "ttlExpression", "describeStatement", "dropStatement", 
        "existsStatement", "explainStatement", "grantStatement", "userExpressionList", 
        "userIdentifier", "selectPrivilege", "insertPrivilege", "createPrivilege", 
        "dropPrivilege", "showPrivilege", "introspectionPrivilege", "sourcePrivilege", 
        "dictPrivilege", "alterPrivilege", "accessManagementPrivilege", 
        "privilege", "insertStatement", "columnsClause", "dataClause", "valuesStatement", 
        "killStatement", "optimizeStatement", "renameStatement", "projectionSelectStatement", 
        "selectUnionStatement", "selectStatementWithParentheses", "selectStatement", 
        "withClause", "topClause", "fromClause", "arrayJoinClause", "windowClause", 
        "prewhereClause", "whereClause", "groupByClause", "havingClause", 
        "orderByClause", "projectionOrderByClause", "limitByClause", "limitClause", 
        "settingsClause", "joinExpression", "joinOperator", "joinOperatorCross", 
        "joinConstraintClause", "sampleClause", "limitExpression", "orderExpressionList", 
        "orderExpression", "ratioExpression", "settingExpressionList", "settingExpression", 
        "windowExpression", "windowPartitionByClause", "windowOrderByClause", 
        "windowFrameClause", "windowFrameExtend", "windowFrameBound", "setStatement", 
        "showStatement", "systemStatement", "truncateStatement", "useStatement", 
        "watchStatement", "columnTypeExpression", "columnExpressionList", 
        "columnsExpression", "columnExpression", "columnArgumentList", "columnArgumentExpression", 
        "columnLambdaExpression", "columnIdentifier", "tableExpression", 
        "tableFunctionExpression", "tableIdentifier", "tableArgList", "tableArgExpression", 
        "databaseIdentifier", "floatingLiteral", "numberLiteral", "literal", 
        "interval", "keyword", "keywordForAlias", "alias", "identifier", 
        "identifierOrNull", "enumValue",
    ];

    public get grammarFileName(): string { return "ClickHouseParser.g4"; }
    public get literalNames(): (string | null)[] { return ClickHouseParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return ClickHouseParser.symbolicNames; }
    public get ruleNames(): string[] { return ClickHouseParser.ruleNames; }
    public get serializedATN(): number[] { return ClickHouseParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, ClickHouseParser._ATN, ClickHouseParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, ClickHouseParser.RULE_root);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 285;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 539000864) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & 197659) !== 0) || _la === 85 || _la === 92 || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & 538443777) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & 1090519557) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & 161) !== 0) || _la === 284) {
                {
                this.state = 284;
                this.statements();
                }
            }

            this.state = 287;
            this.match(ClickHouseParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statements(): StatementsContext {
        let localContext = new StatementsContext(this.context, this.state);
        this.enterRule(localContext, 2, ClickHouseParser.RULE_statements);
        let _la: number;
        try {
            this.state = 297;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 289;
                this.statement();
                this.state = 291;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 295) {
                    {
                    this.state = 290;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 293;
                this.statement();
                this.state = 294;
                this.match(ClickHouseParser.SEMICOLON);
                this.state = 295;
                this.statements();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 4, ClickHouseParser.RULE_statement);
        let _la: number;
        try {
            this.state = 314;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ALTER:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DROP:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.KILL:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SET:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WITH:
            case ClickHouseParser.LPAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 299;
                this.notInsertStatement();
                this.state = 303;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 87) {
                    {
                    this.state = 300;
                    this.match(ClickHouseParser.INTO);
                    this.state = 301;
                    this.match(ClickHouseParser.OUTFILE);
                    this.state = 302;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 307;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 66) {
                    {
                    this.state = 305;
                    this.match(ClickHouseParser.FORMAT);
                    this.state = 306;
                    this.identifierOrNull();
                    }
                }

                this.state = 310;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 5, this.context) ) {
                case 1:
                    {
                    this.state = 309;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                    break;
                }
                }
                break;
            case ClickHouseParser.INSERT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 312;
                this.insertStatement();
                }
                break;
            case ClickHouseParser.GRANT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 313;
                this.grantStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notInsertStatement(): NotInsertStatementContext {
        let localContext = new NotInsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 6, ClickHouseParser.RULE_notInsertStatement);
        try {
            this.state = 339;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 8, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 316;
                this.alterStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 317;
                this.attachStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 318;
                this.checkStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 319;
                this.createStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 320;
                this.describeStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 321;
                this.deleteStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 322;
                this.dropStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 323;
                this.existsStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 324;
                this.explainStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 325;
                this.killStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 326;
                this.optimizeStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 327;
                this.renameStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 328;
                this.selectUnionStatement();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 329;
                this.setStatement();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 330;
                this.showStatement();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 331;
                this.systemStatement();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 332;
                this.truncateStatement();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 333;
                this.useStatement();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 334;
                this.watchStatement();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 336;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
                case 1:
                    {
                    this.state = 335;
                    this.commonTableExpressionStatement();
                    }
                    break;
                }
                this.state = 338;
                this.selectStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonTableExpressionStatement(): CommonTableExpressionStatementContext {
        let localContext = new CommonTableExpressionStatementContext(this.context, this.state);
        this.enterRule(localContext, 8, ClickHouseParser.RULE_commonTableExpressionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 341;
            this.match(ClickHouseParser.WITH);
            this.state = 342;
            this.namedQuery();
            this.state = 347;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 343;
                this.match(ClickHouseParser.COMMA);
                this.state = 344;
                this.namedQuery();
                }
                }
                this.state = 349;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 10, ClickHouseParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 350;
            localContext._name = this.identifier();
            this.state = 352;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 284) {
                {
                this.state = 351;
                this.columnAliases();
                }
            }

            this.state = 354;
            this.match(ClickHouseParser.AS);
            this.state = 355;
            this.match(ClickHouseParser.LPAREN);
            this.state = 356;
            this.notInsertStatement();
            this.state = 357;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAliases(): ColumnAliasesContext {
        let localContext = new ColumnAliasesContext(this.context, this.state);
        this.enterRule(localContext, 12, ClickHouseParser.RULE_columnAliases);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 359;
            this.match(ClickHouseParser.LPAREN);
            this.state = 360;
            this.identifier();
            this.state = 365;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 361;
                this.match(ClickHouseParser.COMMA);
                this.state = 362;
                this.identifier();
                }
                }
                this.state = 367;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 368;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatement(): AlterStatementContext {
        let localContext = new AlterStatementContext(this.context, this.state);
        this.enterRule(localContext, 14, ClickHouseParser.RULE_alterStatement);
        let _la: number;
        try {
            localContext = new AlterTableStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 370;
            this.match(ClickHouseParser.ALTER);
            this.state = 371;
            this.match(ClickHouseParser.TABLE);
            this.state = 372;
            this.tableIdentifier();
            this.state = 374;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 373;
                this.clusterClause();
                }
            }

            this.state = 376;
            this.alterTableClause();
            this.state = 381;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 377;
                this.match(ClickHouseParser.COMMA);
                this.state = 378;
                this.alterTableClause();
                }
                }
                this.state = 383;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableClause(): AlterTableClauseContext {
        let localContext = new AlterTableClauseContext(this.context, this.state);
        this.enterRule(localContext, 16, ClickHouseParser.RULE_alterTableClause);
        let _la: number;
        try {
            this.state = 598;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 42, this.context) ) {
            case 1:
                localContext = new AlterTableClauseAddColumnContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 384;
                this.match(ClickHouseParser.ADD);
                this.state = 385;
                this.match(ClickHouseParser.COLUMN);
                this.state = 389;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 14, this.context) ) {
                case 1:
                    {
                    this.state = 386;
                    this.match(ClickHouseParser.IF);
                    this.state = 387;
                    this.match(ClickHouseParser.NOT);
                    this.state = 388;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 391;
                this.tableColumnDefinition();
                this.state = 394;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 392;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 393;
                    this.columnIdentifier();
                    }
                }

                }
                break;
            case 2:
                localContext = new AlterTableClauseAddIndexContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 396;
                this.match(ClickHouseParser.ADD);
                this.state = 397;
                this.match(ClickHouseParser.INDEX);
                this.state = 401;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 16, this.context) ) {
                case 1:
                    {
                    this.state = 398;
                    this.match(ClickHouseParser.IF);
                    this.state = 399;
                    this.match(ClickHouseParser.NOT);
                    this.state = 400;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 403;
                this.tableIndexDefinition();
                this.state = 406;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 404;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 405;
                    this.columnIdentifier();
                    }
                }

                }
                break;
            case 3:
                localContext = new AlterTableClauseAddProjectionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 408;
                this.match(ClickHouseParser.ADD);
                this.state = 409;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 413;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 18, this.context) ) {
                case 1:
                    {
                    this.state = 410;
                    this.match(ClickHouseParser.IF);
                    this.state = 411;
                    this.match(ClickHouseParser.NOT);
                    this.state = 412;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 415;
                this.tableProjectionDefinition();
                this.state = 418;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 416;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 417;
                    this.columnIdentifier();
                    }
                }

                }
                break;
            case 4:
                localContext = new AlterTableClauseAttachContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 420;
                this.match(ClickHouseParser.ATTACH);
                this.state = 421;
                this.partitionClause();
                this.state = 424;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68) {
                    {
                    this.state = 422;
                    this.match(ClickHouseParser.FROM);
                    this.state = 423;
                    this.tableIdentifier();
                    }
                }

                }
                break;
            case 5:
                localContext = new AlterTableClauseClearColumnContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 426;
                this.match(ClickHouseParser.CLEAR);
                this.state = 427;
                this.match(ClickHouseParser.COLUMN);
                this.state = 430;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 21, this.context) ) {
                case 1:
                    {
                    this.state = 428;
                    this.match(ClickHouseParser.IF);
                    this.state = 429;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 432;
                this.columnIdentifier();
                this.state = 435;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 433;
                    this.match(ClickHouseParser.IN);
                    this.state = 434;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 6:
                localContext = new AlterTableClauseClearIndexContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 437;
                this.match(ClickHouseParser.CLEAR);
                this.state = 438;
                this.match(ClickHouseParser.INDEX);
                this.state = 441;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
                case 1:
                    {
                    this.state = 439;
                    this.match(ClickHouseParser.IF);
                    this.state = 440;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 443;
                this.columnIdentifier();
                this.state = 446;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 444;
                    this.match(ClickHouseParser.IN);
                    this.state = 445;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 7:
                localContext = new AlterTableClauseClearProjectionContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 448;
                this.match(ClickHouseParser.CLEAR);
                this.state = 449;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 452;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
                case 1:
                    {
                    this.state = 450;
                    this.match(ClickHouseParser.IF);
                    this.state = 451;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 454;
                this.columnIdentifier();
                this.state = 457;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 455;
                    this.match(ClickHouseParser.IN);
                    this.state = 456;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 8:
                localContext = new AlterTableClauseCommentContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 459;
                this.match(ClickHouseParser.COMMENT);
                this.state = 460;
                this.match(ClickHouseParser.COLUMN);
                this.state = 463;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
                case 1:
                    {
                    this.state = 461;
                    this.match(ClickHouseParser.IF);
                    this.state = 462;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 465;
                this.columnIdentifier();
                this.state = 466;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 9:
                localContext = new AlterTableClauseDeleteContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 468;
                this.match(ClickHouseParser.DELETE);
                this.state = 469;
                this.match(ClickHouseParser.WHERE);
                this.state = 470;
                this.columnExpression(0);
                }
                break;
            case 10:
                localContext = new AlterTableClauseDetachContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 471;
                this.match(ClickHouseParser.DETACH);
                this.state = 472;
                this.partitionClause();
                }
                break;
            case 11:
                localContext = new AlterTableClauseDropColumnContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 473;
                this.match(ClickHouseParser.DROP);
                this.state = 474;
                this.match(ClickHouseParser.COLUMN);
                this.state = 477;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 28, this.context) ) {
                case 1:
                    {
                    this.state = 475;
                    this.match(ClickHouseParser.IF);
                    this.state = 476;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 479;
                this.columnIdentifier();
                }
                break;
            case 12:
                localContext = new AlterTableClauseDropIndexContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 480;
                this.match(ClickHouseParser.DROP);
                this.state = 481;
                this.match(ClickHouseParser.INDEX);
                this.state = 484;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 29, this.context) ) {
                case 1:
                    {
                    this.state = 482;
                    this.match(ClickHouseParser.IF);
                    this.state = 483;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 486;
                this.columnIdentifier();
                }
                break;
            case 13:
                localContext = new AlterTableClauseDropProjectionContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 487;
                this.match(ClickHouseParser.DROP);
                this.state = 488;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 491;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
                case 1:
                    {
                    this.state = 489;
                    this.match(ClickHouseParser.IF);
                    this.state = 490;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 493;
                this.columnIdentifier();
                }
                break;
            case 14:
                localContext = new AlterTableClauseDropPartitionContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 494;
                this.match(ClickHouseParser.DROP);
                this.state = 495;
                this.partitionClause();
                }
                break;
            case 15:
                localContext = new AlterTableClauseFreezePartitionContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 496;
                this.match(ClickHouseParser.FREEZE);
                this.state = 498;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 126) {
                    {
                    this.state = 497;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 16:
                localContext = new AlterTableClauseMaterializeIndexContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 500;
                this.match(ClickHouseParser.MATERIALIZE);
                this.state = 501;
                this.match(ClickHouseParser.INDEX);
                this.state = 504;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
                case 1:
                    {
                    this.state = 502;
                    this.match(ClickHouseParser.IF);
                    this.state = 503;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 506;
                this.columnIdentifier();
                this.state = 509;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 507;
                    this.match(ClickHouseParser.IN);
                    this.state = 508;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 17:
                localContext = new AlterTableClauseMaterializeProjectionContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 511;
                this.match(ClickHouseParser.MATERIALIZE);
                this.state = 512;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 515;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
                case 1:
                    {
                    this.state = 513;
                    this.match(ClickHouseParser.IF);
                    this.state = 514;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 517;
                this.columnIdentifier();
                this.state = 520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 518;
                    this.match(ClickHouseParser.IN);
                    this.state = 519;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 18:
                localContext = new AlterTableClauseModifyCodecContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 522;
                this.match(ClickHouseParser.MODIFY);
                this.state = 523;
                this.match(ClickHouseParser.COLUMN);
                this.state = 526;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 36, this.context) ) {
                case 1:
                    {
                    this.state = 524;
                    this.match(ClickHouseParser.IF);
                    this.state = 525;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 528;
                this.columnIdentifier();
                this.state = 529;
                this.codecExpression();
                }
                break;
            case 19:
                localContext = new AlterTableClauseModifyCommentContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 531;
                this.match(ClickHouseParser.MODIFY);
                this.state = 532;
                this.match(ClickHouseParser.COLUMN);
                this.state = 535;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
                case 1:
                    {
                    this.state = 533;
                    this.match(ClickHouseParser.IF);
                    this.state = 534;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 537;
                this.columnIdentifier();
                this.state = 538;
                this.match(ClickHouseParser.COMMENT);
                this.state = 539;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 20:
                localContext = new AlterTableClauseModifyRemoveContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 541;
                this.match(ClickHouseParser.MODIFY);
                this.state = 542;
                this.match(ClickHouseParser.COLUMN);
                this.state = 545;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 38, this.context) ) {
                case 1:
                    {
                    this.state = 543;
                    this.match(ClickHouseParser.IF);
                    this.state = 544;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 547;
                this.columnIdentifier();
                this.state = 548;
                this.match(ClickHouseParser.REMOVE);
                this.state = 549;
                this.tableColumnPropertyType();
                }
                break;
            case 21:
                localContext = new AlterTableClauseModifyContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 551;
                this.match(ClickHouseParser.MODIFY);
                this.state = 552;
                this.match(ClickHouseParser.COLUMN);
                this.state = 555;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
                case 1:
                    {
                    this.state = 553;
                    this.match(ClickHouseParser.IF);
                    this.state = 554;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 557;
                this.tableColumnDefinition();
                }
                break;
            case 22:
                localContext = new AlterTableClauseModifyOrderByContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 558;
                this.match(ClickHouseParser.MODIFY);
                this.state = 559;
                this.match(ClickHouseParser.ORDER);
                this.state = 560;
                this.match(ClickHouseParser.BY);
                this.state = 561;
                this.columnExpression(0);
                }
                break;
            case 23:
                localContext = new AlterTableClauseModifyTTLContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 562;
                this.match(ClickHouseParser.MODIFY);
                this.state = 563;
                this.ttlClause();
                }
                break;
            case 24:
                localContext = new AlterTableClauseMovePartitionContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 564;
                this.match(ClickHouseParser.MOVE);
                this.state = 565;
                this.partitionClause();
                this.state = 575;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 40, this.context) ) {
                case 1:
                    {
                    this.state = 566;
                    this.match(ClickHouseParser.TO);
                    this.state = 567;
                    this.match(ClickHouseParser.DISK);
                    this.state = 568;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case 2:
                    {
                    this.state = 569;
                    this.match(ClickHouseParser.TO);
                    this.state = 570;
                    this.match(ClickHouseParser.VOLUME);
                    this.state = 571;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case 3:
                    {
                    this.state = 572;
                    this.match(ClickHouseParser.TO);
                    this.state = 573;
                    this.match(ClickHouseParser.TABLE);
                    this.state = 574;
                    this.tableIdentifier();
                    }
                    break;
                }
                }
                break;
            case 25:
                localContext = new AlterTableClauseRemoveTTLContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 577;
                this.match(ClickHouseParser.REMOVE);
                this.state = 578;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 26:
                localContext = new AlterTableClauseRenameContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 579;
                this.match(ClickHouseParser.RENAME);
                this.state = 580;
                this.match(ClickHouseParser.COLUMN);
                this.state = 583;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 41, this.context) ) {
                case 1:
                    {
                    this.state = 581;
                    this.match(ClickHouseParser.IF);
                    this.state = 582;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 585;
                this.columnIdentifier();
                this.state = 586;
                this.match(ClickHouseParser.TO);
                this.state = 587;
                this.columnIdentifier();
                }
                break;
            case 27:
                localContext = new AlterTableClauseReplaceContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 589;
                this.match(ClickHouseParser.REPLACE);
                this.state = 590;
                this.partitionClause();
                this.state = 591;
                this.match(ClickHouseParser.FROM);
                this.state = 592;
                this.tableIdentifier();
                }
                break;
            case 28:
                localContext = new AlterTableClauseUpdateContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 594;
                this.match(ClickHouseParser.UPDATE);
                this.state = 595;
                this.assignmentExpressionList();
                this.state = 596;
                this.whereClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentExpressionList(): AssignmentExpressionListContext {
        let localContext = new AssignmentExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 18, ClickHouseParser.RULE_assignmentExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 600;
            this.assignmentExpression();
            this.state = 605;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 601;
                this.match(ClickHouseParser.COMMA);
                this.state = 602;
                this.assignmentExpression();
                }
                }
                this.state = 607;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentExpression(): AssignmentExpressionContext {
        let localContext = new AssignmentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 20, ClickHouseParser.RULE_assignmentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 608;
            this.columnIdentifier();
            this.state = 609;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 610;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnPropertyType(): TableColumnPropertyTypeContext {
        let localContext = new TableColumnPropertyTypeContext(this.context, this.state);
        this.enterRule(localContext, 22, ClickHouseParser.RULE_tableColumnPropertyType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 612;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 150994952) !== 0) || _la === 38 || _la === 104 || _la === 177)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionClause(): PartitionClauseContext {
        let localContext = new PartitionClauseContext(this.context, this.state);
        this.enterRule(localContext, 24, ClickHouseParser.RULE_partitionClause);
        try {
            this.state = 619;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 614;
                this.match(ClickHouseParser.PARTITION);
                this.state = 615;
                this.columnExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 616;
                this.match(ClickHouseParser.PARTITION);
                this.state = 617;
                this.match(ClickHouseParser.ID);
                this.state = 618;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public attachStatement(): AttachStatementContext {
        let localContext = new AttachStatementContext(this.context, this.state);
        this.enterRule(localContext, 26, ClickHouseParser.RULE_attachStatement);
        let _la: number;
        try {
            localContext = new AttachDictionaryStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 621;
            this.match(ClickHouseParser.ATTACH);
            this.state = 622;
            this.match(ClickHouseParser.DICTIONARY);
            this.state = 623;
            this.tableIdentifier();
            this.state = 625;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 624;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkStatement(): CheckStatementContext {
        let localContext = new CheckStatementContext(this.context, this.state);
        this.enterRule(localContext, 28, ClickHouseParser.RULE_checkStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 627;
            this.match(ClickHouseParser.CHECK);
            this.state = 628;
            this.match(ClickHouseParser.TABLE);
            this.state = 629;
            this.tableIdentifier();
            this.state = 631;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 126) {
                {
                this.state = 630;
                this.partitionClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteStatement(): DeleteStatementContext {
        let localContext = new DeleteStatementContext(this.context, this.state);
        this.enterRule(localContext, 30, ClickHouseParser.RULE_deleteStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 633;
            this.match(ClickHouseParser.DELETE);
            this.state = 634;
            this.match(ClickHouseParser.FROM);
            this.state = 635;
            this.tableIdentifier();
            this.state = 637;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 636;
                this.clusterClause();
                }
            }

            this.state = 640;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 191) {
                {
                this.state = 639;
                this.whereClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableStatement(): CreateTableStatementContext {
        let localContext = new CreateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 32, ClickHouseParser.RULE_createTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 649;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ATTACH:
                {
                this.state = 642;
                this.match(ClickHouseParser.ATTACH);
                }
                break;
            case ClickHouseParser.CREATE:
                {
                this.state = 643;
                this.match(ClickHouseParser.CREATE);
                this.state = 646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 644;
                    this.match(ClickHouseParser.OR);
                    this.state = 645;
                    this.match(ClickHouseParser.REPLACE);
                    }
                }

                }
                break;
            case ClickHouseParser.REPLACE:
                {
                this.state = 648;
                this.match(ClickHouseParser.REPLACE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 652;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 164) {
                {
                this.state = 651;
                this.match(ClickHouseParser.TEMPORARY);
                }
            }

            this.state = 654;
            this.match(ClickHouseParser.TABLE);
            this.state = 658;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 52, this.context) ) {
            case 1:
                {
                this.state = 655;
                this.match(ClickHouseParser.IF);
                this.state = 656;
                this.match(ClickHouseParser.NOT);
                this.state = 657;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 660;
            this.tableIdentifier();
            this.state = 662;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 661;
                this.uuidClause();
                }
            }

            this.state = 665;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 664;
                this.clusterClause();
                }
            }

            this.state = 668;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
            case 1:
                {
                this.state = 667;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 671;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 670;
                this.engineClause();
                }
            }

            this.state = 674;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 673;
                this.subqueryClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext {
        let localContext = new CreateDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 34, ClickHouseParser.RULE_createDatabaseStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 676;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 677;
            this.match(ClickHouseParser.DATABASE);
            this.state = 681;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
            case 1:
                {
                this.state = 678;
                this.match(ClickHouseParser.IF);
                this.state = 679;
                this.match(ClickHouseParser.NOT);
                this.state = 680;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 683;
            this.identifier();
            this.state = 685;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 684;
                this.clusterClause();
                }
            }

            this.state = 687;
            this.engineExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDictionaryStatement(): CreateDictionaryStatementContext {
        let localContext = new CreateDictionaryStatementContext(this.context, this.state);
        this.enterRule(localContext, 36, ClickHouseParser.RULE_createDictionaryStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 696;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ATTACH:
                {
                this.state = 689;
                this.match(ClickHouseParser.ATTACH);
                }
                break;
            case ClickHouseParser.CREATE:
                {
                this.state = 690;
                this.match(ClickHouseParser.CREATE);
                this.state = 693;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 691;
                    this.match(ClickHouseParser.OR);
                    this.state = 692;
                    this.match(ClickHouseParser.REPLACE);
                    }
                }

                }
                break;
            case ClickHouseParser.REPLACE:
                {
                this.state = 695;
                this.match(ClickHouseParser.REPLACE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 698;
            this.match(ClickHouseParser.DICTIONARY);
            this.state = 702;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 62, this.context) ) {
            case 1:
                {
                this.state = 699;
                this.match(ClickHouseParser.IF);
                this.state = 700;
                this.match(ClickHouseParser.NOT);
                this.state = 701;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 704;
            this.tableIdentifier();
            this.state = 706;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 705;
                this.uuidClause();
                }
            }

            this.state = 709;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 708;
                this.clusterClause();
                }
            }

            this.state = 711;
            this.dictionarySchemaClause();
            this.state = 712;
            this.dictionaryEngineClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createLiveViewStatement(): CreateLiveViewStatementContext {
        let localContext = new CreateLiveViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 38, ClickHouseParser.RULE_createLiveViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 714;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 715;
            this.match(ClickHouseParser.LIVE);
            this.state = 716;
            this.match(ClickHouseParser.VIEW);
            this.state = 720;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 65, this.context) ) {
            case 1:
                {
                this.state = 717;
                this.match(ClickHouseParser.IF);
                this.state = 718;
                this.match(ClickHouseParser.NOT);
                this.state = 719;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 722;
            this.tableIdentifier();
            this.state = 724;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 723;
                this.uuidClause();
                }
            }

            this.state = 727;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 726;
                this.clusterClause();
                }
            }

            this.state = 734;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 729;
                this.match(ClickHouseParser.WITH);
                this.state = 730;
                this.match(ClickHouseParser.TIMEOUT);
                this.state = 732;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 265) {
                    {
                    this.state = 731;
                    this.match(ClickHouseParser.DECIMAL_LITERAL);
                    }
                }

                }
            }

            this.state = 737;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 170) {
                {
                this.state = 736;
                this.destinationClause();
                }
            }

            this.state = 740;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 71, this.context) ) {
            case 1:
                {
                this.state = 739;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 742;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext {
        let localContext = new CreateMaterializedViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 40, ClickHouseParser.RULE_createMaterializedViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 744;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 745;
            this.match(ClickHouseParser.MATERIALIZED);
            this.state = 746;
            this.match(ClickHouseParser.VIEW);
            this.state = 750;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 72, this.context) ) {
            case 1:
                {
                this.state = 747;
                this.match(ClickHouseParser.IF);
                this.state = 748;
                this.match(ClickHouseParser.NOT);
                this.state = 749;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 752;
            this.tableIdentifier();
            this.state = 754;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 753;
                this.uuidClause();
                }
            }

            this.state = 757;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 756;
                this.clusterClause();
                }
            }

            this.state = 760;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 284) {
                {
                this.state = 759;
                this.tableSchemaClause();
                }
            }

            this.state = 767;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.TO:
                {
                this.state = 762;
                this.destinationClause();
                }
                break;
            case ClickHouseParser.ENGINE:
                {
                this.state = 763;
                this.engineClause();
                this.state = 765;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 129) {
                    {
                    this.state = 764;
                    this.match(ClickHouseParser.POPULATE);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 769;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createViewStatement(): CreateViewStatementContext {
        let localContext = new CreateViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 42, ClickHouseParser.RULE_createViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 771;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 774;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 121) {
                {
                this.state = 772;
                this.match(ClickHouseParser.OR);
                this.state = 773;
                this.match(ClickHouseParser.REPLACE);
                }
            }

            this.state = 776;
            this.match(ClickHouseParser.VIEW);
            this.state = 780;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 79, this.context) ) {
            case 1:
                {
                this.state = 777;
                this.match(ClickHouseParser.IF);
                this.state = 778;
                this.match(ClickHouseParser.NOT);
                this.state = 779;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 782;
            this.tableIdentifier();
            this.state = 784;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 783;
                this.uuidClause();
                }
            }

            this.state = 787;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 786;
                this.clusterClause();
                }
            }

            this.state = 790;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 82, this.context) ) {
            case 1:
                {
                this.state = 789;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 792;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createStatement(): CreateStatementContext {
        let localContext = new CreateStatementContext(this.context, this.state);
        this.enterRule(localContext, 44, ClickHouseParser.RULE_createStatement);
        try {
            this.state = 800;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 83, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 794;
                this.createDatabaseStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 795;
                this.createDictionaryStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 796;
                this.createLiveViewStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 797;
                this.createMaterializedViewStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 798;
                this.createTableStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 799;
                this.createViewStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionarySchemaClause(): DictionarySchemaClauseContext {
        let localContext = new DictionarySchemaClauseContext(this.context, this.state);
        this.enterRule(localContext, 46, ClickHouseParser.RULE_dictionarySchemaClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 802;
            this.match(ClickHouseParser.LPAREN);
            this.state = 803;
            this.dictionaryAttributeDefinition();
            this.state = 808;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 804;
                this.match(ClickHouseParser.COMMA);
                this.state = 805;
                this.dictionaryAttributeDefinition();
                }
                }
                this.state = 810;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 811;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryAttributeDefinition(): DictionaryAttributeDefinitionContext {
        let localContext = new DictionaryAttributeDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 48, ClickHouseParser.RULE_dictionaryAttributeDefinition);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 813;
            this.identifier();
            this.state = 814;
            this.columnTypeExpression();
            this.state = 836;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 86, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 834;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 85, this.context) ) {
                    case 1:
                        {
                        this.state = 815;
                        if (!(!localContext.attrs.has("default"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"default\")");
                        }
                        this.state = 816;
                        this.match(ClickHouseParser.DEFAULT);
                        this.state = 817;
                        this.literal();
                        localContext.attrs.add("default");
                        }
                        break;
                    case 2:
                        {
                        this.state = 820;
                        if (!(!localContext.attrs.has("expression"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"expression\")");
                        }
                        this.state = 821;
                        this.match(ClickHouseParser.EXPRESSION);
                        this.state = 822;
                        this.columnExpression(0);
                        localContext.attrs.add("expression");
                        }
                        break;
                    case 3:
                        {
                        this.state = 825;
                        if (!(!localContext.attrs.has("hierarchical"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"hierarchical\")");
                        }
                        this.state = 826;
                        this.match(ClickHouseParser.HIERARCHICAL);
                        localContext.attrs.add("hierarchical");
                        }
                        break;
                    case 4:
                        {
                        this.state = 828;
                        if (!(!localContext.attrs.has("injective"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"injective\")");
                        }
                        this.state = 829;
                        this.match(ClickHouseParser.INJECTIVE);
                        localContext.attrs.add("injective");
                        }
                        break;
                    case 5:
                        {
                        this.state = 831;
                        if (!(!localContext.attrs.has("is_object_id"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"is_object_id\")");
                        }
                        this.state = 832;
                        this.match(ClickHouseParser.IS_OBJECT_ID);
                        localContext.attrs.add("is_object_id");
                        }
                        break;
                    }
                    }
                }
                this.state = 838;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 86, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryEngineClause(): DictionaryEngineClauseContext {
        let localContext = new DictionaryEngineClauseContext(this.context, this.state);
        this.enterRule(localContext, 50, ClickHouseParser.RULE_dictionaryEngineClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 840;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 87, this.context) ) {
            case 1:
                {
                this.state = 839;
                this.dictionaryPrimaryKeyClause();
                }
                break;
            }
            this.state = 864;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 89, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 862;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 88, this.context) ) {
                    case 1:
                        {
                        this.state = 842;
                        if (!(!localContext.clauses.has("source"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"source\")");
                        }
                        this.state = 843;
                        this.sourceClause();
                        localContext.clauses.add("source");
                        }
                        break;
                    case 2:
                        {
                        this.state = 846;
                        if (!(!localContext.clauses.has("lifetime"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"lifetime\")");
                        }
                        this.state = 847;
                        this.lifetimeClause();
                        localContext.clauses.add("lifetime");
                        }
                        break;
                    case 3:
                        {
                        this.state = 850;
                        if (!(!localContext.clauses.has("layout"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"layout\")");
                        }
                        this.state = 851;
                        this.layoutClause();
                        localContext.clauses.add("layout");
                        }
                        break;
                    case 4:
                        {
                        this.state = 854;
                        if (!(!localContext.clauses.has("range"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"range\")");
                        }
                        this.state = 855;
                        this.rangeClause();
                        localContext.clauses.add("range");
                        }
                        break;
                    case 5:
                        {
                        this.state = 858;
                        if (!(!localContext.clauses.has("settings"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"settings\")");
                        }
                        this.state = 859;
                        this.dictionarySettingsClause();
                        localContext.clauses.add("settings");
                        }
                        break;
                    }
                    }
                }
                this.state = 866;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 89, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryPrimaryKeyClause(): DictionaryPrimaryKeyClauseContext {
        let localContext = new DictionaryPrimaryKeyClauseContext(this.context, this.state);
        this.enterRule(localContext, 52, ClickHouseParser.RULE_dictionaryPrimaryKeyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 867;
            this.match(ClickHouseParser.PRIMARY);
            this.state = 868;
            this.match(ClickHouseParser.KEY);
            this.state = 869;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext {
        let localContext = new DictionaryArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 54, ClickHouseParser.RULE_dictionaryArgumentExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 871;
            this.identifier();
            this.state = 878;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 872;
                this.identifier();
                this.state = 875;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 284) {
                    {
                    this.state = 873;
                    this.match(ClickHouseParser.LPAREN);
                    this.state = 874;
                    this.match(ClickHouseParser.RPAREN);
                    }
                }

                }
                break;
            case ClickHouseParser.INF:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.NULL_SQL:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.STRING_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.PLUS:
                {
                this.state = 877;
                this.literal();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceClause(): SourceClauseContext {
        let localContext = new SourceClauseContext(this.context, this.state);
        this.enterRule(localContext, 56, ClickHouseParser.RULE_sourceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 880;
            this.match(ClickHouseParser.SOURCE);
            this.state = 881;
            this.match(ClickHouseParser.LPAREN);
            this.state = 882;
            this.identifier();
            this.state = 883;
            this.match(ClickHouseParser.LPAREN);
            this.state = 887;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294705151) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2146303999) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 7) !== 0)) {
                {
                {
                this.state = 884;
                this.dictionaryArgumentExpression();
                }
                }
                this.state = 889;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 890;
            this.match(ClickHouseParser.RPAREN);
            this.state = 891;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lifetimeClause(): LifetimeClauseContext {
        let localContext = new LifetimeClauseContext(this.context, this.state);
        this.enterRule(localContext, 58, ClickHouseParser.RULE_lifetimeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 893;
            this.match(ClickHouseParser.LIFETIME);
            this.state = 894;
            this.match(ClickHouseParser.LPAREN);
            this.state = 904;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.DECIMAL_LITERAL:
                {
                this.state = 895;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case ClickHouseParser.MIN:
                {
                this.state = 896;
                this.match(ClickHouseParser.MIN);
                this.state = 897;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 898;
                this.match(ClickHouseParser.MAX);
                this.state = 899;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case ClickHouseParser.MAX:
                {
                this.state = 900;
                this.match(ClickHouseParser.MAX);
                this.state = 901;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 902;
                this.match(ClickHouseParser.MIN);
                this.state = 903;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 906;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public layoutClause(): LayoutClauseContext {
        let localContext = new LayoutClauseContext(this.context, this.state);
        this.enterRule(localContext, 60, ClickHouseParser.RULE_layoutClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 908;
            this.match(ClickHouseParser.LAYOUT);
            this.state = 909;
            this.match(ClickHouseParser.LPAREN);
            this.state = 910;
            this.identifier();
            this.state = 911;
            this.match(ClickHouseParser.LPAREN);
            this.state = 915;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294705151) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2146303999) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 7) !== 0)) {
                {
                {
                this.state = 912;
                this.dictionaryArgumentExpression();
                }
                }
                this.state = 917;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 918;
            this.match(ClickHouseParser.RPAREN);
            this.state = 919;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangeClause(): RangeClauseContext {
        let localContext = new RangeClauseContext(this.context, this.state);
        this.enterRule(localContext, 62, ClickHouseParser.RULE_rangeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 921;
            this.match(ClickHouseParser.RANGE);
            this.state = 922;
            this.match(ClickHouseParser.LPAREN);
            this.state = 933;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.MIN:
                {
                this.state = 923;
                this.match(ClickHouseParser.MIN);
                this.state = 924;
                this.identifier();
                this.state = 925;
                this.match(ClickHouseParser.MAX);
                this.state = 926;
                this.identifier();
                }
                break;
            case ClickHouseParser.MAX:
                {
                this.state = 928;
                this.match(ClickHouseParser.MAX);
                this.state = 929;
                this.identifier();
                this.state = 930;
                this.match(ClickHouseParser.MIN);
                this.state = 931;
                this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 935;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionarySettingsClause(): DictionarySettingsClauseContext {
        let localContext = new DictionarySettingsClauseContext(this.context, this.state);
        this.enterRule(localContext, 64, ClickHouseParser.RULE_dictionarySettingsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 937;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 938;
            this.match(ClickHouseParser.LPAREN);
            this.state = 939;
            this.settingExpressionList();
            this.state = 940;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterClause(): ClusterClauseContext {
        let localContext = new ClusterClauseContext(this.context, this.state);
        this.enterRule(localContext, 66, ClickHouseParser.RULE_clusterClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 942;
            this.match(ClickHouseParser.ON);
            this.state = 943;
            this.match(ClickHouseParser.CLUSTER);
            this.state = 946;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 944;
                this.identifier();
                }
                break;
            case ClickHouseParser.STRING_LITERAL:
                {
                this.state = 945;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uuidClause(): UuidClauseContext {
        let localContext = new UuidClauseContext(this.context, this.state);
        this.enterRule(localContext, 68, ClickHouseParser.RULE_uuidClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 948;
            this.match(ClickHouseParser.UUID);
            this.state = 949;
            this.match(ClickHouseParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public destinationClause(): DestinationClauseContext {
        let localContext = new DestinationClauseContext(this.context, this.state);
        this.enterRule(localContext, 70, ClickHouseParser.RULE_destinationClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 951;
            this.match(ClickHouseParser.TO);
            this.state = 952;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subqueryClause(): SubqueryClauseContext {
        let localContext = new SubqueryClauseContext(this.context, this.state);
        this.enterRule(localContext, 72, ClickHouseParser.RULE_subqueryClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 954;
            this.match(ClickHouseParser.AS);
            this.state = 955;
            this.selectUnionStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSchemaClause(): TableSchemaClauseContext {
        let localContext = new TableSchemaClauseContext(this.context, this.state);
        this.enterRule(localContext, 74, ClickHouseParser.RULE_tableSchemaClause);
        let _la: number;
        try {
            this.state = 972;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 98, this.context) ) {
            case 1:
                localContext = new SchemaDescriptionClauseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 957;
                this.match(ClickHouseParser.LPAREN);
                this.state = 958;
                this.tableElementExpression();
                this.state = 963;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 273) {
                    {
                    {
                    this.state = 959;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 960;
                    this.tableElementExpression();
                    }
                    }
                    this.state = 965;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 966;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 2:
                localContext = new SchemaAsTableClauseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 968;
                this.match(ClickHouseParser.AS);
                this.state = 969;
                this.tableIdentifier();
                }
                break;
            case 3:
                localContext = new SchemaAsFunctionClauseContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 970;
                this.match(ClickHouseParser.AS);
                this.state = 971;
                this.tableFunctionExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineClause(): EngineClauseContext {
        let localContext = new EngineClauseContext(this.context, this.state);
        this.enterRule(localContext, 76, ClickHouseParser.RULE_engineClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 974;
            this.engineExpression();
            this.state = 1001;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 100, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 999;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 99, this.context) ) {
                    case 1:
                        {
                        this.state = 975;
                        if (!(!localContext.clauses.has("orderByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"orderByClause\")");
                        }
                        this.state = 976;
                        this.orderByClause();
                        localContext.clauses.add("orderByClause");
                        }
                        break;
                    case 2:
                        {
                        this.state = 979;
                        if (!(!localContext.clauses.has("partitionByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"partitionByClause\")");
                        }
                        this.state = 980;
                        this.partitionByClause();
                        localContext.clauses.add("partitionByClause");
                        			
                        }
                        break;
                    case 3:
                        {
                        this.state = 983;
                        if (!(!localContext.clauses.has("primaryKeyClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"primaryKeyClause\")");
                        }
                        this.state = 984;
                        this.primaryKeyClause();
                        localContext.clauses.add("primaryKeyClause");
                        			
                        }
                        break;
                    case 4:
                        {
                        this.state = 987;
                        if (!(!localContext.clauses.has("sampleByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"sampleByClause\")");
                        }
                        this.state = 988;
                        this.sampleByClause();
                        localContext.clauses.add("sampleByClause");
                        }
                        break;
                    case 5:
                        {
                        this.state = 991;
                        if (!(!localContext.clauses.has("ttlClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"ttlClause\")");
                        }
                        this.state = 992;
                        this.ttlClause();
                        localContext.clauses.add("ttlClause");
                        }
                        break;
                    case 6:
                        {
                        this.state = 995;
                        if (!(!localContext.clauses.has("settingsClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"settingsClause\")");
                        }
                        this.state = 996;
                        this.settingsClause();
                        localContext.clauses.add("settingsClause");
                        }
                        break;
                    }
                    }
                }
                this.state = 1003;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 100, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionByClause(): PartitionByClauseContext {
        let localContext = new PartitionByClauseContext(this.context, this.state);
        this.enterRule(localContext, 78, ClickHouseParser.RULE_partitionByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1004;
            this.match(ClickHouseParser.PARTITION);
            this.state = 1005;
            this.match(ClickHouseParser.BY);
            this.state = 1006;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primaryKeyClause(): PrimaryKeyClauseContext {
        let localContext = new PrimaryKeyClauseContext(this.context, this.state);
        this.enterRule(localContext, 80, ClickHouseParser.RULE_primaryKeyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1008;
            this.match(ClickHouseParser.PRIMARY);
            this.state = 1009;
            this.match(ClickHouseParser.KEY);
            this.state = 1010;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleByClause(): SampleByClauseContext {
        let localContext = new SampleByClauseContext(this.context, this.state);
        this.enterRule(localContext, 82, ClickHouseParser.RULE_sampleByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1012;
            this.match(ClickHouseParser.SAMPLE);
            this.state = 1013;
            this.match(ClickHouseParser.BY);
            this.state = 1014;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ttlClause(): TtlClauseContext {
        let localContext = new TtlClauseContext(this.context, this.state);
        this.enterRule(localContext, 84, ClickHouseParser.RULE_ttlClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1016;
            this.match(ClickHouseParser.TTL);
            this.state = 1017;
            this.ttlExpression();
            this.state = 1022;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 101, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1018;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1019;
                    this.ttlExpression();
                    }
                    }
                }
                this.state = 1024;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 101, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineExpression(): EngineExpressionContext {
        let localContext = new EngineExpressionContext(this.context, this.state);
        this.enterRule(localContext, 86, ClickHouseParser.RULE_engineExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1025;
            this.match(ClickHouseParser.ENGINE);
            this.state = 1027;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 278) {
                {
                this.state = 1026;
                this.match(ClickHouseParser.EQ_SINGLE);
                }
            }

            this.state = 1029;
            this.identifierOrNull();
            this.state = 1035;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 104, this.context) ) {
            case 1:
                {
                this.state = 1030;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1032;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2147483647) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 289506047) !== 0)) {
                    {
                    this.state = 1031;
                    this.columnExpressionList();
                    }
                }

                this.state = 1034;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElementExpression(): TableElementExpressionContext {
        let localContext = new TableElementExpressionContext(this.context, this.state);
        this.enterRule(localContext, 88, ClickHouseParser.RULE_tableElementExpression);
        try {
            this.state = 1047;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 105, this.context) ) {
            case 1:
                localContext = new TableElementExpressionColumnContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1037;
                this.tableColumnDefinition();
                }
                break;
            case 2:
                localContext = new TableElementExpressionConstraintContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1038;
                this.match(ClickHouseParser.CONSTRAINT);
                this.state = 1039;
                this.identifier();
                this.state = 1040;
                this.match(ClickHouseParser.CHECK);
                this.state = 1041;
                this.columnExpression(0);
                }
                break;
            case 3:
                localContext = new TableElementExpressionIndexContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1043;
                this.match(ClickHouseParser.INDEX);
                this.state = 1044;
                this.tableIndexDefinition();
                }
                break;
            case 4:
                localContext = new TableElementExpressionProjectionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1045;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 1046;
                this.tableProjectionDefinition();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        let localContext = new TableColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 90, ClickHouseParser.RULE_tableColumnDefinition);
        let _la: number;
        try {
            this.state = 1081;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 114, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1049;
                this.columnIdentifier();
                this.state = 1050;
                this.columnTypeExpression();
                this.state = 1052;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3 || _la === 38 || _la === 104) {
                    {
                    this.state = 1051;
                    this.tableColumnPropertyExpression();
                    }
                }

                this.state = 1056;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 1054;
                    this.match(ClickHouseParser.COMMENT);
                    this.state = 1055;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 1059;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 24) {
                    {
                    this.state = 1058;
                    this.codecExpression();
                    }
                }

                this.state = 1063;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 1061;
                    this.match(ClickHouseParser.TTL);
                    this.state = 1062;
                    this.columnExpression(0);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1065;
                this.columnIdentifier();
                this.state = 1067;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 110, this.context) ) {
                case 1:
                    {
                    this.state = 1066;
                    this.columnTypeExpression();
                    }
                    break;
                }
                this.state = 1069;
                this.tableColumnPropertyExpression();
                this.state = 1072;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 1070;
                    this.match(ClickHouseParser.COMMENT);
                    this.state = 1071;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 1075;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 24) {
                    {
                    this.state = 1074;
                    this.codecExpression();
                    }
                }

                this.state = 1079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 1077;
                    this.match(ClickHouseParser.TTL);
                    this.state = 1078;
                    this.columnExpression(0);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnPropertyExpression(): TableColumnPropertyExpressionContext {
        let localContext = new TableColumnPropertyExpressionContext(this.context, this.state);
        this.enterRule(localContext, 92, ClickHouseParser.RULE_tableColumnPropertyExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1083;
            _la = this.tokenStream.LA(1);
            if(!(_la === 3 || _la === 38 || _la === 104)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1084;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIndexDefinition(): TableIndexDefinitionContext {
        let localContext = new TableIndexDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 94, ClickHouseParser.RULE_tableIndexDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1086;
            this.columnIdentifier();
            this.state = 1087;
            this.columnExpression(0);
            this.state = 1088;
            this.match(ClickHouseParser.TYPE);
            this.state = 1089;
            this.columnTypeExpression();
            this.state = 1090;
            this.match(ClickHouseParser.GRANULARITY);
            this.state = 1091;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext {
        let localContext = new TableProjectionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 96, ClickHouseParser.RULE_tableProjectionDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1093;
            this.columnIdentifier();
            this.state = 1094;
            this.projectionSelectStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public codecExpression(): CodecExpressionContext {
        let localContext = new CodecExpressionContext(this.context, this.state);
        this.enterRule(localContext, 98, ClickHouseParser.RULE_codecExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1096;
            this.match(ClickHouseParser.CODEC);
            this.state = 1097;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1098;
            this.codecArgExpression();
            this.state = 1103;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 1099;
                this.match(ClickHouseParser.COMMA);
                this.state = 1100;
                this.codecArgExpression();
                }
                }
                this.state = 1105;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1106;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public codecArgExpression(): CodecArgExpressionContext {
        let localContext = new CodecArgExpressionContext(this.context, this.state);
        this.enterRule(localContext, 100, ClickHouseParser.RULE_codecArgExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1108;
            this.identifier();
            this.state = 1114;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 284) {
                {
                this.state = 1109;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1111;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2147483647) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 289506047) !== 0)) {
                    {
                    this.state = 1110;
                    this.columnExpressionList();
                    }
                }

                this.state = 1113;
                this.match(ClickHouseParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ttlExpression(): TtlExpressionContext {
        let localContext = new TtlExpressionContext(this.context, this.state);
        this.enterRule(localContext, 102, ClickHouseParser.RULE_ttlExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1116;
            this.columnExpression(0);
            this.state = 1124;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 118, this.context) ) {
            case 1:
                {
                this.state = 1117;
                this.match(ClickHouseParser.DELETE);
                }
                break;
            case 2:
                {
                this.state = 1118;
                this.match(ClickHouseParser.TO);
                this.state = 1119;
                this.match(ClickHouseParser.DISK);
                this.state = 1120;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 3:
                {
                this.state = 1121;
                this.match(ClickHouseParser.TO);
                this.state = 1122;
                this.match(ClickHouseParser.VOLUME);
                this.state = 1123;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeStatement(): DescribeStatementContext {
        let localContext = new DescribeStatementContext(this.context, this.state);
        this.enterRule(localContext, 104, ClickHouseParser.RULE_describeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1126;
            _la = this.tokenStream.LA(1);
            if(!(_la === 41 || _la === 43)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1128;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 119, this.context) ) {
            case 1:
                {
                this.state = 1127;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 1130;
            this.tableExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropStatement(): DropStatementContext {
        let localContext = new DropStatementContext(this.context, this.state);
        this.enterRule(localContext, 106, ClickHouseParser.RULE_dropStatement);
        let _la: number;
        try {
            this.state = 1163;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 127, this.context) ) {
            case 1:
                localContext = new DropDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1132;
                _la = this.tokenStream.LA(1);
                if(!(_la === 44 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1133;
                this.match(ClickHouseParser.DATABASE);
                this.state = 1136;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
                case 1:
                    {
                    this.state = 1134;
                    this.match(ClickHouseParser.IF);
                    this.state = 1135;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 1138;
                this.databaseIdentifier();
                this.state = 1140;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 1139;
                    this.clusterClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new DropTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1142;
                _la = this.tokenStream.LA(1);
                if(!(_la === 44 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1149;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.DICTIONARY:
                    {
                    this.state = 1143;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case ClickHouseParser.TABLE:
                case ClickHouseParser.TEMPORARY:
                    {
                    this.state = 1145;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 164) {
                        {
                        this.state = 1144;
                        this.match(ClickHouseParser.TEMPORARY);
                        }
                    }

                    this.state = 1147;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                case ClickHouseParser.VIEW:
                    {
                    this.state = 1148;
                    this.match(ClickHouseParser.VIEW);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1153;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 124, this.context) ) {
                case 1:
                    {
                    this.state = 1151;
                    this.match(ClickHouseParser.IF);
                    this.state = 1152;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 1155;
                this.tableIdentifier();
                this.state = 1157;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 1156;
                    this.clusterClause();
                    }
                }

                this.state = 1161;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 114) {
                    {
                    this.state = 1159;
                    this.match(ClickHouseParser.NO);
                    this.state = 1160;
                    this.match(ClickHouseParser.DELAY);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existsStatement(): ExistsStatementContext {
        let localContext = new ExistsStatementContext(this.context, this.state);
        this.enterRule(localContext, 108, ClickHouseParser.RULE_existsStatement);
        let _la: number;
        try {
            this.state = 1178;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 130, this.context) ) {
            case 1:
                localContext = new ExistsDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1165;
                this.match(ClickHouseParser.EXISTS);
                this.state = 1166;
                this.match(ClickHouseParser.DATABASE);
                this.state = 1167;
                this.databaseIdentifier();
                }
                break;
            case 2:
                localContext = new ExistsTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1168;
                this.match(ClickHouseParser.EXISTS);
                this.state = 1175;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 129, this.context) ) {
                case 1:
                    {
                    this.state = 1169;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case 2:
                    {
                    this.state = 1171;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 164) {
                        {
                        this.state = 1170;
                        this.match(ClickHouseParser.TEMPORARY);
                        }
                    }

                    this.state = 1173;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                case 3:
                    {
                    this.state = 1174;
                    this.match(ClickHouseParser.VIEW);
                    }
                    break;
                }
                this.state = 1177;
                this.tableIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainStatement(): ExplainStatementContext {
        let localContext = new ExplainStatementContext(this.context, this.state);
        this.enterRule(localContext, 110, ClickHouseParser.RULE_explainStatement);
        try {
            this.state = 1201;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 131, this.context) ) {
            case 1:
                localContext = new ExplainDefaultStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1180;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1181;
                this.notInsertStatement();
                }
                break;
            case 2:
                localContext = new ExplainASTStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1182;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1183;
                this.match(ClickHouseParser.AST);
                this.state = 1184;
                this.notInsertStatement();
                }
                break;
            case 3:
                localContext = new ExplainSyntaxStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1185;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1186;
                this.match(ClickHouseParser.SYNTAX);
                this.state = 1187;
                this.notInsertStatement();
                }
                break;
            case 4:
                localContext = new ExplainPipelineStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1188;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1189;
                this.match(ClickHouseParser.PIPELINE);
                this.state = 1190;
                this.notInsertStatement();
                }
                break;
            case 5:
                localContext = new ExplainPlanStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1191;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1192;
                this.match(ClickHouseParser.PLAN);
                this.state = 1193;
                this.notInsertStatement();
                }
                break;
            case 6:
                localContext = new ExplainQueryTreeStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1194;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1195;
                this.match(ClickHouseParser.QUERY);
                this.state = 1196;
                this.match(ClickHouseParser.TREE);
                this.state = 1197;
                this.notInsertStatement();
                }
                break;
            case 7:
                localContext = new ExplainEstimateStatementContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1198;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1199;
                this.match(ClickHouseParser.ESTIMATE);
                this.state = 1200;
                this.notInsertStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantStatement(): GrantStatementContext {
        let localContext = new GrantStatementContext(this.context, this.state);
        this.enterRule(localContext, 112, ClickHouseParser.RULE_grantStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1203;
            this.match(ClickHouseParser.GRANT);
            this.state = 1205;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 1204;
                this.clusterClause();
                }
            }

            this.state = 1207;
            this.privilege();
            this.state = 1212;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 1208;
                this.match(ClickHouseParser.COMMA);
                this.state = 1209;
                this.privilege();
                }
                }
                this.state = 1214;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1215;
            this.match(ClickHouseParser.ON);
            this.state = 1226;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 136, this.context) ) {
            case 1:
                {
                this.state = 1216;
                this.databaseIdentifier();
                }
                break;
            case 2:
                {
                this.state = 1217;
                this.tableIdentifier();
                }
                break;
            case 3:
                {
                this.state = 1220;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 134, this.context) ) {
                case 1:
                    {
                    this.state = 1218;
                    this.match(ClickHouseParser.ASTERISK);
                    this.state = 1219;
                    this.match(ClickHouseParser.DOT);
                    }
                    break;
                }
                this.state = 1224;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.ASTERISK:
                    {
                    this.state = 1222;
                    this.match(ClickHouseParser.ASTERISK);
                    }
                    break;
                case ClickHouseParser.AFTER:
                case ClickHouseParser.ALIAS:
                case ClickHouseParser.ALL:
                case ClickHouseParser.ALTER:
                case ClickHouseParser.AND:
                case ClickHouseParser.ANTI:
                case ClickHouseParser.ANY:
                case ClickHouseParser.ARRAY:
                case ClickHouseParser.AS:
                case ClickHouseParser.ASCENDING:
                case ClickHouseParser.ASOF:
                case ClickHouseParser.AST:
                case ClickHouseParser.ASYNC:
                case ClickHouseParser.ATTACH:
                case ClickHouseParser.BETWEEN:
                case ClickHouseParser.BOTH:
                case ClickHouseParser.BY:
                case ClickHouseParser.CASE:
                case ClickHouseParser.CAST:
                case ClickHouseParser.CHECK:
                case ClickHouseParser.CLEAR:
                case ClickHouseParser.CLUSTER:
                case ClickHouseParser.CODEC:
                case ClickHouseParser.COLLATE:
                case ClickHouseParser.COLUMN:
                case ClickHouseParser.COMMENT:
                case ClickHouseParser.CONSTRAINT:
                case ClickHouseParser.CREATE:
                case ClickHouseParser.CROSS:
                case ClickHouseParser.CUBE:
                case ClickHouseParser.CURRENT:
                case ClickHouseParser.DATABASE:
                case ClickHouseParser.DATABASES:
                case ClickHouseParser.DATE:
                case ClickHouseParser.DAY:
                case ClickHouseParser.DEDUPLICATE:
                case ClickHouseParser.DEFAULT:
                case ClickHouseParser.DELAY:
                case ClickHouseParser.DELETE:
                case ClickHouseParser.DESC:
                case ClickHouseParser.DESCENDING:
                case ClickHouseParser.DESCRIBE:
                case ClickHouseParser.DETACH:
                case ClickHouseParser.DICTIONARIES:
                case ClickHouseParser.DICTIONARY:
                case ClickHouseParser.DISK:
                case ClickHouseParser.DISTINCT:
                case ClickHouseParser.DISTRIBUTED:
                case ClickHouseParser.DROP:
                case ClickHouseParser.ELSE:
                case ClickHouseParser.END:
                case ClickHouseParser.ENGINE:
                case ClickHouseParser.EVENTS:
                case ClickHouseParser.EXISTS:
                case ClickHouseParser.EXPLAIN:
                case ClickHouseParser.EXPRESSION:
                case ClickHouseParser.EXTRACT:
                case ClickHouseParser.FETCHES:
                case ClickHouseParser.FINAL:
                case ClickHouseParser.FIRST:
                case ClickHouseParser.FLUSH:
                case ClickHouseParser.FOLLOWING:
                case ClickHouseParser.FOR:
                case ClickHouseParser.FORMAT:
                case ClickHouseParser.FREEZE:
                case ClickHouseParser.FROM:
                case ClickHouseParser.FULL:
                case ClickHouseParser.FUNCTION:
                case ClickHouseParser.GLOBAL:
                case ClickHouseParser.GRANULARITY:
                case ClickHouseParser.GROUP:
                case ClickHouseParser.HAVING:
                case ClickHouseParser.HIERARCHICAL:
                case ClickHouseParser.HOUR:
                case ClickHouseParser.ID:
                case ClickHouseParser.IF:
                case ClickHouseParser.ILIKE:
                case ClickHouseParser.IN:
                case ClickHouseParser.INDEX:
                case ClickHouseParser.INJECTIVE:
                case ClickHouseParser.INNER:
                case ClickHouseParser.INSERT:
                case ClickHouseParser.INTERVAL:
                case ClickHouseParser.INTO:
                case ClickHouseParser.IS:
                case ClickHouseParser.IS_OBJECT_ID:
                case ClickHouseParser.JOIN:
                case ClickHouseParser.KEY:
                case ClickHouseParser.KILL:
                case ClickHouseParser.LAST:
                case ClickHouseParser.LAYOUT:
                case ClickHouseParser.LEADING:
                case ClickHouseParser.LEFT:
                case ClickHouseParser.LIFETIME:
                case ClickHouseParser.LIKE:
                case ClickHouseParser.LIMIT:
                case ClickHouseParser.LIVE:
                case ClickHouseParser.LOCAL:
                case ClickHouseParser.LOGS:
                case ClickHouseParser.MATERIALIZE:
                case ClickHouseParser.MATERIALIZED:
                case ClickHouseParser.MAX:
                case ClickHouseParser.MERGES:
                case ClickHouseParser.MIN:
                case ClickHouseParser.MINUTE:
                case ClickHouseParser.MODIFY:
                case ClickHouseParser.MONTH:
                case ClickHouseParser.MOVE:
                case ClickHouseParser.MUTATION:
                case ClickHouseParser.NO:
                case ClickHouseParser.NOT:
                case ClickHouseParser.NULLS:
                case ClickHouseParser.OFFSET:
                case ClickHouseParser.ON:
                case ClickHouseParser.OPTIMIZE:
                case ClickHouseParser.OR:
                case ClickHouseParser.ORDER:
                case ClickHouseParser.OUTER:
                case ClickHouseParser.OUTFILE:
                case ClickHouseParser.OVER:
                case ClickHouseParser.PARTITION:
                case ClickHouseParser.POPULATE:
                case ClickHouseParser.PRECEDING:
                case ClickHouseParser.PREWHERE:
                case ClickHouseParser.PRIMARY:
                case ClickHouseParser.QUARTER:
                case ClickHouseParser.RANGE:
                case ClickHouseParser.RELOAD:
                case ClickHouseParser.REMOVE:
                case ClickHouseParser.RENAME:
                case ClickHouseParser.REPLACE:
                case ClickHouseParser.REPLICA:
                case ClickHouseParser.REPLICATED:
                case ClickHouseParser.RIGHT:
                case ClickHouseParser.ROLLUP:
                case ClickHouseParser.ROW:
                case ClickHouseParser.ROWS:
                case ClickHouseParser.SAMPLE:
                case ClickHouseParser.SECOND:
                case ClickHouseParser.SELECT:
                case ClickHouseParser.SEMI:
                case ClickHouseParser.SENDS:
                case ClickHouseParser.SET:
                case ClickHouseParser.SETTINGS:
                case ClickHouseParser.SHOW:
                case ClickHouseParser.SOURCE:
                case ClickHouseParser.START:
                case ClickHouseParser.STOP:
                case ClickHouseParser.SUBSTRING:
                case ClickHouseParser.SYNC:
                case ClickHouseParser.SYNTAX:
                case ClickHouseParser.SYSTEM:
                case ClickHouseParser.TABLE:
                case ClickHouseParser.TABLES:
                case ClickHouseParser.TEMPORARY:
                case ClickHouseParser.TEST:
                case ClickHouseParser.THEN:
                case ClickHouseParser.TIES:
                case ClickHouseParser.TIMEOUT:
                case ClickHouseParser.TIMESTAMP:
                case ClickHouseParser.TO:
                case ClickHouseParser.TOP:
                case ClickHouseParser.TOTALS:
                case ClickHouseParser.TRAILING:
                case ClickHouseParser.TRIM:
                case ClickHouseParser.TRUNCATE:
                case ClickHouseParser.TTL:
                case ClickHouseParser.TYPE:
                case ClickHouseParser.UNBOUNDED:
                case ClickHouseParser.UNION:
                case ClickHouseParser.UPDATE:
                case ClickHouseParser.USE:
                case ClickHouseParser.USING:
                case ClickHouseParser.UUID:
                case ClickHouseParser.VALUES:
                case ClickHouseParser.VIEW:
                case ClickHouseParser.VOLUME:
                case ClickHouseParser.WATCH:
                case ClickHouseParser.WEEK:
                case ClickHouseParser.WHEN:
                case ClickHouseParser.WHERE:
                case ClickHouseParser.WINDOW:
                case ClickHouseParser.WITH:
                case ClickHouseParser.YEAR:
                case ClickHouseParser.GRANT:
                case ClickHouseParser.USER:
                case ClickHouseParser.FETCH:
                case ClickHouseParser.REFRESH:
                case ClickHouseParser.POLICY:
                case ClickHouseParser.QUOTA:
                case ClickHouseParser.ROLE:
                case ClickHouseParser.PROFILE:
                case ClickHouseParser.ARBITRARY:
                case ClickHouseParser.COLUMNS:
                case ClickHouseParser.CURRENT_USER:
                case ClickHouseParser.ACCESS:
                case ClickHouseParser.SHOW_USERS:
                case ClickHouseParser.SHOW_ROLES:
                case ClickHouseParser.SHOW_ROW_POLICIES:
                case ClickHouseParser.SHOW_QUOTAS:
                case ClickHouseParser.SHOW_SETTINGS_PROFILES:
                case ClickHouseParser.SHUTDOWN:
                case ClickHouseParser.CACHE:
                case ClickHouseParser.DNS:
                case ClickHouseParser.MARK:
                case ClickHouseParser.PART:
                case ClickHouseParser.UNCOMPRESSED:
                case ClickHouseParser.CONFIG:
                case ClickHouseParser.EMBEDDED:
                case ClickHouseParser.FUNCTIONS:
                case ClickHouseParser.MOVES:
                case ClickHouseParser.REPLICATION:
                case ClickHouseParser.QUEUES:
                case ClickHouseParser.RESTART:
                case ClickHouseParser.DICTGET:
                case ClickHouseParser.DICTGETHIERARCHY:
                case ClickHouseParser.DICTHAS:
                case ClickHouseParser.DICTISIN:
                case ClickHouseParser.MANAGEMENT:
                case ClickHouseParser.ADMIN:
                case ClickHouseParser.INTROSPECTION:
                case ClickHouseParser.ADDRESSTOLINE:
                case ClickHouseParser.ADDRESSTOSYMBOL:
                case ClickHouseParser.DEMANGLE:
                case ClickHouseParser.SOURCES:
                case ClickHouseParser.FILE:
                case ClickHouseParser.URL:
                case ClickHouseParser.REMOTE:
                case ClickHouseParser.MYSQL:
                case ClickHouseParser.ODBC:
                case ClickHouseParser.JDBC:
                case ClickHouseParser.HDFS:
                case ClickHouseParser.S3:
                case ClickHouseParser.SETTING:
                case ClickHouseParser.OPTION:
                case ClickHouseParser.NONE:
                case ClickHouseParser.JSON_FALSE:
                case ClickHouseParser.JSON_TRUE:
                case ClickHouseParser.IDENTIFIER:
                    {
                    this.state = 1223;
                    this.identifier();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            this.state = 1228;
            this.match(ClickHouseParser.TO);
            this.state = 1229;
            this.userExpressionList();
            this.state = 1233;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 137, this.context) ) {
            case 1:
                {
                this.state = 1230;
                this.match(ClickHouseParser.WITH);
                this.state = 1231;
                this.match(ClickHouseParser.GRANT);
                this.state = 1232;
                this.match(ClickHouseParser.OPTION);
                }
                break;
            }
            this.state = 1238;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 1235;
                this.match(ClickHouseParser.WITH);
                this.state = 1236;
                this.match(ClickHouseParser.REPLACE);
                this.state = 1237;
                this.match(ClickHouseParser.OPTION);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userExpressionList(): UserExpressionListContext {
        let localContext = new UserExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 114, ClickHouseParser.RULE_userExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1240;
            this.userIdentifier();
            this.state = 1245;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 1241;
                this.match(ClickHouseParser.COMMA);
                this.state = 1242;
                this.userIdentifier();
                }
                }
                this.state = 1247;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userIdentifier(): UserIdentifierContext {
        let localContext = new UserIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 116, ClickHouseParser.RULE_userIdentifier);
        try {
            this.state = 1250;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 140, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1248;
                this.match(ClickHouseParser.CURRENT_USER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1249;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectPrivilege(): SelectPrivilegeContext {
        let localContext = new SelectPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 118, ClickHouseParser.RULE_selectPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1252;
            this.match(ClickHouseParser.SELECT);
            this.state = 1254;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 284) {
                {
                this.state = 1253;
                this.columnsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertPrivilege(): InsertPrivilegeContext {
        let localContext = new InsertPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 120, ClickHouseParser.RULE_insertPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1256;
            this.match(ClickHouseParser.INSERT);
            this.state = 1258;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 284) {
                {
                this.state = 1257;
                this.columnsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createPrivilege(): CreatePrivilegeContext {
        let localContext = new CreatePrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 122, ClickHouseParser.RULE_createPrivilege);
        let _la: number;
        try {
            this.state = 1271;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 145, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1260;
                this.match(ClickHouseParser.CREATE);
                this.state = 1262;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33 || _la === 46 || _la === 70 || _la === 162 || _la === 186) {
                    {
                    this.state = 1261;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 33 || _la === 46 || _la === 70 || _la === 162 || _la === 186)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1264;
                this.match(ClickHouseParser.CREATE);
                this.state = 1268;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.ARBITRARY:
                    {
                    this.state = 1265;
                    this.match(ClickHouseParser.ARBITRARY);
                    this.state = 1266;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                case ClickHouseParser.TEMPORARY:
                    {
                    this.state = 1267;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                case ClickHouseParser.TABLE:
                    break;
                default:
                    break;
                }
                this.state = 1270;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropPrivilege(): DropPrivilegeContext {
        let localContext = new DropPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 124, ClickHouseParser.RULE_dropPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1273;
            this.match(ClickHouseParser.DROP);
            this.state = 1275;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 33 || _la === 46 || _la === 162 || _la === 186) {
                {
                this.state = 1274;
                _la = this.tokenStream.LA(1);
                if(!(_la === 33 || _la === 46 || _la === 162 || _la === 186)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showPrivilege(): ShowPrivilegeContext {
        let localContext = new ShowPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 126, ClickHouseParser.RULE_showPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1277;
            this.match(ClickHouseParser.SHOW);
            this.state = 1279;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34 || _la === 45 || _la === 163 || _la === 204) {
                {
                this.state = 1278;
                _la = this.tokenStream.LA(1);
                if(!(_la === 34 || _la === 45 || _la === 163 || _la === 204)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public introspectionPrivilege(): IntrospectionPrivilegeContext {
        let localContext = new IntrospectionPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 128, ClickHouseParser.RULE_introspectionPrivilege);
        let _la: number;
        try {
            this.state = 1289;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.INTROSPECTION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1281;
                this.match(ClickHouseParser.INTROSPECTION);
                this.state = 1283;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 1282;
                    this.match(ClickHouseParser.FUNCTIONS);
                    }
                }

                }
                break;
            case ClickHouseParser.ADDRESSTOLINE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1285;
                this.match(ClickHouseParser.ADDRESSTOLINE);
                }
                break;
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1286;
                this.match(ClickHouseParser.ADDRESSTOLINEWITHINLINES);
                }
                break;
            case ClickHouseParser.ADDRESSTOSYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1287;
                this.match(ClickHouseParser.ADDRESSTOSYMBOL);
                }
                break;
            case ClickHouseParser.DEMANGLE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1288;
                this.match(ClickHouseParser.DEMANGLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourcePrivilege(): SourcePrivilegeContext {
        let localContext = new SourcePrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 130, ClickHouseParser.RULE_sourcePrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1291;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & 258559) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictPrivilege(): DictPrivilegeContext {
        let localContext = new DictPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 132, ClickHouseParser.RULE_dictPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1293;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterPrivilege(): AlterPrivilegeContext {
        let localContext = new AlterPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 134, ClickHouseParser.RULE_alterPrivilege);
        let _la: number;
        try {
            this.state = 1391;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 167, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1295;
                this.match(ClickHouseParser.ALTER);
                this.state = 1297;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 40 || _la === 181) {
                    {
                    this.state = 1296;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 40 || _la === 181)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 284) {
                    {
                    this.state = 1299;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1302;
                _la = this.tokenStream.LA(1);
                if(!(_la === 40 || _la === 181)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1304;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 284) {
                    {
                    this.state = 1303;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1306;
                this.match(ClickHouseParser.ALTER);
                this.state = 1307;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1308;
                this.match(ClickHouseParser.ALTER);
                this.state = 1310;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 138412034) !== 0) || _la === 50 || _la === 109 || _la === 139) {
                    {
                    this.state = 1309;
                    _la = this.tokenStream.LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 138412034) !== 0) || _la === 50 || _la === 109 || _la === 139)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1312;
                this.match(ClickHouseParser.COLUMN);
                this.state = 1314;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 284) {
                    {
                    this.state = 1313;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1316;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 138412034) !== 0) || _la === 50 || _la === 109 || _la === 139)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1317;
                this.match(ClickHouseParser.COLUMN);
                this.state = 1319;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 284) {
                    {
                    this.state = 1318;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1321;
                this.match(ClickHouseParser.ALTER);
                this.state = 1323;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 22 || _la === 50 || _la === 103) {
                    {
                    this.state = 1322;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 22 || _la === 50 || _la === 103)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1325;
                this.match(ClickHouseParser.INDEX);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1327;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 22 || _la === 50 || _la === 103) {
                    {
                    this.state = 1326;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 22 || _la === 50 || _la === 103)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1329;
                this.match(ClickHouseParser.INDEX);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1330;
                this.match(ClickHouseParser.ALTER);
                this.state = 1332;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 1331;
                    this.match(ClickHouseParser.MODIFY);
                    }
                }

                this.state = 1334;
                _la = this.tokenStream.LA(1);
                if(!(_la === 122 || _la === 147)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1335;
                this.match(ClickHouseParser.BY);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1336;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1337;
                _la = this.tokenStream.LA(1);
                if(!(_la === 122 || _la === 147)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1338;
                this.match(ClickHouseParser.BY);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1340;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 1339;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 1343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 50) {
                    {
                    this.state = 1342;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 50)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1345;
                this.match(ClickHouseParser.CONSTRAINT);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1346;
                this.match(ClickHouseParser.ALTER);
                this.state = 1348;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103 || _la === 109) {
                    {
                    this.state = 1347;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 103 || _la === 109)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1350;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1351;
                _la = this.tokenStream.LA(1);
                if(!(_la === 103 || _la === 109)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1352;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1353;
                this.match(ClickHouseParser.ALTER);
                this.state = 1354;
                this.match(ClickHouseParser.SETTINGS);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1359;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 162, this.context) ) {
                case 1:
                    {
                    this.state = 1355;
                    this.match(ClickHouseParser.ALTER);
                    }
                    break;
                case 2:
                    {
                    this.state = 1356;
                    this.match(ClickHouseParser.ALTER);
                    this.state = 1357;
                    this.match(ClickHouseParser.MODIFY);
                    }
                    break;
                case 3:
                    {
                    this.state = 1358;
                    this.match(ClickHouseParser.MODIFY);
                    }
                    break;
                }
                this.state = 1361;
                this.match(ClickHouseParser.SETTING);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1363;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 1362;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 1365;
                _la = this.tokenStream.LA(1);
                if(!(_la === 111 || _la === 197)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1366;
                _la = this.tokenStream.LA(1);
                if(!(_la === 126 || _la === 216)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1368;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 1367;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 1370;
                this.match(ClickHouseParser.FREEZE);
                this.state = 1371;
                this.match(ClickHouseParser.PARTITION);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1372;
                this.match(ClickHouseParser.ALTER);
                this.state = 1373;
                this.match(ClickHouseParser.VIEW);
                this.state = 1375;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 1374;
                    this.match(ClickHouseParser.REFRESH);
                    }
                }

                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1377;
                this.match(ClickHouseParser.ALTER);
                this.state = 1378;
                this.match(ClickHouseParser.LIVE);
                this.state = 1379;
                this.match(ClickHouseParser.VIEW);
                this.state = 1380;
                this.match(ClickHouseParser.REFRESH);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1381;
                this.match(ClickHouseParser.REFRESH);
                this.state = 1382;
                this.match(ClickHouseParser.VIEW);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1383;
                this.match(ClickHouseParser.ALTER);
                this.state = 1384;
                _la = this.tokenStream.LA(1);
                if(!(_la === 162 || _la === 186)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1385;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1389;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.QUERY:
                    {
                    this.state = 1386;
                    this.match(ClickHouseParser.QUERY);
                    }
                    break;
                case ClickHouseParser.SQL:
                    {
                    this.state = 1387;
                    this.match(ClickHouseParser.SQL);
                    this.state = 1388;
                    this.match(ClickHouseParser.SECURITY);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public accessManagementPrivilege(): AccessManagementPrivilegeContext {
        let localContext = new AccessManagementPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 136, ClickHouseParser.RULE_accessManagementPrivilege);
        let _la: number;
        try {
            this.state = 1453;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 173, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1393;
                this.match(ClickHouseParser.ACCESS);
                this.state = 1394;
                this.match(ClickHouseParser.MANAGEMENT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1395;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1396;
                this.match(ClickHouseParser.USER);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1397;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1398;
                this.match(ClickHouseParser.ROLE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1399;
                this.match(ClickHouseParser.ROLE);
                this.state = 1400;
                this.match(ClickHouseParser.ADMIN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1401;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1403;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 145) {
                    {
                    this.state = 1402;
                    this.match(ClickHouseParser.ROW);
                    }
                }

                this.state = 1405;
                this.match(ClickHouseParser.POLICY);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1406;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1407;
                this.match(ClickHouseParser.QUOTA);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1408;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1410;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 153) {
                    {
                    this.state = 1409;
                    this.match(ClickHouseParser.SETTINGS);
                    }
                }

                this.state = 1412;
                this.match(ClickHouseParser.PROFILE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1413;
                this.match(ClickHouseParser.SHOW);
                this.state = 1414;
                this.match(ClickHouseParser.ACCESS);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1415;
                this.match(ClickHouseParser.SHOW_USERS);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1416;
                this.match(ClickHouseParser.SHOW);
                this.state = 1417;
                this.match(ClickHouseParser.CREATE);
                this.state = 1418;
                this.match(ClickHouseParser.USER);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1419;
                this.match(ClickHouseParser.SHOW_ROLES);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1420;
                this.match(ClickHouseParser.SHOW);
                this.state = 1421;
                this.match(ClickHouseParser.CREATE);
                this.state = 1422;
                this.match(ClickHouseParser.ROLE);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1423;
                this.match(ClickHouseParser.SHOW_ROW_POLICIES);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1424;
                this.match(ClickHouseParser.SHOW);
                this.state = 1425;
                this.match(ClickHouseParser.POLICIES);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1426;
                this.match(ClickHouseParser.SHOW);
                this.state = 1427;
                this.match(ClickHouseParser.CREATE);
                this.state = 1429;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 145) {
                    {
                    this.state = 1428;
                    this.match(ClickHouseParser.ROW);
                    }
                }

                this.state = 1431;
                this.match(ClickHouseParser.POLICY);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1432;
                this.match(ClickHouseParser.SHOW_QUOTAS);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1433;
                this.match(ClickHouseParser.SHOW);
                this.state = 1434;
                this.match(ClickHouseParser.CREATE);
                this.state = 1435;
                this.match(ClickHouseParser.QUOTA);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1436;
                this.match(ClickHouseParser.SHOW_SETTINGS_PROFILES);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1437;
                this.match(ClickHouseParser.SHOW);
                this.state = 1438;
                this.match(ClickHouseParser.PROFILES);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1439;
                this.match(ClickHouseParser.SHOW);
                this.state = 1440;
                this.match(ClickHouseParser.CREATE);
                this.state = 1442;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 153) {
                    {
                    this.state = 1441;
                    this.match(ClickHouseParser.SETTINGS);
                    }
                }

                this.state = 1444;
                this.match(ClickHouseParser.PROFILE);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1446;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29 || _la === 259) {
                    {
                    this.state = 1445;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 29 || _la === 259)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1448;
                this.match(ClickHouseParser.SQL);
                this.state = 1449;
                this.match(ClickHouseParser.SECURITY);
                this.state = 1450;
                this.match(ClickHouseParser.NONE);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1451;
                this.match(ClickHouseParser.SECURITY);
                this.state = 1452;
                this.match(ClickHouseParser.NONE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 138, ClickHouseParser.RULE_privilege);
        try {
            this.state = 1473;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 174, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1455;
                this.selectPrivilege();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1456;
                this.insertPrivilege();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1457;
                this.createPrivilege();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1458;
                this.dropPrivilege();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1459;
                this.match(ClickHouseParser.TRUNCATE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1460;
                this.match(ClickHouseParser.KILL);
                this.state = 1461;
                this.match(ClickHouseParser.QUERY);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1462;
                this.match(ClickHouseParser.OPTIMIZE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1463;
                this.showPrivilege();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1464;
                this.introspectionPrivilege();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1465;
                this.sourcePrivilege();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1466;
                this.dictPrivilege();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1467;
                this.alterPrivilege();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1468;
                this.match(ClickHouseParser.ALL);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1469;
                this.match(ClickHouseParser.NONE);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1470;
                this.match(ClickHouseParser.OPTIMIZE);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1471;
                this.match(ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1472;
                this.accessManagementPrivilege();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertStatement(): InsertStatementContext {
        let localContext = new InsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 140, ClickHouseParser.RULE_insertStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1475;
            this.match(ClickHouseParser.INSERT);
            this.state = 1476;
            this.match(ClickHouseParser.INTO);
            this.state = 1478;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 175, this.context) ) {
            case 1:
                {
                this.state = 1477;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 1483;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 176, this.context) ) {
            case 1:
                {
                this.state = 1480;
                this.tableIdentifier();
                }
                break;
            case 2:
                {
                this.state = 1481;
                this.match(ClickHouseParser.FUNCTION);
                this.state = 1482;
                this.tableFunctionExpression();
                }
                break;
            }
            this.state = 1486;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                {
                this.state = 1485;
                this.columnsClause();
                }
                break;
            }
            this.state = 1488;
            this.dataClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsClause(): ColumnsClauseContext {
        let localContext = new ColumnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 142, ClickHouseParser.RULE_columnsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1490;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1491;
            this.columnIdentifier();
            this.state = 1496;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 1492;
                this.match(ClickHouseParser.COMMA);
                this.state = 1493;
                this.columnIdentifier();
                }
                }
                this.state = 1498;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1499;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataClause(): DataClauseContext {
        let localContext = new DataClauseContext(this.context, this.state);
        this.enterRule(localContext, 144, ClickHouseParser.RULE_dataClause);
        let _la: number;
        try {
            this.state = 1510;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.FORMAT:
                localContext = new DataClauseFormatContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1501;
                this.match(ClickHouseParser.FORMAT);
                this.state = 1502;
                this.identifier();
                }
                break;
            case ClickHouseParser.VALUES:
                localContext = new DataClauseValuesContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1503;
                this.valuesStatement();
                }
                break;
            case ClickHouseParser.SELECT:
            case ClickHouseParser.WITH:
            case ClickHouseParser.LPAREN:
                localContext = new DataClauseSelectContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1504;
                this.selectUnionStatement();
                this.state = 1506;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 295) {
                    {
                    this.state = 1505;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                }

                this.state = 1508;
                this.match(ClickHouseParser.EOF);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesStatement(): ValuesStatementContext {
        let localContext = new ValuesStatementContext(this.context, this.state);
        this.enterRule(localContext, 146, ClickHouseParser.RULE_valuesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1512;
            this.match(ClickHouseParser.VALUES);
            this.state = 1513;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1515;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82 || _la === 113 || _la === 116 || ((((_la - 263)) & ~0x1F) === 0 && ((1 << (_la - 263)) & 33566751) !== 0)) {
                {
                this.state = 1514;
                this.literal();
                }
            }

            this.state = 1517;
            this.match(ClickHouseParser.RPAREN);
            this.state = 1526;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 1518;
                this.match(ClickHouseParser.COMMA);
                this.state = 1519;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1521;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82 || _la === 113 || _la === 116 || ((((_la - 263)) & ~0x1F) === 0 && ((1 << (_la - 263)) & 33566751) !== 0)) {
                    {
                    this.state = 1520;
                    this.literal();
                    }
                }

                this.state = 1523;
                this.match(ClickHouseParser.RPAREN);
                }
                }
                this.state = 1528;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public killStatement(): KillStatementContext {
        let localContext = new KillStatementContext(this.context, this.state);
        this.enterRule(localContext, 148, ClickHouseParser.RULE_killStatement);
        let _la: number;
        try {
            localContext = new KillMutationStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1529;
            this.match(ClickHouseParser.KILL);
            this.state = 1530;
            this.match(ClickHouseParser.MUTATION);
            this.state = 1532;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 1531;
                this.clusterClause();
                }
            }

            this.state = 1534;
            this.whereClause();
            this.state = 1536;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14 || _la === 159 || _la === 165) {
                {
                this.state = 1535;
                _la = this.tokenStream.LA(1);
                if(!(_la === 14 || _la === 159 || _la === 165)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optimizeStatement(): OptimizeStatementContext {
        let localContext = new OptimizeStatementContext(this.context, this.state);
        this.enterRule(localContext, 150, ClickHouseParser.RULE_optimizeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1538;
            this.match(ClickHouseParser.OPTIMIZE);
            this.state = 1539;
            this.match(ClickHouseParser.TABLE);
            this.state = 1540;
            this.tableIdentifier();
            this.state = 1542;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 1541;
                this.clusterClause();
                }
            }

            this.state = 1545;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 126) {
                {
                this.state = 1544;
                this.partitionClause();
                }
            }

            this.state = 1548;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 1547;
                this.match(ClickHouseParser.FINAL);
                }
            }

            this.state = 1551;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 37) {
                {
                this.state = 1550;
                this.match(ClickHouseParser.DEDUPLICATE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameStatement(): RenameStatementContext {
        let localContext = new RenameStatementContext(this.context, this.state);
        this.enterRule(localContext, 152, ClickHouseParser.RULE_renameStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1553;
            this.match(ClickHouseParser.RENAME);
            this.state = 1554;
            this.match(ClickHouseParser.TABLE);
            this.state = 1555;
            this.tableIdentifier();
            this.state = 1556;
            this.match(ClickHouseParser.TO);
            this.state = 1557;
            this.tableIdentifier();
            this.state = 1565;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 1558;
                this.match(ClickHouseParser.COMMA);
                this.state = 1559;
                this.tableIdentifier();
                this.state = 1560;
                this.match(ClickHouseParser.TO);
                this.state = 1561;
                this.tableIdentifier();
                }
                }
                this.state = 1567;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1569;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 1568;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public projectionSelectStatement(): ProjectionSelectStatementContext {
        let localContext = new ProjectionSelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 154, ClickHouseParser.RULE_projectionSelectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1571;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1573;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 1572;
                this.withClause();
                }
            }

            this.state = 1575;
            this.match(ClickHouseParser.SELECT);
            this.state = 1576;
            this.columnExpressionList();
            this.state = 1578;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 73) {
                {
                this.state = 1577;
                this.groupByClause();
                }
            }

            this.state = 1581;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 1580;
                this.projectionOrderByClause();
                }
            }

            this.state = 1583;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        let localContext = new SelectUnionStatementContext(this.context, this.state);
        this.enterRule(localContext, 156, ClickHouseParser.RULE_selectUnionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1585;
            this.selectStatementWithParentheses();
            this.state = 1591;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 180) {
                {
                {
                this.state = 1586;
                this.match(ClickHouseParser.UNION);
                this.state = 1587;
                this.match(ClickHouseParser.ALL);
                this.state = 1588;
                this.selectStatementWithParentheses();
                }
                }
                this.state = 1593;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatementWithParentheses(): SelectStatementWithParenthesesContext {
        let localContext = new SelectStatementWithParenthesesContext(this.context, this.state);
        this.enterRule(localContext, 158, ClickHouseParser.RULE_selectStatementWithParentheses);
        try {
            this.state = 1599;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.SELECT:
            case ClickHouseParser.WITH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1594;
                this.selectStatement();
                }
                break;
            case ClickHouseParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1595;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1596;
                this.selectUnionStatement();
                this.state = 1597;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatement(): SelectStatementContext {
        let localContext = new SelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 160, ClickHouseParser.RULE_selectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1602;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 1601;
                this.withClause();
                }
            }

            this.state = 1604;
            this.match(ClickHouseParser.SELECT);
            this.state = 1606;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 198, this.context) ) {
            case 1:
                {
                this.state = 1605;
                this.match(ClickHouseParser.DISTINCT);
                }
                break;
            }
            this.state = 1609;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 199, this.context) ) {
            case 1:
                {
                this.state = 1608;
                this.topClause();
                }
                break;
            }
            this.state = 1611;
            this.columnExpressionList();
            this.state = 1613;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 68) {
                {
                this.state = 1612;
                this.fromClause();
                }
            }

            this.state = 1616;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 9 || _la === 84 || _la === 96) {
                {
                this.state = 1615;
                this.arrayJoinClause();
                }
            }

            this.state = 1619;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 192) {
                {
                this.state = 1618;
                this.windowClause();
                }
            }

            this.state = 1622;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 131) {
                {
                this.state = 1621;
                this.prewhereClause();
                }
            }

            this.state = 1625;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 191) {
                {
                this.state = 1624;
                this.whereClause();
                }
            }

            this.state = 1628;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 73) {
                {
                this.state = 1627;
                this.groupByClause();
                }
            }

            this.state = 1632;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 206, this.context) ) {
            case 1:
                {
                this.state = 1630;
                this.match(ClickHouseParser.WITH);
                this.state = 1631;
                _la = this.tokenStream.LA(1);
                if(!(_la === 31 || _la === 144)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1636;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 1634;
                this.match(ClickHouseParser.WITH);
                this.state = 1635;
                this.match(ClickHouseParser.TOTALS);
                }
            }

            this.state = 1639;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 1638;
                this.havingClause();
                }
            }

            this.state = 1642;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 1641;
                this.orderByClause();
                }
            }

            this.state = 1645;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 210, this.context) ) {
            case 1:
                {
                this.state = 1644;
                this.limitByClause();
                }
                break;
            }
            this.state = 1648;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99) {
                {
                this.state = 1647;
                this.limitClause();
                }
            }

            this.state = 1651;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 1650;
                this.settingsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withClause(): WithClauseContext {
        let localContext = new WithClauseContext(this.context, this.state);
        this.enterRule(localContext, 162, ClickHouseParser.RULE_withClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1653;
            this.match(ClickHouseParser.WITH);
            this.state = 1654;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topClause(): TopClauseContext {
        let localContext = new TopClauseContext(this.context, this.state);
        this.enterRule(localContext, 164, ClickHouseParser.RULE_topClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1656;
            this.match(ClickHouseParser.TOP);
            this.state = 1657;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            this.state = 1660;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 213, this.context) ) {
            case 1:
                {
                this.state = 1658;
                this.match(ClickHouseParser.WITH);
                this.state = 1659;
                this.match(ClickHouseParser.TIES);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 166, ClickHouseParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1662;
            this.match(ClickHouseParser.FROM);
            this.state = 1663;
            this.joinExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arrayJoinClause(): ArrayJoinClauseContext {
        let localContext = new ArrayJoinClauseContext(this.context, this.state);
        this.enterRule(localContext, 168, ClickHouseParser.RULE_arrayJoinClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1666;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 84 || _la === 96) {
                {
                this.state = 1665;
                _la = this.tokenStream.LA(1);
                if(!(_la === 84 || _la === 96)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1668;
            this.match(ClickHouseParser.ARRAY);
            this.state = 1669;
            this.match(ClickHouseParser.JOIN);
            this.state = 1670;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 170, ClickHouseParser.RULE_windowClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1672;
            this.match(ClickHouseParser.WINDOW);
            this.state = 1673;
            this.identifier();
            this.state = 1674;
            this.match(ClickHouseParser.AS);
            this.state = 1675;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1676;
            this.windowExpression();
            this.state = 1677;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prewhereClause(): PrewhereClauseContext {
        let localContext = new PrewhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 172, ClickHouseParser.RULE_prewhereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1679;
            this.match(ClickHouseParser.PREWHERE);
            this.state = 1680;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 174, ClickHouseParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1682;
            this.match(ClickHouseParser.WHERE);
            this.state = 1683;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 176, ClickHouseParser.RULE_groupByClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1685;
            this.match(ClickHouseParser.GROUP);
            this.state = 1686;
            this.match(ClickHouseParser.BY);
            this.state = 1693;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 215, this.context) ) {
            case 1:
                {
                this.state = 1687;
                _la = this.tokenStream.LA(1);
                if(!(_la === 31 || _la === 144)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1688;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1689;
                this.columnExpressionList();
                this.state = 1690;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 2:
                {
                this.state = 1692;
                this.columnExpressionList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 178, ClickHouseParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1695;
            this.match(ClickHouseParser.HAVING);
            this.state = 1696;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByClause(): OrderByClauseContext {
        let localContext = new OrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 180, ClickHouseParser.RULE_orderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1698;
            this.match(ClickHouseParser.ORDER);
            this.state = 1699;
            this.match(ClickHouseParser.BY);
            this.state = 1700;
            this.orderExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public projectionOrderByClause(): ProjectionOrderByClauseContext {
        let localContext = new ProjectionOrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 182, ClickHouseParser.RULE_projectionOrderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1702;
            this.match(ClickHouseParser.ORDER);
            this.state = 1703;
            this.match(ClickHouseParser.BY);
            this.state = 1704;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitByClause(): LimitByClauseContext {
        let localContext = new LimitByClauseContext(this.context, this.state);
        this.enterRule(localContext, 184, ClickHouseParser.RULE_limitByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1706;
            this.match(ClickHouseParser.LIMIT);
            this.state = 1707;
            this.limitExpression();
            this.state = 1708;
            this.match(ClickHouseParser.BY);
            this.state = 1709;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 186, ClickHouseParser.RULE_limitClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1711;
            this.match(ClickHouseParser.LIMIT);
            this.state = 1712;
            this.limitExpression();
            this.state = 1715;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 1713;
                this.match(ClickHouseParser.WITH);
                this.state = 1714;
                this.match(ClickHouseParser.TIES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingsClause(): SettingsClauseContext {
        let localContext = new SettingsClauseContext(this.context, this.state);
        this.enterRule(localContext, 188, ClickHouseParser.RULE_settingsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1717;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 1718;
            this.settingExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public joinExpression(): JoinExpressionContext;
    public joinExpression(_p: number): JoinExpressionContext;
    public joinExpression(_p?: number): JoinExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new JoinExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 190;
        this.enterRecursionRule(localContext, 190, ClickHouseParser.RULE_joinExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1732;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
            case 1:
                {
                localContext = new JoinExpressionTableContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 1721;
                this.tableExpression(0);
                this.state = 1723;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 217, this.context) ) {
                case 1:
                    {
                    this.state = 1722;
                    this.match(ClickHouseParser.FINAL);
                    }
                    break;
                }
                this.state = 1726;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 218, this.context) ) {
                case 1:
                    {
                    this.state = 1725;
                    this.sampleClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                localContext = new JoinExpressionParensContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1728;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1729;
                this.joinExpression(0);
                this.state = 1730;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1751;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 223, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1749;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
                    case 1:
                        {
                        localContext = new JoinExpressionCrossOpContext(new JoinExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_joinExpression);
                        this.state = 1734;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 1735;
                        this.joinOperatorCross();
                        this.state = 1736;
                        this.joinExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new JoinExpressionOpContext(new JoinExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_joinExpression);
                        this.state = 1738;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 1740;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 71 || _la === 101) {
                            {
                            this.state = 1739;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 71 || _la === 101)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                        }

                        this.state = 1743;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & 134250497) !== 0) || _la === 143 || _la === 150) {
                            {
                            this.state = 1742;
                            this.joinOperator();
                            }
                        }

                        this.state = 1745;
                        this.match(ClickHouseParser.JOIN);
                        this.state = 1746;
                        this.joinExpression(0);
                        this.state = 1747;
                        this.joinConstraintClause();
                        }
                        break;
                    }
                    }
                }
                this.state = 1753;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 223, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public joinOperator(): JoinOperatorContext {
        let localContext = new JoinOperatorContext(this.context, this.state);
        this.enterRule(localContext, 192, ClickHouseParser.RULE_joinOperator);
        let _la: number;
        try {
            this.state = 1797;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 237, this.context) ) {
            case 1:
                localContext = new JoinOpInnerContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1763;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 226, this.context) ) {
                case 1:
                    {
                    this.state = 1755;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0)) {
                        {
                        this.state = 1754;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 1757;
                    this.match(ClickHouseParser.INNER);
                    }
                    break;
                case 2:
                    {
                    this.state = 1758;
                    this.match(ClickHouseParser.INNER);
                    this.state = 1760;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0)) {
                        {
                        this.state = 1759;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.state = 1762;
                    _la = this.tokenStream.LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new JoinOpLeftRightContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1779;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 231, this.context) ) {
                case 1:
                    {
                    this.state = 1766;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150) {
                        {
                        this.state = 1765;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 1768;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 96 || _la === 143)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1770;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 1769;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 1772;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 96 || _la === 143)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1774;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 1773;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    this.state = 1777;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150) {
                        {
                        this.state = 1776;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new JoinOpFullContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1795;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 236, this.context) ) {
                case 1:
                    {
                    this.state = 1782;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 4 || _la === 8) {
                        {
                        this.state = 1781;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 4 || _la === 8)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 1784;
                    this.match(ClickHouseParser.FULL);
                    this.state = 1786;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 1785;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 1788;
                    this.match(ClickHouseParser.FULL);
                    this.state = 1790;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 1789;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    this.state = 1793;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 4 || _la === 8) {
                        {
                        this.state = 1792;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 4 || _la === 8)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinOperatorCross(): JoinOperatorCrossContext {
        let localContext = new JoinOperatorCrossContext(this.context, this.state);
        this.enterRule(localContext, 194, ClickHouseParser.RULE_joinOperatorCross);
        let _la: number;
        try {
            this.state = 1805;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.CROSS:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1800;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71 || _la === 101) {
                    {
                    this.state = 1799;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 71 || _la === 101)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1802;
                this.match(ClickHouseParser.CROSS);
                this.state = 1803;
                this.match(ClickHouseParser.JOIN);
                }
                break;
            case ClickHouseParser.COMMA:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1804;
                this.match(ClickHouseParser.COMMA);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinConstraintClause(): JoinConstraintClauseContext {
        let localContext = new JoinConstraintClauseContext(this.context, this.state);
        this.enterRule(localContext, 196, ClickHouseParser.RULE_joinConstraintClause);
        try {
            this.state = 1816;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1807;
                this.match(ClickHouseParser.ON);
                this.state = 1808;
                this.columnExpressionList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1809;
                this.match(ClickHouseParser.USING);
                this.state = 1810;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1811;
                this.columnExpressionList();
                this.state = 1812;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1814;
                this.match(ClickHouseParser.USING);
                this.state = 1815;
                this.columnExpressionList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleClause(): SampleClauseContext {
        let localContext = new SampleClauseContext(this.context, this.state);
        this.enterRule(localContext, 198, ClickHouseParser.RULE_sampleClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1818;
            this.match(ClickHouseParser.SAMPLE);
            this.state = 1819;
            this.ratioExpression();
            this.state = 1822;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 241, this.context) ) {
            case 1:
                {
                this.state = 1820;
                this.match(ClickHouseParser.OFFSET);
                this.state = 1821;
                this.ratioExpression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitExpression(): LimitExpressionContext {
        let localContext = new LimitExpressionContext(this.context, this.state);
        this.enterRule(localContext, 200, ClickHouseParser.RULE_limitExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1824;
            this.columnExpression(0);
            this.state = 1827;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118 || _la === 273) {
                {
                this.state = 1825;
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 273)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1826;
                this.columnExpression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderExpressionList(): OrderExpressionListContext {
        let localContext = new OrderExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 202, ClickHouseParser.RULE_orderExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1829;
            this.orderExpression();
            this.state = 1834;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 243, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1830;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1831;
                    this.orderExpression();
                    }
                    }
                }
                this.state = 1836;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 243, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderExpression(): OrderExpressionContext {
        let localContext = new OrderExpressionContext(this.context, this.state);
        this.enterRule(localContext, 204, ClickHouseParser.RULE_orderExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1837;
            this.columnExpression(0);
            this.state = 1839;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
            case 1:
                {
                this.state = 1838;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 11)) & ~0x1F) === 0 && ((1 << (_la - 11)) & 3221225473) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1843;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
            case 1:
                {
                this.state = 1841;
                this.match(ClickHouseParser.NULLS);
                this.state = 1842;
                _la = this.tokenStream.LA(1);
                if(!(_la === 62 || _la === 93)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1847;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 246, this.context) ) {
            case 1:
                {
                this.state = 1845;
                this.match(ClickHouseParser.COLLATE);
                this.state = 1846;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ratioExpression(): RatioExpressionContext {
        let localContext = new RatioExpressionContext(this.context, this.state);
        this.enterRule(localContext, 206, ClickHouseParser.RULE_ratioExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1849;
            this.numberLiteral();
            this.state = 1852;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
            case 1:
                {
                this.state = 1850;
                this.match(ClickHouseParser.SLASH);
                this.state = 1851;
                this.numberLiteral();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingExpressionList(): SettingExpressionListContext {
        let localContext = new SettingExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 208, ClickHouseParser.RULE_settingExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1854;
            this.settingExpression();
            this.state = 1859;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 248, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1855;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1856;
                    this.settingExpression();
                    }
                    }
                }
                this.state = 1861;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 248, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingExpression(): SettingExpressionContext {
        let localContext = new SettingExpressionContext(this.context, this.state);
        this.enterRule(localContext, 210, ClickHouseParser.RULE_settingExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1862;
            this.identifier();
            this.state = 1863;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 1864;
            this.literal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowExpression(): WindowExpressionContext {
        let localContext = new WindowExpressionContext(this.context, this.state);
        this.enterRule(localContext, 212, ClickHouseParser.RULE_windowExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1867;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 126) {
                {
                this.state = 1866;
                this.windowPartitionByClause();
                }
            }

            this.state = 1870;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 1869;
                this.windowOrderByClause();
                }
            }

            this.state = 1873;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 136 || _la === 146) {
                {
                this.state = 1872;
                this.windowFrameClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowPartitionByClause(): WindowPartitionByClauseContext {
        let localContext = new WindowPartitionByClauseContext(this.context, this.state);
        this.enterRule(localContext, 214, ClickHouseParser.RULE_windowPartitionByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1875;
            this.match(ClickHouseParser.PARTITION);
            this.state = 1876;
            this.match(ClickHouseParser.BY);
            this.state = 1877;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowOrderByClause(): WindowOrderByClauseContext {
        let localContext = new WindowOrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 216, ClickHouseParser.RULE_windowOrderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1879;
            this.match(ClickHouseParser.ORDER);
            this.state = 1880;
            this.match(ClickHouseParser.BY);
            this.state = 1881;
            this.orderExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameClause(): WindowFrameClauseContext {
        let localContext = new WindowFrameClauseContext(this.context, this.state);
        this.enterRule(localContext, 218, ClickHouseParser.RULE_windowFrameClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1883;
            _la = this.tokenStream.LA(1);
            if(!(_la === 136 || _la === 146)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1884;
            this.windowFrameExtend();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameExtend(): WindowFrameExtendContext {
        let localContext = new WindowFrameExtendContext(this.context, this.state);
        this.enterRule(localContext, 220, ClickHouseParser.RULE_windowFrameExtend);
        try {
            this.state = 1892;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.INF:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.PLUS:
                localContext = new FrameStartContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1886;
                this.windowFrameBound();
                }
                break;
            case ClickHouseParser.BETWEEN:
                localContext = new FrameBetweenContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1887;
                this.match(ClickHouseParser.BETWEEN);
                this.state = 1888;
                this.windowFrameBound();
                this.state = 1889;
                this.match(ClickHouseParser.AND);
                this.state = 1890;
                this.windowFrameBound();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameBound(): WindowFrameBoundContext {
        let localContext = new WindowFrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 222, ClickHouseParser.RULE_windowFrameBound);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1906;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 253, this.context) ) {
            case 1:
                {
                this.state = 1894;
                this.match(ClickHouseParser.CURRENT);
                this.state = 1895;
                this.match(ClickHouseParser.ROW);
                }
                break;
            case 2:
                {
                this.state = 1896;
                this.match(ClickHouseParser.UNBOUNDED);
                this.state = 1897;
                this.match(ClickHouseParser.PRECEDING);
                }
                break;
            case 3:
                {
                this.state = 1898;
                this.match(ClickHouseParser.UNBOUNDED);
                this.state = 1899;
                this.match(ClickHouseParser.FOLLOWING);
                }
                break;
            case 4:
                {
                this.state = 1900;
                this.numberLiteral();
                this.state = 1901;
                this.match(ClickHouseParser.PRECEDING);
                }
                break;
            case 5:
                {
                this.state = 1903;
                this.numberLiteral();
                this.state = 1904;
                this.match(ClickHouseParser.FOLLOWING);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setStatement(): SetStatementContext {
        let localContext = new SetStatementContext(this.context, this.state);
        this.enterRule(localContext, 224, ClickHouseParser.RULE_setStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1908;
            this.match(ClickHouseParser.SET);
            this.state = 1909;
            this.settingExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStatement(): ShowStatementContext {
        let localContext = new ShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 226, ClickHouseParser.RULE_showStatement);
        let _la: number;
        try {
            this.state = 1953;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 261, this.context) ) {
            case 1:
                localContext = new ShowCreateDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1911;
                this.match(ClickHouseParser.SHOW);
                this.state = 1912;
                this.match(ClickHouseParser.CREATE);
                this.state = 1913;
                this.match(ClickHouseParser.DATABASE);
                this.state = 1914;
                this.databaseIdentifier();
                }
                break;
            case 2:
                localContext = new ShowCreateDictionaryStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1915;
                this.match(ClickHouseParser.SHOW);
                this.state = 1916;
                this.match(ClickHouseParser.CREATE);
                this.state = 1917;
                this.match(ClickHouseParser.DICTIONARY);
                this.state = 1918;
                this.tableIdentifier();
                }
                break;
            case 3:
                localContext = new ShowCreateTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1919;
                this.match(ClickHouseParser.SHOW);
                this.state = 1920;
                this.match(ClickHouseParser.CREATE);
                this.state = 1922;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
                case 1:
                    {
                    this.state = 1921;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                }
                this.state = 1925;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
                case 1:
                    {
                    this.state = 1924;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                }
                this.state = 1927;
                this.tableIdentifier();
                }
                break;
            case 4:
                localContext = new ShowDatabasesStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1928;
                this.match(ClickHouseParser.SHOW);
                this.state = 1929;
                this.match(ClickHouseParser.DATABASES);
                }
                break;
            case 5:
                localContext = new ShowDictionariesStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1930;
                this.match(ClickHouseParser.SHOW);
                this.state = 1931;
                this.match(ClickHouseParser.DICTIONARIES);
                this.state = 1934;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68) {
                    {
                    this.state = 1932;
                    this.match(ClickHouseParser.FROM);
                    this.state = 1933;
                    this.databaseIdentifier();
                    }
                }

                }
                break;
            case 6:
                localContext = new ShowTablesStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1936;
                this.match(ClickHouseParser.SHOW);
                this.state = 1938;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 164) {
                    {
                    this.state = 1937;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                }

                this.state = 1940;
                this.match(ClickHouseParser.TABLES);
                this.state = 1943;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68 || _la === 80) {
                    {
                    this.state = 1941;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 68 || _la === 80)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1942;
                    this.databaseIdentifier();
                    }
                }

                this.state = 1948;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.LIKE:
                    {
                    this.state = 1945;
                    this.match(ClickHouseParser.LIKE);
                    this.state = 1946;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case ClickHouseParser.WHERE:
                    {
                    this.state = 1947;
                    this.whereClause();
                    }
                    break;
                case ClickHouseParser.EOF:
                case ClickHouseParser.FORMAT:
                case ClickHouseParser.INTO:
                case ClickHouseParser.LIMIT:
                case ClickHouseParser.RPAREN:
                case ClickHouseParser.SEMICOLON:
                    break;
                default:
                    break;
                }
                this.state = 1951;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99) {
                    {
                    this.state = 1950;
                    this.limitClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public systemStatement(): SystemStatementContext {
        let localContext = new SystemStatementContext(this.context, this.state);
        this.enterRule(localContext, 228, ClickHouseParser.RULE_systemStatement);
        let _la: number;
        try {
            this.state = 1989;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 264, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1955;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1956;
                this.match(ClickHouseParser.FLUSH);
                this.state = 1957;
                this.match(ClickHouseParser.DISTRIBUTED);
                this.state = 1958;
                this.tableIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1959;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1960;
                this.match(ClickHouseParser.FLUSH);
                this.state = 1961;
                this.match(ClickHouseParser.LOGS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1962;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1963;
                this.match(ClickHouseParser.RELOAD);
                this.state = 1964;
                this.match(ClickHouseParser.DICTIONARIES);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1965;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1966;
                this.match(ClickHouseParser.RELOAD);
                this.state = 1967;
                this.match(ClickHouseParser.DICTIONARY);
                this.state = 1968;
                this.tableIdentifier();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1969;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1970;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1978;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.DISTRIBUTED:
                    {
                    this.state = 1971;
                    this.match(ClickHouseParser.DISTRIBUTED);
                    this.state = 1972;
                    this.match(ClickHouseParser.SENDS);
                    }
                    break;
                case ClickHouseParser.FETCHES:
                    {
                    this.state = 1973;
                    this.match(ClickHouseParser.FETCHES);
                    }
                    break;
                case ClickHouseParser.MERGES:
                case ClickHouseParser.TTL:
                    {
                    this.state = 1975;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 177) {
                        {
                        this.state = 1974;
                        this.match(ClickHouseParser.TTL);
                        }
                    }

                    this.state = 1977;
                    this.match(ClickHouseParser.MERGES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1980;
                this.tableIdentifier();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1981;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1982;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1983;
                this.match(ClickHouseParser.REPLICATED);
                this.state = 1984;
                this.match(ClickHouseParser.SENDS);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1985;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1986;
                this.match(ClickHouseParser.SYNC);
                this.state = 1987;
                this.match(ClickHouseParser.REPLICA);
                this.state = 1988;
                this.tableIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateStatement(): TruncateStatementContext {
        let localContext = new TruncateStatementContext(this.context, this.state);
        this.enterRule(localContext, 230, ClickHouseParser.RULE_truncateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1991;
            this.match(ClickHouseParser.TRUNCATE);
            this.state = 1993;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 265, this.context) ) {
            case 1:
                {
                this.state = 1992;
                this.match(ClickHouseParser.TEMPORARY);
                }
                break;
            }
            this.state = 1996;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
            case 1:
                {
                this.state = 1995;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 2000;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 267, this.context) ) {
            case 1:
                {
                this.state = 1998;
                this.match(ClickHouseParser.IF);
                this.state = 1999;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 2002;
            this.tableIdentifier();
            this.state = 2004;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 2003;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public useStatement(): UseStatementContext {
        let localContext = new UseStatementContext(this.context, this.state);
        this.enterRule(localContext, 232, ClickHouseParser.RULE_useStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2006;
            this.match(ClickHouseParser.USE);
            this.state = 2007;
            this.databaseIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public watchStatement(): WatchStatementContext {
        let localContext = new WatchStatementContext(this.context, this.state);
        this.enterRule(localContext, 234, ClickHouseParser.RULE_watchStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2009;
            this.match(ClickHouseParser.WATCH);
            this.state = 2010;
            this.tableIdentifier();
            this.state = 2012;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2011;
                this.match(ClickHouseParser.EVENTS);
                }
            }

            this.state = 2016;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99) {
                {
                this.state = 2014;
                this.match(ClickHouseParser.LIMIT);
                this.state = 2015;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        let localContext = new ColumnTypeExpressionContext(this.context, this.state);
        this.enterRule(localContext, 236, ClickHouseParser.RULE_columnTypeExpression);
        let _la: number;
        try {
            this.state = 2065;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 275, this.context) ) {
            case 1:
                localContext = new ColumnTypeExpressionSimpleContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2018;
                this.identifier();
                }
                break;
            case 2:
                localContext = new ColumnTypeExpressionNestedContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2019;
                this.identifier();
                this.state = 2020;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2021;
                this.identifier();
                this.state = 2022;
                this.columnTypeExpression();
                this.state = 2029;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 273) {
                    {
                    {
                    this.state = 2023;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2024;
                    this.identifier();
                    this.state = 2025;
                    this.columnTypeExpression();
                    }
                    }
                    this.state = 2031;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2032;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                localContext = new ColumnTypeExpressionEnumContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2034;
                this.identifier();
                this.state = 2035;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2036;
                this.enumValue();
                this.state = 2041;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 273) {
                    {
                    {
                    this.state = 2037;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2038;
                    this.enumValue();
                    }
                    }
                    this.state = 2043;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2044;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 4:
                localContext = new ColumnTypeExpressionComplexContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2046;
                this.identifier();
                this.state = 2047;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2048;
                this.columnTypeExpression();
                this.state = 2053;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 273) {
                    {
                    {
                    this.state = 2049;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2050;
                    this.columnTypeExpression();
                    }
                    }
                    this.state = 2055;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2056;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 5:
                localContext = new ColumnTypeExpressionParamContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2058;
                this.identifier();
                this.state = 2059;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2061;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2147483647) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 289506047) !== 0)) {
                    {
                    this.state = 2060;
                    this.columnExpressionList();
                    }
                }

                this.state = 2063;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        let localContext = new ColumnExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 238, ClickHouseParser.RULE_columnExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2067;
            this.columnsExpression();
            this.state = 2072;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 276, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2068;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2069;
                    this.columnsExpression();
                    }
                    }
                }
                this.state = 2074;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 276, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsExpression(): ColumnsExpressionContext {
        let localContext = new ColumnsExpressionContext(this.context, this.state);
        this.enterRule(localContext, 240, ClickHouseParser.RULE_columnsExpression);
        let _la: number;
        try {
            this.state = 2086;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 278, this.context) ) {
            case 1:
                localContext = new ColumnsExpressionAsteriskContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2078;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294705151) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2146303999) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 7) !== 0)) {
                    {
                    this.state = 2075;
                    this.tableIdentifier();
                    this.state = 2076;
                    this.match(ClickHouseParser.DOT);
                    }
                }

                this.state = 2080;
                this.match(ClickHouseParser.ASTERISK);
                }
                break;
            case 2:
                localContext = new ColumnsExpressionSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2081;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2082;
                this.selectUnionStatement();
                this.state = 2083;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                localContext = new ColumnsExpressionColumnContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2085;
                this.columnExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public columnExpression(): ColumnExpressionContext;
    public columnExpression(_p: number): ColumnExpressionContext;
    public columnExpression(_p?: number): ColumnExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ColumnExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 242;
        this.enterRecursionRule(localContext, 242, ClickHouseParser.RULE_columnExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2217;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
            case 1:
                {
                localContext = new ColumnExpressionCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2089;
                this.match(ClickHouseParser.CASE);
                this.state = 2091;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 279, this.context) ) {
                case 1:
                    {
                    this.state = 2090;
                    this.columnExpression(0);
                    }
                    break;
                }
                this.state = 2098;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2093;
                    this.match(ClickHouseParser.WHEN);
                    this.state = 2094;
                    this.columnExpression(0);
                    this.state = 2095;
                    this.match(ClickHouseParser.THEN);
                    this.state = 2096;
                    this.columnExpression(0);
                    }
                    }
                    this.state = 2100;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 190);
                this.state = 2104;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 51) {
                    {
                    this.state = 2102;
                    this.match(ClickHouseParser.ELSE);
                    this.state = 2103;
                    this.columnExpression(0);
                    }
                }

                this.state = 2106;
                this.match(ClickHouseParser.END);
                }
                break;
            case 2:
                {
                localContext = new ColumnExpressionCastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2108;
                this.match(ClickHouseParser.CAST);
                this.state = 2109;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2110;
                this.columnExpression(0);
                this.state = 2111;
                this.match(ClickHouseParser.AS);
                this.state = 2112;
                this.columnTypeExpression();
                this.state = 2113;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                {
                localContext = new ColumnExpressionDateContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2115;
                this.match(ClickHouseParser.DATE);
                this.state = 2116;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 4:
                {
                localContext = new ColumnExpressionExtractContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2117;
                this.match(ClickHouseParser.EXTRACT);
                this.state = 2118;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2119;
                this.interval();
                this.state = 2120;
                this.match(ClickHouseParser.FROM);
                this.state = 2121;
                this.columnExpression(0);
                this.state = 2122;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 5:
                {
                localContext = new ColumnExpressionIntervalContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2124;
                this.match(ClickHouseParser.INTERVAL);
                this.state = 2125;
                this.columnExpression(0);
                this.state = 2126;
                this.interval();
                }
                break;
            case 6:
                {
                localContext = new ColumnExpressionSubstringContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2128;
                this.match(ClickHouseParser.SUBSTRING);
                this.state = 2129;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2130;
                this.columnExpression(0);
                this.state = 2131;
                this.match(ClickHouseParser.FROM);
                this.state = 2132;
                this.columnExpression(0);
                this.state = 2135;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 2133;
                    this.match(ClickHouseParser.FOR);
                    this.state = 2134;
                    this.columnExpression(0);
                    }
                }

                this.state = 2137;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 7:
                {
                localContext = new ColumnExpressionTimestampContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2139;
                this.match(ClickHouseParser.TIMESTAMP);
                this.state = 2140;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 8:
                {
                localContext = new ColumnExpressionTrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2141;
                this.match(ClickHouseParser.TRIM);
                this.state = 2142;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2143;
                _la = this.tokenStream.LA(1);
                if(!(_la === 17 || _la === 95 || _la === 173)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2144;
                this.match(ClickHouseParser.STRING_LITERAL);
                this.state = 2145;
                this.match(ClickHouseParser.FROM);
                this.state = 2146;
                this.columnExpression(0);
                this.state = 2147;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 9:
                {
                localContext = new ColumnExpressionWinFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2149;
                this.identifier();
                {
                this.state = 2150;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2147483647) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 289506047) !== 0)) {
                    {
                    this.state = 2151;
                    this.columnExpressionList();
                    }
                }

                this.state = 2154;
                this.match(ClickHouseParser.RPAREN);
                }
                this.state = 2156;
                this.match(ClickHouseParser.OVER);
                this.state = 2157;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2158;
                this.windowExpression();
                this.state = 2159;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 10:
                {
                localContext = new ColumnExpressionWinFunctionTargetContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2161;
                this.identifier();
                {
                this.state = 2162;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2164;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2147483647) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 289506047) !== 0)) {
                    {
                    this.state = 2163;
                    this.columnExpressionList();
                    }
                }

                this.state = 2166;
                this.match(ClickHouseParser.RPAREN);
                }
                this.state = 2168;
                this.match(ClickHouseParser.OVER);
                this.state = 2169;
                this.identifier();
                }
                break;
            case 11:
                {
                localContext = new ColumnExpressionFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2171;
                this.identifier();
                this.state = 2177;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 286, this.context) ) {
                case 1:
                    {
                    this.state = 2172;
                    this.match(ClickHouseParser.LPAREN);
                    this.state = 2174;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2147483647) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 289506047) !== 0)) {
                        {
                        this.state = 2173;
                        this.columnExpressionList();
                        }
                    }

                    this.state = 2176;
                    this.match(ClickHouseParser.RPAREN);
                    }
                    break;
                }
                this.state = 2179;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2181;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 287, this.context) ) {
                case 1:
                    {
                    this.state = 2180;
                    this.match(ClickHouseParser.DISTINCT);
                    }
                    break;
                }
                this.state = 2184;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2147483647) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 289506047) !== 0)) {
                    {
                    this.state = 2183;
                    this.columnArgumentList();
                    }
                }

                this.state = 2186;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 12:
                {
                localContext = new ColumnExpressionLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2188;
                this.literal();
                }
                break;
            case 13:
                {
                localContext = new ColumnExpressionNegateContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2189;
                this.match(ClickHouseParser.DASH);
                this.state = 2190;
                this.columnExpression(17);
                }
                break;
            case 14:
                {
                localContext = new ColumnExpressionNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2191;
                this.match(ClickHouseParser.NOT);
                this.state = 2192;
                this.columnExpression(12);
                }
                break;
            case 15:
                {
                localContext = new ColumnExpressionAsteriskContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2196;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294705151) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2146303999) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 7) !== 0)) {
                    {
                    this.state = 2193;
                    this.tableIdentifier();
                    this.state = 2194;
                    this.match(ClickHouseParser.DOT);
                    }
                }

                this.state = 2198;
                this.match(ClickHouseParser.ASTERISK);
                }
                break;
            case 16:
                {
                localContext = new ColumnExpressionSubqueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2199;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2200;
                this.selectUnionStatement();
                this.state = 2201;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 17:
                {
                localContext = new ColumnExpressionParensContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2203;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2204;
                this.columnExpression(0);
                this.state = 2205;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 18:
                {
                localContext = new ColumnExpressionTupleContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2207;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2208;
                this.columnExpressionList();
                this.state = 2209;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 19:
                {
                localContext = new ColumnExpressionArrayContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2211;
                this.match(ClickHouseParser.LBRACKET);
                this.state = 2213;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2147483647) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 289506047) !== 0)) {
                    {
                    this.state = 2212;
                    this.columnExpressionList();
                    }
                }

                this.state = 2215;
                this.match(ClickHouseParser.RBRACKET);
                }
                break;
            case 20:
                {
                localContext = new ColumnExpressionIdentifierContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2216;
                this.columnIdentifier();
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2290;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 300, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2288;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 299, this.context) ) {
                    case 1:
                        {
                        localContext = new ColumnExpressionPrecedence1Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2219;
                        if (!(this.precpred(this.context, 16))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 16)");
                        }
                        this.state = 2220;
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 269)) & ~0x1F) === 0 && ((1 << (_la - 269)) & 134479873) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2221;
                        this.columnExpression(17);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ColumnExpressionPrecedence2Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2222;
                        if (!(this.precpred(this.context, 15))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 15)");
                        }
                        this.state = 2223;
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & 16387) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2224;
                        this.columnExpression(16);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ColumnExpressionPrecedence3Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2225;
                        if (!(this.precpred(this.context, 14))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 14)");
                        }
                        this.state = 2244;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 295, this.context) ) {
                        case 1:
                            {
                            this.state = 2226;
                            this.match(ClickHouseParser.EQ_DOUBLE);
                            }
                            break;
                        case 2:
                            {
                            this.state = 2227;
                            this.match(ClickHouseParser.EQ_SINGLE);
                            }
                            break;
                        case 3:
                            {
                            this.state = 2228;
                            this.match(ClickHouseParser.NOT_EQ);
                            }
                            break;
                        case 4:
                            {
                            this.state = 2229;
                            this.match(ClickHouseParser.LE);
                            }
                            break;
                        case 5:
                            {
                            this.state = 2230;
                            this.match(ClickHouseParser.GE);
                            }
                            break;
                        case 6:
                            {
                            this.state = 2231;
                            this.match(ClickHouseParser.LT);
                            }
                            break;
                        case 7:
                            {
                            this.state = 2232;
                            this.match(ClickHouseParser.GT);
                            }
                            break;
                        case 8:
                            {
                            this.state = 2234;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 71) {
                                {
                                this.state = 2233;
                                this.match(ClickHouseParser.GLOBAL);
                                }
                            }

                            this.state = 2237;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 115) {
                                {
                                this.state = 2236;
                                this.match(ClickHouseParser.NOT);
                                }
                            }

                            this.state = 2239;
                            this.match(ClickHouseParser.IN);
                            }
                            break;
                        case 9:
                            {
                            this.state = 2241;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 115) {
                                {
                                this.state = 2240;
                                this.match(ClickHouseParser.NOT);
                                }
                            }

                            this.state = 2243;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 79 || _la === 98)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                        }
                        this.state = 2246;
                        this.columnExpression(15);
                        }
                        break;
                    case 4:
                        {
                        localContext = new ColumnExpressionAndContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2247;
                        if (!(this.precpred(this.context, 11))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 11)");
                        }
                        this.state = 2248;
                        this.match(ClickHouseParser.AND);
                        this.state = 2249;
                        this.columnExpression(12);
                        }
                        break;
                    case 5:
                        {
                        localContext = new ColumnExpressionOrContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2250;
                        if (!(this.precpred(this.context, 10))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 10)");
                        }
                        this.state = 2251;
                        this.match(ClickHouseParser.OR);
                        this.state = 2252;
                        this.columnExpression(11);
                        }
                        break;
                    case 6:
                        {
                        localContext = new ColumnExpressionBetweenContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2253;
                        if (!(this.precpred(this.context, 9))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 9)");
                        }
                        this.state = 2255;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 115) {
                            {
                            this.state = 2254;
                            this.match(ClickHouseParser.NOT);
                            }
                        }

                        this.state = 2257;
                        this.match(ClickHouseParser.BETWEEN);
                        this.state = 2258;
                        this.columnExpression(0);
                        this.state = 2259;
                        this.match(ClickHouseParser.AND);
                        this.state = 2260;
                        this.columnExpression(10);
                        }
                        break;
                    case 7:
                        {
                        localContext = new ColumnExpressionTernaryOpContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2262;
                        if (!(this.precpred(this.context, 8))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 8)");
                        }
                        this.state = 2263;
                        this.match(ClickHouseParser.QUESTIONMARK);
                        this.state = 2264;
                        this.columnExpression(0);
                        this.state = 2265;
                        this.match(ClickHouseParser.COLON);
                        this.state = 2266;
                        this.columnExpression(8);
                        }
                        break;
                    case 8:
                        {
                        localContext = new ColumnExpressionArrayAccessContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2268;
                        if (!(this.precpred(this.context, 19))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 19)");
                        }
                        this.state = 2269;
                        this.match(ClickHouseParser.LBRACKET);
                        this.state = 2270;
                        this.columnExpression(0);
                        this.state = 2271;
                        this.match(ClickHouseParser.RBRACKET);
                        }
                        break;
                    case 9:
                        {
                        localContext = new ColumnExpressionTupleAccessContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2273;
                        if (!(this.precpred(this.context, 18))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 18)");
                        }
                        this.state = 2274;
                        this.match(ClickHouseParser.DOT);
                        this.state = 2275;
                        this.match(ClickHouseParser.DECIMAL_LITERAL);
                        }
                        break;
                    case 10:
                        {
                        localContext = new ColumnExpressionIsNullContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2276;
                        if (!(this.precpred(this.context, 13))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 13)");
                        }
                        this.state = 2277;
                        this.match(ClickHouseParser.IS);
                        this.state = 2279;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 115) {
                            {
                            this.state = 2278;
                            this.match(ClickHouseParser.NOT);
                            }
                        }

                        this.state = 2281;
                        this.match(ClickHouseParser.NULL_SQL);
                        }
                        break;
                    case 11:
                        {
                        localContext = new ColumnExpressionAliasContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2282;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 2286;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case ClickHouseParser.DATE:
                        case ClickHouseParser.FIRST:
                        case ClickHouseParser.ID:
                        case ClickHouseParser.KEY:
                        case ClickHouseParser.IDENTIFIER:
                            {
                            this.state = 2283;
                            this.alias();
                            }
                            break;
                        case ClickHouseParser.AS:
                            {
                            this.state = 2284;
                            this.match(ClickHouseParser.AS);
                            this.state = 2285;
                            this.identifier();
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 2292;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 300, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public columnArgumentList(): ColumnArgumentListContext {
        let localContext = new ColumnArgumentListContext(this.context, this.state);
        this.enterRule(localContext, 244, ClickHouseParser.RULE_columnArgumentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2293;
            this.columnArgumentExpression();
            this.state = 2298;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 2294;
                this.match(ClickHouseParser.COMMA);
                this.state = 2295;
                this.columnArgumentExpression();
                }
                }
                this.state = 2300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnArgumentExpression(): ColumnArgumentExpressionContext {
        let localContext = new ColumnArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 246, ClickHouseParser.RULE_columnArgumentExpression);
        try {
            this.state = 2303;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 302, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2301;
                this.columnLambdaExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2302;
                this.columnExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnLambdaExpression(): ColumnLambdaExpressionContext {
        let localContext = new ColumnLambdaExpressionContext(this.context, this.state);
        this.enterRule(localContext, 248, ClickHouseParser.RULE_columnLambdaExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2324;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.LPAREN:
                {
                this.state = 2305;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2306;
                this.identifier();
                this.state = 2311;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 273) {
                    {
                    {
                    this.state = 2307;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2308;
                    this.identifier();
                    }
                    }
                    this.state = 2313;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2314;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 2316;
                this.identifier();
                this.state = 2321;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 273) {
                    {
                    {
                    this.state = 2317;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2318;
                    this.identifier();
                    }
                    }
                    this.state = 2323;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2326;
            this.match(ClickHouseParser.ARROW);
            this.state = 2327;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        let localContext = new ColumnIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 250, ClickHouseParser.RULE_columnIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2332;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 306, this.context) ) {
            case 1:
                {
                this.state = 2329;
                this.tableIdentifier();
                this.state = 2330;
                this.match(ClickHouseParser.DOT);
                }
                break;
            }
            this.state = 2334;
            this.identifier();
            this.state = 2337;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 307, this.context) ) {
            case 1:
                {
                this.state = 2335;
                this.match(ClickHouseParser.DOT);
                this.state = 2336;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public tableExpression(): TableExpressionContext;
    public tableExpression(_p: number): TableExpressionContext;
    public tableExpression(_p?: number): TableExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new TableExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 252;
        this.enterRecursionRule(localContext, 252, ClickHouseParser.RULE_tableExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2346;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 308, this.context) ) {
            case 1:
                {
                localContext = new TableExpressionIdentifierContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2340;
                this.tableIdentifier();
                }
                break;
            case 2:
                {
                localContext = new TableExpressionFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2341;
                this.tableFunctionExpression();
                }
                break;
            case 3:
                {
                localContext = new TableExpressionSubqueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2342;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2343;
                this.selectUnionStatement();
                this.state = 2344;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2356;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 310, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new TableExpressionAliasContext(new TableExpressionContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_tableExpression);
                    this.state = 2348;
                    if (!(this.precpred(this.context, 1))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                    }
                    this.state = 2352;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case ClickHouseParser.DATE:
                    case ClickHouseParser.FIRST:
                    case ClickHouseParser.ID:
                    case ClickHouseParser.KEY:
                    case ClickHouseParser.IDENTIFIER:
                        {
                        this.state = 2349;
                        this.alias();
                        }
                        break;
                    case ClickHouseParser.AS:
                        {
                        this.state = 2350;
                        this.match(ClickHouseParser.AS);
                        this.state = 2351;
                        this.identifier();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    }
                }
                this.state = 2358;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 310, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        let localContext = new TableFunctionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 254, ClickHouseParser.RULE_tableFunctionExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2359;
            this.identifier();
            this.state = 2360;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2362;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772991) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2147483647) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967215) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294950911) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 268534015) !== 0)) {
                {
                this.state = 2361;
                this.tableArgList();
                }
            }

            this.state = 2364;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIdentifier(): TableIdentifierContext {
        let localContext = new TableIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 256, ClickHouseParser.RULE_tableIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2369;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 312, this.context) ) {
            case 1:
                {
                this.state = 2366;
                this.databaseIdentifier();
                this.state = 2367;
                this.match(ClickHouseParser.DOT);
                }
                break;
            }
            this.state = 2371;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgList(): TableArgListContext {
        let localContext = new TableArgListContext(this.context, this.state);
        this.enterRule(localContext, 258, ClickHouseParser.RULE_tableArgList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2373;
            this.tableArgExpression();
            this.state = 2378;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 273) {
                {
                {
                this.state = 2374;
                this.match(ClickHouseParser.COMMA);
                this.state = 2375;
                this.tableArgExpression();
                }
                }
                this.state = 2380;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgExpression(): TableArgExpressionContext {
        let localContext = new TableArgExpressionContext(this.context, this.state);
        this.enterRule(localContext, 260, ClickHouseParser.RULE_tableArgExpression);
        try {
            this.state = 2384;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2381;
                this.columnIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2382;
                this.tableFunctionExpression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2383;
                this.literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        let localContext = new DatabaseIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 262, ClickHouseParser.RULE_databaseIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2386;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public floatingLiteral(): FloatingLiteralContext {
        let localContext = new FloatingLiteralContext(this.context, this.state);
        this.enterRule(localContext, 264, ClickHouseParser.RULE_floatingLiteral);
        let _la: number;
        try {
            this.state = 2396;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.FLOATING_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2388;
                this.match(ClickHouseParser.FLOATING_LITERAL);
                }
                break;
            case ClickHouseParser.DOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2389;
                this.match(ClickHouseParser.DOT);
                this.state = 2390;
                _la = this.tokenStream.LA(1);
                if(!(_la === 264 || _la === 265)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case ClickHouseParser.DECIMAL_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2391;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 2392;
                this.match(ClickHouseParser.DOT);
                this.state = 2394;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 315, this.context) ) {
                case 1:
                    {
                    this.state = 2393;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 264 || _la === 265)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberLiteral(): NumberLiteralContext {
        let localContext = new NumberLiteralContext(this.context, this.state);
        this.enterRule(localContext, 266, ClickHouseParser.RULE_numberLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2399;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 275 || _la === 288) {
                {
                this.state = 2398;
                _la = this.tokenStream.LA(1);
                if(!(_la === 275 || _la === 288)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2407;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
            case 1:
                {
                this.state = 2401;
                this.floatingLiteral();
                }
                break;
            case 2:
                {
                this.state = 2402;
                this.match(ClickHouseParser.OCTAL_LITERAL);
                }
                break;
            case 3:
                {
                this.state = 2403;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case 4:
                {
                this.state = 2404;
                this.match(ClickHouseParser.HEXADECIMAL_LITERAL);
                }
                break;
            case 5:
                {
                this.state = 2405;
                this.match(ClickHouseParser.INF);
                }
                break;
            case 6:
                {
                this.state = 2406;
                this.match(ClickHouseParser.NAN_SQL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literal(): LiteralContext {
        let localContext = new LiteralContext(this.context, this.state);
        this.enterRule(localContext, 268, ClickHouseParser.RULE_literal);
        try {
            this.state = 2412;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.INF:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.PLUS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2409;
                this.numberLiteral();
                }
                break;
            case ClickHouseParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2410;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.NULL_SQL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2411;
                this.match(ClickHouseParser.NULL_SQL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 270, ClickHouseParser.RULE_interval);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2414;
            _la = this.tokenStream.LA(1);
            if(!(_la === 36 || _la === 76 || ((((_la - 108)) & ~0x1F) === 0 && ((1 << (_la - 108)) & 67108869) !== 0) || _la === 148 || _la === 189 || _la === 194)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword(): KeywordContext {
        let localContext = new KeywordContext(this.context, this.state);
        this.enterRule(localContext, 272, ClickHouseParser.RULE_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2416;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967292) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4290772975) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294701055) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 2146283519) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294442895) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4026515455) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967293) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4194303) !== 0) || _la === 260 || _la === 261)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keywordForAlias(): KeywordForAliasContext {
        let localContext = new KeywordForAliasContext(this.context, this.state);
        this.enterRule(localContext, 274, ClickHouseParser.RULE_keywordForAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2418;
            _la = this.tokenStream.LA(1);
            if(!(_la === 35 || _la === 62 || _la === 77 || _la === 91)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alias(): AliasContext {
        let localContext = new AliasContext(this.context, this.state);
        this.enterRule(localContext, 276, ClickHouseParser.RULE_alias);
        try {
            this.state = 2422;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2420;
                this.match(ClickHouseParser.IDENTIFIER);
                }
                break;
            case ClickHouseParser.DATE:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.ID:
            case ClickHouseParser.KEY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2421;
                this.keywordForAlias();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 278, ClickHouseParser.RULE_identifier);
        try {
            this.state = 2427;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2424;
                this.match(ClickHouseParser.IDENTIFIER);
                }
                break;
            case ClickHouseParser.DAY:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.YEAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2425;
                this.interval();
                }
                break;
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2426;
                this.keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierOrNull(): IdentifierOrNullContext {
        let localContext = new IdentifierOrNullContext(this.context, this.state);
        this.enterRule(localContext, 280, ClickHouseParser.RULE_identifierOrNull);
        try {
            this.state = 2431;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2429;
                this.identifier();
                }
                break;
            case ClickHouseParser.NULL_SQL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2430;
                this.match(ClickHouseParser.NULL_SQL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enumValue(): EnumValueContext {
        let localContext = new EnumValueContext(this.context, this.state);
        this.enterRule(localContext, 282, ClickHouseParser.RULE_enumValue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2433;
            this.match(ClickHouseParser.STRING_LITERAL);
            this.state = 2434;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 2435;
            this.numberLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 24:
            return this.dictionaryAttributeDefinition_sempred(localContext as DictionaryAttributeDefinitionContext, predIndex);
        case 25:
            return this.dictionaryEngineClause_sempred(localContext as DictionaryEngineClauseContext, predIndex);
        case 38:
            return this.engineClause_sempred(localContext as EngineClauseContext, predIndex);
        case 95:
            return this.joinExpression_sempred(localContext as JoinExpressionContext, predIndex);
        case 121:
            return this.columnExpression_sempred(localContext as ColumnExpressionContext, predIndex);
        case 126:
            return this.tableExpression_sempred(localContext as TableExpressionContext, predIndex);
        }
        return true;
    }
    private dictionaryAttributeDefinition_sempred(localContext: DictionaryAttributeDefinitionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return !localContext.attrs.has("default");
        case 1:
            return !localContext.attrs.has("expression");
        case 2:
            return !localContext.attrs.has("hierarchical");
        case 3:
            return !localContext.attrs.has("injective");
        case 4:
            return !localContext.attrs.has("is_object_id");
        }
        return true;
    }
    private dictionaryEngineClause_sempred(localContext: DictionaryEngineClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return !localContext.clauses.has("source");
        case 6:
            return !localContext.clauses.has("lifetime");
        case 7:
            return !localContext.clauses.has("layout");
        case 8:
            return !localContext.clauses.has("range");
        case 9:
            return !localContext.clauses.has("settings");
        }
        return true;
    }
    private engineClause_sempred(localContext: EngineClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 10:
            return !localContext.clauses.has("orderByClause");
        case 11:
            return !localContext.clauses.has("partitionByClause");
        case 12:
            return !localContext.clauses.has("primaryKeyClause");
        case 13:
            return !localContext.clauses.has("sampleByClause");
        case 14:
            return !localContext.clauses.has("ttlClause");
        case 15:
            return !localContext.clauses.has("settingsClause");
        }
        return true;
    }
    private joinExpression_sempred(localContext: JoinExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 16:
            return this.precpred(this.context, 3);
        case 17:
            return this.precpred(this.context, 4);
        }
        return true;
    }
    private columnExpression_sempred(localContext: ColumnExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 18:
            return this.precpred(this.context, 16);
        case 19:
            return this.precpred(this.context, 15);
        case 20:
            return this.precpred(this.context, 14);
        case 21:
            return this.precpred(this.context, 11);
        case 22:
            return this.precpred(this.context, 10);
        case 23:
            return this.precpred(this.context, 9);
        case 24:
            return this.precpred(this.context, 8);
        case 25:
            return this.precpred(this.context, 19);
        case 26:
            return this.precpred(this.context, 18);
        case 27:
            return this.precpred(this.context, 13);
        case 28:
            return this.precpred(this.context, 7);
        }
        return true;
    }
    private tableExpression_sempred(localContext: TableExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 29:
            return this.precpred(this.context, 1);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,300,2438,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,1,0,
        3,0,286,8,0,1,0,1,0,1,1,1,1,3,1,292,8,1,1,1,1,1,1,1,1,1,3,1,298,
        8,1,1,2,1,2,1,2,1,2,3,2,304,8,2,1,2,1,2,3,2,308,8,2,1,2,3,2,311,
        8,2,1,2,1,2,3,2,315,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,337,8,3,1,3,3,3,340,
        8,3,1,4,1,4,1,4,1,4,5,4,346,8,4,10,4,12,4,349,9,4,1,5,1,5,3,5,353,
        8,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,364,8,6,10,6,12,6,367,
        9,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,375,8,7,1,7,1,7,1,7,5,7,380,8,7,
        10,7,12,7,383,9,7,1,8,1,8,1,8,1,8,1,8,3,8,390,8,8,1,8,1,8,1,8,3,
        8,395,8,8,1,8,1,8,1,8,1,8,1,8,3,8,402,8,8,1,8,1,8,1,8,3,8,407,8,
        8,1,8,1,8,1,8,1,8,1,8,3,8,414,8,8,1,8,1,8,1,8,3,8,419,8,8,1,8,1,
        8,1,8,1,8,3,8,425,8,8,1,8,1,8,1,8,1,8,3,8,431,8,8,1,8,1,8,1,8,3,
        8,436,8,8,1,8,1,8,1,8,1,8,3,8,442,8,8,1,8,1,8,1,8,3,8,447,8,8,1,
        8,1,8,1,8,1,8,3,8,453,8,8,1,8,1,8,1,8,3,8,458,8,8,1,8,1,8,1,8,1,
        8,3,8,464,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,
        8,478,8,8,1,8,1,8,1,8,1,8,1,8,3,8,485,8,8,1,8,1,8,1,8,1,8,1,8,3,
        8,492,8,8,1,8,1,8,1,8,1,8,1,8,3,8,499,8,8,1,8,1,8,1,8,1,8,3,8,505,
        8,8,1,8,1,8,1,8,3,8,510,8,8,1,8,1,8,1,8,1,8,3,8,516,8,8,1,8,1,8,
        1,8,3,8,521,8,8,1,8,1,8,1,8,1,8,3,8,527,8,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,3,8,536,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,546,8,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,556,8,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,576,8,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,584,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,599,8,8,1,9,1,9,1,9,5,9,604,8,9,10,9,
        12,9,607,9,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,3,12,620,8,12,1,13,1,13,1,13,1,13,3,13,626,8,13,1,14,1,14,1,14,
        1,14,3,14,632,8,14,1,15,1,15,1,15,1,15,3,15,638,8,15,1,15,3,15,641,
        8,15,1,16,1,16,1,16,1,16,3,16,647,8,16,1,16,3,16,650,8,16,1,16,3,
        16,653,8,16,1,16,1,16,1,16,1,16,3,16,659,8,16,1,16,1,16,3,16,663,
        8,16,1,16,3,16,666,8,16,1,16,3,16,669,8,16,1,16,3,16,672,8,16,1,
        16,3,16,675,8,16,1,17,1,17,1,17,1,17,1,17,3,17,682,8,17,1,17,1,17,
        3,17,686,8,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,694,8,18,1,18,3,
        18,697,8,18,1,18,1,18,1,18,1,18,3,18,703,8,18,1,18,1,18,3,18,707,
        8,18,1,18,3,18,710,8,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,3,19,721,8,19,1,19,1,19,3,19,725,8,19,1,19,3,19,728,8,19,1,
        19,1,19,1,19,3,19,733,8,19,3,19,735,8,19,1,19,3,19,738,8,19,1,19,
        3,19,741,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,751,8,
        20,1,20,1,20,3,20,755,8,20,1,20,3,20,758,8,20,1,20,3,20,761,8,20,
        1,20,1,20,1,20,3,20,766,8,20,3,20,768,8,20,1,20,1,20,1,21,1,21,1,
        21,3,21,775,8,21,1,21,1,21,1,21,1,21,3,21,781,8,21,1,21,1,21,3,21,
        785,8,21,1,21,3,21,788,8,21,1,21,3,21,791,8,21,1,21,1,21,1,22,1,
        22,1,22,1,22,1,22,1,22,3,22,801,8,22,1,23,1,23,1,23,1,23,5,23,807,
        8,23,10,23,12,23,810,9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,5,24,835,8,24,10,24,12,24,838,9,24,1,25,3,25,841,8,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,863,8,25,10,25,12,25,866,
        9,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,3,27,876,8,27,1,27,
        3,27,879,8,27,1,28,1,28,1,28,1,28,1,28,5,28,886,8,28,10,28,12,28,
        889,9,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,3,29,905,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
        5,30,914,8,30,10,30,12,30,917,9,30,1,30,1,30,1,30,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,934,8,31,1,31,
        1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,947,8,33,
        1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,
        5,37,962,8,37,10,37,12,37,965,9,37,1,37,1,37,1,37,1,37,1,37,1,37,
        3,37,973,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,5,38,1000,8,38,10,38,12,38,1003,9,38,1,39,1,39,1,39,1,
        39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,5,
        42,1021,8,42,10,42,12,42,1024,9,42,1,43,1,43,3,43,1028,8,43,1,43,
        1,43,1,43,3,43,1033,8,43,1,43,3,43,1036,8,43,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,3,44,1048,8,44,1,45,1,45,1,45,3,45,
        1053,8,45,1,45,1,45,3,45,1057,8,45,1,45,3,45,1060,8,45,1,45,1,45,
        3,45,1064,8,45,1,45,1,45,3,45,1068,8,45,1,45,1,45,1,45,3,45,1073,
        8,45,1,45,3,45,1076,8,45,1,45,1,45,3,45,1080,8,45,3,45,1082,8,45,
        1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,
        1,49,1,49,1,49,1,49,1,49,5,49,1102,8,49,10,49,12,49,1105,9,49,1,
        49,1,49,1,50,1,50,1,50,3,50,1112,8,50,1,50,3,50,1115,8,50,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1125,8,51,1,52,1,52,3,52,1129,
        8,52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,1137,8,53,1,53,1,53,3,53,
        1141,8,53,1,53,1,53,1,53,3,53,1146,8,53,1,53,1,53,3,53,1150,8,53,
        1,53,1,53,3,53,1154,8,53,1,53,1,53,3,53,1158,8,53,1,53,1,53,3,53,
        1162,8,53,3,53,1164,8,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1172,
        8,54,1,54,1,54,3,54,1176,8,54,1,54,3,54,1179,8,54,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,3,55,1202,8,55,1,56,1,56,3,56,1206,8,56,
        1,56,1,56,1,56,5,56,1211,8,56,10,56,12,56,1214,9,56,1,56,1,56,1,
        56,1,56,1,56,3,56,1221,8,56,1,56,1,56,3,56,1225,8,56,3,56,1227,8,
        56,1,56,1,56,1,56,1,56,1,56,3,56,1234,8,56,1,56,1,56,1,56,3,56,1239,
        8,56,1,57,1,57,1,57,5,57,1244,8,57,10,57,12,57,1247,9,57,1,58,1,
        58,3,58,1251,8,58,1,59,1,59,3,59,1255,8,59,1,60,1,60,3,60,1259,8,
        60,1,61,1,61,3,61,1263,8,61,1,61,1,61,1,61,1,61,3,61,1269,8,61,1,
        61,3,61,1272,8,61,1,62,1,62,3,62,1276,8,62,1,63,1,63,3,63,1280,8,
        63,1,64,1,64,3,64,1284,8,64,1,64,1,64,1,64,1,64,3,64,1290,8,64,1,
        65,1,65,1,66,1,66,1,67,1,67,3,67,1298,8,67,1,67,3,67,1301,8,67,1,
        67,1,67,3,67,1305,8,67,1,67,1,67,1,67,1,67,3,67,1311,8,67,1,67,1,
        67,3,67,1315,8,67,1,67,1,67,1,67,3,67,1320,8,67,1,67,1,67,3,67,1324,
        8,67,1,67,1,67,3,67,1328,8,67,1,67,1,67,1,67,3,67,1333,8,67,1,67,
        1,67,1,67,1,67,1,67,1,67,3,67,1341,8,67,1,67,3,67,1344,8,67,1,67,
        1,67,1,67,3,67,1349,8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,3,67,1360,8,67,1,67,1,67,3,67,1364,8,67,1,67,1,67,1,67,3,67,
        1369,8,67,1,67,1,67,1,67,1,67,1,67,3,67,1376,8,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1390,8,67,3,67,
        1392,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,
        1404,8,68,1,68,1,68,1,68,1,68,1,68,3,68,1411,8,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,3,68,1430,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,3,68,1443,8,68,1,68,1,68,3,68,1447,8,68,1,68,1,68,1,68,
        1,68,1,68,3,68,1454,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1474,8,69,
        1,70,1,70,1,70,3,70,1479,8,70,1,70,1,70,1,70,3,70,1484,8,70,1,70,
        3,70,1487,8,70,1,70,1,70,1,71,1,71,1,71,1,71,5,71,1495,8,71,10,71,
        12,71,1498,9,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,3,72,1507,8,72,
        1,72,1,72,3,72,1511,8,72,1,73,1,73,1,73,3,73,1516,8,73,1,73,1,73,
        1,73,1,73,3,73,1522,8,73,1,73,5,73,1525,8,73,10,73,12,73,1528,9,
        73,1,74,1,74,1,74,3,74,1533,8,74,1,74,1,74,3,74,1537,8,74,1,75,1,
        75,1,75,1,75,3,75,1543,8,75,1,75,3,75,1546,8,75,1,75,3,75,1549,8,
        75,1,75,3,75,1552,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,
        76,1,76,5,76,1564,8,76,10,76,12,76,1567,9,76,1,76,3,76,1570,8,76,
        1,77,1,77,3,77,1574,8,77,1,77,1,77,1,77,3,77,1579,8,77,1,77,3,77,
        1582,8,77,1,77,1,77,1,78,1,78,1,78,1,78,5,78,1590,8,78,10,78,12,
        78,1593,9,78,1,79,1,79,1,79,1,79,1,79,3,79,1600,8,79,1,80,3,80,1603,
        8,80,1,80,1,80,3,80,1607,8,80,1,80,3,80,1610,8,80,1,80,1,80,3,80,
        1614,8,80,1,80,3,80,1617,8,80,1,80,3,80,1620,8,80,1,80,3,80,1623,
        8,80,1,80,3,80,1626,8,80,1,80,3,80,1629,8,80,1,80,1,80,3,80,1633,
        8,80,1,80,1,80,3,80,1637,8,80,1,80,3,80,1640,8,80,1,80,3,80,1643,
        8,80,1,80,3,80,1646,8,80,1,80,3,80,1649,8,80,1,80,3,80,1652,8,80,
        1,81,1,81,1,81,1,82,1,82,1,82,1,82,3,82,1661,8,82,1,83,1,83,1,83,
        1,84,3,84,1667,8,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,1,88,3,88,1694,8,88,1,89,1,89,1,89,1,90,1,90,1,90,1,90,
        1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,
        3,93,1716,8,93,1,94,1,94,1,94,1,95,1,95,1,95,3,95,1724,8,95,1,95,
        3,95,1727,8,95,1,95,1,95,1,95,1,95,3,95,1733,8,95,1,95,1,95,1,95,
        1,95,1,95,1,95,3,95,1741,8,95,1,95,3,95,1744,8,95,1,95,1,95,1,95,
        1,95,5,95,1750,8,95,10,95,12,95,1753,9,95,1,96,3,96,1756,8,96,1,
        96,1,96,1,96,3,96,1761,8,96,1,96,3,96,1764,8,96,1,96,3,96,1767,8,
        96,1,96,1,96,3,96,1771,8,96,1,96,1,96,3,96,1775,8,96,1,96,3,96,1778,
        8,96,3,96,1780,8,96,1,96,3,96,1783,8,96,1,96,1,96,3,96,1787,8,96,
        1,96,1,96,3,96,1791,8,96,1,96,3,96,1794,8,96,3,96,1796,8,96,3,96,
        1798,8,96,1,97,3,97,1801,8,97,1,97,1,97,1,97,3,97,1806,8,97,1,98,
        1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1817,8,98,1,99,1,99,
        1,99,1,99,3,99,1823,8,99,1,100,1,100,1,100,3,100,1828,8,100,1,101,
        1,101,1,101,5,101,1833,8,101,10,101,12,101,1836,9,101,1,102,1,102,
        3,102,1840,8,102,1,102,1,102,3,102,1844,8,102,1,102,1,102,3,102,
        1848,8,102,1,103,1,103,1,103,3,103,1853,8,103,1,104,1,104,1,104,
        5,104,1858,8,104,10,104,12,104,1861,9,104,1,105,1,105,1,105,1,105,
        1,106,3,106,1868,8,106,1,106,3,106,1871,8,106,1,106,3,106,1874,8,
        106,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,109,1,109,
        1,109,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1893,8,110,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        3,111,1907,8,111,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,1,113,3,113,1923,8,113,1,113,3,113,
        1926,8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1935,
        8,113,1,113,1,113,3,113,1939,8,113,1,113,1,113,1,113,3,113,1944,
        8,113,1,113,1,113,1,113,3,113,1949,8,113,1,113,3,113,1952,8,113,
        3,113,1954,8,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,3,114,1976,8,114,1,114,3,114,1979,8,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,3,114,1990,8,114,1,115,1,115,
        3,115,1994,8,115,1,115,3,115,1997,8,115,1,115,1,115,3,115,2001,8,
        115,1,115,1,115,3,115,2005,8,115,1,116,1,116,1,116,1,117,1,117,1,
        117,3,117,2013,8,117,1,117,1,117,3,117,2017,8,117,1,118,1,118,1,
        118,1,118,1,118,1,118,1,118,1,118,1,118,5,118,2028,8,118,10,118,
        12,118,2031,9,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,5,118,
        2040,8,118,10,118,12,118,2043,9,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,5,118,2052,8,118,10,118,12,118,2055,9,118,1,118,1,118,
        1,118,1,118,1,118,3,118,2062,8,118,1,118,1,118,3,118,2066,8,118,
        1,119,1,119,1,119,5,119,2071,8,119,10,119,12,119,2074,9,119,1,120,
        1,120,1,120,3,120,2079,8,120,1,120,1,120,1,120,1,120,1,120,1,120,
        3,120,2087,8,120,1,121,1,121,1,121,3,121,2092,8,121,1,121,1,121,
        1,121,1,121,1,121,4,121,2099,8,121,11,121,12,121,2100,1,121,1,121,
        3,121,2105,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,
        2136,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,1,121,3,121,2153,8,121,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,2165,8,121,
        1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,2175,8,121,
        1,121,3,121,2178,8,121,1,121,1,121,3,121,2182,8,121,1,121,3,121,
        2185,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        1,121,3,121,2197,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,2214,8,121,
        1,121,1,121,3,121,2218,8,121,1,121,1,121,1,121,1,121,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,2235,
        8,121,1,121,3,121,2238,8,121,1,121,1,121,3,121,2242,8,121,1,121,
        3,121,2245,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        1,121,3,121,2256,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        1,121,1,121,1,121,1,121,3,121,2280,8,121,1,121,1,121,1,121,1,121,
        1,121,3,121,2287,8,121,5,121,2289,8,121,10,121,12,121,2292,9,121,
        1,122,1,122,1,122,5,122,2297,8,122,10,122,12,122,2300,9,122,1,123,
        1,123,3,123,2304,8,123,1,124,1,124,1,124,1,124,5,124,2310,8,124,
        10,124,12,124,2313,9,124,1,124,1,124,1,124,1,124,1,124,5,124,2320,
        8,124,10,124,12,124,2323,9,124,3,124,2325,8,124,1,124,1,124,1,124,
        1,125,1,125,1,125,3,125,2333,8,125,1,125,1,125,1,125,3,125,2338,
        8,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,2347,8,126,
        1,126,1,126,1,126,1,126,3,126,2353,8,126,5,126,2355,8,126,10,126,
        12,126,2358,9,126,1,127,1,127,1,127,3,127,2363,8,127,1,127,1,127,
        1,128,1,128,1,128,3,128,2370,8,128,1,128,1,128,1,129,1,129,1,129,
        5,129,2377,8,129,10,129,12,129,2380,9,129,1,130,1,130,1,130,3,130,
        2385,8,130,1,131,1,131,1,132,1,132,1,132,1,132,1,132,1,132,3,132,
        2395,8,132,3,132,2397,8,132,1,133,3,133,2400,8,133,1,133,1,133,1,
        133,1,133,1,133,1,133,3,133,2408,8,133,1,134,1,134,1,134,3,134,2413,
        8,134,1,135,1,135,1,136,1,136,1,137,1,137,1,138,1,138,3,138,2423,
        8,138,1,139,1,139,1,139,3,139,2428,8,139,1,140,1,140,3,140,2432,
        8,140,1,141,1,141,1,141,1,141,1,141,0,3,190,242,252,142,0,2,4,6,
        8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
        52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
        96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
        130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
        162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
        194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
        226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
        258,260,262,264,266,268,270,272,274,276,278,280,282,0,44,6,0,3,3,
        24,24,27,27,38,38,104,104,177,177,2,0,15,15,29,29,3,0,3,3,38,38,
        104,104,2,0,41,41,43,43,2,0,44,44,50,50,5,0,33,33,46,46,70,70,162,
        162,186,186,4,0,33,33,46,46,162,162,186,186,4,0,34,34,45,45,163,
        163,204,204,2,0,235,243,247,252,1,0,225,228,2,0,40,40,181,181,6,
        0,1,1,22,22,27,27,50,50,109,109,139,139,4,0,1,1,22,22,50,50,103,
        103,2,0,122,122,147,147,2,0,1,1,50,50,2,0,103,103,109,109,2,0,111,
        111,197,197,2,0,126,126,216,216,2,0,162,162,186,186,3,0,5,5,29,29,
        50,50,2,0,29,29,259,259,3,0,14,14,159,159,165,165,2,0,31,31,144,
        144,2,0,84,84,96,96,2,0,71,71,101,101,3,0,4,4,8,8,12,12,4,0,4,4,
        7,8,12,12,150,150,2,0,96,96,143,143,2,0,4,4,8,8,2,0,118,118,273,
        273,2,0,11,11,41,42,2,0,62,62,93,93,2,0,136,136,146,146,2,0,68,68,
        80,80,1,0,156,157,3,0,17,17,95,95,173,173,3,0,269,269,287,287,296,
        296,2,0,274,275,288,288,2,0,79,79,98,98,1,0,264,265,2,0,275,275,
        288,288,8,0,36,36,76,76,108,108,110,110,134,134,148,148,189,189,
        194,194,16,0,2,35,37,53,55,75,77,81,83,107,109,109,111,112,114,115,
        117,126,129,132,136,147,149,174,176,188,190,193,195,246,260,261,
        4,0,35,35,62,62,77,77,91,91,2818,0,285,1,0,0,0,2,297,1,0,0,0,4,314,
        1,0,0,0,6,339,1,0,0,0,8,341,1,0,0,0,10,350,1,0,0,0,12,359,1,0,0,
        0,14,370,1,0,0,0,16,598,1,0,0,0,18,600,1,0,0,0,20,608,1,0,0,0,22,
        612,1,0,0,0,24,619,1,0,0,0,26,621,1,0,0,0,28,627,1,0,0,0,30,633,
        1,0,0,0,32,649,1,0,0,0,34,676,1,0,0,0,36,696,1,0,0,0,38,714,1,0,
        0,0,40,744,1,0,0,0,42,771,1,0,0,0,44,800,1,0,0,0,46,802,1,0,0,0,
        48,813,1,0,0,0,50,840,1,0,0,0,52,867,1,0,0,0,54,871,1,0,0,0,56,880,
        1,0,0,0,58,893,1,0,0,0,60,908,1,0,0,0,62,921,1,0,0,0,64,937,1,0,
        0,0,66,942,1,0,0,0,68,948,1,0,0,0,70,951,1,0,0,0,72,954,1,0,0,0,
        74,972,1,0,0,0,76,974,1,0,0,0,78,1004,1,0,0,0,80,1008,1,0,0,0,82,
        1012,1,0,0,0,84,1016,1,0,0,0,86,1025,1,0,0,0,88,1047,1,0,0,0,90,
        1081,1,0,0,0,92,1083,1,0,0,0,94,1086,1,0,0,0,96,1093,1,0,0,0,98,
        1096,1,0,0,0,100,1108,1,0,0,0,102,1116,1,0,0,0,104,1126,1,0,0,0,
        106,1163,1,0,0,0,108,1178,1,0,0,0,110,1201,1,0,0,0,112,1203,1,0,
        0,0,114,1240,1,0,0,0,116,1250,1,0,0,0,118,1252,1,0,0,0,120,1256,
        1,0,0,0,122,1271,1,0,0,0,124,1273,1,0,0,0,126,1277,1,0,0,0,128,1289,
        1,0,0,0,130,1291,1,0,0,0,132,1293,1,0,0,0,134,1391,1,0,0,0,136,1453,
        1,0,0,0,138,1473,1,0,0,0,140,1475,1,0,0,0,142,1490,1,0,0,0,144,1510,
        1,0,0,0,146,1512,1,0,0,0,148,1529,1,0,0,0,150,1538,1,0,0,0,152,1553,
        1,0,0,0,154,1571,1,0,0,0,156,1585,1,0,0,0,158,1599,1,0,0,0,160,1602,
        1,0,0,0,162,1653,1,0,0,0,164,1656,1,0,0,0,166,1662,1,0,0,0,168,1666,
        1,0,0,0,170,1672,1,0,0,0,172,1679,1,0,0,0,174,1682,1,0,0,0,176,1685,
        1,0,0,0,178,1695,1,0,0,0,180,1698,1,0,0,0,182,1702,1,0,0,0,184,1706,
        1,0,0,0,186,1711,1,0,0,0,188,1717,1,0,0,0,190,1732,1,0,0,0,192,1797,
        1,0,0,0,194,1805,1,0,0,0,196,1816,1,0,0,0,198,1818,1,0,0,0,200,1824,
        1,0,0,0,202,1829,1,0,0,0,204,1837,1,0,0,0,206,1849,1,0,0,0,208,1854,
        1,0,0,0,210,1862,1,0,0,0,212,1867,1,0,0,0,214,1875,1,0,0,0,216,1879,
        1,0,0,0,218,1883,1,0,0,0,220,1892,1,0,0,0,222,1906,1,0,0,0,224,1908,
        1,0,0,0,226,1953,1,0,0,0,228,1989,1,0,0,0,230,1991,1,0,0,0,232,2006,
        1,0,0,0,234,2009,1,0,0,0,236,2065,1,0,0,0,238,2067,1,0,0,0,240,2086,
        1,0,0,0,242,2217,1,0,0,0,244,2293,1,0,0,0,246,2303,1,0,0,0,248,2324,
        1,0,0,0,250,2332,1,0,0,0,252,2346,1,0,0,0,254,2359,1,0,0,0,256,2369,
        1,0,0,0,258,2373,1,0,0,0,260,2384,1,0,0,0,262,2386,1,0,0,0,264,2396,
        1,0,0,0,266,2399,1,0,0,0,268,2412,1,0,0,0,270,2414,1,0,0,0,272,2416,
        1,0,0,0,274,2418,1,0,0,0,276,2422,1,0,0,0,278,2427,1,0,0,0,280,2431,
        1,0,0,0,282,2433,1,0,0,0,284,286,3,2,1,0,285,284,1,0,0,0,285,286,
        1,0,0,0,286,287,1,0,0,0,287,288,5,0,0,1,288,1,1,0,0,0,289,291,3,
        4,2,0,290,292,5,295,0,0,291,290,1,0,0,0,291,292,1,0,0,0,292,298,
        1,0,0,0,293,294,3,4,2,0,294,295,5,295,0,0,295,296,3,2,1,0,296,298,
        1,0,0,0,297,289,1,0,0,0,297,293,1,0,0,0,298,3,1,0,0,0,299,303,3,
        6,3,0,300,301,5,87,0,0,301,302,5,124,0,0,302,304,5,267,0,0,303,300,
        1,0,0,0,303,304,1,0,0,0,304,307,1,0,0,0,305,306,5,66,0,0,306,308,
        3,280,140,0,307,305,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,
        311,5,295,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,315,1,0,0,0,312,
        315,3,140,70,0,313,315,3,112,56,0,314,299,1,0,0,0,314,312,1,0,0,
        0,314,313,1,0,0,0,315,5,1,0,0,0,316,340,3,14,7,0,317,340,3,26,13,
        0,318,340,3,28,14,0,319,340,3,44,22,0,320,340,3,104,52,0,321,340,
        3,30,15,0,322,340,3,106,53,0,323,340,3,108,54,0,324,340,3,110,55,
        0,325,340,3,148,74,0,326,340,3,150,75,0,327,340,3,152,76,0,328,340,
        3,156,78,0,329,340,3,224,112,0,330,340,3,226,113,0,331,340,3,228,
        114,0,332,340,3,230,115,0,333,340,3,232,116,0,334,340,3,234,117,
        0,335,337,3,8,4,0,336,335,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,
        0,338,340,3,160,80,0,339,316,1,0,0,0,339,317,1,0,0,0,339,318,1,0,
        0,0,339,319,1,0,0,0,339,320,1,0,0,0,339,321,1,0,0,0,339,322,1,0,
        0,0,339,323,1,0,0,0,339,324,1,0,0,0,339,325,1,0,0,0,339,326,1,0,
        0,0,339,327,1,0,0,0,339,328,1,0,0,0,339,329,1,0,0,0,339,330,1,0,
        0,0,339,331,1,0,0,0,339,332,1,0,0,0,339,333,1,0,0,0,339,334,1,0,
        0,0,339,336,1,0,0,0,340,7,1,0,0,0,341,342,5,193,0,0,342,347,3,10,
        5,0,343,344,5,273,0,0,344,346,3,10,5,0,345,343,1,0,0,0,346,349,1,
        0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,9,1,0,0,0,349,347,1,0,
        0,0,350,352,3,278,139,0,351,353,3,12,6,0,352,351,1,0,0,0,352,353,
        1,0,0,0,353,354,1,0,0,0,354,355,5,10,0,0,355,356,5,284,0,0,356,357,
        3,6,3,0,357,358,5,294,0,0,358,11,1,0,0,0,359,360,5,284,0,0,360,365,
        3,278,139,0,361,362,5,273,0,0,362,364,3,278,139,0,363,361,1,0,0,
        0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,368,1,0,0,
        0,367,365,1,0,0,0,368,369,5,294,0,0,369,13,1,0,0,0,370,371,5,5,0,
        0,371,372,5,162,0,0,372,374,3,256,128,0,373,375,3,66,33,0,374,373,
        1,0,0,0,374,375,1,0,0,0,375,376,1,0,0,0,376,381,3,16,8,0,377,378,
        5,273,0,0,378,380,3,16,8,0,379,377,1,0,0,0,380,383,1,0,0,0,381,379,
        1,0,0,0,381,382,1,0,0,0,382,15,1,0,0,0,383,381,1,0,0,0,384,385,5,
        1,0,0,385,389,5,26,0,0,386,387,5,78,0,0,387,388,5,115,0,0,388,390,
        5,56,0,0,389,386,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,394,
        3,90,45,0,392,393,5,2,0,0,393,395,3,250,125,0,394,392,1,0,0,0,394,
        395,1,0,0,0,395,599,1,0,0,0,396,397,5,1,0,0,397,401,5,81,0,0,398,
        399,5,78,0,0,399,400,5,115,0,0,400,402,5,56,0,0,401,398,1,0,0,0,
        401,402,1,0,0,0,402,403,1,0,0,0,403,406,3,94,47,0,404,405,5,2,0,
        0,405,407,3,250,125,0,406,404,1,0,0,0,406,407,1,0,0,0,407,599,1,
        0,0,0,408,409,5,1,0,0,409,413,5,133,0,0,410,411,5,78,0,0,411,412,
        5,115,0,0,412,414,5,56,0,0,413,410,1,0,0,0,413,414,1,0,0,0,414,415,
        1,0,0,0,415,418,3,96,48,0,416,417,5,2,0,0,417,419,3,250,125,0,418,
        416,1,0,0,0,418,419,1,0,0,0,419,599,1,0,0,0,420,421,5,15,0,0,421,
        424,3,24,12,0,422,423,5,68,0,0,423,425,3,256,128,0,424,422,1,0,0,
        0,424,425,1,0,0,0,425,599,1,0,0,0,426,427,5,22,0,0,427,430,5,26,
        0,0,428,429,5,78,0,0,429,431,5,56,0,0,430,428,1,0,0,0,430,431,1,
        0,0,0,431,432,1,0,0,0,432,435,3,250,125,0,433,434,5,80,0,0,434,436,
        3,24,12,0,435,433,1,0,0,0,435,436,1,0,0,0,436,599,1,0,0,0,437,438,
        5,22,0,0,438,441,5,81,0,0,439,440,5,78,0,0,440,442,5,56,0,0,441,
        439,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,446,3,250,125,0,
        444,445,5,80,0,0,445,447,3,24,12,0,446,444,1,0,0,0,446,447,1,0,0,
        0,447,599,1,0,0,0,448,449,5,22,0,0,449,452,5,133,0,0,450,451,5,78,
        0,0,451,453,5,56,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,454,1,0,
        0,0,454,457,3,250,125,0,455,456,5,80,0,0,456,458,3,24,12,0,457,455,
        1,0,0,0,457,458,1,0,0,0,458,599,1,0,0,0,459,460,5,27,0,0,460,463,
        5,26,0,0,461,462,5,78,0,0,462,464,5,56,0,0,463,461,1,0,0,0,463,464,
        1,0,0,0,464,465,1,0,0,0,465,466,3,250,125,0,466,467,5,267,0,0,467,
        599,1,0,0,0,468,469,5,40,0,0,469,470,5,191,0,0,470,599,3,242,121,
        0,471,472,5,44,0,0,472,599,3,24,12,0,473,474,5,50,0,0,474,477,5,
        26,0,0,475,476,5,78,0,0,476,478,5,56,0,0,477,475,1,0,0,0,477,478,
        1,0,0,0,478,479,1,0,0,0,479,599,3,250,125,0,480,481,5,50,0,0,481,
        484,5,81,0,0,482,483,5,78,0,0,483,485,5,56,0,0,484,482,1,0,0,0,484,
        485,1,0,0,0,485,486,1,0,0,0,486,599,3,250,125,0,487,488,5,50,0,0,
        488,491,5,133,0,0,489,490,5,78,0,0,490,492,5,56,0,0,491,489,1,0,
        0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,599,3,250,125,0,494,495,
        5,50,0,0,495,599,3,24,12,0,496,498,5,67,0,0,497,499,3,24,12,0,498,
        497,1,0,0,0,498,499,1,0,0,0,499,599,1,0,0,0,500,501,5,103,0,0,501,
        504,5,81,0,0,502,503,5,78,0,0,503,505,5,56,0,0,504,502,1,0,0,0,504,
        505,1,0,0,0,505,506,1,0,0,0,506,509,3,250,125,0,507,508,5,80,0,0,
        508,510,3,24,12,0,509,507,1,0,0,0,509,510,1,0,0,0,510,599,1,0,0,
        0,511,512,5,103,0,0,512,515,5,133,0,0,513,514,5,78,0,0,514,516,5,
        56,0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,517,1,0,0,0,517,520,3,
        250,125,0,518,519,5,80,0,0,519,521,3,24,12,0,520,518,1,0,0,0,520,
        521,1,0,0,0,521,599,1,0,0,0,522,523,5,109,0,0,523,526,5,26,0,0,524,
        525,5,78,0,0,525,527,5,56,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,
        528,1,0,0,0,528,529,3,250,125,0,529,530,3,98,49,0,530,599,1,0,0,
        0,531,532,5,109,0,0,532,535,5,26,0,0,533,534,5,78,0,0,534,536,5,
        56,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,538,3,
        250,125,0,538,539,5,27,0,0,539,540,5,267,0,0,540,599,1,0,0,0,541,
        542,5,109,0,0,542,545,5,26,0,0,543,544,5,78,0,0,544,546,5,56,0,0,
        545,543,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,548,3,250,125,
        0,548,549,5,138,0,0,549,550,3,22,11,0,550,599,1,0,0,0,551,552,5,
        109,0,0,552,555,5,26,0,0,553,554,5,78,0,0,554,556,5,56,0,0,555,553,
        1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,599,3,90,45,0,558,559,
        5,109,0,0,559,560,5,122,0,0,560,561,5,18,0,0,561,599,3,242,121,0,
        562,563,5,109,0,0,563,599,3,84,42,0,564,565,5,111,0,0,565,575,3,
        24,12,0,566,567,5,170,0,0,567,568,5,47,0,0,568,576,5,267,0,0,569,
        570,5,170,0,0,570,571,5,187,0,0,571,576,5,267,0,0,572,573,5,170,
        0,0,573,574,5,162,0,0,574,576,3,256,128,0,575,566,1,0,0,0,575,569,
        1,0,0,0,575,572,1,0,0,0,576,599,1,0,0,0,577,578,5,138,0,0,578,599,
        5,177,0,0,579,580,5,139,0,0,580,583,5,26,0,0,581,582,5,78,0,0,582,
        584,5,56,0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,585,
        586,3,250,125,0,586,587,5,170,0,0,587,588,3,250,125,0,588,599,1,
        0,0,0,589,590,5,140,0,0,590,591,3,24,12,0,591,592,5,68,0,0,592,593,
        3,256,128,0,593,599,1,0,0,0,594,595,5,181,0,0,595,596,3,18,9,0,596,
        597,3,174,87,0,597,599,1,0,0,0,598,384,1,0,0,0,598,396,1,0,0,0,598,
        408,1,0,0,0,598,420,1,0,0,0,598,426,1,0,0,0,598,437,1,0,0,0,598,
        448,1,0,0,0,598,459,1,0,0,0,598,468,1,0,0,0,598,471,1,0,0,0,598,
        473,1,0,0,0,598,480,1,0,0,0,598,487,1,0,0,0,598,494,1,0,0,0,598,
        496,1,0,0,0,598,500,1,0,0,0,598,511,1,0,0,0,598,522,1,0,0,0,598,
        531,1,0,0,0,598,541,1,0,0,0,598,551,1,0,0,0,598,558,1,0,0,0,598,
        562,1,0,0,0,598,564,1,0,0,0,598,577,1,0,0,0,598,579,1,0,0,0,598,
        589,1,0,0,0,598,594,1,0,0,0,599,17,1,0,0,0,600,605,3,20,10,0,601,
        602,5,273,0,0,602,604,3,20,10,0,603,601,1,0,0,0,604,607,1,0,0,0,
        605,603,1,0,0,0,605,606,1,0,0,0,606,19,1,0,0,0,607,605,1,0,0,0,608,
        609,3,250,125,0,609,610,5,278,0,0,610,611,3,242,121,0,611,21,1,0,
        0,0,612,613,7,0,0,0,613,23,1,0,0,0,614,615,5,126,0,0,615,620,3,242,
        121,0,616,617,5,126,0,0,617,618,5,77,0,0,618,620,5,267,0,0,619,614,
        1,0,0,0,619,616,1,0,0,0,620,25,1,0,0,0,621,622,5,15,0,0,622,623,
        5,46,0,0,623,625,3,256,128,0,624,626,3,66,33,0,625,624,1,0,0,0,625,
        626,1,0,0,0,626,27,1,0,0,0,627,628,5,21,0,0,628,629,5,162,0,0,629,
        631,3,256,128,0,630,632,3,24,12,0,631,630,1,0,0,0,631,632,1,0,0,
        0,632,29,1,0,0,0,633,634,5,40,0,0,634,635,5,68,0,0,635,637,3,256,
        128,0,636,638,3,66,33,0,637,636,1,0,0,0,637,638,1,0,0,0,638,640,
        1,0,0,0,639,641,3,174,87,0,640,639,1,0,0,0,640,641,1,0,0,0,641,31,
        1,0,0,0,642,650,5,15,0,0,643,646,5,29,0,0,644,645,5,121,0,0,645,
        647,5,140,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,650,1,0,0,0,648,
        650,5,140,0,0,649,642,1,0,0,0,649,643,1,0,0,0,649,648,1,0,0,0,650,
        652,1,0,0,0,651,653,5,164,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,
        654,1,0,0,0,654,658,5,162,0,0,655,656,5,78,0,0,656,657,5,115,0,0,
        657,659,5,56,0,0,658,655,1,0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,
        660,662,3,256,128,0,661,663,3,68,34,0,662,661,1,0,0,0,662,663,1,
        0,0,0,663,665,1,0,0,0,664,666,3,66,33,0,665,664,1,0,0,0,665,666,
        1,0,0,0,666,668,1,0,0,0,667,669,3,74,37,0,668,667,1,0,0,0,668,669,
        1,0,0,0,669,671,1,0,0,0,670,672,3,76,38,0,671,670,1,0,0,0,671,672,
        1,0,0,0,672,674,1,0,0,0,673,675,3,72,36,0,674,673,1,0,0,0,674,675,
        1,0,0,0,675,33,1,0,0,0,676,677,7,1,0,0,677,681,5,33,0,0,678,679,
        5,78,0,0,679,680,5,115,0,0,680,682,5,56,0,0,681,678,1,0,0,0,681,
        682,1,0,0,0,682,683,1,0,0,0,683,685,3,278,139,0,684,686,3,66,33,
        0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,687,688,3,86,43,
        0,688,35,1,0,0,0,689,697,5,15,0,0,690,693,5,29,0,0,691,692,5,121,
        0,0,692,694,5,140,0,0,693,691,1,0,0,0,693,694,1,0,0,0,694,697,1,
        0,0,0,695,697,5,140,0,0,696,689,1,0,0,0,696,690,1,0,0,0,696,695,
        1,0,0,0,697,698,1,0,0,0,698,702,5,46,0,0,699,700,5,78,0,0,700,701,
        5,115,0,0,701,703,5,56,0,0,702,699,1,0,0,0,702,703,1,0,0,0,703,704,
        1,0,0,0,704,706,3,256,128,0,705,707,3,68,34,0,706,705,1,0,0,0,706,
        707,1,0,0,0,707,709,1,0,0,0,708,710,3,66,33,0,709,708,1,0,0,0,709,
        710,1,0,0,0,710,711,1,0,0,0,711,712,3,46,23,0,712,713,3,50,25,0,
        713,37,1,0,0,0,714,715,7,1,0,0,715,716,5,100,0,0,716,720,5,186,0,
        0,717,718,5,78,0,0,718,719,5,115,0,0,719,721,5,56,0,0,720,717,1,
        0,0,0,720,721,1,0,0,0,721,722,1,0,0,0,722,724,3,256,128,0,723,725,
        3,68,34,0,724,723,1,0,0,0,724,725,1,0,0,0,725,727,1,0,0,0,726,728,
        3,66,33,0,727,726,1,0,0,0,727,728,1,0,0,0,728,734,1,0,0,0,729,730,
        5,193,0,0,730,732,5,168,0,0,731,733,5,265,0,0,732,731,1,0,0,0,732,
        733,1,0,0,0,733,735,1,0,0,0,734,729,1,0,0,0,734,735,1,0,0,0,735,
        737,1,0,0,0,736,738,3,70,35,0,737,736,1,0,0,0,737,738,1,0,0,0,738,
        740,1,0,0,0,739,741,3,74,37,0,740,739,1,0,0,0,740,741,1,0,0,0,741,
        742,1,0,0,0,742,743,3,72,36,0,743,39,1,0,0,0,744,745,7,1,0,0,745,
        746,5,104,0,0,746,750,5,186,0,0,747,748,5,78,0,0,748,749,5,115,0,
        0,749,751,5,56,0,0,750,747,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,
        0,752,754,3,256,128,0,753,755,3,68,34,0,754,753,1,0,0,0,754,755,
        1,0,0,0,755,757,1,0,0,0,756,758,3,66,33,0,757,756,1,0,0,0,757,758,
        1,0,0,0,758,760,1,0,0,0,759,761,3,74,37,0,760,759,1,0,0,0,760,761,
        1,0,0,0,761,767,1,0,0,0,762,768,3,70,35,0,763,765,3,76,38,0,764,
        766,5,129,0,0,765,764,1,0,0,0,765,766,1,0,0,0,766,768,1,0,0,0,767,
        762,1,0,0,0,767,763,1,0,0,0,768,769,1,0,0,0,769,770,3,72,36,0,770,
        41,1,0,0,0,771,774,7,1,0,0,772,773,5,121,0,0,773,775,5,140,0,0,774,
        772,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,780,5,186,0,0,777,
        778,5,78,0,0,778,779,5,115,0,0,779,781,5,56,0,0,780,777,1,0,0,0,
        780,781,1,0,0,0,781,782,1,0,0,0,782,784,3,256,128,0,783,785,3,68,
        34,0,784,783,1,0,0,0,784,785,1,0,0,0,785,787,1,0,0,0,786,788,3,66,
        33,0,787,786,1,0,0,0,787,788,1,0,0,0,788,790,1,0,0,0,789,791,3,74,
        37,0,790,789,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,793,3,72,
        36,0,793,43,1,0,0,0,794,801,3,34,17,0,795,801,3,36,18,0,796,801,
        3,38,19,0,797,801,3,40,20,0,798,801,3,32,16,0,799,801,3,42,21,0,
        800,794,1,0,0,0,800,795,1,0,0,0,800,796,1,0,0,0,800,797,1,0,0,0,
        800,798,1,0,0,0,800,799,1,0,0,0,801,45,1,0,0,0,802,803,5,284,0,0,
        803,808,3,48,24,0,804,805,5,273,0,0,805,807,3,48,24,0,806,804,1,
        0,0,0,807,810,1,0,0,0,808,806,1,0,0,0,808,809,1,0,0,0,809,811,1,
        0,0,0,810,808,1,0,0,0,811,812,5,294,0,0,812,47,1,0,0,0,813,814,3,
        278,139,0,814,836,3,236,118,0,815,816,4,24,0,1,816,817,5,38,0,0,
        817,818,3,268,134,0,818,819,6,24,-1,0,819,835,1,0,0,0,820,821,4,
        24,1,1,821,822,5,58,0,0,822,823,3,242,121,0,823,824,6,24,-1,0,824,
        835,1,0,0,0,825,826,4,24,2,1,826,827,5,75,0,0,827,835,6,24,-1,0,
        828,829,4,24,3,1,829,830,5,83,0,0,830,835,6,24,-1,0,831,832,4,24,
        4,1,832,833,5,89,0,0,833,835,6,24,-1,0,834,815,1,0,0,0,834,820,1,
        0,0,0,834,825,1,0,0,0,834,828,1,0,0,0,834,831,1,0,0,0,835,838,1,
        0,0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,49,1,0,0,0,838,836,1,0,
        0,0,839,841,3,52,26,0,840,839,1,0,0,0,840,841,1,0,0,0,841,864,1,
        0,0,0,842,843,4,25,5,1,843,844,3,56,28,0,844,845,6,25,-1,0,845,863,
        1,0,0,0,846,847,4,25,6,1,847,848,3,58,29,0,848,849,6,25,-1,0,849,
        863,1,0,0,0,850,851,4,25,7,1,851,852,3,60,30,0,852,853,6,25,-1,0,
        853,863,1,0,0,0,854,855,4,25,8,1,855,856,3,62,31,0,856,857,6,25,
        -1,0,857,863,1,0,0,0,858,859,4,25,9,1,859,860,3,64,32,0,860,861,
        6,25,-1,0,861,863,1,0,0,0,862,842,1,0,0,0,862,846,1,0,0,0,862,850,
        1,0,0,0,862,854,1,0,0,0,862,858,1,0,0,0,863,866,1,0,0,0,864,862,
        1,0,0,0,864,865,1,0,0,0,865,51,1,0,0,0,866,864,1,0,0,0,867,868,5,
        132,0,0,868,869,5,91,0,0,869,870,3,238,119,0,870,53,1,0,0,0,871,
        878,3,278,139,0,872,875,3,278,139,0,873,874,5,284,0,0,874,876,5,
        294,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,879,1,0,0,0,877,879,
        3,268,134,0,878,872,1,0,0,0,878,877,1,0,0,0,879,55,1,0,0,0,880,881,
        5,155,0,0,881,882,5,284,0,0,882,883,3,278,139,0,883,887,5,284,0,
        0,884,886,3,54,27,0,885,884,1,0,0,0,886,889,1,0,0,0,887,885,1,0,
        0,0,887,888,1,0,0,0,888,890,1,0,0,0,889,887,1,0,0,0,890,891,5,294,
        0,0,891,892,5,294,0,0,892,57,1,0,0,0,893,894,5,97,0,0,894,904,5,
        284,0,0,895,905,5,265,0,0,896,897,5,107,0,0,897,898,5,265,0,0,898,
        899,5,105,0,0,899,905,5,265,0,0,900,901,5,105,0,0,901,902,5,265,
        0,0,902,903,5,107,0,0,903,905,5,265,0,0,904,895,1,0,0,0,904,896,
        1,0,0,0,904,900,1,0,0,0,905,906,1,0,0,0,906,907,5,294,0,0,907,59,
        1,0,0,0,908,909,5,94,0,0,909,910,5,284,0,0,910,911,3,278,139,0,911,
        915,5,284,0,0,912,914,3,54,27,0,913,912,1,0,0,0,914,917,1,0,0,0,
        915,913,1,0,0,0,915,916,1,0,0,0,916,918,1,0,0,0,917,915,1,0,0,0,
        918,919,5,294,0,0,919,920,5,294,0,0,920,61,1,0,0,0,921,922,5,136,
        0,0,922,933,5,284,0,0,923,924,5,107,0,0,924,925,3,278,139,0,925,
        926,5,105,0,0,926,927,3,278,139,0,927,934,1,0,0,0,928,929,5,105,
        0,0,929,930,3,278,139,0,930,931,5,107,0,0,931,932,3,278,139,0,932,
        934,1,0,0,0,933,923,1,0,0,0,933,928,1,0,0,0,934,935,1,0,0,0,935,
        936,5,294,0,0,936,63,1,0,0,0,937,938,5,153,0,0,938,939,5,284,0,0,
        939,940,3,208,104,0,940,941,5,294,0,0,941,65,1,0,0,0,942,943,5,119,
        0,0,943,946,5,23,0,0,944,947,3,278,139,0,945,947,5,267,0,0,946,944,
        1,0,0,0,946,945,1,0,0,0,947,67,1,0,0,0,948,949,5,184,0,0,949,950,
        5,267,0,0,950,69,1,0,0,0,951,952,5,170,0,0,952,953,3,256,128,0,953,
        71,1,0,0,0,954,955,5,10,0,0,955,956,3,156,78,0,956,73,1,0,0,0,957,
        958,5,284,0,0,958,963,3,88,44,0,959,960,5,273,0,0,960,962,3,88,44,
        0,961,959,1,0,0,0,962,965,1,0,0,0,963,961,1,0,0,0,963,964,1,0,0,
        0,964,966,1,0,0,0,965,963,1,0,0,0,966,967,5,294,0,0,967,973,1,0,
        0,0,968,969,5,10,0,0,969,973,3,256,128,0,970,971,5,10,0,0,971,973,
        3,254,127,0,972,957,1,0,0,0,972,968,1,0,0,0,972,970,1,0,0,0,973,
        75,1,0,0,0,974,1001,3,86,43,0,975,976,4,38,10,1,976,977,3,180,90,
        0,977,978,6,38,-1,0,978,1000,1,0,0,0,979,980,4,38,11,1,980,981,3,
        78,39,0,981,982,6,38,-1,0,982,1000,1,0,0,0,983,984,4,38,12,1,984,
        985,3,80,40,0,985,986,6,38,-1,0,986,1000,1,0,0,0,987,988,4,38,13,
        1,988,989,3,82,41,0,989,990,6,38,-1,0,990,1000,1,0,0,0,991,992,4,
        38,14,1,992,993,3,84,42,0,993,994,6,38,-1,0,994,1000,1,0,0,0,995,
        996,4,38,15,1,996,997,3,188,94,0,997,998,6,38,-1,0,998,1000,1,0,
        0,0,999,975,1,0,0,0,999,979,1,0,0,0,999,983,1,0,0,0,999,987,1,0,
        0,0,999,991,1,0,0,0,999,995,1,0,0,0,1000,1003,1,0,0,0,1001,999,1,
        0,0,0,1001,1002,1,0,0,0,1002,77,1,0,0,0,1003,1001,1,0,0,0,1004,1005,
        5,126,0,0,1005,1006,5,18,0,0,1006,1007,3,242,121,0,1007,79,1,0,0,
        0,1008,1009,5,132,0,0,1009,1010,5,91,0,0,1010,1011,3,242,121,0,1011,
        81,1,0,0,0,1012,1013,5,147,0,0,1013,1014,5,18,0,0,1014,1015,3,242,
        121,0,1015,83,1,0,0,0,1016,1017,5,177,0,0,1017,1022,3,102,51,0,1018,
        1019,5,273,0,0,1019,1021,3,102,51,0,1020,1018,1,0,0,0,1021,1024,
        1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,85,1,0,0,0,1024,
        1022,1,0,0,0,1025,1027,5,53,0,0,1026,1028,5,278,0,0,1027,1026,1,
        0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1035,3,280,140,0,
        1030,1032,5,284,0,0,1031,1033,3,238,119,0,1032,1031,1,0,0,0,1032,
        1033,1,0,0,0,1033,1034,1,0,0,0,1034,1036,5,294,0,0,1035,1030,1,0,
        0,0,1035,1036,1,0,0,0,1036,87,1,0,0,0,1037,1048,3,90,45,0,1038,1039,
        5,28,0,0,1039,1040,3,278,139,0,1040,1041,5,21,0,0,1041,1042,3,242,
        121,0,1042,1048,1,0,0,0,1043,1044,5,81,0,0,1044,1048,3,94,47,0,1045,
        1046,5,133,0,0,1046,1048,3,96,48,0,1047,1037,1,0,0,0,1047,1038,1,
        0,0,0,1047,1043,1,0,0,0,1047,1045,1,0,0,0,1048,89,1,0,0,0,1049,1050,
        3,250,125,0,1050,1052,3,236,118,0,1051,1053,3,92,46,0,1052,1051,
        1,0,0,0,1052,1053,1,0,0,0,1053,1056,1,0,0,0,1054,1055,5,27,0,0,1055,
        1057,5,267,0,0,1056,1054,1,0,0,0,1056,1057,1,0,0,0,1057,1059,1,0,
        0,0,1058,1060,3,98,49,0,1059,1058,1,0,0,0,1059,1060,1,0,0,0,1060,
        1063,1,0,0,0,1061,1062,5,177,0,0,1062,1064,3,242,121,0,1063,1061,
        1,0,0,0,1063,1064,1,0,0,0,1064,1082,1,0,0,0,1065,1067,3,250,125,
        0,1066,1068,3,236,118,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,
        1069,1,0,0,0,1069,1072,3,92,46,0,1070,1071,5,27,0,0,1071,1073,5,
        267,0,0,1072,1070,1,0,0,0,1072,1073,1,0,0,0,1073,1075,1,0,0,0,1074,
        1076,3,98,49,0,1075,1074,1,0,0,0,1075,1076,1,0,0,0,1076,1079,1,0,
        0,0,1077,1078,5,177,0,0,1078,1080,3,242,121,0,1079,1077,1,0,0,0,
        1079,1080,1,0,0,0,1080,1082,1,0,0,0,1081,1049,1,0,0,0,1081,1065,
        1,0,0,0,1082,91,1,0,0,0,1083,1084,7,2,0,0,1084,1085,3,242,121,0,
        1085,93,1,0,0,0,1086,1087,3,250,125,0,1087,1088,3,242,121,0,1088,
        1089,5,178,0,0,1089,1090,3,236,118,0,1090,1091,5,72,0,0,1091,1092,
        5,265,0,0,1092,95,1,0,0,0,1093,1094,3,250,125,0,1094,1095,3,154,
        77,0,1095,97,1,0,0,0,1096,1097,5,24,0,0,1097,1098,5,284,0,0,1098,
        1103,3,100,50,0,1099,1100,5,273,0,0,1100,1102,3,100,50,0,1101,1099,
        1,0,0,0,1102,1105,1,0,0,0,1103,1101,1,0,0,0,1103,1104,1,0,0,0,1104,
        1106,1,0,0,0,1105,1103,1,0,0,0,1106,1107,5,294,0,0,1107,99,1,0,0,
        0,1108,1114,3,278,139,0,1109,1111,5,284,0,0,1110,1112,3,238,119,
        0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,0,0,1113,1115,
        5,294,0,0,1114,1109,1,0,0,0,1114,1115,1,0,0,0,1115,101,1,0,0,0,1116,
        1124,3,242,121,0,1117,1125,5,40,0,0,1118,1119,5,170,0,0,1119,1120,
        5,47,0,0,1120,1125,5,267,0,0,1121,1122,5,170,0,0,1122,1123,5,187,
        0,0,1123,1125,5,267,0,0,1124,1117,1,0,0,0,1124,1118,1,0,0,0,1124,
        1121,1,0,0,0,1124,1125,1,0,0,0,1125,103,1,0,0,0,1126,1128,7,3,0,
        0,1127,1129,5,162,0,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,1129,1130,
        1,0,0,0,1130,1131,3,252,126,0,1131,105,1,0,0,0,1132,1133,7,4,0,0,
        1133,1136,5,33,0,0,1134,1135,5,78,0,0,1135,1137,5,56,0,0,1136,1134,
        1,0,0,0,1136,1137,1,0,0,0,1137,1138,1,0,0,0,1138,1140,3,262,131,
        0,1139,1141,3,66,33,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1164,
        1,0,0,0,1142,1149,7,4,0,0,1143,1150,5,46,0,0,1144,1146,5,164,0,0,
        1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,1147,1,0,0,0,1147,1150,
        5,162,0,0,1148,1150,5,186,0,0,1149,1143,1,0,0,0,1149,1145,1,0,0,
        0,1149,1148,1,0,0,0,1150,1153,1,0,0,0,1151,1152,5,78,0,0,1152,1154,
        5,56,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,
        1157,3,256,128,0,1156,1158,3,66,33,0,1157,1156,1,0,0,0,1157,1158,
        1,0,0,0,1158,1161,1,0,0,0,1159,1160,5,114,0,0,1160,1162,5,39,0,0,
        1161,1159,1,0,0,0,1161,1162,1,0,0,0,1162,1164,1,0,0,0,1163,1132,
        1,0,0,0,1163,1142,1,0,0,0,1164,107,1,0,0,0,1165,1166,5,56,0,0,1166,
        1167,5,33,0,0,1167,1179,3,262,131,0,1168,1175,5,56,0,0,1169,1176,
        5,46,0,0,1170,1172,5,164,0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,
        1172,1173,1,0,0,0,1173,1176,5,162,0,0,1174,1176,5,186,0,0,1175,1169,
        1,0,0,0,1175,1171,1,0,0,0,1175,1174,1,0,0,0,1175,1176,1,0,0,0,1176,
        1177,1,0,0,0,1177,1179,3,256,128,0,1178,1165,1,0,0,0,1178,1168,1,
        0,0,0,1179,109,1,0,0,0,1180,1181,5,57,0,0,1181,1202,3,6,3,0,1182,
        1183,5,57,0,0,1183,1184,5,13,0,0,1184,1202,3,6,3,0,1185,1186,5,57,
        0,0,1186,1187,5,160,0,0,1187,1202,3,6,3,0,1188,1189,5,57,0,0,1189,
        1190,5,127,0,0,1190,1202,3,6,3,0,1191,1192,5,57,0,0,1192,1193,5,
        128,0,0,1193,1202,3,6,3,0,1194,1195,5,57,0,0,1195,1196,5,135,0,0,
        1196,1197,5,175,0,0,1197,1202,3,6,3,0,1198,1199,5,57,0,0,1199,1200,
        5,54,0,0,1200,1202,3,6,3,0,1201,1180,1,0,0,0,1201,1182,1,0,0,0,1201,
        1185,1,0,0,0,1201,1188,1,0,0,0,1201,1191,1,0,0,0,1201,1194,1,0,0,
        0,1201,1198,1,0,0,0,1202,111,1,0,0,0,1203,1205,5,195,0,0,1204,1206,
        3,66,33,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1207,1,0,0,0,
        1207,1212,3,138,69,0,1208,1209,5,273,0,0,1209,1211,3,138,69,0,1210,
        1208,1,0,0,0,1211,1214,1,0,0,0,1212,1210,1,0,0,0,1212,1213,1,0,0,
        0,1213,1215,1,0,0,0,1214,1212,1,0,0,0,1215,1226,5,119,0,0,1216,1227,
        3,262,131,0,1217,1227,3,256,128,0,1218,1219,5,269,0,0,1219,1221,
        5,276,0,0,1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,1224,1,0,0,0,
        1222,1225,5,269,0,0,1223,1225,3,278,139,0,1224,1222,1,0,0,0,1224,
        1223,1,0,0,0,1225,1227,1,0,0,0,1226,1216,1,0,0,0,1226,1217,1,0,0,
        0,1226,1220,1,0,0,0,1227,1228,1,0,0,0,1228,1229,5,170,0,0,1229,1233,
        3,114,57,0,1230,1231,5,193,0,0,1231,1232,5,195,0,0,1232,1234,5,245,
        0,0,1233,1230,1,0,0,0,1233,1234,1,0,0,0,1234,1238,1,0,0,0,1235,1236,
        5,193,0,0,1236,1237,5,140,0,0,1237,1239,5,245,0,0,1238,1235,1,0,
        0,0,1238,1239,1,0,0,0,1239,113,1,0,0,0,1240,1245,3,116,58,0,1241,
        1242,5,273,0,0,1242,1244,3,116,58,0,1243,1241,1,0,0,0,1244,1247,
        1,0,0,0,1245,1243,1,0,0,0,1245,1246,1,0,0,0,1246,115,1,0,0,0,1247,
        1245,1,0,0,0,1248,1251,5,205,0,0,1249,1251,3,278,139,0,1250,1248,
        1,0,0,0,1250,1249,1,0,0,0,1251,117,1,0,0,0,1252,1254,5,149,0,0,1253,
        1255,3,142,71,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,119,1,0,
        0,0,1256,1258,5,85,0,0,1257,1259,3,142,71,0,1258,1257,1,0,0,0,1258,
        1259,1,0,0,0,1259,121,1,0,0,0,1260,1262,5,29,0,0,1261,1263,7,5,0,
        0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1272,1,0,0,0,1264,1268,
        5,29,0,0,1265,1266,5,203,0,0,1266,1269,5,164,0,0,1267,1269,5,164,
        0,0,1268,1265,1,0,0,0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,1270,
        1,0,0,0,1270,1272,5,162,0,0,1271,1260,1,0,0,0,1271,1264,1,0,0,0,
        1272,123,1,0,0,0,1273,1275,5,50,0,0,1274,1276,7,6,0,0,1275,1274,
        1,0,0,0,1275,1276,1,0,0,0,1276,125,1,0,0,0,1277,1279,5,154,0,0,1278,
        1280,7,7,0,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,127,1,0,0,
        0,1281,1283,5,231,0,0,1282,1284,5,220,0,0,1283,1282,1,0,0,0,1283,
        1284,1,0,0,0,1284,1290,1,0,0,0,1285,1290,5,232,0,0,1286,1290,5,253,
        0,0,1287,1290,5,233,0,0,1288,1290,5,234,0,0,1289,1281,1,0,0,0,1289,
        1285,1,0,0,0,1289,1286,1,0,0,0,1289,1287,1,0,0,0,1289,1288,1,0,0,
        0,1290,129,1,0,0,0,1291,1292,7,8,0,0,1292,131,1,0,0,0,1293,1294,
        7,9,0,0,1294,133,1,0,0,0,1295,1297,5,5,0,0,1296,1298,7,10,0,0,1297,
        1296,1,0,0,0,1297,1298,1,0,0,0,1298,1300,1,0,0,0,1299,1301,3,142,
        71,0,1300,1299,1,0,0,0,1300,1301,1,0,0,0,1301,1392,1,0,0,0,1302,
        1304,7,10,0,0,1303,1305,3,142,71,0,1304,1303,1,0,0,0,1304,1305,1,
        0,0,0,1305,1392,1,0,0,0,1306,1307,5,5,0,0,1307,1392,5,162,0,0,1308,
        1310,5,5,0,0,1309,1311,7,11,0,0,1310,1309,1,0,0,0,1310,1311,1,0,
        0,0,1311,1312,1,0,0,0,1312,1314,5,26,0,0,1313,1315,3,142,71,0,1314,
        1313,1,0,0,0,1314,1315,1,0,0,0,1315,1392,1,0,0,0,1316,1317,7,11,
        0,0,1317,1319,5,26,0,0,1318,1320,3,142,71,0,1319,1318,1,0,0,0,1319,
        1320,1,0,0,0,1320,1392,1,0,0,0,1321,1323,5,5,0,0,1322,1324,7,12,
        0,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,1392,
        5,81,0,0,1326,1328,7,12,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,
        1328,1329,1,0,0,0,1329,1392,5,81,0,0,1330,1332,5,5,0,0,1331,1333,
        5,109,0,0,1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,1334,1,0,0,0,
        1334,1335,7,13,0,0,1335,1392,5,18,0,0,1336,1337,5,109,0,0,1337,1338,
        7,13,0,0,1338,1392,5,18,0,0,1339,1341,5,5,0,0,1340,1339,1,0,0,0,
        1340,1341,1,0,0,0,1341,1343,1,0,0,0,1342,1344,7,14,0,0,1343,1342,
        1,0,0,0,1343,1344,1,0,0,0,1344,1345,1,0,0,0,1345,1392,5,28,0,0,1346,
        1348,5,5,0,0,1347,1349,7,15,0,0,1348,1347,1,0,0,0,1348,1349,1,0,
        0,0,1349,1350,1,0,0,0,1350,1392,5,177,0,0,1351,1352,7,15,0,0,1352,
        1392,5,177,0,0,1353,1354,5,5,0,0,1354,1392,5,153,0,0,1355,1360,5,
        5,0,0,1356,1357,5,5,0,0,1357,1360,5,109,0,0,1358,1360,5,109,0,0,
        1359,1355,1,0,0,0,1359,1356,1,0,0,0,1359,1358,1,0,0,0,1360,1361,
        1,0,0,0,1361,1392,5,244,0,0,1362,1364,5,5,0,0,1363,1362,1,0,0,0,
        1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1366,7,16,0,0,1366,1392,
        7,17,0,0,1367,1369,5,5,0,0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,
        1370,1,0,0,0,1370,1371,5,67,0,0,1371,1392,5,126,0,0,1372,1373,5,
        5,0,0,1373,1375,5,186,0,0,1374,1376,5,198,0,0,1375,1374,1,0,0,0,
        1375,1376,1,0,0,0,1376,1392,1,0,0,0,1377,1378,5,5,0,0,1378,1379,
        5,100,0,0,1379,1380,5,186,0,0,1380,1392,5,198,0,0,1381,1382,5,198,
        0,0,1382,1392,5,186,0,0,1383,1384,5,5,0,0,1384,1385,7,18,0,0,1385,
        1389,5,109,0,0,1386,1390,5,135,0,0,1387,1388,5,254,0,0,1388,1390,
        5,255,0,0,1389,1386,1,0,0,0,1389,1387,1,0,0,0,1390,1392,1,0,0,0,
        1391,1295,1,0,0,0,1391,1302,1,0,0,0,1391,1306,1,0,0,0,1391,1308,
        1,0,0,0,1391,1316,1,0,0,0,1391,1321,1,0,0,0,1391,1327,1,0,0,0,1391,
        1330,1,0,0,0,1391,1336,1,0,0,0,1391,1340,1,0,0,0,1391,1346,1,0,0,
        0,1391,1351,1,0,0,0,1391,1353,1,0,0,0,1391,1359,1,0,0,0,1391,1363,
        1,0,0,0,1391,1368,1,0,0,0,1391,1372,1,0,0,0,1391,1377,1,0,0,0,1391,
        1381,1,0,0,0,1391,1383,1,0,0,0,1392,135,1,0,0,0,1393,1394,5,206,
        0,0,1394,1454,5,229,0,0,1395,1396,7,19,0,0,1396,1454,5,196,0,0,1397,
        1398,7,19,0,0,1398,1454,5,201,0,0,1399,1400,5,201,0,0,1400,1454,
        5,230,0,0,1401,1403,7,19,0,0,1402,1404,5,145,0,0,1403,1402,1,0,0,
        0,1403,1404,1,0,0,0,1404,1405,1,0,0,0,1405,1454,5,199,0,0,1406,1407,
        7,19,0,0,1407,1454,5,200,0,0,1408,1410,7,19,0,0,1409,1411,5,153,
        0,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,0,0,1412,1454,
        5,202,0,0,1413,1414,5,154,0,0,1414,1454,5,206,0,0,1415,1454,5,207,
        0,0,1416,1417,5,154,0,0,1417,1418,5,29,0,0,1418,1454,5,196,0,0,1419,
        1454,5,208,0,0,1420,1421,5,154,0,0,1421,1422,5,29,0,0,1422,1454,
        5,201,0,0,1423,1454,5,209,0,0,1424,1425,5,154,0,0,1425,1454,5,257,
        0,0,1426,1427,5,154,0,0,1427,1429,5,29,0,0,1428,1430,5,145,0,0,1429,
        1428,1,0,0,0,1429,1430,1,0,0,0,1430,1431,1,0,0,0,1431,1454,5,199,
        0,0,1432,1454,5,210,0,0,1433,1434,5,154,0,0,1434,1435,5,29,0,0,1435,
        1454,5,200,0,0,1436,1454,5,211,0,0,1437,1438,5,154,0,0,1438,1454,
        5,258,0,0,1439,1440,5,154,0,0,1440,1442,5,29,0,0,1441,1443,5,153,
        0,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1454,
        5,202,0,0,1445,1447,7,20,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,
        1447,1448,1,0,0,0,1448,1449,5,254,0,0,1449,1450,5,255,0,0,1450,1454,
        5,246,0,0,1451,1452,5,255,0,0,1452,1454,5,246,0,0,1453,1393,1,0,
        0,0,1453,1395,1,0,0,0,1453,1397,1,0,0,0,1453,1399,1,0,0,0,1453,1401,
        1,0,0,0,1453,1406,1,0,0,0,1453,1408,1,0,0,0,1453,1413,1,0,0,0,1453,
        1415,1,0,0,0,1453,1416,1,0,0,0,1453,1419,1,0,0,0,1453,1420,1,0,0,
        0,1453,1423,1,0,0,0,1453,1424,1,0,0,0,1453,1426,1,0,0,0,1453,1432,
        1,0,0,0,1453,1433,1,0,0,0,1453,1436,1,0,0,0,1453,1437,1,0,0,0,1453,
        1439,1,0,0,0,1453,1446,1,0,0,0,1453,1451,1,0,0,0,1454,137,1,0,0,
        0,1455,1474,3,118,59,0,1456,1474,3,120,60,0,1457,1474,3,122,61,0,
        1458,1474,3,124,62,0,1459,1474,5,176,0,0,1460,1461,5,92,0,0,1461,
        1474,5,135,0,0,1462,1474,5,120,0,0,1463,1474,3,126,63,0,1464,1474,
        3,128,64,0,1465,1474,3,130,65,0,1466,1474,3,132,66,0,1467,1474,3,
        134,67,0,1468,1474,5,4,0,0,1469,1474,5,246,0,0,1470,1474,5,120,0,
        0,1471,1474,5,256,0,0,1472,1474,3,136,68,0,1473,1455,1,0,0,0,1473,
        1456,1,0,0,0,1473,1457,1,0,0,0,1473,1458,1,0,0,0,1473,1459,1,0,0,
        0,1473,1460,1,0,0,0,1473,1462,1,0,0,0,1473,1463,1,0,0,0,1473,1464,
        1,0,0,0,1473,1465,1,0,0,0,1473,1466,1,0,0,0,1473,1467,1,0,0,0,1473,
        1468,1,0,0,0,1473,1469,1,0,0,0,1473,1470,1,0,0,0,1473,1471,1,0,0,
        0,1473,1472,1,0,0,0,1474,139,1,0,0,0,1475,1476,5,85,0,0,1476,1478,
        5,87,0,0,1477,1479,5,162,0,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,
        1479,1483,1,0,0,0,1480,1484,3,256,128,0,1481,1482,5,70,0,0,1482,
        1484,3,254,127,0,1483,1480,1,0,0,0,1483,1481,1,0,0,0,1484,1486,1,
        0,0,0,1485,1487,3,142,71,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,
        1488,1,0,0,0,1488,1489,3,144,72,0,1489,141,1,0,0,0,1490,1491,5,284,
        0,0,1491,1496,3,250,125,0,1492,1493,5,273,0,0,1493,1495,3,250,125,
        0,1494,1492,1,0,0,0,1495,1498,1,0,0,0,1496,1494,1,0,0,0,1496,1497,
        1,0,0,0,1497,1499,1,0,0,0,1498,1496,1,0,0,0,1499,1500,5,294,0,0,
        1500,143,1,0,0,0,1501,1502,5,66,0,0,1502,1511,3,278,139,0,1503,1511,
        3,146,73,0,1504,1506,3,156,78,0,1505,1507,5,295,0,0,1506,1505,1,
        0,0,0,1506,1507,1,0,0,0,1507,1508,1,0,0,0,1508,1509,5,0,0,1,1509,
        1511,1,0,0,0,1510,1501,1,0,0,0,1510,1503,1,0,0,0,1510,1504,1,0,0,
        0,1511,145,1,0,0,0,1512,1513,5,185,0,0,1513,1515,5,284,0,0,1514,
        1516,3,268,134,0,1515,1514,1,0,0,0,1515,1516,1,0,0,0,1516,1517,1,
        0,0,0,1517,1526,5,294,0,0,1518,1519,5,273,0,0,1519,1521,5,284,0,
        0,1520,1522,3,268,134,0,1521,1520,1,0,0,0,1521,1522,1,0,0,0,1522,
        1523,1,0,0,0,1523,1525,5,294,0,0,1524,1518,1,0,0,0,1525,1528,1,0,
        0,0,1526,1524,1,0,0,0,1526,1527,1,0,0,0,1527,147,1,0,0,0,1528,1526,
        1,0,0,0,1529,1530,5,92,0,0,1530,1532,5,112,0,0,1531,1533,3,66,33,
        0,1532,1531,1,0,0,0,1532,1533,1,0,0,0,1533,1534,1,0,0,0,1534,1536,
        3,174,87,0,1535,1537,7,21,0,0,1536,1535,1,0,0,0,1536,1537,1,0,0,
        0,1537,149,1,0,0,0,1538,1539,5,120,0,0,1539,1540,5,162,0,0,1540,
        1542,3,256,128,0,1541,1543,3,66,33,0,1542,1541,1,0,0,0,1542,1543,
        1,0,0,0,1543,1545,1,0,0,0,1544,1546,3,24,12,0,1545,1544,1,0,0,0,
        1545,1546,1,0,0,0,1546,1548,1,0,0,0,1547,1549,5,61,0,0,1548,1547,
        1,0,0,0,1548,1549,1,0,0,0,1549,1551,1,0,0,0,1550,1552,5,37,0,0,1551,
        1550,1,0,0,0,1551,1552,1,0,0,0,1552,151,1,0,0,0,1553,1554,5,139,
        0,0,1554,1555,5,162,0,0,1555,1556,3,256,128,0,1556,1557,5,170,0,
        0,1557,1565,3,256,128,0,1558,1559,5,273,0,0,1559,1560,3,256,128,
        0,1560,1561,5,170,0,0,1561,1562,3,256,128,0,1562,1564,1,0,0,0,1563,
        1558,1,0,0,0,1564,1567,1,0,0,0,1565,1563,1,0,0,0,1565,1566,1,0,0,
        0,1566,1569,1,0,0,0,1567,1565,1,0,0,0,1568,1570,3,66,33,0,1569,1568,
        1,0,0,0,1569,1570,1,0,0,0,1570,153,1,0,0,0,1571,1573,5,284,0,0,1572,
        1574,3,162,81,0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,
        0,0,0,1575,1576,5,149,0,0,1576,1578,3,238,119,0,1577,1579,3,176,
        88,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,1581,1,0,0,0,1580,
        1582,3,182,91,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,
        0,0,0,1583,1584,5,294,0,0,1584,155,1,0,0,0,1585,1591,3,158,79,0,
        1586,1587,5,180,0,0,1587,1588,5,4,0,0,1588,1590,3,158,79,0,1589,
        1586,1,0,0,0,1590,1593,1,0,0,0,1591,1589,1,0,0,0,1591,1592,1,0,0,
        0,1592,157,1,0,0,0,1593,1591,1,0,0,0,1594,1600,3,160,80,0,1595,1596,
        5,284,0,0,1596,1597,3,156,78,0,1597,1598,5,294,0,0,1598,1600,1,0,
        0,0,1599,1594,1,0,0,0,1599,1595,1,0,0,0,1600,159,1,0,0,0,1601,1603,
        3,162,81,0,1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,1604,1,0,0,0,
        1604,1606,5,149,0,0,1605,1607,5,48,0,0,1606,1605,1,0,0,0,1606,1607,
        1,0,0,0,1607,1609,1,0,0,0,1608,1610,3,164,82,0,1609,1608,1,0,0,0,
        1609,1610,1,0,0,0,1610,1611,1,0,0,0,1611,1613,3,238,119,0,1612,1614,
        3,166,83,0,1613,1612,1,0,0,0,1613,1614,1,0,0,0,1614,1616,1,0,0,0,
        1615,1617,3,168,84,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,1617,1619,
        1,0,0,0,1618,1620,3,170,85,0,1619,1618,1,0,0,0,1619,1620,1,0,0,0,
        1620,1622,1,0,0,0,1621,1623,3,172,86,0,1622,1621,1,0,0,0,1622,1623,
        1,0,0,0,1623,1625,1,0,0,0,1624,1626,3,174,87,0,1625,1624,1,0,0,0,
        1625,1626,1,0,0,0,1626,1628,1,0,0,0,1627,1629,3,176,88,0,1628,1627,
        1,0,0,0,1628,1629,1,0,0,0,1629,1632,1,0,0,0,1630,1631,5,193,0,0,
        1631,1633,7,22,0,0,1632,1630,1,0,0,0,1632,1633,1,0,0,0,1633,1636,
        1,0,0,0,1634,1635,5,193,0,0,1635,1637,5,172,0,0,1636,1634,1,0,0,
        0,1636,1637,1,0,0,0,1637,1639,1,0,0,0,1638,1640,3,178,89,0,1639,
        1638,1,0,0,0,1639,1640,1,0,0,0,1640,1642,1,0,0,0,1641,1643,3,180,
        90,0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1645,1,0,0,0,1644,
        1646,3,184,92,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1648,1,
        0,0,0,1647,1649,3,186,93,0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,
        1651,1,0,0,0,1650,1652,3,188,94,0,1651,1650,1,0,0,0,1651,1652,1,
        0,0,0,1652,161,1,0,0,0,1653,1654,5,193,0,0,1654,1655,3,238,119,0,
        1655,163,1,0,0,0,1656,1657,5,171,0,0,1657,1660,5,265,0,0,1658,1659,
        5,193,0,0,1659,1661,5,167,0,0,1660,1658,1,0,0,0,1660,1661,1,0,0,
        0,1661,165,1,0,0,0,1662,1663,5,68,0,0,1663,1664,3,190,95,0,1664,
        167,1,0,0,0,1665,1667,7,23,0,0,1666,1665,1,0,0,0,1666,1667,1,0,0,
        0,1667,1668,1,0,0,0,1668,1669,5,9,0,0,1669,1670,5,90,0,0,1670,1671,
        3,238,119,0,1671,169,1,0,0,0,1672,1673,5,192,0,0,1673,1674,3,278,
        139,0,1674,1675,5,10,0,0,1675,1676,5,284,0,0,1676,1677,3,212,106,
        0,1677,1678,5,294,0,0,1678,171,1,0,0,0,1679,1680,5,131,0,0,1680,
        1681,3,242,121,0,1681,173,1,0,0,0,1682,1683,5,191,0,0,1683,1684,
        3,242,121,0,1684,175,1,0,0,0,1685,1686,5,73,0,0,1686,1693,5,18,0,
        0,1687,1688,7,22,0,0,1688,1689,5,284,0,0,1689,1690,3,238,119,0,1690,
        1691,5,294,0,0,1691,1694,1,0,0,0,1692,1694,3,238,119,0,1693,1687,
        1,0,0,0,1693,1692,1,0,0,0,1694,177,1,0,0,0,1695,1696,5,74,0,0,1696,
        1697,3,242,121,0,1697,179,1,0,0,0,1698,1699,5,122,0,0,1699,1700,
        5,18,0,0,1700,1701,3,202,101,0,1701,181,1,0,0,0,1702,1703,5,122,
        0,0,1703,1704,5,18,0,0,1704,1705,3,238,119,0,1705,183,1,0,0,0,1706,
        1707,5,99,0,0,1707,1708,3,200,100,0,1708,1709,5,18,0,0,1709,1710,
        3,238,119,0,1710,185,1,0,0,0,1711,1712,5,99,0,0,1712,1715,3,200,
        100,0,1713,1714,5,193,0,0,1714,1716,5,167,0,0,1715,1713,1,0,0,0,
        1715,1716,1,0,0,0,1716,187,1,0,0,0,1717,1718,5,153,0,0,1718,1719,
        3,208,104,0,1719,189,1,0,0,0,1720,1721,6,95,-1,0,1721,1723,3,252,
        126,0,1722,1724,5,61,0,0,1723,1722,1,0,0,0,1723,1724,1,0,0,0,1724,
        1726,1,0,0,0,1725,1727,3,198,99,0,1726,1725,1,0,0,0,1726,1727,1,
        0,0,0,1727,1733,1,0,0,0,1728,1729,5,284,0,0,1729,1730,3,190,95,0,
        1730,1731,5,294,0,0,1731,1733,1,0,0,0,1732,1720,1,0,0,0,1732,1728,
        1,0,0,0,1733,1751,1,0,0,0,1734,1735,10,3,0,0,1735,1736,3,194,97,
        0,1736,1737,3,190,95,4,1737,1750,1,0,0,0,1738,1740,10,4,0,0,1739,
        1741,7,24,0,0,1740,1739,1,0,0,0,1740,1741,1,0,0,0,1741,1743,1,0,
        0,0,1742,1744,3,192,96,0,1743,1742,1,0,0,0,1743,1744,1,0,0,0,1744,
        1745,1,0,0,0,1745,1746,5,90,0,0,1746,1747,3,190,95,0,1747,1748,3,
        196,98,0,1748,1750,1,0,0,0,1749,1734,1,0,0,0,1749,1738,1,0,0,0,1750,
        1753,1,0,0,0,1751,1749,1,0,0,0,1751,1752,1,0,0,0,1752,191,1,0,0,
        0,1753,1751,1,0,0,0,1754,1756,7,25,0,0,1755,1754,1,0,0,0,1755,1756,
        1,0,0,0,1756,1757,1,0,0,0,1757,1764,5,84,0,0,1758,1760,5,84,0,0,
        1759,1761,7,25,0,0,1760,1759,1,0,0,0,1760,1761,1,0,0,0,1761,1764,
        1,0,0,0,1762,1764,7,25,0,0,1763,1755,1,0,0,0,1763,1758,1,0,0,0,1763,
        1762,1,0,0,0,1764,1798,1,0,0,0,1765,1767,7,26,0,0,1766,1765,1,0,
        0,0,1766,1767,1,0,0,0,1767,1768,1,0,0,0,1768,1770,7,27,0,0,1769,
        1771,5,123,0,0,1770,1769,1,0,0,0,1770,1771,1,0,0,0,1771,1780,1,0,
        0,0,1772,1774,7,27,0,0,1773,1775,5,123,0,0,1774,1773,1,0,0,0,1774,
        1775,1,0,0,0,1775,1777,1,0,0,0,1776,1778,7,26,0,0,1777,1776,1,0,
        0,0,1777,1778,1,0,0,0,1778,1780,1,0,0,0,1779,1766,1,0,0,0,1779,1772,
        1,0,0,0,1780,1798,1,0,0,0,1781,1783,7,28,0,0,1782,1781,1,0,0,0,1782,
        1783,1,0,0,0,1783,1784,1,0,0,0,1784,1786,5,69,0,0,1785,1787,5,123,
        0,0,1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,1796,1,0,0,0,1788,1790,
        5,69,0,0,1789,1791,5,123,0,0,1790,1789,1,0,0,0,1790,1791,1,0,0,0,
        1791,1793,1,0,0,0,1792,1794,7,28,0,0,1793,1792,1,0,0,0,1793,1794,
        1,0,0,0,1794,1796,1,0,0,0,1795,1782,1,0,0,0,1795,1788,1,0,0,0,1796,
        1798,1,0,0,0,1797,1763,1,0,0,0,1797,1779,1,0,0,0,1797,1795,1,0,0,
        0,1798,193,1,0,0,0,1799,1801,7,24,0,0,1800,1799,1,0,0,0,1800,1801,
        1,0,0,0,1801,1802,1,0,0,0,1802,1803,5,30,0,0,1803,1806,5,90,0,0,
        1804,1806,5,273,0,0,1805,1800,1,0,0,0,1805,1804,1,0,0,0,1806,195,
        1,0,0,0,1807,1808,5,119,0,0,1808,1817,3,238,119,0,1809,1810,5,183,
        0,0,1810,1811,5,284,0,0,1811,1812,3,238,119,0,1812,1813,5,294,0,
        0,1813,1817,1,0,0,0,1814,1815,5,183,0,0,1815,1817,3,238,119,0,1816,
        1807,1,0,0,0,1816,1809,1,0,0,0,1816,1814,1,0,0,0,1817,197,1,0,0,
        0,1818,1819,5,147,0,0,1819,1822,3,206,103,0,1820,1821,5,118,0,0,
        1821,1823,3,206,103,0,1822,1820,1,0,0,0,1822,1823,1,0,0,0,1823,199,
        1,0,0,0,1824,1827,3,242,121,0,1825,1826,7,29,0,0,1826,1828,3,242,
        121,0,1827,1825,1,0,0,0,1827,1828,1,0,0,0,1828,201,1,0,0,0,1829,
        1834,3,204,102,0,1830,1831,5,273,0,0,1831,1833,3,204,102,0,1832,
        1830,1,0,0,0,1833,1836,1,0,0,0,1834,1832,1,0,0,0,1834,1835,1,0,0,
        0,1835,203,1,0,0,0,1836,1834,1,0,0,0,1837,1839,3,242,121,0,1838,
        1840,7,30,0,0,1839,1838,1,0,0,0,1839,1840,1,0,0,0,1840,1843,1,0,
        0,0,1841,1842,5,117,0,0,1842,1844,7,31,0,0,1843,1841,1,0,0,0,1843,
        1844,1,0,0,0,1844,1847,1,0,0,0,1845,1846,5,25,0,0,1846,1848,5,267,
        0,0,1847,1845,1,0,0,0,1847,1848,1,0,0,0,1848,205,1,0,0,0,1849,1852,
        3,266,133,0,1850,1851,5,296,0,0,1851,1853,3,266,133,0,1852,1850,
        1,0,0,0,1852,1853,1,0,0,0,1853,207,1,0,0,0,1854,1859,3,210,105,0,
        1855,1856,5,273,0,0,1856,1858,3,210,105,0,1857,1855,1,0,0,0,1858,
        1861,1,0,0,0,1859,1857,1,0,0,0,1859,1860,1,0,0,0,1860,209,1,0,0,
        0,1861,1859,1,0,0,0,1862,1863,3,278,139,0,1863,1864,5,278,0,0,1864,
        1865,3,268,134,0,1865,211,1,0,0,0,1866,1868,3,214,107,0,1867,1866,
        1,0,0,0,1867,1868,1,0,0,0,1868,1870,1,0,0,0,1869,1871,3,216,108,
        0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,1873,1,0,0,0,1872,1874,
        3,218,109,0,1873,1872,1,0,0,0,1873,1874,1,0,0,0,1874,213,1,0,0,0,
        1875,1876,5,126,0,0,1876,1877,5,18,0,0,1877,1878,3,238,119,0,1878,
        215,1,0,0,0,1879,1880,5,122,0,0,1880,1881,5,18,0,0,1881,1882,3,202,
        101,0,1882,217,1,0,0,0,1883,1884,7,32,0,0,1884,1885,3,220,110,0,
        1885,219,1,0,0,0,1886,1893,3,222,111,0,1887,1888,5,16,0,0,1888,1889,
        3,222,111,0,1889,1890,5,6,0,0,1890,1891,3,222,111,0,1891,1893,1,
        0,0,0,1892,1886,1,0,0,0,1892,1887,1,0,0,0,1893,221,1,0,0,0,1894,
        1895,5,32,0,0,1895,1907,5,145,0,0,1896,1897,5,179,0,0,1897,1907,
        5,130,0,0,1898,1899,5,179,0,0,1899,1907,5,64,0,0,1900,1901,3,266,
        133,0,1901,1902,5,130,0,0,1902,1907,1,0,0,0,1903,1904,3,266,133,
        0,1904,1905,5,64,0,0,1905,1907,1,0,0,0,1906,1894,1,0,0,0,1906,1896,
        1,0,0,0,1906,1898,1,0,0,0,1906,1900,1,0,0,0,1906,1903,1,0,0,0,1907,
        223,1,0,0,0,1908,1909,5,152,0,0,1909,1910,3,208,104,0,1910,225,1,
        0,0,0,1911,1912,5,154,0,0,1912,1913,5,29,0,0,1913,1914,5,33,0,0,
        1914,1954,3,262,131,0,1915,1916,5,154,0,0,1916,1917,5,29,0,0,1917,
        1918,5,46,0,0,1918,1954,3,256,128,0,1919,1920,5,154,0,0,1920,1922,
        5,29,0,0,1921,1923,5,164,0,0,1922,1921,1,0,0,0,1922,1923,1,0,0,0,
        1923,1925,1,0,0,0,1924,1926,5,162,0,0,1925,1924,1,0,0,0,1925,1926,
        1,0,0,0,1926,1927,1,0,0,0,1927,1954,3,256,128,0,1928,1929,5,154,
        0,0,1929,1954,5,34,0,0,1930,1931,5,154,0,0,1931,1934,5,45,0,0,1932,
        1933,5,68,0,0,1933,1935,3,262,131,0,1934,1932,1,0,0,0,1934,1935,
        1,0,0,0,1935,1954,1,0,0,0,1936,1938,5,154,0,0,1937,1939,5,164,0,
        0,1938,1937,1,0,0,0,1938,1939,1,0,0,0,1939,1940,1,0,0,0,1940,1943,
        5,163,0,0,1941,1942,7,33,0,0,1942,1944,3,262,131,0,1943,1941,1,0,
        0,0,1943,1944,1,0,0,0,1944,1948,1,0,0,0,1945,1946,5,98,0,0,1946,
        1949,5,267,0,0,1947,1949,3,174,87,0,1948,1945,1,0,0,0,1948,1947,
        1,0,0,0,1948,1949,1,0,0,0,1949,1951,1,0,0,0,1950,1952,3,186,93,0,
        1951,1950,1,0,0,0,1951,1952,1,0,0,0,1952,1954,1,0,0,0,1953,1911,
        1,0,0,0,1953,1915,1,0,0,0,1953,1919,1,0,0,0,1953,1928,1,0,0,0,1953,
        1930,1,0,0,0,1953,1936,1,0,0,0,1954,227,1,0,0,0,1955,1956,5,161,
        0,0,1956,1957,5,63,0,0,1957,1958,5,49,0,0,1958,1990,3,256,128,0,
        1959,1960,5,161,0,0,1960,1961,5,63,0,0,1961,1990,5,102,0,0,1962,
        1963,5,161,0,0,1963,1964,5,137,0,0,1964,1990,5,45,0,0,1965,1966,
        5,161,0,0,1966,1967,5,137,0,0,1967,1968,5,46,0,0,1968,1990,3,256,
        128,0,1969,1970,5,161,0,0,1970,1978,7,34,0,0,1971,1972,5,49,0,0,
        1972,1979,5,151,0,0,1973,1979,5,60,0,0,1974,1976,5,177,0,0,1975,
        1974,1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,1977,1979,5,106,
        0,0,1978,1971,1,0,0,0,1978,1973,1,0,0,0,1978,1975,1,0,0,0,1979,1980,
        1,0,0,0,1980,1990,3,256,128,0,1981,1982,5,161,0,0,1982,1983,7,34,
        0,0,1983,1984,5,142,0,0,1984,1990,5,151,0,0,1985,1986,5,161,0,0,
        1986,1987,5,159,0,0,1987,1988,5,141,0,0,1988,1990,3,256,128,0,1989,
        1955,1,0,0,0,1989,1959,1,0,0,0,1989,1962,1,0,0,0,1989,1965,1,0,0,
        0,1989,1969,1,0,0,0,1989,1981,1,0,0,0,1989,1985,1,0,0,0,1990,229,
        1,0,0,0,1991,1993,5,176,0,0,1992,1994,5,164,0,0,1993,1992,1,0,0,
        0,1993,1994,1,0,0,0,1994,1996,1,0,0,0,1995,1997,5,162,0,0,1996,1995,
        1,0,0,0,1996,1997,1,0,0,0,1997,2000,1,0,0,0,1998,1999,5,78,0,0,1999,
        2001,5,56,0,0,2000,1998,1,0,0,0,2000,2001,1,0,0,0,2001,2002,1,0,
        0,0,2002,2004,3,256,128,0,2003,2005,3,66,33,0,2004,2003,1,0,0,0,
        2004,2005,1,0,0,0,2005,231,1,0,0,0,2006,2007,5,182,0,0,2007,2008,
        3,262,131,0,2008,233,1,0,0,0,2009,2010,5,188,0,0,2010,2012,3,256,
        128,0,2011,2013,5,55,0,0,2012,2011,1,0,0,0,2012,2013,1,0,0,0,2013,
        2016,1,0,0,0,2014,2015,5,99,0,0,2015,2017,5,265,0,0,2016,2014,1,
        0,0,0,2016,2017,1,0,0,0,2017,235,1,0,0,0,2018,2066,3,278,139,0,2019,
        2020,3,278,139,0,2020,2021,5,284,0,0,2021,2022,3,278,139,0,2022,
        2029,3,236,118,0,2023,2024,5,273,0,0,2024,2025,3,278,139,0,2025,
        2026,3,236,118,0,2026,2028,1,0,0,0,2027,2023,1,0,0,0,2028,2031,1,
        0,0,0,2029,2027,1,0,0,0,2029,2030,1,0,0,0,2030,2032,1,0,0,0,2031,
        2029,1,0,0,0,2032,2033,5,294,0,0,2033,2066,1,0,0,0,2034,2035,3,278,
        139,0,2035,2036,5,284,0,0,2036,2041,3,282,141,0,2037,2038,5,273,
        0,0,2038,2040,3,282,141,0,2039,2037,1,0,0,0,2040,2043,1,0,0,0,2041,
        2039,1,0,0,0,2041,2042,1,0,0,0,2042,2044,1,0,0,0,2043,2041,1,0,0,
        0,2044,2045,5,294,0,0,2045,2066,1,0,0,0,2046,2047,3,278,139,0,2047,
        2048,5,284,0,0,2048,2053,3,236,118,0,2049,2050,5,273,0,0,2050,2052,
        3,236,118,0,2051,2049,1,0,0,0,2052,2055,1,0,0,0,2053,2051,1,0,0,
        0,2053,2054,1,0,0,0,2054,2056,1,0,0,0,2055,2053,1,0,0,0,2056,2057,
        5,294,0,0,2057,2066,1,0,0,0,2058,2059,3,278,139,0,2059,2061,5,284,
        0,0,2060,2062,3,238,119,0,2061,2060,1,0,0,0,2061,2062,1,0,0,0,2062,
        2063,1,0,0,0,2063,2064,5,294,0,0,2064,2066,1,0,0,0,2065,2018,1,0,
        0,0,2065,2019,1,0,0,0,2065,2034,1,0,0,0,2065,2046,1,0,0,0,2065,2058,
        1,0,0,0,2066,237,1,0,0,0,2067,2072,3,240,120,0,2068,2069,5,273,0,
        0,2069,2071,3,240,120,0,2070,2068,1,0,0,0,2071,2074,1,0,0,0,2072,
        2070,1,0,0,0,2072,2073,1,0,0,0,2073,239,1,0,0,0,2074,2072,1,0,0,
        0,2075,2076,3,256,128,0,2076,2077,5,276,0,0,2077,2079,1,0,0,0,2078,
        2075,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,2080,2087,5,269,
        0,0,2081,2082,5,284,0,0,2082,2083,3,156,78,0,2083,2084,5,294,0,0,
        2084,2087,1,0,0,0,2085,2087,3,242,121,0,2086,2078,1,0,0,0,2086,2081,
        1,0,0,0,2086,2085,1,0,0,0,2087,241,1,0,0,0,2088,2089,6,121,-1,0,
        2089,2091,5,19,0,0,2090,2092,3,242,121,0,2091,2090,1,0,0,0,2091,
        2092,1,0,0,0,2092,2098,1,0,0,0,2093,2094,5,190,0,0,2094,2095,3,242,
        121,0,2095,2096,5,166,0,0,2096,2097,3,242,121,0,2097,2099,1,0,0,
        0,2098,2093,1,0,0,0,2099,2100,1,0,0,0,2100,2098,1,0,0,0,2100,2101,
        1,0,0,0,2101,2104,1,0,0,0,2102,2103,5,51,0,0,2103,2105,3,242,121,
        0,2104,2102,1,0,0,0,2104,2105,1,0,0,0,2105,2106,1,0,0,0,2106,2107,
        5,52,0,0,2107,2218,1,0,0,0,2108,2109,5,20,0,0,2109,2110,5,284,0,
        0,2110,2111,3,242,121,0,2111,2112,5,10,0,0,2112,2113,3,236,118,0,
        2113,2114,5,294,0,0,2114,2218,1,0,0,0,2115,2116,5,35,0,0,2116,2218,
        5,267,0,0,2117,2118,5,59,0,0,2118,2119,5,284,0,0,2119,2120,3,270,
        135,0,2120,2121,5,68,0,0,2121,2122,3,242,121,0,2122,2123,5,294,0,
        0,2123,2218,1,0,0,0,2124,2125,5,86,0,0,2125,2126,3,242,121,0,2126,
        2127,3,270,135,0,2127,2218,1,0,0,0,2128,2129,5,158,0,0,2129,2130,
        5,284,0,0,2130,2131,3,242,121,0,2131,2132,5,68,0,0,2132,2135,3,242,
        121,0,2133,2134,5,65,0,0,2134,2136,3,242,121,0,2135,2133,1,0,0,0,
        2135,2136,1,0,0,0,2136,2137,1,0,0,0,2137,2138,5,294,0,0,2138,2218,
        1,0,0,0,2139,2140,5,169,0,0,2140,2218,5,267,0,0,2141,2142,5,174,
        0,0,2142,2143,5,284,0,0,2143,2144,7,35,0,0,2144,2145,5,267,0,0,2145,
        2146,5,68,0,0,2146,2147,3,242,121,0,2147,2148,5,294,0,0,2148,2218,
        1,0,0,0,2149,2150,3,278,139,0,2150,2152,5,284,0,0,2151,2153,3,238,
        119,0,2152,2151,1,0,0,0,2152,2153,1,0,0,0,2153,2154,1,0,0,0,2154,
        2155,5,294,0,0,2155,2156,1,0,0,0,2156,2157,5,125,0,0,2157,2158,5,
        284,0,0,2158,2159,3,212,106,0,2159,2160,5,294,0,0,2160,2218,1,0,
        0,0,2161,2162,3,278,139,0,2162,2164,5,284,0,0,2163,2165,3,238,119,
        0,2164,2163,1,0,0,0,2164,2165,1,0,0,0,2165,2166,1,0,0,0,2166,2167,
        5,294,0,0,2167,2168,1,0,0,0,2168,2169,5,125,0,0,2169,2170,3,278,
        139,0,2170,2218,1,0,0,0,2171,2177,3,278,139,0,2172,2174,5,284,0,
        0,2173,2175,3,238,119,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,
        2176,1,0,0,0,2176,2178,5,294,0,0,2177,2172,1,0,0,0,2177,2178,1,0,
        0,0,2178,2179,1,0,0,0,2179,2181,5,284,0,0,2180,2182,5,48,0,0,2181,
        2180,1,0,0,0,2181,2182,1,0,0,0,2182,2184,1,0,0,0,2183,2185,3,244,
        122,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,2185,2186,1,0,0,0,2186,
        2187,5,294,0,0,2187,2218,1,0,0,0,2188,2218,3,268,134,0,2189,2190,
        5,275,0,0,2190,2218,3,242,121,17,2191,2192,5,115,0,0,2192,2218,3,
        242,121,12,2193,2194,3,256,128,0,2194,2195,5,276,0,0,2195,2197,1,
        0,0,0,2196,2193,1,0,0,0,2196,2197,1,0,0,0,2197,2198,1,0,0,0,2198,
        2218,5,269,0,0,2199,2200,5,284,0,0,2200,2201,3,156,78,0,2201,2202,
        5,294,0,0,2202,2218,1,0,0,0,2203,2204,5,284,0,0,2204,2205,3,242,
        121,0,2205,2206,5,294,0,0,2206,2218,1,0,0,0,2207,2208,5,284,0,0,
        2208,2209,3,238,119,0,2209,2210,5,294,0,0,2210,2218,1,0,0,0,2211,
        2213,5,282,0,0,2212,2214,3,238,119,0,2213,2212,1,0,0,0,2213,2214,
        1,0,0,0,2214,2215,1,0,0,0,2215,2218,5,293,0,0,2216,2218,3,250,125,
        0,2217,2088,1,0,0,0,2217,2108,1,0,0,0,2217,2115,1,0,0,0,2217,2117,
        1,0,0,0,2217,2124,1,0,0,0,2217,2128,1,0,0,0,2217,2139,1,0,0,0,2217,
        2141,1,0,0,0,2217,2149,1,0,0,0,2217,2161,1,0,0,0,2217,2171,1,0,0,
        0,2217,2188,1,0,0,0,2217,2189,1,0,0,0,2217,2191,1,0,0,0,2217,2196,
        1,0,0,0,2217,2199,1,0,0,0,2217,2203,1,0,0,0,2217,2207,1,0,0,0,2217,
        2211,1,0,0,0,2217,2216,1,0,0,0,2218,2290,1,0,0,0,2219,2220,10,16,
        0,0,2220,2221,7,36,0,0,2221,2289,3,242,121,17,2222,2223,10,15,0,
        0,2223,2224,7,37,0,0,2224,2289,3,242,121,16,2225,2244,10,14,0,0,
        2226,2245,5,277,0,0,2227,2245,5,278,0,0,2228,2245,5,286,0,0,2229,
        2245,5,283,0,0,2230,2245,5,279,0,0,2231,2245,5,285,0,0,2232,2245,
        5,280,0,0,2233,2235,5,71,0,0,2234,2233,1,0,0,0,2234,2235,1,0,0,0,
        2235,2237,1,0,0,0,2236,2238,5,115,0,0,2237,2236,1,0,0,0,2237,2238,
        1,0,0,0,2238,2239,1,0,0,0,2239,2245,5,80,0,0,2240,2242,5,115,0,0,
        2241,2240,1,0,0,0,2241,2242,1,0,0,0,2242,2243,1,0,0,0,2243,2245,
        7,38,0,0,2244,2226,1,0,0,0,2244,2227,1,0,0,0,2244,2228,1,0,0,0,2244,
        2229,1,0,0,0,2244,2230,1,0,0,0,2244,2231,1,0,0,0,2244,2232,1,0,0,
        0,2244,2234,1,0,0,0,2244,2241,1,0,0,0,2245,2246,1,0,0,0,2246,2289,
        3,242,121,15,2247,2248,10,11,0,0,2248,2249,5,6,0,0,2249,2289,3,242,
        121,12,2250,2251,10,10,0,0,2251,2252,5,121,0,0,2252,2289,3,242,121,
        11,2253,2255,10,9,0,0,2254,2256,5,115,0,0,2255,2254,1,0,0,0,2255,
        2256,1,0,0,0,2256,2257,1,0,0,0,2257,2258,5,16,0,0,2258,2259,3,242,
        121,0,2259,2260,5,6,0,0,2260,2261,3,242,121,10,2261,2289,1,0,0,0,
        2262,2263,10,8,0,0,2263,2264,5,289,0,0,2264,2265,3,242,121,0,2265,
        2266,5,272,0,0,2266,2267,3,242,121,8,2267,2289,1,0,0,0,2268,2269,
        10,19,0,0,2269,2270,5,282,0,0,2270,2271,3,242,121,0,2271,2272,5,
        293,0,0,2272,2289,1,0,0,0,2273,2274,10,18,0,0,2274,2275,5,276,0,
        0,2275,2289,5,265,0,0,2276,2277,10,13,0,0,2277,2279,5,88,0,0,2278,
        2280,5,115,0,0,2279,2278,1,0,0,0,2279,2280,1,0,0,0,2280,2281,1,0,
        0,0,2281,2289,5,116,0,0,2282,2286,10,7,0,0,2283,2287,3,276,138,0,
        2284,2285,5,10,0,0,2285,2287,3,278,139,0,2286,2283,1,0,0,0,2286,
        2284,1,0,0,0,2287,2289,1,0,0,0,2288,2219,1,0,0,0,2288,2222,1,0,0,
        0,2288,2225,1,0,0,0,2288,2247,1,0,0,0,2288,2250,1,0,0,0,2288,2253,
        1,0,0,0,2288,2262,1,0,0,0,2288,2268,1,0,0,0,2288,2273,1,0,0,0,2288,
        2276,1,0,0,0,2288,2282,1,0,0,0,2289,2292,1,0,0,0,2290,2288,1,0,0,
        0,2290,2291,1,0,0,0,2291,243,1,0,0,0,2292,2290,1,0,0,0,2293,2298,
        3,246,123,0,2294,2295,5,273,0,0,2295,2297,3,246,123,0,2296,2294,
        1,0,0,0,2297,2300,1,0,0,0,2298,2296,1,0,0,0,2298,2299,1,0,0,0,2299,
        245,1,0,0,0,2300,2298,1,0,0,0,2301,2304,3,248,124,0,2302,2304,3,
        242,121,0,2303,2301,1,0,0,0,2303,2302,1,0,0,0,2304,247,1,0,0,0,2305,
        2306,5,284,0,0,2306,2311,3,278,139,0,2307,2308,5,273,0,0,2308,2310,
        3,278,139,0,2309,2307,1,0,0,0,2310,2313,1,0,0,0,2311,2309,1,0,0,
        0,2311,2312,1,0,0,0,2312,2314,1,0,0,0,2313,2311,1,0,0,0,2314,2315,
        5,294,0,0,2315,2325,1,0,0,0,2316,2321,3,278,139,0,2317,2318,5,273,
        0,0,2318,2320,3,278,139,0,2319,2317,1,0,0,0,2320,2323,1,0,0,0,2321,
        2319,1,0,0,0,2321,2322,1,0,0,0,2322,2325,1,0,0,0,2323,2321,1,0,0,
        0,2324,2305,1,0,0,0,2324,2316,1,0,0,0,2325,2326,1,0,0,0,2326,2327,
        5,268,0,0,2327,2328,3,242,121,0,2328,249,1,0,0,0,2329,2330,3,256,
        128,0,2330,2331,5,276,0,0,2331,2333,1,0,0,0,2332,2329,1,0,0,0,2332,
        2333,1,0,0,0,2333,2334,1,0,0,0,2334,2337,3,278,139,0,2335,2336,5,
        276,0,0,2336,2338,3,278,139,0,2337,2335,1,0,0,0,2337,2338,1,0,0,
        0,2338,251,1,0,0,0,2339,2340,6,126,-1,0,2340,2347,3,256,128,0,2341,
        2347,3,254,127,0,2342,2343,5,284,0,0,2343,2344,3,156,78,0,2344,2345,
        5,294,0,0,2345,2347,1,0,0,0,2346,2339,1,0,0,0,2346,2341,1,0,0,0,
        2346,2342,1,0,0,0,2347,2356,1,0,0,0,2348,2352,10,1,0,0,2349,2353,
        3,276,138,0,2350,2351,5,10,0,0,2351,2353,3,278,139,0,2352,2349,1,
        0,0,0,2352,2350,1,0,0,0,2353,2355,1,0,0,0,2354,2348,1,0,0,0,2355,
        2358,1,0,0,0,2356,2354,1,0,0,0,2356,2357,1,0,0,0,2357,253,1,0,0,
        0,2358,2356,1,0,0,0,2359,2360,3,278,139,0,2360,2362,5,284,0,0,2361,
        2363,3,258,129,0,2362,2361,1,0,0,0,2362,2363,1,0,0,0,2363,2364,1,
        0,0,0,2364,2365,5,294,0,0,2365,255,1,0,0,0,2366,2367,3,262,131,0,
        2367,2368,5,276,0,0,2368,2370,1,0,0,0,2369,2366,1,0,0,0,2369,2370,
        1,0,0,0,2370,2371,1,0,0,0,2371,2372,3,278,139,0,2372,257,1,0,0,0,
        2373,2378,3,260,130,0,2374,2375,5,273,0,0,2375,2377,3,260,130,0,
        2376,2374,1,0,0,0,2377,2380,1,0,0,0,2378,2376,1,0,0,0,2378,2379,
        1,0,0,0,2379,259,1,0,0,0,2380,2378,1,0,0,0,2381,2385,3,250,125,0,
        2382,2385,3,254,127,0,2383,2385,3,268,134,0,2384,2381,1,0,0,0,2384,
        2382,1,0,0,0,2384,2383,1,0,0,0,2385,261,1,0,0,0,2386,2387,3,278,
        139,0,2387,263,1,0,0,0,2388,2397,5,263,0,0,2389,2390,5,276,0,0,2390,
        2397,7,39,0,0,2391,2392,5,265,0,0,2392,2394,5,276,0,0,2393,2395,
        7,39,0,0,2394,2393,1,0,0,0,2394,2395,1,0,0,0,2395,2397,1,0,0,0,2396,
        2388,1,0,0,0,2396,2389,1,0,0,0,2396,2391,1,0,0,0,2397,265,1,0,0,
        0,2398,2400,7,40,0,0,2399,2398,1,0,0,0,2399,2400,1,0,0,0,2400,2407,
        1,0,0,0,2401,2408,3,264,132,0,2402,2408,5,264,0,0,2403,2408,5,265,
        0,0,2404,2408,5,266,0,0,2405,2408,5,82,0,0,2406,2408,5,113,0,0,2407,
        2401,1,0,0,0,2407,2402,1,0,0,0,2407,2403,1,0,0,0,2407,2404,1,0,0,
        0,2407,2405,1,0,0,0,2407,2406,1,0,0,0,2408,267,1,0,0,0,2409,2413,
        3,266,133,0,2410,2413,5,267,0,0,2411,2413,5,116,0,0,2412,2409,1,
        0,0,0,2412,2410,1,0,0,0,2412,2411,1,0,0,0,2413,269,1,0,0,0,2414,
        2415,7,41,0,0,2415,271,1,0,0,0,2416,2417,7,42,0,0,2417,273,1,0,0,
        0,2418,2419,7,43,0,0,2419,275,1,0,0,0,2420,2423,5,262,0,0,2421,2423,
        3,274,137,0,2422,2420,1,0,0,0,2422,2421,1,0,0,0,2423,277,1,0,0,0,
        2424,2428,5,262,0,0,2425,2428,3,270,135,0,2426,2428,3,272,136,0,
        2427,2424,1,0,0,0,2427,2425,1,0,0,0,2427,2426,1,0,0,0,2428,279,1,
        0,0,0,2429,2432,3,278,139,0,2430,2432,5,116,0,0,2431,2429,1,0,0,
        0,2431,2430,1,0,0,0,2432,281,1,0,0,0,2433,2434,5,267,0,0,2434,2435,
        5,278,0,0,2435,2436,3,266,133,0,2436,283,1,0,0,0,323,285,291,297,
        303,307,310,314,336,339,347,352,365,374,381,389,394,401,406,413,
        418,424,430,435,441,446,452,457,463,477,484,491,498,504,509,515,
        520,526,535,545,555,575,583,598,605,619,625,631,637,640,646,649,
        652,658,662,665,668,671,674,681,685,693,696,702,706,709,720,724,
        727,732,734,737,740,750,754,757,760,765,767,774,780,784,787,790,
        800,808,834,836,840,862,864,875,878,887,904,915,933,946,963,972,
        999,1001,1022,1027,1032,1035,1047,1052,1056,1059,1063,1067,1072,
        1075,1079,1081,1103,1111,1114,1124,1128,1136,1140,1145,1149,1153,
        1157,1161,1163,1171,1175,1178,1201,1205,1212,1220,1224,1226,1233,
        1238,1245,1250,1254,1258,1262,1268,1271,1275,1279,1283,1289,1297,
        1300,1304,1310,1314,1319,1323,1327,1332,1340,1343,1348,1359,1363,
        1368,1375,1389,1391,1403,1410,1429,1442,1446,1453,1473,1478,1483,
        1486,1496,1506,1510,1515,1521,1526,1532,1536,1542,1545,1548,1551,
        1565,1569,1573,1578,1581,1591,1599,1602,1606,1609,1613,1616,1619,
        1622,1625,1628,1632,1636,1639,1642,1645,1648,1651,1660,1666,1693,
        1715,1723,1726,1732,1740,1743,1749,1751,1755,1760,1763,1766,1770,
        1774,1777,1779,1782,1786,1790,1793,1795,1797,1800,1805,1816,1822,
        1827,1834,1839,1843,1847,1852,1859,1867,1870,1873,1892,1906,1922,
        1925,1934,1938,1943,1948,1951,1953,1975,1978,1989,1993,1996,2000,
        2004,2012,2016,2029,2041,2053,2061,2065,2072,2078,2086,2091,2100,
        2104,2135,2152,2164,2174,2177,2181,2184,2196,2213,2217,2234,2237,
        2241,2244,2255,2279,2286,2288,2290,2298,2303,2311,2321,2324,2332,
        2337,2346,2352,2356,2362,2369,2378,2384,2394,2396,2399,2407,2412,
        2422,2427,2431
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!ClickHouseParser.__ATN) {
            ClickHouseParser.__ATN = new antlr.ATNDeserializer().deserialize(ClickHouseParser._serializedATN);
        }

        return ClickHouseParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(ClickHouseParser.literalNames, ClickHouseParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return ClickHouseParser.vocabulary;
    }

    private static readonly decisionsToDFA = ClickHouseParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EOF, 0)!;
    }
    public statements(): StatementsContext | null {
        return this.getRuleContext(0, StatementsContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_root;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRoot) {
            return visitor.visitRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public statements(): StatementsContext | null {
        return this.getRuleContext(0, StatementsContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_statements;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStatements) {
            return visitor.visitStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public notInsertStatement(): NotInsertStatementContext | null {
        return this.getRuleContext(0, NotInsertStatementContext);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTO, 0);
    }
    public OUTFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTFILE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORMAT, 0);
    }
    public identifierOrNull(): IdentifierOrNullContext | null {
        return this.getRuleContext(0, IdentifierOrNullContext);
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(0, InsertStatementContext);
    }
    public grantStatement(): GrantStatementContext | null {
        return this.getRuleContext(0, GrantStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_statement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotInsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterStatement(): AlterStatementContext | null {
        return this.getRuleContext(0, AlterStatementContext);
    }
    public attachStatement(): AttachStatementContext | null {
        return this.getRuleContext(0, AttachStatementContext);
    }
    public checkStatement(): CheckStatementContext | null {
        return this.getRuleContext(0, CheckStatementContext);
    }
    public createStatement(): CreateStatementContext | null {
        return this.getRuleContext(0, CreateStatementContext);
    }
    public describeStatement(): DescribeStatementContext | null {
        return this.getRuleContext(0, DescribeStatementContext);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(0, DeleteStatementContext);
    }
    public dropStatement(): DropStatementContext | null {
        return this.getRuleContext(0, DropStatementContext);
    }
    public existsStatement(): ExistsStatementContext | null {
        return this.getRuleContext(0, ExistsStatementContext);
    }
    public explainStatement(): ExplainStatementContext | null {
        return this.getRuleContext(0, ExplainStatementContext);
    }
    public killStatement(): KillStatementContext | null {
        return this.getRuleContext(0, KillStatementContext);
    }
    public optimizeStatement(): OptimizeStatementContext | null {
        return this.getRuleContext(0, OptimizeStatementContext);
    }
    public renameStatement(): RenameStatementContext | null {
        return this.getRuleContext(0, RenameStatementContext);
    }
    public selectUnionStatement(): SelectUnionStatementContext | null {
        return this.getRuleContext(0, SelectUnionStatementContext);
    }
    public setStatement(): SetStatementContext | null {
        return this.getRuleContext(0, SetStatementContext);
    }
    public showStatement(): ShowStatementContext | null {
        return this.getRuleContext(0, ShowStatementContext);
    }
    public systemStatement(): SystemStatementContext | null {
        return this.getRuleContext(0, SystemStatementContext);
    }
    public truncateStatement(): TruncateStatementContext | null {
        return this.getRuleContext(0, TruncateStatementContext);
    }
    public useStatement(): UseStatementContext | null {
        return this.getRuleContext(0, UseStatementContext);
    }
    public watchStatement(): WatchStatementContext | null {
        return this.getRuleContext(0, WatchStatementContext);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public commonTableExpressionStatement(): CommonTableExpressionStatementContext | null {
        return this.getRuleContext(0, CommonTableExpressionStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_notInsertStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNotInsertStatement) {
            return visitor.visitNotInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonTableExpressionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WITH, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_commonTableExpressionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCommonTableExpressionStatement) {
            return visitor.visitCommonTableExpressionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_namedQuery;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAliasesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnAliases;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnAliases) {
            return visitor.visitColumnAliases(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterStatement;
    }
    public override copyFrom(ctx: AlterStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterTableStatementContext extends AlterStatementContext {
    public constructor(ctx: AlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public alterTableClause(): AlterTableClauseContext[];
    public alterTableClause(i: number): AlterTableClauseContext | null;
    public alterTableClause(i?: number): AlterTableClauseContext[] | AlterTableClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterTableClauseContext);
        }

        return this.getRuleContext(i, AlterTableClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableStatement) {
            return visitor.visitAlterTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableClause;
    }
    public override copyFrom(ctx: AlterTableClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterTableClauseReplaceContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REPLACE, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseReplace) {
            return visitor.visitAlterTableClauseReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyOrderByContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyOrderBy) {
            return visitor.visitAlterTableClauseModifyOrderBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseUpdateContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.UPDATE, 0)!;
    }
    public assignmentExpressionList(): AssignmentExpressionListContext {
        return this.getRuleContext(0, AssignmentExpressionListContext)!;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(0, WhereClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseUpdate) {
            return visitor.visitAlterTableClauseUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseClearProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLEAR, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseClearProjection) {
            return visitor.visitAlterTableClauseClearProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyRemoveContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public REMOVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REMOVE, 0)!;
    }
    public tableColumnPropertyType(): TableColumnPropertyTypeContext {
        return this.getRuleContext(0, TableColumnPropertyTypeContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyRemove) {
            return visitor.visitAlterTableClauseModifyRemove(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDeleteContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DELETE, 0)!;
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDelete) {
            return visitor.visitAlterTableClauseDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseCommentContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COMMENT, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseComment) {
            return visitor.visitAlterTableClauseComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropColumnContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropColumn) {
            return visitor.visitAlterTableClauseDropColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDetachContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DETACH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DETACH, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDetach) {
            return visitor.visitAlterTableClauseDetach(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAddIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ADD, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public tableIndexDefinition(): TableIndexDefinitionContext {
        return this.getRuleContext(0, TableIndexDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAddIndex) {
            return visitor.visitAlterTableClauseAddIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropPartitionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropPartition) {
            return visitor.visitAlterTableClauseDropPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseMaterializeIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MATERIALIZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseMaterializeIndex) {
            return visitor.visitAlterTableClauseMaterializeIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseMaterializeProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MATERIALIZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseMaterializeProjection) {
            return visitor.visitAlterTableClauseMaterializeProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseMovePartitionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MOVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MOVE, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseMovePartition) {
            return visitor.visitAlterTableClauseMovePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseRenameContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RENAME, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext[];
    public columnIdentifier(i: number): ColumnIdentifierContext | null;
    public columnIdentifier(i?: number): ColumnIdentifierContext[] | ColumnIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnIdentifierContext);
        }

        return this.getRuleContext(i, ColumnIdentifierContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseRename) {
            return visitor.visitAlterTableClauseRename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseFreezePartitionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FREEZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FREEZE, 0)!;
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseFreezePartition) {
            return visitor.visitAlterTableClauseFreezePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseClearColumnContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLEAR, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseClearColumn) {
            return visitor.visitAlterTableClauseClearColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        return this.getRuleContext(0, TableColumnDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModify) {
            return visitor.visitAlterTableClauseModify(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseClearIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLEAR, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseClearIndex) {
            return visitor.visitAlterTableClauseClearIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseRemoveTTLContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REMOVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REMOVE, 0)!;
    }
    public TTL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TTL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseRemoveTTL) {
            return visitor.visitAlterTableClauseRemoveTTL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyCodecContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public codecExpression(): CodecExpressionContext {
        return this.getRuleContext(0, CodecExpressionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyCodec) {
            return visitor.visitAlterTableClauseModifyCodec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAttachContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ATTACH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ATTACH, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAttach) {
            return visitor.visitAlterTableClauseAttach(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropProjection) {
            return visitor.visitAlterTableClauseDropProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropIndex) {
            return visitor.visitAlterTableClauseDropIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyCommentContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COMMENT, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyComment) {
            return visitor.visitAlterTableClauseModifyComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyTTLContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public ttlClause(): TtlClauseContext {
        return this.getRuleContext(0, TtlClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyTTL) {
            return visitor.visitAlterTableClauseModifyTTL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAddProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ADD, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext {
        return this.getRuleContext(0, TableProjectionDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAddProjection) {
            return visitor.visitAlterTableClauseAddProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAddColumnContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ADD, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        return this.getRuleContext(0, TableColumnDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAddColumn) {
            return visitor.visitAlterTableClauseAddColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignmentExpression(): AssignmentExpressionContext[];
    public assignmentExpression(i: number): AssignmentExpressionContext | null;
    public assignmentExpression(i?: number): AssignmentExpressionContext[] | AssignmentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignmentExpressionContext);
        }

        return this.getRuleContext(i, AssignmentExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_assignmentExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentExpressionList) {
            return visitor.visitAssignmentExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_assignmentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentExpression) {
            return visitor.visitAssignmentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnPropertyTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public CODEC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CODEC, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnPropertyType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnPropertyType) {
            return visitor.visitTableColumnPropertyType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_partitionClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionClause) {
            return visitor.visitPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AttachStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_attachStatement;
    }
    public override copyFrom(ctx: AttachStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class AttachDictionaryStatementContext extends AttachStatementContext {
    public constructor(ctx: AttachStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ATTACH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ATTACH, 0)!;
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAttachDictionaryStatement) {
            return visitor.visitAttachDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CHECK, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_checkStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCheckStatement) {
            return visitor.visitCheckStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_deleteStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteStatement) {
            return visitor.visitDeleteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public engineClause(): EngineClauseContext | null {
        return this.getRuleContext(0, EngineClauseContext);
    }
    public subqueryClause(): SubqueryClauseContext | null {
        return this.getRuleContext(0, SubqueryClauseContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createTableStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableStatement) {
            return visitor.visitCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public engineExpression(): EngineExpressionContext {
        return this.getRuleContext(0, EngineExpressionContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createDatabaseStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabaseStatement) {
            return visitor.visitCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDictionaryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public dictionarySchemaClause(): DictionarySchemaClauseContext {
        return this.getRuleContext(0, DictionarySchemaClauseContext)!;
    }
    public dictionaryEngineClause(): DictionaryEngineClauseContext {
        return this.getRuleContext(0, DictionaryEngineClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createDictionaryStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDictionaryStatement) {
            return visitor.visitCreateDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateLiveViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIVE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIMEOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMEOUT, 0);
    }
    public destinationClause(): DestinationClauseContext | null {
        return this.getRuleContext(0, DestinationClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createLiveViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateLiveViewStatement) {
            return visitor.visitCreateLiveViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMaterializedViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public destinationClause(): DestinationClauseContext | null {
        return this.getRuleContext(0, DestinationClauseContext);
    }
    public engineClause(): EngineClauseContext | null {
        return this.getRuleContext(0, EngineClauseContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public POPULATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POPULATE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createMaterializedViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedViewStatement) {
            return visitor.visitCreateMaterializedViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateViewStatement) {
            return visitor.visitCreateViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext | null {
        return this.getRuleContext(0, CreateDatabaseStatementContext);
    }
    public createDictionaryStatement(): CreateDictionaryStatementContext | null {
        return this.getRuleContext(0, CreateDictionaryStatementContext);
    }
    public createLiveViewStatement(): CreateLiveViewStatementContext | null {
        return this.getRuleContext(0, CreateLiveViewStatementContext);
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext | null {
        return this.getRuleContext(0, CreateMaterializedViewStatementContext);
    }
    public createTableStatement(): CreateTableStatementContext | null {
        return this.getRuleContext(0, CreateTableStatementContext);
    }
    public createViewStatement(): CreateViewStatementContext | null {
        return this.getRuleContext(0, CreateViewStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateStatement) {
            return visitor.visitCreateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionarySchemaClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public dictionaryAttributeDefinition(): DictionaryAttributeDefinitionContext[];
    public dictionaryAttributeDefinition(i: number): DictionaryAttributeDefinitionContext | null;
    public dictionaryAttributeDefinition(i?: number): DictionaryAttributeDefinitionContext[] | DictionaryAttributeDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryAttributeDefinitionContext);
        }

        return this.getRuleContext(i, DictionaryAttributeDefinitionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionarySchemaClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionarySchemaClause) {
            return visitor.visitDictionarySchemaClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryAttributeDefinitionContext extends antlr.ParserRuleContext {
    public attrs: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DEFAULT);
    	} else {
    		return this.getToken(ClickHouseParser.DEFAULT, i);
    	}
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public EXPRESSION(): antlr.TerminalNode[];
    public EXPRESSION(i: number): antlr.TerminalNode | null;
    public EXPRESSION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.EXPRESSION);
    	} else {
    		return this.getToken(ClickHouseParser.EXPRESSION, i);
    	}
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public HIERARCHICAL(): antlr.TerminalNode[];
    public HIERARCHICAL(i: number): antlr.TerminalNode | null;
    public HIERARCHICAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.HIERARCHICAL);
    	} else {
    		return this.getToken(ClickHouseParser.HIERARCHICAL, i);
    	}
    }
    public INJECTIVE(): antlr.TerminalNode[];
    public INJECTIVE(i: number): antlr.TerminalNode | null;
    public INJECTIVE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.INJECTIVE);
    	} else {
    		return this.getToken(ClickHouseParser.INJECTIVE, i);
    	}
    }
    public IS_OBJECT_ID(): antlr.TerminalNode[];
    public IS_OBJECT_ID(i: number): antlr.TerminalNode | null;
    public IS_OBJECT_ID(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.IS_OBJECT_ID);
    	} else {
    		return this.getToken(ClickHouseParser.IS_OBJECT_ID, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryAttributeDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryAttributeDefinition) {
            return visitor.visitDictionaryAttributeDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryEngineClauseContext extends antlr.ParserRuleContext {
    public clauses: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dictionaryPrimaryKeyClause(): DictionaryPrimaryKeyClauseContext | null {
        return this.getRuleContext(0, DictionaryPrimaryKeyClauseContext);
    }
    public sourceClause(): SourceClauseContext[];
    public sourceClause(i: number): SourceClauseContext | null;
    public sourceClause(i?: number): SourceClauseContext[] | SourceClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SourceClauseContext);
        }

        return this.getRuleContext(i, SourceClauseContext);
    }
    public lifetimeClause(): LifetimeClauseContext[];
    public lifetimeClause(i: number): LifetimeClauseContext | null;
    public lifetimeClause(i?: number): LifetimeClauseContext[] | LifetimeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LifetimeClauseContext);
        }

        return this.getRuleContext(i, LifetimeClauseContext);
    }
    public layoutClause(): LayoutClauseContext[];
    public layoutClause(i: number): LayoutClauseContext | null;
    public layoutClause(i?: number): LayoutClauseContext[] | LayoutClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LayoutClauseContext);
        }

        return this.getRuleContext(i, LayoutClauseContext);
    }
    public rangeClause(): RangeClauseContext[];
    public rangeClause(i: number): RangeClauseContext | null;
    public rangeClause(i?: number): RangeClauseContext[] | RangeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RangeClauseContext);
        }

        return this.getRuleContext(i, RangeClauseContext);
    }
    public dictionarySettingsClause(): DictionarySettingsClauseContext[];
    public dictionarySettingsClause(i: number): DictionarySettingsClauseContext | null;
    public dictionarySettingsClause(i?: number): DictionarySettingsClauseContext[] | DictionarySettingsClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionarySettingsClauseContext);
        }

        return this.getRuleContext(i, DictionarySettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryEngineClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryEngineClause) {
            return visitor.visitDictionaryEngineClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryPrimaryKeyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PRIMARY, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryPrimaryKeyClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryPrimaryKeyClause) {
            return visitor.visitDictionaryPrimaryKeyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryArgumentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryArgumentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryArgumentExpression) {
            return visitor.visitDictionaryArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SOURCE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext[];
    public dictionaryArgumentExpression(i: number): DictionaryArgumentExpressionContext | null;
    public dictionaryArgumentExpression(i?: number): DictionaryArgumentExpressionContext[] | DictionaryArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryArgumentExpressionContext);
        }

        return this.getRuleContext(i, DictionaryArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sourceClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSourceClause) {
            return visitor.visitSourceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LifetimeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIFETIME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIFETIME, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode[];
    public DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
    	}
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_lifetimeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLifetimeClause) {
            return visitor.visitLifetimeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LayoutClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LAYOUT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LAYOUT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext[];
    public dictionaryArgumentExpression(i: number): DictionaryArgumentExpressionContext | null;
    public dictionaryArgumentExpression(i?: number): DictionaryArgumentExpressionContext[] | DictionaryArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryArgumentExpressionContext);
        }

        return this.getRuleContext(i, DictionaryArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_layoutClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLayoutClause) {
            return visitor.visitLayoutClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANGE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RANGE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_rangeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRangeClause) {
            return visitor.visitRangeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionarySettingsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionarySettingsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionarySettingsClause) {
            return visitor.visitDictionarySettingsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ON, 0)!;
    }
    public CLUSTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLUSTER, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_clusterClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitClusterClause) {
            return visitor.visitClusterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UuidClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UUID(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.UUID, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_uuidClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUuidClause) {
            return visitor.visitUuidClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DestinationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_destinationClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDestinationClause) {
            return visitor.visitDestinationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubqueryClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_subqueryClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryClause) {
            return visitor.visitSubqueryClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSchemaClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableSchemaClause;
    }
    public override copyFrom(ctx: TableSchemaClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class SchemaAsTableClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaAsTableClause) {
            return visitor.visitSchemaAsTableClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SchemaAsFunctionClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        return this.getRuleContext(0, TableFunctionExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaAsFunctionClause) {
            return visitor.visitSchemaAsFunctionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SchemaDescriptionClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public tableElementExpression(): TableElementExpressionContext[];
    public tableElementExpression(i: number): TableElementExpressionContext | null;
    public tableElementExpression(i?: number): TableElementExpressionContext[] | TableElementExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableElementExpressionContext);
        }

        return this.getRuleContext(i, TableElementExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaDescriptionClause) {
            return visitor.visitSchemaDescriptionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineClauseContext extends antlr.ParserRuleContext {
    public clauses: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public engineExpression(): EngineExpressionContext {
        return this.getRuleContext(0, EngineExpressionContext)!;
    }
    public orderByClause(): OrderByClauseContext[];
    public orderByClause(i: number): OrderByClauseContext | null;
    public orderByClause(i?: number): OrderByClauseContext[] | OrderByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderByClauseContext);
        }

        return this.getRuleContext(i, OrderByClauseContext);
    }
    public partitionByClause(): PartitionByClauseContext[];
    public partitionByClause(i: number): PartitionByClauseContext | null;
    public partitionByClause(i?: number): PartitionByClauseContext[] | PartitionByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionByClauseContext);
        }

        return this.getRuleContext(i, PartitionByClauseContext);
    }
    public primaryKeyClause(): PrimaryKeyClauseContext[];
    public primaryKeyClause(i: number): PrimaryKeyClauseContext | null;
    public primaryKeyClause(i?: number): PrimaryKeyClauseContext[] | PrimaryKeyClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryKeyClauseContext);
        }

        return this.getRuleContext(i, PrimaryKeyClauseContext);
    }
    public sampleByClause(): SampleByClauseContext[];
    public sampleByClause(i: number): SampleByClauseContext | null;
    public sampleByClause(i?: number): SampleByClauseContext[] | SampleByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SampleByClauseContext);
        }

        return this.getRuleContext(i, SampleByClauseContext);
    }
    public ttlClause(): TtlClauseContext[];
    public ttlClause(i: number): TtlClauseContext | null;
    public ttlClause(i?: number): TtlClauseContext[] | TtlClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TtlClauseContext);
        }

        return this.getRuleContext(i, TtlClauseContext);
    }
    public settingsClause(): SettingsClauseContext[];
    public settingsClause(i: number): SettingsClauseContext | null;
    public settingsClause(i?: number): SettingsClauseContext[] | SettingsClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SettingsClauseContext);
        }

        return this.getRuleContext(i, SettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_engineClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEngineClause) {
            return visitor.visitEngineClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_partitionByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionByClause) {
            return visitor.visitPartitionByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryKeyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PRIMARY, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_primaryKeyClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryKeyClause) {
            return visitor.visitPrimaryKeyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAMPLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SAMPLE, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sampleByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSampleByClause) {
            return visitor.visitSampleByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TtlClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TTL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TTL, 0)!;
    }
    public ttlExpression(): TtlExpressionContext[];
    public ttlExpression(i: number): TtlExpressionContext | null;
    public ttlExpression(i?: number): TtlExpressionContext[] | TtlExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TtlExpressionContext);
        }

        return this.getRuleContext(i, TtlExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ttlClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTtlClause) {
            return visitor.visitTtlClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ENGINE, 0)!;
    }
    public identifierOrNull(): IdentifierOrNullContext {
        return this.getRuleContext(0, IdentifierOrNullContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_engineExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEngineExpression) {
            return visitor.visitEngineExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableElementExpression;
    }
    public override copyFrom(ctx: TableElementExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class TableElementExpressionColumnContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        return this.getRuleContext(0, TableColumnDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionColumn) {
            return visitor.visitTableElementExpressionColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionConstraintContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CHECK, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionConstraint) {
            return visitor.visitTableElementExpressionConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionIndexContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public tableIndexDefinition(): TableIndexDefinitionContext {
        return this.getRuleContext(0, TableIndexDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionIndex) {
            return visitor.visitTableElementExpressionIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionProjectionContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext {
        return this.getRuleContext(0, TableProjectionDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionProjection) {
            return visitor.visitTableElementExpressionProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext | null {
        return this.getRuleContext(0, ColumnTypeExpressionContext);
    }
    public tableColumnPropertyExpression(): TableColumnPropertyExpressionContext | null {
        return this.getRuleContext(0, TableColumnPropertyExpressionContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public codecExpression(): CodecExpressionContext | null {
        return this.getRuleContext(0, CodecExpressionContext);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnDefinition) {
            return visitor.visitTableColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnPropertyExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnPropertyExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnPropertyExpression) {
            return visitor.visitTableColumnPropertyExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIndexDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TYPE, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public GRANULARITY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GRANULARITY, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableIndexDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableIndexDefinition) {
            return visitor.visitTableIndexDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableProjectionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public projectionSelectStatement(): ProjectionSelectStatementContext {
        return this.getRuleContext(0, ProjectionSelectStatementContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableProjectionDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableProjectionDefinition) {
            return visitor.visitTableProjectionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CodecExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CODEC(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CODEC, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public codecArgExpression(): CodecArgExpressionContext[];
    public codecArgExpression(i: number): CodecArgExpressionContext | null;
    public codecArgExpression(i?: number): CodecArgExpressionContext[] | CodecArgExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CodecArgExpressionContext);
        }

        return this.getRuleContext(i, CodecArgExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_codecExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCodecExpression) {
            return visitor.visitCodecExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CodecArgExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_codecArgExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCodecArgExpression) {
            return visitor.visitCodecArgExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TtlExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ttlExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTtlExpression) {
            return visitor.visitTtlExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_describeStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeStatement) {
            return visitor.visitDescribeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dropStatement;
    }
    public override copyFrom(ctx: DropStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class DropDatabaseStatementContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropDatabaseStatement) {
            return visitor.visitDropDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableStatementContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO, 0);
    }
    public DELAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELAY, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropTableStatement) {
            return visitor.visitDropTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExistsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_existsStatement;
    }
    public override copyFrom(ctx: ExistsStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExistsDatabaseStatementContext extends ExistsStatementContext {
    public constructor(ctx: ExistsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXISTS, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExistsDatabaseStatement) {
            return visitor.visitExistsDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsTableStatementContext extends ExistsStatementContext {
    public constructor(ctx: ExistsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXISTS, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExistsTableStatement) {
            return visitor.visitExistsTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_explainStatement;
    }
    public override copyFrom(ctx: ExplainStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainASTStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public AST(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AST, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainASTStatement) {
            return visitor.visitExplainASTStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainQueryTreeStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public QUERY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.QUERY, 0)!;
    }
    public TREE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TREE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainQueryTreeStatement) {
            return visitor.visitExplainQueryTreeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainPlanStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public PLAN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PLAN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainPlanStatement) {
            return visitor.visitExplainPlanStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainDefaultStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainDefaultStatement) {
            return visitor.visitExplainDefaultStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainEstimateStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public ESTIMATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ESTIMATE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainEstimateStatement) {
            return visitor.visitExplainEstimateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainSyntaxStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public SYNTAX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SYNTAX, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainSyntaxStatement) {
            return visitor.visitExplainSyntaxStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainPipelineStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public PIPELINE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PIPELINE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainPipelineStatement) {
            return visitor.visitExplainPipelineStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode[];
    public GRANT(i: number): antlr.TerminalNode | null;
    public GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.GRANT);
    	} else {
    		return this.getToken(ClickHouseParser.GRANT, i);
    	}
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ON, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public userExpressionList(): UserExpressionListContext {
        return this.getRuleContext(0, UserExpressionListContext)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.WITH);
    	} else {
    		return this.getToken(ClickHouseParser.WITH, i);
    	}
    }
    public OPTION(): antlr.TerminalNode[];
    public OPTION(i: number): antlr.TerminalNode | null;
    public OPTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.OPTION);
    	} else {
    		return this.getToken(ClickHouseParser.OPTION, i);
    	}
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public ASTERISK(): antlr.TerminalNode[];
    public ASTERISK(i: number): antlr.TerminalNode | null;
    public ASTERISK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ASTERISK);
    	} else {
    		return this.getToken(ClickHouseParser.ASTERISK, i);
    	}
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_grantStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGrantStatement) {
            return visitor.visitGrantStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifier(): UserIdentifierContext[];
    public userIdentifier(i: number): UserIdentifierContext | null;
    public userIdentifier(i?: number): UserIdentifierContext[] | UserIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserIdentifierContext);
        }

        return this.getRuleContext(i, UserIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserExpressionList) {
            return visitor.visitUserExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT_USER, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserIdentifier) {
            return visitor.visitUserIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectPrivilege) {
            return visitor.visitSelectPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INSERT, 0)!;
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_insertPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInsertPrivilege) {
            return visitor.visitInsertPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatePrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public ARBITRARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARBITRARY, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreatePrivilege) {
            return visitor.visitCreatePrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dropPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropPrivilege) {
            return visitor.visitDropPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DATABASES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASES, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLES, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMNS, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_showPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowPrivilege) {
            return visitor.visitShowPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntrospectionPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTROSPECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTROSPECTION, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTIONS, 0);
    }
    public ADDRESSTOLINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINE, 0);
    }
    public ADDRESSTOLINEWITHINLINES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINEWITHINLINES, 0);
    }
    public ADDRESSTOSYMBOL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOSYMBOL, 0);
    }
    public DEMANGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEMANGLE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_introspectionPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIntrospectionPrivilege) {
            return visitor.visitIntrospectionPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourcePrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SOURCES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCES, 0);
    }
    public AZURE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AZURE, 0);
    }
    public FILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FILE, 0);
    }
    public HDFS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HDFS, 0);
    }
    public HIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HIVE, 0);
    }
    public JDBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JDBC, 0);
    }
    public MONGO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONGO, 0);
    }
    public MYSQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQL, 0);
    }
    public ODBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ODBC, 0);
    }
    public POSTGRES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POSTGRES, 0);
    }
    public REDIS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REDIS, 0);
    }
    public REMOTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOTE, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.S3, 0);
    }
    public SQLITE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQLITE, 0);
    }
    public URL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.URL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sourcePrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSourcePrivilege) {
            return visitor.visitSourcePrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DICTGET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGET, 0);
    }
    public DICTHAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTHAS, 0);
    }
    public DICTGETHIERARCHY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGETHIERARCHY, 0);
    }
    public DICTISIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTISIN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictPrivilege) {
            return visitor.visitDictPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UPDATE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADD, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MODIFY, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public CLEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLEAR, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RENAME, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public MATERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORDER, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAMPLE, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SETTING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTING, 0);
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVE, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCH, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARTITION, 0);
    }
    public PART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PART, 0);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FREEZE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REFRESH, 0);
    }
    public LIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIVE, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECURITY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterPrivilege) {
            return visitor.visitAlterPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AccessManagementPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ACCESS, 0);
    }
    public MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MANAGEMENT, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLE, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICY, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public QUOTA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUOTA, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILE, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW, 0);
    }
    public SHOW_USERS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_USERS, 0);
    }
    public SHOW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROLES, 0);
    }
    public SHOW_ROW_POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROW_POLICIES, 0);
    }
    public POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICIES, 0);
    }
    public SHOW_QUOTAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_QUOTAS, 0);
    }
    public SHOW_SETTINGS_PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_SETTINGS_PROFILES, 0);
    }
    public PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILES, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECURITY, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public ALLOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALLOW, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_accessManagementPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAccessManagementPrivilege) {
            return visitor.visitAccessManagementPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectPrivilege(): SelectPrivilegeContext | null {
        return this.getRuleContext(0, SelectPrivilegeContext);
    }
    public insertPrivilege(): InsertPrivilegeContext | null {
        return this.getRuleContext(0, InsertPrivilegeContext);
    }
    public createPrivilege(): CreatePrivilegeContext | null {
        return this.getRuleContext(0, CreatePrivilegeContext);
    }
    public dropPrivilege(): DropPrivilegeContext | null {
        return this.getRuleContext(0, DropPrivilegeContext);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRUNCATE, 0);
    }
    public KILL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KILL, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY, 0);
    }
    public OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0);
    }
    public showPrivilege(): ShowPrivilegeContext | null {
        return this.getRuleContext(0, ShowPrivilegeContext);
    }
    public introspectionPrivilege(): IntrospectionPrivilegeContext | null {
        return this.getRuleContext(0, IntrospectionPrivilegeContext);
    }
    public sourcePrivilege(): SourcePrivilegeContext | null {
        return this.getRuleContext(0, SourcePrivilegeContext);
    }
    public dictPrivilege(): DictPrivilegeContext | null {
        return this.getRuleContext(0, DictPrivilegeContext);
    }
    public alterPrivilege(): AlterPrivilegeContext | null {
        return this.getRuleContext(0, AlterPrivilegeContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public DISPLAYSECRETSINSHOWANDSELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT, 0);
    }
    public accessManagementPrivilege(): AccessManagementPrivilegeContext | null {
        return this.getRuleContext(0, AccessManagementPrivilegeContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_privilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INSERT, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INTO, 0)!;
    }
    public dataClause(): DataClauseContext {
        return this.getRuleContext(0, DataClauseContext)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext | null {
        return this.getRuleContext(0, TableFunctionExpressionContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_insertStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext[];
    public columnIdentifier(i: number): ColumnIdentifierContext | null;
    public columnIdentifier(i?: number): ColumnIdentifierContext[] | ColumnIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnIdentifierContext);
        }

        return this.getRuleContext(i, ColumnIdentifierContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsClause) {
            return visitor.visitColumnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dataClause;
    }
    public override copyFrom(ctx: DataClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class DataClauseValuesContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valuesStatement(): ValuesStatementContext {
        return this.getRuleContext(0, ValuesStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseValues) {
            return visitor.visitDataClauseValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DataClauseFormatContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FORMAT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FORMAT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseFormat) {
            return visitor.visitDataClauseFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DataClauseSelectContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseSelect) {
            return visitor.visitDataClauseSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VALUES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valuesStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValuesStatement) {
            return visitor.visitValuesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KillStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_killStatement;
    }
    public override copyFrom(ctx: KillStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class KillMutationStatementContext extends KillStatementContext {
    public constructor(ctx: KillStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KILL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KILL, 0)!;
    }
    public MUTATION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MUTATION, 0)!;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(0, WhereClauseContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASYNC, 0);
    }
    public TEST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEST, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKillMutationStatement) {
            return visitor.visitKillMutationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptimizeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIMIZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public DEDUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_optimizeStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOptimizeStatement) {
            return visitor.visitOptimizeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RENAME, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext[];
    public tableIdentifier(i: number): TableIdentifierContext | null;
    public tableIdentifier(i?: number): TableIdentifierContext[] | TableIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableIdentifierContext);
        }

        return this.getRuleContext(i, TableIdentifierContext);
    }
    public TO(): antlr.TerminalNode[];
    public TO(i: number): antlr.TerminalNode | null;
    public TO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.TO);
    	} else {
    		return this.getToken(ClickHouseParser.TO, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_renameStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRenameStatement) {
            return visitor.visitRenameStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProjectionSelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public projectionOrderByClause(): ProjectionOrderByClauseContext | null {
        return this.getRuleContext(0, ProjectionOrderByClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_projectionSelectStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitProjectionSelectStatement) {
            return visitor.visitProjectionSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectUnionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatementWithParentheses(): SelectStatementWithParenthesesContext[];
    public selectStatementWithParentheses(i: number): SelectStatementWithParenthesesContext | null;
    public selectStatementWithParentheses(i?: number): SelectStatementWithParenthesesContext[] | SelectStatementWithParenthesesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectStatementWithParenthesesContext);
        }

        return this.getRuleContext(i, SelectStatementWithParenthesesContext);
    }
    public UNION(): antlr.TerminalNode[];
    public UNION(i: number): antlr.TerminalNode | null;
    public UNION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.UNION);
    	} else {
    		return this.getToken(ClickHouseParser.UNION, i);
    	}
    }
    public ALL(): antlr.TerminalNode[];
    public ALL(i: number): antlr.TerminalNode | null;
    public ALL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ALL);
    	} else {
    		return this.getToken(ClickHouseParser.ALL, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectUnionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectUnionStatement) {
            return visitor.visitSelectUnionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementWithParenthesesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public selectUnionStatement(): SelectUnionStatementContext | null {
        return this.getRuleContext(0, SelectUnionStatementContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectStatementWithParentheses;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatementWithParentheses) {
            return visitor.visitSelectStatementWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public topClause(): TopClauseContext | null {
        return this.getRuleContext(0, TopClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public arrayJoinClause(): ArrayJoinClauseContext | null {
        return this.getRuleContext(0, ArrayJoinClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public prewhereClause(): PrewhereClauseContext | null {
        return this.getRuleContext(0, PrewhereClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.WITH);
    	} else {
    		return this.getToken(ClickHouseParser.WITH, i);
    	}
    }
    public TOTALS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOTALS, 0);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitByClause(): LimitByClauseContext | null {
        return this.getRuleContext(0, LimitByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WITH, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_withClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TopClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TOP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TOP, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_topClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTopClause) {
            return visitor.visitTopClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public joinExpression(): JoinExpressionContext {
        return this.getRuleContext(0, JoinExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_fromClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayJoinClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARRAY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ARRAY, 0)!;
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.JOIN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_arrayJoinClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitArrayJoinClause) {
            return visitor.visitArrayJoinClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WINDOW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public windowExpression(): WindowExpressionContext {
        return this.getRuleContext(0, WindowExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrewhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PREWHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PREWHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_prewhereClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrewhereClause) {
            return visitor.visitPrewhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_whereClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GROUP, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_groupByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HAVING(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.HAVING, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_havingClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public orderExpressionList(): OrderExpressionListContext {
        return this.getRuleContext(0, OrderExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderByClause) {
            return visitor.visitOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProjectionOrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_projectionOrderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitProjectionOrderByClause) {
            return visitor.visitProjectionOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIMIT, 0)!;
    }
    public limitExpression(): LimitExpressionContext {
        return this.getRuleContext(0, LimitExpressionContext)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitByClause) {
            return visitor.visitLimitByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIMIT, 0)!;
    }
    public limitExpression(): LimitExpressionContext {
        return this.getRuleContext(0, LimitExpressionContext)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingsClause) {
            return visitor.visitSettingsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinExpression;
    }
    public override copyFrom(ctx: JoinExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class JoinExpressionParensContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public joinExpression(): JoinExpressionContext {
        return this.getRuleContext(0, JoinExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionParens) {
            return visitor.visitJoinExpressionParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionTableContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public sampleClause(): SampleClauseContext | null {
        return this.getRuleContext(0, SampleClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionTable) {
            return visitor.visitJoinExpressionTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionCrossOpContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public joinExpression(): JoinExpressionContext[];
    public joinExpression(i: number): JoinExpressionContext | null;
    public joinExpression(i?: number): JoinExpressionContext[] | JoinExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinExpressionContext);
        }

        return this.getRuleContext(i, JoinExpressionContext);
    }
    public joinOperatorCross(): JoinOperatorCrossContext {
        return this.getRuleContext(0, JoinOperatorCrossContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionCrossOp) {
            return visitor.visitJoinExpressionCrossOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionOpContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public joinExpression(): JoinExpressionContext[];
    public joinExpression(i: number): JoinExpressionContext | null;
    public joinExpression(i?: number): JoinExpressionContext[] | JoinExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinExpressionContext);
        }

        return this.getRuleContext(i, JoinExpressionContext);
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.JOIN, 0)!;
    }
    public joinConstraintClause(): JoinConstraintClauseContext {
        return this.getRuleContext(0, JoinConstraintClauseContext)!;
    }
    public joinOperator(): JoinOperatorContext | null {
        return this.getRuleContext(0, JoinOperatorContext);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionOp) {
            return visitor.visitJoinExpressionOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinOperator;
    }
    public override copyFrom(ctx: JoinOperatorContext): void {
        super.copyFrom(ctx);
    }
}
export class JoinOpFullContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FULL, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpFull) {
            return visitor.visitJoinOpFull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinOpInnerContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpInner) {
            return visitor.visitJoinOpInner(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinOpLeftRightContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RIGHT, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMI, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANTI, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpLeftRight) {
            return visitor.visitJoinOpLeftRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinOperatorCrossContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CROSS, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JOIN, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinOperatorCross;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOperatorCross) {
            return visitor.visitJoinOperatorCross(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinConstraintClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ON, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USING, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinConstraintClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinConstraintClause) {
            return visitor.visitJoinConstraintClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAMPLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SAMPLE, 0)!;
    }
    public ratioExpression(): RatioExpressionContext[];
    public ratioExpression(i: number): RatioExpressionContext | null;
    public ratioExpression(i?: number): RatioExpressionContext[] | RatioExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RatioExpressionContext);
        }

        return this.getRuleContext(i, RatioExpressionContext);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sampleClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSampleClause) {
            return visitor.visitSampleClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitExpression) {
            return visitor.visitLimitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public orderExpression(): OrderExpressionContext[];
    public orderExpression(i: number): OrderExpressionContext | null;
    public orderExpression(i?: number): OrderExpressionContext[] | OrderExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderExpressionContext);
        }

        return this.getRuleContext(i, OrderExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderExpressionList) {
            return visitor.visitOrderExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULLS, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLATE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public ASCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASCENDING, 0);
    }
    public DESCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCENDING, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAST, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderExpression) {
            return visitor.visitOrderExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RatioExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numberLiteral(): NumberLiteralContext[];
    public numberLiteral(i: number): NumberLiteralContext | null;
    public numberLiteral(i?: number): NumberLiteralContext[] | NumberLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumberLiteralContext);
        }

        return this.getRuleContext(i, NumberLiteralContext);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SLASH, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ratioExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRatioExpression) {
            return visitor.visitRatioExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public settingExpression(): SettingExpressionContext[];
    public settingExpression(i: number): SettingExpressionContext | null;
    public settingExpression(i?: number): SettingExpressionContext[] | SettingExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SettingExpressionContext);
        }

        return this.getRuleContext(i, SettingExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingExpressionList) {
            return visitor.visitSettingExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public literal(): LiteralContext {
        return this.getRuleContext(0, LiteralContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingExpression) {
            return visitor.visitSettingExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowPartitionByClause(): WindowPartitionByClauseContext | null {
        return this.getRuleContext(0, WindowPartitionByClauseContext);
    }
    public windowOrderByClause(): WindowOrderByClauseContext | null {
        return this.getRuleContext(0, WindowOrderByClauseContext);
    }
    public windowFrameClause(): WindowFrameClauseContext | null {
        return this.getRuleContext(0, WindowFrameClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowExpression) {
            return visitor.visitWindowExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowPartitionByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowPartitionByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowPartitionByClause) {
            return visitor.visitWindowPartitionByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowOrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public orderExpressionList(): OrderExpressionListContext {
        return this.getRuleContext(0, OrderExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowOrderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowOrderByClause) {
            return visitor.visitWindowOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameExtend(): WindowFrameExtendContext {
        return this.getRuleContext(0, WindowFrameExtendContext)!;
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANGE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrameClause) {
            return visitor.visitWindowFrameClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameExtendContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameExtend;
    }
    public override copyFrom(ctx: WindowFrameExtendContext): void {
        super.copyFrom(ctx);
    }
}
export class FrameStartContext extends WindowFrameExtendContext {
    public constructor(ctx: WindowFrameExtendContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public windowFrameBound(): WindowFrameBoundContext {
        return this.getRuleContext(0, WindowFrameBoundContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFrameStart) {
            return visitor.visitFrameStart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FrameBetweenContext extends WindowFrameExtendContext {
    public constructor(ctx: WindowFrameExtendContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BETWEEN, 0)!;
    }
    public windowFrameBound(): WindowFrameBoundContext[];
    public windowFrameBound(i: number): WindowFrameBoundContext | null;
    public windowFrameBound(i?: number): WindowFrameBoundContext[] | WindowFrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowFrameBoundContext);
        }

        return this.getRuleContext(i, WindowFrameBoundContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFrameBetween) {
            return visitor.visitFrameBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNBOUNDED, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOLLOWING, 0);
    }
    public numberLiteral(): NumberLiteralContext | null {
        return this.getRuleContext(0, NumberLiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameBound;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrameBound) {
            return visitor.visitWindowFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SET, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_setStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSetStatement) {
            return visitor.visitSetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_showStatement;
    }
    public override copyFrom(ctx: ShowStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowCreateTableStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTableStatement) {
            return visitor.visitShowCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateDictionaryStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateDictionaryStatement) {
            return visitor.visitShowCreateDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLES, 0)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowTablesStatement) {
            return visitor.visitShowTablesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDictionariesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DICTIONARIES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowDictionariesStatement) {
            return visitor.visitShowDictionariesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateDatabaseStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateDatabaseStatement) {
            return visitor.visitShowCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDatabasesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DATABASES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASES, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowDatabasesStatement) {
            return visitor.visitShowDatabasesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SystemStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SYSTEM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SYSTEM, 0)!;
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLUSH, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOGS, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RELOAD, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.START, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STOP, 0);
    }
    public SENDS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SENDS, 0);
    }
    public FETCHES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCHES, 0);
    }
    public MERGES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MERGES, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public REPLICATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATED, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICA, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_systemStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSystemStatement) {
            return visitor.visitSystemStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUNCATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TRUNCATE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_truncateStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateStatement) {
            return visitor.visitTruncateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.USE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_useStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUseStatement) {
            return visitor.visitUseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WatchStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WATCH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WATCH, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public EVENTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EVENTS, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMIT, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_watchStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWatchStatement) {
            return visitor.visitWatchStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnTypeExpression;
    }
    public override copyFrom(ctx: ColumnTypeExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnTypeExpressionComplexContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext[];
    public columnTypeExpression(i: number): ColumnTypeExpressionContext | null;
    public columnTypeExpression(i?: number): ColumnTypeExpressionContext[] | ColumnTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeExpressionContext);
        }

        return this.getRuleContext(i, ColumnTypeExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionComplex) {
            return visitor.visitColumnTypeExpressionComplex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionEnumContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public enumValue(): EnumValueContext[];
    public enumValue(i: number): EnumValueContext | null;
    public enumValue(i?: number): EnumValueContext[] | EnumValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(EnumValueContext);
        }

        return this.getRuleContext(i, EnumValueContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionEnum) {
            return visitor.visitColumnTypeExpressionEnum(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionNestedContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext[];
    public columnTypeExpression(i: number): ColumnTypeExpressionContext | null;
    public columnTypeExpression(i?: number): ColumnTypeExpressionContext[] | ColumnTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeExpressionContext);
        }

        return this.getRuleContext(i, ColumnTypeExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionNested) {
            return visitor.visitColumnTypeExpressionNested(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionParamContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionParam) {
            return visitor.visitColumnTypeExpressionParam(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionSimpleContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionSimple) {
            return visitor.visitColumnTypeExpressionSimple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnsExpression(): ColumnsExpressionContext[];
    public columnsExpression(i: number): ColumnsExpressionContext | null;
    public columnsExpression(i?: number): ColumnsExpressionContext[] | ColumnsExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnsExpressionContext);
        }

        return this.getRuleContext(i, ColumnsExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionList) {
            return visitor.visitColumnExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnsExpression;
    }
    public override copyFrom(ctx: ColumnsExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnsExpressionAsteriskContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ASTERISK, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionAsterisk) {
            return visitor.visitColumnsExpressionAsterisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnsExpressionSubqueryContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionSubquery) {
            return visitor.visitColumnsExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnsExpressionColumnContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionColumn) {
            return visitor.visitColumnsExpressionColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnExpression;
    }
    public override copyFrom(ctx: ColumnExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnExpressionIsNullContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.IS, 0)!;
    }
    public NULL_SQL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NULL_SQL, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionIsNull) {
            return visitor.visitColumnExpressionIsNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTupleContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTuple) {
            return visitor.visitColumnExpressionTuple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAndContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAnd) {
            return visitor.visitColumnExpressionAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionDateContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionDate) {
            return visitor.visitColumnExpressionDate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionBetweenContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BETWEEN, 0)!;
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionBetween) {
            return visitor.visitColumnExpressionBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTrimContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRIM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TRIM, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BOTH, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEADING, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRAILING, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTrim) {
            return visitor.visitColumnExpressionTrim(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionNotContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NOT, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionNot) {
            return visitor.visitColumnExpressionNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionSubstringContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SUBSTRING(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SUBSTRING, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionSubstring) {
            return visitor.visitColumnExpressionSubstring(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionCaseContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.END, 0)!;
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public WHEN(): antlr.TerminalNode[];
    public WHEN(i: number): antlr.TerminalNode | null;
    public WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.WHEN);
    	} else {
    		return this.getToken(ClickHouseParser.WHEN, i);
    	}
    }
    public THEN(): antlr.TerminalNode[];
    public THEN(i: number): antlr.TerminalNode | null;
    public THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.THEN);
    	} else {
    		return this.getToken(ClickHouseParser.THEN, i);
    	}
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ELSE, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionCase) {
            return visitor.visitColumnExpressionCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionIdentifierContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionIdentifier) {
            return visitor.visitColumnExpressionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionArrayAccessContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LBRACKET, 0)!;
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RBRACKET, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionArrayAccess) {
            return visitor.visitColumnExpressionArrayAccess(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionFunctionContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public columnArgumentList(): ColumnArgumentListContext | null {
        return this.getRuleContext(0, ColumnArgumentListContext);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionFunction) {
            return visitor.visitColumnExpressionFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAsteriskContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ASTERISK, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAsterisk) {
            return visitor.visitColumnExpressionAsterisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionLiteralContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public literal(): LiteralContext {
        return this.getRuleContext(0, LiteralContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionLiteral) {
            return visitor.visitColumnExpressionLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionWinFunctionContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OVER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public windowExpression(): WindowExpressionContext {
        return this.getRuleContext(0, WindowExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionWinFunction) {
            return visitor.visitColumnExpressionWinFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTernaryOpContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public QUESTIONMARK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.QUESTIONMARK, 0)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLON, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTernaryOp) {
            return visitor.visitColumnExpressionTernaryOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionArrayContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LBRACKET, 0)!;
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RBRACKET, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionArray) {
            return visitor.visitColumnExpressionArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTupleAccessContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DOT, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTupleAccess) {
            return visitor.visitColumnExpressionTupleAccess(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionParensContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionParens) {
            return visitor.visitColumnExpressionParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionWinFunctionTargetContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OVER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionWinFunctionTarget) {
            return visitor.visitColumnExpressionWinFunctionTarget(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAliasContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public alias(): AliasContext | null {
        return this.getRuleContext(0, AliasContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAlias) {
            return visitor.visitColumnExpressionAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence3Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public EQ_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_DOUBLE, 0);
    }
    public EQ_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
    }
    public NOT_EQ(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT_EQ, 0);
    }
    public LE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LE, 0);
    }
    public GE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GE, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GT, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ILIKE, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence3) {
            return visitor.visitColumnExpressionPrecedence3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTimestampContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIMESTAMP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TIMESTAMP, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTimestamp) {
            return visitor.visitColumnExpressionTimestamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence2Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLUS, 0);
    }
    public DASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DASH, 0);
    }
    public CONCAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONCAT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence2) {
            return visitor.visitColumnExpressionPrecedence2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence1Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PERCENT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence1) {
            return visitor.visitColumnExpressionPrecedence1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionIntervalContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INTERVAL, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionInterval) {
            return visitor.visitColumnExpressionInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionSubqueryContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionSubquery) {
            return visitor.visitColumnExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionNegateContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DASH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DASH, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionNegate) {
            return visitor.visitColumnExpressionNegate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionExtractContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXTRACT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXTRACT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionExtract) {
            return visitor.visitColumnExpressionExtract(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionCastContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionCast) {
            return visitor.visitColumnExpressionCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionOrContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public OR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OR, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionOr) {
            return visitor.visitColumnExpressionOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnArgumentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnArgumentExpression(): ColumnArgumentExpressionContext[];
    public columnArgumentExpression(i: number): ColumnArgumentExpressionContext | null;
    public columnArgumentExpression(i?: number): ColumnArgumentExpressionContext[] | ColumnArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnArgumentExpressionContext);
        }

        return this.getRuleContext(i, ColumnArgumentExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnArgumentList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnArgumentList) {
            return visitor.visitColumnArgumentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnArgumentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnLambdaExpression(): ColumnLambdaExpressionContext | null {
        return this.getRuleContext(0, ColumnLambdaExpressionContext);
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnArgumentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnArgumentExpression) {
            return visitor.visitColumnArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnLambdaExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARROW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ARROW, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnLambdaExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnLambdaExpression) {
            return visitor.visitColumnLambdaExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DOT);
    	} else {
    		return this.getToken(ClickHouseParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnIdentifier) {
            return visitor.visitColumnIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableExpression;
    }
    public override copyFrom(ctx: TableExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class TableExpressionFunctionContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        return this.getRuleContext(0, TableFunctionExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionFunction) {
            return visitor.visitTableExpressionFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionIdentifierContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionIdentifier) {
            return visitor.visitTableExpressionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionAliasContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public alias(): AliasContext | null {
        return this.getRuleContext(0, AliasContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionAlias) {
            return visitor.visitTableExpressionAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionSubqueryContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionSubquery) {
            return visitor.visitTableExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public tableArgList(): TableArgListContext | null {
        return this.getRuleContext(0, TableArgListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableFunctionExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionExpression) {
            return visitor.visitTableFunctionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdentifier) {
            return visitor.visitTableIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgExpression(): TableArgExpressionContext[];
    public tableArgExpression(i: number): TableArgExpressionContext | null;
    public tableArgExpression(i?: number): TableArgExpressionContext[] | TableArgExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableArgExpressionContext);
        }

        return this.getRuleContext(i, TableArgExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableArgList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgList) {
            return visitor.visitTableArgList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext | null {
        return this.getRuleContext(0, TableFunctionExpressionContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableArgExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgExpression) {
            return visitor.visitTableArgExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_databaseIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseIdentifier) {
            return visitor.visitDatabaseIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloatingLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLOATING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLOATING_LITERAL, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode[];
    public DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
    	}
    }
    public OCTAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_floatingLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFloatingLiteral) {
            return visitor.visitFloatingLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public floatingLiteral(): FloatingLiteralContext | null {
        return this.getRuleContext(0, FloatingLiteralContext);
    }
    public OCTAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public HEXADECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HEXADECIMAL_LITERAL, 0);
    }
    public INF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INF, 0);
    }
    public NAN_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAN_SQL, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLUS, 0);
    }
    public DASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DASH, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_numberLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNumberLiteral) {
            return visitor.visitNumberLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numberLiteral(): NumberLiteralContext | null {
        return this.getRuleContext(0, NumberLiteralContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public NULL_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULL_SQL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_literal;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECOND, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MINUTE, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HOUR, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DAY, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WEEK, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONTH, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUARTER, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.YEAR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_interval;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AND, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANTI, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARRAY, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public ASCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASCENDING, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public AST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AST, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASYNC, 0);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BETWEEN, 0);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BOTH, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public CASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CASE, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CAST, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CHECK, 0);
    }
    public CLEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLEAR, 0);
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLUSTER, 0);
    }
    public CODEC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CODEC, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLATE, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CROSS, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public DATABASES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASES, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATE, 0);
    }
    public DEDUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public DELAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELAY, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public DESCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCENDING, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ELSE, 0);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.END, 0);
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ENGINE, 0);
    }
    public EVENTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EVENTS, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXPLAIN, 0);
    }
    public EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXPRESSION, 0);
    }
    public EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXTRACT, 0);
    }
    public FETCHES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCHES, 0);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLUSH, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOLLOWING, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORMAT, 0);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FREEZE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FULL, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public GRANULARITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANULARITY, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GROUP, 0);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HAVING, 0);
    }
    public HIERARCHICAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HIERARCHICAL, 0);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ILIKE, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public INJECTIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INJECTIVE, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INSERT, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTERVAL, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTO, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IS, 0);
    }
    public IS_OBJECT_ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IS_OBJECT_ID, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JOIN, 0);
    }
    public JSON_FALSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON_FALSE, 0);
    }
    public JSON_TRUE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON_TRUE, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEY, 0);
    }
    public KILL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KILL, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAST, 0);
    }
    public LAYOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAYOUT, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEADING, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public LIFETIME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIFETIME, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMIT, 0);
    }
    public LIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIVE, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOGS, 0);
    }
    public MATERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public MERGES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MERGES, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MODIFY, 0);
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVE, 0);
    }
    public MUTATION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MUTATION, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULLS, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ON, 0);
    }
    public OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORDER, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public OUTFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTFILE, 0);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OVER, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARTITION, 0);
    }
    public POPULATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POPULATE, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRECEDING, 0);
    }
    public PREWHERE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PREWHERE, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRIMARY, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANGE, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RELOAD, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOVE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RENAME, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICA, 0);
    }
    public REPLICATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATED, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RIGHT, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWS, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAMPLE, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SELECT, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMI, 0);
    }
    public SENDS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SENDS, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SET, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCE, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.START, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STOP, 0);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SUBSTRING, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public SYNTAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNTAX, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYSTEM, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLES, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TEST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEST, 0);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.THEN, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public TIMEOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMEOUT, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMESTAMP, 0);
    }
    public TOTALS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOTALS, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRAILING, 0);
    }
    public TRIM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRIM, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRUNCATE, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public TOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOP, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TYPE, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNBOUNDED, 0);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNION, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UPDATE, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USE, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USING, 0);
    }
    public UUID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UUID, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VALUES, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public WATCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WATCH, 0);
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WHEN, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WHERE, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WINDOW, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANT, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCH, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REFRESH, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICY, 0);
    }
    public QUOTA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUOTA, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLE, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILE, 0);
    }
    public ARBITRARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARBITRARY, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMNS, 0);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT_USER, 0);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ACCESS, 0);
    }
    public SHOW_USERS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_USERS, 0);
    }
    public SHOW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROLES, 0);
    }
    public SHOW_ROW_POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROW_POLICIES, 0);
    }
    public SHOW_QUOTAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_QUOTAS, 0);
    }
    public SHOW_SETTINGS_PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_SETTINGS_PROFILES, 0);
    }
    public SHUTDOWN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHUTDOWN, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CACHE, 0);
    }
    public DNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DNS, 0);
    }
    public MARK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARK, 0);
    }
    public PART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PART, 0);
    }
    public UNCOMPRESSED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNCOMPRESSED, 0);
    }
    public CONFIG(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONFIG, 0);
    }
    public EMBEDDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EMBEDDED, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTIONS, 0);
    }
    public MOVES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVES, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATION, 0);
    }
    public QUEUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUEUES, 0);
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTART, 0);
    }
    public DICTGET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGET, 0);
    }
    public DICTGETHIERARCHY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGETHIERARCHY, 0);
    }
    public DICTHAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTHAS, 0);
    }
    public DICTISIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTISIN, 0);
    }
    public MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MANAGEMENT, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public INTROSPECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTROSPECTION, 0);
    }
    public ADDRESSTOLINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINE, 0);
    }
    public ADDRESSTOSYMBOL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOSYMBOL, 0);
    }
    public DEMANGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEMANGLE, 0);
    }
    public SOURCES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCES, 0);
    }
    public FILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FILE, 0);
    }
    public URL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.URL, 0);
    }
    public REMOTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOTE, 0);
    }
    public MYSQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQL, 0);
    }
    public ODBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ODBC, 0);
    }
    public JDBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JDBC, 0);
    }
    public HDFS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HDFS, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.S3, 0);
    }
    public SETTING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTING, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_keyword;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKeyword) {
            return visitor.visitKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordForAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATE, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_keywordForAlias;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKeywordForAlias) {
            return visitor.visitKeywordForAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IDENTIFIER, 0);
    }
    public keywordForAlias(): KeywordForAliasContext | null {
        return this.getRuleContext(0, KeywordForAliasContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alias;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlias) {
            return visitor.visitAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IDENTIFIER, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public keyword(): KeywordContext | null {
        return this.getRuleContext(0, KeywordContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierOrNullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public NULL_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULL_SQL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifierOrNull;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierOrNull) {
            return visitor.visitIdentifierOrNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnumValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public numberLiteral(): NumberLiteralContext {
        return this.getRuleContext(0, NumberLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_enumValue;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEnumValue) {
            return visitor.visitEnumValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
